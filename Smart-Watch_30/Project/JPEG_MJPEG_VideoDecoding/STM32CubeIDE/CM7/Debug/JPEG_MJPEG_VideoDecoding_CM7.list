
JPEG_MJPEG_VideoDecoding_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011374  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  08011614  08011614  00012614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011d94  08011d94  00012d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011d9c  08011d9c  00012d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011da0  08011da0  00012da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  20000000  08011da4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00018a68  20000060  08011e04  00013060  2**2
                  ALLOC
  8 ._user_heap_stack 00002400  20018ac8  08011e04  00013ac8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00013060  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022f18  00000000  00000000  0001308e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000495c  00000000  00000000  00035fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a10  00000000  00000000  0003a908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013cd  00000000  00000000  0003c318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00048eb9  00000000  00000000  0003d6e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028c8c  00000000  00000000  0008659e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001d3855  00000000  00000000  000af22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00282a7f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007040  00000000  00000000  00282ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000a3  00000000  00000000  00289b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000060 	.word	0x20000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080115fc 	.word	0x080115fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000064 	.word	0x20000064
 80002dc:	080115fc 	.word	0x080115fc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <IS42S32800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S32800J_ERROR;
 800038a:	f04f 33ff 	mov.w	r3, #4294967295
 800038e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4619      	mov	r1, r3
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f000 f832 	bl	8000400 <IS42S32800J_ClockEnable>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d128      	bne.n	80003f4 <IS42S32800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S32800J_Delay(1);
 80003a2:	2001      	movs	r0, #1
 80003a4:	f000 f8e2 	bl	800056c <IS42S32800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4619      	mov	r1, r3
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f000 f84a 	bl	8000448 <IS42S32800J_Precharge>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d11c      	bne.n	80003f4 <IS42S32800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	6819      	ldr	r1, [r3, #0]
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	461a      	mov	r2, r3
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f000 f897 	bl	80004f8 <IS42S32800J_RefreshMode>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d111      	bne.n	80003f4 <IS42S32800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 80003d0:	6839      	ldr	r1, [r7, #0]
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f000 f85c 	bl	8000490 <IS42S32800J_ModeRegConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d10a      	bne.n	80003f4 <IS42S32800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	4619      	mov	r1, r3
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f000 f8ad 	bl	8000544 <IS42S32800J_RefreshRate>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d101      	bne.n	80003f4 <IS42S32800J_Init+0x74>
          {
            ret = IS42S32800J_OK;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 80003f4:	68fb      	ldr	r3, [r7, #12]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 800040a:	4b0e      	ldr	r3, [pc, #56]	@ (8000444 <IS42S32800J_ClockEnable+0x44>)
 800040c:	2201      	movs	r2, #1
 800040e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000410:	4a0c      	ldr	r2, [pc, #48]	@ (8000444 <IS42S32800J_ClockEnable+0x44>)
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000416:	4b0b      	ldr	r3, [pc, #44]	@ (8000444 <IS42S32800J_ClockEnable+0x44>)
 8000418:	2201      	movs	r2, #1
 800041a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800041c:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <IS42S32800J_ClockEnable+0x44>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000422:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000426:	4907      	ldr	r1, [pc, #28]	@ (8000444 <IS42S32800J_ClockEnable+0x44>)
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f009 fcc5 	bl	8009db8 <HAL_SDRAM_SendCommand>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d002      	beq.n	800043a <IS42S32800J_ClockEnable+0x3a>
  {
    return IS42S32800J_ERROR;
 8000434:	f04f 33ff 	mov.w	r3, #4294967295
 8000438:	e000      	b.n	800043c <IS42S32800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 800043a:	2300      	movs	r3, #0
  }
}
 800043c:	4618      	mov	r0, r3
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	2000007c 	.word	0x2000007c

08000448 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8000452:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <IS42S32800J_Precharge+0x44>)
 8000454:	2202      	movs	r2, #2
 8000456:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000458:	4a0c      	ldr	r2, [pc, #48]	@ (800048c <IS42S32800J_Precharge+0x44>)
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800045e:	4b0b      	ldr	r3, [pc, #44]	@ (800048c <IS42S32800J_Precharge+0x44>)
 8000460:	2201      	movs	r2, #1
 8000462:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000464:	4b09      	ldr	r3, [pc, #36]	@ (800048c <IS42S32800J_Precharge+0x44>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800046a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800046e:	4907      	ldr	r1, [pc, #28]	@ (800048c <IS42S32800J_Precharge+0x44>)
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f009 fca1 	bl	8009db8 <HAL_SDRAM_SendCommand>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d002      	beq.n	8000482 <IS42S32800J_Precharge+0x3a>
  {
    return IS42S32800J_ERROR;
 800047c:	f04f 33ff 	mov.w	r3, #4294967295
 8000480:	e000      	b.n	8000484 <IS42S32800J_Precharge+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 8000482:	2300      	movs	r3, #0
  }
}
 8000484:	4618      	mov	r0, r3
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	2000007c 	.word	0x2000007c

08000490 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80004a2:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 80004a8:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 80004ae:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80004b4:	4313      	orrs	r3, r2
 80004b6:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80004b8:	4b0e      	ldr	r3, [pc, #56]	@ (80004f4 <IS42S32800J_ModeRegConfig+0x64>)
 80004ba:	2204      	movs	r2, #4
 80004bc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a0c      	ldr	r2, [pc, #48]	@ (80004f4 <IS42S32800J_ModeRegConfig+0x64>)
 80004c4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	@ (80004f4 <IS42S32800J_ModeRegConfig+0x64>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80004cc:	4a09      	ldr	r2, [pc, #36]	@ (80004f4 <IS42S32800J_ModeRegConfig+0x64>)
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80004d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80004d6:	4907      	ldr	r1, [pc, #28]	@ (80004f4 <IS42S32800J_ModeRegConfig+0x64>)
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f009 fc6d 	bl	8009db8 <HAL_SDRAM_SendCommand>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d002      	beq.n	80004ea <IS42S32800J_ModeRegConfig+0x5a>
  {
    return IS42S32800J_ERROR;
 80004e4:	f04f 33ff 	mov.w	r3, #4294967295
 80004e8:	e000      	b.n	80004ec <IS42S32800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S32800J_OK;
 80004ea:	2300      	movs	r3, #0
  }
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	2000007c 	.word	0x2000007c

080004f8 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8000504:	4a0e      	ldr	r2, [pc, #56]	@ (8000540 <IS42S32800J_RefreshMode+0x48>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800050a:	4a0d      	ldr	r2, [pc, #52]	@ (8000540 <IS42S32800J_RefreshMode+0x48>)
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000510:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <IS42S32800J_RefreshMode+0x48>)
 8000512:	2208      	movs	r2, #8
 8000514:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000516:	4b0a      	ldr	r3, [pc, #40]	@ (8000540 <IS42S32800J_RefreshMode+0x48>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800051c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000520:	4907      	ldr	r1, [pc, #28]	@ (8000540 <IS42S32800J_RefreshMode+0x48>)
 8000522:	68f8      	ldr	r0, [r7, #12]
 8000524:	f009 fc48 	bl	8009db8 <HAL_SDRAM_SendCommand>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d002      	beq.n	8000534 <IS42S32800J_RefreshMode+0x3c>
  {
    return IS42S32800J_ERROR;
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
 8000532:	e000      	b.n	8000536 <IS42S32800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S32800J_OK;
 8000534:	2300      	movs	r3, #0
  }
}
 8000536:	4618      	mov	r0, r3
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	2000007c 	.word	0x2000007c

08000544 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800054e:	6839      	ldr	r1, [r7, #0]
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f009 fc66 	bl	8009e22 <HAL_SDRAM_ProgramRefreshRate>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d002      	beq.n	8000562 <IS42S32800J_RefreshRate+0x1e>
  {
    return IS42S32800J_ERROR;
 800055c:	f04f 33ff 	mov.w	r3, #4294967295
 8000560:	e000      	b.n	8000564 <IS42S32800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S32800J_OK;
 8000562:	2300      	movs	r3, #0
  }
}
 8000564:	4618      	mov	r0, r3
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <IS42S32800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay : specifies the delay time length, in milliseconds
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8000574:	f000 fcc6 	bl	8000f04 <HAL_GetTick>
 8000578:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800057a:	bf00      	nop
 800057c:	f000 fcc2 	bl	8000f04 <HAL_GetTick>
 8000580:	4602      	mov	r2, r0
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	429a      	cmp	r2, r3
 800058a:	d8f7      	bhi.n	800057c <IS42S32800J_Delay+0x10>
  {
  }
  return IS42S32800J_OK;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <BSP_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  Instance      SD Instance
  * @retval BSP status
  */
int32_t BSP_SD_Init(uint32_t Instance)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	@ 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef gpio_init_structure;

  if(Instance >= SD_INSTANCES_NBR)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d003      	beq.n	80005b2 <BSP_SD_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80005aa:	f06f 0301 	mvn.w	r3, #1
 80005ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80005b0:	e063      	b.n	800067a <BSP_SD_Init+0xe2>
  }
  else
  {
    /* Configure Input mode for SD detection pin */
    SD_DETECT_GPIO_CLK_ENABLE();
 80005b2:	4b34      	ldr	r3, [pc, #208]	@ (8000684 <BSP_SD_Init+0xec>)
 80005b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005b8:	4a32      	ldr	r2, [pc, #200]	@ (8000684 <BSP_SD_Init+0xec>)
 80005ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005c2:	4b30      	ldr	r3, [pc, #192]	@ (8000684 <BSP_SD_Init+0xec>)
 80005c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]
    gpio_init_structure.Pin = SD_DETECT_PIN;
 80005d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005d4:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80005da:	2302      	movs	r3, #2
 80005dc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	4619      	mov	r1, r3
 80005e8:	4827      	ldr	r0, [pc, #156]	@ (8000688 <BSP_SD_Init+0xf0>)
 80005ea:	f001 f95f 	bl	80018ac <HAL_GPIO_Init>

    if(BSP_SD_IsDetected(Instance) != SD_PRESENT)
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 f876 	bl	80006e0 <BSP_SD_IsDetected>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d003      	beq.n	8000602 <BSP_SD_Init+0x6a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80005fa:	f06f 0306 	mvn.w	r3, #6
 80005fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000600:	e03b      	b.n	800067a <BSP_SD_Init+0xe2>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SD initialization */
      SD_MspInit(&hsd_sdmmc[Instance]);
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	4613      	mov	r3, r2
 8000606:	015b      	lsls	r3, r3, #5
 8000608:	1a9b      	subs	r3, r3, r2
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4a1f      	ldr	r2, [pc, #124]	@ (800068c <BSP_SD_Init+0xf4>)
 800060e:	4413      	add	r3, r2
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f929 	bl	8000868 <SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS   */

      if(ret == BSP_ERROR_NONE)
 8000616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000618:	2b00      	cmp	r3, #0
 800061a:	d12e      	bne.n	800067a <BSP_SD_Init+0xe2>
      {
        /* HAL SD initialization and Enable wide operation   */
        if(MX_SDMMC1_SD_Init(&hsd_sdmmc[Instance]) != HAL_OK)
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	4613      	mov	r3, r2
 8000620:	015b      	lsls	r3, r3, #5
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	4a19      	ldr	r2, [pc, #100]	@ (800068c <BSP_SD_Init+0xf4>)
 8000628:	4413      	add	r3, r2
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f830 	bl	8000690 <MX_SDMMC1_SD_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d003      	beq.n	800063e <BSP_SD_Init+0xa6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8000636:	f06f 0303 	mvn.w	r3, #3
 800063a:	627b      	str	r3, [r7, #36]	@ 0x24
 800063c:	e01d      	b.n	800067a <BSP_SD_Init+0xe2>
        }
#if (USE_SD_BUS_WIDE_4B > 0)
        else if(HAL_SD_ConfigWideBusOperation(&hsd_sdmmc[Instance], SDMMC_BUS_WIDE_4B) != HAL_OK)
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	4613      	mov	r3, r2
 8000642:	015b      	lsls	r3, r3, #5
 8000644:	1a9b      	subs	r3, r3, r2
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	4a10      	ldr	r2, [pc, #64]	@ (800068c <BSP_SD_Init+0xf4>)
 800064a:	4413      	add	r3, r2
 800064c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000650:	4618      	mov	r0, r3
 8000652:	f008 fcf5 	bl	8009040 <HAL_SD_ConfigWideBusOperation>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d003      	beq.n	8000664 <BSP_SD_Init+0xcc>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800065c:	f06f 0303 	mvn.w	r3, #3
 8000660:	627b      	str	r3, [r7, #36]	@ 0x24
 8000662:	e00a      	b.n	800067a <BSP_SD_Init+0xe2>
        }
#endif
        else
        {
          /* Switch to High Speed mode if the card support this mode */
          (void)HAL_SD_ConfigSpeedBusOperation(&hsd_sdmmc[Instance], SDMMC_SPEED_MODE_HIGH);
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	4613      	mov	r3, r2
 8000668:	015b      	lsls	r3, r3, #5
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4a07      	ldr	r2, [pc, #28]	@ (800068c <BSP_SD_Init+0xf4>)
 8000670:	4413      	add	r3, r2
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f008 fdf5 	bl	8009264 <HAL_SD_ConfigSpeedBusOperation>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }
    }
  }
  return ret;
 800067a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800067c:	4618      	mov	r0, r3
 800067e:	3728      	adds	r7, #40	@ 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	58024400 	.word	0x58024400
 8000688:	58022000 	.word	0x58022000
 800068c:	2000008c 	.word	0x2000008c

08000690 <MX_SDMMC1_SD_Init>:
  * @brief  Initializes the SDMMC1 peripheral.
  * @param  hsd SD handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDMMC1_SD_Init(SD_HandleTypeDef *hsd)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]
  /* uSD device interface configuration */
  hsd->Instance                 = SDMMC1;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a0f      	ldr	r2, [pc, #60]	@ (80006dc <MX_SDMMC1_SD_Init+0x4c>)
 80006a0:	601a      	str	r2, [r3, #0]
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
  hsd->Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
#if (USE_SD_BUS_WIDE_4B > 0)
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_4B;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006b4:	60da      	str	r2, [r3, #12]
#else
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_1B;
#endif
  hsd->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  hsd->Init.TranceiverPresent   = SDMMC_TRANSCEIVER_PRESENT;
#endif /*USE_SD_TRANSCEIVER*/
#if ( USE_SD_HIGH_PERFORMANCE > 0 )
  hsd->Init.ClockDiv            = SDMMC_HSpeed_CLK_DIV;
#else
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2204      	movs	r2, #4
 80006c0:	615a      	str	r2, [r3, #20]
#endif /*USE_SD_HIGH_PERFORMANCE*/

  /* HAL SD initialization   */
  if(HAL_SD_Init(hsd) != HAL_OK)
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f007 fdec 	bl	80082a0 <HAL_SD_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_SDMMC1_SD_Init+0x42>
  {
    ret = HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
 80006d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	52007000 	.word	0x52007000

080006e0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @param Instance  SD Instance
 * @retval Returns if SD is detected or not
 */
int32_t BSP_SD_IsDetected(uint32_t Instance)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80006e8:	f06f 0305 	mvn.w	r3, #5
 80006ec:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d002      	beq.n	80006fa <BSP_SD_IsDetected+0x1a>
  {
    return BSP_ERROR_WRONG_PARAM;
 80006f4:	f06f 0301 	mvn.w	r3, #1
 80006f8:	e00f      	b.n	800071a <BSP_SD_IsDetected+0x3a>
  }
  else
  {
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 80006fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006fe:	4809      	ldr	r0, [pc, #36]	@ (8000724 <BSP_SD_IsDetected+0x44>)
 8000700:	f001 fa84 	bl	8001c0c <HAL_GPIO_ReadPin>
 8000704:	4603      	mov	r3, r0
 8000706:	60fb      	str	r3, [r7, #12]
    /* Check SD card detect pin */
    if(ret != GPIO_PIN_RESET)
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d002      	beq.n	8000714 <BSP_SD_IsDetected+0x34>
    {
      ret = (int32_t)SD_NOT_PRESENT;
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e001      	b.n	8000718 <BSP_SD_IsDetected+0x38>
    }
    else
    {
      ret = (int32_t)SD_PRESENT;
 8000714:	2301      	movs	r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000718:	68fb      	ldr	r3, [r7, #12]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	58022000 	.word	0x58022000

08000728 <BSP_SD_ReadBlocks>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of SD blocks to read
  * @retval BSP status
  */
int32_t BSP_SD_ReadBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af02      	add	r7, sp, #8
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	2264      	movs	r2, #100	@ 0x64
 800073e:	fb02 f303 	mul.w	r3, r2, r3
 8000742:	613b      	str	r3, [r7, #16]

  if(Instance >= SD_INSTANCES_NBR)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d003      	beq.n	8000752 <BSP_SD_ReadBlocks+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800074a:	f06f 0301 	mvn.w	r3, #1
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	e013      	b.n	800077a <BSP_SD_ReadBlocks+0x52>
  }
  else
  {
    if(HAL_SD_ReadBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	4613      	mov	r3, r2
 8000756:	015b      	lsls	r3, r3, #5
 8000758:	1a9b      	subs	r3, r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4a09      	ldr	r2, [pc, #36]	@ (8000784 <BSP_SD_ReadBlocks+0x5c>)
 800075e:	1898      	adds	r0, r3, r2
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	68b9      	ldr	r1, [r7, #8]
 800076a:	f007 fec3 	bl	80084f4 <HAL_SD_ReadBlocks>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d002      	beq.n	800077a <BSP_SD_ReadBlocks+0x52>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000774:	f06f 0303 	mvn.w	r3, #3
 8000778:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 800077a:	697b      	ldr	r3, [r7, #20]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2000008c 	.word	0x2000008c

08000788 <BSP_SD_WriteBlocks>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of SD blocks to write
  * @retval BSP status
  */
int32_t BSP_SD_WriteBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af02      	add	r7, sp, #8
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	2264      	movs	r2, #100	@ 0x64
 800079e:	fb02 f303 	mul.w	r3, r2, r3
 80007a2:	613b      	str	r3, [r7, #16]

  if(Instance >= SD_INSTANCES_NBR)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d003      	beq.n	80007b2 <BSP_SD_WriteBlocks+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80007aa:	f06f 0301 	mvn.w	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	e013      	b.n	80007da <BSP_SD_WriteBlocks+0x52>
  }
  else
  {
    if(HAL_SD_WriteBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	4613      	mov	r3, r2
 80007b6:	015b      	lsls	r3, r3, #5
 80007b8:	1a9b      	subs	r3, r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <BSP_SD_WriteBlocks+0x5c>)
 80007be:	1898      	adds	r0, r3, r2
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	f008 f81d 	bl	8008808 <HAL_SD_WriteBlocks>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d002      	beq.n	80007da <BSP_SD_WriteBlocks+0x52>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80007d4:	f06f 0303 	mvn.w	r3, #3
 80007d8:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 80007da:	697b      	ldr	r3, [r7, #20]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	2000008c 	.word	0x2000008c

080007e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
int32_t BSP_SD_GetCardState(uint32_t Instance)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  return (int32_t)((HAL_SD_GetCardState(&hsd_sdmmc[Instance]) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	4613      	mov	r3, r2
 80007f4:	015b      	lsls	r3, r3, #5
 80007f6:	1a9b      	subs	r3, r3, r2
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	4a07      	ldr	r2, [pc, #28]	@ (8000818 <BSP_SD_GetCardState+0x30>)
 80007fc:	4413      	add	r3, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f008 fdec 	bl	80093dc <HAL_SD_GetCardState>
 8000804:	4603      	mov	r3, r0
 8000806:	2b04      	cmp	r3, #4
 8000808:	bf14      	ite	ne
 800080a:	2301      	movne	r3, #1
 800080c:	2300      	moveq	r3, #0
 800080e:	b2db      	uxtb	r3, r3
}
 8000810:	4618      	mov	r0, r3
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000008c 	.word	0x2000008c

0800081c <BSP_SD_GetCardInfo>:
  * @param  Instance  SD Instance
  * @param  CardInfo  Pointer to HAL_SD_CardInfoTypedef structure
  * @retval BSP status
  */
int32_t BSP_SD_GetCardInfo(uint32_t Instance, BSP_SD_CardInfo *CardInfo)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d003      	beq.n	8000838 <BSP_SD_GetCardInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000830:	f06f 0301 	mvn.w	r3, #1
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	e010      	b.n	800085a <BSP_SD_GetCardInfo+0x3e>
  }
  else
  {
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	4613      	mov	r3, r2
 800083c:	015b      	lsls	r3, r3, #5
 800083e:	1a9b      	subs	r3, r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4a08      	ldr	r2, [pc, #32]	@ (8000864 <BSP_SD_GetCardInfo+0x48>)
 8000844:	4413      	add	r3, r2
 8000846:	6839      	ldr	r1, [r7, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f008 fbcd 	bl	8008fe8 <HAL_SD_GetCardInfo>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <BSP_SD_GetCardInfo+0x3e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000854:	f06f 0303 	mvn.w	r3, #3
 8000858:	60fb      	str	r3, [r7, #12]
    }
  }
  /* Return BSP status */
  return ret;
 800085a:	68fb      	ldr	r3, [r7, #12]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000008c 	.word	0x2000008c

08000868 <SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd  SD handle
  * @retval None
  */
static void SD_MspInit(SD_HandleTypeDef *hsd)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	@ 0x30
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;

  if(hsd == &hsd_sdmmc[0])
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a44      	ldr	r2, [pc, #272]	@ (8000984 <SD_MspInit+0x11c>)
 8000874:	4293      	cmp	r3, r2
 8000876:	f040 8081 	bne.w	800097c <SD_MspInit+0x114>
    therefore Camera must be power down before using the BSP SD
    To power down the camera , Set GPIOJ pin 14 to high
    */

    /* Enable GPIO J clock */
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800087a:	4b43      	ldr	r3, [pc, #268]	@ (8000988 <SD_MspInit+0x120>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000880:	4a41      	ldr	r2, [pc, #260]	@ (8000988 <SD_MspInit+0x120>)
 8000882:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000886:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800088a:	4b3f      	ldr	r3, [pc, #252]	@ (8000988 <SD_MspInit+0x120>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000890:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	69bb      	ldr	r3, [r7, #24]

    gpio_init_structure.Pin       = GPIO_PIN_14;
 8000898:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800089c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull      = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4836      	ldr	r0, [pc, #216]	@ (800098c <SD_MspInit+0x124>)
 80008b2:	f000 fffb 	bl	80018ac <HAL_GPIO_Init>

    /* Set the camera POWER_DOWN pin (active high) */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008bc:	4833      	ldr	r0, [pc, #204]	@ (800098c <SD_MspInit+0x124>)
 80008be:	f001 f9bd 	bl	8001c3c <HAL_GPIO_WritePin>
#endif

    /* Enable SDIO clock */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80008c2:	4b31      	ldr	r3, [pc, #196]	@ (8000988 <SD_MspInit+0x120>)
 80008c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80008c8:	4a2f      	ldr	r2, [pc, #188]	@ (8000988 <SD_MspInit+0x120>)
 80008ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008ce:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80008d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000988 <SD_MspInit+0x120>)
 80008d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80008d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	697b      	ldr	r3, [r7, #20]


    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e0:	4b29      	ldr	r3, [pc, #164]	@ (8000988 <SD_MspInit+0x120>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e6:	4a28      	ldr	r2, [pc, #160]	@ (8000988 <SD_MspInit+0x120>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f0:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <SD_MspInit+0x120>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <SD_MspInit+0x120>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000904:	4a20      	ldr	r2, [pc, #128]	@ (8000988 <SD_MspInit+0x120>)
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800090e:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <SD_MspInit+0x120>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000914:	f003 0304 	and.w	r3, r3, #4
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800091c:	4b1a      	ldr	r3, [pc, #104]	@ (8000988 <SD_MspInit+0x120>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000922:	4a19      	ldr	r2, [pc, #100]	@ (8000988 <SD_MspInit+0x120>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800092c:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <SD_MspInit+0x120>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]


    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull      = GPIO_PULLUP;
 800093e:	2301      	movs	r3, #1
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 8000946:	230c      	movs	r3, #12
 8000948:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SD_BUS_WIDE_4B > 0)
    /* SDMMC GPIO CLKIN PB8, D0 PC8, D1 PC9, D2 PC10, D3 PC11, CK PC12, CMD PD2 */
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800094a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800094e:	61fb      	str	r3, [r7, #28]
    /* SDMMC GPIO CLKIN PB8, D0 PC8, CK PC12, CMD PD2 */
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
#endif

    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	480e      	ldr	r0, [pc, #56]	@ (8000990 <SD_MspInit+0x128>)
 8000958:	f000 ffa8 	bl	80018ac <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin = GPIO_PIN_2;
 800095c:	2304      	movs	r3, #4
 800095e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	480b      	ldr	r0, [pc, #44]	@ (8000994 <SD_MspInit+0x12c>)
 8000968:	f000 ffa0 	bl	80018ac <HAL_GPIO_Init>

    /* NVIC configuration for SDIO interrupts */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, BSP_SD_IT_PRIORITY, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	210e      	movs	r1, #14
 8000970:	2031      	movs	r0, #49	@ 0x31
 8000972:	f000 fc0e 	bl	8001192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000976:	2031      	movs	r0, #49	@ 0x31
 8000978:	f000 fc25 	bl	80011c6 <HAL_NVIC_EnableIRQ>
  }
}
 800097c:	bf00      	nop
 800097e:	3730      	adds	r7, #48	@ 0x30
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000008c 	.word	0x2000008c
 8000988:	58024400 	.word	0x58024400
 800098c:	58022400 	.word	0x58022400
 8000990:	58020800 	.word	0x58020800
 8000994:	58020c00 	.word	0x58020c00

08000998 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  static IS42S32800J_Context_t pRegMode;

  if(Instance >=SDRAM_INSTANCES_NBR)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d003      	beq.n	80009ae <BSP_SDRAM_Init+0x16>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 80009a6:	f06f 0301 	mvn.w	r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e033      	b.n	8000a16 <BSP_SDRAM_Init+0x7e>
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SDRAM initialization */
      SDRAM_MspInit(&hsdram[0]);
 80009ae:	481c      	ldr	r0, [pc, #112]	@ (8000a20 <BSP_SDRAM_Init+0x88>)
 80009b0:	f000 f884 	bl	8000abc <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 80009b4:	481a      	ldr	r0, [pc, #104]	@ (8000a20 <BSP_SDRAM_Init+0x88>)
 80009b6:	f000 f837 	bl	8000a28 <MX_SDRAM_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d003      	beq.n	80009c8 <BSP_SDRAM_Init+0x30>
    {
      ret = BSP_ERROR_NO_INIT;
 80009c0:	f04f 33ff 	mov.w	r3, #4294967295
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e026      	b.n	8000a16 <BSP_SDRAM_Init+0x7e>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80009c8:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <BSP_SDRAM_Init+0x8c>)
 80009ca:	2208      	movs	r2, #8
 80009cc:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <BSP_SDRAM_Init+0x8c>)
 80009d0:	2203      	movs	r2, #3
 80009d2:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80009d4:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <BSP_SDRAM_Init+0x8c>)
 80009d6:	f240 6203 	movw	r2, #1539	@ 0x603
 80009da:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 80009dc:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <BSP_SDRAM_Init+0x8c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 80009e2:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <BSP_SDRAM_Init+0x8c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 80009e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <BSP_SDRAM_Init+0x8c>)
 80009ea:	2230      	movs	r2, #48	@ 0x30
 80009ec:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <BSP_SDRAM_Init+0x8c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80009f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <BSP_SDRAM_Init+0x8c>)
 80009f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009fa:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80009fc:	4909      	ldr	r1, [pc, #36]	@ (8000a24 <BSP_SDRAM_Init+0x8c>)
 80009fe:	4808      	ldr	r0, [pc, #32]	@ (8000a20 <BSP_SDRAM_Init+0x88>)
 8000a00:	f7ff fcbe 	bl	8000380 <IS42S32800J_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d003      	beq.n	8000a12 <BSP_SDRAM_Init+0x7a>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8000a0a:	f06f 0304 	mvn.w	r3, #4
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	e001      	b.n	8000a16 <BSP_SDRAM_Init+0x7e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8000a16:	68fb      	ldr	r3, [r7, #12]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000108 	.word	0x20000108
 8000a24:	2000013c 	.word	0x2000013c

08000a28 <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	@ 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a20      	ldr	r2, [pc, #128]	@ (8000ab4 <MX_SDRAM_Init+0x8c>)
 8000a34:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2201      	movs	r2, #1
 8000a3a:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2201      	movs	r2, #1
 8000a40:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2204      	movs	r2, #4
 8000a46:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2220      	movs	r2, #32
 8000a4c:	611a      	str	r2, [r3, #16]
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2240      	movs	r2, #64	@ 0x40
 8000a52:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000a5a:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a68:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a70:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8000a72:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <MX_SDRAM_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	60fb      	str	r3, [r7, #12]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8000a7c:	2307      	movs	r3, #7
 8000a7e:	613b      	str	r3, [r7, #16]
  sdram_timing.SelfRefreshTime      = 4;
 8000a80:	2304      	movs	r3, #4
 8000a82:	617b      	str	r3, [r7, #20]
  sdram_timing.RowCycleDelay        = 7;
 8000a84:	2307      	movs	r3, #7
 8000a86:	61bb      	str	r3, [r7, #24]
  sdram_timing.WriteRecoveryTime    = 2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RPDelay              = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	623b      	str	r3, [r7, #32]
  sdram_timing.RCDDelay             = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	4619      	mov	r1, r3
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f009 f946 	bl	8009d2c <HAL_SDRAM_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_SDRAM_Init+0x82>
  {
    return  HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e000      	b.n	8000aac <MX_SDRAM_Init+0x84>
  }
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3728      	adds	r7, #40	@ 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	52004140 	.word	0x52004140
 8000ab8:	20000108 	.word	0x20000108

08000abc <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hsdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b090      	sub	sp, #64	@ 0x40
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ac4:	4b7f      	ldr	r3, [pc, #508]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000ac6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000aca:	4a7e      	ldr	r2, [pc, #504]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000acc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ad0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000ad4:	4b7b      	ldr	r3, [pc, #492]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000ad6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ada:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8000ae2:	4b78      	ldr	r3, [pc, #480]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000ae4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ae8:	4a76      	ldr	r2, [pc, #472]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000af2:	4b74      	ldr	r3, [pc, #464]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000af4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b00:	4b70      	ldr	r3, [pc, #448]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b06:	4a6f      	ldr	r2, [pc, #444]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b08:	f043 0308 	orr.w	r3, r3, #8
 8000b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b10:	4b6c      	ldr	r3, [pc, #432]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b16:	f003 0308 	and.w	r3, r3, #8
 8000b1a:	623b      	str	r3, [r7, #32]
 8000b1c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1e:	4b69      	ldr	r3, [pc, #420]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b24:	4a67      	ldr	r2, [pc, #412]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b2e:	4b65      	ldr	r3, [pc, #404]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b34:	f003 0310 	and.w	r3, r3, #16
 8000b38:	61fb      	str	r3, [r7, #28]
 8000b3a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b3c:	4b61      	ldr	r3, [pc, #388]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b42:	4a60      	ldr	r2, [pc, #384]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b44:	f043 0320 	orr.w	r3, r3, #32
 8000b48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b4c:	4b5d      	ldr	r3, [pc, #372]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b52:	f003 0320 	and.w	r3, r3, #32
 8000b56:	61bb      	str	r3, [r7, #24]
 8000b58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5a:	4b5a      	ldr	r3, [pc, #360]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b60:	4a58      	ldr	r2, [pc, #352]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b6a:	4b56      	ldr	r3, [pc, #344]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b78:	4b52      	ldr	r3, [pc, #328]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7e:	4a51      	ldr	r2, [pc, #324]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b88:	4b4e      	ldr	r3, [pc, #312]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b96:	4b4b      	ldr	r3, [pc, #300]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9c:	4a49      	ldr	r2, [pc, #292]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba6:	4b47      	ldr	r3, [pc, #284]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8000bc4:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000bca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bce:	4619      	mov	r1, r3
 8000bd0:	483d      	ldr	r0, [pc, #244]	@ (8000cc8 <SDRAM_MspInit+0x20c>)
 8000bd2:	f000 fe6b 	bl	80018ac <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8000bd6:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000bdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be0:	4619      	mov	r1, r3
 8000be2:	483a      	ldr	r0, [pc, #232]	@ (8000ccc <SDRAM_MspInit+0x210>)
 8000be4:	f000 fe62 	bl	80018ac <HAL_GPIO_Init>
  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8000be8:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000bee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4836      	ldr	r0, [pc, #216]	@ (8000cd0 <SDRAM_MspInit+0x214>)
 8000bf6:	f000 fe59 	bl	80018ac <HAL_GPIO_Init>
  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8000bfa:	f248 1337 	movw	r3, #33079	@ 0x8137
 8000bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000c00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c04:	4619      	mov	r1, r3
 8000c06:	4833      	ldr	r0, [pc, #204]	@ (8000cd4 <SDRAM_MspInit+0x218>)
 8000c08:	f000 fe50 	bl	80018ac <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8000c0c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8000c12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c16:	4619      	mov	r1, r3
 8000c18:	482f      	ldr	r0, [pc, #188]	@ (8000cd8 <SDRAM_MspInit+0x21c>)
 8000c1a:	f000 fe47 	bl	80018ac <HAL_GPIO_Init>

  /* GPIOI configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8000c1e:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8000c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;

  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000c24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c28:	4619      	mov	r1, r3
 8000c2a:	482c      	ldr	r0, [pc, #176]	@ (8000cdc <SDRAM_MspInit+0x220>)
 8000c2c:	f000 fe3e 	bl	80018ac <HAL_GPIO_Init>

  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8000c30:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c36:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8000c38:	4b29      	ldr	r3, [pc, #164]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c3e:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8000c40:	4b27      	ldr	r3, [pc, #156]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c42:	2280      	movs	r2, #128	@ 0x80
 8000c44:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000c46:	4b26      	ldr	r3, [pc, #152]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8000c4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c4e:	f240 2202 	movw	r2, #514	@ 0x202
 8000c52:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8000c54:	4b22      	ldr	r3, [pc, #136]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c56:	f640 0208 	movw	r2, #2056	@ 0x808
 8000c5a:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8000c5c:	4b20      	ldr	r3, [pc, #128]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c5e:	2220      	movs	r2, #32
 8000c60:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8000c62:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c64:	2280      	movs	r2, #128	@ 0x80
 8000c66:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8000c68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c6e:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c7e:	2280      	movs	r2, #128	@ 0x80
 8000c80:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8000c82:	4b17      	ldr	r3, [pc, #92]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8000c88:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	639a      	str	r2, [r3, #56]	@ 0x38
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c90:	4a14      	ldr	r2, [pc, #80]	@ (8000ce4 <SDRAM_MspInit+0x228>)
 8000c92:	601a      	str	r2, [r3, #0]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a12      	ldr	r2, [pc, #72]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c98:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c9a:	4a11      	ldr	r2, [pc, #68]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8000ca0:	480f      	ldr	r0, [pc, #60]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000ca2:	f002 fecf 	bl	8003a44 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8000ca6:	480e      	ldr	r0, [pc, #56]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000ca8:	f002 fe80 	bl	80039ac <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	210f      	movs	r1, #15
 8000cb0:	207a      	movs	r0, #122	@ 0x7a
 8000cb2:	f000 fa6e 	bl	8001192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8000cb6:	207a      	movs	r0, #122	@ 0x7a
 8000cb8:	f000 fa85 	bl	80011c6 <HAL_NVIC_EnableIRQ>
}
 8000cbc:	bf00      	nop
 8000cbe:	3740      	adds	r7, #64	@ 0x40
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	58020c00 	.word	0x58020c00
 8000ccc:	58021000 	.word	0x58021000
 8000cd0:	58021400 	.word	0x58021400
 8000cd4:	58021800 	.word	0x58021800
 8000cd8:	58021c00 	.word	0x58021c00
 8000cdc:	58022000 	.word	0x58022000
 8000ce0:	2000015c 	.word	0x2000015c
 8000ce4:	52000040 	.word	0x52000040

08000ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cec:	4b37      	ldr	r3, [pc, #220]	@ (8000dcc <SystemInit+0xe4>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cf2:	4a36      	ldr	r2, [pc, #216]	@ (8000dcc <SystemInit+0xe4>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cfc:	4b34      	ldr	r3, [pc, #208]	@ (8000dd0 <SystemInit+0xe8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 030f 	and.w	r3, r3, #15
 8000d04:	2b06      	cmp	r3, #6
 8000d06:	d807      	bhi.n	8000d18 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d08:	4b31      	ldr	r3, [pc, #196]	@ (8000dd0 <SystemInit+0xe8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f023 030f 	bic.w	r3, r3, #15
 8000d10:	4a2f      	ldr	r2, [pc, #188]	@ (8000dd0 <SystemInit+0xe8>)
 8000d12:	f043 0307 	orr.w	r3, r3, #7
 8000d16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d18:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd4 <SystemInit+0xec>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a2d      	ldr	r2, [pc, #180]	@ (8000dd4 <SystemInit+0xec>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d24:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd4 <SystemInit+0xec>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd4 <SystemInit+0xec>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4929      	ldr	r1, [pc, #164]	@ (8000dd4 <SystemInit+0xec>)
 8000d30:	4b29      	ldr	r3, [pc, #164]	@ (8000dd8 <SystemInit+0xf0>)
 8000d32:	4013      	ands	r3, r2
 8000d34:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d36:	4b26      	ldr	r3, [pc, #152]	@ (8000dd0 <SystemInit+0xe8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d007      	beq.n	8000d52 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d42:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <SystemInit+0xe8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f023 030f 	bic.w	r3, r3, #15
 8000d4a:	4a21      	ldr	r2, [pc, #132]	@ (8000dd0 <SystemInit+0xe8>)
 8000d4c:	f043 0307 	orr.w	r3, r3, #7
 8000d50:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d52:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <SystemInit+0xec>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d58:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd4 <SystemInit+0xec>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd4 <SystemInit+0xec>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd4 <SystemInit+0xec>)
 8000d66:	4a1d      	ldr	r2, [pc, #116]	@ (8000ddc <SystemInit+0xf4>)
 8000d68:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <SystemInit+0xec>)
 8000d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8000de0 <SystemInit+0xf8>)
 8000d6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d70:	4b18      	ldr	r3, [pc, #96]	@ (8000dd4 <SystemInit+0xec>)
 8000d72:	4a1c      	ldr	r2, [pc, #112]	@ (8000de4 <SystemInit+0xfc>)
 8000d74:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d76:	4b17      	ldr	r3, [pc, #92]	@ (8000dd4 <SystemInit+0xec>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <SystemInit+0xec>)
 8000d7e:	4a19      	ldr	r2, [pc, #100]	@ (8000de4 <SystemInit+0xfc>)
 8000d80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d82:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <SystemInit+0xec>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <SystemInit+0xec>)
 8000d8a:	4a16      	ldr	r2, [pc, #88]	@ (8000de4 <SystemInit+0xfc>)
 8000d8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <SystemInit+0xec>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <SystemInit+0xec>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd4 <SystemInit+0xec>)
 8000d9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <SystemInit+0xec>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000da6:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <SystemInit+0x100>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <SystemInit+0x104>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000db2:	d202      	bcs.n	8000dba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000db4:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <SystemInit+0x108>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <SystemInit+0x10c>)
 8000dbc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000dc0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00
 8000dd0:	52002000 	.word	0x52002000
 8000dd4:	58024400 	.word	0x58024400
 8000dd8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ddc:	02020200 	.word	0x02020200
 8000de0:	01ff0000 	.word	0x01ff0000
 8000de4:	01010280 	.word	0x01010280
 8000de8:	5c001000 	.word	0x5c001000
 8000dec:	ffff0000 	.word	0xffff0000
 8000df0:	51008108 	.word	0x51008108
 8000df4:	52004000 	.word	0x52004000

08000df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfe:	2003      	movs	r0, #3
 8000e00:	f000 f9bc 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e04:	f004 f82c 	bl	8004e60 <HAL_RCC_GetSysClockFreq>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <HAL_Init+0x68>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	0a1b      	lsrs	r3, r3, #8
 8000e10:	f003 030f 	and.w	r3, r3, #15
 8000e14:	4913      	ldr	r1, [pc, #76]	@ (8000e64 <HAL_Init+0x6c>)
 8000e16:	5ccb      	ldrb	r3, [r1, r3]
 8000e18:	f003 031f 	and.w	r3, r3, #31
 8000e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <HAL_Init+0x68>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e64 <HAL_Init+0x6c>)
 8000e2c:	5cd3      	ldrb	r3, [r2, r3]
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	fa22 f303 	lsr.w	r3, r2, r3
 8000e38:	4a0b      	ldr	r2, [pc, #44]	@ (8000e68 <HAL_Init+0x70>)
 8000e3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e6c <HAL_Init+0x74>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e42:	200f      	movs	r0, #15
 8000e44:	f000 f814 	bl	8000e70 <HAL_InitTick>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e002      	b.n	8000e58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e52:	f003 f953 	bl	80040fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	58024400 	.word	0x58024400
 8000e64:	0801169c 	.word	0x0801169c
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	20000000 	.word	0x20000000

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e78:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <HAL_InitTick+0x60>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d101      	bne.n	8000e84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e021      	b.n	8000ec8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e84:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <HAL_InitTick+0x64>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <HAL_InitTick+0x60>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f9a1 	bl	80011e2 <HAL_SYSTICK_Config>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00e      	b.n	8000ec8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d80a      	bhi.n	8000ec6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f000 f96b 	bl	8001192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ebc:	4a06      	ldr	r2, [pc, #24]	@ (8000ed8 <HAL_InitTick+0x68>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e000      	b.n	8000ec8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	2000000c 	.word	0x2000000c
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000008 	.word	0x20000008

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	@ (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	2000000c 	.word	0x2000000c
 8000f00:	200001c8 	.word	0x200001c8

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	@ (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200001c8 	.word	0x200001c8

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff ffee 	bl	8000f04 <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f34:	d005      	beq.n	8000f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_Delay+0x44>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f42:	bf00      	nop
 8000f44:	f7ff ffde 	bl	8000f04 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d8f7      	bhi.n	8000f44 <HAL_Delay+0x28>
  {
  }
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2000000c 	.word	0x2000000c

08000f64 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <HAL_SuspendTick+0x1c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <HAL_SuspendTick+0x1c>)
 8000f6e:	f023 0302 	bic.w	r3, r3, #2
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <HAL_ResumeTick+0x1c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a04      	ldr	r2, [pc, #16]	@ (8000fa0 <HAL_ResumeTick+0x1c>)
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fa8:	4b03      	ldr	r3, [pc, #12]	@ (8000fb8 <HAL_GetREVID+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	0c1b      	lsrs	r3, r3, #16
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	5c001000 	.word	0x5c001000

08000fbc <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <HAL_EnableCompensationCell+0x1c>)
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <HAL_EnableCompensationCell+0x1c>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6213      	str	r3, [r2, #32]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	58000400 	.word	0x58000400

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <__NVIC_SetPriorityGrouping+0x40>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	4313      	orrs	r3, r2
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	@ (800101c <__NVIC_SetPriorityGrouping+0x40>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00
 8001020:	05fa0000 	.word	0x05fa0000

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	@ (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800104a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0b      	blt.n	800106a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	f003 021f 	and.w	r2, r3, #31
 8001058:	4907      	ldr	r1, [pc, #28]	@ (8001078 <__NVIC_EnableIRQ+0x38>)
 800105a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	@ (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	@ (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	@ 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	@ 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f7ff ff8e 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff29 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011a0:	f7ff ff40 	bl	8001024 <__NVIC_GetPriorityGrouping>
 80011a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f7ff ff90 	bl	80010d0 <NVIC_EncodePriority>
 80011b0:	4602      	mov	r2, r0
 80011b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff5f 	bl	800107c <__NVIC_SetPriority>
}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff33 	bl	8001040 <__NVIC_EnableIRQ>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffa4 	bl	8001138 <SysTick_Config>
 80011f0:	4603      	mov	r3, r0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001200:	f3bf 8f5f 	dmb	sy
}
 8001204:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <HAL_MPU_Disable+0x28>)
 8001208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120a:	4a06      	ldr	r2, [pc, #24]	@ (8001224 <HAL_MPU_Disable+0x28>)
 800120c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001210:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001212:	4b05      	ldr	r3, [pc, #20]	@ (8001228 <HAL_MPU_Disable+0x2c>)
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00
 8001228:	e000ed90 	.word	0xe000ed90

0800122c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001234:	4a0b      	ldr	r2, [pc, #44]	@ (8001264 <HAL_MPU_Enable+0x38>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800123e:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <HAL_MPU_Enable+0x3c>)
 8001240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001242:	4a09      	ldr	r2, [pc, #36]	@ (8001268 <HAL_MPU_Enable+0x3c>)
 8001244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001248:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800124a:	f3bf 8f4f 	dsb	sy
}
 800124e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001250:	f3bf 8f6f 	isb	sy
}
 8001254:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed90 	.word	0xe000ed90
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	785a      	ldrb	r2, [r3, #1]
 8001278:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <HAL_MPU_ConfigRegion+0x7c>)
 800127a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800127c:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <HAL_MPU_ConfigRegion+0x7c>)
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	4a19      	ldr	r2, [pc, #100]	@ (80012e8 <HAL_MPU_ConfigRegion+0x7c>)
 8001282:	f023 0301 	bic.w	r3, r3, #1
 8001286:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001288:	4a17      	ldr	r2, [pc, #92]	@ (80012e8 <HAL_MPU_ConfigRegion+0x7c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7b1b      	ldrb	r3, [r3, #12]
 8001294:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	7adb      	ldrb	r3, [r3, #11]
 800129a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800129c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7a9b      	ldrb	r3, [r3, #10]
 80012a2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7b5b      	ldrb	r3, [r3, #13]
 80012aa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7b9b      	ldrb	r3, [r3, #14]
 80012b2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7bdb      	ldrb	r3, [r3, #15]
 80012ba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7a5b      	ldrb	r3, [r3, #9]
 80012c2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7a1b      	ldrb	r3, [r3, #8]
 80012ca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012cc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	7812      	ldrb	r2, [r2, #0]
 80012d2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012d4:	4a04      	ldr	r2, [pc, #16]	@ (80012e8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012d6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012d8:	6113      	str	r3, [r2, #16]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed90 	.word	0xe000ed90

080012ec <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80012f0:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <HAL_GetCurrentCPUID+0x24>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	2b07      	cmp	r3, #7
 80012fc:	d101      	bne.n	8001302 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80012fe:	2303      	movs	r3, #3
 8001300:	e000      	b.n	8001304 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001302:	2301      	movs	r3, #1
  }
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e04f      	b.n	80013c6 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d106      	bne.n	8001340 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f00c fb24 	bl	800d988 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2202      	movs	r2, #2
 8001344:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b20      	ldr	r3, [pc, #128]	@ (80013d0 <HAL_DMA2D_Init+0xbc>)
 8001350:	4013      	ands	r3, r2
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6851      	ldr	r1, [r2, #4]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	69d2      	ldr	r2, [r2, #28]
 800135a:	4311      	orrs	r1, r2
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	430b      	orrs	r3, r1
 8001362:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800136a:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <HAL_DMA2D_Init+0xc0>)
 800136c:	4013      	ands	r3, r2
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6891      	ldr	r1, [r2, #8]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6992      	ldr	r2, [r2, #24]
 8001376:	4311      	orrs	r1, r2
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	430b      	orrs	r3, r1
 800137e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001386:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <HAL_DMA2D_Init+0xc4>)
 8001388:	4013      	ands	r3, r2
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68d1      	ldr	r1, [r2, #12]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	430b      	orrs	r3, r1
 8001394:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800139c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	051a      	lsls	r2, r3, #20
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	055b      	lsls	r3, r3, #21
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	fff8ffbf 	.word	0xfff8ffbf
 80013d4:	fffffef8 	.word	0xfffffef8
 80013d8:	ffff0000 	.word	0xffff0000

080013dc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af02      	add	r7, sp, #8
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_DMA2D_Start+0x1c>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e018      	b.n	800142a <HAL_DMA2D_Start+0x4e>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2202      	movs	r2, #2
 8001404:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f000 f9a4 	bl	8001760 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f042 0201 	orr.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d056      	beq.n	80014fc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800144e:	f7ff fd59 	bl	8000f04 <HAL_GetTick>
 8001452:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001454:	e04b      	b.n	80014ee <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8001464:	2b00      	cmp	r3, #0
 8001466:	d023      	beq.n	80014b0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	2b00      	cmp	r3, #0
 8001470:	d005      	beq.n	800147e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001476:	f043 0202 	orr.w	r2, r3, #2
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800148c:	f043 0201 	orr.w	r2, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2221      	movs	r2, #33	@ 0x21
 800149a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2204      	movs	r2, #4
 80014a0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e0a5      	b.n	80015fc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b6:	d01a      	beq.n	80014ee <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80014b8:	f7ff fd24 	bl	8000f04 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d302      	bcc.n	80014ce <HAL_DMA2D_PollForTransfer+0x9c>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10f      	bne.n	80014ee <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014d2:	f043 0220 	orr.w	r2, r3, #32
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2203      	movs	r2, #3
 80014de:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e086      	b.n	80015fc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0ac      	beq.n	8001456 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 0320 	and.w	r3, r3, #32
 8001506:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d061      	beq.n	80015e2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800151e:	f7ff fcf1 	bl	8000f04 <HAL_GetTick>
 8001522:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001524:	e056      	b.n	80015d4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8001534:	2b00      	cmp	r3, #0
 8001536:	d02e      	beq.n	8001596 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001546:	f043 0204 	orr.w	r2, r3, #4
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f003 0320 	and.w	r3, r3, #32
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800155c:	f043 0202 	orr.w	r2, r3, #2
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d005      	beq.n	800157a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001572:	f043 0201 	orr.w	r2, r3, #1
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2229      	movs	r2, #41	@ 0x29
 8001580:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2204      	movs	r2, #4
 8001586:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e032      	b.n	80015fc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159c:	d01a      	beq.n	80015d4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800159e:	f7ff fcb1 	bl	8000f04 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d302      	bcc.n	80015b4 <HAL_DMA2D_PollForTransfer+0x182>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10f      	bne.n	80015d4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80015b8:	f043 0220 	orr.w	r2, r3, #32
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2203      	movs	r2, #3
 80015c4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e013      	b.n	80015fc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0a1      	beq.n	8001526 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2212      	movs	r2, #18
 80015e8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001620:	2b01      	cmp	r3, #1
 8001622:	d101      	bne.n	8001628 <HAL_DMA2D_ConfigLayer+0x24>
 8001624:	2302      	movs	r3, #2
 8001626:	e092      	b.n	800174e <HAL_DMA2D_ConfigLayer+0x14a>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2202      	movs	r2, #2
 8001634:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	1a9b      	subs	r3, r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	3328      	adds	r3, #40	@ 0x28
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4413      	add	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	041b      	lsls	r3, r3, #16
 8001654:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800165c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8001668:	4b3c      	ldr	r3, [pc, #240]	@ (800175c <HAL_DMA2D_ConfigLayer+0x158>)
 800166a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b0a      	cmp	r3, #10
 8001672:	d003      	beq.n	800167c <HAL_DMA2D_ConfigLayer+0x78>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b09      	cmp	r3, #9
 800167a:	d107      	bne.n	800168c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	e005      	b.n	8001698 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	061b      	lsls	r3, r3, #24
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d120      	bne.n	80016e0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	ea02 0103 	and.w	r1, r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	6812      	ldr	r2, [r2, #0]
 80016be:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b0a      	cmp	r3, #10
 80016c6:	d003      	beq.n	80016d0 <HAL_DMA2D_ConfigLayer+0xcc>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b09      	cmp	r3, #9
 80016ce:	d135      	bne.n	800173c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	68da      	ldr	r2, [r3, #12]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80016dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80016de:	e02d      	b.n	800173c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b0b      	cmp	r3, #11
 80016e6:	d109      	bne.n	80016fc <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	049b      	lsls	r3, r3, #18
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80016fa:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	69da      	ldr	r2, [r3, #28]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	43db      	mvns	r3, r3
 8001706:	ea02 0103 	and.w	r1, r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	430a      	orrs	r2, r1
 8001712:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b0a      	cmp	r3, #10
 8001724:	d003      	beq.n	800172e <HAL_DMA2D_ConfigLayer+0x12a>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b09      	cmp	r3, #9
 800172c:	d106      	bne.n	800173c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800173a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	371c      	adds	r7, #28
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	ff33000f 	.word	0xff33000f

08001760 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8001760:	b480      	push	{r7}
 8001762:	b08b      	sub	sp, #44	@ 0x2c
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001774:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	041a      	lsls	r2, r3, #16
 800177c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800177e:	431a      	orrs	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001798:	d174      	bne.n	8001884 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80017a0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80017a8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80017b0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d108      	bne.n	80017d2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	431a      	orrs	r2, r3
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80017d0:	e053      	b.n	800187a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d106      	bne.n	80017e8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	4313      	orrs	r3, r2
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e6:	e048      	b.n	800187a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d111      	bne.n	8001814 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	0cdb      	lsrs	r3, r3, #19
 80017f4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	0a9b      	lsrs	r3, r3, #10
 80017fa:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	08db      	lsrs	r3, r3, #3
 8001800:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	015a      	lsls	r2, r3, #5
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	02db      	lsls	r3, r3, #11
 800180a:	4313      	orrs	r3, r2
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	4313      	orrs	r3, r2
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24
 8001812:	e032      	b.n	800187a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b03      	cmp	r3, #3
 800181a:	d117      	bne.n	800184c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	0fdb      	lsrs	r3, r3, #31
 8001820:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	0cdb      	lsrs	r3, r3, #19
 8001826:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	0adb      	lsrs	r3, r3, #11
 800182c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	08db      	lsrs	r3, r3, #3
 8001832:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	015a      	lsls	r2, r3, #5
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	029b      	lsls	r3, r3, #10
 800183c:	431a      	orrs	r2, r3
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	03db      	lsls	r3, r3, #15
 8001842:	4313      	orrs	r3, r2
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	4313      	orrs	r3, r2
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
 800184a:	e016      	b.n	800187a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	0f1b      	lsrs	r3, r3, #28
 8001850:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	0d1b      	lsrs	r3, r3, #20
 8001856:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	0b1b      	lsrs	r3, r3, #12
 800185c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	011a      	lsls	r2, r3, #4
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	431a      	orrs	r2, r3
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	031b      	lsls	r3, r3, #12
 8001872:	4313      	orrs	r3, r2
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	4313      	orrs	r3, r2
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001880:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001882:	e00d      	b.n	80018a0 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800188c:	d104      	bne.n	8001898 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	615a      	str	r2, [r3, #20]
}
 8001896:	e003      	b.n	80018a0 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	60da      	str	r2, [r3, #12]
}
 80018a0:	bf00      	nop
 80018a2:	372c      	adds	r7, #44	@ 0x2c
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	@ 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80018ba:	4b89      	ldr	r3, [pc, #548]	@ (8001ae0 <HAL_GPIO_Init+0x234>)
 80018bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018be:	e194      	b.n	8001bea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2101      	movs	r1, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8186 	beq.w	8001be4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d005      	beq.n	80018f0 <HAL_GPIO_Init+0x44>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d130      	bne.n	8001952 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001926:	2201      	movs	r2, #1
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	f003 0201 	and.w	r2, r3, #1
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b03      	cmp	r3, #3
 800195c:	d017      	beq.n	800198e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d123      	bne.n	80019e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	08da      	lsrs	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3208      	adds	r2, #8
 80019a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	220f      	movs	r2, #15
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	691a      	ldr	r2, [r3, #16]
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	08da      	lsrs	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3208      	adds	r2, #8
 80019dc:	69b9      	ldr	r1, [r7, #24]
 80019de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0203 	and.w	r2, r3, #3
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 80e0 	beq.w	8001be4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a24:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae4 <HAL_GPIO_Init+0x238>)
 8001a26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a2a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ae4 <HAL_GPIO_Init+0x238>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae4 <HAL_GPIO_Init+0x238>)
 8001a36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a42:	4a29      	ldr	r2, [pc, #164]	@ (8001ae8 <HAL_GPIO_Init+0x23c>)
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	089b      	lsrs	r3, r3, #2
 8001a48:	3302      	adds	r3, #2
 8001a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	220f      	movs	r2, #15
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a20      	ldr	r2, [pc, #128]	@ (8001aec <HAL_GPIO_Init+0x240>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d052      	beq.n	8001b14 <HAL_GPIO_Init+0x268>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a1f      	ldr	r2, [pc, #124]	@ (8001af0 <HAL_GPIO_Init+0x244>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d031      	beq.n	8001ada <HAL_GPIO_Init+0x22e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a1e      	ldr	r2, [pc, #120]	@ (8001af4 <HAL_GPIO_Init+0x248>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d02b      	beq.n	8001ad6 <HAL_GPIO_Init+0x22a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a1d      	ldr	r2, [pc, #116]	@ (8001af8 <HAL_GPIO_Init+0x24c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d025      	beq.n	8001ad2 <HAL_GPIO_Init+0x226>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a1c      	ldr	r2, [pc, #112]	@ (8001afc <HAL_GPIO_Init+0x250>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d01f      	beq.n	8001ace <HAL_GPIO_Init+0x222>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a1b      	ldr	r2, [pc, #108]	@ (8001b00 <HAL_GPIO_Init+0x254>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d019      	beq.n	8001aca <HAL_GPIO_Init+0x21e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a1a      	ldr	r2, [pc, #104]	@ (8001b04 <HAL_GPIO_Init+0x258>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_GPIO_Init+0x21a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a19      	ldr	r2, [pc, #100]	@ (8001b08 <HAL_GPIO_Init+0x25c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00d      	beq.n	8001ac2 <HAL_GPIO_Init+0x216>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a18      	ldr	r2, [pc, #96]	@ (8001b0c <HAL_GPIO_Init+0x260>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d007      	beq.n	8001abe <HAL_GPIO_Init+0x212>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a17      	ldr	r2, [pc, #92]	@ (8001b10 <HAL_GPIO_Init+0x264>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_GPIO_Init+0x20e>
 8001ab6:	2309      	movs	r3, #9
 8001ab8:	e02d      	b.n	8001b16 <HAL_GPIO_Init+0x26a>
 8001aba:	230a      	movs	r3, #10
 8001abc:	e02b      	b.n	8001b16 <HAL_GPIO_Init+0x26a>
 8001abe:	2308      	movs	r3, #8
 8001ac0:	e029      	b.n	8001b16 <HAL_GPIO_Init+0x26a>
 8001ac2:	2307      	movs	r3, #7
 8001ac4:	e027      	b.n	8001b16 <HAL_GPIO_Init+0x26a>
 8001ac6:	2306      	movs	r3, #6
 8001ac8:	e025      	b.n	8001b16 <HAL_GPIO_Init+0x26a>
 8001aca:	2305      	movs	r3, #5
 8001acc:	e023      	b.n	8001b16 <HAL_GPIO_Init+0x26a>
 8001ace:	2304      	movs	r3, #4
 8001ad0:	e021      	b.n	8001b16 <HAL_GPIO_Init+0x26a>
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e01f      	b.n	8001b16 <HAL_GPIO_Init+0x26a>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e01d      	b.n	8001b16 <HAL_GPIO_Init+0x26a>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e01b      	b.n	8001b16 <HAL_GPIO_Init+0x26a>
 8001ade:	bf00      	nop
 8001ae0:	58000080 	.word	0x58000080
 8001ae4:	58024400 	.word	0x58024400
 8001ae8:	58000400 	.word	0x58000400
 8001aec:	58020000 	.word	0x58020000
 8001af0:	58020400 	.word	0x58020400
 8001af4:	58020800 	.word	0x58020800
 8001af8:	58020c00 	.word	0x58020c00
 8001afc:	58021000 	.word	0x58021000
 8001b00:	58021400 	.word	0x58021400
 8001b04:	58021800 	.word	0x58021800
 8001b08:	58021c00 	.word	0x58021c00
 8001b0c:	58022000 	.word	0x58022000
 8001b10:	58022400 	.word	0x58022400
 8001b14:	2300      	movs	r3, #0
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	f002 0203 	and.w	r2, r2, #3
 8001b1c:	0092      	lsls	r2, r2, #2
 8001b1e:	4093      	lsls	r3, r2
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b26:	4938      	ldr	r1, [pc, #224]	@ (8001c08 <HAL_GPIO_Init+0x35c>)
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001b5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001b88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	3301      	adds	r3, #1
 8001be8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f47f ae63 	bne.w	80018c0 <HAL_GPIO_Init+0x14>
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	bf00      	nop
 8001bfe:	3724      	adds	r7, #36	@ 0x24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	58000400 	.word	0x58000400

08001c0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	887b      	ldrh	r3, [r7, #2]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	e001      	b.n	8001c2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c4c:	787b      	ldrb	r3, [r7, #1]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001c58:	e003      	b.n	8001c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c5a:	887b      	ldrh	r3, [r7, #2]
 8001c5c:	041a      	lsls	r2, r3, #16
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	619a      	str	r2, [r3, #24]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f00b fd24 	bl	800d6e2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e070      	b.n	8001d98 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f00b fd14 	bl	800d6f8 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0201 	bic.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8001d06:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d16:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d26:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8001d36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a19      	ldr	r2, [pc, #100]	@ (8001da0 <HAL_JPEG_Init+0xfc>)
 8001d3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a18      	ldr	r2, [pc, #96]	@ (8001da4 <HAL_JPEG_Init+0x100>)
 8001d42:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 fcdb 	bl	800270c <JPEG_Set_HuffEnc_Mem>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d004      	beq.n	8001d66 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e018      	b.n	8001d98 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d74:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	0801188c 	.word	0x0801188c
 8001da4:	080118cc 	.word	0x080118cc

08001da8 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <HAL_JPEG_GetInfo+0x16>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e083      	b.n	8001eca <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d103      	bne.n	8001dd8 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	2210      	movs	r2, #16
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e017      	b.n	8001e08 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d103      	bne.n	8001dee <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e00c      	b.n	8001e08 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d103      	bne.n	8001e04 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2230      	movs	r2, #48	@ 0x30
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	e001      	b.n	8001e08 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e060      	b.n	8001eca <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	0c1b      	lsrs	r3, r3, #16
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0c1b      	lsrs	r3, r3, #16
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b10      	cmp	r3, #16
 8001e2a:	d003      	beq.n	8001e34 <HAL_JPEG_GetInfo+0x8c>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b30      	cmp	r3, #48	@ 0x30
 8001e32:	d140      	bne.n	8001eb6 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	091b      	lsrs	r3, r3, #4
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	f003 030f 	and.w	r3, r3, #15
 8001e5c:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d109      	bne.n	8001e78 <HAL_JPEG_GetInfo+0xd0>
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_JPEG_GetInfo+0xd0>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d103      	bne.n	8001e78 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	2202      	movs	r2, #2
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	e01d      	b.n	8001eb4 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d109      	bne.n	8001e92 <HAL_JPEG_GetInfo+0xea>
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d106      	bne.n	8001e92 <HAL_JPEG_GetInfo+0xea>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d103      	bne.n	8001e92 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	e010      	b.n	8001eb4 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d109      	bne.n	8001eac <HAL_JPEG_GetInfo+0x104>
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d106      	bne.n	8001eac <HAL_JPEG_GetInfo+0x104>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d103      	bne.n	8001eac <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	e003      	b.n	8001eb4 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001eb2:	e003      	b.n	8001ebc <HAL_JPEG_GetInfo+0x114>
 8001eb4:	e002      	b.n	8001ebc <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f001 fd17 	bl	80038f0 <JPEG_GetQuality>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <HAL_JPEG_Decode_DMA+0x20>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <HAL_JPEG_Decode_DMA+0x20>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e04c      	b.n	8001f90 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_JPEG_Decode_DMA+0x32>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e045      	b.n	8001f90 <HAL_JPEG_Decode_DMA+0xbe>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d134      	bne.n	8001f82 <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f24:	f023 020f 	bic.w	r2, r3, #15
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f30:	f043 020e 	orr.w	r2, r3, #14
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 fe57 	bl	8002c10 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f001 f978 	bl	8003258 <JPEG_DMA_StartProcess>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00f      	beq.n	8001f8e <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2206      	movs	r2, #6
 8001f72:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e006      	b.n	8001f90 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e000      	b.n	8001f90 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b0c      	cmp	r3, #12
 8001fb0:	d116      	bne.n	8001fe0 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d033      	beq.n	800203a <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	655a      	str	r2, [r3, #84]	@ 0x54
 8001fde:	e02c      	b.n	800203a <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe4:	f003 030c 	and.w	r3, r3, #12
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d126      	bne.n	800203a <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ffa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f043 0306 	orr.w	r3, r3, #6
 8002008:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d009      	beq.n	8002028 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002018:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8002026:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	43da      	mvns	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	400a      	ands	r2, r1
 8002038:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	3b03      	subs	r3, #3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d813      	bhi.n	80020e2 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d103      	bne.n	80020ce <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fe16 	bl	8002cf8 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 80020cc:	e00b      	b.n	80020e6 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b0c      	cmp	r3, #12
 80020d8:	d105      	bne.n	80020e6 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f001 f956 	bl	800338c <JPEG_DMA_ContinueProcess>
      break;
 80020e0:	e001      	b.n	80020e6 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 80020e2:	bf00      	nop
 80020e4:	e000      	b.n	80020e8 <HAL_JPEG_IRQHandler+0x44>
      break;
 80020e6:	bf00      	nop
  }
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b08b      	sub	sp, #44	@ 0x2c
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	e020      	b.n	800214a <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	4413      	add	r3, r2
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8002112:	6a3a      	ldr	r2, [r7, #32]
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	4413      	add	r3, r2
 8002118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800211c:	d90f      	bls.n	800213e <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e055      	b.n	80021ce <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	b2da      	uxtb	r2, r3
 8002126:	68b9      	ldr	r1, [r7, #8]
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	440b      	add	r3, r1
 800212c:	3201      	adds	r2, #1
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	701a      	strb	r2, [r3, #0]
      p++;
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	3301      	adds	r3, #1
 8002136:	623b      	str	r3, [r7, #32]
      i--;
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	3b01      	subs	r3, #1
 800213c:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1ee      	bne.n	8002122 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	3301      	adds	r3, #1
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	2b0f      	cmp	r3, #15
 800214e:	d9db      	bls.n	8002108 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	4413      	add	r3, r2
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6a3a      	ldr	r2, [r7, #32]
 800215e:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	617b      	str	r3, [r7, #20]
  p = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800216e:	e027      	b.n	80021c0 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	4413      	add	r3, r2
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	601a      	str	r2, [r3, #0]
      p++;
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	3301      	adds	r3, #1
 8002180:	623b      	str	r3, [r7, #32]
      code++;
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	3301      	adds	r3, #1
 8002186:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	4413      	add	r3, r2
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	4293      	cmp	r3, r2
 8002196:	d0eb      	beq.n	8002170 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	2b1f      	cmp	r3, #31
 800219c:	d901      	bls.n	80021a2 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e015      	b.n	80021ce <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80021a2:	2201      	movs	r2, #1
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d301      	bcc.n	80021b4 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e00c      	b.n	80021ce <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	61bb      	str	r3, [r7, #24]
    si++;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	3301      	adds	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	4413      	add	r3, r2
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1dd      	bne.n	8002188 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	372c      	adds	r7, #44	@ 0x2c
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80021e6:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80021ea:	6018      	str	r0, [r3, #0]
 80021ec:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80021f0:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80021f4:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80021f6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80021fa:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	f107 0308 	add.w	r3, r7, #8
 8002204:	f107 020c 	add.w	r2, r7, #12
 8002208:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 800220c:	f7ff ff70 	bl	80020f0 <JPEG_Bits_To_SizeCodes>
 8002210:	4603      	mov	r3, r0
 8002212:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8002216:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800221e:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8002222:	e075      	b.n	8002310 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 800222a:	e067      	b.n	80022fc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800222c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002230:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800223a:	4413      	add	r3, r2
 800223c:	3310      	adds	r3, #16
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8002244:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002248:	2b00      	cmp	r3, #0
 800224a:	d103      	bne.n	8002254 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 800224c:	23a0      	movs	r3, #160	@ 0xa0
 800224e:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8002252:	e021      	b.n	8002298 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8002254:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002258:	2bf0      	cmp	r3, #240	@ 0xf0
 800225a:	d103      	bne.n	8002264 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 800225c:	23a1      	movs	r3, #161	@ 0xa1
 800225e:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8002262:	e019      	b.n	8002298 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8002264:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8002272:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800227e:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	461a      	mov	r2, r3
 800228c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002290:	4413      	add	r3, r2
 8002292:	3b01      	subs	r3, #1
 8002294:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8002298:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800229c:	2ba1      	cmp	r3, #161	@ 0xa1
 800229e:	d901      	bls.n	80022a4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80022a0:	2301      	movs	r3, #1
 80022a2:	e035      	b.n	8002310 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80022a4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80022a8:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80022ac:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 80022b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80022b4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80022b8:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80022bc:	6819      	ldr	r1, [r3, #0]
 80022be:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80022c2:	3328      	adds	r3, #40	@ 0x28
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80022ca:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80022ce:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 80022d2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80022d6:	4413      	add	r3, r2
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	3b01      	subs	r3, #1
 80022dc:	b2d9      	uxtb	r1, r3
 80022de:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80022e2:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80022ec:	4413      	add	r3, r2
 80022ee:	460a      	mov	r2, r1
 80022f0:	701a      	strb	r2, [r3, #0]
      k++;
 80022f2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80022f6:	3301      	adds	r3, #1
 80022f8:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 80022fc:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002300:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800230a:	429a      	cmp	r2, r3
 800230c:	d38e      	bcc.n	800222c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8002320:	af00      	add	r7, sp, #0
 8002322:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002326:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800232a:	6018      	str	r0, [r3, #0]
 800232c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002330:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002334:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8002336:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800233a:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8002344:	f107 0208 	add.w	r2, r7, #8
 8002348:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 800234c:	f7ff fed0 	bl	80020f0 <JPEG_Bits_To_SizeCodes>
 8002350:	4603      	mov	r3, r0
 8002352:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8002356:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800235e:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8002362:	e048      	b.n	80023f6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 800236a:	e03d      	b.n	80023e8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800236c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002370:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800237a:	4413      	add	r3, r2
 800237c:	3310      	adds	r3, #16
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8002384:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002388:	2b0b      	cmp	r3, #11
 800238a:	d901      	bls.n	8002390 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800238c:	2301      	movs	r3, #1
 800238e:	e032      	b.n	80023f6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8002390:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002394:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8002398:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800239c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023a0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80023a4:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80023a8:	6819      	ldr	r1, [r3, #0]
 80023aa:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80023ae:	3302      	adds	r3, #2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80023b6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80023ba:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 80023be:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80023c2:	4413      	add	r3, r2
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b2d9      	uxtb	r1, r3
 80023ca:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80023ce:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80023d8:	4413      	add	r3, r2
 80023da:	460a      	mov	r2, r1
 80023dc:	701a      	strb	r2, [r3, #0]
      k++;
 80023de:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80023e2:	3301      	adds	r3, #1
 80023e4:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 80023e8:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 80023ec:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d3bb      	bcc.n	800236c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b09a      	sub	sp, #104	@ 0x68
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	429a      	cmp	r2, r3
 8002418:	d106      	bne.n	8002428 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8002422:	3318      	adds	r3, #24
 8002424:	663b      	str	r3, [r7, #96]	@ 0x60
 8002426:	e00f      	b.n	8002448 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	429a      	cmp	r2, r3
 8002434:	d106      	bne.n	8002444 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800243e:	3318      	adds	r3, #24
 8002440:	663b      	str	r3, [r7, #96]	@ 0x60
 8002442:	e001      	b.n	8002448 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e059      	b.n	80024fc <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d055      	beq.n	80024fa <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800244e:	f107 0314 	add.w	r3, r7, #20
 8002452:	4619      	mov	r1, r3
 8002454:	68b8      	ldr	r0, [r7, #8]
 8002456:	f7ff ff60 	bl	800231a <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800245a:	4603      	mov	r3, r0
 800245c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8002460:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8002468:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800246c:	e046      	b.n	80024fc <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800246e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002470:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8002472:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002474:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8002478:	601a      	str	r2, [r3, #0]
    addressDef++;
 800247a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800247c:	3304      	adds	r3, #4
 800247e:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8002480:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002482:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8002486:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8002488:	230c      	movs	r3, #12
 800248a:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 800248c:	e032      	b.n	80024f4 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800248e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002490:	3b01      	subs	r3, #1
 8002492:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8002494:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002496:	3b04      	subs	r3, #4
 8002498:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800249a:	f107 0214 	add.w	r2, r7, #20
 800249e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024a0:	4413      	add	r3, r2
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80024aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024ac:	3302      	adds	r3, #2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	3368      	adds	r3, #104	@ 0x68
 80024b2:	443b      	add	r3, r7
 80024b4:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	4313      	orrs	r3, r2
 80024bc:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 80024be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024c0:	3b01      	subs	r3, #1
 80024c2:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80024c4:	f107 0214 	add.w	r2, r7, #20
 80024c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024ca:	4413      	add	r3, r2
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80024d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024d6:	3302      	adds	r3, #2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	3368      	adds	r3, #104	@ 0x68
 80024dc:	443b      	add	r3, r7
 80024de:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	4313      	orrs	r3, r2
 80024e6:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80024e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ea:	041a      	lsls	r2, r3, #16
 80024ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024ee:	431a      	orrs	r2, r3
 80024f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024f2:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80024f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d8c9      	bhi.n	800248e <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3768      	adds	r7, #104	@ 0x68
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 800250a:	af00      	add	r7, sp, #0
 800250c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002510:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002514:	6018      	str	r0, [r3, #0]
 8002516:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800251a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800251e:	6019      	str	r1, [r3, #0]
 8002520:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002524:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8002528:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800252a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800252e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800253a:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800253e:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d10c      	bne.n	8002562 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8002548:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800254c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002558:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800255c:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8002560:	e01d      	b.n	800259e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8002562:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002566:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8002572:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8002576:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d10c      	bne.n	800259a <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8002580:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002584:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8002590:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002594:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8002598:	e001      	b.n	800259e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e0a8      	b.n	80026f0 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800259e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80025a2:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 80a0 	beq.w	80026ee <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 80025ae:	f107 0214 	add.w	r2, r7, #20
 80025b2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80025b6:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80025ba:	4611      	mov	r1, r2
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	f7ff fe0c 	bl	80021da <JPEG_ACHuff_BitsVals_To_SizeCodes>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 80025c8:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 80025d0:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 80025d4:	e08c      	b.n	80026f0 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 80025d6:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80025da:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 80025de:	2300      	movs	r3, #0
 80025e0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80025e4:	e00e      	b.n	8002604 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 80025e6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80025ea:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80025ee:	601a      	str	r2, [r3, #0]
      addressDef++;
 80025f0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80025f4:	3304      	adds	r3, #4
 80025f6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 80025fa:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80025fe:	3301      	adds	r3, #1
 8002600:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8002604:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002608:	2b02      	cmp	r3, #2
 800260a:	d9ec      	bls.n	80025e6 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 800260c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002610:	4a3a      	ldr	r2, [pc, #232]	@ (80026fc <JPEG_Set_HuffAC_Mem+0x1f8>)
 8002612:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002614:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002618:	3304      	adds	r3, #4
 800261a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 800261e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002622:	4a37      	ldr	r2, [pc, #220]	@ (8002700 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8002624:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002626:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800262a:	3304      	adds	r3, #4
 800262c:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8002630:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002634:	4a33      	ldr	r2, [pc, #204]	@ (8002704 <JPEG_Set_HuffAC_Mem+0x200>)
 8002636:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002638:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800263c:	3304      	adds	r3, #4
 800263e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8002642:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002646:	4a30      	ldr	r2, [pc, #192]	@ (8002708 <JPEG_Set_HuffAC_Mem+0x204>)
 8002648:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800264a:	23a2      	movs	r3, #162	@ 0xa2
 800264c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8002650:	e049      	b.n	80026e6 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8002652:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002656:	3b01      	subs	r3, #1
 8002658:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 800265c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002660:	3b04      	subs	r3, #4
 8002662:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002666:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800266a:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800266e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002672:	4413      	add	r3, r2
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	021b      	lsls	r3, r3, #8
 8002678:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800267c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002680:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8002684:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002688:	3328      	adds	r3, #40	@ 0x28
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8002698:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800269c:	3b01      	subs	r3, #1
 800269e:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80026a2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80026a6:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 80026aa:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80026ae:	4413      	add	r3, r2
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80026b8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80026bc:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 80026c0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80026c4:	3328      	adds	r3, #40	@ 0x28
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80026d4:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80026d8:	041a      	lsls	r2, r3, #16
 80026da:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 80026de:	431a      	orrs	r2, r3
 80026e0:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80026e4:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80026e6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d8b1      	bhi.n	8002652 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	0fd10fd0 	.word	0x0fd10fd0
 8002700:	0fd30fd2 	.word	0x0fd30fd2
 8002704:	0fd50fd4 	.word	0x0fd50fd4
 8002708:	0fd70fd6 	.word	0x0fd70fd6

0800270c <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f84d 	bl	80027b4 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8002722:	461a      	mov	r2, r3
 8002724:	491f      	ldr	r1, [pc, #124]	@ (80027a4 <JPEG_Set_HuffEnc_Mem+0x98>)
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff feec 	bl	8002504 <JPEG_Set_HuffAC_Mem>
 800272c:	4603      	mov	r3, r0
 800272e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	e030      	b.n	800279c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8002742:	461a      	mov	r2, r3
 8002744:	4918      	ldr	r1, [pc, #96]	@ (80027a8 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff fedc 	bl	8002504 <JPEG_Set_HuffAC_Mem>
 800274c:	4603      	mov	r3, r0
 800274e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	e020      	b.n	800279c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8002762:	461a      	mov	r2, r3
 8002764:	4911      	ldr	r1, [pc, #68]	@ (80027ac <JPEG_Set_HuffEnc_Mem+0xa0>)
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff fe4a 	bl	8002400 <JPEG_Set_HuffDC_Mem>
 800276c:	4603      	mov	r3, r0
 800276e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	e010      	b.n	800279c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8002782:	461a      	mov	r2, r3
 8002784:	490a      	ldr	r1, [pc, #40]	@ (80027b0 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff fe3a 	bl	8002400 <JPEG_Set_HuffDC_Mem>
 800278c:	4603      	mov	r3, r0
 800278e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	e000      	b.n	800279c <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	080116e4 	.word	0x080116e4
 80027a8:	08011798 	.word	0x08011798
 80027ac:	080116ac 	.word	0x080116ac
 80027b0:	080116c8 	.word	0x080116c8

080027b4 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b08b      	sub	sp, #44	@ 0x2c
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 80027bc:	4b80      	ldr	r3, [pc, #512]	@ (80029c0 <JPEG_Set_Huff_DHTMem+0x20c>)
 80027be:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 80027c0:	4b80      	ldr	r3, [pc, #512]	@ (80029c4 <JPEG_Set_Huff_DHTMem+0x210>)
 80027c2:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 80027c4:	4b80      	ldr	r3, [pc, #512]	@ (80029c8 <JPEG_Set_Huff_DHTMem+0x214>)
 80027c6:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 80027c8:	4b80      	ldr	r3, [pc, #512]	@ (80029cc <JPEG_Set_Huff_DHTMem+0x218>)
 80027ca:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80027d4:	330c      	adds	r3, #12
 80027d6:	623b      	str	r3, [r7, #32]
  index = 16;
 80027d8:	2310      	movs	r3, #16
 80027da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80027dc:	e01d      	b.n	800281a <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	3b01      	subs	r3, #1
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	5cd3      	ldrb	r3, [r2, r3]
 80027e6:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	3b02      	subs	r3, #2
 80027ec:	6979      	ldr	r1, [r7, #20]
 80027ee:	5ccb      	ldrb	r3, [r1, r3]
 80027f0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80027f2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	3b03      	subs	r3, #3
 80027f8:	6979      	ldr	r1, [r7, #20]
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80027fe:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8002800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002802:	3a04      	subs	r2, #4
 8002804:	6979      	ldr	r1, [r7, #20]
 8002806:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002808:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	601a      	str	r2, [r3, #0]
    address--;
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	3b04      	subs	r3, #4
 8002812:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	3b04      	subs	r3, #4
 8002818:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281c:	2b03      	cmp	r3, #3
 800281e:	d8de      	bhi.n	80027de <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002828:	3318      	adds	r3, #24
 800282a:	623b      	str	r3, [r7, #32]
  index = 12;
 800282c:	230c      	movs	r3, #12
 800282e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002830:	e021      	b.n	8002876 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	3b01      	subs	r3, #1
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4413      	add	r3, r2
 800283a:	7c1b      	ldrb	r3, [r3, #16]
 800283c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	3b02      	subs	r3, #2
 8002842:	6979      	ldr	r1, [r7, #20]
 8002844:	440b      	add	r3, r1
 8002846:	7c1b      	ldrb	r3, [r3, #16]
 8002848:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800284a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800284c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284e:	3b03      	subs	r3, #3
 8002850:	6979      	ldr	r1, [r7, #20]
 8002852:	440b      	add	r3, r1
 8002854:	7c1b      	ldrb	r3, [r3, #16]
 8002856:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002858:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800285a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800285c:	3a04      	subs	r2, #4
 800285e:	6979      	ldr	r1, [r7, #20]
 8002860:	440a      	add	r2, r1
 8002862:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002864:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	601a      	str	r2, [r3, #0]
    address--;
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	3b04      	subs	r3, #4
 800286e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	3b04      	subs	r3, #4
 8002874:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002878:	2b03      	cmp	r3, #3
 800287a:	d8da      	bhi.n	8002832 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002884:	3328      	adds	r3, #40	@ 0x28
 8002886:	623b      	str	r3, [r7, #32]
  index = 16;
 8002888:	2310      	movs	r3, #16
 800288a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800288c:	e01d      	b.n	80028ca <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	3b01      	subs	r3, #1
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	5cd3      	ldrb	r3, [r2, r3]
 8002896:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	3b02      	subs	r3, #2
 800289c:	69f9      	ldr	r1, [r7, #28]
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80028a2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	3b03      	subs	r3, #3
 80028a8:	69f9      	ldr	r1, [r7, #28]
 80028aa:	5ccb      	ldrb	r3, [r1, r3]
 80028ac:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80028ae:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80028b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b2:	3a04      	subs	r2, #4
 80028b4:	69f9      	ldr	r1, [r7, #28]
 80028b6:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80028b8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	601a      	str	r2, [r3, #0]
    address--;
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	3b04      	subs	r3, #4
 80028c2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	3b04      	subs	r3, #4
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d8de      	bhi.n	800288e <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80028d8:	33cc      	adds	r3, #204	@ 0xcc
 80028da:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b3b      	ldr	r3, [pc, #236]	@ (80029d0 <JPEG_Set_Huff_DHTMem+0x21c>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80028ec:	021a      	lsls	r2, r3, #8
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
  *address = value;
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	3b04      	subs	r3, #4
 8002906:	623b      	str	r3, [r7, #32]
  index = 160;
 8002908:	23a0      	movs	r3, #160	@ 0xa0
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800290c:	e021      	b.n	8002952 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	3b01      	subs	r3, #1
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	4413      	add	r3, r2
 8002916:	7c1b      	ldrb	r3, [r3, #16]
 8002918:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	3b02      	subs	r3, #2
 800291e:	69f9      	ldr	r1, [r7, #28]
 8002920:	440b      	add	r3, r1
 8002922:	7c1b      	ldrb	r3, [r3, #16]
 8002924:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002926:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	3b03      	subs	r3, #3
 800292c:	69f9      	ldr	r1, [r7, #28]
 800292e:	440b      	add	r3, r1
 8002930:	7c1b      	ldrb	r3, [r3, #16]
 8002932:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002934:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8002936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002938:	3a04      	subs	r2, #4
 800293a:	69f9      	ldr	r1, [r7, #28]
 800293c:	440a      	add	r2, r1
 800293e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002940:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	601a      	str	r2, [r3, #0]
    address--;
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	3b04      	subs	r3, #4
 800294a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800294c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294e:	3b04      	subs	r3, #4
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	2b03      	cmp	r3, #3
 8002956:	d8da      	bhi.n	800290e <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002960:	33cc      	adds	r3, #204	@ 0xcc
 8002962:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	b29b      	uxth	r3, r3
 800296a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	785b      	ldrb	r3, [r3, #1]
 8002970:	061a      	lsls	r2, r3, #24
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	431a      	orrs	r2, r3
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	041b      	lsls	r3, r3, #16
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800298e:	33dc      	adds	r3, #220	@ 0xdc
 8002990:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4b0e      	ldr	r3, [pc, #56]	@ (80029d0 <JPEG_Set_Huff_DHTMem+0x21c>)
 8002998:	4013      	ands	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	7bdb      	ldrb	r3, [r3, #15]
 80029a0:	021a      	lsls	r2, r3, #8
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	7b92      	ldrb	r2, [r2, #14]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
  *address = value;
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	3b04      	subs	r3, #4
 80029b8:	623b      	str	r3, [r7, #32]
  index = 12;
 80029ba:	230c      	movs	r3, #12
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80029be:	e027      	b.n	8002a10 <JPEG_Set_Huff_DHTMem+0x25c>
 80029c0:	080116e4 	.word	0x080116e4
 80029c4:	08011798 	.word	0x08011798
 80029c8:	080116ac 	.word	0x080116ac
 80029cc:	080116c8 	.word	0x080116c8
 80029d0:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80029d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d6:	3301      	adds	r3, #1
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	5cd3      	ldrb	r3, [r2, r3]
 80029dc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80029de:	6939      	ldr	r1, [r7, #16]
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	440b      	add	r3, r1
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80029e8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80029ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ec:	3b01      	subs	r3, #1
 80029ee:	6939      	ldr	r1, [r7, #16]
 80029f0:	5ccb      	ldrb	r3, [r1, r3]
 80029f2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80029f4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 80029f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029f8:	3a02      	subs	r2, #2
 80029fa:	6939      	ldr	r1, [r7, #16]
 80029fc:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80029fe:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	601a      	str	r2, [r3, #0]
    address--;
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	3b04      	subs	r3, #4
 8002a08:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	3b04      	subs	r3, #4
 8002a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d8de      	bhi.n	80029d4 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002a1e:	33dc      	adds	r3, #220	@ 0xdc
 8002a20:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	7c5b      	ldrb	r3, [r3, #17]
 8002a2e:	061a      	lsls	r2, r3, #24
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	7c1b      	ldrb	r3, [r3, #16]
 8002a38:	041b      	lsls	r3, r3, #16
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002a4c:	33e8      	adds	r3, #232	@ 0xe8
 8002a4e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b6d      	ldr	r3, [pc, #436]	@ (8002c0c <JPEG_Set_Huff_DHTMem+0x458>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	7edb      	ldrb	r3, [r3, #27]
 8002a5e:	021a      	lsls	r2, r3, #8
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	7e92      	ldrb	r2, [r2, #26]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	3b04      	subs	r3, #4
 8002a76:	623b      	str	r3, [r7, #32]
  index = 8;
 8002a78:	2308      	movs	r3, #8
 8002a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002a7c:	e021      	b.n	8002ac2 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	3301      	adds	r3, #1
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4413      	add	r3, r2
 8002a86:	7c1b      	ldrb	r3, [r3, #16]
 8002a88:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8002a8a:	6939      	ldr	r1, [r7, #16]
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	440b      	add	r3, r1
 8002a90:	3310      	adds	r3, #16
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002a96:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	6939      	ldr	r1, [r7, #16]
 8002a9e:	440b      	add	r3, r1
 8002aa0:	7c1b      	ldrb	r3, [r3, #16]
 8002aa2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8002aa4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8002aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa8:	3a02      	subs	r2, #2
 8002aaa:	6939      	ldr	r1, [r7, #16]
 8002aac:	440a      	add	r2, r1
 8002aae:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002ab0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	601a      	str	r2, [r3, #0]
    address--;
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	3b04      	subs	r3, #4
 8002aba:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abe:	3b04      	subs	r3, #4
 8002ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d8da      	bhi.n	8002a7e <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002ad0:	33e8      	adds	r3, #232	@ 0xe8
 8002ad2:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	785b      	ldrb	r3, [r3, #1]
 8002ae0:	061a      	lsls	r2, r3, #24
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	041b      	lsls	r3, r3, #16
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002afe:	33f8      	adds	r3, #248	@ 0xf8
 8002b00:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4b41      	ldr	r3, [pc, #260]	@ (8002c0c <JPEG_Set_Huff_DHTMem+0x458>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	7bdb      	ldrb	r3, [r3, #15]
 8002b10:	021a      	lsls	r2, r3, #8
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	7b92      	ldrb	r2, [r2, #14]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	3b04      	subs	r3, #4
 8002b28:	623b      	str	r3, [r7, #32]
  index = 12;
 8002b2a:	230c      	movs	r3, #12
 8002b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002b2e:	e01d      	b.n	8002b6c <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	3301      	adds	r3, #1
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	5cd3      	ldrb	r3, [r2, r3]
 8002b38:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8002b3a:	69b9      	ldr	r1, [r7, #24]
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3e:	440b      	add	r3, r1
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002b44:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	69b9      	ldr	r1, [r7, #24]
 8002b4c:	5ccb      	ldrb	r3, [r1, r3]
 8002b4e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8002b50:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8002b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b54:	3a02      	subs	r2, #2
 8002b56:	69b9      	ldr	r1, [r7, #24]
 8002b58:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002b5a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	601a      	str	r2, [r3, #0]
    address--;
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	3b04      	subs	r3, #4
 8002b64:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	3b04      	subs	r3, #4
 8002b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d8de      	bhi.n	8002b30 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002b7a:	33f8      	adds	r3, #248	@ 0xf8
 8002b7c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	7c5b      	ldrb	r3, [r3, #17]
 8002b8a:	061a      	lsls	r2, r3, #24
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	7c1b      	ldrb	r3, [r3, #16]
 8002b94:	041b      	lsls	r3, r3, #16
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002ba8:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002bac:	623b      	str	r3, [r7, #32]
  index = 160;
 8002bae:	23a0      	movs	r3, #160	@ 0xa0
 8002bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002bb2:	e021      	b.n	8002bf8 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4413      	add	r3, r2
 8002bbc:	7c1b      	ldrb	r3, [r3, #16]
 8002bbe:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002bc0:	69b9      	ldr	r1, [r7, #24]
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3310      	adds	r3, #16
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002bcc:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	69b9      	ldr	r1, [r7, #24]
 8002bd4:	440b      	add	r3, r1
 8002bd6:	7c1b      	ldrb	r3, [r3, #16]
 8002bd8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002bda:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8002bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bde:	3a02      	subs	r2, #2
 8002be0:	69b9      	ldr	r1, [r7, #24]
 8002be2:	440a      	add	r2, r1
 8002be4:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002be6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	601a      	str	r2, [r3, #0]
    address--;
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	3b04      	subs	r3, #4
 8002bf0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	3b04      	subs	r3, #4
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d8da      	bhi.n	8002bb4 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8002bfe:	bf00      	nop
 8002c00:	bf00      	nop
 8002c02:	372c      	adds	r7, #44	@ 0x2c
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	ffff0000 	.word	0xffff0000

08002c10 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c1c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d108      	bne.n	8002c42 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0208 	orr.w	r2, r2, #8
 8002c3e:	605a      	str	r2, [r3, #4]
 8002c40:	e007      	b.n	8002c52 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0208 	bic.w	r2, r2, #8
 8002c50:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0201 	bic.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8002c70:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c80:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c90:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002ca0:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 0201 	orr.w	r2, r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d108      	bne.n	8002cd0 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8002ccc:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8002cce:	e00d      	b.n	8002cec <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	2b0c      	cmp	r3, #12
 8002cda:	d107      	bne.n	8002cec <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002cea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d125      	bne.n	8002d58 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d01e      	beq.n	8002d58 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	4619      	mov	r1, r3
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff f841 	bl	8001da8 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	4619      	mov	r1, r3
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f009 fa0a 	bl	800c14c <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d46:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d56:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d116      	bne.n	8002d92 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8002d72:	2108      	movs	r1, #8
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f988 	bl	800308a <JPEG_ReadInputData>
 8002d7a:	e00a      	b.n	8002d92 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f97c 	bl	800308a <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d116      	bne.n	8002dcc <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d004      	beq.n	8002db6 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8002dac:	2108      	movs	r1, #8
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f864 	bl	8002e7c <JPEG_StoreOutputData>
 8002db4:	e00a      	b.n	8002dcc <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f858 	bl	8002e7c <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d14b      	bne.n	8002e72 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d107      	bne.n	8002e06 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8002e04:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002e14:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69d9      	ldr	r1, [r3, #28]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	461a      	mov	r2, r3
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f009 f9d9 	bl	800c1e0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e38:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3e:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d103      	bne.n	8002e68 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f009 f9e1 	bl	800c228 <HAL_JPEG_DecodeCpltCallback>
 8002e66:	e002      	b.n	8002e6e <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff f911 	bl	8002090 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d34b      	bcc.n	8002f30 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	e031      	b.n	8002f02 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea4:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69da      	ldr	r2, [r3, #28]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eae:	4413      	add	r3, r2
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	0a19      	lsrs	r1, r3, #8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	b2ca      	uxtb	r2, r1
 8002ec8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	0c19      	lsrs	r1, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69da      	ldr	r2, [r3, #28]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	b2ca      	uxtb	r2, r1
 8002edc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	0e19      	lsrs	r1, r3, #24
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69da      	ldr	r2, [r3, #28]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	3303      	adds	r3, #3
 8002eec:	4413      	add	r3, r2
 8002eee:	b2ca      	uxtb	r2, r1
 8002ef0:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	1d1a      	adds	r2, r3, #4
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	3301      	adds	r3, #1
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d3c9      	bcc.n	8002e9e <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	429a      	cmp	r2, r3
 8002f14:	f040 80b5 	bne.w	8003082 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69d9      	ldr	r1, [r3, #28]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f20:	461a      	mov	r2, r3
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f009 f95c 	bl	800c1e0 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f2e:	e0a8      	b.n	8003082 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	f240 80a2 	bls.w	8003082 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	e031      	b.n	8002fb6 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f58:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69da      	ldr	r2, [r3, #28]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	4413      	add	r3, r2
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	0a19      	lsrs	r1, r3, #8
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69da      	ldr	r2, [r3, #28]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f76:	3301      	adds	r3, #1
 8002f78:	4413      	add	r3, r2
 8002f7a:	b2ca      	uxtb	r2, r1
 8002f7c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	0c19      	lsrs	r1, r3, #16
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8a:	3302      	adds	r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	b2ca      	uxtb	r2, r1
 8002f90:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	0e19      	lsrs	r1, r3, #24
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69da      	ldr	r2, [r3, #28]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	3303      	adds	r3, #3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	b2ca      	uxtb	r2, r1
 8002fa4:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002faa:	1d1a      	adds	r2, r3, #4
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d3c9      	bcc.n	8002f52 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d10b      	bne.n	8002fe2 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69d9      	ldr	r1, [r3, #28]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f009 f903 	bl	800c1e0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002fe0:	e04f      	b.n	8003082 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff4:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	e015      	b.n	8003028 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	fa22 f103 	lsr.w	r1, r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69da      	ldr	r2, [r3, #28]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003012:	4413      	add	r3, r2
 8003014:	b2ca      	uxtb	r2, r1
 8003016:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	3301      	adds	r3, #1
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	429a      	cmp	r2, r3
 800302e:	d3e5      	bcc.n	8002ffc <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69d9      	ldr	r1, [r3, #28]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003038:	461a      	mov	r2, r3
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f009 f8d0 	bl	800c1e0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f1c3 0304 	rsb	r3, r3, #4
 800304c:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	e013      	b.n	800307c <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	fa22 f103 	lsr.w	r1, r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003066:	4413      	add	r3, r2
 8003068:	b2ca      	uxtb	r2, r1
 800306a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	3301      	adds	r3, #1
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2b03      	cmp	r3, #3
 8003080:	d9e8      	bls.n	8003054 <JPEG_StoreOutputData+0x1d8>
}
 8003082:	bf00      	nop
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b088      	sub	sp, #32
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <JPEG_ReadInputData+0x1c>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d104      	bne.n	80030b0 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 80030a6:	2101      	movs	r1, #1
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7fe ff75 	bl	8001f98 <HAL_JPEG_Pause>
 80030ae:	e028      	b.n	8003102 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d906      	bls.n	80030ca <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	e01b      	b.n	8003102 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d115      	bne.n	8003102 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	4619      	mov	r1, r3
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f009 f841 	bl	800c164 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d905      	bls.n	80030f6 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ee:	f023 0203 	bic.w	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003100:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003106:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800310a:	2b00      	cmp	r3, #0
 800310c:	f040 809f 	bne.w	800324e <JPEG_ReadInputData+0x1c4>
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 809b 	beq.w	800324e <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	089b      	lsrs	r3, r3, #2
 800311c:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d335      	bcc.n	8003192 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	e02d      	b.n	8003188 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4413      	add	r3, r2
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3301      	adds	r3, #1
 8003146:	4413      	add	r3, r2
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800314c:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6999      	ldr	r1, [r3, #24]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	3302      	adds	r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800315e:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3303      	adds	r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8003174:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003176:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	1d1a      	adds	r2, r3, #4
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	3301      	adds	r3, #1
 8003186:	61bb      	str	r3, [r7, #24]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d3cd      	bcc.n	800312c <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8003190:	e05d      	b.n	800324e <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d035      	beq.n	8003204 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8003198:	2300      	movs	r3, #0
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	e02d      	b.n	80031fa <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699a      	ldr	r2, [r3, #24]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699a      	ldr	r2, [r3, #24]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3301      	adds	r3, #1
 80031b8:	4413      	add	r3, r2
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80031be:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6999      	ldr	r1, [r3, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3302      	adds	r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80031d0:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699a      	ldr	r2, [r3, #24]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3303      	adds	r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80031e6:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80031e8:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	1d1a      	adds	r2, r3, #4
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	3301      	adds	r3, #1
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d3cd      	bcc.n	800319e <JPEG_ReadInputData+0x114>
}
 8003202:	e024      	b.n	800324e <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 8003208:	2300      	movs	r3, #0
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	e017      	b.n	800323e <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	4413      	add	r3, r2
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	3301      	adds	r3, #1
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	429a      	cmp	r2, r3
 8003244:	d3e3      	bcc.n	800320e <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800324e:	bf00      	nop
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8003258:	b590      	push	{r4, r7, lr}
 800325a:	b087      	sub	sp, #28
 800325c:	af02      	add	r7, sp, #8
 800325e:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003266:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800326c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326e:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	429a      	cmp	r2, r3
 8003278:	d804      	bhi.n	8003284 <JPEG_DMA_StartProcess+0x2c>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	429a      	cmp	r2, r3
 8003282:	d901      	bls.n	8003288 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e074      	b.n	8003372 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328c:	4a3b      	ldr	r2, [pc, #236]	@ (800337c <JPEG_DMA_StartProcess+0x124>)
 800328e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003294:	4a3a      	ldr	r2, [pc, #232]	@ (8003380 <JPEG_DMA_StartProcess+0x128>)
 8003296:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800329c:	4a39      	ldr	r2, [pc, #228]	@ (8003384 <JPEG_DMA_StartProcess+0x12c>)
 800329e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a4:	4a36      	ldr	r2, [pc, #216]	@ (8003380 <JPEG_DMA_StartProcess+0x128>)
 80032a6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ac:	4a36      	ldr	r2, [pc, #216]	@ (8003388 <JPEG_DMA_StartProcess+0x130>)
 80032ae:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <JPEG_DMA_StartProcess+0x64>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d107      	bne.n	80032cc <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c0:	f043 0204 	orr.w	r2, r3, #4
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e052      	b.n	8003372 <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d4:	68f9      	ldr	r1, [r7, #12]
 80032d6:	fbb3 f1f1 	udiv	r1, r3, r1
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	fb00 f101 	mul.w	r1, r0, r1
 80032e0:	1a5b      	subs	r3, r3, r1
 80032e2:	1ad2      	subs	r2, r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f0:	68b9      	ldr	r1, [r7, #8]
 80032f2:	fbb3 f1f1 	udiv	r1, r3, r1
 80032f6:	68b8      	ldr	r0, [r7, #8]
 80032f8:	fb00 f101 	mul.w	r1, r0, r1
 80032fc:	1a5b      	subs	r3, r3, r1
 80032fe:	1ad2      	subs	r2, r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3344      	adds	r3, #68	@ 0x44
 800330e:	4619      	mov	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	461c      	mov	r4, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331a:	2201      	movs	r2, #1
 800331c:	9200      	str	r2, [sp, #0]
 800331e:	4622      	mov	r2, r4
 8003320:	f000 fbe8 	bl	8003af4 <HAL_MDMA_Start_IT>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800332e:	f043 0204 	orr.w	r2, r3, #4
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e01b      	b.n	8003372 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	4619      	mov	r1, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3340      	adds	r3, #64	@ 0x40
 800334a:	461c      	mov	r4, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003350:	2201      	movs	r2, #1
 8003352:	9200      	str	r2, [sp, #0]
 8003354:	4622      	mov	r2, r4
 8003356:	f000 fbcd 	bl	8003af4 <HAL_MDMA_Start_IT>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003364:	f043 0204 	orr.w	r2, r3, #4
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	bd90      	pop	{r4, r7, pc}
 800337a:	bf00      	nop
 800337c:	0800368b 	.word	0x0800368b
 8003380:	08003879 	.word	0x08003879
 8003384:	080037b7 	.word	0x080037b7
 8003388:	080038c9 	.word	0x080038c9

0800338c <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d125      	bne.n	80033ec <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d01e      	beq.n	80033ec <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3304      	adds	r3, #4
 80033b2:	4619      	mov	r1, r3
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7fe fcf7 	bl	8001da8 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3304      	adds	r3, #4
 80033c4:	4619      	mov	r1, r3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f008 fec0 	bl	800c14c <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033da:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033ea:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f2:	f003 0320 	and.w	r3, r3, #32
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d039      	beq.n	800346e <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fe:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0201 	bic.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003424:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003434:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d104      	bne.n	800344e <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fbd4 	bl	8003bf6 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d105      	bne.n	8003468 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fbc8 	bl	8003bf6 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8003466:	e002      	b.n	800346e <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f804 	bl	8003476 <JPEG_DMA_EndProcess>
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800348e:	1ad2      	subs	r2, r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349c:	429a      	cmp	r2, r3
 800349e:	d10a      	bne.n	80034b6 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69d9      	ldr	r1, [r3, #28]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a8:	461a      	mov	r2, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f008 fe98 	bl	800c1e0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d134      	bne.n	800352e <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69d9      	ldr	r1, [r3, #28]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	461a      	mov	r2, r3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f008 fe82 	bl	800c1e0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0201 	bic.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f6:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034fc:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d103      	bne.n	8003526 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f008 fe82 	bl	800c228 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8003524:	e00c      	b.n	8003540 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fe fdb2 	bl	8002090 <HAL_JPEG_EncodeCpltCallback>
}
 800352c:	e008      	b.n	8003540 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003532:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d102      	bne.n	8003540 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f804 	bl	8003548 <JPEG_DMA_PollResidualData>
}
 8003540:	bf00      	nop
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8003550:	2310      	movs	r3, #16
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e04f      	b.n	80035f6 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800355a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d146      	bne.n	80035f0 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	2b00      	cmp	r3, #0
 800356e:	d03f      	beq.n	80035f0 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003576:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	4413      	add	r3, r2
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	0a19      	lsrs	r1, r3, #8
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69da      	ldr	r2, [r3, #28]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	3301      	adds	r3, #1
 8003596:	4413      	add	r3, r2
 8003598:	b2ca      	uxtb	r2, r1
 800359a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	0c19      	lsrs	r1, r3, #16
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	3302      	adds	r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	b2ca      	uxtb	r2, r1
 80035ae:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	0e19      	lsrs	r1, r3, #24
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035bc:	3303      	adds	r3, #3
 80035be:	4413      	add	r3, r2
 80035c0:	b2ca      	uxtb	r2, r1
 80035c2:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	1d1a      	adds	r2, r3, #4
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d10a      	bne.n	80035f0 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69d9      	ldr	r1, [r3, #28]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	461a      	mov	r2, r3
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f008 fdfb 	bl	800c1e0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1ac      	bne.n	8003556 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003600:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	2b00      	cmp	r3, #0
 800360e:	d004      	beq.n	800361a <JPEG_DMA_PollResidualData+0xd2>
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d133      	bne.n	8003682 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0201 	bic.w	r2, r2, #1
 8003628:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69d9      	ldr	r1, [r3, #28]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	461a      	mov	r2, r3
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f008 fdcf 	bl	800c1e0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800364c:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003652:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d103      	bne.n	800367c <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f008 fdd7 	bl	800c228 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800367a:	e002      	b.n	8003682 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7fe fd07 	bl	8002090 <HAL_JPEG_EncodeCpltCallback>
}
 8003682:	bf00      	nop
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800368a:	b590      	push	{r4, r7, lr}
 800368c:	b087      	sub	sp, #28
 800368e:	af02      	add	r7, sp, #8
 8003690:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80036a6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036ac:	f248 030c 	movw	r3, #32780	@ 0x800c
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b0c      	cmp	r3, #12
 80036b4:	d17c      	bne.n	80037b0 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036bc:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80036cc:	1ad2      	subs	r2, r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	4619      	mov	r1, r3
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f008 fd43 	bl	800c164 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d81f      	bhi.n	8003728 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10d      	bne.n	800370a <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f2:	f043 0204 	orr.w	r2, r3, #4
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2206      	movs	r2, #6
 80036fe:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f008 fd86 	bl	800c214 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 8003708:	e052      	b.n	80037b0 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	fbb3 f1f1 	udiv	r1, r3, r1
 8003718:	68b8      	ldr	r0, [r7, #8]
 800371a:	fb00 f101 	mul.w	r1, r0, r1
 800371e:	1a5b      	subs	r3, r3, r1
 8003720:	1ad2      	subs	r2, r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	629a      	str	r2, [r3, #40]	@ 0x28
 8003726:	e010      	b.n	800374a <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00c      	beq.n	800374a <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d006      	beq.n	800374a <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003740:	089b      	lsrs	r3, r3, #2
 8003742:	3301      	adds	r3, #1
 8003744:	009a      	lsls	r2, r3, #2
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800374e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d124      	bne.n	80037a0 <JPEG_MDMAInCpltCallback+0x116>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375a:	2b00      	cmp	r3, #0
 800375c:	d020      	beq.n	80037a0 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	4619      	mov	r1, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3340      	adds	r3, #64	@ 0x40
 800376e:	461c      	mov	r4, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003774:	2201      	movs	r2, #1
 8003776:	9200      	str	r2, [sp, #0]
 8003778:	4622      	mov	r2, r4
 800377a:	f000 f9bb 	bl	8003af4 <HAL_MDMA_Start_IT>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00d      	beq.n	80037a0 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003788:	f043 0204 	orr.w	r2, r3, #4
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2206      	movs	r2, #6
 8003794:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f008 fd3b 	bl	800c214 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800379e:	e007      	b.n	80037b0 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80037ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd90      	pop	{r4, r7, pc}

080037b6 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 80037b6:	b590      	push	{r4, r7, lr}
 80037b8:	b087      	sub	sp, #28
 80037ba:	af02      	add	r7, sp, #8
 80037bc:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80037d2:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037d8:	f248 030c 	movw	r3, #32780	@ 0x800c
 80037dc:	4013      	ands	r3, r2
 80037de:	2b0c      	cmp	r3, #12
 80037e0:	d147      	bne.n	8003872 <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d138      	bne.n	8003862 <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80037fe:	1ad2      	subs	r2, r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	69d9      	ldr	r1, [r3, #28]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380c:	461a      	mov	r2, r3
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f008 fce6 	bl	800c1e0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d120      	bne.n	8003862 <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3344      	adds	r3, #68	@ 0x44
 800382a:	4619      	mov	r1, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	461c      	mov	r4, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003836:	2201      	movs	r2, #1
 8003838:	9200      	str	r2, [sp, #0]
 800383a:	4622      	mov	r2, r4
 800383c:	f000 f95a 	bl	8003af4 <HAL_MDMA_Start_IT>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00d      	beq.n	8003862 <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800384a:	f043 0204 	orr.w	r2, r3, #4
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2206      	movs	r2, #6
 8003856:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f008 fcda 	bl	800c214 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 8003860:	e007      	b.n	8003872 <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003870:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	bd90      	pop	{r4, r7, pc}

08003878 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0201 	bic.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80038a4:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b2:	f043 0204 	orr.w	r2, r3, #4
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f008 fcaa 	bl	800c214 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d4:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f7ff fdc7 	bl	8003476 <JPEG_DMA_EndProcess>
  }
}
 80038e8:	bf00      	nop
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b08b      	sub	sp, #44	@ 0x2c
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3350      	adds	r3, #80	@ 0x50
 8003902:	61bb      	str	r3, [r7, #24]

  i = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8003908:	e042      	b.n	8003990 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8003910:	2300      	movs	r3, #0
 8003912:	61fb      	str	r3, [r7, #28]
 8003914:	e033      	b.n	800397e <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
 8003920:	b2db      	uxtb	r3, r3
 8003922:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d103      	bne.n	8003932 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392c:	3364      	adds	r3, #100	@ 0x64
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003930:	e022      	b.n	8003978 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2264      	movs	r2, #100	@ 0x64
 8003936:	fb02 f303 	mul.w	r3, r2, r3
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800393e:	6a38      	ldr	r0, [r7, #32]
 8003940:	69f9      	ldr	r1, [r7, #28]
 8003942:	4401      	add	r1, r0
 8003944:	4818      	ldr	r0, [pc, #96]	@ (80039a8 <JPEG_GetQuality+0xb8>)
 8003946:	5c41      	ldrb	r1, [r0, r1]
 8003948:	440a      	add	r2, r1
 800394a:	7812      	ldrb	r2, [r2, #0]
 800394c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b64      	cmp	r3, #100	@ 0x64
 8003956:	d807      	bhi.n	8003968 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800395e:	085b      	lsrs	r3, r3, #1
 8003960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003962:	4413      	add	r3, r2
 8003964:	627b      	str	r3, [r7, #36]	@ 0x24
 8003966:	e007      	b.n	8003978 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8003968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003974:	4413      	add	r3, r2
 8003976:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	3301      	adds	r3, #1
 800397c:	61fb      	str	r3, [r7, #28]
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d9c8      	bls.n	8003916 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	3304      	adds	r3, #4
 8003988:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	3304      	adds	r3, #4
 800398e:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	2b3c      	cmp	r3, #60	@ 0x3c
 8003994:	d9b9      	bls.n	800390a <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	099b      	lsrs	r3, r3, #6
}
 800399a:	4618      	mov	r0, r3
 800399c:	372c      	adds	r7, #44	@ 0x2c
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	0801184c 	.word	0x0801184c

080039ac <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039b4:	f7fd faa6 	bl	8000f04 <HAL_GetTick>
 80039b8:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e03b      	b.n	8003a3c <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80039e4:	e00f      	b.n	8003a06 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80039e6:	f7fd fa8d 	bl	8000f04 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b05      	cmp	r3, #5
 80039f2:	d908      	bls.n	8003a06 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2240      	movs	r2, #64	@ 0x40
 80039f8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2203      	movs	r2, #3
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e01a      	b.n	8003a3c <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e8      	bne.n	80039e6 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fad9 	bl	8003fcc <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e048      	b.n	8003ae8 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0201 	bic.w	r2, r2, #1
 8003a64:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2200      	movs	r2, #0
 8003a74:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2200      	movs	r2, #0
 8003a84:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2200      	movs	r2, #0
 8003a94:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	221f      	movs	r2, #31
 8003abc:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e070      	b.n	8003bee <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_MDMA_Start_IT+0x26>
 8003b16:	2302      	movs	r3, #2
 8003b18:	e069      	b.n	8003bee <HAL_MDMA_Start_IT+0xfa>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d158      	bne.n	8003be0 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2202      	movs	r2, #2
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	68b9      	ldr	r1, [r7, #8]
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f9c8 	bl	8003eec <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0206 	orr.w	r2, r2, #6
 8003b6a:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d007      	beq.n	8003b84 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0210 	orr.w	r2, r2, #16
 8003b82:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d007      	beq.n	8003b9c <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0208 	orr.w	r2, r2, #8
 8003b9a:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0220 	orr.w	r2, r2, #32
 8003bb2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bcc:	d10e      	bne.n	8003bec <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003bdc:	60da      	str	r2, [r3, #12]
 8003bde:	e005      	b.n	8003bec <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 8003be8:	2302      	movs	r3, #2
 8003bea:	e000      	b.n	8003bee <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e017      	b.n	8003c38 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d004      	beq.n	8003c1e <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2280      	movs	r2, #128	@ 0x80
 8003c18:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e00c      	b.n	8003c38 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2204      	movs	r2, #4
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0201 	bic.w	r2, r2, #1
 8003c34:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c50:	4b91      	ldr	r3, [pc, #580]	@ (8003e98 <HAL_MDMA_IRQHandler+0x254>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a91      	ldr	r2, [pc, #580]	@ (8003e9c <HAL_MDMA_IRQHandler+0x258>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	0a9b      	lsrs	r3, r3, #10
 8003c5c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	4b8e      	ldr	r3, [pc, #568]	@ (8003ea0 <HAL_MDMA_IRQHandler+0x25c>)
 8003c66:	4413      	add	r3, r2
 8003c68:	099b      	lsrs	r3, r3, #6
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	2201      	movs	r2, #1
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8003c76:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 812d 	beq.w	8003ee0 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d054      	beq.n	8003d3e <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d04d      	beq.n	8003d3e <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0202 	bic.w	r2, r2, #2
 8003cb0:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cc8:	f043 0201 	orr.w	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	669a      	str	r2, [r3, #104]	@ 0x68
 8003cd0:	e005      	b.n	8003cde <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cd6:	f043 0202 	orr.w	r2, r3, #2
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cec:	f043 0204 	orr.w	r2, r3, #4
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d005      	beq.n	8003d0a <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d02:	f043 0208 	orr.w	r2, r3, #8
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d18:	f043 0210 	orr.w	r2, r3, #16
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d2e:	f043 0220 	orr.w	r2, r3, #32
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d012      	beq.n	8003d72 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2210      	movs	r2, #16
 8003d60:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d012      	beq.n	8003da6 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00b      	beq.n	8003da6 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2208      	movs	r2, #8
 8003d94:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d012      	beq.n	8003dda <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d039      	beq.n	8003e5c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d032      	beq.n	8003e5c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8003e04:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d110      	bne.n	8003e34 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d05c      	beq.n	8003ee4 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	4798      	blx	r3
        }
        return;
 8003e32:	e057      	b.n	8003ee4 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2202      	movs	r2, #2
 8003e3a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d040      	beq.n	8003ee6 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2204      	movs	r2, #4
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0201 	bic.w	r2, r2, #1
 8003e7a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d30d      	bcc.n	8003ea4 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f2      	bne.n	8003e7c <HAL_MDMA_IRQHandler+0x238>
 8003e96:	e006      	b.n	8003ea6 <HAL_MDMA_IRQHandler+0x262>
 8003e98:	20000000 	.word	0x20000000
 8003e9c:	1b4e81b5 	.word	0x1b4e81b5
 8003ea0:	adffffc0 	.word	0xadffffc0
        break;
 8003ea4:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d004      	beq.n	8003ec6 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003ec4:	e003      	b.n	8003ece <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
 8003ede:	e002      	b.n	8003ee6 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8003ee0:	bf00      	nop
 8003ee2:	e000      	b.n	8003ee6 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8003ee4:	bf00      	nop
    }
  }
}
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695a      	ldr	r2, [r3, #20]
 8003f00:	4b31      	ldr	r3, [pc, #196]	@ (8003fc8 <MDMA_SetConfig+0xdc>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	f3c2 0110 	ubfx	r1, r2, #0, #17
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	051a      	lsls	r2, r3, #20
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	221f      	movs	r2, #31
 8003f30:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003f48:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f50:	d002      	beq.n	8003f58 <MDMA_SetConfig+0x6c>
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d108      	bne.n	8003f6a <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003f66:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f68:	e007      	b.n	8003f7a <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003f78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003f80:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f88:	d002      	beq.n	8003f90 <MDMA_SetConfig+0xa4>
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d108      	bne.n	8003fa2 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003f9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fa0:	e007      	b.n	8003fb2 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003fb0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003fbc:	bf00      	nop
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	fffe0000 	.word	0xfffe0000

08003fcc <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68d9      	ldr	r1, [r3, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695a      	ldr	r2, [r3, #20]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003ff2:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003ffe:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004004:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800400a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004010:	3b01      	subs	r3, #1
 8004012:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8004014:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8004020:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004022:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800402c:	d107      	bne.n	800403e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800403c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2200      	movs	r2, #0
 8004044:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404a:	2b00      	cmp	r3, #0
 800404c:	da11      	bge.n	8004072 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800405c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004062:	425b      	negs	r3, r3
 8004064:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	b292      	uxth	r2, r2
 800406e:	621a      	str	r2, [r3, #32]
 8004070:	e006      	b.n	8004080 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004076:	461a      	mov	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	b292      	uxth	r2, r2
 800407e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004084:	2b00      	cmp	r3, #0
 8004086:	da15      	bge.n	80040b4 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695a      	ldr	r2, [r3, #20]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8004096:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409c:	425b      	negs	r3, r3
 800409e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6a19      	ldr	r1, [r3, #32]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	041a      	lsls	r2, r3, #16
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	621a      	str	r2, [r3, #32]
 80040b2:	e009      	b.n	80040c8 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6a19      	ldr	r1, [r3, #32]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040be:	041a      	lsls	r2, r3, #16
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d0:	d006      	beq.n	80040e0 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80040de:	e003      	b.n	80040e8 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2200      	movs	r2, #0
 80040e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2200      	movs	r2, #0
 80040ee:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80040f0:	bf00      	nop
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0

}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8004118:	4b1a      	ldr	r3, [pc, #104]	@ (8004184 <HAL_PWR_EnterSTOPMode+0x78>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f023 0201 	bic.w	r2, r3, #1
 8004120:	4918      	ldr	r1, [pc, #96]	@ (8004184 <HAL_PWR_EnterSTOPMode+0x78>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4313      	orrs	r3, r2
 8004126:	600b      	str	r3, [r1, #0]

  /* Configure the PWR mode for the different Domains */
#if defined (DUAL_CORE)
  /* Check CPU ID */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8004128:	f7fd f8e0 	bl	80012ec <HAL_GetCurrentCPUID>
 800412c:	4603      	mov	r3, r0
 800412e:	2b03      	cmp	r3, #3
 8004130:	d106      	bne.n	8004140 <HAL_PWR_EnterSTOPMode+0x34>
  {
    /* Keep DSTOP mode when Cortex-M7 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8004132:	4b14      	ldr	r3, [pc, #80]	@ (8004184 <HAL_PWR_EnterSTOPMode+0x78>)
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	4a13      	ldr	r2, [pc, #76]	@ (8004184 <HAL_PWR_EnterSTOPMode+0x78>)
 8004138:	f023 0305 	bic.w	r3, r3, #5
 800413c:	6113      	str	r3, [r2, #16]
 800413e:	e005      	b.n	800414c <HAL_PWR_EnterSTOPMode+0x40>
  }
  else
  {
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
 8004140:	4b10      	ldr	r3, [pc, #64]	@ (8004184 <HAL_PWR_EnterSTOPMode+0x78>)
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	4a0f      	ldr	r2, [pc, #60]	@ (8004184 <HAL_PWR_EnterSTOPMode+0x78>)
 8004146:	f023 0306 	bic.w	r3, r3, #6
 800414a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800414c:	4b0e      	ldr	r3, [pc, #56]	@ (8004188 <HAL_PWR_EnterSTOPMode+0x7c>)
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	4a0d      	ldr	r2, [pc, #52]	@ (8004188 <HAL_PWR_EnterSTOPMode+0x7c>)
 8004152:	f043 0304 	orr.w	r3, r3, #4
 8004156:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8004158:	f3bf 8f4f 	dsb	sy
}
 800415c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800415e:	f3bf 8f6f 	isb	sy
}
 8004162:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_PWR_EnterSTOPMode+0x62>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800416a:	bf30      	wfi
 800416c:	e000      	b.n	8004170 <HAL_PWR_EnterSTOPMode+0x64>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800416e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004170:	4b05      	ldr	r3, [pc, #20]	@ (8004188 <HAL_PWR_EnterSTOPMode+0x7c>)
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	4a04      	ldr	r2, [pc, #16]	@ (8004188 <HAL_PWR_EnterSTOPMode+0x7c>)
 8004176:	f023 0304 	bic.w	r3, r3, #4
 800417a:	6113      	str	r3, [r2, #16]
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	58024800 	.word	0x58024800
 8004188:	e000ed00 	.word	0xe000ed00

0800418c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004194:	4b29      	ldr	r3, [pc, #164]	@ (800423c <HAL_PWREx_ConfigSupply+0xb0>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	2b06      	cmp	r3, #6
 800419e:	d00a      	beq.n	80041b6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80041a0:	4b26      	ldr	r3, [pc, #152]	@ (800423c <HAL_PWREx_ConfigSupply+0xb0>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d001      	beq.n	80041b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e040      	b.n	8004234 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	e03e      	b.n	8004234 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80041b6:	4b21      	ldr	r3, [pc, #132]	@ (800423c <HAL_PWREx_ConfigSupply+0xb0>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80041be:	491f      	ldr	r1, [pc, #124]	@ (800423c <HAL_PWREx_ConfigSupply+0xb0>)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80041c6:	f7fc fe9d 	bl	8000f04 <HAL_GetTick>
 80041ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80041cc:	e009      	b.n	80041e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80041ce:	f7fc fe99 	bl	8000f04 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041dc:	d901      	bls.n	80041e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e028      	b.n	8004234 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80041e2:	4b16      	ldr	r3, [pc, #88]	@ (800423c <HAL_PWREx_ConfigSupply+0xb0>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ee:	d1ee      	bne.n	80041ce <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b1e      	cmp	r3, #30
 80041f4:	d008      	beq.n	8004208 <HAL_PWREx_ConfigSupply+0x7c>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80041fa:	d005      	beq.n	8004208 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b1d      	cmp	r3, #29
 8004200:	d002      	beq.n	8004208 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b2d      	cmp	r3, #45	@ 0x2d
 8004206:	d114      	bne.n	8004232 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004208:	f7fc fe7c 	bl	8000f04 <HAL_GetTick>
 800420c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800420e:	e009      	b.n	8004224 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004210:	f7fc fe78 	bl	8000f04 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800421e:	d901      	bls.n	8004224 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e007      	b.n	8004234 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004224:	4b05      	ldr	r3, [pc, #20]	@ (800423c <HAL_PWREx_ConfigSupply+0xb0>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800422c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004230:	d1ee      	bne.n	8004210 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	58024800 	.word	0x58024800

08004240 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08c      	sub	sp, #48	@ 0x30
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	f000 bc48 	b.w	8004ae4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8088 	beq.w	8004372 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004262:	4b99      	ldr	r3, [pc, #612]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800426a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800426c:	4b96      	ldr	r3, [pc, #600]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 800426e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004270:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004274:	2b10      	cmp	r3, #16
 8004276:	d007      	beq.n	8004288 <HAL_RCC_OscConfig+0x48>
 8004278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800427a:	2b18      	cmp	r3, #24
 800427c:	d111      	bne.n	80042a2 <HAL_RCC_OscConfig+0x62>
 800427e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d10c      	bne.n	80042a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004288:	4b8f      	ldr	r3, [pc, #572]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d06d      	beq.n	8004370 <HAL_RCC_OscConfig+0x130>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d169      	bne.n	8004370 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	f000 bc21 	b.w	8004ae4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042aa:	d106      	bne.n	80042ba <HAL_RCC_OscConfig+0x7a>
 80042ac:	4b86      	ldr	r3, [pc, #536]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a85      	ldr	r2, [pc, #532]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 80042b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	e02e      	b.n	8004318 <HAL_RCC_OscConfig+0xd8>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10c      	bne.n	80042dc <HAL_RCC_OscConfig+0x9c>
 80042c2:	4b81      	ldr	r3, [pc, #516]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a80      	ldr	r2, [pc, #512]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 80042c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	4b7e      	ldr	r3, [pc, #504]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a7d      	ldr	r2, [pc, #500]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 80042d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	e01d      	b.n	8004318 <HAL_RCC_OscConfig+0xd8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042e4:	d10c      	bne.n	8004300 <HAL_RCC_OscConfig+0xc0>
 80042e6:	4b78      	ldr	r3, [pc, #480]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a77      	ldr	r2, [pc, #476]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 80042ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	4b75      	ldr	r3, [pc, #468]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a74      	ldr	r2, [pc, #464]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 80042f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e00b      	b.n	8004318 <HAL_RCC_OscConfig+0xd8>
 8004300:	4b71      	ldr	r3, [pc, #452]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a70      	ldr	r2, [pc, #448]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 8004306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	4b6e      	ldr	r3, [pc, #440]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a6d      	ldr	r2, [pc, #436]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 8004312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d013      	beq.n	8004348 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fc fdf0 	bl	8000f04 <HAL_GetTick>
 8004324:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004328:	f7fc fdec 	bl	8000f04 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b64      	cmp	r3, #100	@ 0x64
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e3d4      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800433a:	4b63      	ldr	r3, [pc, #396]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0f0      	beq.n	8004328 <HAL_RCC_OscConfig+0xe8>
 8004346:	e014      	b.n	8004372 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fc fddc 	bl	8000f04 <HAL_GetTick>
 800434c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004350:	f7fc fdd8 	bl	8000f04 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b64      	cmp	r3, #100	@ 0x64
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e3c0      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004362:	4b59      	ldr	r3, [pc, #356]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x110>
 800436e:	e000      	b.n	8004372 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 80ca 	beq.w	8004514 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004380:	4b51      	ldr	r3, [pc, #324]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004388:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800438a:	4b4f      	ldr	r3, [pc, #316]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 800438c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <HAL_RCC_OscConfig+0x166>
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	2b18      	cmp	r3, #24
 800439a:	d156      	bne.n	800444a <HAL_RCC_OscConfig+0x20a>
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d151      	bne.n	800444a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043a6:	4b48      	ldr	r3, [pc, #288]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <HAL_RCC_OscConfig+0x17e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e392      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043be:	4b42      	ldr	r3, [pc, #264]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f023 0219 	bic.w	r2, r3, #25
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	493f      	ldr	r1, [pc, #252]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fc fd98 	bl	8000f04 <HAL_GetTick>
 80043d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d8:	f7fc fd94 	bl	8000f04 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e37c      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043ea:	4b37      	ldr	r3, [pc, #220]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f6:	f7fc fdd5 	bl	8000fa4 <HAL_GetREVID>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004400:	4293      	cmp	r3, r2
 8004402:	d817      	bhi.n	8004434 <HAL_RCC_OscConfig+0x1f4>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	2b40      	cmp	r3, #64	@ 0x40
 800440a:	d108      	bne.n	800441e <HAL_RCC_OscConfig+0x1de>
 800440c:	4b2e      	ldr	r3, [pc, #184]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004414:	4a2c      	ldr	r2, [pc, #176]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 8004416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800441a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800441c:	e07a      	b.n	8004514 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441e:	4b2a      	ldr	r3, [pc, #168]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	031b      	lsls	r3, r3, #12
 800442c:	4926      	ldr	r1, [pc, #152]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 800442e:	4313      	orrs	r3, r2
 8004430:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004432:	e06f      	b.n	8004514 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004434:	4b24      	ldr	r3, [pc, #144]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	061b      	lsls	r3, r3, #24
 8004442:	4921      	ldr	r1, [pc, #132]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 8004444:	4313      	orrs	r3, r2
 8004446:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004448:	e064      	b.n	8004514 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d047      	beq.n	80044e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004452:	4b1d      	ldr	r3, [pc, #116]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f023 0219 	bic.w	r2, r3, #25
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	491a      	ldr	r1, [pc, #104]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 8004460:	4313      	orrs	r3, r2
 8004462:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004464:	f7fc fd4e 	bl	8000f04 <HAL_GetTick>
 8004468:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800446c:	f7fc fd4a 	bl	8000f04 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e332      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800447e:	4b12      	ldr	r3, [pc, #72]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0f0      	beq.n	800446c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448a:	f7fc fd8b 	bl	8000fa4 <HAL_GetREVID>
 800448e:	4603      	mov	r3, r0
 8004490:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004494:	4293      	cmp	r3, r2
 8004496:	d819      	bhi.n	80044cc <HAL_RCC_OscConfig+0x28c>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	2b40      	cmp	r3, #64	@ 0x40
 800449e:	d108      	bne.n	80044b2 <HAL_RCC_OscConfig+0x272>
 80044a0:	4b09      	ldr	r3, [pc, #36]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80044a8:	4a07      	ldr	r2, [pc, #28]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 80044aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044ae:	6053      	str	r3, [r2, #4]
 80044b0:	e030      	b.n	8004514 <HAL_RCC_OscConfig+0x2d4>
 80044b2:	4b05      	ldr	r3, [pc, #20]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	031b      	lsls	r3, r3, #12
 80044c0:	4901      	ldr	r1, [pc, #4]	@ (80044c8 <HAL_RCC_OscConfig+0x288>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	604b      	str	r3, [r1, #4]
 80044c6:	e025      	b.n	8004514 <HAL_RCC_OscConfig+0x2d4>
 80044c8:	58024400 	.word	0x58024400
 80044cc:	4b9a      	ldr	r3, [pc, #616]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	061b      	lsls	r3, r3, #24
 80044da:	4997      	ldr	r1, [pc, #604]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	604b      	str	r3, [r1, #4]
 80044e0:	e018      	b.n	8004514 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e2:	4b95      	ldr	r3, [pc, #596]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a94      	ldr	r2, [pc, #592]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 80044e8:	f023 0301 	bic.w	r3, r3, #1
 80044ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ee:	f7fc fd09 	bl	8000f04 <HAL_GetTick>
 80044f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f6:	f7fc fd05 	bl	8000f04 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e2ed      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004508:	4b8b      	ldr	r3, [pc, #556]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1f0      	bne.n	80044f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80a9 	beq.w	8004674 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004522:	4b85      	ldr	r3, [pc, #532]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800452a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800452c:	4b82      	ldr	r3, [pc, #520]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 800452e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004530:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d007      	beq.n	8004548 <HAL_RCC_OscConfig+0x308>
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	2b18      	cmp	r3, #24
 800453c:	d13a      	bne.n	80045b4 <HAL_RCC_OscConfig+0x374>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	2b01      	cmp	r3, #1
 8004546:	d135      	bne.n	80045b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004548:	4b7b      	ldr	r3, [pc, #492]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_RCC_OscConfig+0x320>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	2b80      	cmp	r3, #128	@ 0x80
 800455a:	d001      	beq.n	8004560 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e2c1      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004560:	f7fc fd20 	bl	8000fa4 <HAL_GetREVID>
 8004564:	4603      	mov	r3, r0
 8004566:	f241 0203 	movw	r2, #4099	@ 0x1003
 800456a:	4293      	cmp	r3, r2
 800456c:	d817      	bhi.n	800459e <HAL_RCC_OscConfig+0x35e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	2b20      	cmp	r3, #32
 8004574:	d108      	bne.n	8004588 <HAL_RCC_OscConfig+0x348>
 8004576:	4b70      	ldr	r3, [pc, #448]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800457e:	4a6e      	ldr	r2, [pc, #440]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 8004580:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004584:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004586:	e075      	b.n	8004674 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004588:	4b6b      	ldr	r3, [pc, #428]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	069b      	lsls	r3, r3, #26
 8004596:	4968      	ldr	r1, [pc, #416]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800459c:	e06a      	b.n	8004674 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800459e:	4b66      	ldr	r3, [pc, #408]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	061b      	lsls	r3, r3, #24
 80045ac:	4962      	ldr	r1, [pc, #392]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045b2:	e05f      	b.n	8004674 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d042      	beq.n	8004642 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80045bc:	4b5e      	ldr	r3, [pc, #376]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a5d      	ldr	r2, [pc, #372]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 80045c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fc fc9c 	bl	8000f04 <HAL_GetTick>
 80045cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80045d0:	f7fc fc98 	bl	8000f04 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e280      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045e2:	4b55      	ldr	r3, [pc, #340]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045ee:	f7fc fcd9 	bl	8000fa4 <HAL_GetREVID>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d817      	bhi.n	800462c <HAL_RCC_OscConfig+0x3ec>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	2b20      	cmp	r3, #32
 8004602:	d108      	bne.n	8004616 <HAL_RCC_OscConfig+0x3d6>
 8004604:	4b4c      	ldr	r3, [pc, #304]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800460c:	4a4a      	ldr	r2, [pc, #296]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 800460e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004612:	6053      	str	r3, [r2, #4]
 8004614:	e02e      	b.n	8004674 <HAL_RCC_OscConfig+0x434>
 8004616:	4b48      	ldr	r3, [pc, #288]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	069b      	lsls	r3, r3, #26
 8004624:	4944      	ldr	r1, [pc, #272]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 8004626:	4313      	orrs	r3, r2
 8004628:	604b      	str	r3, [r1, #4]
 800462a:	e023      	b.n	8004674 <HAL_RCC_OscConfig+0x434>
 800462c:	4b42      	ldr	r3, [pc, #264]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	061b      	lsls	r3, r3, #24
 800463a:	493f      	ldr	r1, [pc, #252]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 800463c:	4313      	orrs	r3, r2
 800463e:	60cb      	str	r3, [r1, #12]
 8004640:	e018      	b.n	8004674 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004642:	4b3d      	ldr	r3, [pc, #244]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a3c      	ldr	r2, [pc, #240]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 8004648:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800464c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7fc fc59 	bl	8000f04 <HAL_GetTick>
 8004652:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004656:	f7fc fc55 	bl	8000f04 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e23d      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004668:	4b33      	ldr	r3, [pc, #204]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f0      	bne.n	8004656 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	2b00      	cmp	r3, #0
 800467e:	d036      	beq.n	80046ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d019      	beq.n	80046bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004688:	4b2b      	ldr	r3, [pc, #172]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 800468a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800468c:	4a2a      	ldr	r2, [pc, #168]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004694:	f7fc fc36 	bl	8000f04 <HAL_GetTick>
 8004698:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800469c:	f7fc fc32 	bl	8000f04 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e21a      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046ae:	4b22      	ldr	r3, [pc, #136]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 80046b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f0      	beq.n	800469c <HAL_RCC_OscConfig+0x45c>
 80046ba:	e018      	b.n	80046ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 80046be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 80046c2:	f023 0301 	bic.w	r3, r3, #1
 80046c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c8:	f7fc fc1c 	bl	8000f04 <HAL_GetTick>
 80046cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d0:	f7fc fc18 	bl	8000f04 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e200      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046e2:	4b15      	ldr	r3, [pc, #84]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 80046e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f0      	bne.n	80046d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d039      	beq.n	800476e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d01c      	beq.n	800473c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004702:	4b0d      	ldr	r3, [pc, #52]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a0c      	ldr	r2, [pc, #48]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 8004708:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800470c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800470e:	f7fc fbf9 	bl	8000f04 <HAL_GetTick>
 8004712:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004716:	f7fc fbf5 	bl	8000f04 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e1dd      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004728:	4b03      	ldr	r3, [pc, #12]	@ (8004738 <HAL_RCC_OscConfig+0x4f8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f0      	beq.n	8004716 <HAL_RCC_OscConfig+0x4d6>
 8004734:	e01b      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
 8004736:	bf00      	nop
 8004738:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800473c:	4b9b      	ldr	r3, [pc, #620]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a9a      	ldr	r2, [pc, #616]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004742:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004746:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004748:	f7fc fbdc 	bl	8000f04 <HAL_GetTick>
 800474c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004750:	f7fc fbd8 	bl	8000f04 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e1c0      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004762:	4b92      	ldr	r3, [pc, #584]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 8081 	beq.w	800487e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800477c:	4b8c      	ldr	r3, [pc, #560]	@ (80049b0 <HAL_RCC_OscConfig+0x770>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a8b      	ldr	r2, [pc, #556]	@ (80049b0 <HAL_RCC_OscConfig+0x770>)
 8004782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004786:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004788:	f7fc fbbc 	bl	8000f04 <HAL_GetTick>
 800478c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004790:	f7fc fbb8 	bl	8000f04 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	@ 0x64
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e1a0      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047a2:	4b83      	ldr	r3, [pc, #524]	@ (80049b0 <HAL_RCC_OscConfig+0x770>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d106      	bne.n	80047c4 <HAL_RCC_OscConfig+0x584>
 80047b6:	4b7d      	ldr	r3, [pc, #500]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ba:	4a7c      	ldr	r2, [pc, #496]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80047c2:	e02d      	b.n	8004820 <HAL_RCC_OscConfig+0x5e0>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10c      	bne.n	80047e6 <HAL_RCC_OscConfig+0x5a6>
 80047cc:	4b77      	ldr	r3, [pc, #476]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d0:	4a76      	ldr	r2, [pc, #472]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 80047d2:	f023 0301 	bic.w	r3, r3, #1
 80047d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047d8:	4b74      	ldr	r3, [pc, #464]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047dc:	4a73      	ldr	r2, [pc, #460]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 80047de:	f023 0304 	bic.w	r3, r3, #4
 80047e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80047e4:	e01c      	b.n	8004820 <HAL_RCC_OscConfig+0x5e0>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b05      	cmp	r3, #5
 80047ec:	d10c      	bne.n	8004808 <HAL_RCC_OscConfig+0x5c8>
 80047ee:	4b6f      	ldr	r3, [pc, #444]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f2:	4a6e      	ldr	r2, [pc, #440]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 80047f4:	f043 0304 	orr.w	r3, r3, #4
 80047f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047fa:	4b6c      	ldr	r3, [pc, #432]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fe:	4a6b      	ldr	r2, [pc, #428]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004800:	f043 0301 	orr.w	r3, r3, #1
 8004804:	6713      	str	r3, [r2, #112]	@ 0x70
 8004806:	e00b      	b.n	8004820 <HAL_RCC_OscConfig+0x5e0>
 8004808:	4b68      	ldr	r3, [pc, #416]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 800480a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480c:	4a67      	ldr	r2, [pc, #412]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 800480e:	f023 0301 	bic.w	r3, r3, #1
 8004812:	6713      	str	r3, [r2, #112]	@ 0x70
 8004814:	4b65      	ldr	r3, [pc, #404]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004818:	4a64      	ldr	r2, [pc, #400]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 800481a:	f023 0304 	bic.w	r3, r3, #4
 800481e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d015      	beq.n	8004854 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004828:	f7fc fb6c 	bl	8000f04 <HAL_GetTick>
 800482c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800482e:	e00a      	b.n	8004846 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004830:	f7fc fb68 	bl	8000f04 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800483e:	4293      	cmp	r3, r2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e14e      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004846:	4b59      	ldr	r3, [pc, #356]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0ee      	beq.n	8004830 <HAL_RCC_OscConfig+0x5f0>
 8004852:	e014      	b.n	800487e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004854:	f7fc fb56 	bl	8000f04 <HAL_GetTick>
 8004858:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800485a:	e00a      	b.n	8004872 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800485c:	f7fc fb52 	bl	8000f04 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800486a:	4293      	cmp	r3, r2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e138      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004872:	4b4e      	ldr	r3, [pc, #312]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1ee      	bne.n	800485c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 812d 	beq.w	8004ae2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004888:	4b48      	ldr	r3, [pc, #288]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004890:	2b18      	cmp	r3, #24
 8004892:	f000 80bd 	beq.w	8004a10 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489a:	2b02      	cmp	r3, #2
 800489c:	f040 809e 	bne.w	80049dc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a0:	4b42      	ldr	r3, [pc, #264]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a41      	ldr	r2, [pc, #260]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 80048a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ac:	f7fc fb2a 	bl	8000f04 <HAL_GetTick>
 80048b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b4:	f7fc fb26 	bl	8000f04 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e10e      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048c6:	4b39      	ldr	r3, [pc, #228]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048d2:	4b36      	ldr	r3, [pc, #216]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 80048d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048d6:	4b37      	ldr	r3, [pc, #220]	@ (80049b4 <HAL_RCC_OscConfig+0x774>)
 80048d8:	4013      	ands	r3, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80048e2:	0112      	lsls	r2, r2, #4
 80048e4:	430a      	orrs	r2, r1
 80048e6:	4931      	ldr	r1, [pc, #196]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f0:	3b01      	subs	r3, #1
 80048f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048fa:	3b01      	subs	r3, #1
 80048fc:	025b      	lsls	r3, r3, #9
 80048fe:	b29b      	uxth	r3, r3
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004906:	3b01      	subs	r3, #1
 8004908:	041b      	lsls	r3, r3, #16
 800490a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004914:	3b01      	subs	r3, #1
 8004916:	061b      	lsls	r3, r3, #24
 8004918:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800491c:	4923      	ldr	r1, [pc, #140]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 800491e:	4313      	orrs	r3, r2
 8004920:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004922:	4b22      	ldr	r3, [pc, #136]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004926:	4a21      	ldr	r2, [pc, #132]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004928:	f023 0301 	bic.w	r3, r3, #1
 800492c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800492e:	4b1f      	ldr	r3, [pc, #124]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004932:	4b21      	ldr	r3, [pc, #132]	@ (80049b8 <HAL_RCC_OscConfig+0x778>)
 8004934:	4013      	ands	r3, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800493a:	00d2      	lsls	r2, r2, #3
 800493c:	491b      	ldr	r1, [pc, #108]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 800493e:	4313      	orrs	r3, r2
 8004940:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004942:	4b1a      	ldr	r3, [pc, #104]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004946:	f023 020c 	bic.w	r2, r3, #12
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494e:	4917      	ldr	r1, [pc, #92]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004950:	4313      	orrs	r3, r2
 8004952:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004954:	4b15      	ldr	r3, [pc, #84]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004958:	f023 0202 	bic.w	r2, r3, #2
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004960:	4912      	ldr	r1, [pc, #72]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004962:	4313      	orrs	r3, r2
 8004964:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004966:	4b11      	ldr	r3, [pc, #68]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496a:	4a10      	ldr	r2, [pc, #64]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 800496c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004970:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004972:	4b0e      	ldr	r3, [pc, #56]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004976:	4a0d      	ldr	r2, [pc, #52]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800497c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800497e:	4b0b      	ldr	r3, [pc, #44]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004982:	4a0a      	ldr	r2, [pc, #40]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004984:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004988:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800498a:	4b08      	ldr	r3, [pc, #32]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 800498c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498e:	4a07      	ldr	r2, [pc, #28]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004996:	4b05      	ldr	r3, [pc, #20]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a04      	ldr	r2, [pc, #16]	@ (80049ac <HAL_RCC_OscConfig+0x76c>)
 800499c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a2:	f7fc faaf 	bl	8000f04 <HAL_GetTick>
 80049a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049a8:	e011      	b.n	80049ce <HAL_RCC_OscConfig+0x78e>
 80049aa:	bf00      	nop
 80049ac:	58024400 	.word	0x58024400
 80049b0:	58024800 	.word	0x58024800
 80049b4:	fffffc0c 	.word	0xfffffc0c
 80049b8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049bc:	f7fc faa2 	bl	8000f04 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e08a      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049ce:	4b47      	ldr	r3, [pc, #284]	@ (8004aec <HAL_RCC_OscConfig+0x8ac>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0x77c>
 80049da:	e082      	b.n	8004ae2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049dc:	4b43      	ldr	r3, [pc, #268]	@ (8004aec <HAL_RCC_OscConfig+0x8ac>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a42      	ldr	r2, [pc, #264]	@ (8004aec <HAL_RCC_OscConfig+0x8ac>)
 80049e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fc fa8c 	bl	8000f04 <HAL_GetTick>
 80049ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f0:	f7fc fa88 	bl	8000f04 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e070      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a02:	4b3a      	ldr	r3, [pc, #232]	@ (8004aec <HAL_RCC_OscConfig+0x8ac>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f0      	bne.n	80049f0 <HAL_RCC_OscConfig+0x7b0>
 8004a0e:	e068      	b.n	8004ae2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a10:	4b36      	ldr	r3, [pc, #216]	@ (8004aec <HAL_RCC_OscConfig+0x8ac>)
 8004a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a16:	4b35      	ldr	r3, [pc, #212]	@ (8004aec <HAL_RCC_OscConfig+0x8ac>)
 8004a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d031      	beq.n	8004a88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f003 0203 	and.w	r2, r3, #3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d12a      	bne.n	8004a88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	091b      	lsrs	r3, r3, #4
 8004a36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d122      	bne.n	8004a88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d11a      	bne.n	8004a88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	0a5b      	lsrs	r3, r3, #9
 8004a56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a5e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d111      	bne.n	8004a88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	0c1b      	lsrs	r3, r3, #16
 8004a68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a70:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d108      	bne.n	8004a88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	0e1b      	lsrs	r3, r3, #24
 8004a7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d001      	beq.n	8004a8c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e02b      	b.n	8004ae4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004a8c:	4b17      	ldr	r3, [pc, #92]	@ (8004aec <HAL_RCC_OscConfig+0x8ac>)
 8004a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a90:	08db      	lsrs	r3, r3, #3
 8004a92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a96:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d01f      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004aa2:	4b12      	ldr	r3, [pc, #72]	@ (8004aec <HAL_RCC_OscConfig+0x8ac>)
 8004aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa6:	4a11      	ldr	r2, [pc, #68]	@ (8004aec <HAL_RCC_OscConfig+0x8ac>)
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004aae:	f7fc fa29 	bl	8000f04 <HAL_GetTick>
 8004ab2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004ab4:	bf00      	nop
 8004ab6:	f7fc fa25 	bl	8000f04 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d0f9      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8004aec <HAL_RCC_OscConfig+0x8ac>)
 8004ac4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8004af0 <HAL_RCC_OscConfig+0x8b0>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ace:	00d2      	lsls	r2, r2, #3
 8004ad0:	4906      	ldr	r1, [pc, #24]	@ (8004aec <HAL_RCC_OscConfig+0x8ac>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004ad6:	4b05      	ldr	r3, [pc, #20]	@ (8004aec <HAL_RCC_OscConfig+0x8ac>)
 8004ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ada:	4a04      	ldr	r2, [pc, #16]	@ (8004aec <HAL_RCC_OscConfig+0x8ac>)
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3730      	adds	r7, #48	@ 0x30
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	58024400 	.word	0x58024400
 8004af0:	ffff0007 	.word	0xffff0007

08004af4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e19c      	b.n	8004e42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b08:	4b8a      	ldr	r3, [pc, #552]	@ (8004d34 <HAL_RCC_ClockConfig+0x240>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 030f 	and.w	r3, r3, #15
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d910      	bls.n	8004b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b16:	4b87      	ldr	r3, [pc, #540]	@ (8004d34 <HAL_RCC_ClockConfig+0x240>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 020f 	bic.w	r2, r3, #15
 8004b1e:	4985      	ldr	r1, [pc, #532]	@ (8004d34 <HAL_RCC_ClockConfig+0x240>)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b26:	4b83      	ldr	r3, [pc, #524]	@ (8004d34 <HAL_RCC_ClockConfig+0x240>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e184      	b.n	8004e42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d010      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691a      	ldr	r2, [r3, #16]
 8004b48:	4b7b      	ldr	r3, [pc, #492]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d908      	bls.n	8004b66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b54:	4b78      	ldr	r3, [pc, #480]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	4975      	ldr	r1, [pc, #468]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d010      	beq.n	8004b94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695a      	ldr	r2, [r3, #20]
 8004b76:	4b70      	ldr	r3, [pc, #448]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d908      	bls.n	8004b94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b82:	4b6d      	ldr	r3, [pc, #436]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	496a      	ldr	r1, [pc, #424]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d010      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	4b64      	ldr	r3, [pc, #400]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d908      	bls.n	8004bc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004bb0:	4b61      	ldr	r3, [pc, #388]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	495e      	ldr	r1, [pc, #376]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d010      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69da      	ldr	r2, [r3, #28]
 8004bd2:	4b59      	ldr	r3, [pc, #356]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d908      	bls.n	8004bf0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004bde:	4b56      	ldr	r3, [pc, #344]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	4953      	ldr	r1, [pc, #332]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d010      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	4b4d      	ldr	r3, [pc, #308]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	f003 030f 	and.w	r3, r3, #15
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d908      	bls.n	8004c1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c0c:	4b4a      	ldr	r3, [pc, #296]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	f023 020f 	bic.w	r2, r3, #15
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	4947      	ldr	r1, [pc, #284]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d055      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c2a:	4b43      	ldr	r3, [pc, #268]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	4940      	ldr	r1, [pc, #256]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d107      	bne.n	8004c54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c44:	4b3c      	ldr	r3, [pc, #240]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d121      	bne.n	8004c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e0f6      	b.n	8004e42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d107      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c5c:	4b36      	ldr	r3, [pc, #216]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d115      	bne.n	8004c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0ea      	b.n	8004e42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d107      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c74:	4b30      	ldr	r3, [pc, #192]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d109      	bne.n	8004c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0de      	b.n	8004e42 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c84:	4b2c      	ldr	r3, [pc, #176]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e0d6      	b.n	8004e42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c94:	4b28      	ldr	r3, [pc, #160]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f023 0207 	bic.w	r2, r3, #7
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4925      	ldr	r1, [pc, #148]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca6:	f7fc f92d 	bl	8000f04 <HAL_GetTick>
 8004caa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cac:	e00a      	b.n	8004cc4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cae:	f7fc f929 	bl	8000f04 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e0be      	b.n	8004e42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d1eb      	bne.n	8004cae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d010      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	4b14      	ldr	r3, [pc, #80]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d208      	bcs.n	8004d04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cf2:	4b11      	ldr	r3, [pc, #68]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	f023 020f 	bic.w	r2, r3, #15
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	490e      	ldr	r1, [pc, #56]	@ (8004d38 <HAL_RCC_ClockConfig+0x244>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d04:	4b0b      	ldr	r3, [pc, #44]	@ (8004d34 <HAL_RCC_ClockConfig+0x240>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 030f 	and.w	r3, r3, #15
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d214      	bcs.n	8004d3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d12:	4b08      	ldr	r3, [pc, #32]	@ (8004d34 <HAL_RCC_ClockConfig+0x240>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f023 020f 	bic.w	r2, r3, #15
 8004d1a:	4906      	ldr	r1, [pc, #24]	@ (8004d34 <HAL_RCC_ClockConfig+0x240>)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d22:	4b04      	ldr	r3, [pc, #16]	@ (8004d34 <HAL_RCC_ClockConfig+0x240>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d005      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e086      	b.n	8004e42 <HAL_RCC_ClockConfig+0x34e>
 8004d34:	52002000 	.word	0x52002000
 8004d38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d010      	beq.n	8004d6a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	4b3f      	ldr	r3, [pc, #252]	@ (8004e4c <HAL_RCC_ClockConfig+0x358>)
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d208      	bcs.n	8004d6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d58:	4b3c      	ldr	r3, [pc, #240]	@ (8004e4c <HAL_RCC_ClockConfig+0x358>)
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	4939      	ldr	r1, [pc, #228]	@ (8004e4c <HAL_RCC_ClockConfig+0x358>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d010      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	4b34      	ldr	r3, [pc, #208]	@ (8004e4c <HAL_RCC_ClockConfig+0x358>)
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d208      	bcs.n	8004d98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d86:	4b31      	ldr	r3, [pc, #196]	@ (8004e4c <HAL_RCC_ClockConfig+0x358>)
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	492e      	ldr	r1, [pc, #184]	@ (8004e4c <HAL_RCC_ClockConfig+0x358>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d010      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699a      	ldr	r2, [r3, #24]
 8004da8:	4b28      	ldr	r3, [pc, #160]	@ (8004e4c <HAL_RCC_ClockConfig+0x358>)
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d208      	bcs.n	8004dc6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004db4:	4b25      	ldr	r3, [pc, #148]	@ (8004e4c <HAL_RCC_ClockConfig+0x358>)
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	4922      	ldr	r1, [pc, #136]	@ (8004e4c <HAL_RCC_ClockConfig+0x358>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d010      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69da      	ldr	r2, [r3, #28]
 8004dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8004e4c <HAL_RCC_ClockConfig+0x358>)
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d208      	bcs.n	8004df4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004de2:	4b1a      	ldr	r3, [pc, #104]	@ (8004e4c <HAL_RCC_ClockConfig+0x358>)
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	4917      	ldr	r1, [pc, #92]	@ (8004e4c <HAL_RCC_ClockConfig+0x358>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004df4:	f000 f834 	bl	8004e60 <HAL_RCC_GetSysClockFreq>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	4b14      	ldr	r3, [pc, #80]	@ (8004e4c <HAL_RCC_ClockConfig+0x358>)
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	0a1b      	lsrs	r3, r3, #8
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	4912      	ldr	r1, [pc, #72]	@ (8004e50 <HAL_RCC_ClockConfig+0x35c>)
 8004e06:	5ccb      	ldrb	r3, [r1, r3]
 8004e08:	f003 031f 	and.w	r3, r3, #31
 8004e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e12:	4b0e      	ldr	r3, [pc, #56]	@ (8004e4c <HAL_RCC_ClockConfig+0x358>)
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	4a0d      	ldr	r2, [pc, #52]	@ (8004e50 <HAL_RCC_ClockConfig+0x35c>)
 8004e1c:	5cd3      	ldrb	r3, [r2, r3]
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	fa22 f303 	lsr.w	r3, r2, r3
 8004e28:	4a0a      	ldr	r2, [pc, #40]	@ (8004e54 <HAL_RCC_ClockConfig+0x360>)
 8004e2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8004e58 <HAL_RCC_ClockConfig+0x364>)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004e32:	4b0a      	ldr	r3, [pc, #40]	@ (8004e5c <HAL_RCC_ClockConfig+0x368>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fc f81a 	bl	8000e70 <HAL_InitTick>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	58024400 	.word	0x58024400
 8004e50:	0801169c 	.word	0x0801169c
 8004e54:	20000004 	.word	0x20000004
 8004e58:	20000000 	.word	0x20000000
 8004e5c:	20000008 	.word	0x20000008

08004e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b089      	sub	sp, #36	@ 0x24
 8004e64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e66:	4bb3      	ldr	r3, [pc, #716]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e6e:	2b18      	cmp	r3, #24
 8004e70:	f200 8155 	bhi.w	800511e <HAL_RCC_GetSysClockFreq+0x2be>
 8004e74:	a201      	add	r2, pc, #4	@ (adr r2, 8004e7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7a:	bf00      	nop
 8004e7c:	08004ee1 	.word	0x08004ee1
 8004e80:	0800511f 	.word	0x0800511f
 8004e84:	0800511f 	.word	0x0800511f
 8004e88:	0800511f 	.word	0x0800511f
 8004e8c:	0800511f 	.word	0x0800511f
 8004e90:	0800511f 	.word	0x0800511f
 8004e94:	0800511f 	.word	0x0800511f
 8004e98:	0800511f 	.word	0x0800511f
 8004e9c:	08004f07 	.word	0x08004f07
 8004ea0:	0800511f 	.word	0x0800511f
 8004ea4:	0800511f 	.word	0x0800511f
 8004ea8:	0800511f 	.word	0x0800511f
 8004eac:	0800511f 	.word	0x0800511f
 8004eb0:	0800511f 	.word	0x0800511f
 8004eb4:	0800511f 	.word	0x0800511f
 8004eb8:	0800511f 	.word	0x0800511f
 8004ebc:	08004f0d 	.word	0x08004f0d
 8004ec0:	0800511f 	.word	0x0800511f
 8004ec4:	0800511f 	.word	0x0800511f
 8004ec8:	0800511f 	.word	0x0800511f
 8004ecc:	0800511f 	.word	0x0800511f
 8004ed0:	0800511f 	.word	0x0800511f
 8004ed4:	0800511f 	.word	0x0800511f
 8004ed8:	0800511f 	.word	0x0800511f
 8004edc:	08004f13 	.word	0x08004f13
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ee0:	4b94      	ldr	r3, [pc, #592]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d009      	beq.n	8004f00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004eec:	4b91      	ldr	r3, [pc, #580]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	08db      	lsrs	r3, r3, #3
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	4a90      	ldr	r2, [pc, #576]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8004efc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004efe:	e111      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f00:	4b8d      	ldr	r3, [pc, #564]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f02:	61bb      	str	r3, [r7, #24]
      break;
 8004f04:	e10e      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004f06:	4b8d      	ldr	r3, [pc, #564]	@ (800513c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f08:	61bb      	str	r3, [r7, #24]
      break;
 8004f0a:	e10b      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004f0c:	4b8c      	ldr	r3, [pc, #560]	@ (8005140 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004f0e:	61bb      	str	r3, [r7, #24]
      break;
 8004f10:	e108      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f12:	4b88      	ldr	r3, [pc, #544]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f1c:	4b85      	ldr	r3, [pc, #532]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f20:	091b      	lsrs	r3, r3, #4
 8004f22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f26:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f28:	4b82      	ldr	r3, [pc, #520]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f32:	4b80      	ldr	r3, [pc, #512]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f36:	08db      	lsrs	r3, r3, #3
 8004f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	fb02 f303 	mul.w	r3, r2, r3
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 80e1 	beq.w	8005118 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	f000 8083 	beq.w	8005064 <HAL_RCC_GetSysClockFreq+0x204>
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	f200 80a1 	bhi.w	80050a8 <HAL_RCC_GetSysClockFreq+0x248>
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <HAL_RCC_GetSysClockFreq+0x114>
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d056      	beq.n	8005020 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004f72:	e099      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f74:	4b6f      	ldr	r3, [pc, #444]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d02d      	beq.n	8004fdc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f80:	4b6c      	ldr	r3, [pc, #432]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	08db      	lsrs	r3, r3, #3
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	4a6b      	ldr	r2, [pc, #428]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f90:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	ee07 3a90 	vmov	s15, r3
 8004f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	ee07 3a90 	vmov	s15, r3
 8004fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004faa:	4b62      	ldr	r3, [pc, #392]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fbe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005144 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004fda:	e087      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005148 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fee:	4b51      	ldr	r3, [pc, #324]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005002:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005144 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800500a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800500e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800501e:	e065      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800514c <HAL_RCC_GetSysClockFreq+0x2ec>
 800502e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005032:	4b40      	ldr	r3, [pc, #256]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005042:	ed97 6a02 	vldr	s12, [r7, #8]
 8005046:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005144 <HAL_RCC_GetSysClockFreq+0x2e4>
 800504a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800504e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800505a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800505e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005062:	e043      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005150 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005076:	4b2f      	ldr	r3, [pc, #188]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800507e:	ee07 3a90 	vmov	s15, r3
 8005082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005086:	ed97 6a02 	vldr	s12, [r7, #8]
 800508a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005144 <HAL_RCC_GetSysClockFreq+0x2e4>
 800508e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800509a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800509e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050a6:	e021      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800514c <HAL_RCC_GetSysClockFreq+0x2ec>
 80050b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005144 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80050ec:	4b11      	ldr	r3, [pc, #68]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f0:	0a5b      	lsrs	r3, r3, #9
 80050f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050f6:	3301      	adds	r3, #1
 80050f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	ee07 3a90 	vmov	s15, r3
 8005100:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005104:	edd7 6a07 	vldr	s13, [r7, #28]
 8005108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800510c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005110:	ee17 3a90 	vmov	r3, s15
 8005114:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005116:	e005      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	61bb      	str	r3, [r7, #24]
      break;
 800511c:	e002      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800511e:	4b07      	ldr	r3, [pc, #28]	@ (800513c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005120:	61bb      	str	r3, [r7, #24]
      break;
 8005122:	bf00      	nop
  }

  return sysclockfreq;
 8005124:	69bb      	ldr	r3, [r7, #24]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3724      	adds	r7, #36	@ 0x24
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	58024400 	.word	0x58024400
 8005138:	03d09000 	.word	0x03d09000
 800513c:	003d0900 	.word	0x003d0900
 8005140:	017d7840 	.word	0x017d7840
 8005144:	46000000 	.word	0x46000000
 8005148:	4c742400 	.word	0x4c742400
 800514c:	4a742400 	.word	0x4a742400
 8005150:	4bbebc20 	.word	0x4bbebc20

08005154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800515a:	f7ff fe81 	bl	8004e60 <HAL_RCC_GetSysClockFreq>
 800515e:	4602      	mov	r2, r0
 8005160:	4b10      	ldr	r3, [pc, #64]	@ (80051a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	0a1b      	lsrs	r3, r3, #8
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	490f      	ldr	r1, [pc, #60]	@ (80051a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800516c:	5ccb      	ldrb	r3, [r1, r3]
 800516e:	f003 031f 	and.w	r3, r3, #31
 8005172:	fa22 f303 	lsr.w	r3, r2, r3
 8005176:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005178:	4b0a      	ldr	r3, [pc, #40]	@ (80051a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	4a09      	ldr	r2, [pc, #36]	@ (80051a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005182:	5cd3      	ldrb	r3, [r2, r3]
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	fa22 f303 	lsr.w	r3, r2, r3
 800518e:	4a07      	ldr	r2, [pc, #28]	@ (80051ac <HAL_RCC_GetHCLKFreq+0x58>)
 8005190:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005192:	4a07      	ldr	r2, [pc, #28]	@ (80051b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005198:	4b04      	ldr	r3, [pc, #16]	@ (80051ac <HAL_RCC_GetHCLKFreq+0x58>)
 800519a:	681b      	ldr	r3, [r3, #0]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	58024400 	.word	0x58024400
 80051a8:	0801169c 	.word	0x0801169c
 80051ac:	20000004 	.word	0x20000004
 80051b0:	20000000 	.word	0x20000000

080051b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80051b8:	f7ff ffcc 	bl	8005154 <HAL_RCC_GetHCLKFreq>
 80051bc:	4602      	mov	r2, r0
 80051be:	4b06      	ldr	r3, [pc, #24]	@ (80051d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	091b      	lsrs	r3, r3, #4
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	4904      	ldr	r1, [pc, #16]	@ (80051dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80051ca:	5ccb      	ldrb	r3, [r1, r3]
 80051cc:	f003 031f 	and.w	r3, r3, #31
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	58024400 	.word	0x58024400
 80051dc:	0801169c 	.word	0x0801169c

080051e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051e4:	b0cc      	sub	sp, #304	@ 0x130
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051ec:	2300      	movs	r3, #0
 80051ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051f2:	2300      	movs	r3, #0
 80051f4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005204:	2500      	movs	r5, #0
 8005206:	ea54 0305 	orrs.w	r3, r4, r5
 800520a:	d049      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800520c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005212:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005216:	d02f      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005218:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800521c:	d828      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800521e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005222:	d01a      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005224:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005228:	d822      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800522e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005232:	d007      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005234:	e01c      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005236:	4bb8      	ldr	r3, [pc, #736]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523a:	4ab7      	ldr	r2, [pc, #732]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800523c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005240:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005242:	e01a      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005244:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005248:	3308      	adds	r3, #8
 800524a:	2102      	movs	r1, #2
 800524c:	4618      	mov	r0, r3
 800524e:	f002 fba1 	bl	8007994 <RCCEx_PLL2_Config>
 8005252:	4603      	mov	r3, r0
 8005254:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005258:	e00f      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800525a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800525e:	3328      	adds	r3, #40	@ 0x28
 8005260:	2102      	movs	r1, #2
 8005262:	4618      	mov	r0, r3
 8005264:	f002 fc48 	bl	8007af8 <RCCEx_PLL3_Config>
 8005268:	4603      	mov	r3, r0
 800526a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800526e:	e004      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005276:	e000      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800527a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005282:	4ba5      	ldr	r3, [pc, #660]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005286:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800528a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800528e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005290:	4aa1      	ldr	r2, [pc, #644]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005292:	430b      	orrs	r3, r1
 8005294:	6513      	str	r3, [r2, #80]	@ 0x50
 8005296:	e003      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005298:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800529c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80052ac:	f04f 0900 	mov.w	r9, #0
 80052b0:	ea58 0309 	orrs.w	r3, r8, r9
 80052b4:	d047      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80052b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d82a      	bhi.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80052c0:	a201      	add	r2, pc, #4	@ (adr r2, 80052c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80052c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c6:	bf00      	nop
 80052c8:	080052dd 	.word	0x080052dd
 80052cc:	080052eb 	.word	0x080052eb
 80052d0:	08005301 	.word	0x08005301
 80052d4:	0800531f 	.word	0x0800531f
 80052d8:	0800531f 	.word	0x0800531f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052dc:	4b8e      	ldr	r3, [pc, #568]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e0:	4a8d      	ldr	r2, [pc, #564]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052e8:	e01a      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052ee:	3308      	adds	r3, #8
 80052f0:	2100      	movs	r1, #0
 80052f2:	4618      	mov	r0, r3
 80052f4:	f002 fb4e 	bl	8007994 <RCCEx_PLL2_Config>
 80052f8:	4603      	mov	r3, r0
 80052fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052fe:	e00f      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005300:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005304:	3328      	adds	r3, #40	@ 0x28
 8005306:	2100      	movs	r1, #0
 8005308:	4618      	mov	r0, r3
 800530a:	f002 fbf5 	bl	8007af8 <RCCEx_PLL3_Config>
 800530e:	4603      	mov	r3, r0
 8005310:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005314:	e004      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800531c:	e000      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800531e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005320:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10a      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005328:	4b7b      	ldr	r3, [pc, #492]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800532a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800532c:	f023 0107 	bic.w	r1, r3, #7
 8005330:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005336:	4a78      	ldr	r2, [pc, #480]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005338:	430b      	orrs	r3, r1
 800533a:	6513      	str	r3, [r2, #80]	@ 0x50
 800533c:	e003      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005342:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005346:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005352:	f04f 0b00 	mov.w	fp, #0
 8005356:	ea5a 030b 	orrs.w	r3, sl, fp
 800535a:	d04c      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800535c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005366:	d030      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005368:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800536c:	d829      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800536e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005370:	d02d      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005372:	2bc0      	cmp	r3, #192	@ 0xc0
 8005374:	d825      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005376:	2b80      	cmp	r3, #128	@ 0x80
 8005378:	d018      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800537a:	2b80      	cmp	r3, #128	@ 0x80
 800537c:	d821      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005382:	2b40      	cmp	r3, #64	@ 0x40
 8005384:	d007      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005386:	e01c      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005388:	4b63      	ldr	r3, [pc, #396]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800538a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538c:	4a62      	ldr	r2, [pc, #392]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800538e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005394:	e01c      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005396:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800539a:	3308      	adds	r3, #8
 800539c:	2100      	movs	r1, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	f002 faf8 	bl	8007994 <RCCEx_PLL2_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053aa:	e011      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053b0:	3328      	adds	r3, #40	@ 0x28
 80053b2:	2100      	movs	r1, #0
 80053b4:	4618      	mov	r0, r3
 80053b6:	f002 fb9f 	bl	8007af8 <RCCEx_PLL3_Config>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053c0:	e006      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80053c8:	e002      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80053ca:	bf00      	nop
 80053cc:	e000      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80053ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80053d8:	4b4f      	ldr	r3, [pc, #316]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053dc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80053e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053e6:	4a4c      	ldr	r2, [pc, #304]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053e8:	430b      	orrs	r3, r1
 80053ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80053ec:	e003      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80053f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005402:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005406:	2300      	movs	r3, #0
 8005408:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800540c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005410:	460b      	mov	r3, r1
 8005412:	4313      	orrs	r3, r2
 8005414:	d053      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005416:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800541a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800541e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005422:	d035      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005424:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005428:	d82e      	bhi.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800542a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800542e:	d031      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005430:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005434:	d828      	bhi.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005436:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800543a:	d01a      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800543c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005440:	d822      	bhi.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005446:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800544a:	d007      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800544c:	e01c      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800544e:	4b32      	ldr	r3, [pc, #200]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005452:	4a31      	ldr	r2, [pc, #196]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005458:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800545a:	e01c      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800545c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005460:	3308      	adds	r3, #8
 8005462:	2100      	movs	r1, #0
 8005464:	4618      	mov	r0, r3
 8005466:	f002 fa95 	bl	8007994 <RCCEx_PLL2_Config>
 800546a:	4603      	mov	r3, r0
 800546c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005470:	e011      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005472:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005476:	3328      	adds	r3, #40	@ 0x28
 8005478:	2100      	movs	r1, #0
 800547a:	4618      	mov	r0, r3
 800547c:	f002 fb3c 	bl	8007af8 <RCCEx_PLL3_Config>
 8005480:	4603      	mov	r3, r0
 8005482:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005486:	e006      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800548e:	e002      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005490:	bf00      	nop
 8005492:	e000      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005496:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10b      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800549e:	4b1e      	ldr	r3, [pc, #120]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80054a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80054ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054b0:	430b      	orrs	r3, r1
 80054b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80054b4:	e003      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80054be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80054ca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80054ce:	2300      	movs	r3, #0
 80054d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80054d4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80054d8:	460b      	mov	r3, r1
 80054da:	4313      	orrs	r3, r2
 80054dc:	d056      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80054de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054ea:	d038      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80054ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054f0:	d831      	bhi.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80054f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054f6:	d034      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80054f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054fc:	d82b      	bhi.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80054fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005502:	d01d      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005504:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005508:	d825      	bhi.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800550a:	2b00      	cmp	r3, #0
 800550c:	d006      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800550e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005512:	d00a      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005514:	e01f      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005516:	bf00      	nop
 8005518:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800551c:	4ba2      	ldr	r3, [pc, #648]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800551e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005520:	4aa1      	ldr	r2, [pc, #644]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005528:	e01c      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800552a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800552e:	3308      	adds	r3, #8
 8005530:	2100      	movs	r1, #0
 8005532:	4618      	mov	r0, r3
 8005534:	f002 fa2e 	bl	8007994 <RCCEx_PLL2_Config>
 8005538:	4603      	mov	r3, r0
 800553a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800553e:	e011      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005540:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005544:	3328      	adds	r3, #40	@ 0x28
 8005546:	2100      	movs	r1, #0
 8005548:	4618      	mov	r0, r3
 800554a:	f002 fad5 	bl	8007af8 <RCCEx_PLL3_Config>
 800554e:	4603      	mov	r3, r0
 8005550:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005554:	e006      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800555c:	e002      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800555e:	bf00      	nop
 8005560:	e000      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005562:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005564:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10b      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800556c:	4b8e      	ldr	r3, [pc, #568]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800556e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005570:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005574:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005578:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800557c:	4a8a      	ldr	r2, [pc, #552]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800557e:	430b      	orrs	r3, r1
 8005580:	6593      	str	r3, [r2, #88]	@ 0x58
 8005582:	e003      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005584:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005588:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800558c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005594:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005598:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800559c:	2300      	movs	r3, #0
 800559e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80055a2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80055a6:	460b      	mov	r3, r1
 80055a8:	4313      	orrs	r3, r2
 80055aa:	d03a      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80055ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055b2:	2b30      	cmp	r3, #48	@ 0x30
 80055b4:	d01f      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80055b6:	2b30      	cmp	r3, #48	@ 0x30
 80055b8:	d819      	bhi.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80055ba:	2b20      	cmp	r3, #32
 80055bc:	d00c      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d815      	bhi.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d019      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80055c6:	2b10      	cmp	r3, #16
 80055c8:	d111      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ca:	4b77      	ldr	r3, [pc, #476]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ce:	4a76      	ldr	r2, [pc, #472]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80055d6:	e011      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055dc:	3308      	adds	r3, #8
 80055de:	2102      	movs	r1, #2
 80055e0:	4618      	mov	r0, r3
 80055e2:	f002 f9d7 	bl	8007994 <RCCEx_PLL2_Config>
 80055e6:	4603      	mov	r3, r0
 80055e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80055ec:	e006      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80055f4:	e002      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80055f6:	bf00      	nop
 80055f8:	e000      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80055fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005604:	4b68      	ldr	r3, [pc, #416]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005608:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800560c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005612:	4a65      	ldr	r2, [pc, #404]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005614:	430b      	orrs	r3, r1
 8005616:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005618:	e003      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800561a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800561e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005622:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800562e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005632:	2300      	movs	r3, #0
 8005634:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005638:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800563c:	460b      	mov	r3, r1
 800563e:	4313      	orrs	r3, r2
 8005640:	d051      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005642:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005646:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005648:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800564c:	d035      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800564e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005652:	d82e      	bhi.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005654:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005658:	d031      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800565a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800565e:	d828      	bhi.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005660:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005664:	d01a      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005666:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800566a:	d822      	bhi.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005670:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005674:	d007      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005676:	e01c      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005678:	4b4b      	ldr	r3, [pc, #300]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800567a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567c:	4a4a      	ldr	r2, [pc, #296]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800567e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005682:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005684:	e01c      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005686:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800568a:	3308      	adds	r3, #8
 800568c:	2100      	movs	r1, #0
 800568e:	4618      	mov	r0, r3
 8005690:	f002 f980 	bl	8007994 <RCCEx_PLL2_Config>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800569a:	e011      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800569c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056a0:	3328      	adds	r3, #40	@ 0x28
 80056a2:	2100      	movs	r1, #0
 80056a4:	4618      	mov	r0, r3
 80056a6:	f002 fa27 	bl	8007af8 <RCCEx_PLL3_Config>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056b0:	e006      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80056b8:	e002      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80056ba:	bf00      	nop
 80056bc:	e000      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80056be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10a      	bne.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80056c8:	4b37      	ldr	r3, [pc, #220]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80056d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056d6:	4a34      	ldr	r2, [pc, #208]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056d8:	430b      	orrs	r3, r1
 80056da:	6513      	str	r3, [r2, #80]	@ 0x50
 80056dc:	e003      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056e2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80056e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80056f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056f6:	2300      	movs	r3, #0
 80056f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80056fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005700:	460b      	mov	r3, r1
 8005702:	4313      	orrs	r3, r2
 8005704:	d056      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005706:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800570a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800570c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005710:	d033      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005712:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005716:	d82c      	bhi.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005718:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800571c:	d02f      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800571e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005722:	d826      	bhi.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005724:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005728:	d02b      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800572a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800572e:	d820      	bhi.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005730:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005734:	d012      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005736:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800573a:	d81a      	bhi.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800573c:	2b00      	cmp	r3, #0
 800573e:	d022      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005744:	d115      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005746:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800574a:	3308      	adds	r3, #8
 800574c:	2101      	movs	r1, #1
 800574e:	4618      	mov	r0, r3
 8005750:	f002 f920 	bl	8007994 <RCCEx_PLL2_Config>
 8005754:	4603      	mov	r3, r0
 8005756:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800575a:	e015      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800575c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005760:	3328      	adds	r3, #40	@ 0x28
 8005762:	2101      	movs	r1, #1
 8005764:	4618      	mov	r0, r3
 8005766:	f002 f9c7 	bl	8007af8 <RCCEx_PLL3_Config>
 800576a:	4603      	mov	r3, r0
 800576c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005770:	e00a      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005778:	e006      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800577a:	bf00      	nop
 800577c:	e004      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800577e:	bf00      	nop
 8005780:	e002      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005782:	bf00      	nop
 8005784:	e000      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005786:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005788:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10d      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005790:	4b05      	ldr	r3, [pc, #20]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005794:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005798:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800579c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800579e:	4a02      	ldr	r2, [pc, #8]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057a0:	430b      	orrs	r3, r1
 80057a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80057a4:	e006      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80057a6:	bf00      	nop
 80057a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057b0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80057b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057bc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80057c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057c4:	2300      	movs	r3, #0
 80057c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80057ca:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80057ce:	460b      	mov	r3, r1
 80057d0:	4313      	orrs	r3, r2
 80057d2:	d055      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80057d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80057dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057e0:	d033      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80057e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057e6:	d82c      	bhi.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80057e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ec:	d02f      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80057ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057f2:	d826      	bhi.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80057f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057f8:	d02b      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80057fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057fe:	d820      	bhi.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005804:	d012      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005806:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800580a:	d81a      	bhi.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800580c:	2b00      	cmp	r3, #0
 800580e:	d022      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005810:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005814:	d115      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005816:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800581a:	3308      	adds	r3, #8
 800581c:	2101      	movs	r1, #1
 800581e:	4618      	mov	r0, r3
 8005820:	f002 f8b8 	bl	8007994 <RCCEx_PLL2_Config>
 8005824:	4603      	mov	r3, r0
 8005826:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800582a:	e015      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800582c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005830:	3328      	adds	r3, #40	@ 0x28
 8005832:	2101      	movs	r1, #1
 8005834:	4618      	mov	r0, r3
 8005836:	f002 f95f 	bl	8007af8 <RCCEx_PLL3_Config>
 800583a:	4603      	mov	r3, r0
 800583c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005840:	e00a      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005848:	e006      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800584a:	bf00      	nop
 800584c:	e004      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800584e:	bf00      	nop
 8005850:	e002      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005852:	bf00      	nop
 8005854:	e000      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005856:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005858:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10b      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005860:	4bb6      	ldr	r3, [pc, #728]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005864:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005868:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800586c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005870:	4ab2      	ldr	r2, [pc, #712]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005872:	430b      	orrs	r3, r1
 8005874:	6593      	str	r3, [r2, #88]	@ 0x58
 8005876:	e003      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005878:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800587c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005880:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005888:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800588c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005890:	2300      	movs	r3, #0
 8005892:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005896:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800589a:	460b      	mov	r3, r1
 800589c:	4313      	orrs	r3, r2
 800589e:	d02a      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80058a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d011      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80058aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058ae:	d10a      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058b4:	3308      	adds	r3, #8
 80058b6:	2101      	movs	r1, #1
 80058b8:	4618      	mov	r0, r3
 80058ba:	f002 f86b 	bl	8007994 <RCCEx_PLL2_Config>
 80058be:	4603      	mov	r3, r0
 80058c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80058c4:	e004      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80058cc:	e000      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80058ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80058d8:	4b98      	ldr	r3, [pc, #608]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058dc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80058e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058e6:	4a95      	ldr	r2, [pc, #596]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058e8:	430b      	orrs	r3, r1
 80058ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058ec:	e003      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005902:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005906:	2300      	movs	r3, #0
 8005908:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800590c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005910:	460b      	mov	r3, r1
 8005912:	4313      	orrs	r3, r2
 8005914:	d037      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005916:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800591a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800591c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005920:	d00e      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8005922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005926:	d816      	bhi.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8005928:	2b00      	cmp	r3, #0
 800592a:	d018      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 800592c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005930:	d111      	bne.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005932:	4b82      	ldr	r3, [pc, #520]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005936:	4a81      	ldr	r2, [pc, #516]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800593c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800593e:	e00f      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005940:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005944:	3308      	adds	r3, #8
 8005946:	2101      	movs	r1, #1
 8005948:	4618      	mov	r0, r3
 800594a:	f002 f823 	bl	8007994 <RCCEx_PLL2_Config>
 800594e:	4603      	mov	r3, r0
 8005950:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005954:	e004      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800595c:	e000      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800595e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005960:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10a      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005968:	4b74      	ldr	r3, [pc, #464]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800596a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800596c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005970:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005976:	4a71      	ldr	r2, [pc, #452]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005978:	430b      	orrs	r3, r1
 800597a:	6513      	str	r3, [r2, #80]	@ 0x50
 800597c:	e003      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005982:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005986:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005992:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005996:	2300      	movs	r3, #0
 8005998:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800599c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80059a0:	460b      	mov	r3, r1
 80059a2:	4313      	orrs	r3, r2
 80059a4:	d03a      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80059a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d81d      	bhi.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80059b0:	a201      	add	r2, pc, #4	@ (adr r2, 80059b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b6:	bf00      	nop
 80059b8:	080059f5 	.word	0x080059f5
 80059bc:	080059c9 	.word	0x080059c9
 80059c0:	080059d7 	.word	0x080059d7
 80059c4:	080059f5 	.word	0x080059f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c8:	4b5c      	ldr	r3, [pc, #368]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059cc:	4a5b      	ldr	r2, [pc, #364]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80059d4:	e00f      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059da:	3308      	adds	r3, #8
 80059dc:	2102      	movs	r1, #2
 80059de:	4618      	mov	r0, r3
 80059e0:	f001 ffd8 	bl	8007994 <RCCEx_PLL2_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80059ea:	e004      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80059f2:	e000      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80059f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80059fe:	4b4f      	ldr	r3, [pc, #316]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a02:	f023 0103 	bic.w	r1, r3, #3
 8005a06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a0c:	4a4b      	ldr	r2, [pc, #300]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a0e:	430b      	orrs	r3, r1
 8005a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a12:	e003      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a18:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a24:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005a28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005a36:	460b      	mov	r3, r1
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f000 80a0 	beq.w	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a3e:	4b40      	ldr	r3, [pc, #256]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a3f      	ldr	r2, [pc, #252]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a4a:	f7fb fa5b 	bl	8000f04 <HAL_GetTick>
 8005a4e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a52:	e00b      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a54:	f7fb fa56 	bl	8000f04 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b64      	cmp	r3, #100	@ 0x64
 8005a62:	d903      	bls.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005a6a:	e005      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a6c:	4b34      	ldr	r3, [pc, #208]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d0ed      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8005a78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d17a      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005a80:	4b2e      	ldr	r3, [pc, #184]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a8c:	4053      	eors	r3, r2
 8005a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d015      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a96:	4b29      	ldr	r3, [pc, #164]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a9e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005aa2:	4b26      	ldr	r3, [pc, #152]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa6:	4a25      	ldr	r2, [pc, #148]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aac:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005aae:	4b23      	ldr	r3, [pc, #140]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab2:	4a22      	ldr	r2, [pc, #136]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ab4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ab8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005aba:	4a20      	ldr	r2, [pc, #128]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005abc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005ac0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005ac2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ac6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ace:	d118      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad0:	f7fb fa18 	bl	8000f04 <HAL_GetTick>
 8005ad4:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ad8:	e00d      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ada:	f7fb fa13 	bl	8000f04 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ae4:	1ad2      	subs	r2, r2, r3
 8005ae6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d903      	bls.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8005af4:	e005      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005af6:	4b11      	ldr	r3, [pc, #68]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0eb      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8005b02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d130      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b0e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b1a:	d115      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005b1c:	4b07      	ldr	r3, [pc, #28]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005b24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b2c:	091a      	lsrs	r2, r3, #4
 8005b2e:	4b05      	ldr	r3, [pc, #20]	@ (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	4a02      	ldr	r2, [pc, #8]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b34:	430b      	orrs	r3, r1
 8005b36:	6113      	str	r3, [r2, #16]
 8005b38:	e00c      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005b3a:	bf00      	nop
 8005b3c:	58024400 	.word	0x58024400
 8005b40:	58024800 	.word	0x58024800
 8005b44:	00ffffcf 	.word	0x00ffffcf
 8005b48:	4bd4      	ldr	r3, [pc, #848]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	4ad3      	ldr	r2, [pc, #844]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b4e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b52:	6113      	str	r3, [r2, #16]
 8005b54:	4bd1      	ldr	r3, [pc, #836]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b56:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005b58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b64:	4acd      	ldr	r2, [pc, #820]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b66:	430b      	orrs	r3, r1
 8005b68:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b6a:	e008      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b6c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b70:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8005b74:	e003      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b76:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b7a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005b7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	f002 0301 	and.w	r3, r2, #1
 8005b8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f000 808b 	beq.w	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005ba0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ba8:	2b28      	cmp	r3, #40	@ 0x28
 8005baa:	d86b      	bhi.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005bac:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb2:	bf00      	nop
 8005bb4:	08005c8d 	.word	0x08005c8d
 8005bb8:	08005c85 	.word	0x08005c85
 8005bbc:	08005c85 	.word	0x08005c85
 8005bc0:	08005c85 	.word	0x08005c85
 8005bc4:	08005c85 	.word	0x08005c85
 8005bc8:	08005c85 	.word	0x08005c85
 8005bcc:	08005c85 	.word	0x08005c85
 8005bd0:	08005c85 	.word	0x08005c85
 8005bd4:	08005c59 	.word	0x08005c59
 8005bd8:	08005c85 	.word	0x08005c85
 8005bdc:	08005c85 	.word	0x08005c85
 8005be0:	08005c85 	.word	0x08005c85
 8005be4:	08005c85 	.word	0x08005c85
 8005be8:	08005c85 	.word	0x08005c85
 8005bec:	08005c85 	.word	0x08005c85
 8005bf0:	08005c85 	.word	0x08005c85
 8005bf4:	08005c6f 	.word	0x08005c6f
 8005bf8:	08005c85 	.word	0x08005c85
 8005bfc:	08005c85 	.word	0x08005c85
 8005c00:	08005c85 	.word	0x08005c85
 8005c04:	08005c85 	.word	0x08005c85
 8005c08:	08005c85 	.word	0x08005c85
 8005c0c:	08005c85 	.word	0x08005c85
 8005c10:	08005c85 	.word	0x08005c85
 8005c14:	08005c8d 	.word	0x08005c8d
 8005c18:	08005c85 	.word	0x08005c85
 8005c1c:	08005c85 	.word	0x08005c85
 8005c20:	08005c85 	.word	0x08005c85
 8005c24:	08005c85 	.word	0x08005c85
 8005c28:	08005c85 	.word	0x08005c85
 8005c2c:	08005c85 	.word	0x08005c85
 8005c30:	08005c85 	.word	0x08005c85
 8005c34:	08005c8d 	.word	0x08005c8d
 8005c38:	08005c85 	.word	0x08005c85
 8005c3c:	08005c85 	.word	0x08005c85
 8005c40:	08005c85 	.word	0x08005c85
 8005c44:	08005c85 	.word	0x08005c85
 8005c48:	08005c85 	.word	0x08005c85
 8005c4c:	08005c85 	.word	0x08005c85
 8005c50:	08005c85 	.word	0x08005c85
 8005c54:	08005c8d 	.word	0x08005c8d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	2101      	movs	r1, #1
 8005c60:	4618      	mov	r0, r3
 8005c62:	f001 fe97 	bl	8007994 <RCCEx_PLL2_Config>
 8005c66:	4603      	mov	r3, r0
 8005c68:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c6c:	e00f      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c72:	3328      	adds	r3, #40	@ 0x28
 8005c74:	2101      	movs	r1, #1
 8005c76:	4618      	mov	r0, r3
 8005c78:	f001 ff3e 	bl	8007af8 <RCCEx_PLL3_Config>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c82:	e004      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005c8a:	e000      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005c96:	4b81      	ldr	r3, [pc, #516]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005c9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ca6:	4a7d      	ldr	r2, [pc, #500]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005ca8:	430b      	orrs	r3, r1
 8005caa:	6553      	str	r3, [r2, #84]	@ 0x54
 8005cac:	e003      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005cb2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005cb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbe:	f002 0302 	and.w	r3, r2, #2
 8005cc2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005ccc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	d042      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005cd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cdc:	2b05      	cmp	r3, #5
 8005cde:	d825      	bhi.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce6:	bf00      	nop
 8005ce8:	08005d35 	.word	0x08005d35
 8005cec:	08005d01 	.word	0x08005d01
 8005cf0:	08005d17 	.word	0x08005d17
 8005cf4:	08005d35 	.word	0x08005d35
 8005cf8:	08005d35 	.word	0x08005d35
 8005cfc:	08005d35 	.word	0x08005d35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d04:	3308      	adds	r3, #8
 8005d06:	2101      	movs	r1, #1
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f001 fe43 	bl	8007994 <RCCEx_PLL2_Config>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005d14:	e00f      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d1a:	3328      	adds	r3, #40	@ 0x28
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f001 feea 	bl	8007af8 <RCCEx_PLL3_Config>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005d2a:	e004      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d32:	e000      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10a      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005d3e:	4b57      	ldr	r3, [pc, #348]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d42:	f023 0107 	bic.w	r1, r3, #7
 8005d46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d4c:	4a53      	ldr	r2, [pc, #332]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d4e:	430b      	orrs	r3, r1
 8005d50:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d52:	e003      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d54:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d58:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	f002 0304 	and.w	r3, r2, #4
 8005d68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	d044      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005d7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d84:	2b05      	cmp	r3, #5
 8005d86:	d825      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005d88:	a201      	add	r2, pc, #4	@ (adr r2, 8005d90 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8e:	bf00      	nop
 8005d90:	08005ddd 	.word	0x08005ddd
 8005d94:	08005da9 	.word	0x08005da9
 8005d98:	08005dbf 	.word	0x08005dbf
 8005d9c:	08005ddd 	.word	0x08005ddd
 8005da0:	08005ddd 	.word	0x08005ddd
 8005da4:	08005ddd 	.word	0x08005ddd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005da8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dac:	3308      	adds	r3, #8
 8005dae:	2101      	movs	r1, #1
 8005db0:	4618      	mov	r0, r3
 8005db2:	f001 fdef 	bl	8007994 <RCCEx_PLL2_Config>
 8005db6:	4603      	mov	r3, r0
 8005db8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005dbc:	e00f      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dc2:	3328      	adds	r3, #40	@ 0x28
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 fe96 	bl	8007af8 <RCCEx_PLL3_Config>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005dd2:	e004      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005dda:	e000      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dde:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10b      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005de6:	4b2d      	ldr	r3, [pc, #180]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dea:	f023 0107 	bic.w	r1, r3, #7
 8005dee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005df2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005df6:	4a29      	ldr	r2, [pc, #164]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dfc:	e003      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dfe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e02:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0e:	f002 0320 	and.w	r3, r2, #32
 8005e12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e16:	2300      	movs	r3, #0
 8005e18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e20:	460b      	mov	r3, r1
 8005e22:	4313      	orrs	r3, r2
 8005e24:	d057      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005e26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e32:	d035      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e38:	d82c      	bhi.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e3e:	d031      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e44:	d826      	bhi.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005e46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e4a:	d02d      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005e4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e50:	d820      	bhi.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005e52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e56:	d012      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e5c:	d81a      	bhi.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d024      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005e62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e66:	d115      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e6c:	3308      	adds	r3, #8
 8005e6e:	2100      	movs	r1, #0
 8005e70:	4618      	mov	r0, r3
 8005e72:	f001 fd8f 	bl	8007994 <RCCEx_PLL2_Config>
 8005e76:	4603      	mov	r3, r0
 8005e78:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e7c:	e017      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e82:	3328      	adds	r3, #40	@ 0x28
 8005e84:	2102      	movs	r1, #2
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 fe36 	bl	8007af8 <RCCEx_PLL3_Config>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e92:	e00c      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005e9a:	e008      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005e9c:	58024400 	.word	0x58024400
        break;
 8005ea0:	bf00      	nop
 8005ea2:	e004      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005ea4:	bf00      	nop
 8005ea6:	e002      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005ea8:	bf00      	nop
 8005eaa:	e000      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10b      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eb6:	4bc2      	ldr	r3, [pc, #776]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005ebe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ec6:	4abe      	ldr	r2, [pc, #760]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ec8:	430b      	orrs	r3, r1
 8005eca:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ecc:	e003      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ece:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ed2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005ed6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005eec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	d055      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005ef6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005efa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005efe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005f02:	d033      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005f04:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005f08:	d82c      	bhi.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f0e:	d02f      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005f10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f14:	d826      	bhi.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005f16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f1a:	d02b      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005f1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f20:	d820      	bhi.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005f22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f26:	d012      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f2c:	d81a      	bhi.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d022      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f36:	d115      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	2100      	movs	r1, #0
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 fd27 	bl	8007994 <RCCEx_PLL2_Config>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f4c:	e015      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f52:	3328      	adds	r3, #40	@ 0x28
 8005f54:	2102      	movs	r1, #2
 8005f56:	4618      	mov	r0, r3
 8005f58:	f001 fdce 	bl	8007af8 <RCCEx_PLL3_Config>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f62:	e00a      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005f6a:	e006      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005f6c:	bf00      	nop
 8005f6e:	e004      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005f70:	bf00      	nop
 8005f72:	e002      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005f74:	bf00      	nop
 8005f76:	e000      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10b      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f82:	4b8f      	ldr	r3, [pc, #572]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f86:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005f8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005f92:	4a8b      	ldr	r2, [pc, #556]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f94:	430b      	orrs	r3, r1
 8005f96:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f98:	e003      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f9e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005fa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005faa:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005fae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005fb8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	d055      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005fc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005fca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005fce:	d033      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005fd0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005fd4:	d82c      	bhi.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005fd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fda:	d02f      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005fdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fe0:	d826      	bhi.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005fe2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005fe6:	d02b      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005fe8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005fec:	d820      	bhi.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005fee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ff2:	d012      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8005ff4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ff8:	d81a      	bhi.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d022      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8005ffe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006002:	d115      	bne.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006008:	3308      	adds	r3, #8
 800600a:	2100      	movs	r1, #0
 800600c:	4618      	mov	r0, r3
 800600e:	f001 fcc1 	bl	8007994 <RCCEx_PLL2_Config>
 8006012:	4603      	mov	r3, r0
 8006014:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006018:	e015      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800601a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800601e:	3328      	adds	r3, #40	@ 0x28
 8006020:	2102      	movs	r1, #2
 8006022:	4618      	mov	r0, r3
 8006024:	f001 fd68 	bl	8007af8 <RCCEx_PLL3_Config>
 8006028:	4603      	mov	r3, r0
 800602a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800602e:	e00a      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006036:	e006      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006038:	bf00      	nop
 800603a:	e004      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800603c:	bf00      	nop
 800603e:	e002      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006040:	bf00      	nop
 8006042:	e000      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006046:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10b      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800604e:	4b5c      	ldr	r3, [pc, #368]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006052:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006056:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800605a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800605e:	4a58      	ldr	r2, [pc, #352]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006060:	430b      	orrs	r3, r1
 8006062:	6593      	str	r3, [r2, #88]	@ 0x58
 8006064:	e003      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006066:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800606a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800606e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	f002 0308 	and.w	r3, r2, #8
 800607a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800607e:	2300      	movs	r3, #0
 8006080:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006084:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006088:	460b      	mov	r3, r1
 800608a:	4313      	orrs	r3, r2
 800608c:	d01e      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800608e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800609a:	d10c      	bne.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800609c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060a0:	3328      	adds	r3, #40	@ 0x28
 80060a2:	2102      	movs	r1, #2
 80060a4:	4618      	mov	r0, r3
 80060a6:	f001 fd27 	bl	8007af8 <RCCEx_PLL3_Config>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80060b6:	4b42      	ldr	r3, [pc, #264]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c6:	4a3e      	ldr	r2, [pc, #248]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060c8:	430b      	orrs	r3, r1
 80060ca:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	f002 0310 	and.w	r3, r2, #16
 80060d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060dc:	2300      	movs	r3, #0
 80060de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80060e2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80060e6:	460b      	mov	r3, r1
 80060e8:	4313      	orrs	r3, r2
 80060ea:	d01e      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80060ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060f8:	d10c      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80060fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060fe:	3328      	adds	r3, #40	@ 0x28
 8006100:	2102      	movs	r1, #2
 8006102:	4618      	mov	r0, r3
 8006104:	f001 fcf8 	bl	8007af8 <RCCEx_PLL3_Config>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006114:	4b2a      	ldr	r3, [pc, #168]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006118:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800611c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006120:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006124:	4a26      	ldr	r2, [pc, #152]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006126:	430b      	orrs	r3, r1
 8006128:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800612a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800612e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006132:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006136:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800613a:	2300      	movs	r3, #0
 800613c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006140:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006144:	460b      	mov	r3, r1
 8006146:	4313      	orrs	r3, r2
 8006148:	d040      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800614a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800614e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006152:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006156:	d022      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006158:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800615c:	d81b      	bhi.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8006162:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006166:	d00b      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8006168:	e015      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800616a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800616e:	3308      	adds	r3, #8
 8006170:	2100      	movs	r1, #0
 8006172:	4618      	mov	r0, r3
 8006174:	f001 fc0e 	bl	8007994 <RCCEx_PLL2_Config>
 8006178:	4603      	mov	r3, r0
 800617a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800617e:	e00f      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006180:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006184:	3328      	adds	r3, #40	@ 0x28
 8006186:	2102      	movs	r1, #2
 8006188:	4618      	mov	r0, r3
 800618a:	f001 fcb5 	bl	8007af8 <RCCEx_PLL3_Config>
 800618e:	4603      	mov	r3, r0
 8006190:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006194:	e004      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800619c:	e000      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800619e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10d      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061a8:	4b05      	ldr	r3, [pc, #20]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ac:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80061b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80061b8:	4a01      	ldr	r2, [pc, #4]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061ba:	430b      	orrs	r3, r1
 80061bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80061be:	e005      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80061c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061c8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80061d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80061da:	2300      	movs	r3, #0
 80061dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80061de:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80061e2:	460b      	mov	r3, r1
 80061e4:	4313      	orrs	r3, r2
 80061e6:	d03b      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80061e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061f4:	d01f      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80061f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061fa:	d818      	bhi.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80061fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006200:	d003      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006202:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006206:	d007      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006208:	e011      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800620a:	4b64      	ldr	r3, [pc, #400]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800620c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620e:	4a63      	ldr	r2, [pc, #396]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006214:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006216:	e00f      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006218:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800621c:	3328      	adds	r3, #40	@ 0x28
 800621e:	2101      	movs	r1, #1
 8006220:	4618      	mov	r0, r3
 8006222:	f001 fc69 	bl	8007af8 <RCCEx_PLL3_Config>
 8006226:	4603      	mov	r3, r0
 8006228:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 800622c:	e004      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006234:	e000      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8006236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006238:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10b      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006240:	4b56      	ldr	r3, [pc, #344]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006244:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006248:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800624c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006250:	4a52      	ldr	r2, [pc, #328]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006252:	430b      	orrs	r3, r1
 8006254:	6553      	str	r3, [r2, #84]	@ 0x54
 8006256:	e003      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006258:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800625c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006260:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800626c:	673b      	str	r3, [r7, #112]	@ 0x70
 800626e:	2300      	movs	r3, #0
 8006270:	677b      	str	r3, [r7, #116]	@ 0x74
 8006272:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006276:	460b      	mov	r3, r1
 8006278:	4313      	orrs	r3, r2
 800627a:	d031      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800627c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8006286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800628a:	d007      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800628c:	e011      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800628e:	4b43      	ldr	r3, [pc, #268]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006292:	4a42      	ldr	r2, [pc, #264]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006298:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800629a:	e00e      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800629c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062a0:	3308      	adds	r3, #8
 80062a2:	2102      	movs	r1, #2
 80062a4:	4618      	mov	r0, r3
 80062a6:	f001 fb75 	bl	8007994 <RCCEx_PLL2_Config>
 80062aa:	4603      	mov	r3, r0
 80062ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80062b0:	e003      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80062b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80062c2:	4b36      	ldr	r3, [pc, #216]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d0:	4a32      	ldr	r2, [pc, #200]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062d2:	430b      	orrs	r3, r1
 80062d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80062d6:	e003      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062dc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80062e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80062ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062ee:	2300      	movs	r3, #0
 80062f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80062f6:	460b      	mov	r3, r1
 80062f8:	4313      	orrs	r3, r2
 80062fa:	d00c      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006300:	3328      	adds	r3, #40	@ 0x28
 8006302:	2102      	movs	r1, #2
 8006304:	4618      	mov	r0, r3
 8006306:	f001 fbf7 	bl	8007af8 <RCCEx_PLL3_Config>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006316:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800631a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006322:	663b      	str	r3, [r7, #96]	@ 0x60
 8006324:	2300      	movs	r3, #0
 8006326:	667b      	str	r3, [r7, #100]	@ 0x64
 8006328:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800632c:	460b      	mov	r3, r1
 800632e:	4313      	orrs	r3, r2
 8006330:	d03a      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006332:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800633a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800633e:	d018      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8006340:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006344:	d811      	bhi.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006346:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800634a:	d014      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 800634c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006350:	d80b      	bhi.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006352:	2b00      	cmp	r3, #0
 8006354:	d011      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8006356:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800635a:	d106      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800635c:	4b0f      	ldr	r3, [pc, #60]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800635e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006360:	4a0e      	ldr	r2, [pc, #56]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006366:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006368:	e008      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006370:	e004      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006372:	bf00      	nop
 8006374:	e002      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006376:	bf00      	nop
 8006378:	e000      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800637a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800637c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10d      	bne.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006384:	4b05      	ldr	r3, [pc, #20]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006388:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800638c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006390:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006394:	4a01      	ldr	r2, [pc, #4]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006396:	430b      	orrs	r3, r1
 8006398:	6553      	str	r3, [r2, #84]	@ 0x54
 800639a:	e005      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800639c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063a4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80063a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80063b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063b6:	2300      	movs	r3, #0
 80063b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80063be:	460b      	mov	r3, r1
 80063c0:	4313      	orrs	r3, r2
 80063c2:	d009      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80063c4:	4baa      	ldr	r3, [pc, #680]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80063c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80063cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063d2:	4aa7      	ldr	r2, [pc, #668]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80063d4:	430b      	orrs	r3, r1
 80063d6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80063d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80063e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80063e6:	2300      	movs	r3, #0
 80063e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80063ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80063ee:	460b      	mov	r3, r1
 80063f0:	4313      	orrs	r3, r2
 80063f2:	d00a      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80063f4:	4b9e      	ldr	r3, [pc, #632]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80063fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006400:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006404:	4a9a      	ldr	r2, [pc, #616]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006406:	430b      	orrs	r3, r1
 8006408:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800640a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006412:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006416:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006418:	2300      	movs	r3, #0
 800641a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800641c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006420:	460b      	mov	r3, r1
 8006422:	4313      	orrs	r3, r2
 8006424:	d009      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006426:	4b92      	ldr	r3, [pc, #584]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800642a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800642e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006434:	4a8e      	ldr	r2, [pc, #568]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006436:	430b      	orrs	r3, r1
 8006438:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800643a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006446:	643b      	str	r3, [r7, #64]	@ 0x40
 8006448:	2300      	movs	r3, #0
 800644a:	647b      	str	r3, [r7, #68]	@ 0x44
 800644c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006450:	460b      	mov	r3, r1
 8006452:	4313      	orrs	r3, r2
 8006454:	d00e      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006456:	4b86      	ldr	r3, [pc, #536]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	4a85      	ldr	r2, [pc, #532]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800645c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006460:	6113      	str	r3, [r2, #16]
 8006462:	4b83      	ldr	r3, [pc, #524]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006464:	6919      	ldr	r1, [r3, #16]
 8006466:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800646a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800646e:	4a80      	ldr	r2, [pc, #512]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006470:	430b      	orrs	r3, r1
 8006472:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006474:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006480:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006482:	2300      	movs	r3, #0
 8006484:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006486:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800648a:	460b      	mov	r3, r1
 800648c:	4313      	orrs	r3, r2
 800648e:	d009      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006490:	4b77      	ldr	r3, [pc, #476]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006494:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006498:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800649c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800649e:	4a74      	ldr	r2, [pc, #464]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064a0:	430b      	orrs	r3, r1
 80064a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80064a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ac:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80064b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80064b2:	2300      	movs	r3, #0
 80064b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80064b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80064ba:	460b      	mov	r3, r1
 80064bc:	4313      	orrs	r3, r2
 80064be:	d00a      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064c0:	4b6b      	ldr	r3, [pc, #428]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80064c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d0:	4a67      	ldr	r2, [pc, #412]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064d2:	430b      	orrs	r3, r1
 80064d4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80064d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064de:	2100      	movs	r1, #0
 80064e0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80064ec:	460b      	mov	r3, r1
 80064ee:	4313      	orrs	r3, r2
 80064f0:	d011      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064f6:	3308      	adds	r3, #8
 80064f8:	2100      	movs	r1, #0
 80064fa:	4618      	mov	r0, r3
 80064fc:	f001 fa4a 	bl	8007994 <RCCEx_PLL2_Config>
 8006500:	4603      	mov	r3, r0
 8006502:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006506:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006512:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006516:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	2100      	movs	r1, #0
 8006520:	6239      	str	r1, [r7, #32]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	627b      	str	r3, [r7, #36]	@ 0x24
 8006528:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800652c:	460b      	mov	r3, r1
 800652e:	4313      	orrs	r3, r2
 8006530:	d011      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006532:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006536:	3308      	adds	r3, #8
 8006538:	2101      	movs	r1, #1
 800653a:	4618      	mov	r0, r3
 800653c:	f001 fa2a 	bl	8007994 <RCCEx_PLL2_Config>
 8006540:	4603      	mov	r3, r0
 8006542:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006546:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006552:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006556:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655e:	2100      	movs	r1, #0
 8006560:	61b9      	str	r1, [r7, #24]
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	61fb      	str	r3, [r7, #28]
 8006568:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800656c:	460b      	mov	r3, r1
 800656e:	4313      	orrs	r3, r2
 8006570:	d011      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006572:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006576:	3308      	adds	r3, #8
 8006578:	2102      	movs	r1, #2
 800657a:	4618      	mov	r0, r3
 800657c:	f001 fa0a 	bl	8007994 <RCCEx_PLL2_Config>
 8006580:	4603      	mov	r3, r0
 8006582:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006586:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006592:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006596:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	2100      	movs	r1, #0
 80065a0:	6139      	str	r1, [r7, #16]
 80065a2:	f003 0308 	and.w	r3, r3, #8
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80065ac:	460b      	mov	r3, r1
 80065ae:	4313      	orrs	r3, r2
 80065b0:	d011      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065b6:	3328      	adds	r3, #40	@ 0x28
 80065b8:	2100      	movs	r1, #0
 80065ba:	4618      	mov	r0, r3
 80065bc:	f001 fa9c 	bl	8007af8 <RCCEx_PLL3_Config>
 80065c0:	4603      	mov	r3, r0
 80065c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80065c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80065d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	2100      	movs	r1, #0
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	f003 0310 	and.w	r3, r3, #16
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80065ec:	460b      	mov	r3, r1
 80065ee:	4313      	orrs	r3, r2
 80065f0:	d011      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065f6:	3328      	adds	r3, #40	@ 0x28
 80065f8:	2101      	movs	r1, #1
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 fa7c 	bl	8007af8 <RCCEx_PLL3_Config>
 8006600:	4603      	mov	r3, r0
 8006602:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006606:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006612:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006616:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661e:	2100      	movs	r1, #0
 8006620:	6039      	str	r1, [r7, #0]
 8006622:	f003 0320 	and.w	r3, r3, #32
 8006626:	607b      	str	r3, [r7, #4]
 8006628:	e9d7 1200 	ldrd	r1, r2, [r7]
 800662c:	460b      	mov	r3, r1
 800662e:	4313      	orrs	r3, r2
 8006630:	d011      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006632:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006636:	3328      	adds	r3, #40	@ 0x28
 8006638:	2102      	movs	r1, #2
 800663a:	4618      	mov	r0, r3
 800663c:	f001 fa5c 	bl	8007af8 <RCCEx_PLL3_Config>
 8006640:	4603      	mov	r3, r0
 8006642:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006646:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006652:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8006656:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	e000      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
}
 8006664:	4618      	mov	r0, r3
 8006666:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800666a:	46bd      	mov	sp, r7
 800666c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006670:	58024400 	.word	0x58024400

08006674 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b090      	sub	sp, #64	@ 0x40
 8006678:	af00      	add	r7, sp, #0
 800667a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800667e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006682:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006686:	430b      	orrs	r3, r1
 8006688:	f040 8094 	bne.w	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800668c:	4b9e      	ldr	r3, [pc, #632]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800668e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006690:	f003 0307 	and.w	r3, r3, #7
 8006694:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006698:	2b04      	cmp	r3, #4
 800669a:	f200 8087 	bhi.w	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800669e:	a201      	add	r2, pc, #4	@ (adr r2, 80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80066a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a4:	080066b9 	.word	0x080066b9
 80066a8:	080066e1 	.word	0x080066e1
 80066ac:	08006709 	.word	0x08006709
 80066b0:	080067a5 	.word	0x080067a5
 80066b4:	08006731 	.word	0x08006731
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066b8:	4b93      	ldr	r3, [pc, #588]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066c4:	d108      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066ca:	4618      	mov	r0, r3
 80066cc:	f001 f810 	bl	80076f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066d4:	f000 bd45 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066d8:	2300      	movs	r3, #0
 80066da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066dc:	f000 bd41 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066e0:	4b89      	ldr	r3, [pc, #548]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066ec:	d108      	bne.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066ee:	f107 0318 	add.w	r3, r7, #24
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 fd54 	bl	80071a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066fc:	f000 bd31 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006700:	2300      	movs	r3, #0
 8006702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006704:	f000 bd2d 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006708:	4b7f      	ldr	r3, [pc, #508]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006710:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006714:	d108      	bne.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006716:	f107 030c 	add.w	r3, r7, #12
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fe94 	bl	8007448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006724:	f000 bd1d 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006728:	2300      	movs	r3, #0
 800672a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800672c:	f000 bd19 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006730:	4b75      	ldr	r3, [pc, #468]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006734:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006738:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800673a:	4b73      	ldr	r3, [pc, #460]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0304 	and.w	r3, r3, #4
 8006742:	2b04      	cmp	r3, #4
 8006744:	d10c      	bne.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006748:	2b00      	cmp	r3, #0
 800674a:	d109      	bne.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800674c:	4b6e      	ldr	r3, [pc, #440]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	08db      	lsrs	r3, r3, #3
 8006752:	f003 0303 	and.w	r3, r3, #3
 8006756:	4a6d      	ldr	r2, [pc, #436]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006758:	fa22 f303 	lsr.w	r3, r2, r3
 800675c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800675e:	e01f      	b.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006760:	4b69      	ldr	r3, [pc, #420]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800676c:	d106      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800676e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006770:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006774:	d102      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006776:	4b66      	ldr	r3, [pc, #408]	@ (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800677a:	e011      	b.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800677c:	4b62      	ldr	r3, [pc, #392]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006784:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006788:	d106      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800678a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800678c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006790:	d102      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006792:	4b60      	ldr	r3, [pc, #384]	@ (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006794:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006796:	e003      	b.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006798:	2300      	movs	r3, #0
 800679a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800679c:	f000 bce1 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80067a0:	f000 bcdf 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80067a4:	4b5c      	ldr	r3, [pc, #368]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80067a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067a8:	f000 bcdb 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80067ac:	2300      	movs	r3, #0
 80067ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067b0:	f000 bcd7 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80067b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067b8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80067bc:	430b      	orrs	r3, r1
 80067be:	f040 80ad 	bne.w	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80067c2:	4b51      	ldr	r3, [pc, #324]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067c6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80067ca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80067cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067d2:	d056      	beq.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80067d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067da:	f200 8090 	bhi.w	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	2bc0      	cmp	r3, #192	@ 0xc0
 80067e2:	f000 8088 	beq.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80067e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e8:	2bc0      	cmp	r3, #192	@ 0xc0
 80067ea:	f200 8088 	bhi.w	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80067ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f0:	2b80      	cmp	r3, #128	@ 0x80
 80067f2:	d032      	beq.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80067f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f6:	2b80      	cmp	r3, #128	@ 0x80
 80067f8:	f200 8081 	bhi.w	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80067fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006804:	2b40      	cmp	r3, #64	@ 0x40
 8006806:	d014      	beq.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006808:	e079      	b.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800680a:	4b3f      	ldr	r3, [pc, #252]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006812:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006816:	d108      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800681c:	4618      	mov	r0, r3
 800681e:	f000 ff67 	bl	80076f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006826:	f000 bc9c 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800682a:	2300      	movs	r3, #0
 800682c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800682e:	f000 bc98 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006832:	4b35      	ldr	r3, [pc, #212]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800683a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800683e:	d108      	bne.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006840:	f107 0318 	add.w	r3, r7, #24
 8006844:	4618      	mov	r0, r3
 8006846:	f000 fcab 	bl	80071a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800684e:	f000 bc88 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006852:	2300      	movs	r3, #0
 8006854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006856:	f000 bc84 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800685a:	4b2b      	ldr	r3, [pc, #172]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006862:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006866:	d108      	bne.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006868:	f107 030c 	add.w	r3, r7, #12
 800686c:	4618      	mov	r0, r3
 800686e:	f000 fdeb 	bl	8007448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006876:	f000 bc74 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800687a:	2300      	movs	r3, #0
 800687c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800687e:	f000 bc70 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006882:	4b21      	ldr	r3, [pc, #132]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006886:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800688a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800688c:	4b1e      	ldr	r3, [pc, #120]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b04      	cmp	r3, #4
 8006896:	d10c      	bne.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800689a:	2b00      	cmp	r3, #0
 800689c:	d109      	bne.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800689e:	4b1a      	ldr	r3, [pc, #104]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	08db      	lsrs	r3, r3, #3
 80068a4:	f003 0303 	and.w	r3, r3, #3
 80068a8:	4a18      	ldr	r2, [pc, #96]	@ (800690c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80068aa:	fa22 f303 	lsr.w	r3, r2, r3
 80068ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068b0:	e01f      	b.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068b2:	4b15      	ldr	r3, [pc, #84]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068be:	d106      	bne.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80068c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068c6:	d102      	bne.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80068c8:	4b11      	ldr	r3, [pc, #68]	@ (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80068ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068cc:	e011      	b.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068da:	d106      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80068dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068e2:	d102      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80068e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80068e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068e8:	e003      	b.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80068ea:	2300      	movs	r3, #0
 80068ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80068ee:	f000 bc38 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80068f2:	f000 bc36 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80068f6:	4b08      	ldr	r3, [pc, #32]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80068f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068fa:	f000 bc32 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80068fe:	2300      	movs	r3, #0
 8006900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006902:	f000 bc2e 	b.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006906:	bf00      	nop
 8006908:	58024400 	.word	0x58024400
 800690c:	03d09000 	.word	0x03d09000
 8006910:	003d0900 	.word	0x003d0900
 8006914:	017d7840 	.word	0x017d7840
 8006918:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800691c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006920:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006924:	430b      	orrs	r3, r1
 8006926:	f040 809c 	bne.w	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800692a:	4b9e      	ldr	r3, [pc, #632]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800692c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800692e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006932:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006936:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800693a:	d054      	beq.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800693c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006942:	f200 808b 	bhi.w	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006948:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800694c:	f000 8083 	beq.w	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006952:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006956:	f200 8081 	bhi.w	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800695a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006960:	d02f      	beq.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006964:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006968:	d878      	bhi.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800696a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696c:	2b00      	cmp	r3, #0
 800696e:	d004      	beq.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006972:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006976:	d012      	beq.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006978:	e070      	b.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800697a:	4b8a      	ldr	r3, [pc, #552]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006982:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006986:	d107      	bne.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006988:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800698c:	4618      	mov	r0, r3
 800698e:	f000 feaf 	bl	80076f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006996:	e3e4      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800699c:	e3e1      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800699e:	4b81      	ldr	r3, [pc, #516]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069aa:	d107      	bne.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069ac:	f107 0318 	add.w	r3, r7, #24
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 fbf5 	bl	80071a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069ba:	e3d2      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069bc:	2300      	movs	r3, #0
 80069be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069c0:	e3cf      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069c2:	4b78      	ldr	r3, [pc, #480]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069ce:	d107      	bne.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069d0:	f107 030c 	add.w	r3, r7, #12
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 fd37 	bl	8007448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069de:	e3c0      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069e4:	e3bd      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069e6:	4b6f      	ldr	r3, [pc, #444]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80069ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069f0:	4b6c      	ldr	r3, [pc, #432]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	d10c      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80069fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d109      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a02:	4b68      	ldr	r3, [pc, #416]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	08db      	lsrs	r3, r3, #3
 8006a08:	f003 0303 	and.w	r3, r3, #3
 8006a0c:	4a66      	ldr	r2, [pc, #408]	@ (8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a14:	e01e      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a16:	4b63      	ldr	r3, [pc, #396]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a22:	d106      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a2a:	d102      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a2c:	4b5f      	ldr	r3, [pc, #380]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a30:	e010      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a32:	4b5c      	ldr	r3, [pc, #368]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a3e:	d106      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a46:	d102      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a48:	4b59      	ldr	r3, [pc, #356]	@ (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a4c:	e002      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a52:	e386      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a54:	e385      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a56:	4b57      	ldr	r3, [pc, #348]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a5a:	e382      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a60:	e37f      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006a62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a66:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006a6a:	430b      	orrs	r3, r1
 8006a6c:	f040 80a7 	bne.w	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006a70:	4b4c      	ldr	r3, [pc, #304]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a74:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006a78:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a80:	d055      	beq.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a88:	f200 8096 	bhi.w	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a92:	f000 8084 	beq.w	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a98:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a9c:	f200 808c 	bhi.w	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006aa6:	d030      	beq.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006aae:	f200 8083 	bhi.w	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d004      	beq.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006abe:	d012      	beq.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006ac0:	e07a      	b.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ac2:	4b38      	ldr	r3, [pc, #224]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ace:	d107      	bne.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 fe0b 	bl	80076f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ade:	e340      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ae4:	e33d      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ae6:	4b2f      	ldr	r3, [pc, #188]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006aee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006af2:	d107      	bne.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006af4:	f107 0318 	add.w	r3, r7, #24
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 fb51 	bl	80071a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b02:	e32e      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b04:	2300      	movs	r3, #0
 8006b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b08:	e32b      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b0a:	4b26      	ldr	r3, [pc, #152]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b16:	d107      	bne.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b18:	f107 030c 	add.w	r3, r7, #12
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 fc93 	bl	8007448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b26:	e31c      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b2c:	e319      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006b36:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b38:	4b1a      	ldr	r3, [pc, #104]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d10c      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d109      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b4a:	4b16      	ldr	r3, [pc, #88]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	08db      	lsrs	r3, r3, #3
 8006b50:	f003 0303 	and.w	r3, r3, #3
 8006b54:	4a14      	ldr	r2, [pc, #80]	@ (8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006b56:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b5c:	e01e      	b.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b5e:	4b11      	ldr	r3, [pc, #68]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b6a:	d106      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b72:	d102      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b74:	4b0d      	ldr	r3, [pc, #52]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b78:	e010      	b.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b86:	d106      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b8e:	d102      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b90:	4b07      	ldr	r3, [pc, #28]	@ (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b94:	e002      	b.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b96:	2300      	movs	r3, #0
 8006b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006b9a:	e2e2      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b9c:	e2e1      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b9e:	4b05      	ldr	r3, [pc, #20]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ba2:	e2de      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ba4:	58024400 	.word	0x58024400
 8006ba8:	03d09000 	.word	0x03d09000
 8006bac:	003d0900 	.word	0x003d0900
 8006bb0:	017d7840 	.word	0x017d7840
 8006bb4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bbc:	e2d1      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bc2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006bc6:	430b      	orrs	r3, r1
 8006bc8:	f040 809c 	bne.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006bcc:	4b93      	ldr	r3, [pc, #588]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bd0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006bd4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bdc:	d054      	beq.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006be4:	f200 808b 	bhi.w	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bee:	f000 8083 	beq.w	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bf8:	f200 8081 	bhi.w	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c02:	d02f      	beq.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c0a:	d878      	bhi.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d004      	beq.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c18:	d012      	beq.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006c1a:	e070      	b.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c1c:	4b7f      	ldr	r3, [pc, #508]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c28:	d107      	bne.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fd5e 	bl	80076f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c38:	e293      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c3e:	e290      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c40:	4b76      	ldr	r3, [pc, #472]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c4c:	d107      	bne.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c4e:	f107 0318 	add.w	r3, r7, #24
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 faa4 	bl	80071a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c5c:	e281      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c62:	e27e      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c64:	4b6d      	ldr	r3, [pc, #436]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c70:	d107      	bne.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c72:	f107 030c 	add.w	r3, r7, #12
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fbe6 	bl	8007448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c80:	e26f      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c82:	2300      	movs	r3, #0
 8006c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c86:	e26c      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c88:	4b64      	ldr	r3, [pc, #400]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c90:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c92:	4b62      	ldr	r3, [pc, #392]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0304 	and.w	r3, r3, #4
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	d10c      	bne.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d109      	bne.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ca4:	4b5d      	ldr	r3, [pc, #372]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	08db      	lsrs	r3, r3, #3
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	4a5c      	ldr	r2, [pc, #368]	@ (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cb6:	e01e      	b.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cb8:	4b58      	ldr	r3, [pc, #352]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cc4:	d106      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ccc:	d102      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006cce:	4b55      	ldr	r3, [pc, #340]	@ (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cd2:	e010      	b.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cd4:	4b51      	ldr	r3, [pc, #324]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ce0:	d106      	bne.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ce4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ce8:	d102      	bne.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006cea:	4b4f      	ldr	r3, [pc, #316]	@ (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cee:	e002      	b.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006cf4:	e235      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006cf6:	e234      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006cf8:	4b4c      	ldr	r3, [pc, #304]	@ (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cfc:	e231      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d02:	e22e      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d08:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	f040 808f 	bne.w	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006d12:	4b42      	ldr	r3, [pc, #264]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d16:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d22:	d06b      	beq.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d2a:	d874      	bhi.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d32:	d056      	beq.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d3a:	d86c      	bhi.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d42:	d03b      	beq.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d4a:	d864      	bhi.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d52:	d021      	beq.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d5a:	d85c      	bhi.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d68:	d004      	beq.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006d6a:	e054      	b.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006d6c:	f7fe fa22 	bl	80051b4 <HAL_RCC_GetPCLK1Freq>
 8006d70:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d72:	e1f6      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d74:	4b29      	ldr	r3, [pc, #164]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d80:	d107      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d82:	f107 0318 	add.w	r3, r7, #24
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fa0a 	bl	80071a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d90:	e1e7      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d96:	e1e4      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d98:	4b20      	ldr	r3, [pc, #128]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006da0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006da4:	d107      	bne.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006da6:	f107 030c 	add.w	r3, r7, #12
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 fb4c 	bl	8007448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006db4:	e1d5      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006db6:	2300      	movs	r3, #0
 8006db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dba:	e1d2      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006dbc:	4b17      	ldr	r3, [pc, #92]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0304 	and.w	r3, r3, #4
 8006dc4:	2b04      	cmp	r3, #4
 8006dc6:	d109      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dc8:	4b14      	ldr	r3, [pc, #80]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	08db      	lsrs	r3, r3, #3
 8006dce:	f003 0303 	and.w	r3, r3, #3
 8006dd2:	4a13      	ldr	r2, [pc, #76]	@ (8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dda:	e1c2      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006de0:	e1bf      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006de2:	4b0e      	ldr	r3, [pc, #56]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dee:	d102      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006df0:	4b0c      	ldr	r3, [pc, #48]	@ (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006df4:	e1b5      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006df6:	2300      	movs	r3, #0
 8006df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dfa:	e1b2      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006dfc:	4b07      	ldr	r3, [pc, #28]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e08:	d102      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006e0a:	4b07      	ldr	r3, [pc, #28]	@ (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e0e:	e1a8      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e14:	e1a5      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006e16:	2300      	movs	r3, #0
 8006e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e1a:	e1a2      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e1c:	58024400 	.word	0x58024400
 8006e20:	03d09000 	.word	0x03d09000
 8006e24:	003d0900 	.word	0x003d0900
 8006e28:	017d7840 	.word	0x017d7840
 8006e2c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e34:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006e38:	430b      	orrs	r3, r1
 8006e3a:	d173      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006e3c:	4b9c      	ldr	r3, [pc, #624]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006e44:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e4c:	d02f      	beq.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e54:	d863      	bhi.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d004      	beq.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e62:	d012      	beq.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006e64:	e05b      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e66:	4b92      	ldr	r3, [pc, #584]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e72:	d107      	bne.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e74:	f107 0318 	add.w	r3, r7, #24
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 f991 	bl	80071a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e82:	e16e      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e88:	e16b      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e8a:	4b89      	ldr	r3, [pc, #548]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e96:	d107      	bne.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e98:	f107 030c 	add.w	r3, r7, #12
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 fad3 	bl	8007448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ea6:	e15c      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eac:	e159      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006eae:	4b80      	ldr	r3, [pc, #512]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006eb6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006eb8:	4b7d      	ldr	r3, [pc, #500]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b04      	cmp	r3, #4
 8006ec2:	d10c      	bne.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d109      	bne.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006eca:	4b79      	ldr	r3, [pc, #484]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	08db      	lsrs	r3, r3, #3
 8006ed0:	f003 0303 	and.w	r3, r3, #3
 8006ed4:	4a77      	ldr	r2, [pc, #476]	@ (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8006eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006edc:	e01e      	b.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ede:	4b74      	ldr	r3, [pc, #464]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eea:	d106      	bne.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ef2:	d102      	bne.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ef4:	4b70      	ldr	r3, [pc, #448]	@ (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ef8:	e010      	b.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006efa:	4b6d      	ldr	r3, [pc, #436]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f06:	d106      	bne.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f0e:	d102      	bne.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f10:	4b6a      	ldr	r3, [pc, #424]	@ (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f14:	e002      	b.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006f1a:	e122      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f1c:	e121      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f22:	e11e      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006f24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f28:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006f2c:	430b      	orrs	r3, r1
 8006f2e:	d133      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006f30:	4b5f      	ldr	r3, [pc, #380]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f38:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d004      	beq.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f46:	d012      	beq.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006f48:	e023      	b.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f4a:	4b59      	ldr	r3, [pc, #356]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f56:	d107      	bne.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f000 fbc7 	bl	80076f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f66:	e0fc      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f6c:	e0f9      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f6e:	4b50      	ldr	r3, [pc, #320]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f7a:	d107      	bne.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f7c:	f107 0318 	add.w	r3, r7, #24
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 f90d 	bl	80071a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f8a:	e0ea      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f90:	e0e7      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006f92:	2300      	movs	r3, #0
 8006f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f96:	e0e4      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f9c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006fa0:	430b      	orrs	r3, r1
 8006fa2:	f040 808d 	bne.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006fa6:	4b42      	ldr	r3, [pc, #264]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006faa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006fae:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fb6:	d06b      	beq.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fbe:	d874      	bhi.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fc6:	d056      	beq.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fce:	d86c      	bhi.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fd6:	d03b      	beq.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fde:	d864      	bhi.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fe6:	d021      	beq.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fee:	d85c      	bhi.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d004      	beq.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ffc:	d004      	beq.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006ffe:	e054      	b.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007000:	f000 f8b8 	bl	8007174 <HAL_RCCEx_GetD3PCLK1Freq>
 8007004:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007006:	e0ac      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007008:	4b29      	ldr	r3, [pc, #164]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007010:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007014:	d107      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007016:	f107 0318 	add.w	r3, r7, #24
 800701a:	4618      	mov	r0, r3
 800701c:	f000 f8c0 	bl	80071a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007024:	e09d      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800702a:	e09a      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800702c:	4b20      	ldr	r3, [pc, #128]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007034:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007038:	d107      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800703a:	f107 030c 	add.w	r3, r7, #12
 800703e:	4618      	mov	r0, r3
 8007040:	f000 fa02 	bl	8007448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007048:	e08b      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800704e:	e088      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007050:	4b17      	ldr	r3, [pc, #92]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b04      	cmp	r3, #4
 800705a:	d109      	bne.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800705c:	4b14      	ldr	r3, [pc, #80]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	08db      	lsrs	r3, r3, #3
 8007062:	f003 0303 	and.w	r3, r3, #3
 8007066:	4a13      	ldr	r2, [pc, #76]	@ (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007068:	fa22 f303 	lsr.w	r3, r2, r3
 800706c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800706e:	e078      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007070:	2300      	movs	r3, #0
 8007072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007074:	e075      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007076:	4b0e      	ldr	r3, [pc, #56]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800707e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007082:	d102      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007084:	4b0c      	ldr	r3, [pc, #48]	@ (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007088:	e06b      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800708a:	2300      	movs	r3, #0
 800708c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800708e:	e068      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007090:	4b07      	ldr	r3, [pc, #28]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007098:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800709c:	d102      	bne.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800709e:	4b07      	ldr	r3, [pc, #28]	@ (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80070a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070a2:	e05e      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070a4:	2300      	movs	r3, #0
 80070a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070a8:	e05b      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80070aa:	2300      	movs	r3, #0
 80070ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070ae:	e058      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070b0:	58024400 	.word	0x58024400
 80070b4:	03d09000 	.word	0x03d09000
 80070b8:	003d0900 	.word	0x003d0900
 80070bc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80070c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070c4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80070c8:	430b      	orrs	r3, r1
 80070ca:	d148      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80070cc:	4b27      	ldr	r3, [pc, #156]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80070ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80070d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80070d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070dc:	d02a      	beq.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80070de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070e4:	d838      	bhi.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80070e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d004      	beq.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80070ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070f2:	d00d      	beq.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80070f4:	e030      	b.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80070f6:	4b1d      	ldr	r3, [pc, #116]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007102:	d102      	bne.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007104:	4b1a      	ldr	r3, [pc, #104]	@ (8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007108:	e02b      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800710a:	2300      	movs	r3, #0
 800710c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800710e:	e028      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007110:	4b16      	ldr	r3, [pc, #88]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007118:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800711c:	d107      	bne.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800711e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007122:	4618      	mov	r0, r3
 8007124:	f000 fae4 	bl	80076f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800712c:	e019      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800712e:	2300      	movs	r3, #0
 8007130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007132:	e016      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007134:	4b0d      	ldr	r3, [pc, #52]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800713c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007140:	d107      	bne.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007142:	f107 0318 	add.w	r3, r7, #24
 8007146:	4618      	mov	r0, r3
 8007148:	f000 f82a 	bl	80071a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007150:	e007      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007152:	2300      	movs	r3, #0
 8007154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007156:	e004      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007158:	2300      	movs	r3, #0
 800715a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800715c:	e001      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007164:	4618      	mov	r0, r3
 8007166:	3740      	adds	r7, #64	@ 0x40
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	58024400 	.word	0x58024400
 8007170:	017d7840 	.word	0x017d7840

08007174 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007178:	f7fd ffec 	bl	8005154 <HAL_RCC_GetHCLKFreq>
 800717c:	4602      	mov	r2, r0
 800717e:	4b06      	ldr	r3, [pc, #24]	@ (8007198 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	091b      	lsrs	r3, r3, #4
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	4904      	ldr	r1, [pc, #16]	@ (800719c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800718a:	5ccb      	ldrb	r3, [r1, r3]
 800718c:	f003 031f 	and.w	r3, r3, #31
 8007190:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007194:	4618      	mov	r0, r3
 8007196:	bd80      	pop	{r7, pc}
 8007198:	58024400 	.word	0x58024400
 800719c:	0801169c 	.word	0x0801169c

080071a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b089      	sub	sp, #36	@ 0x24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071a8:	4ba1      	ldr	r3, [pc, #644]	@ (8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ac:	f003 0303 	and.w	r3, r3, #3
 80071b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80071b2:	4b9f      	ldr	r3, [pc, #636]	@ (8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b6:	0b1b      	lsrs	r3, r3, #12
 80071b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80071be:	4b9c      	ldr	r3, [pc, #624]	@ (8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c2:	091b      	lsrs	r3, r3, #4
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80071ca:	4b99      	ldr	r3, [pc, #612]	@ (8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ce:	08db      	lsrs	r3, r3, #3
 80071d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	fb02 f303 	mul.w	r3, r2, r3
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 8111 	beq.w	8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	f000 8083 	beq.w	80072fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	f200 80a1 	bhi.w	8007340 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d056      	beq.n	80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800720a:	e099      	b.n	8007340 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800720c:	4b88      	ldr	r3, [pc, #544]	@ (8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0320 	and.w	r3, r3, #32
 8007214:	2b00      	cmp	r3, #0
 8007216:	d02d      	beq.n	8007274 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007218:	4b85      	ldr	r3, [pc, #532]	@ (8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	08db      	lsrs	r3, r3, #3
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	4a84      	ldr	r2, [pc, #528]	@ (8007434 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007224:	fa22 f303 	lsr.w	r3, r2, r3
 8007228:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	ee07 3a90 	vmov	s15, r3
 8007230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007242:	4b7b      	ldr	r3, [pc, #492]	@ (8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007252:	ed97 6a03 	vldr	s12, [r7, #12]
 8007256:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800725a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007272:	e087      	b.n	8007384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800743c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007286:	4b6a      	ldr	r3, [pc, #424]	@ (8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800728a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007296:	ed97 6a03 	vldr	s12, [r7, #12]
 800729a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800729e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072b6:	e065      	b.n	8007384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ca:	4b59      	ldr	r3, [pc, #356]	@ (8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072da:	ed97 6a03 	vldr	s12, [r7, #12]
 80072de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072fa:	e043      	b.n	8007384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007306:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800730a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800730e:	4b48      	ldr	r3, [pc, #288]	@ (8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800731e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007322:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800732a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800732e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800733a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800733e:	e021      	b.n	8007384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800734e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007352:	4b37      	ldr	r3, [pc, #220]	@ (8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007362:	ed97 6a03 	vldr	s12, [r7, #12]
 8007366:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800736a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800736e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800737a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800737e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007382:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007384:	4b2a      	ldr	r3, [pc, #168]	@ (8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007388:	0a5b      	lsrs	r3, r3, #9
 800738a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007396:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800739a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800739e:	edd7 6a07 	vldr	s13, [r7, #28]
 80073a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073aa:	ee17 2a90 	vmov	r2, s15
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80073b2:	4b1f      	ldr	r3, [pc, #124]	@ (8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b6:	0c1b      	lsrs	r3, r3, #16
 80073b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073bc:	ee07 3a90 	vmov	s15, r3
 80073c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80073d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073d8:	ee17 2a90 	vmov	r2, s15
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80073e0:	4b13      	ldr	r3, [pc, #76]	@ (8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e4:	0e1b      	lsrs	r3, r3, #24
 80073e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073ea:	ee07 3a90 	vmov	s15, r3
 80073ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80073fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007406:	ee17 2a90 	vmov	r2, s15
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800740e:	e008      	b.n	8007422 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	609a      	str	r2, [r3, #8]
}
 8007422:	bf00      	nop
 8007424:	3724      	adds	r7, #36	@ 0x24
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	58024400 	.word	0x58024400
 8007434:	03d09000 	.word	0x03d09000
 8007438:	46000000 	.word	0x46000000
 800743c:	4c742400 	.word	0x4c742400
 8007440:	4a742400 	.word	0x4a742400
 8007444:	4bbebc20 	.word	0x4bbebc20

08007448 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007448:	b480      	push	{r7}
 800744a:	b089      	sub	sp, #36	@ 0x24
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007450:	4ba1      	ldr	r3, [pc, #644]	@ (80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007454:	f003 0303 	and.w	r3, r3, #3
 8007458:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800745a:	4b9f      	ldr	r3, [pc, #636]	@ (80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800745c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800745e:	0d1b      	lsrs	r3, r3, #20
 8007460:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007464:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007466:	4b9c      	ldr	r3, [pc, #624]	@ (80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746a:	0a1b      	lsrs	r3, r3, #8
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007472:	4b99      	ldr	r3, [pc, #612]	@ (80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007476:	08db      	lsrs	r3, r3, #3
 8007478:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	fb02 f303 	mul.w	r3, r2, r3
 8007482:	ee07 3a90 	vmov	s15, r3
 8007486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 8111 	beq.w	80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	2b02      	cmp	r3, #2
 800749a:	f000 8083 	beq.w	80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	f200 80a1 	bhi.w	80075e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d056      	beq.n	8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80074b2:	e099      	b.n	80075e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074b4:	4b88      	ldr	r3, [pc, #544]	@ (80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0320 	and.w	r3, r3, #32
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d02d      	beq.n	800751c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074c0:	4b85      	ldr	r3, [pc, #532]	@ (80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	08db      	lsrs	r3, r3, #3
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	4a84      	ldr	r2, [pc, #528]	@ (80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80074cc:	fa22 f303 	lsr.w	r3, r2, r3
 80074d0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	ee07 3a90 	vmov	s15, r3
 80074d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ea:	4b7b      	ldr	r3, [pc, #492]	@ (80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f2:	ee07 3a90 	vmov	s15, r3
 80074f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80074fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800750a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800750e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007516:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800751a:	e087      	b.n	800762c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007526:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800752a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800752e:	4b6a      	ldr	r3, [pc, #424]	@ (80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007536:	ee07 3a90 	vmov	s15, r3
 800753a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800753e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007542:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800754a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800754e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800755a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800755e:	e065      	b.n	800762c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800756e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007572:	4b59      	ldr	r3, [pc, #356]	@ (80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800757a:	ee07 3a90 	vmov	s15, r3
 800757e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007582:	ed97 6a03 	vldr	s12, [r7, #12]
 8007586:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800758a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800758e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800759a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800759e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075a2:	e043      	b.n	800762c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80075b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075b6:	4b48      	ldr	r3, [pc, #288]	@ (80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075be:	ee07 3a90 	vmov	s15, r3
 80075c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075e6:	e021      	b.n	800762c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075fa:	4b37      	ldr	r3, [pc, #220]	@ (80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800760a:	ed97 6a03 	vldr	s12, [r7, #12]
 800760e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80076e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800761a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800761e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800762a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800762c:	4b2a      	ldr	r3, [pc, #168]	@ (80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800762e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007630:	0a5b      	lsrs	r3, r3, #9
 8007632:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007642:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007646:	edd7 6a07 	vldr	s13, [r7, #28]
 800764a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800764e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007652:	ee17 2a90 	vmov	r2, s15
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800765a:	4b1f      	ldr	r3, [pc, #124]	@ (80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800765c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800765e:	0c1b      	lsrs	r3, r3, #16
 8007660:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007664:	ee07 3a90 	vmov	s15, r3
 8007668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007670:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007674:	edd7 6a07 	vldr	s13, [r7, #28]
 8007678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800767c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007680:	ee17 2a90 	vmov	r2, s15
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007688:	4b13      	ldr	r3, [pc, #76]	@ (80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800768a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800768c:	0e1b      	lsrs	r3, r3, #24
 800768e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007692:	ee07 3a90 	vmov	s15, r3
 8007696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800769a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800769e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80076a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076ae:	ee17 2a90 	vmov	r2, s15
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80076b6:	e008      	b.n	80076ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	609a      	str	r2, [r3, #8]
}
 80076ca:	bf00      	nop
 80076cc:	3724      	adds	r7, #36	@ 0x24
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	58024400 	.word	0x58024400
 80076dc:	03d09000 	.word	0x03d09000
 80076e0:	46000000 	.word	0x46000000
 80076e4:	4c742400 	.word	0x4c742400
 80076e8:	4a742400 	.word	0x4a742400
 80076ec:	4bbebc20 	.word	0x4bbebc20

080076f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b089      	sub	sp, #36	@ 0x24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076f8:	4ba0      	ldr	r3, [pc, #640]	@ (800797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fc:	f003 0303 	and.w	r3, r3, #3
 8007700:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007702:	4b9e      	ldr	r3, [pc, #632]	@ (800797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007706:	091b      	lsrs	r3, r3, #4
 8007708:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800770c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800770e:	4b9b      	ldr	r3, [pc, #620]	@ (800797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007718:	4b98      	ldr	r3, [pc, #608]	@ (800797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800771a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800771c:	08db      	lsrs	r3, r3, #3
 800771e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	fb02 f303 	mul.w	r3, r2, r3
 8007728:	ee07 3a90 	vmov	s15, r3
 800772c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007730:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 8111 	beq.w	800795e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	2b02      	cmp	r3, #2
 8007740:	f000 8083 	beq.w	800784a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	2b02      	cmp	r3, #2
 8007748:	f200 80a1 	bhi.w	800788e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d056      	beq.n	8007806 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007758:	e099      	b.n	800788e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800775a:	4b88      	ldr	r3, [pc, #544]	@ (800797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0320 	and.w	r3, r3, #32
 8007762:	2b00      	cmp	r3, #0
 8007764:	d02d      	beq.n	80077c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007766:	4b85      	ldr	r3, [pc, #532]	@ (800797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	08db      	lsrs	r3, r3, #3
 800776c:	f003 0303 	and.w	r3, r3, #3
 8007770:	4a83      	ldr	r2, [pc, #524]	@ (8007980 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007772:	fa22 f303 	lsr.w	r3, r2, r3
 8007776:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	ee07 3a90 	vmov	s15, r3
 8007788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007790:	4b7a      	ldr	r3, [pc, #488]	@ (800797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007798:	ee07 3a90 	vmov	s15, r3
 800779c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80077a4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077bc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80077c0:	e087      	b.n	80078d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	ee07 3a90 	vmov	s15, r3
 80077c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077cc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007988 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80077d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077d4:	4b69      	ldr	r3, [pc, #420]	@ (800797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077dc:	ee07 3a90 	vmov	s15, r3
 80077e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80077e8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007800:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007804:	e065      	b.n	80078d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	ee07 3a90 	vmov	s15, r3
 800780c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007810:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800798c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007818:	4b58      	ldr	r3, [pc, #352]	@ (800797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800781a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800781c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007820:	ee07 3a90 	vmov	s15, r3
 8007824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007828:	ed97 6a03 	vldr	s12, [r7, #12]
 800782c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007830:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007838:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800783c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007844:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007848:	e043      	b.n	80078d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	ee07 3a90 	vmov	s15, r3
 8007850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007854:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007990 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800785c:	4b47      	ldr	r3, [pc, #284]	@ (800797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800785e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007864:	ee07 3a90 	vmov	s15, r3
 8007868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800786c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007870:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007874:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007878:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800787c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007880:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007888:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800788c:	e021      	b.n	80078d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	ee07 3a90 	vmov	s15, r3
 8007894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007898:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007988 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800789c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078a0:	4b36      	ldr	r3, [pc, #216]	@ (800797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a8:	ee07 3a90 	vmov	s15, r3
 80078ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80078b4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80078d2:	4b2a      	ldr	r3, [pc, #168]	@ (800797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078d6:	0a5b      	lsrs	r3, r3, #9
 80078d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078dc:	ee07 3a90 	vmov	s15, r3
 80078e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80078f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078f8:	ee17 2a90 	vmov	r2, s15
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007900:	4b1e      	ldr	r3, [pc, #120]	@ (800797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007904:	0c1b      	lsrs	r3, r3, #16
 8007906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007912:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007916:	ee37 7a87 	vadd.f32	s14, s15, s14
 800791a:	edd7 6a07 	vldr	s13, [r7, #28]
 800791e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007926:	ee17 2a90 	vmov	r2, s15
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800792e:	4b13      	ldr	r3, [pc, #76]	@ (800797c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007932:	0e1b      	lsrs	r3, r3, #24
 8007934:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007938:	ee07 3a90 	vmov	s15, r3
 800793c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007940:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007944:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007948:	edd7 6a07 	vldr	s13, [r7, #28]
 800794c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007954:	ee17 2a90 	vmov	r2, s15
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800795c:	e008      	b.n	8007970 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	609a      	str	r2, [r3, #8]
}
 8007970:	bf00      	nop
 8007972:	3724      	adds	r7, #36	@ 0x24
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	58024400 	.word	0x58024400
 8007980:	03d09000 	.word	0x03d09000
 8007984:	46000000 	.word	0x46000000
 8007988:	4c742400 	.word	0x4c742400
 800798c:	4a742400 	.word	0x4a742400
 8007990:	4bbebc20 	.word	0x4bbebc20

08007994 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079a2:	4b53      	ldr	r3, [pc, #332]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 80079a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a6:	f003 0303 	and.w	r3, r3, #3
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d101      	bne.n	80079b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e099      	b.n	8007ae6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80079b2:	4b4f      	ldr	r3, [pc, #316]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a4e      	ldr	r2, [pc, #312]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 80079b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079be:	f7f9 faa1 	bl	8000f04 <HAL_GetTick>
 80079c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079c4:	e008      	b.n	80079d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079c6:	f7f9 fa9d 	bl	8000f04 <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d901      	bls.n	80079d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e086      	b.n	8007ae6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079d8:	4b45      	ldr	r3, [pc, #276]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1f0      	bne.n	80079c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80079e4:	4b42      	ldr	r3, [pc, #264]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 80079e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	031b      	lsls	r3, r3, #12
 80079f2:	493f      	ldr	r1, [pc, #252]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 80079f4:	4313      	orrs	r3, r2
 80079f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	3b01      	subs	r3, #1
 8007a08:	025b      	lsls	r3, r3, #9
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	3b01      	subs	r3, #1
 8007a14:	041b      	lsls	r3, r3, #16
 8007a16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007a1a:	431a      	orrs	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	3b01      	subs	r3, #1
 8007a22:	061b      	lsls	r3, r3, #24
 8007a24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007a28:	4931      	ldr	r1, [pc, #196]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007a2e:	4b30      	ldr	r3, [pc, #192]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a32:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	492d      	ldr	r1, [pc, #180]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a40:	4b2b      	ldr	r3, [pc, #172]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a44:	f023 0220 	bic.w	r2, r3, #32
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	4928      	ldr	r1, [pc, #160]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007a52:	4b27      	ldr	r3, [pc, #156]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a56:	4a26      	ldr	r2, [pc, #152]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007a58:	f023 0310 	bic.w	r3, r3, #16
 8007a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a5e:	4b24      	ldr	r3, [pc, #144]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007a60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a62:	4b24      	ldr	r3, [pc, #144]	@ (8007af4 <RCCEx_PLL2_Config+0x160>)
 8007a64:	4013      	ands	r3, r2
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	69d2      	ldr	r2, [r2, #28]
 8007a6a:	00d2      	lsls	r2, r2, #3
 8007a6c:	4920      	ldr	r1, [pc, #128]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a72:	4b1f      	ldr	r3, [pc, #124]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a76:	4a1e      	ldr	r2, [pc, #120]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007a78:	f043 0310 	orr.w	r3, r3, #16
 8007a7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d106      	bne.n	8007a92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a84:	4b1a      	ldr	r3, [pc, #104]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a88:	4a19      	ldr	r2, [pc, #100]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007a8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a90:	e00f      	b.n	8007ab2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d106      	bne.n	8007aa6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a98:	4b15      	ldr	r3, [pc, #84]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9c:	4a14      	ldr	r2, [pc, #80]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007a9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007aa4:	e005      	b.n	8007ab2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007aa6:	4b12      	ldr	r3, [pc, #72]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aaa:	4a11      	ldr	r2, [pc, #68]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007aac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ab0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007ab8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007abc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007abe:	f7f9 fa21 	bl	8000f04 <HAL_GetTick>
 8007ac2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ac4:	e008      	b.n	8007ad8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ac6:	f7f9 fa1d 	bl	8000f04 <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d901      	bls.n	8007ad8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e006      	b.n	8007ae6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ad8:	4b05      	ldr	r3, [pc, #20]	@ (8007af0 <RCCEx_PLL2_Config+0x15c>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d0f0      	beq.n	8007ac6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	58024400 	.word	0x58024400
 8007af4:	ffff0007 	.word	0xffff0007

08007af8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b06:	4b53      	ldr	r3, [pc, #332]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0a:	f003 0303 	and.w	r3, r3, #3
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d101      	bne.n	8007b16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e099      	b.n	8007c4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007b16:	4b4f      	ldr	r3, [pc, #316]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a4e      	ldr	r2, [pc, #312]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007b1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b22:	f7f9 f9ef 	bl	8000f04 <HAL_GetTick>
 8007b26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b28:	e008      	b.n	8007b3c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b2a:	f7f9 f9eb 	bl	8000f04 <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d901      	bls.n	8007b3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e086      	b.n	8007c4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b3c:	4b45      	ldr	r3, [pc, #276]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1f0      	bne.n	8007b2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007b48:	4b42      	ldr	r3, [pc, #264]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	051b      	lsls	r3, r3, #20
 8007b56:	493f      	ldr	r1, [pc, #252]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	3b01      	subs	r3, #1
 8007b62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	025b      	lsls	r3, r3, #9
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	431a      	orrs	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	041b      	lsls	r3, r3, #16
 8007b7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	061b      	lsls	r3, r3, #24
 8007b88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b8c:	4931      	ldr	r1, [pc, #196]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b92:	4b30      	ldr	r3, [pc, #192]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b96:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	492d      	ldr	r1, [pc, #180]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	4928      	ldr	r1, [pc, #160]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007bb6:	4b27      	ldr	r3, [pc, #156]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bba:	4a26      	ldr	r2, [pc, #152]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007bbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007bc2:	4b24      	ldr	r3, [pc, #144]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007bc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bc6:	4b24      	ldr	r3, [pc, #144]	@ (8007c58 <RCCEx_PLL3_Config+0x160>)
 8007bc8:	4013      	ands	r3, r2
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	69d2      	ldr	r2, [r2, #28]
 8007bce:	00d2      	lsls	r2, r2, #3
 8007bd0:	4920      	ldr	r1, [pc, #128]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bda:	4a1e      	ldr	r2, [pc, #120]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007be0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d106      	bne.n	8007bf6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007be8:	4b1a      	ldr	r3, [pc, #104]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bec:	4a19      	ldr	r2, [pc, #100]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007bee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007bf4:	e00f      	b.n	8007c16 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d106      	bne.n	8007c0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007bfc:	4b15      	ldr	r3, [pc, #84]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c00:	4a14      	ldr	r2, [pc, #80]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007c02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007c06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c08:	e005      	b.n	8007c16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007c0a:	4b12      	ldr	r3, [pc, #72]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0e:	4a11      	ldr	r2, [pc, #68]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007c10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c14:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007c16:	4b0f      	ldr	r3, [pc, #60]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a0e      	ldr	r2, [pc, #56]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c22:	f7f9 f96f 	bl	8000f04 <HAL_GetTick>
 8007c26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c28:	e008      	b.n	8007c3c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c2a:	f7f9 f96b 	bl	8000f04 <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d901      	bls.n	8007c3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e006      	b.n	8007c4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c3c:	4b05      	ldr	r3, [pc, #20]	@ (8007c54 <RCCEx_PLL3_Config+0x15c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d0f0      	beq.n	8007c2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	58024400 	.word	0x58024400
 8007c58:	ffff0007 	.word	0xffff0007

08007c5c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d071      	beq.n	8007d52 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d106      	bne.n	8007c88 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f005 fea8 	bl	800d9d8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f003 0310 	and.w	r3, r3, #16
 8007c9a:	2b10      	cmp	r3, #16
 8007c9c:	d050      	beq.n	8007d40 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	22ca      	movs	r2, #202	@ 0xca
 8007ca4:	625a      	str	r2, [r3, #36]	@ 0x24
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2253      	movs	r2, #83	@ 0x53
 8007cac:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fa4a 	bl	8008148 <RTC_EnterInitMode>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d124      	bne.n	8007d08 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	6899      	ldr	r1, [r3, #8]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	4b24      	ldr	r3, [pc, #144]	@ (8007d5c <HAL_RTC_Init+0x100>)
 8007cca:	400b      	ands	r3, r1
 8007ccc:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6899      	ldr	r1, [r3, #8]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	431a      	orrs	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	0419      	lsls	r1, r3, #16
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fa56 	bl	80081b0 <RTC_ExitInitMode>
 8007d04:	4603      	mov	r3, r0
 8007d06:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d113      	bne.n	8007d36 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f022 0203 	bic.w	r2, r2, #3
 8007d1c:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	69da      	ldr	r2, [r3, #28]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	431a      	orrs	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	22ff      	movs	r2, #255	@ 0xff
 8007d3c:	625a      	str	r2, [r3, #36]	@ 0x24
 8007d3e:	e001      	b.n	8007d44 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d103      	bne.n	8007d52 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	ff8fffbf 	.word	0xff8fffbf

08007d60 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007d60:	b590      	push	{r4, r7, lr}
 8007d62:	b087      	sub	sp, #28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d101      	bne.n	8007d7a <HAL_RTC_SetTime+0x1a>
 8007d76:	2302      	movs	r3, #2
 8007d78:	e089      	b.n	8007e8e <HAL_RTC_SetTime+0x12e>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2202      	movs	r2, #2
 8007d86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	22ca      	movs	r2, #202	@ 0xca
 8007d90:	625a      	str	r2, [r3, #36]	@ 0x24
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2253      	movs	r2, #83	@ 0x53
 8007d98:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f000 f9d4 	bl	8008148 <RTC_EnterInitMode>
 8007da0:	4603      	mov	r3, r0
 8007da2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007da4:	7cfb      	ldrb	r3, [r7, #19]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d161      	bne.n	8007e6e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d126      	bne.n	8007dfe <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d102      	bne.n	8007dc4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 fa2f 	bl	800822c <RTC_ByteToBcd2>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	785b      	ldrb	r3, [r3, #1]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 fa28 	bl	800822c <RTC_ByteToBcd2>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007de0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	789b      	ldrb	r3, [r3, #2]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fa20 	bl	800822c <RTC_ByteToBcd2>
 8007dec:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007dee:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	78db      	ldrb	r3, [r3, #3]
 8007df6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	617b      	str	r3, [r7, #20]
 8007dfc:	e018      	b.n	8007e30 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d102      	bne.n	8007e12 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	785b      	ldrb	r3, [r3, #1]
 8007e1c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007e1e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007e24:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	78db      	ldrb	r3, [r3, #3]
 8007e2a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	6979      	ldr	r1, [r7, #20]
 8007e36:	4b18      	ldr	r3, [pc, #96]	@ (8007e98 <HAL_RTC_SetTime+0x138>)
 8007e38:	400b      	ands	r3, r1
 8007e3a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	689a      	ldr	r2, [r3, #8]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007e4a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6899      	ldr	r1, [r3, #8]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	68da      	ldr	r2, [r3, #12]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	430a      	orrs	r2, r1
 8007e62:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 f9a3 	bl	80081b0 <RTC_ExitInitMode>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	22ff      	movs	r2, #255	@ 0xff
 8007e74:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007e76:	7cfb      	ldrb	r3, [r7, #19]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d103      	bne.n	8007e84 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007e8c:	7cfb      	ldrb	r3, [r7, #19]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	371c      	adds	r7, #28
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd90      	pop	{r4, r7, pc}
 8007e96:	bf00      	nop
 8007e98:	007f7f7f 	.word	0x007f7f7f

08007e9c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	4b22      	ldr	r3, [pc, #136]	@ (8007f50 <HAL_RTC_GetTime+0xb4>)
 8007ec8:	4013      	ands	r3, r2
 8007eca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	0c1b      	lsrs	r3, r3, #16
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	0a1b      	lsrs	r3, r3, #8
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ef4:	b2da      	uxtb	r2, r3
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	0d9b      	lsrs	r3, r3, #22
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d11a      	bne.n	8007f46 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 f9a9 	bl	800826c <RTC_Bcd2ToByte>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	785b      	ldrb	r3, [r3, #1]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 f9a0 	bl	800826c <RTC_Bcd2ToByte>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	461a      	mov	r2, r3
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	789b      	ldrb	r3, [r3, #2]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 f997 	bl	800826c <RTC_Bcd2ToByte>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	461a      	mov	r2, r3
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3718      	adds	r7, #24
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	007f7f7f 	.word	0x007f7f7f

08007f54 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007f54:	b590      	push	{r4, r7, lr}
 8007f56:	b087      	sub	sp, #28
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d101      	bne.n	8007f6e <HAL_RTC_SetDate+0x1a>
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	e073      	b.n	8008056 <HAL_RTC_SetDate+0x102>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2202      	movs	r2, #2
 8007f7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10e      	bne.n	8007fa2 <HAL_RTC_SetDate+0x4e>
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	785b      	ldrb	r3, [r3, #1]
 8007f88:	f003 0310 	and.w	r3, r3, #16
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d008      	beq.n	8007fa2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	785b      	ldrb	r3, [r3, #1]
 8007f94:	f023 0310 	bic.w	r3, r3, #16
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	330a      	adds	r3, #10
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d11c      	bne.n	8007fe2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	78db      	ldrb	r3, [r3, #3]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 f93d 	bl	800822c <RTC_ByteToBcd2>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	785b      	ldrb	r3, [r3, #1]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 f936 	bl	800822c <RTC_ByteToBcd2>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007fc4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	789b      	ldrb	r3, [r3, #2]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 f92e 	bl	800822c <RTC_ByteToBcd2>
 8007fd0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007fd2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	617b      	str	r3, [r7, #20]
 8007fe0:	e00e      	b.n	8008000 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	78db      	ldrb	r3, [r3, #3]
 8007fe6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	785b      	ldrb	r3, [r3, #1]
 8007fec:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007fee:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007ff4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	22ca      	movs	r2, #202	@ 0xca
 8008006:	625a      	str	r2, [r3, #36]	@ 0x24
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2253      	movs	r2, #83	@ 0x53
 800800e:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f000 f899 	bl	8008148 <RTC_EnterInitMode>
 8008016:	4603      	mov	r3, r0
 8008018:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800801a:	7cfb      	ldrb	r3, [r7, #19]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10a      	bne.n	8008036 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	6979      	ldr	r1, [r7, #20]
 8008026:	4b0e      	ldr	r3, [pc, #56]	@ (8008060 <HAL_RTC_SetDate+0x10c>)
 8008028:	400b      	ands	r3, r1
 800802a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f000 f8bf 	bl	80081b0 <RTC_ExitInitMode>
 8008032:	4603      	mov	r3, r0
 8008034:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	22ff      	movs	r2, #255	@ 0xff
 800803c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800803e:	7cfb      	ldrb	r3, [r7, #19]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d103      	bne.n	800804c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008054:	7cfb      	ldrb	r3, [r7, #19]


}
 8008056:	4618      	mov	r0, r3
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	bd90      	pop	{r4, r7, pc}
 800805e:	bf00      	nop
 8008060:	00ffff3f 	.word	0x00ffff3f

08008064 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	685a      	ldr	r2, [r3, #4]
 8008076:	4b21      	ldr	r3, [pc, #132]	@ (80080fc <HAL_RTC_GetDate+0x98>)
 8008078:	4013      	ands	r3, r2
 800807a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	0c1b      	lsrs	r3, r3, #16
 8008080:	b2da      	uxtb	r2, r3
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	0a1b      	lsrs	r3, r3, #8
 800808a:	b2db      	uxtb	r3, r3
 800808c:	f003 031f 	and.w	r3, r3, #31
 8008090:	b2da      	uxtb	r2, r3
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	b2db      	uxtb	r3, r3
 800809a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	0b5b      	lsrs	r3, r3, #13
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	f003 0307 	and.w	r3, r3, #7
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d11a      	bne.n	80080f0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	78db      	ldrb	r3, [r3, #3]
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 f8d4 	bl	800826c <RTC_Bcd2ToByte>
 80080c4:	4603      	mov	r3, r0
 80080c6:	461a      	mov	r2, r3
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	785b      	ldrb	r3, [r3, #1]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 f8cb 	bl	800826c <RTC_Bcd2ToByte>
 80080d6:	4603      	mov	r3, r0
 80080d8:	461a      	mov	r2, r3
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	789b      	ldrb	r3, [r3, #2]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 f8c2 	bl	800826c <RTC_Bcd2ToByte>
 80080e8:	4603      	mov	r3, r0
 80080ea:	461a      	mov	r2, r3
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	00ffff3f 	.word	0x00ffff3f

08008100 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a0d      	ldr	r2, [pc, #52]	@ (8008144 <HAL_RTC_WaitForSynchro+0x44>)
 800810e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8008110:	f7f8 fef8 	bl	8000f04 <HAL_GetTick>
 8008114:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008116:	e009      	b.n	800812c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008118:	f7f8 fef4 	bl	8000f04 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008126:	d901      	bls.n	800812c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e007      	b.n	800813c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	f003 0320 	and.w	r3, r3, #32
 8008136:	2b00      	cmp	r3, #0
 8008138:	d0ee      	beq.n	8008118 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	0003ff5f 	.word	0x0003ff5f

08008148 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008150:	2300      	movs	r3, #0
 8008152:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800815e:	2b00      	cmp	r3, #0
 8008160:	d120      	bne.n	80081a4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f04f 32ff 	mov.w	r2, #4294967295
 800816a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800816c:	f7f8 feca 	bl	8000f04 <HAL_GetTick>
 8008170:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008172:	e00d      	b.n	8008190 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008174:	f7f8 fec6 	bl	8000f04 <HAL_GetTick>
 8008178:	4602      	mov	r2, r0
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008182:	d905      	bls.n	8008190 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2203      	movs	r2, #3
 800818c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800819a:	2b00      	cmp	r3, #0
 800819c:	d102      	bne.n	80081a4 <RTC_EnterInitMode+0x5c>
 800819e:	7bfb      	ldrb	r3, [r7, #15]
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	d1e7      	bne.n	8008174 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
	...

080081b0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80081bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008228 <RTC_ExitInitMode+0x78>)
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	4a19      	ldr	r2, [pc, #100]	@ (8008228 <RTC_ExitInitMode+0x78>)
 80081c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081c6:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80081c8:	4b17      	ldr	r3, [pc, #92]	@ (8008228 <RTC_ExitInitMode+0x78>)
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f003 0320 	and.w	r3, r3, #32
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10c      	bne.n	80081ee <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff ff93 	bl	8008100 <HAL_RTC_WaitForSynchro>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d01e      	beq.n	800821e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2203      	movs	r2, #3
 80081e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	73fb      	strb	r3, [r7, #15]
 80081ec:	e017      	b.n	800821e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80081ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008228 <RTC_ExitInitMode+0x78>)
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	4a0d      	ldr	r2, [pc, #52]	@ (8008228 <RTC_ExitInitMode+0x78>)
 80081f4:	f023 0320 	bic.w	r3, r3, #32
 80081f8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7ff ff80 	bl	8008100 <HAL_RTC_WaitForSynchro>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d005      	beq.n	8008212 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2203      	movs	r2, #3
 800820a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008212:	4b05      	ldr	r3, [pc, #20]	@ (8008228 <RTC_ExitInitMode+0x78>)
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	4a04      	ldr	r2, [pc, #16]	@ (8008228 <RTC_ExitInitMode+0x78>)
 8008218:	f043 0320 	orr.w	r3, r3, #32
 800821c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800821e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	58004000 	.word	0x58004000

0800822c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	4603      	mov	r3, r0
 8008234:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800823a:	79fb      	ldrb	r3, [r7, #7]
 800823c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800823e:	e005      	b.n	800824c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3301      	adds	r3, #1
 8008244:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8008246:	7afb      	ldrb	r3, [r7, #11]
 8008248:	3b0a      	subs	r3, #10
 800824a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800824c:	7afb      	ldrb	r3, [r7, #11]
 800824e:	2b09      	cmp	r3, #9
 8008250:	d8f6      	bhi.n	8008240 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	b2db      	uxtb	r3, r3
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	b2da      	uxtb	r2, r3
 800825a:	7afb      	ldrb	r3, [r7, #11]
 800825c:	4313      	orrs	r3, r2
 800825e:	b2db      	uxtb	r3, r3
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	4603      	mov	r3, r0
 8008274:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008276:	79fb      	ldrb	r3, [r7, #7]
 8008278:	091b      	lsrs	r3, r3, #4
 800827a:	b2db      	uxtb	r3, r3
 800827c:	461a      	mov	r2, r3
 800827e:	0092      	lsls	r2, r2, #2
 8008280:	4413      	add	r3, r2
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8008286:	79fb      	ldrb	r3, [r7, #7]
 8008288:	f003 030f 	and.w	r3, r3, #15
 800828c:	b2da      	uxtb	r2, r3
 800828e:	7bfb      	ldrb	r3, [r7, #15]
 8008290:	4413      	add	r3, r2
 8008292:	b2db      	uxtb	r3, r3
}
 8008294:	4618      	mov	r0, r3
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08a      	sub	sp, #40	@ 0x28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e075      	b.n	800839e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d105      	bne.n	80082ca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f90b 	bl	80084e0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2204      	movs	r2, #4
 80082ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f868 	bl	80083a8 <HAL_SD_InitCard>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e05d      	b.n	800839e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80082e2:	f107 0308 	add.w	r3, r7, #8
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fdbf 	bl	8008e6c <HAL_SD_GetCardStatus>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e052      	b.n	800839e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80082f8:	7e3b      	ldrb	r3, [r7, #24]
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80082fe:	7e7b      	ldrb	r3, [r7, #25]
 8008300:	b2db      	uxtb	r3, r3
 8008302:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008308:	2b01      	cmp	r3, #1
 800830a:	d10a      	bne.n	8008322 <HAL_SD_Init+0x82>
 800830c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830e:	2b00      	cmp	r3, #0
 8008310:	d102      	bne.n	8008318 <HAL_SD_Init+0x78>
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d004      	beq.n	8008322 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800831e:	659a      	str	r2, [r3, #88]	@ 0x58
 8008320:	e00b      	b.n	800833a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008326:	2b01      	cmp	r3, #1
 8008328:	d104      	bne.n	8008334 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008330:	659a      	str	r2, [r3, #88]	@ 0x58
 8008332:	e002      	b.n	800833a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fe7d 	bl	8009040 <HAL_SD_ConfigWideBusOperation>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e026      	b.n	800839e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008350:	f7f8 fdd8 	bl	8000f04 <HAL_GetTick>
 8008354:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008356:	e011      	b.n	800837c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008358:	f7f8 fdd4 	bl	8000f04 <HAL_GetTick>
 800835c:	4602      	mov	r2, r0
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008366:	d109      	bne.n	800837c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800836e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e010      	b.n	800839e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f001 f82d 	bl	80093dc <HAL_SD_GetCardState>
 8008382:	4603      	mov	r3, r0
 8008384:	2b04      	cmp	r3, #4
 8008386:	d1e7      	bne.n	8008358 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3728      	adds	r7, #40	@ 0x28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80083a8:	b590      	push	{r4, r7, lr}
 80083aa:	b08d      	sub	sp, #52	@ 0x34
 80083ac:	af02      	add	r7, sp, #8
 80083ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80083b4:	2300      	movs	r3, #0
 80083b6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80083b8:	2300      	movs	r3, #0
 80083ba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80083bc:	2300      	movs	r3, #0
 80083be:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80083c0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80083c4:	f04f 0100 	mov.w	r1, #0
 80083c8:	f7fe f954 	bl	8006674 <HAL_RCCEx_GetPeriphCLKFreq>
 80083cc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80083ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d109      	bne.n	80083e8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80083e2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e070      	b.n	80084ca <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80083e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ea:	0a1b      	lsrs	r3, r3, #8
 80083ec:	4a39      	ldr	r2, [pc, #228]	@ (80084d4 <HAL_SD_InitCard+0x12c>)
 80083ee:	fba2 2303 	umull	r2, r3, r2, r3
 80083f2:	091b      	lsrs	r3, r3, #4
 80083f4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681c      	ldr	r4, [r3, #0]
 80083fa:	466a      	mov	r2, sp
 80083fc:	f107 0318 	add.w	r3, r7, #24
 8008400:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008404:	e882 0003 	stmia.w	r2, {r0, r1}
 8008408:	f107 030c 	add.w	r3, r7, #12
 800840c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800840e:	4620      	mov	r0, r4
 8008410:	f002 fa2e 	bl	800a870 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4618      	mov	r0, r3
 800841a:	f002 fa71 	bl	800a900 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d005      	beq.n	8008430 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	005b      	lsls	r3, r3, #1
 8008428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800842a:	fbb2 f3f3 	udiv	r3, r2, r3
 800842e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008432:	2b00      	cmp	r3, #0
 8008434:	d007      	beq.n	8008446 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008436:	4a28      	ldr	r2, [pc, #160]	@ (80084d8 <HAL_SD_InitCard+0x130>)
 8008438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843a:	fbb2 f3f3 	udiv	r3, r2, r3
 800843e:	3301      	adds	r3, #1
 8008440:	4618      	mov	r0, r3
 8008442:	f7f8 fd6b 	bl	8000f1c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f001 f8b6 	bl	80095b8 <SD_PowerON>
 800844c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00b      	beq.n	800846c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008460:	6a3b      	ldr	r3, [r7, #32]
 8008462:	431a      	orrs	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e02e      	b.n	80084ca <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 ffd5 	bl	800941c <SD_InitCard>
 8008472:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00b      	beq.n	8008492 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	431a      	orrs	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e01b      	b.n	80084ca <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800849a:	4618      	mov	r0, r3
 800849c:	f002 fac6 	bl	800aa2c <SDMMC_CmdBlockLength>
 80084a0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80084a2:	6a3b      	ldr	r3, [r7, #32]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00f      	beq.n	80084c8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a0b      	ldr	r2, [pc, #44]	@ (80084dc <HAL_SD_InitCard+0x134>)
 80084ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	431a      	orrs	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e000      	b.n	80084ca <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	372c      	adds	r7, #44	@ 0x2c
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd90      	pop	{r4, r7, pc}
 80084d2:	bf00      	nop
 80084d4:	014f8b59 	.word	0x014f8b59
 80084d8:	00012110 	.word	0x00012110
 80084dc:	1fe00fff 	.word	0x1fe00fff

080084e0 <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b092      	sub	sp, #72	@ 0x48
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
 8008500:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008502:	f7f8 fcff 	bl	8000f04 <HAL_GetTick>
 8008506:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d107      	bne.n	8008526 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800851a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e167      	b.n	80087f6 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b01      	cmp	r3, #1
 8008530:	f040 815a 	bne.w	80087e8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800853a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	441a      	add	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008544:	429a      	cmp	r2, r3
 8008546:	d907      	bls.n	8008558 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800854c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e14e      	b.n	80087f6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2203      	movs	r2, #3
 800855c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2200      	movs	r2, #0
 8008566:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800856c:	2b01      	cmp	r3, #1
 800856e:	d002      	beq.n	8008576 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008572:	025b      	lsls	r3, r3, #9
 8008574:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008576:	f04f 33ff 	mov.w	r3, #4294967295
 800857a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	025b      	lsls	r3, r3, #9
 8008580:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008582:	2390      	movs	r3, #144	@ 0x90
 8008584:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008586:	2302      	movs	r3, #2
 8008588:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800858a:	2300      	movs	r3, #0
 800858c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800858e:	2300      	movs	r3, #0
 8008590:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f107 0214 	add.w	r2, r7, #20
 800859a:	4611      	mov	r1, r2
 800859c:	4618      	mov	r0, r3
 800859e:	f002 fa19 	bl	800a9d4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68da      	ldr	r2, [r3, #12]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085b0:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d90a      	bls.n	80085ce <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2202      	movs	r2, #2
 80085bc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80085c4:	4618      	mov	r0, r3
 80085c6:	f002 fa77 	bl	800aab8 <SDMMC_CmdReadMultiBlock>
 80085ca:	6478      	str	r0, [r7, #68]	@ 0x44
 80085cc:	e009      	b.n	80085e2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2201      	movs	r2, #1
 80085d2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80085da:	4618      	mov	r0, r3
 80085dc:	f002 fa49 	bl	800aa72 <SDMMC_CmdReadSingleBlock>
 80085e0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80085e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d012      	beq.n	800860e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a84      	ldr	r2, [pc, #528]	@ (8008800 <HAL_SD_ReadBlocks+0x30c>)
 80085ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085f6:	431a      	orrs	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e0f3      	b.n	80087f6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008612:	e058      	b.n	80086c6 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800861a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d033      	beq.n	800868a <HAL_SD_ReadBlocks+0x196>
 8008622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008624:	2b1f      	cmp	r3, #31
 8008626:	d930      	bls.n	800868a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8008628:	2300      	movs	r3, #0
 800862a:	643b      	str	r3, [r7, #64]	@ 0x40
 800862c:	e027      	b.n	800867e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4618      	mov	r0, r3
 8008634:	f002 f946 	bl	800a8c4 <SDMMC_ReadFIFO>
 8008638:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800863a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863c:	b2da      	uxtb	r2, r3
 800863e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008640:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008644:	3301      	adds	r3, #1
 8008646:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864a:	0a1b      	lsrs	r3, r3, #8
 800864c:	b2da      	uxtb	r2, r3
 800864e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008650:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008654:	3301      	adds	r3, #1
 8008656:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865a:	0c1b      	lsrs	r3, r3, #16
 800865c:	b2da      	uxtb	r2, r3
 800865e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008660:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008664:	3301      	adds	r3, #1
 8008666:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800866a:	0e1b      	lsrs	r3, r3, #24
 800866c:	b2da      	uxtb	r2, r3
 800866e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008670:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008674:	3301      	adds	r3, #1
 8008676:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 8008678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800867a:	3301      	adds	r3, #1
 800867c:	643b      	str	r3, [r7, #64]	@ 0x40
 800867e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008680:	2b07      	cmp	r3, #7
 8008682:	d9d4      	bls.n	800862e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008686:	3b20      	subs	r3, #32
 8008688:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800868a:	f7f8 fc3b 	bl	8000f04 <HAL_GetTick>
 800868e:	4602      	mov	r2, r0
 8008690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008696:	429a      	cmp	r2, r3
 8008698:	d902      	bls.n	80086a0 <HAL_SD_ReadBlocks+0x1ac>
 800869a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800869c:	2b00      	cmp	r3, #0
 800869e:	d112      	bne.n	80086c6 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a56      	ldr	r2, [pc, #344]	@ (8008800 <HAL_SD_ReadBlocks+0x30c>)
 80086a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e097      	b.n	80087f6 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086cc:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d09f      	beq.n	8008614 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68da      	ldr	r2, [r3, #12]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086e2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d022      	beq.n	8008738 <HAL_SD_ReadBlocks+0x244>
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d91f      	bls.n	8008738 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d01b      	beq.n	8008738 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4618      	mov	r0, r3
 8008706:	f002 fa41 	bl	800ab8c <SDMMC_CmdStopTransfer>
 800870a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800870c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800870e:	2b00      	cmp	r3, #0
 8008710:	d012      	beq.n	8008738 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a3a      	ldr	r2, [pc, #232]	@ (8008800 <HAL_SD_ReadBlocks+0x30c>)
 8008718:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800871e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008720:	431a      	orrs	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e05e      	b.n	80087f6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800873e:	f003 0308 	and.w	r3, r3, #8
 8008742:	2b00      	cmp	r3, #0
 8008744:	d012      	beq.n	800876c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a2d      	ldr	r2, [pc, #180]	@ (8008800 <HAL_SD_ReadBlocks+0x30c>)
 800874c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008752:	f043 0208 	orr.w	r2, r3, #8
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e044      	b.n	80087f6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008772:	f003 0302 	and.w	r3, r3, #2
 8008776:	2b00      	cmp	r3, #0
 8008778:	d012      	beq.n	80087a0 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a20      	ldr	r2, [pc, #128]	@ (8008800 <HAL_SD_ReadBlocks+0x30c>)
 8008780:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008786:	f043 0202 	orr.w	r2, r3, #2
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2200      	movs	r2, #0
 800879a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e02a      	b.n	80087f6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087a6:	f003 0320 	and.w	r3, r3, #32
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d012      	beq.n	80087d4 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a13      	ldr	r2, [pc, #76]	@ (8008800 <HAL_SD_ReadBlocks+0x30c>)
 80087b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087ba:	f043 0220 	orr.w	r2, r3, #32
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e010      	b.n	80087f6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a0a      	ldr	r2, [pc, #40]	@ (8008804 <HAL_SD_ReadBlocks+0x310>)
 80087da:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 80087e4:	2300      	movs	r3, #0
 80087e6:	e006      	b.n	80087f6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087ec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
  }
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3748      	adds	r7, #72	@ 0x48
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	1fe00fff 	.word	0x1fe00fff
 8008804:	18000f3a 	.word	0x18000f3a

08008808 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b092      	sub	sp, #72	@ 0x48
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
 8008814:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008816:	f7f8 fb75 	bl	8000f04 <HAL_GetTick>
 800881a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d107      	bne.n	800883a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800882e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e16b      	b.n	8008b12 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b01      	cmp	r3, #1
 8008844:	f040 815e 	bne.w	8008b04 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800884e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	441a      	add	r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008858:	429a      	cmp	r2, r3
 800885a:	d907      	bls.n	800886c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008860:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e152      	b.n	8008b12 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2203      	movs	r2, #3
 8008870:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2200      	movs	r2, #0
 800887a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008880:	2b01      	cmp	r3, #1
 8008882:	d002      	beq.n	800888a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008886:	025b      	lsls	r3, r3, #9
 8008888:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800888a:	f04f 33ff 	mov.w	r3, #4294967295
 800888e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	025b      	lsls	r3, r3, #9
 8008894:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008896:	2390      	movs	r3, #144	@ 0x90
 8008898:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800889a:	2300      	movs	r3, #0
 800889c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800889e:	2300      	movs	r3, #0
 80088a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80088a2:	2300      	movs	r3, #0
 80088a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f107 0218 	add.w	r2, r7, #24
 80088ae:	4611      	mov	r1, r2
 80088b0:	4618      	mov	r0, r3
 80088b2:	f002 f88f 	bl	800a9d4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68da      	ldr	r2, [r3, #12]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088c4:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d90a      	bls.n	80088e2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2220      	movs	r2, #32
 80088d0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80088d8:	4618      	mov	r0, r3
 80088da:	f002 f933 	bl	800ab44 <SDMMC_CmdWriteMultiBlock>
 80088de:	6478      	str	r0, [r7, #68]	@ 0x44
 80088e0:	e009      	b.n	80088f6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2210      	movs	r2, #16
 80088e6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80088ee:	4618      	mov	r0, r3
 80088f0:	f002 f905 	bl	800aafe <SDMMC_CmdWriteSingleBlock>
 80088f4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80088f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d012      	beq.n	8008922 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a86      	ldr	r2, [pc, #536]	@ (8008b1c <HAL_SD_WriteBlocks+0x314>)
 8008902:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800890a:	431a      	orrs	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e0f7      	b.n	8008b12 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008926:	e05c      	b.n	80089e2 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800892e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008932:	2b00      	cmp	r3, #0
 8008934:	d037      	beq.n	80089a6 <HAL_SD_WriteBlocks+0x19e>
 8008936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008938:	2b1f      	cmp	r3, #31
 800893a:	d934      	bls.n	80089a6 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800893c:	2300      	movs	r3, #0
 800893e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008940:	e02b      	b.n	800899a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8008942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800894a:	3301      	adds	r3, #1
 800894c:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800894e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	021a      	lsls	r2, r3, #8
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	4313      	orrs	r3, r2
 8008958:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800895a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800895c:	3301      	adds	r3, #1
 800895e:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	041a      	lsls	r2, r3, #16
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	4313      	orrs	r3, r2
 800896a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800896c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800896e:	3301      	adds	r3, #1
 8008970:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	061a      	lsls	r2, r3, #24
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	4313      	orrs	r3, r2
 800897c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800897e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008980:	3301      	adds	r3, #1
 8008982:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f107 0214 	add.w	r2, r7, #20
 800898c:	4611      	mov	r1, r2
 800898e:	4618      	mov	r0, r3
 8008990:	f001 ffa5 	bl	800a8de <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8008994:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008996:	3301      	adds	r3, #1
 8008998:	643b      	str	r3, [r7, #64]	@ 0x40
 800899a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800899c:	2b07      	cmp	r3, #7
 800899e:	d9d0      	bls.n	8008942 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80089a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089a2:	3b20      	subs	r3, #32
 80089a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80089a6:	f7f8 faad 	bl	8000f04 <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d902      	bls.n	80089bc <HAL_SD_WriteBlocks+0x1b4>
 80089b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d112      	bne.n	80089e2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a56      	ldr	r2, [pc, #344]	@ (8008b1c <HAL_SD_WriteBlocks+0x314>)
 80089c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089ca:	431a      	orrs	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	e097      	b.n	8008b12 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089e8:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d09b      	beq.n	8008928 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68da      	ldr	r2, [r3, #12]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089fe:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d022      	beq.n	8008a54 <HAL_SD_WriteBlocks+0x24c>
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d91f      	bls.n	8008a54 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a18:	2b03      	cmp	r3, #3
 8008a1a:	d01b      	beq.n	8008a54 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4618      	mov	r0, r3
 8008a22:	f002 f8b3 	bl	800ab8c <SDMMC_CmdStopTransfer>
 8008a26:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008a28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d012      	beq.n	8008a54 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a3a      	ldr	r2, [pc, #232]	@ (8008b1c <HAL_SD_WriteBlocks+0x314>)
 8008a34:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a3c:	431a      	orrs	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e05e      	b.n	8008b12 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a5a:	f003 0308 	and.w	r3, r3, #8
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d012      	beq.n	8008a88 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a2d      	ldr	r2, [pc, #180]	@ (8008b1c <HAL_SD_WriteBlocks+0x314>)
 8008a68:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a6e:	f043 0208 	orr.w	r2, r3, #8
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e044      	b.n	8008b12 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a8e:	f003 0302 	and.w	r3, r3, #2
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d012      	beq.n	8008abc <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a20      	ldr	r2, [pc, #128]	@ (8008b1c <HAL_SD_WriteBlocks+0x314>)
 8008a9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aa2:	f043 0202 	orr.w	r2, r3, #2
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2201      	movs	r2, #1
 8008aae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e02a      	b.n	8008b12 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ac2:	f003 0310 	and.w	r3, r3, #16
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d012      	beq.n	8008af0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a13      	ldr	r2, [pc, #76]	@ (8008b1c <HAL_SD_WriteBlocks+0x314>)
 8008ad0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ad6:	f043 0210 	orr.w	r2, r3, #16
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e010      	b.n	8008b12 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a0a      	ldr	r2, [pc, #40]	@ (8008b20 <HAL_SD_WriteBlocks+0x318>)
 8008af6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	e006      	b.n	8008b12 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b08:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
  }
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3748      	adds	r7, #72	@ 0x48
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	1fe00fff 	.word	0x1fe00fff
 8008b20:	18000f3a 	.word	0x18000f3a

08008b24 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b32:	0f9b      	lsrs	r3, r3, #30
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b3e:	0e9b      	lsrs	r3, r3, #26
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	f003 030f 	and.w	r3, r3, #15
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b50:	0e1b      	lsrs	r3, r3, #24
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	f003 0303 	and.w	r3, r3, #3
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b62:	0c1b      	lsrs	r3, r3, #16
 8008b64:	b2da      	uxtb	r2, r3
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b6e:	0a1b      	lsrs	r3, r3, #8
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b84:	0d1b      	lsrs	r3, r3, #20
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b90:	0c1b      	lsrs	r3, r3, #16
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	f003 030f 	and.w	r3, r3, #15
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ba2:	0bdb      	lsrs	r3, r3, #15
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bb4:	0b9b      	lsrs	r3, r3, #14
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bc6:	0b5b      	lsrs	r3, r3, #13
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bd8:	0b1b      	lsrs	r3, r3, #12
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	b2da      	uxtb	r2, r3
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	2200      	movs	r2, #0
 8008bea:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d163      	bne.n	8008cbc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bf8:	009a      	lsls	r2, r3, #2
 8008bfa:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008bfe:	4013      	ands	r3, r2
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8008c04:	0f92      	lsrs	r2, r2, #30
 8008c06:	431a      	orrs	r2, r3
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c10:	0edb      	lsrs	r3, r3, #27
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	f003 0307 	and.w	r3, r3, #7
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c22:	0e1b      	lsrs	r3, r3, #24
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	f003 0307 	and.w	r3, r3, #7
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c34:	0d5b      	lsrs	r3, r3, #21
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c46:	0c9b      	lsrs	r3, r3, #18
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	f003 0307 	and.w	r3, r3, #7
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c58:	0bdb      	lsrs	r3, r3, #15
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	f003 0307 	and.w	r3, r3, #7
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	7e1b      	ldrb	r3, [r3, #24]
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	f003 0307 	and.w	r3, r3, #7
 8008c7a:	3302      	adds	r3, #2
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008c86:	fb03 f202 	mul.w	r2, r3, r2
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	7a1b      	ldrb	r3, [r3, #8]
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	f003 030f 	and.w	r3, r3, #15
 8008c98:	2201      	movs	r2, #1
 8008c9a:	409a      	lsls	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008ca8:	0a52      	lsrs	r2, r2, #9
 8008caa:	fb03 f202 	mul.w	r2, r3, r2
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cb8:	655a      	str	r2, [r3, #84]	@ 0x54
 8008cba:	e031      	b.n	8008d20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d11d      	bne.n	8008d00 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cc8:	041b      	lsls	r3, r3, #16
 8008cca:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cd2:	0c1b      	lsrs	r3, r3, #16
 8008cd4:	431a      	orrs	r2, r3
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	029a      	lsls	r2, r3, #10
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cf4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	655a      	str	r2, [r3, #84]	@ 0x54
 8008cfe:	e00f      	b.n	8008d20 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a58      	ldr	r2, [pc, #352]	@ (8008e68 <HAL_SD_GetCardCSD+0x344>)
 8008d06:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d0c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e09d      	b.n	8008e5c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d24:	0b9b      	lsrs	r3, r3, #14
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	f003 0301 	and.w	r3, r3, #1
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d36:	09db      	lsrs	r3, r3, #7
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d4e:	b2da      	uxtb	r2, r3
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d58:	0fdb      	lsrs	r3, r3, #31
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d64:	0f5b      	lsrs	r3, r3, #29
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	f003 0303 	and.w	r3, r3, #3
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d76:	0e9b      	lsrs	r3, r3, #26
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	f003 0307 	and.w	r3, r3, #7
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d88:	0d9b      	lsrs	r3, r3, #22
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	f003 030f 	and.w	r3, r3, #15
 8008d90:	b2da      	uxtb	r2, r3
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d9a:	0d5b      	lsrs	r3, r3, #21
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008db6:	0c1b      	lsrs	r3, r3, #16
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	b2da      	uxtb	r2, r3
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dca:	0bdb      	lsrs	r3, r3, #15
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dde:	0b9b      	lsrs	r3, r3, #14
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	b2da      	uxtb	r2, r3
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008df2:	0b5b      	lsrs	r3, r3, #13
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e06:	0b1b      	lsrs	r3, r3, #12
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e1a:	0a9b      	lsrs	r3, r3, #10
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	f003 0303 	and.w	r3, r3, #3
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e2e:	0a1b      	lsrs	r3, r3, #8
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	f003 0303 	and.w	r3, r3, #3
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e42:	085b      	lsrs	r3, r3, #1
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	1fe00fff 	.word	0x1fe00fff

08008e6c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b094      	sub	sp, #80	@ 0x50
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	2b03      	cmp	r3, #3
 8008e86:	d101      	bne.n	8008e8c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e0a7      	b.n	8008fdc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008e8c:	f107 0308 	add.w	r3, r7, #8
 8008e90:	4619      	mov	r1, r3
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fc1e 	bl	80096d4 <SD_SendSDStatus>
 8008e98:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d011      	beq.n	8008ec4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a4f      	ldr	r2, [pc, #316]	@ (8008fe4 <HAL_SD_GetCardStatus+0x178>)
 8008ea6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008eac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8008ec2:	e070      	b.n	8008fa6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	099b      	lsrs	r3, r3, #6
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	f003 0303 	and.w	r3, r3, #3
 8008ece:	b2da      	uxtb	r2, r3
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	095b      	lsrs	r3, r3, #5
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	0a1b      	lsrs	r3, r3, #8
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	0e1b      	lsrs	r3, r3, #24
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	061a      	lsls	r2, r3, #24
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	021b      	lsls	r3, r3, #8
 8008f06:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008f0a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	0a1b      	lsrs	r3, r3, #8
 8008f10:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008f14:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	0e1b      	lsrs	r3, r3, #24
 8008f1a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	b2da      	uxtb	r2, r3
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	0a1b      	lsrs	r3, r3, #8
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	0d1b      	lsrs	r3, r3, #20
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	f003 030f 	and.w	r3, r3, #15
 8008f3c:	b2da      	uxtb	r2, r3
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	0c1b      	lsrs	r3, r3, #16
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	4313      	orrs	r3, r2
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	0a9b      	lsrs	r3, r3, #10
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	0a1b      	lsrs	r3, r3, #8
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	f003 0303 	and.w	r3, r3, #3
 8008f78:	b2da      	uxtb	r2, r3
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	091b      	lsrs	r3, r3, #4
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	f003 030f 	and.w	r3, r3, #15
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	f003 030f 	and.w	r3, r3, #15
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	0e1b      	lsrs	r3, r3, #24
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f001 fd3c 	bl	800aa2c <SDMMC_CmdBlockLength>
 8008fb4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00d      	beq.n	8008fd8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a08      	ldr	r2, [pc, #32]	@ (8008fe4 <HAL_SD_GetCardStatus+0x178>)
 8008fc2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fc8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8008fd8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3750      	adds	r7, #80	@ 0x50
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	1fe00fff 	.word	0x1fe00fff

08008fe8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009040:	b590      	push	{r4, r7, lr}
 8009042:	b08d      	sub	sp, #52	@ 0x34
 8009044:	af02      	add	r7, sp, #8
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800904a:	2300      	movs	r3, #0
 800904c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2203      	movs	r2, #3
 8009054:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800905c:	2b03      	cmp	r3, #3
 800905e:	d02e      	beq.n	80090be <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009066:	d106      	bne.n	8009076 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800906c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	635a      	str	r2, [r3, #52]	@ 0x34
 8009074:	e029      	b.n	80090ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800907c:	d10a      	bne.n	8009094 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fc20 	bl	80098c4 <SD_WideBus_Enable>
 8009084:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800908a:	6a3b      	ldr	r3, [r7, #32]
 800908c:	431a      	orrs	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	635a      	str	r2, [r3, #52]	@ 0x34
 8009092:	e01a      	b.n	80090ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10a      	bne.n	80090b0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fc5d 	bl	800995a <SD_WideBus_Disable>
 80090a0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090a6:	6a3b      	ldr	r3, [r7, #32]
 80090a8:	431a      	orrs	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80090ae:	e00c      	b.n	80090ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090b4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80090bc:	e005      	b.n	80090ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090c2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d007      	beq.n	80090e2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a5f      	ldr	r2, [pc, #380]	@ (8009254 <HAL_SD_ConfigWideBusOperation+0x214>)
 80090d8:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80090e0:	e096      	b.n	8009210 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80090e2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80090e6:	f04f 0100 	mov.w	r1, #0
 80090ea:	f7fd fac3 	bl	8006674 <HAL_RCCEx_GetPeriphCLKFreq>
 80090ee:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 8083 	beq.w	80091fe <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	695a      	ldr	r2, [r3, #20]
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	4950      	ldr	r1, [pc, #320]	@ (8009258 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009116:	fba1 1303 	umull	r1, r3, r1, r3
 800911a:	0e1b      	lsrs	r3, r3, #24
 800911c:	429a      	cmp	r2, r3
 800911e:	d303      	bcc.n	8009128 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	695b      	ldr	r3, [r3, #20]
 8009124:	61bb      	str	r3, [r7, #24]
 8009126:	e05a      	b.n	80091de <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800912c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009130:	d103      	bne.n	800913a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	61bb      	str	r3, [r7, #24]
 8009138:	e051      	b.n	80091de <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800913e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009142:	d126      	bne.n	8009192 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	695b      	ldr	r3, [r3, #20]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10e      	bne.n	800916a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	4a43      	ldr	r2, [pc, #268]	@ (800925c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d906      	bls.n	8009162 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	4a40      	ldr	r2, [pc, #256]	@ (8009258 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009158:	fba2 2303 	umull	r2, r3, r2, r3
 800915c:	0e5b      	lsrs	r3, r3, #25
 800915e:	61bb      	str	r3, [r7, #24]
 8009160:	e03d      	b.n	80091de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	695b      	ldr	r3, [r3, #20]
 8009166:	61bb      	str	r3, [r7, #24]
 8009168:	e039      	b.n	80091de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	005b      	lsls	r3, r3, #1
 8009170:	69fa      	ldr	r2, [r7, #28]
 8009172:	fbb2 f3f3 	udiv	r3, r2, r3
 8009176:	4a39      	ldr	r2, [pc, #228]	@ (800925c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d906      	bls.n	800918a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	4a36      	ldr	r2, [pc, #216]	@ (8009258 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009180:	fba2 2303 	umull	r2, r3, r2, r3
 8009184:	0e5b      	lsrs	r3, r3, #25
 8009186:	61bb      	str	r3, [r7, #24]
 8009188:	e029      	b.n	80091de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	61bb      	str	r3, [r7, #24]
 8009190:	e025      	b.n	80091de <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10e      	bne.n	80091b8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	4a30      	ldr	r2, [pc, #192]	@ (8009260 <HAL_SD_ConfigWideBusOperation+0x220>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d906      	bls.n	80091b0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	4a2c      	ldr	r2, [pc, #176]	@ (8009258 <HAL_SD_ConfigWideBusOperation+0x218>)
 80091a6:	fba2 2303 	umull	r2, r3, r2, r3
 80091aa:	0e1b      	lsrs	r3, r3, #24
 80091ac:	61bb      	str	r3, [r7, #24]
 80091ae:	e016      	b.n	80091de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	695b      	ldr	r3, [r3, #20]
 80091b4:	61bb      	str	r3, [r7, #24]
 80091b6:	e012      	b.n	80091de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	695b      	ldr	r3, [r3, #20]
 80091bc:	005b      	lsls	r3, r3, #1
 80091be:	69fa      	ldr	r2, [r7, #28]
 80091c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c4:	4a26      	ldr	r2, [pc, #152]	@ (8009260 <HAL_SD_ConfigWideBusOperation+0x220>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d906      	bls.n	80091d8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	4a22      	ldr	r2, [pc, #136]	@ (8009258 <HAL_SD_ConfigWideBusOperation+0x218>)
 80091ce:	fba2 2303 	umull	r2, r3, r2, r3
 80091d2:	0e1b      	lsrs	r3, r3, #24
 80091d4:	61bb      	str	r3, [r7, #24]
 80091d6:	e002      	b.n	80091de <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	695b      	ldr	r3, [r3, #20]
 80091dc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681c      	ldr	r4, [r3, #0]
 80091e2:	466a      	mov	r2, sp
 80091e4:	f107 0314 	add.w	r3, r7, #20
 80091e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80091ec:	e882 0003 	stmia.w	r2, {r0, r1}
 80091f0:	f107 0308 	add.w	r3, r7, #8
 80091f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80091f6:	4620      	mov	r0, r4
 80091f8:	f001 fb3a 	bl	800a870 <SDMMC_Init>
 80091fc:	e008      	b.n	8009210 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009202:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009218:	4618      	mov	r0, r3
 800921a:	f001 fc07 	bl	800aa2c <SDMMC_CmdBlockLength>
 800921e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009220:	6a3b      	ldr	r3, [r7, #32]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00c      	beq.n	8009240 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a0a      	ldr	r2, [pc, #40]	@ (8009254 <HAL_SD_ConfigWideBusOperation+0x214>)
 800922c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	431a      	orrs	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8009248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800924c:	4618      	mov	r0, r3
 800924e:	372c      	adds	r7, #44	@ 0x2c
 8009250:	46bd      	mov	sp, r7
 8009252:	bd90      	pop	{r4, r7, pc}
 8009254:	1fe00fff 	.word	0x1fe00fff
 8009258:	55e63b89 	.word	0x55e63b89
 800925c:	02faf080 	.word	0x02faf080
 8009260:	017d7840 	.word	0x017d7840

08009264 <HAL_SD_ConfigSpeedBusOperation>:
  *            @arg SDMMC_SPEED_MODE_ULTRA: Ultra high speed mode
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_SD_ConfigSpeedBusOperation(SD_HandleTypeDef *hsd, uint32_t SpeedMode)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SDMMC_SPEED_MODE(SpeedMode));
  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2203      	movs	r2, #3
 8009276:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        status = HAL_ERROR;
        break;
    }
  }
#else
  switch (SpeedMode)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	2b02      	cmp	r3, #2
 800927e:	d027      	beq.n	80092d0 <HAL_SD_ConfigSpeedBusOperation+0x6c>
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2b02      	cmp	r3, #2
 8009284:	d85c      	bhi.n	8009340 <HAL_SD_ConfigSpeedBusOperation+0xdc>
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d003      	beq.n	8009294 <HAL_SD_ConfigSpeedBusOperation+0x30>
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d046      	beq.n	8009320 <HAL_SD_ConfigSpeedBusOperation+0xbc>
 8009292:	e055      	b.n	8009340 <HAL_SD_ConfigSpeedBusOperation+0xdc>
  {
    case SDMMC_SPEED_MODE_AUTO:
    {
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800929c:	d008      	beq.n	80092b0 <HAL_SD_ConfigSpeedBusOperation+0x4c>
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 80092a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092a6:	d003      	beq.n	80092b0 <HAL_SD_ConfigSpeedBusOperation+0x4c>
          (hsd->SdCard.CardType == CARD_SDHC_SDXC))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d150      	bne.n	8009352 <HAL_SD_ConfigSpeedBusOperation+0xee>
      {
        /* Enable High Speed */
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 80092b0:	4947      	ldr	r1, [pc, #284]	@ (80093d0 <HAL_SD_ConfigSpeedBusOperation+0x16c>)
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fc6c 	bl	8009b90 <SD_SwitchSpeed>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d049      	beq.n	8009352 <HAL_SD_ConfigSpeedBusOperation+0xee>
        {
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092c2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	635a      	str	r2, [r3, #52]	@ 0x34
          status = HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	75fb      	strb	r3, [r7, #23]
      }
      else
      {
        /*Nothing to do, Use defaultSpeed */
      }
      break;
 80092ce:	e040      	b.n	8009352 <HAL_SD_ConfigSpeedBusOperation+0xee>
    }
    case SDMMC_SPEED_MODE_HIGH:
    {
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092d8:	d008      	beq.n	80092ec <HAL_SD_ConfigSpeedBusOperation+0x88>
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 80092de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092e2:	d003      	beq.n	80092ec <HAL_SD_ConfigSpeedBusOperation+0x88>
          (hsd->SdCard.CardType == CARD_SDHC_SDXC))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d10f      	bne.n	800930c <HAL_SD_ConfigSpeedBusOperation+0xa8>
      {
        /* Enable High Speed */
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 80092ec:	4938      	ldr	r1, [pc, #224]	@ (80093d0 <HAL_SD_ConfigSpeedBusOperation+0x16c>)
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fc4e 	bl	8009b90 <SD_SwitchSpeed>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d011      	beq.n	800931e <HAL_SD_ConfigSpeedBusOperation+0xba>
        {
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092fe:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	635a      	str	r2, [r3, #52]	@ 0x34
          status = HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	75fb      	strb	r3, [r7, #23]
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 800930a:	e008      	b.n	800931e <HAL_SD_ConfigSpeedBusOperation+0xba>
        }
      }
      else
      {
        hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009310:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	635a      	str	r2, [r3, #52]	@ 0x34
        status = HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800931c:	e01c      	b.n	8009358 <HAL_SD_ConfigSpeedBusOperation+0xf4>
 800931e:	e01b      	b.n	8009358 <HAL_SD_ConfigSpeedBusOperation+0xf4>
    }
    case SDMMC_SPEED_MODE_DEFAULT:
    {
      /* Switch to default Speed */
      if (SD_SwitchSpeed(hsd, SDMMC_SDR12_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8009320:	492c      	ldr	r1, [pc, #176]	@ (80093d4 <HAL_SD_ConfigSpeedBusOperation+0x170>)
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fc34 	bl	8009b90 <SD_SwitchSpeed>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d013      	beq.n	8009356 <HAL_SD_ConfigSpeedBusOperation+0xf2>
      {
        hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009332:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	635a      	str	r2, [r3, #52]	@ 0x34
        status = HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	75fb      	strb	r3, [r7, #23]
      }

      break;
 800933e:	e00a      	b.n	8009356 <HAL_SD_ConfigSpeedBusOperation+0xf2>
    }
    case SDMMC_SPEED_MODE_ULTRA: /*not valid without transceiver*/
    default:
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009344:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	75fb      	strb	r3, [r7, #23]
      break;
 8009350:	e002      	b.n	8009358 <HAL_SD_ConfigSpeedBusOperation+0xf4>
      break;
 8009352:	bf00      	nop
 8009354:	e000      	b.n	8009358 <HAL_SD_ConfigSpeedBusOperation+0xf4>
      break;
 8009356:	bf00      	nop
  }
#endif /* USE_SD_TRANSCEIVER */

  /* Verify that SD card is ready to use after Speed mode switch*/
  tickstart = HAL_GetTick();
 8009358:	f7f7 fdd4 	bl	8000f04 <HAL_GetTick>
 800935c:	6138      	str	r0, [r7, #16]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800935e:	e011      	b.n	8009384 <HAL_SD_ConfigSpeedBusOperation+0x120>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009360:	f7f7 fdd0 	bl	8000f04 <HAL_GetTick>
 8009364:	4602      	mov	r2, r0
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800936e:	d109      	bne.n	8009384 <HAL_SD_ConfigSpeedBusOperation+0x120>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009376:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e021      	b.n	80093c8 <HAL_SD_ConfigSpeedBusOperation+0x164>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f829 	bl	80093dc <HAL_SD_GetCardState>
 800938a:	4603      	mov	r3, r0
 800938c:	2b04      	cmp	r3, #4
 800938e:	d1e7      	bne.n	8009360 <HAL_SD_ConfigSpeedBusOperation+0xfc>
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009398:	4618      	mov	r0, r3
 800939a:	f001 fb47 	bl	800aa2c <SDMMC_CmdBlockLength>
 800939e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00b      	beq.n	80093be <HAL_SD_ConfigSpeedBusOperation+0x15a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a0b      	ldr	r2, [pc, #44]	@ (80093d8 <HAL_SD_ConfigSpeedBusOperation+0x174>)
 80093ac:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	431a      	orrs	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  return status;
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3718      	adds	r7, #24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	80ffff01 	.word	0x80ffff01
 80093d4:	80ffff00 	.word	0x80ffff00
 80093d8:	1fe00fff 	.word	0x1fe00fff

080093dc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80093e4:	2300      	movs	r3, #0
 80093e6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80093e8:	f107 030c 	add.w	r3, r7, #12
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fa40 	bl	8009874 <SD_SendStatus>
 80093f4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d005      	beq.n	8009408 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	431a      	orrs	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	0a5b      	lsrs	r3, r3, #9
 800940c:	f003 030f 	and.w	r3, r3, #15
 8009410:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009412:	693b      	ldr	r3, [r7, #16]
}
 8009414:	4618      	mov	r0, r3
 8009416:	3718      	adds	r7, #24
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b090      	sub	sp, #64	@ 0x40
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009428:	f7f7 fd6c 	bl	8000f04 <HAL_GetTick>
 800942c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4618      	mov	r0, r3
 8009434:	f001 fa75 	bl	800a922 <SDMMC_GetPowerState>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d102      	bne.n	8009444 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800943e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009442:	e0b5      	b.n	80095b0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009448:	2b03      	cmp	r3, #3
 800944a:	d02e      	beq.n	80094aa <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4618      	mov	r0, r3
 8009452:	f001 fcc0 	bl	800add6 <SDMMC_CmdSendCID>
 8009456:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945a:	2b00      	cmp	r3, #0
 800945c:	d001      	beq.n	8009462 <SD_InitCard+0x46>
    {
      return errorstate;
 800945e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009460:	e0a6      	b.n	80095b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2100      	movs	r1, #0
 8009468:	4618      	mov	r0, r3
 800946a:	f001 faa0 	bl	800a9ae <SDMMC_GetResponse>
 800946e:	4602      	mov	r2, r0
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2104      	movs	r1, #4
 800947a:	4618      	mov	r0, r3
 800947c:	f001 fa97 	bl	800a9ae <SDMMC_GetResponse>
 8009480:	4602      	mov	r2, r0
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2108      	movs	r1, #8
 800948c:	4618      	mov	r0, r3
 800948e:	f001 fa8e 	bl	800a9ae <SDMMC_GetResponse>
 8009492:	4602      	mov	r2, r0
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	210c      	movs	r1, #12
 800949e:	4618      	mov	r0, r3
 80094a0:	f001 fa85 	bl	800a9ae <SDMMC_GetResponse>
 80094a4:	4602      	mov	r2, r0
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	d01d      	beq.n	80094ee <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80094b2:	e019      	b.n	80094e8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f107 020a 	add.w	r2, r7, #10
 80094bc:	4611      	mov	r1, r2
 80094be:	4618      	mov	r0, r3
 80094c0:	f001 fcc8 	bl	800ae54 <SDMMC_CmdSetRelAdd>
 80094c4:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80094c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d001      	beq.n	80094d0 <SD_InitCard+0xb4>
      {
        return errorstate;
 80094cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ce:	e06f      	b.n	80095b0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80094d0:	f7f7 fd18 	bl	8000f04 <HAL_GetTick>
 80094d4:	4602      	mov	r2, r0
 80094d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	f241 3287 	movw	r2, #4999	@ 0x1387
 80094de:	4293      	cmp	r3, r2
 80094e0:	d902      	bls.n	80094e8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80094e2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80094e6:	e063      	b.n	80095b0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80094e8:	897b      	ldrh	r3, [r7, #10]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d0e2      	beq.n	80094b4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f2:	2b03      	cmp	r3, #3
 80094f4:	d036      	beq.n	8009564 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80094f6:	897b      	ldrh	r3, [r7, #10]
 80094f8:	461a      	mov	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009506:	041b      	lsls	r3, r3, #16
 8009508:	4619      	mov	r1, r3
 800950a:	4610      	mov	r0, r2
 800950c:	f001 fc82 	bl	800ae14 <SDMMC_CmdSendCSD>
 8009510:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009514:	2b00      	cmp	r3, #0
 8009516:	d001      	beq.n	800951c <SD_InitCard+0x100>
    {
      return errorstate;
 8009518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800951a:	e049      	b.n	80095b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2100      	movs	r1, #0
 8009522:	4618      	mov	r0, r3
 8009524:	f001 fa43 	bl	800a9ae <SDMMC_GetResponse>
 8009528:	4602      	mov	r2, r0
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2104      	movs	r1, #4
 8009534:	4618      	mov	r0, r3
 8009536:	f001 fa3a 	bl	800a9ae <SDMMC_GetResponse>
 800953a:	4602      	mov	r2, r0
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2108      	movs	r1, #8
 8009546:	4618      	mov	r0, r3
 8009548:	f001 fa31 	bl	800a9ae <SDMMC_GetResponse>
 800954c:	4602      	mov	r2, r0
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	210c      	movs	r1, #12
 8009558:	4618      	mov	r0, r3
 800955a:	f001 fa28 	bl	800a9ae <SDMMC_GetResponse>
 800955e:	4602      	mov	r2, r0
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2104      	movs	r1, #4
 800956a:	4618      	mov	r0, r3
 800956c:	f001 fa1f 	bl	800a9ae <SDMMC_GetResponse>
 8009570:	4603      	mov	r3, r0
 8009572:	0d1a      	lsrs	r2, r3, #20
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009578:	f107 030c 	add.w	r3, r7, #12
 800957c:	4619      	mov	r1, r3
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7ff fad0 	bl	8008b24 <HAL_SD_GetCardCSD>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d002      	beq.n	8009590 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800958a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800958e:	e00f      	b.n	80095b0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009598:	041b      	lsls	r3, r3, #16
 800959a:	4619      	mov	r1, r3
 800959c:	4610      	mov	r0, r2
 800959e:	f001 fb31 	bl	800ac04 <SDMMC_CmdSelDesel>
 80095a2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80095a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <SD_InitCard+0x192>
  {
    return errorstate;
 80095aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ac:	e000      	b.n	80095b0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3740      	adds	r7, #64	@ 0x40
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095c0:	2300      	movs	r3, #0
 80095c2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80095c4:	2300      	movs	r3, #0
 80095c6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80095c8:	2300      	movs	r3, #0
 80095ca:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4618      	mov	r0, r3
 80095d2:	f001 fb3a 	bl	800ac4a <SDMMC_CmdGoIdleState>
 80095d6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	e072      	b.n	80096c8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f001 fb4d 	bl	800ac86 <SDMMC_CmdOperCond>
 80095ec:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095f4:	d10d      	bne.n	8009612 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4618      	mov	r0, r3
 8009602:	f001 fb22 	bl	800ac4a <SDMMC_CmdGoIdleState>
 8009606:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d004      	beq.n	8009618 <SD_PowerON+0x60>
    {
      return errorstate;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	e05a      	b.n	80096c8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800961c:	2b01      	cmp	r3, #1
 800961e:	d137      	bne.n	8009690 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2100      	movs	r1, #0
 8009626:	4618      	mov	r0, r3
 8009628:	f001 fb4d 	bl	800acc6 <SDMMC_CmdAppCommand>
 800962c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d02d      	beq.n	8009690 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009634:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009638:	e046      	b.n	80096c8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2100      	movs	r1, #0
 8009640:	4618      	mov	r0, r3
 8009642:	f001 fb40 	bl	800acc6 <SDMMC_CmdAppCommand>
 8009646:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <SD_PowerON+0x9a>
    {
      return errorstate;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	e03a      	b.n	80096c8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	491e      	ldr	r1, [pc, #120]	@ (80096d0 <SD_PowerON+0x118>)
 8009658:	4618      	mov	r0, r3
 800965a:	f001 fb57 	bl	800ad0c <SDMMC_CmdAppOperCommand>
 800965e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d002      	beq.n	800966c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009666:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800966a:	e02d      	b.n	80096c8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2100      	movs	r1, #0
 8009672:	4618      	mov	r0, r3
 8009674:	f001 f99b 	bl	800a9ae <SDMMC_GetResponse>
 8009678:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	0fdb      	lsrs	r3, r3, #31
 800967e:	2b01      	cmp	r3, #1
 8009680:	d101      	bne.n	8009686 <SD_PowerON+0xce>
 8009682:	2301      	movs	r3, #1
 8009684:	e000      	b.n	8009688 <SD_PowerON+0xd0>
 8009686:	2300      	movs	r3, #0
 8009688:	613b      	str	r3, [r7, #16]

    count++;
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	3301      	adds	r3, #1
 800968e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009696:	4293      	cmp	r3, r2
 8009698:	d802      	bhi.n	80096a0 <SD_PowerON+0xe8>
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d0cc      	beq.n	800963a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d902      	bls.n	80096b0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80096aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80096ae:	e00b      	b.n	80096c8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	c1100000 	.word	0xc1100000

080096d4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08c      	sub	sp, #48	@ 0x30
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80096de:	f7f7 fc11 	bl	8000f04 <HAL_GetTick>
 80096e2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2100      	movs	r1, #0
 80096ee:	4618      	mov	r0, r3
 80096f0:	f001 f95d 	bl	800a9ae <SDMMC_GetResponse>
 80096f4:	4603      	mov	r3, r0
 80096f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096fe:	d102      	bne.n	8009706 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009700:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009704:	e0b0      	b.n	8009868 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2140      	movs	r1, #64	@ 0x40
 800970c:	4618      	mov	r0, r3
 800970e:	f001 f98d 	bl	800aa2c <SDMMC_CmdBlockLength>
 8009712:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009714:	6a3b      	ldr	r3, [r7, #32]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d005      	beq.n	8009726 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009722:	6a3b      	ldr	r3, [r7, #32]
 8009724:	e0a0      	b.n	8009868 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800972e:	041b      	lsls	r3, r3, #16
 8009730:	4619      	mov	r1, r3
 8009732:	4610      	mov	r0, r2
 8009734:	f001 fac7 	bl	800acc6 <SDMMC_CmdAppCommand>
 8009738:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d005      	beq.n	800974c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009748:	6a3b      	ldr	r3, [r7, #32]
 800974a:	e08d      	b.n	8009868 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800974c:	f04f 33ff 	mov.w	r3, #4294967295
 8009750:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009752:	2340      	movs	r3, #64	@ 0x40
 8009754:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009756:	2360      	movs	r3, #96	@ 0x60
 8009758:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800975a:	2302      	movs	r3, #2
 800975c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800975e:	2300      	movs	r3, #0
 8009760:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009762:	2301      	movs	r3, #1
 8009764:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f107 0208 	add.w	r2, r7, #8
 800976e:	4611      	mov	r1, r2
 8009770:	4618      	mov	r0, r3
 8009772:	f001 f92f 	bl	800a9d4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4618      	mov	r0, r3
 800977c:	f001 fbaf 	bl	800aede <SDMMC_CmdStatusRegister>
 8009780:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d02b      	beq.n	80097e0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009790:	6a3b      	ldr	r3, [r7, #32]
 8009792:	e069      	b.n	8009868 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800979a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d013      	beq.n	80097ca <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80097a2:	2300      	movs	r3, #0
 80097a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097a6:	e00d      	b.n	80097c4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4618      	mov	r0, r3
 80097ae:	f001 f889 	bl	800a8c4 <SDMMC_ReadFIFO>
 80097b2:	4602      	mov	r2, r0
 80097b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b6:	601a      	str	r2, [r3, #0]
        pData++;
 80097b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ba:	3304      	adds	r3, #4
 80097bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 80097be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c0:	3301      	adds	r3, #1
 80097c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c6:	2b07      	cmp	r3, #7
 80097c8:	d9ee      	bls.n	80097a8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80097ca:	f7f7 fb9b 	bl	8000f04 <HAL_GetTick>
 80097ce:	4602      	mov	r2, r0
 80097d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d2:	1ad3      	subs	r3, r2, r3
 80097d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d8:	d102      	bne.n	80097e0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80097da:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80097de:	e043      	b.n	8009868 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097e6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d0d2      	beq.n	8009794 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097f4:	f003 0308 	and.w	r3, r3, #8
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d001      	beq.n	8009800 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80097fc:	2308      	movs	r3, #8
 80097fe:	e033      	b.n	8009868 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009806:	f003 0302 	and.w	r3, r3, #2
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800980e:	2302      	movs	r3, #2
 8009810:	e02a      	b.n	8009868 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009818:	f003 0320 	and.w	r3, r3, #32
 800981c:	2b00      	cmp	r3, #0
 800981e:	d017      	beq.n	8009850 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009820:	2320      	movs	r3, #32
 8009822:	e021      	b.n	8009868 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4618      	mov	r0, r3
 800982a:	f001 f84b 	bl	800a8c4 <SDMMC_ReadFIFO>
 800982e:	4602      	mov	r2, r0
 8009830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009832:	601a      	str	r2, [r3, #0]
    pData++;
 8009834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009836:	3304      	adds	r3, #4
 8009838:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800983a:	f7f7 fb63 	bl	8000f04 <HAL_GetTick>
 800983e:	4602      	mov	r2, r0
 8009840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009842:	1ad3      	subs	r3, r2, r3
 8009844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009848:	d102      	bne.n	8009850 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800984a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800984e:	e00b      	b.n	8009868 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009856:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1e2      	bne.n	8009824 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a03      	ldr	r2, [pc, #12]	@ (8009870 <SD_SendSDStatus+0x19c>)
 8009864:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3730      	adds	r7, #48	@ 0x30
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	18000f3a 	.word	0x18000f3a

08009874 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d102      	bne.n	800988a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009884:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009888:	e018      	b.n	80098bc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009892:	041b      	lsls	r3, r3, #16
 8009894:	4619      	mov	r1, r3
 8009896:	4610      	mov	r0, r2
 8009898:	f001 fafe 	bl	800ae98 <SDMMC_CmdSendStatus>
 800989c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d001      	beq.n	80098a8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	e009      	b.n	80098bc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2100      	movs	r1, #0
 80098ae:	4618      	mov	r0, r3
 80098b0:	f001 f87d 	bl	800a9ae <SDMMC_GetResponse>
 80098b4:	4602      	mov	r2, r0
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80098cc:	2300      	movs	r3, #0
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	2300      	movs	r3, #0
 80098d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2100      	movs	r1, #0
 80098da:	4618      	mov	r0, r3
 80098dc:	f001 f867 	bl	800a9ae <SDMMC_GetResponse>
 80098e0:	4603      	mov	r3, r0
 80098e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098ea:	d102      	bne.n	80098f2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80098ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80098f0:	e02f      	b.n	8009952 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80098f2:	f107 030c 	add.w	r3, r7, #12
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f879 	bl	80099f0 <SD_FindSCR>
 80098fe:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d001      	beq.n	800990a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	e023      	b.n	8009952 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d01c      	beq.n	800994e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800991c:	041b      	lsls	r3, r3, #16
 800991e:	4619      	mov	r1, r3
 8009920:	4610      	mov	r0, r2
 8009922:	f001 f9d0 	bl	800acc6 <SDMMC_CmdAppCommand>
 8009926:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	e00f      	b.n	8009952 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2102      	movs	r1, #2
 8009938:	4618      	mov	r0, r3
 800993a:	f001 fa07 	bl	800ad4c <SDMMC_CmdBusWidth>
 800993e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	e003      	b.n	8009952 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800994a:	2300      	movs	r3, #0
 800994c:	e001      	b.n	8009952 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800994e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009952:	4618      	mov	r0, r3
 8009954:	3718      	adds	r7, #24
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b086      	sub	sp, #24
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009962:	2300      	movs	r3, #0
 8009964:	60fb      	str	r3, [r7, #12]
 8009966:	2300      	movs	r3, #0
 8009968:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2100      	movs	r1, #0
 8009970:	4618      	mov	r0, r3
 8009972:	f001 f81c 	bl	800a9ae <SDMMC_GetResponse>
 8009976:	4603      	mov	r3, r0
 8009978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800997c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009980:	d102      	bne.n	8009988 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009982:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009986:	e02f      	b.n	80099e8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009988:	f107 030c 	add.w	r3, r7, #12
 800998c:	4619      	mov	r1, r3
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f82e 	bl	80099f0 <SD_FindSCR>
 8009994:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d001      	beq.n	80099a0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	e023      	b.n	80099e8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d01c      	beq.n	80099e4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099b2:	041b      	lsls	r3, r3, #16
 80099b4:	4619      	mov	r1, r3
 80099b6:	4610      	mov	r0, r2
 80099b8:	f001 f985 	bl	800acc6 <SDMMC_CmdAppCommand>
 80099bc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	e00f      	b.n	80099e8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2100      	movs	r1, #0
 80099ce:	4618      	mov	r0, r3
 80099d0:	f001 f9bc 	bl	800ad4c <SDMMC_CmdBusWidth>
 80099d4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	e003      	b.n	80099e8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80099e0:	2300      	movs	r3, #0
 80099e2:	e001      	b.n	80099e8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80099e4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3718      	adds	r7, #24
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b08e      	sub	sp, #56	@ 0x38
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80099fa:	f7f7 fa83 	bl	8000f04 <HAL_GetTick>
 80099fe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009a04:	2300      	movs	r3, #0
 8009a06:	60bb      	str	r3, [r7, #8]
 8009a08:	2300      	movs	r3, #0
 8009a0a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2108      	movs	r1, #8
 8009a16:	4618      	mov	r0, r3
 8009a18:	f001 f808 	bl	800aa2c <SDMMC_CmdBlockLength>
 8009a1c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d001      	beq.n	8009a28 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a26:	e0ad      	b.n	8009b84 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a30:	041b      	lsls	r3, r3, #16
 8009a32:	4619      	mov	r1, r3
 8009a34:	4610      	mov	r0, r2
 8009a36:	f001 f946 	bl	800acc6 <SDMMC_CmdAppCommand>
 8009a3a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d001      	beq.n	8009a46 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a44:	e09e      	b.n	8009b84 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009a46:	f04f 33ff 	mov.w	r3, #4294967295
 8009a4a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009a4c:	2308      	movs	r3, #8
 8009a4e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009a50:	2330      	movs	r3, #48	@ 0x30
 8009a52:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009a54:	2302      	movs	r3, #2
 8009a56:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f107 0210 	add.w	r2, r7, #16
 8009a68:	4611      	mov	r1, r2
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 ffb2 	bl	800a9d4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f001 f98c 	bl	800ad92 <SDMMC_CmdSendSCR>
 8009a7a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d027      	beq.n	8009ad2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a84:	e07e      	b.n	8009b84 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d113      	bne.n	8009abc <SD_FindSCR+0xcc>
 8009a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d110      	bne.n	8009abc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f000 ff10 	bl	800a8c4 <SDMMC_ReadFIFO>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f000 ff09 	bl	800a8c4 <SDMMC_ReadFIFO>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	60fb      	str	r3, [r7, #12]
      index++;
 8009ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ab8:	3301      	adds	r3, #1
 8009aba:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009abc:	f7f7 fa22 	bl	8000f04 <HAL_GetTick>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aca:	d102      	bne.n	8009ad2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009acc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009ad0:	e058      	b.n	8009b84 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ad8:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009adc:	4013      	ands	r3, r2
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d0d1      	beq.n	8009a86 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ae8:	f003 0308 	and.w	r3, r3, #8
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d005      	beq.n	8009afc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2208      	movs	r2, #8
 8009af6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009af8:	2308      	movs	r3, #8
 8009afa:	e043      	b.n	8009b84 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b02:	f003 0302 	and.w	r3, r3, #2
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d005      	beq.n	8009b16 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2202      	movs	r2, #2
 8009b10:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009b12:	2302      	movs	r3, #2
 8009b14:	e036      	b.n	8009b84 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b1c:	f003 0320 	and.w	r3, r3, #32
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d005      	beq.n	8009b30 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2220      	movs	r2, #32
 8009b2a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009b2c:	2320      	movs	r3, #32
 8009b2e:	e029      	b.n	8009b84 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a15      	ldr	r2, [pc, #84]	@ (8009b8c <SD_FindSCR+0x19c>)
 8009b36:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	061a      	lsls	r2, r3, #24
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	021b      	lsls	r3, r3, #8
 8009b40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009b44:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	0a1b      	lsrs	r3, r3, #8
 8009b4a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009b4e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	0e1b      	lsrs	r3, r3, #24
 8009b54:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b58:	601a      	str	r2, [r3, #0]
    scr++;
 8009b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	061a      	lsls	r2, r3, #24
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	021b      	lsls	r3, r3, #8
 8009b68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009b6c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	0a1b      	lsrs	r3, r3, #8
 8009b72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009b76:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	0e1b      	lsrs	r3, r3, #24
 8009b7c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b80:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3738      	adds	r7, #56	@ 0x38
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	18000f3a 	.word	0x18000f3a

08009b90 <SD_SwitchSpeed>:
  * @param  hsd: SD handle
  * @param  SwitchSpeedMode: SD speed mode( SDMMC_SDR12_SWITCH_PATTERN, SDMMC_SDR25_SWITCH_PATTERN)
  * @retval SD Card error state
  */
uint32_t SD_SwitchSpeed(SD_HandleTypeDef *hsd, uint32_t SwitchSpeedMode)
{
 8009b90:	b590      	push	{r4, r7, lr}
 8009b92:	b09d      	sub	sp, #116	@ 0x74
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8009b9e:	f107 0308 	add.w	r3, r7, #8
 8009ba2:	2240      	movs	r2, #64	@ 0x40
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f007 f956 	bl	8010e58 <memset>
  uint32_t count;
  uint32_t loop = 0 ;
 8009bac:	2300      	movs	r3, #0
 8009bae:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t Timeout = HAL_GetTick();
 8009bb0:	f7f7 f9a8 	bl	8000f04 <HAL_GetTick>
 8009bb4:	6638      	str	r0, [r7, #96]	@ 0x60

  if (hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d102      	bne.n	8009bc4 <SD_SwitchSpeed+0x34>
  {
    /* Standard Speed Card <= 12.5Mhz  */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009bbe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009bc2:	e0ad      	b.n	8009d20 <SD_SwitchSpeed+0x190>
  }

  if (hsd->SdCard.CardSpeed >= CARD_HIGH_SPEED)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bc8:	2bff      	cmp	r3, #255	@ 0xff
 8009bca:	f240 80a8 	bls.w	8009d1e <SD_SwitchSpeed+0x18e>
  {
    /* Initialize the Data control register */
    hsd->Instance->DCTRL = 0;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	62da      	str	r2, [r3, #44]	@ 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2140      	movs	r1, #64	@ 0x40
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f000 ff25 	bl	800aa2c <SDMMC_CmdBlockLength>
 8009be2:	66f8      	str	r0, [r7, #108]	@ 0x6c

    if (errorstate != HAL_SD_ERROR_NONE)
 8009be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d001      	beq.n	8009bee <SD_SwitchSpeed+0x5e>
    {
      return errorstate;
 8009bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bec:	e098      	b.n	8009d20 <SD_SwitchSpeed+0x190>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009bee:	f04f 33ff 	mov.w	r3, #4294967295
 8009bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
    sdmmc_datainitstructure.DataLength    = 64U;
 8009bf4:	2340      	movs	r3, #64	@ 0x40
 8009bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8009bf8:	2360      	movs	r3, #96	@ 0x60
 8009bfa:	653b      	str	r3, [r7, #80]	@ 0x50
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	657b      	str	r3, [r7, #84]	@ 0x54
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	65bb      	str	r3, [r7, #88]	@ 0x58
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8009c04:	2301      	movs	r3, #1
 8009c06:	65fb      	str	r3, [r7, #92]	@ 0x5c

    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8009c10:	4611      	mov	r1, r2
 8009c12:	4618      	mov	r0, r3
 8009c14:	f000 fede 	bl	800a9d4 <SDMMC_ConfigData>


    errorstate = SDMMC_CmdSwitch(hsd->Instance, SwitchSpeedMode);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f001 f97f 	bl	800af22 <SDMMC_CmdSwitch>
 8009c24:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d036      	beq.n	8009c9a <SD_SwitchSpeed+0x10a>
    {
      return errorstate;
 8009c2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c2e:	e077      	b.n	8009d20 <SD_SwitchSpeed+0x190>
    }

    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d01a      	beq.n	8009c74 <SD_SwitchSpeed+0xe4>
      {
        for (count = 0U; count < 8U; count++)
 8009c3e:	2300      	movs	r3, #0
 8009c40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c42:	e011      	b.n	8009c68 <SD_SwitchSpeed+0xd8>
        {
          SD_hs[(8U * loop) + count]  = SDMMC_ReadFIFO(hsd->Instance);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6819      	ldr	r1, [r3, #0]
 8009c48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c4a:	00da      	lsls	r2, r3, #3
 8009c4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c4e:	18d4      	adds	r4, r2, r3
 8009c50:	4608      	mov	r0, r1
 8009c52:	f000 fe37 	bl	800a8c4 <SDMMC_ReadFIFO>
 8009c56:	4602      	mov	r2, r0
 8009c58:	00a3      	lsls	r3, r4, #2
 8009c5a:	3370      	adds	r3, #112	@ 0x70
 8009c5c:	443b      	add	r3, r7
 8009c5e:	f843 2c68 	str.w	r2, [r3, #-104]
        for (count = 0U; count < 8U; count++)
 8009c62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c64:	3301      	adds	r3, #1
 8009c66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c6a:	2b07      	cmp	r3, #7
 8009c6c:	d9ea      	bls.n	8009c44 <SD_SwitchSpeed+0xb4>
        }
        loop ++;
 8009c6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c70:	3301      	adds	r3, #1
 8009c72:	667b      	str	r3, [r7, #100]	@ 0x64
      }

      if ((HAL_GetTick() - Timeout) >=  SDMMC_DATATIMEOUT)
 8009c74:	f7f7 f946 	bl	8000f04 <HAL_GetTick>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c82:	d10a      	bne.n	8009c9a <SD_SwitchSpeed+0x10a>
      {
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009c8a:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_SD_ERROR_TIMEOUT;
 8009c94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009c98:	e042      	b.n	8009d20 <SD_SwitchSpeed+0x190>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ca0:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d0c2      	beq.n	8009c30 <SD_SwitchSpeed+0xa0>
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cb0:	f003 0308 	and.w	r3, r3, #8
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d005      	beq.n	8009cc4 <SD_SwitchSpeed+0x134>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2208      	movs	r2, #8
 8009cbe:	639a      	str	r2, [r3, #56]	@ 0x38

      return errorstate;
 8009cc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cc2:	e02d      	b.n	8009d20 <SD_SwitchSpeed+0x190>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cca:	f003 0302 	and.w	r3, r3, #2
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d007      	beq.n	8009ce2 <SD_SwitchSpeed+0x152>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	639a      	str	r2, [r3, #56]	@ 0x38

      errorstate = SDMMC_ERROR_DATA_CRC_FAIL;
 8009cda:	2302      	movs	r3, #2
 8009cdc:	66fb      	str	r3, [r7, #108]	@ 0x6c

      return errorstate;
 8009cde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ce0:	e01e      	b.n	8009d20 <SD_SwitchSpeed+0x190>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ce8:	f003 0320 	and.w	r3, r3, #32
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d007      	beq.n	8009d00 <SD_SwitchSpeed+0x170>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2220      	movs	r2, #32
 8009cf6:	639a      	str	r2, [r3, #56]	@ 0x38

      errorstate = SDMMC_ERROR_RX_OVERRUN;
 8009cf8:	2320      	movs	r3, #32
 8009cfa:	66fb      	str	r3, [r7, #108]	@ 0x6c

      return errorstate;
 8009cfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cfe:	e00f      	b.n	8009d20 <SD_SwitchSpeed+0x190>
    {
      /* No error flag set */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a08      	ldr	r2, [pc, #32]	@ (8009d28 <SD_SwitchSpeed+0x198>)
 8009d06:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Test if the switch mode HS is ok */
    if ((((uint8_t *)SD_hs)[13] & 2U) != 2U)
 8009d08:	f107 0308 	add.w	r3, r7, #8
 8009d0c:	330d      	adds	r3, #13
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	f003 0302 	and.w	r3, r3, #2
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d102      	bne.n	8009d1e <SD_SwitchSpeed+0x18e>
    {
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009d18:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009d1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }

  }

  return errorstate;
 8009d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3774      	adds	r7, #116	@ 0x74
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd90      	pop	{r4, r7, pc}
 8009d28:	18000f3a 	.word	0x18000f3a

08009d2c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d101      	bne.n	8009d40 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e02b      	b.n	8009d98 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d106      	bne.n	8009d5a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f825 	bl	8009da4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2202      	movs	r2, #2
 8009d5e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	3304      	adds	r3, #4
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	4610      	mov	r0, r2
 8009d6e:	f000 fc7d 	bl	800a66c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6818      	ldr	r0, [r3, #0]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	6839      	ldr	r1, [r7, #0]
 8009d7e:	f000 fcd1 	bl	800a724 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009d82:	4b07      	ldr	r3, [pc, #28]	@ (8009da0 <HAL_SDRAM_Init+0x74>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a06      	ldr	r2, [pc, #24]	@ (8009da0 <HAL_SDRAM_Init+0x74>)
 8009d88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009d8c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	52004000 	.word	0x52004000

08009da4 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009dca:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009dcc:	7dfb      	ldrb	r3, [r7, #23]
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d101      	bne.n	8009dd6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	e021      	b.n	8009e1a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009dd6:	7dfb      	ldrb	r3, [r7, #23]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d002      	beq.n	8009de2 <HAL_SDRAM_SendCommand+0x2a>
 8009ddc:	7dfb      	ldrb	r3, [r7, #23]
 8009dde:	2b05      	cmp	r3, #5
 8009de0:	d118      	bne.n	8009e14 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2202      	movs	r2, #2
 8009de6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	68b9      	ldr	r1, [r7, #8]
 8009df2:	4618      	mov	r0, r3
 8009df4:	f000 fd00 	bl	800a7f8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d104      	bne.n	8009e0a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2205      	movs	r2, #5
 8009e04:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009e08:	e006      	b.n	8009e18 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009e12:	e001      	b.n	8009e18 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	e000      	b.n	8009e1a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3718      	adds	r7, #24
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b082      	sub	sp, #8
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d101      	bne.n	8009e3c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009e38:	2302      	movs	r3, #2
 8009e3a:	e016      	b.n	8009e6a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d10f      	bne.n	8009e68 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	6839      	ldr	r1, [r7, #0]
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 fcf2 	bl	800a840 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009e64:	2300      	movs	r3, #0
 8009e66:	e000      	b.n	8009e6a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
	...

08009e74 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d101      	bne.n	8009e86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e10f      	b.n	800a0a6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a87      	ldr	r2, [pc, #540]	@ (800a0b0 <HAL_SPI_Init+0x23c>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d00f      	beq.n	8009eb6 <HAL_SPI_Init+0x42>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a86      	ldr	r2, [pc, #536]	@ (800a0b4 <HAL_SPI_Init+0x240>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d00a      	beq.n	8009eb6 <HAL_SPI_Init+0x42>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a84      	ldr	r2, [pc, #528]	@ (800a0b8 <HAL_SPI_Init+0x244>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d005      	beq.n	8009eb6 <HAL_SPI_Init+0x42>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	2b0f      	cmp	r3, #15
 8009eb0:	d901      	bls.n	8009eb6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e0f7      	b.n	800a0a6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 fbbc 	bl	800a634 <SPI_GetPacketSize>
 8009ebc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a7b      	ldr	r2, [pc, #492]	@ (800a0b0 <HAL_SPI_Init+0x23c>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d00c      	beq.n	8009ee2 <HAL_SPI_Init+0x6e>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a79      	ldr	r2, [pc, #484]	@ (800a0b4 <HAL_SPI_Init+0x240>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d007      	beq.n	8009ee2 <HAL_SPI_Init+0x6e>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a78      	ldr	r2, [pc, #480]	@ (800a0b8 <HAL_SPI_Init+0x244>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d002      	beq.n	8009ee2 <HAL_SPI_Init+0x6e>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2b08      	cmp	r3, #8
 8009ee0:	d811      	bhi.n	8009f06 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009ee6:	4a72      	ldr	r2, [pc, #456]	@ (800a0b0 <HAL_SPI_Init+0x23c>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d009      	beq.n	8009f00 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a70      	ldr	r2, [pc, #448]	@ (800a0b4 <HAL_SPI_Init+0x240>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d004      	beq.n	8009f00 <HAL_SPI_Init+0x8c>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a6f      	ldr	r2, [pc, #444]	@ (800a0b8 <HAL_SPI_Init+0x244>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d104      	bne.n	8009f0a <HAL_SPI_Init+0x96>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2b10      	cmp	r3, #16
 8009f04:	d901      	bls.n	8009f0a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e0cd      	b.n	800a0a6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d106      	bne.n	8009f24 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f003 fca2 	bl	800d868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2202      	movs	r2, #2
 8009f28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f022 0201 	bic.w	r2, r2, #1
 8009f3a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009f46:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	699b      	ldr	r3, [r3, #24]
 8009f4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f50:	d119      	bne.n	8009f86 <HAL_SPI_Init+0x112>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f5a:	d103      	bne.n	8009f64 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d008      	beq.n	8009f76 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10c      	bne.n	8009f86 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009f70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f74:	d107      	bne.n	8009f86 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009f84:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00f      	beq.n	8009fb2 <HAL_SPI_Init+0x13e>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	2b06      	cmp	r3, #6
 8009f98:	d90b      	bls.n	8009fb2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	430a      	orrs	r2, r1
 8009fae:	601a      	str	r2, [r3, #0]
 8009fb0:	e007      	b.n	8009fc2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009fc0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	69da      	ldr	r2, [r3, #28]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fca:	431a      	orrs	r2, r3
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	431a      	orrs	r2, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fd4:	ea42 0103 	orr.w	r1, r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	68da      	ldr	r2, [r3, #12]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	430a      	orrs	r2, r1
 8009fe2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fec:	431a      	orrs	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ff2:	431a      	orrs	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	699b      	ldr	r3, [r3, #24]
 8009ff8:	431a      	orrs	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	431a      	orrs	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	695b      	ldr	r3, [r3, #20]
 800a004:	431a      	orrs	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	431a      	orrs	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	431a      	orrs	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a016:	431a      	orrs	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	431a      	orrs	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a022:	ea42 0103 	orr.w	r1, r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	430a      	orrs	r2, r1
 800a030:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d113      	bne.n	800a062 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a04c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a060:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f022 0201 	bic.w	r2, r2, #1
 800a070:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00a      	beq.n	800a094 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	430a      	orrs	r2, r1
 800a092:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	40013000 	.word	0x40013000
 800a0b4:	40003800 	.word	0x40003800
 800a0b8:	40003c00 	.word	0x40003c00

0800a0bc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b088      	sub	sp, #32
 800a0c0:	af02      	add	r7, sp, #8
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	603b      	str	r3, [r7, #0]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	3320      	adds	r3, #32
 800a0d2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a0d4:	f7f6 ff16 	bl	8000f04 <HAL_GetTick>
 800a0d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d001      	beq.n	800a0ea <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	e1d1      	b.n	800a48e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d002      	beq.n	800a0f6 <HAL_SPI_Transmit+0x3a>
 800a0f0:	88fb      	ldrh	r3, [r7, #6]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e1c9      	b.n	800a48e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a100:	2b01      	cmp	r3, #1
 800a102:	d101      	bne.n	800a108 <HAL_SPI_Transmit+0x4c>
 800a104:	2302      	movs	r3, #2
 800a106:	e1c2      	b.n	800a48e <HAL_SPI_Transmit+0x3d2>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2203      	movs	r2, #3
 800a114:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	88fa      	ldrh	r2, [r7, #6]
 800a12a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	88fa      	ldrh	r2, [r7, #6]
 800a132:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2200      	movs	r2, #0
 800a150:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a160:	d108      	bne.n	800a174 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a170:	601a      	str	r2, [r3, #0]
 800a172:	e009      	b.n	800a188 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a186:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	685a      	ldr	r2, [r3, #4]
 800a18e:	4b96      	ldr	r3, [pc, #600]	@ (800a3e8 <HAL_SPI_Transmit+0x32c>)
 800a190:	4013      	ands	r3, r2
 800a192:	88f9      	ldrh	r1, [r7, #6]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	6812      	ldr	r2, [r2, #0]
 800a198:	430b      	orrs	r3, r1
 800a19a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f042 0201 	orr.w	r2, r2, #1
 800a1aa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1b4:	d107      	bne.n	800a1c6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	2b0f      	cmp	r3, #15
 800a1cc:	d947      	bls.n	800a25e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a1ce:	e03f      	b.n	800a250 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	f003 0302 	and.w	r3, r3, #2
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	d114      	bne.n	800a208 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	6812      	ldr	r2, [r2, #0]
 800a1e8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1ee:	1d1a      	adds	r2, r3, #4
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a206:	e023      	b.n	800a250 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a208:	f7f6 fe7c 	bl	8000f04 <HAL_GetTick>
 800a20c:	4602      	mov	r2, r0
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	1ad3      	subs	r3, r2, r3
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	429a      	cmp	r2, r3
 800a216:	d803      	bhi.n	800a220 <HAL_SPI_Transmit+0x164>
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21e:	d102      	bne.n	800a226 <HAL_SPI_Transmit+0x16a>
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d114      	bne.n	800a250 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f000 f936 	bl	800a498 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a232:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a24c:	2303      	movs	r3, #3
 800a24e:	e11e      	b.n	800a48e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a256:	b29b      	uxth	r3, r3
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1b9      	bne.n	800a1d0 <HAL_SPI_Transmit+0x114>
 800a25c:	e0f1      	b.n	800a442 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	2b07      	cmp	r3, #7
 800a264:	f240 80e6 	bls.w	800a434 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a268:	e05d      	b.n	800a326 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	695b      	ldr	r3, [r3, #20]
 800a270:	f003 0302 	and.w	r3, r3, #2
 800a274:	2b02      	cmp	r3, #2
 800a276:	d132      	bne.n	800a2de <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a27e:	b29b      	uxth	r3, r3
 800a280:	2b01      	cmp	r3, #1
 800a282:	d918      	bls.n	800a2b6 <HAL_SPI_Transmit+0x1fa>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d014      	beq.n	800a2b6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6812      	ldr	r2, [r2, #0]
 800a296:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a29c:	1d1a      	adds	r2, r3, #4
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	3b02      	subs	r3, #2
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a2b4:	e037      	b.n	800a326 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2ba:	881a      	ldrh	r2, [r3, #0]
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2c4:	1c9a      	adds	r2, r3, #2
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a2dc:	e023      	b.n	800a326 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2de:	f7f6 fe11 	bl	8000f04 <HAL_GetTick>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	1ad3      	subs	r3, r2, r3
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d803      	bhi.n	800a2f6 <HAL_SPI_Transmit+0x23a>
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2f4:	d102      	bne.n	800a2fc <HAL_SPI_Transmit+0x240>
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d114      	bne.n	800a326 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f000 f8cb 	bl	800a498 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a308:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a322:	2303      	movs	r3, #3
 800a324:	e0b3      	b.n	800a48e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d19b      	bne.n	800a26a <HAL_SPI_Transmit+0x1ae>
 800a332:	e086      	b.n	800a442 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	695b      	ldr	r3, [r3, #20]
 800a33a:	f003 0302 	and.w	r3, r3, #2
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d154      	bne.n	800a3ec <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a348:	b29b      	uxth	r3, r3
 800a34a:	2b03      	cmp	r3, #3
 800a34c:	d918      	bls.n	800a380 <HAL_SPI_Transmit+0x2c4>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a352:	2b40      	cmp	r3, #64	@ 0x40
 800a354:	d914      	bls.n	800a380 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6812      	ldr	r2, [r2, #0]
 800a360:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a366:	1d1a      	adds	r2, r3, #4
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a372:	b29b      	uxth	r3, r3
 800a374:	3b04      	subs	r3, #4
 800a376:	b29a      	uxth	r2, r3
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a37e:	e059      	b.n	800a434 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a386:	b29b      	uxth	r3, r3
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d917      	bls.n	800a3bc <HAL_SPI_Transmit+0x300>
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a390:	2b00      	cmp	r3, #0
 800a392:	d013      	beq.n	800a3bc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a398:	881a      	ldrh	r2, [r3, #0]
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3a2:	1c9a      	adds	r2, r3, #2
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	3b02      	subs	r3, #2
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a3ba:	e03b      	b.n	800a434 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	3320      	adds	r3, #32
 800a3c6:	7812      	ldrb	r2, [r2, #0]
 800a3c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3ce:	1c5a      	adds	r2, r3, #1
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a3e6:	e025      	b.n	800a434 <HAL_SPI_Transmit+0x378>
 800a3e8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3ec:	f7f6 fd8a 	bl	8000f04 <HAL_GetTick>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	1ad3      	subs	r3, r2, r3
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d803      	bhi.n	800a404 <HAL_SPI_Transmit+0x348>
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a402:	d102      	bne.n	800a40a <HAL_SPI_Transmit+0x34e>
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d114      	bne.n	800a434 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f000 f844 	bl	800a498 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a416:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2201      	movs	r2, #1
 800a424:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a430:	2303      	movs	r3, #3
 800a432:	e02c      	b.n	800a48e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f47f af79 	bne.w	800a334 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	2200      	movs	r2, #0
 800a44a:	2108      	movs	r1, #8
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f000 f8c3 	bl	800a5d8 <SPI_WaitOnFlagUntilTimeout>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d007      	beq.n	800a468 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a45e:	f043 0220 	orr.w	r2, r3, #32
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f000 f815 	bl	800a498 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2201      	movs	r2, #1
 800a472:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	e000      	b.n	800a48e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a48c:	2300      	movs	r3, #0
  }
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3718      	adds	r7, #24
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop

0800a498 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	695b      	ldr	r3, [r3, #20]
 800a4a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	699a      	ldr	r2, [r3, #24]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f042 0208 	orr.w	r2, r2, #8
 800a4b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	699a      	ldr	r2, [r3, #24]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f042 0210 	orr.w	r2, r2, #16
 800a4c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f022 0201 	bic.w	r2, r2, #1
 800a4d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	6919      	ldr	r1, [r3, #16]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	4b3c      	ldr	r3, [pc, #240]	@ (800a5d4 <SPI_CloseTransfer+0x13c>)
 800a4e4:	400b      	ands	r3, r1
 800a4e6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	689a      	ldr	r2, [r3, #8]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a4f6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	2b04      	cmp	r3, #4
 800a502:	d014      	beq.n	800a52e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f003 0320 	and.w	r3, r3, #32
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00f      	beq.n	800a52e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a514:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	699a      	ldr	r2, [r3, #24]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f042 0220 	orr.w	r2, r2, #32
 800a52c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2b03      	cmp	r3, #3
 800a538:	d014      	beq.n	800a564 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00f      	beq.n	800a564 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a54a:	f043 0204 	orr.w	r2, r3, #4
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	699a      	ldr	r2, [r3, #24]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a562:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00f      	beq.n	800a58e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a574:	f043 0201 	orr.w	r2, r3, #1
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	699a      	ldr	r2, [r3, #24]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a58c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00f      	beq.n	800a5b8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a59e:	f043 0208 	orr.w	r2, r3, #8
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	699a      	ldr	r2, [r3, #24]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a5b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a5c8:	bf00      	nop
 800a5ca:	3714      	adds	r7, #20
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr
 800a5d4:	fffffc90 	.word	0xfffffc90

0800a5d8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	603b      	str	r3, [r7, #0]
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a5e8:	e010      	b.n	800a60c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5ea:	f7f6 fc8b 	bl	8000f04 <HAL_GetTick>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	1ad3      	subs	r3, r2, r3
 800a5f4:	683a      	ldr	r2, [r7, #0]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d803      	bhi.n	800a602 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a600:	d102      	bne.n	800a608 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d101      	bne.n	800a60c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a608:	2303      	movs	r3, #3
 800a60a:	e00f      	b.n	800a62c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	695a      	ldr	r2, [r3, #20]
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	4013      	ands	r3, r2
 800a616:	68ba      	ldr	r2, [r7, #8]
 800a618:	429a      	cmp	r2, r3
 800a61a:	bf0c      	ite	eq
 800a61c:	2301      	moveq	r3, #1
 800a61e:	2300      	movne	r3, #0
 800a620:	b2db      	uxtb	r3, r3
 800a622:	461a      	mov	r2, r3
 800a624:	79fb      	ldrb	r3, [r7, #7]
 800a626:	429a      	cmp	r2, r3
 800a628:	d0df      	beq.n	800a5ea <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a634:	b480      	push	{r7}
 800a636:	b085      	sub	sp, #20
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a640:	095b      	lsrs	r3, r3, #5
 800a642:	3301      	adds	r3, #1
 800a644:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	3301      	adds	r3, #1
 800a64c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	3307      	adds	r3, #7
 800a652:	08db      	lsrs	r3, r3, #3
 800a654:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	fb02 f303 	mul.w	r3, r2, r3
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3714      	adds	r7, #20
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
	...

0800a66c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d121      	bne.n	800a6c2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	4b27      	ldr	r3, [pc, #156]	@ (800a720 <FMC_SDRAM_Init+0xb4>)
 800a684:	4013      	ands	r3, r2
 800a686:	683a      	ldr	r2, [r7, #0]
 800a688:	6851      	ldr	r1, [r2, #4]
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	6892      	ldr	r2, [r2, #8]
 800a68e:	4311      	orrs	r1, r2
 800a690:	683a      	ldr	r2, [r7, #0]
 800a692:	68d2      	ldr	r2, [r2, #12]
 800a694:	4311      	orrs	r1, r2
 800a696:	683a      	ldr	r2, [r7, #0]
 800a698:	6912      	ldr	r2, [r2, #16]
 800a69a:	4311      	orrs	r1, r2
 800a69c:	683a      	ldr	r2, [r7, #0]
 800a69e:	6952      	ldr	r2, [r2, #20]
 800a6a0:	4311      	orrs	r1, r2
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	6992      	ldr	r2, [r2, #24]
 800a6a6:	4311      	orrs	r1, r2
 800a6a8:	683a      	ldr	r2, [r7, #0]
 800a6aa:	69d2      	ldr	r2, [r2, #28]
 800a6ac:	4311      	orrs	r1, r2
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	6a12      	ldr	r2, [r2, #32]
 800a6b2:	4311      	orrs	r1, r2
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a6b8:	430a      	orrs	r2, r1
 800a6ba:	431a      	orrs	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	601a      	str	r2, [r3, #0]
 800a6c0:	e026      	b.n	800a710 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	69d9      	ldr	r1, [r3, #28]
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	6a1b      	ldr	r3, [r3, #32]
 800a6d2:	4319      	orrs	r1, r3
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d8:	430b      	orrs	r3, r1
 800a6da:	431a      	orrs	r2, r3
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	685a      	ldr	r2, [r3, #4]
 800a6e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a720 <FMC_SDRAM_Init+0xb4>)
 800a6e6:	4013      	ands	r3, r2
 800a6e8:	683a      	ldr	r2, [r7, #0]
 800a6ea:	6851      	ldr	r1, [r2, #4]
 800a6ec:	683a      	ldr	r2, [r7, #0]
 800a6ee:	6892      	ldr	r2, [r2, #8]
 800a6f0:	4311      	orrs	r1, r2
 800a6f2:	683a      	ldr	r2, [r7, #0]
 800a6f4:	68d2      	ldr	r2, [r2, #12]
 800a6f6:	4311      	orrs	r1, r2
 800a6f8:	683a      	ldr	r2, [r7, #0]
 800a6fa:	6912      	ldr	r2, [r2, #16]
 800a6fc:	4311      	orrs	r1, r2
 800a6fe:	683a      	ldr	r2, [r7, #0]
 800a700:	6952      	ldr	r2, [r2, #20]
 800a702:	4311      	orrs	r1, r2
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	6992      	ldr	r2, [r2, #24]
 800a708:	430a      	orrs	r2, r1
 800a70a:	431a      	orrs	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	370c      	adds	r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	ffff8000 	.word	0xffff8000

0800a724 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d128      	bne.n	800a788 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	1e59      	subs	r1, r3, #1
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	3b01      	subs	r3, #1
 800a74a:	011b      	lsls	r3, r3, #4
 800a74c:	4319      	orrs	r1, r3
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	3b01      	subs	r3, #1
 800a754:	021b      	lsls	r3, r3, #8
 800a756:	4319      	orrs	r1, r3
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	3b01      	subs	r3, #1
 800a75e:	031b      	lsls	r3, r3, #12
 800a760:	4319      	orrs	r1, r3
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	3b01      	subs	r3, #1
 800a768:	041b      	lsls	r3, r3, #16
 800a76a:	4319      	orrs	r1, r3
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	695b      	ldr	r3, [r3, #20]
 800a770:	3b01      	subs	r3, #1
 800a772:	051b      	lsls	r3, r3, #20
 800a774:	4319      	orrs	r1, r3
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	3b01      	subs	r3, #1
 800a77c:	061b      	lsls	r3, r3, #24
 800a77e:	430b      	orrs	r3, r1
 800a780:	431a      	orrs	r2, r3
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	609a      	str	r2, [r3, #8]
 800a786:	e02d      	b.n	800a7e4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	689a      	ldr	r2, [r3, #8]
 800a78c:	4b19      	ldr	r3, [pc, #100]	@ (800a7f4 <FMC_SDRAM_Timing_Init+0xd0>)
 800a78e:	4013      	ands	r3, r2
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	68d2      	ldr	r2, [r2, #12]
 800a794:	3a01      	subs	r2, #1
 800a796:	0311      	lsls	r1, r2, #12
 800a798:	68ba      	ldr	r2, [r7, #8]
 800a79a:	6952      	ldr	r2, [r2, #20]
 800a79c:	3a01      	subs	r2, #1
 800a79e:	0512      	lsls	r2, r2, #20
 800a7a0:	430a      	orrs	r2, r1
 800a7a2:	431a      	orrs	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	1e59      	subs	r1, r3, #1
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	011b      	lsls	r3, r3, #4
 800a7be:	4319      	orrs	r1, r3
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	021b      	lsls	r3, r3, #8
 800a7c8:	4319      	orrs	r1, r3
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	691b      	ldr	r3, [r3, #16]
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	041b      	lsls	r3, r3, #16
 800a7d2:	4319      	orrs	r1, r3
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	061b      	lsls	r3, r3, #24
 800a7dc:	430b      	orrs	r3, r1
 800a7de:	431a      	orrs	r2, r3
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3714      	adds	r7, #20
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	ff0f0fff 	.word	0xff0f0fff

0800a7f8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	691a      	ldr	r2, [r3, #16]
 800a808:	4b0c      	ldr	r3, [pc, #48]	@ (800a83c <FMC_SDRAM_SendCommand+0x44>)
 800a80a:	4013      	ands	r3, r2
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	6811      	ldr	r1, [r2, #0]
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	6852      	ldr	r2, [r2, #4]
 800a814:	4311      	orrs	r1, r2
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	6892      	ldr	r2, [r2, #8]
 800a81a:	3a01      	subs	r2, #1
 800a81c:	0152      	lsls	r2, r2, #5
 800a81e:	4311      	orrs	r1, r2
 800a820:	68ba      	ldr	r2, [r7, #8]
 800a822:	68d2      	ldr	r2, [r2, #12]
 800a824:	0252      	lsls	r2, r2, #9
 800a826:	430a      	orrs	r2, r1
 800a828:	431a      	orrs	r2, r3
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3714      	adds	r7, #20
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr
 800a83c:	ffc00000 	.word	0xffc00000

0800a840 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	695a      	ldr	r2, [r3, #20]
 800a84e:	4b07      	ldr	r3, [pc, #28]	@ (800a86c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800a850:	4013      	ands	r3, r2
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	0052      	lsls	r2, r2, #1
 800a856:	431a      	orrs	r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	ffffc001 	.word	0xffffc001

0800a870 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a870:	b084      	sub	sp, #16
 800a872:	b480      	push	{r7}
 800a874:	b085      	sub	sp, #20
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
 800a87a:	f107 001c 	add.w	r0, r7, #28
 800a87e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a882:	2300      	movs	r3, #0
 800a884:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800a886:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800a888:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800a88a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800a88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800a88e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800a890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800a892:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800a896:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	685a      	ldr	r2, [r3, #4]
 800a8a2:	4b07      	ldr	r3, [pc, #28]	@ (800a8c0 <SDMMC_Init+0x50>)
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	68fa      	ldr	r2, [r7, #12]
 800a8a8:	431a      	orrs	r2, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	b004      	add	sp, #16
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	ffc02c00 	.word	0xffc02c00

0800a8c4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	370c      	adds	r7, #12
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr

0800a8de <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a8de:	b480      	push	{r7}
 800a8e0:	b083      	sub	sp, #12
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f043 0203 	orr.w	r2, r3, #3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	370c      	adds	r7, #12
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr

0800a922 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a922:	b480      	push	{r7}
 800a924:	b083      	sub	sp, #12
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 0303 	and.w	r3, r3, #3
}
 800a932:	4618      	mov	r0, r3
 800a934:	370c      	adds	r7, #12
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
	...

0800a940 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a94a:	2300      	movs	r3, #0
 800a94c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a95e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800a964:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800a96a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	4313      	orrs	r3, r2
 800a970:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	68da      	ldr	r2, [r3, #12]
 800a976:	4b06      	ldr	r3, [pc, #24]	@ (800a990 <SDMMC_SendCommand+0x50>)
 800a978:	4013      	ands	r3, r2
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	431a      	orrs	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3714      	adds	r7, #20
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	fffee0c0 	.word	0xfffee0c0

0800a994 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	b2db      	uxtb	r3, r3
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	370c      	adds	r7, #12
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a9ae:	b480      	push	{r7}
 800a9b0:	b085      	sub	sp, #20
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	3314      	adds	r3, #20
 800a9bc:	461a      	mov	r2, r3
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	685a      	ldr	r2, [r3, #4]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a9fa:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800aa00:	431a      	orrs	r2, r3
                       Data->DPSM);
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800aa06:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa12:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	431a      	orrs	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800aa1e:	2300      	movs	r3, #0

}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3714      	adds	r7, #20
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b088      	sub	sp, #32
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800aa3a:	2310      	movs	r3, #16
 800aa3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa44:	2300      	movs	r3, #0
 800aa46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa4e:	f107 0308 	add.w	r3, r7, #8
 800aa52:	4619      	mov	r1, r3
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f7ff ff73 	bl	800a940 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800aa5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa5e:	2110      	movs	r1, #16
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fa81 	bl	800af68 <SDMMC_GetCmdResp1>
 800aa66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa68:	69fb      	ldr	r3, [r7, #28]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3720      	adds	r7, #32
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b088      	sub	sp, #32
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
 800aa7a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800aa80:	2311      	movs	r3, #17
 800aa82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa94:	f107 0308 	add.w	r3, r7, #8
 800aa98:	4619      	mov	r1, r3
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7ff ff50 	bl	800a940 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800aaa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aaa4:	2111      	movs	r1, #17
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 fa5e 	bl	800af68 <SDMMC_GetCmdResp1>
 800aaac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaae:	69fb      	ldr	r3, [r7, #28]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3720      	adds	r7, #32
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b088      	sub	sp, #32
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800aac6:	2312      	movs	r3, #18
 800aac8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aaca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aace:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aad0:	2300      	movs	r3, #0
 800aad2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aad4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aad8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aada:	f107 0308 	add.w	r3, r7, #8
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7ff ff2d 	bl	800a940 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800aae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aaea:	2112      	movs	r1, #18
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fa3b 	bl	800af68 <SDMMC_GetCmdResp1>
 800aaf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaf4:	69fb      	ldr	r3, [r7, #28]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3720      	adds	r7, #32
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b088      	sub	sp, #32
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ab0c:	2318      	movs	r3, #24
 800ab0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab16:	2300      	movs	r3, #0
 800ab18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab20:	f107 0308 	add.w	r3, r7, #8
 800ab24:	4619      	mov	r1, r3
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f7ff ff0a 	bl	800a940 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ab2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab30:	2118      	movs	r1, #24
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 fa18 	bl	800af68 <SDMMC_GetCmdResp1>
 800ab38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab3a:	69fb      	ldr	r3, [r7, #28]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3720      	adds	r7, #32
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b088      	sub	sp, #32
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ab52:	2319      	movs	r3, #25
 800ab54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab66:	f107 0308 	add.w	r3, r7, #8
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f7ff fee7 	bl	800a940 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ab72:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab76:	2119      	movs	r1, #25
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f9f5 	bl	800af68 <SDMMC_GetCmdResp1>
 800ab7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab80:	69fb      	ldr	r3, [r7, #28]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3720      	adds	r7, #32
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
	...

0800ab8c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b088      	sub	sp, #32
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ab94:	2300      	movs	r3, #0
 800ab96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ab98:	230c      	movs	r3, #12
 800ab9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aba2:	2300      	movs	r3, #0
 800aba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aba6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800abaa:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abc4:	f107 0308 	add.w	r3, r7, #8
 800abc8:	4619      	mov	r1, r3
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f7ff feb8 	bl	800a940 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800abd0:	4a0b      	ldr	r2, [pc, #44]	@ (800ac00 <SDMMC_CmdStopTransfer+0x74>)
 800abd2:	210c      	movs	r1, #12
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 f9c7 	bl	800af68 <SDMMC_GetCmdResp1>
 800abda:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800abe8:	69fb      	ldr	r3, [r7, #28]
 800abea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800abee:	d101      	bne.n	800abf4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800abf0:	2300      	movs	r3, #0
 800abf2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800abf4:	69fb      	ldr	r3, [r7, #28]
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3720      	adds	r7, #32
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	05f5e100 	.word	0x05f5e100

0800ac04 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ac12:	2307      	movs	r3, #7
 800ac14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac26:	f107 0308 	add.w	r3, r7, #8
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f7ff fe87 	bl	800a940 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ac32:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac36:	2107      	movs	r1, #7
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 f995 	bl	800af68 <SDMMC_GetCmdResp1>
 800ac3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac40:	69fb      	ldr	r3, [r7, #28]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3720      	adds	r7, #32
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b088      	sub	sp, #32
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ac52:	2300      	movs	r3, #0
 800ac54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ac56:	2300      	movs	r3, #0
 800ac58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac68:	f107 0308 	add.w	r3, r7, #8
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f7ff fe66 	bl	800a940 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 fbb9 	bl	800b3ec <SDMMC_GetCmdError>
 800ac7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac7c:	69fb      	ldr	r3, [r7, #28]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3720      	adds	r7, #32
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b088      	sub	sp, #32
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ac8e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ac92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ac94:	2308      	movs	r3, #8
 800ac96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aca6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aca8:	f107 0308 	add.w	r3, r7, #8
 800acac:	4619      	mov	r1, r3
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7ff fe46 	bl	800a940 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 fb4b 	bl	800b350 <SDMMC_GetCmdResp7>
 800acba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acbc:	69fb      	ldr	r3, [r7, #28]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3720      	adds	r7, #32
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b088      	sub	sp, #32
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
 800acce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800acd4:	2337      	movs	r3, #55	@ 0x37
 800acd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800acdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acde:	2300      	movs	r3, #0
 800ace0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ace2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ace6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ace8:	f107 0308 	add.w	r3, r7, #8
 800acec:	4619      	mov	r1, r3
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f7ff fe26 	bl	800a940 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800acf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acf8:	2137      	movs	r1, #55	@ 0x37
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 f934 	bl	800af68 <SDMMC_GetCmdResp1>
 800ad00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad02:	69fb      	ldr	r3, [r7, #28]
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3720      	adds	r7, #32
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b088      	sub	sp, #32
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ad1a:	2329      	movs	r3, #41	@ 0x29
 800ad1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad24:	2300      	movs	r3, #0
 800ad26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad2e:	f107 0308 	add.w	r3, r7, #8
 800ad32:	4619      	mov	r1, r3
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f7ff fe03 	bl	800a940 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fa50 	bl	800b1e0 <SDMMC_GetCmdResp3>
 800ad40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad42:	69fb      	ldr	r3, [r7, #28]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3720      	adds	r7, #32
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b088      	sub	sp, #32
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ad5a:	2306      	movs	r3, #6
 800ad5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad64:	2300      	movs	r3, #0
 800ad66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad6e:	f107 0308 	add.w	r3, r7, #8
 800ad72:	4619      	mov	r1, r3
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f7ff fde3 	bl	800a940 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ad7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad7e:	2106      	movs	r1, #6
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f8f1 	bl	800af68 <SDMMC_GetCmdResp1>
 800ad86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad88:	69fb      	ldr	r3, [r7, #28]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3720      	adds	r7, #32
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b088      	sub	sp, #32
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ad9e:	2333      	movs	r3, #51	@ 0x33
 800ada0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ada2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ada6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ada8:	2300      	movs	r3, #0
 800adaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800adb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adb2:	f107 0308 	add.w	r3, r7, #8
 800adb6:	4619      	mov	r1, r3
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f7ff fdc1 	bl	800a940 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800adbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adc2:	2133      	movs	r1, #51	@ 0x33
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 f8cf 	bl	800af68 <SDMMC_GetCmdResp1>
 800adca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adcc:	69fb      	ldr	r3, [r7, #28]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3720      	adds	r7, #32
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}

0800add6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b088      	sub	sp, #32
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800adde:	2300      	movs	r3, #0
 800ade0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ade2:	2302      	movs	r3, #2
 800ade4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ade6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800adea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adec:	2300      	movs	r3, #0
 800adee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800adf4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adf6:	f107 0308 	add.w	r3, r7, #8
 800adfa:	4619      	mov	r1, r3
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f7ff fd9f 	bl	800a940 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 f9a2 	bl	800b14c <SDMMC_GetCmdResp2>
 800ae08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae0a:	69fb      	ldr	r3, [r7, #28]
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3720      	adds	r7, #32
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b088      	sub	sp, #32
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ae22:	2309      	movs	r3, #9
 800ae24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ae26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ae2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae36:	f107 0308 	add.w	r3, r7, #8
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7ff fd7f 	bl	800a940 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 f982 	bl	800b14c <SDMMC_GetCmdResp2>
 800ae48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae4a:	69fb      	ldr	r3, [r7, #28]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3720      	adds	r7, #32
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b088      	sub	sp, #32
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ae62:	2303      	movs	r3, #3
 800ae64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ae6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae76:	f107 0308 	add.w	r3, r7, #8
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7ff fd5f 	bl	800a940 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ae82:	683a      	ldr	r2, [r7, #0]
 800ae84:	2103      	movs	r1, #3
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f9ea 	bl	800b260 <SDMMC_GetCmdResp6>
 800ae8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae8e:	69fb      	ldr	r3, [r7, #28]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3720      	adds	r7, #32
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b088      	sub	sp, #32
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aea6:	230d      	movs	r3, #13
 800aea8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeaa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aeae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aeb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aeba:	f107 0308 	add.w	r3, r7, #8
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7ff fd3d 	bl	800a940 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800aec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aeca:	210d      	movs	r1, #13
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 f84b 	bl	800af68 <SDMMC_GetCmdResp1>
 800aed2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aed4:	69fb      	ldr	r3, [r7, #28]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3720      	adds	r7, #32
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b088      	sub	sp, #32
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800aee6:	2300      	movs	r3, #0
 800aee8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800aeea:	230d      	movs	r3, #13
 800aeec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aef2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aef4:	2300      	movs	r3, #0
 800aef6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aef8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aefc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aefe:	f107 0308 	add.w	r3, r7, #8
 800af02:	4619      	mov	r1, r3
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f7ff fd1b 	bl	800a940 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800af0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af0e:	210d      	movs	r1, #13
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 f829 	bl	800af68 <SDMMC_GetCmdResp1>
 800af16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af18:	69fb      	ldr	r3, [r7, #28]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3720      	adds	r7, #32
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b088      	sub	sp, #32
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800af30:	2306      	movs	r3, #6
 800af32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af3a:	2300      	movs	r3, #0
 800af3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af44:	f107 0308 	add.w	r3, r7, #8
 800af48:	4619      	mov	r1, r3
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f7ff fcf8 	bl	800a940 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800af50:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af54:	2106      	movs	r1, #6
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f806 	bl	800af68 <SDMMC_GetCmdResp1>
 800af5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af5e:	69fb      	ldr	r3, [r7, #28]
}
 800af60:	4618      	mov	r0, r3
 800af62:	3720      	adds	r7, #32
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b088      	sub	sp, #32
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	460b      	mov	r3, r1
 800af72:	607a      	str	r2, [r7, #4]
 800af74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800af76:	4b70      	ldr	r3, [pc, #448]	@ (800b138 <SDMMC_GetCmdResp1+0x1d0>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a70      	ldr	r2, [pc, #448]	@ (800b13c <SDMMC_GetCmdResp1+0x1d4>)
 800af7c:	fba2 2303 	umull	r2, r3, r2, r3
 800af80:	0a5a      	lsrs	r2, r3, #9
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	fb02 f303 	mul.w	r3, r2, r3
 800af88:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	1e5a      	subs	r2, r3, #1
 800af8e:	61fa      	str	r2, [r7, #28]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d102      	bne.n	800af9a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800af98:	e0c9      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af9e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800afa0:	69ba      	ldr	r2, [r7, #24]
 800afa2:	4b67      	ldr	r3, [pc, #412]	@ (800b140 <SDMMC_GetCmdResp1+0x1d8>)
 800afa4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d0ef      	beq.n	800af8a <SDMMC_GetCmdResp1+0x22>
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1ea      	bne.n	800af8a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afb8:	f003 0304 	and.w	r3, r3, #4
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d004      	beq.n	800afca <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2204      	movs	r2, #4
 800afc4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800afc6:	2304      	movs	r3, #4
 800afc8:	e0b1      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afce:	f003 0301 	and.w	r3, r3, #1
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d004      	beq.n	800afe0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2201      	movs	r2, #1
 800afda:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afdc:	2301      	movs	r3, #1
 800afde:	e0a6      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	4a58      	ldr	r2, [pc, #352]	@ (800b144 <SDMMC_GetCmdResp1+0x1dc>)
 800afe4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f7ff fcd4 	bl	800a994 <SDMMC_GetCommandResponse>
 800afec:	4603      	mov	r3, r0
 800afee:	461a      	mov	r2, r3
 800aff0:	7afb      	ldrb	r3, [r7, #11]
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d001      	beq.n	800affa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e099      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800affa:	2100      	movs	r1, #0
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f7ff fcd6 	bl	800a9ae <SDMMC_GetResponse>
 800b002:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b004:	697a      	ldr	r2, [r7, #20]
 800b006:	4b50      	ldr	r3, [pc, #320]	@ (800b148 <SDMMC_GetCmdResp1+0x1e0>)
 800b008:	4013      	ands	r3, r2
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d101      	bne.n	800b012 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b00e:	2300      	movs	r3, #0
 800b010:	e08d      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	2b00      	cmp	r3, #0
 800b016:	da02      	bge.n	800b01e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b018:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b01c:	e087      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b024:	2b00      	cmp	r3, #0
 800b026:	d001      	beq.n	800b02c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b028:	2340      	movs	r3, #64	@ 0x40
 800b02a:	e080      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b032:	2b00      	cmp	r3, #0
 800b034:	d001      	beq.n	800b03a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b036:	2380      	movs	r3, #128	@ 0x80
 800b038:	e079      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b044:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b048:	e071      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b050:	2b00      	cmp	r3, #0
 800b052:	d002      	beq.n	800b05a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b054:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b058:	e069      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b060:	2b00      	cmp	r3, #0
 800b062:	d002      	beq.n	800b06a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b064:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b068:	e061      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b070:	2b00      	cmp	r3, #0
 800b072:	d002      	beq.n	800b07a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b074:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b078:	e059      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b080:	2b00      	cmp	r3, #0
 800b082:	d002      	beq.n	800b08a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b084:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b088:	e051      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b090:	2b00      	cmp	r3, #0
 800b092:	d002      	beq.n	800b09a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b094:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b098:	e049      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d002      	beq.n	800b0aa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b0a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b0a8:	e041      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d002      	beq.n	800b0ba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b0b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0b8:	e039      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d002      	beq.n	800b0ca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b0c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b0c8:	e031      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d002      	beq.n	800b0da <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b0d4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b0d8:	e029      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d002      	beq.n	800b0ea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b0e4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b0e8:	e021      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d002      	beq.n	800b0fa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b0f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b0f8:	e019      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b100:	2b00      	cmp	r3, #0
 800b102:	d002      	beq.n	800b10a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b104:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b108:	e011      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b110:	2b00      	cmp	r3, #0
 800b112:	d002      	beq.n	800b11a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b114:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b118:	e009      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	f003 0308 	and.w	r3, r3, #8
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b124:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b128:	e001      	b.n	800b12e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b12a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3720      	adds	r7, #32
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	20000000 	.word	0x20000000
 800b13c:	10624dd3 	.word	0x10624dd3
 800b140:	00200045 	.word	0x00200045
 800b144:	002000c5 	.word	0x002000c5
 800b148:	fdffe008 	.word	0xfdffe008

0800b14c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b154:	4b1f      	ldr	r3, [pc, #124]	@ (800b1d4 <SDMMC_GetCmdResp2+0x88>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a1f      	ldr	r2, [pc, #124]	@ (800b1d8 <SDMMC_GetCmdResp2+0x8c>)
 800b15a:	fba2 2303 	umull	r2, r3, r2, r3
 800b15e:	0a5b      	lsrs	r3, r3, #9
 800b160:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b164:	fb02 f303 	mul.w	r3, r2, r3
 800b168:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	1e5a      	subs	r2, r3, #1
 800b16e:	60fa      	str	r2, [r7, #12]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d102      	bne.n	800b17a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b174:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b178:	e026      	b.n	800b1c8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b17e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b186:	2b00      	cmp	r3, #0
 800b188:	d0ef      	beq.n	800b16a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1ea      	bne.n	800b16a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b198:	f003 0304 	and.w	r3, r3, #4
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d004      	beq.n	800b1aa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2204      	movs	r2, #4
 800b1a4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1a6:	2304      	movs	r3, #4
 800b1a8:	e00e      	b.n	800b1c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1ae:	f003 0301 	and.w	r3, r3, #1
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d004      	beq.n	800b1c0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	e003      	b.n	800b1c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a06      	ldr	r2, [pc, #24]	@ (800b1dc <SDMMC_GetCmdResp2+0x90>)
 800b1c4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3714      	adds	r7, #20
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr
 800b1d4:	20000000 	.word	0x20000000
 800b1d8:	10624dd3 	.word	0x10624dd3
 800b1dc:	002000c5 	.word	0x002000c5

0800b1e0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b1e8:	4b1a      	ldr	r3, [pc, #104]	@ (800b254 <SDMMC_GetCmdResp3+0x74>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a1a      	ldr	r2, [pc, #104]	@ (800b258 <SDMMC_GetCmdResp3+0x78>)
 800b1ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f2:	0a5b      	lsrs	r3, r3, #9
 800b1f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1f8:	fb02 f303 	mul.w	r3, r2, r3
 800b1fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	1e5a      	subs	r2, r3, #1
 800b202:	60fa      	str	r2, [r7, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d102      	bne.n	800b20e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b208:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b20c:	e01b      	b.n	800b246 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b212:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d0ef      	beq.n	800b1fe <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1ea      	bne.n	800b1fe <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b22c:	f003 0304 	and.w	r3, r3, #4
 800b230:	2b00      	cmp	r3, #0
 800b232:	d004      	beq.n	800b23e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2204      	movs	r2, #4
 800b238:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b23a:	2304      	movs	r3, #4
 800b23c:	e003      	b.n	800b246 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	4a06      	ldr	r2, [pc, #24]	@ (800b25c <SDMMC_GetCmdResp3+0x7c>)
 800b242:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b244:	2300      	movs	r3, #0
}
 800b246:	4618      	mov	r0, r3
 800b248:	3714      	adds	r7, #20
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	20000000 	.word	0x20000000
 800b258:	10624dd3 	.word	0x10624dd3
 800b25c:	002000c5 	.word	0x002000c5

0800b260 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b088      	sub	sp, #32
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	460b      	mov	r3, r1
 800b26a:	607a      	str	r2, [r7, #4]
 800b26c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b26e:	4b35      	ldr	r3, [pc, #212]	@ (800b344 <SDMMC_GetCmdResp6+0xe4>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a35      	ldr	r2, [pc, #212]	@ (800b348 <SDMMC_GetCmdResp6+0xe8>)
 800b274:	fba2 2303 	umull	r2, r3, r2, r3
 800b278:	0a5b      	lsrs	r3, r3, #9
 800b27a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b27e:	fb02 f303 	mul.w	r3, r2, r3
 800b282:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	1e5a      	subs	r2, r3, #1
 800b288:	61fa      	str	r2, [r7, #28]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d102      	bne.n	800b294 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b28e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b292:	e052      	b.n	800b33a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b298:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d0ef      	beq.n	800b284 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1ea      	bne.n	800b284 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2b2:	f003 0304 	and.w	r3, r3, #4
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d004      	beq.n	800b2c4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2204      	movs	r2, #4
 800b2be:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b2c0:	2304      	movs	r3, #4
 800b2c2:	e03a      	b.n	800b33a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2c8:	f003 0301 	and.w	r3, r3, #1
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d004      	beq.n	800b2da <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e02f      	b.n	800b33a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f7ff fb5a 	bl	800a994 <SDMMC_GetCommandResponse>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	7afb      	ldrb	r3, [r7, #11]
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d001      	beq.n	800b2ee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e025      	b.n	800b33a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	4a16      	ldr	r2, [pc, #88]	@ (800b34c <SDMMC_GetCmdResp6+0xec>)
 800b2f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f7ff fb59 	bl	800a9ae <SDMMC_GetResponse>
 800b2fc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b304:	2b00      	cmp	r3, #0
 800b306:	d106      	bne.n	800b316 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	0c1b      	lsrs	r3, r3, #16
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b312:	2300      	movs	r3, #0
 800b314:	e011      	b.n	800b33a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d002      	beq.n	800b326 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b320:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b324:	e009      	b.n	800b33a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b330:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b334:	e001      	b.n	800b33a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b336:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3720      	adds	r7, #32
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	20000000 	.word	0x20000000
 800b348:	10624dd3 	.word	0x10624dd3
 800b34c:	002000c5 	.word	0x002000c5

0800b350 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b358:	4b22      	ldr	r3, [pc, #136]	@ (800b3e4 <SDMMC_GetCmdResp7+0x94>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a22      	ldr	r2, [pc, #136]	@ (800b3e8 <SDMMC_GetCmdResp7+0x98>)
 800b35e:	fba2 2303 	umull	r2, r3, r2, r3
 800b362:	0a5b      	lsrs	r3, r3, #9
 800b364:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b368:	fb02 f303 	mul.w	r3, r2, r3
 800b36c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	1e5a      	subs	r2, r3, #1
 800b372:	60fa      	str	r2, [r7, #12]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d102      	bne.n	800b37e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b378:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b37c:	e02c      	b.n	800b3d8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b382:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d0ef      	beq.n	800b36e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1ea      	bne.n	800b36e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b39c:	f003 0304 	and.w	r3, r3, #4
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d004      	beq.n	800b3ae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2204      	movs	r2, #4
 800b3a8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3aa:	2304      	movs	r3, #4
 800b3ac:	e014      	b.n	800b3d8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3b2:	f003 0301 	and.w	r3, r3, #1
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d004      	beq.n	800b3c4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	e009      	b.n	800b3d8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d002      	beq.n	800b3d6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2240      	movs	r2, #64	@ 0x40
 800b3d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b3d6:	2300      	movs	r3, #0

}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3714      	adds	r7, #20
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr
 800b3e4:	20000000 	.word	0x20000000
 800b3e8:	10624dd3 	.word	0x10624dd3

0800b3ec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b3f4:	4b11      	ldr	r3, [pc, #68]	@ (800b43c <SDMMC_GetCmdError+0x50>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a11      	ldr	r2, [pc, #68]	@ (800b440 <SDMMC_GetCmdError+0x54>)
 800b3fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b3fe:	0a5b      	lsrs	r3, r3, #9
 800b400:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b404:	fb02 f303 	mul.w	r3, r2, r3
 800b408:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	1e5a      	subs	r2, r3, #1
 800b40e:	60fa      	str	r2, [r7, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d102      	bne.n	800b41a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b414:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b418:	e009      	b.n	800b42e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b41e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b422:	2b00      	cmp	r3, #0
 800b424:	d0f1      	beq.n	800b40a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	4a06      	ldr	r2, [pc, #24]	@ (800b444 <SDMMC_GetCmdError+0x58>)
 800b42a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3714      	adds	r7, #20
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	20000000 	.word	0x20000000
 800b440:	10624dd3 	.word	0x10624dd3
 800b444:	002000c5 	.word	0x002000c5

0800b448 <__AVI_SearchID>:
  * @param  size:
  * @param  id:
  * @retval ID
  */
uint32_t __AVI_SearchID(uint8_t* buf,  uint32_t size, uint8_t *id)
{
 800b448:	b480      	push	{r7}
 800b44a:	b087      	sub	sp, #28
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
 uint16_t i;
  size-=4;
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	3b04      	subs	r3, #4
 800b458:	60bb      	str	r3, [r7, #8]
  for(i=0;i<size;i++)
 800b45a:	2300      	movs	r3, #0
 800b45c:	82fb      	strh	r3, [r7, #22]
 800b45e:	e02a      	b.n	800b4b6 <__AVI_SearchID+0x6e>
  {
    if(buf[i] == id[0])
 800b460:	8afb      	ldrh	r3, [r7, #22]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	4413      	add	r3, r2
 800b466:	781a      	ldrb	r2, [r3, #0]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d11f      	bne.n	800b4b0 <__AVI_SearchID+0x68>
      if(buf[i+1] == id[1])
 800b470:	8afb      	ldrh	r3, [r7, #22]
 800b472:	3301      	adds	r3, #1
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	4413      	add	r3, r2
 800b478:	781a      	ldrb	r2, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	3301      	adds	r3, #1
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	429a      	cmp	r2, r3
 800b482:	d115      	bne.n	800b4b0 <__AVI_SearchID+0x68>
        if(buf[i+2] == id[2])  
 800b484:	8afb      	ldrh	r3, [r7, #22]
 800b486:	3302      	adds	r3, #2
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	4413      	add	r3, r2
 800b48c:	781a      	ldrb	r2, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	3302      	adds	r3, #2
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	429a      	cmp	r2, r3
 800b496:	d10b      	bne.n	800b4b0 <__AVI_SearchID+0x68>
          if(buf[i+3] == id[3])
 800b498:	8afb      	ldrh	r3, [r7, #22]
 800b49a:	3303      	adds	r3, #3
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	4413      	add	r3, r2
 800b4a0:	781a      	ldrb	r2, [r3, #0]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	3303      	adds	r3, #3
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d101      	bne.n	800b4b0 <__AVI_SearchID+0x68>
            return i;  
 800b4ac:	8afb      	ldrh	r3, [r7, #22]
 800b4ae:	e007      	b.n	800b4c0 <__AVI_SearchID+0x78>
  for(i=0;i<size;i++)
 800b4b0:	8afb      	ldrh	r3, [r7, #22]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	82fb      	strh	r3, [r7, #22]
 800b4b6:	8afb      	ldrh	r3, [r7, #22]
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d8d0      	bhi.n	800b460 <__AVI_SearchID+0x18>
  }
  return 0;    
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	371c      	adds	r7, #28
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <__AVI_GetStreamInfo>:
  * @param  havi: AVI handle
  * @param  buf:   
  * @retval AVI status
  */
AVISTATUS __AVI_GetStreamInfo( AVI_CONTEXT * pavi, uint8_t* buf)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	3302      	adds	r3, #2
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	021b      	lsls	r3, r3, #8
 800b4de:	b21a      	sxth	r2, r3
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	3303      	adds	r3, #3
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	b21b      	sxth	r3, r3
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	b21b      	sxth	r3, r3
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	83da      	strh	r2, [r3, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	3304      	adds	r3, #4
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	3305      	adds	r3, #5
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	021b      	lsls	r3, r3, #8
 800b502:	431a      	orrs	r2, r3
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	3306      	adds	r3, #6
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	041b      	lsls	r3, r3, #16
 800b50c:	431a      	orrs	r2, r3
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	3307      	adds	r3, #7
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	061b      	lsls	r3, r3, #24
 800b516:	4313      	orrs	r3, r2
 800b518:	461a      	mov	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	621a      	str	r2, [r3, #32]
  
  if(pavi->aviInfo.StreamSize%2)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a1b      	ldr	r3, [r3, #32]
 800b522:	f003 0301 	and.w	r3, r3, #1
 800b526:	2b00      	cmp	r3, #0
 800b528:	d004      	beq.n	800b534 <__AVI_GetStreamInfo+0x68>
    pavi->aviInfo.StreamSize++;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a1b      	ldr	r3, [r3, #32]
 800b52e:	1c5a      	adds	r2, r3, #1
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	621a      	str	r2, [r3, #32]
  
  if((pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG) || (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	8bdb      	ldrh	r3, [r3, #30]
 800b538:	f246 4263 	movw	r2, #25699	@ 0x6463
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d005      	beq.n	800b54c <__AVI_GetStreamInfo+0x80>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	8bdb      	ldrh	r3, [r3, #30]
 800b544:	f247 7262 	movw	r2, #30562	@ 0x7762
 800b548:	4293      	cmp	r3, r2
 800b54a:	d101      	bne.n	800b550 <__AVI_GetStreamInfo+0x84>
  {
    return AVI_OK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	e000      	b.n	800b552 <__AVI_GetStreamInfo+0x86>
  }
  
  return AVI_STREAM_ERR;  
 800b550:	230b      	movs	r3, #11
}
 800b552:	4618      	mov	r0, r3
 800b554:	370c      	adds	r7, #12
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr
	...

0800b560 <__AVI_Init>:
  * @param  buf:
  * @param  size: AVI file size     
  * @retval AVI status
  */
AVISTATUS __AVI_Init( AVI_CONTEXT * pavi, uint8_t *buf, uint32_t size)     
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b08e      	sub	sp, #56	@ 0x38
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	607a      	str	r2, [r7, #4]
  uint16_t offset;
  uint8_t *tbuf;
  AVISTATUS   res = AVI_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  STRH_HEADER *strhheader; 
  
  STRF_BMPHEADER *bmpheader; 
  STRF_WAVHEADER *wavheader; 
  
  tbuf=buf;
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	633b      	str	r3, [r7, #48]	@ 0x30
  aviheader=(AVI_HEADER*)buf; 
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(aviheader->RiffID != AVI_RIFF_ID)
 800b57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a87      	ldr	r2, [pc, #540]	@ (800b79c <__AVI_Init+0x23c>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d001      	beq.n	800b588 <__AVI_Init+0x28>
  {
    return AVI_RIFF_ERR;
 800b584:	2301      	movs	r3, #1
 800b586:	e170      	b.n	800b86a <__AVI_Init+0x30a>
  }
  
  if(aviheader->AviID != AVI_AVI_ID)
 800b588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	4a84      	ldr	r2, [pc, #528]	@ (800b7a0 <__AVI_Init+0x240>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d001      	beq.n	800b596 <__AVI_Init+0x36>
  {
    return AVI_AVI_ERR;  
 800b592:	2302      	movs	r3, #2
 800b594:	e169      	b.n	800b86a <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(AVI_HEADER);            
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	330c      	adds	r3, #12
 800b59a:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf);
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800b5a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a7f      	ldr	r2, [pc, #508]	@ (800b7a4 <__AVI_Init+0x244>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d001      	beq.n	800b5ae <__AVI_Init+0x4e>
  {
    return AVI_LIST_ERR;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	e15d      	b.n	800b86a <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_HDRL_ID)
 800b5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	4a7d      	ldr	r2, [pc, #500]	@ (800b7a8 <__AVI_Init+0x248>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d001      	beq.n	800b5bc <__AVI_Init+0x5c>
  {
    return AVI_HDRL_ERR;
 800b5b8:	2304      	movs	r3, #4
 800b5ba:	e156      	b.n	800b86a <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(LIST_HEADER);            
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	330c      	adds	r3, #12
 800b5c0:	60bb      	str	r3, [r7, #8]
  avihheader=(AVIH_HEADER*)(buf);                                   
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if(avihheader->BlockID != AVI_AVIH_ID)
 800b5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a78      	ldr	r2, [pc, #480]	@ (800b7ac <__AVI_Init+0x24c>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d001      	beq.n	800b5d4 <__AVI_Init+0x74>
  {
    return AVI_AVIH_ERR;
 800b5d0:	2305      	movs	r3, #5
 800b5d2:	e14a      	b.n	800b86a <__AVI_Init+0x30a>
  }
  
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d6:	689a      	ldr	r2, [r3, #8]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	601a      	str	r2, [r3, #0]
  pavi->aviInfo.TotalFrame=avihheader->TotalFrame;          
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5de:	699a      	ldr	r2, [r3, #24]
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	605a      	str	r2, [r3, #4]
  buf+=avihheader->BlockSize+8;            
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	3308      	adds	r3, #8
 800b5ea:	68ba      	ldr	r2, [r7, #8]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf); 
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800b5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a6a      	ldr	r2, [pc, #424]	@ (800b7a4 <__AVI_Init+0x244>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d001      	beq.n	800b602 <__AVI_Init+0xa2>
  {
    return AVI_LIST_ERR;
 800b5fe:	2303      	movs	r3, #3
 800b600:	e133      	b.n	800b86a <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_STRL_ID)
 800b602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	4a6a      	ldr	r2, [pc, #424]	@ (800b7b0 <__AVI_Init+0x250>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d001      	beq.n	800b610 <__AVI_Init+0xb0>
  {
    return AVI_STRL_ERR;
 800b60c:	2306      	movs	r3, #6
 800b60e:	e12c      	b.n	800b86a <__AVI_Init+0x30a>
  }
  
  strhheader=(STRH_HEADER*)(buf+12);                                
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	330c      	adds	r3, #12
 800b614:	623b      	str	r3, [r7, #32]
  if(strhheader->BlockID != AVI_STRH_ID)
 800b616:	6a3b      	ldr	r3, [r7, #32]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a66      	ldr	r2, [pc, #408]	@ (800b7b4 <__AVI_Init+0x254>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d001      	beq.n	800b624 <__AVI_Init+0xc4>
  {
    return AVI_STRH_ERR;
 800b620:	2307      	movs	r3, #7
 800b622:	e122      	b.n	800b86a <__AVI_Init+0x30a>
  }
  
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 800b624:	6a3b      	ldr	r3, [r7, #32]
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	4a63      	ldr	r2, [pc, #396]	@ (800b7b8 <__AVI_Init+0x258>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d16a      	bne.n	800b704 <__AVI_Init+0x1a4>
  {
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 800b62e:	6a3b      	ldr	r3, [r7, #32]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	4a62      	ldr	r2, [pc, #392]	@ (800b7bc <__AVI_Init+0x25c>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d001      	beq.n	800b63c <__AVI_Init+0xdc>
    {
      return AVI_FORMAT_ERR;
 800b638:	230a      	movs	r3, #10
 800b63a:	e116      	b.n	800b86a <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 800b63c:	4a60      	ldr	r2, [pc, #384]	@ (800b7c0 <__AVI_Init+0x260>)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 800b642:	4a60      	ldr	r2, [pc, #384]	@ (800b7c4 <__AVI_Init+0x264>)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	629a      	str	r2, [r3, #40]	@ 0x28
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800b648:	6a3b      	ldr	r3, [r7, #32]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	3314      	adds	r3, #20
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	4413      	add	r3, r2
 800b652:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800b654:	69bb      	ldr	r3, [r7, #24]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4a5b      	ldr	r2, [pc, #364]	@ (800b7c8 <__AVI_Init+0x268>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d001      	beq.n	800b662 <__AVI_Init+0x102>
    {
      return AVI_STRF_ERR;
 800b65e:	2308      	movs	r3, #8
 800b660:	e103      	b.n	800b86a <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	68da      	ldr	r2, [r3, #12]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height; 
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	691a      	ldr	r2, [r3, #16]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	611a      	str	r2, [r3, #16]
    buf+=listheader->BlockSize+8;          
 800b672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	3308      	adds	r3, #8
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	4413      	add	r3, r2
 800b67c:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800b682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a47      	ldr	r2, [pc, #284]	@ (800b7a4 <__AVI_Init+0x244>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d009      	beq.n	800b6a0 <__AVI_Init+0x140>
    {
      pavi->aviInfo.SampleRate=0;          
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2200      	movs	r2, #0
 800b690:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=0;          
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2200      	movs	r2, #0
 800b696:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=0;          
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	839a      	strh	r2, [r3, #28]
 800b69e:	e0b7      	b.n	800b810 <__AVI_Init+0x2b0>
      
    }else
    {      
      if(listheader->ListType != AVI_STRL_ID)
 800b6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	4a42      	ldr	r2, [pc, #264]	@ (800b7b0 <__AVI_Init+0x250>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d001      	beq.n	800b6ae <__AVI_Init+0x14e>
      {
        return AVI_STRL_ERR;    
 800b6aa:	2306      	movs	r3, #6
 800b6ac:	e0dd      	b.n	800b86a <__AVI_Init+0x30a>
      }
      
      strhheader=(STRH_HEADER*)(buf+12);
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	330c      	adds	r3, #12
 800b6b2:	623b      	str	r3, [r7, #32]
      if(strhheader->BlockID != AVI_STRH_ID)
 800b6b4:	6a3b      	ldr	r3, [r7, #32]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a3e      	ldr	r2, [pc, #248]	@ (800b7b4 <__AVI_Init+0x254>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d001      	beq.n	800b6c2 <__AVI_Init+0x162>
      {
        return AVI_STRH_ERR;
 800b6be:	2307      	movs	r3, #7
 800b6c0:	e0d3      	b.n	800b86a <__AVI_Init+0x30a>
      }
      
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 800b6c2:	6a3b      	ldr	r3, [r7, #32]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	4a41      	ldr	r2, [pc, #260]	@ (800b7cc <__AVI_Init+0x26c>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d001      	beq.n	800b6d0 <__AVI_Init+0x170>
      {
        return AVI_FORMAT_ERR;
 800b6cc:	230a      	movs	r3, #10
 800b6ce:	e0cc      	b.n	800b86a <__AVI_Init+0x30a>
      }
      
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800b6d0:	6a3b      	ldr	r3, [r7, #32]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	3314      	adds	r3, #20
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	4413      	add	r3, r2
 800b6da:	61fb      	str	r3, [r7, #28]
      if(wavheader->BlockID != AVI_STRF_ID)
 800b6dc:	69fb      	ldr	r3, [r7, #28]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a39      	ldr	r2, [pc, #228]	@ (800b7c8 <__AVI_Init+0x268>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d001      	beq.n	800b6ea <__AVI_Init+0x18a>
      {
        return AVI_STRF_ERR;
 800b6e6:	2308      	movs	r3, #8
 800b6e8:	e0bf      	b.n	800b86a <__AVI_Init+0x30a>
      }
      
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	68da      	ldr	r2, [r3, #12]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	895a      	ldrh	r2, [r3, #10]
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	891a      	ldrh	r2, [r3, #8]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	839a      	strh	r2, [r3, #28]
 800b702:	e085      	b.n	800b810 <__AVI_Init+0x2b0>
    }
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 800b704:	6a3b      	ldr	r3, [r7, #32]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	4a30      	ldr	r2, [pc, #192]	@ (800b7cc <__AVI_Init+0x26c>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	f040 8080 	bne.w	800b810 <__AVI_Init+0x2b0>
  { 
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 800b710:	4a2f      	ldr	r2, [pc, #188]	@ (800b7d0 <__AVI_Init+0x270>)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 800b716:	4a2f      	ldr	r2, [pc, #188]	@ (800b7d4 <__AVI_Init+0x274>)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	629a      	str	r2, [r3, #40]	@ 0x28
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800b71c:	6a3b      	ldr	r3, [r7, #32]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	3314      	adds	r3, #20
 800b722:	68ba      	ldr	r2, [r7, #8]
 800b724:	4413      	add	r3, r2
 800b726:	61fb      	str	r3, [r7, #28]
    if(wavheader->BlockID != AVI_STRF_ID)
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a26      	ldr	r2, [pc, #152]	@ (800b7c8 <__AVI_Init+0x268>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d001      	beq.n	800b736 <__AVI_Init+0x1d6>
    {
      return AVI_STRF_ERR;
 800b732:	2308      	movs	r3, #8
 800b734:	e099      	b.n	800b86a <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	68da      	ldr	r2, [r3, #12]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	615a      	str	r2, [r3, #20]
    pavi->aviInfo.Channels=wavheader->Channels;        
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	895a      	ldrh	r2, [r3, #10]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	831a      	strh	r2, [r3, #24]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	891a      	ldrh	r2, [r3, #8]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	839a      	strh	r2, [r3, #28]
    buf+=listheader->BlockSize+8;          
 800b74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	3308      	adds	r3, #8
 800b754:	68ba      	ldr	r2, [r7, #8]
 800b756:	4413      	add	r3, r2
 800b758:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800b75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a10      	ldr	r2, [pc, #64]	@ (800b7a4 <__AVI_Init+0x244>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d001      	beq.n	800b76c <__AVI_Init+0x20c>
    {
      return AVI_LIST_ERR;  
 800b768:	2303      	movs	r3, #3
 800b76a:	e07e      	b.n	800b86a <__AVI_Init+0x30a>
    }
    
    if(listheader->ListType != AVI_STRL_ID)
 800b76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	4a0f      	ldr	r2, [pc, #60]	@ (800b7b0 <__AVI_Init+0x250>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d001      	beq.n	800b77a <__AVI_Init+0x21a>
    {
      return AVI_STRL_ERR;  
 800b776:	2306      	movs	r3, #6
 800b778:	e077      	b.n	800b86a <__AVI_Init+0x30a>
    }
    
    strhheader=(STRH_HEADER*)(buf+12);
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	330c      	adds	r3, #12
 800b77e:	623b      	str	r3, [r7, #32]
    if(strhheader->BlockID != AVI_STRH_ID)
 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4a0b      	ldr	r2, [pc, #44]	@ (800b7b4 <__AVI_Init+0x254>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d001      	beq.n	800b78e <__AVI_Init+0x22e>
    {
      return AVI_STRH_ERR;
 800b78a:	2307      	movs	r3, #7
 800b78c:	e06d      	b.n	800b86a <__AVI_Init+0x30a>
    }
    
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 800b78e:	6a3b      	ldr	r3, [r7, #32]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	4a09      	ldr	r2, [pc, #36]	@ (800b7b8 <__AVI_Init+0x258>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d01f      	beq.n	800b7d8 <__AVI_Init+0x278>
    {
      return AVI_FORMAT_ERR;
 800b798:	230a      	movs	r3, #10
 800b79a:	e066      	b.n	800b86a <__AVI_Init+0x30a>
 800b79c:	46464952 	.word	0x46464952
 800b7a0:	20495641 	.word	0x20495641
 800b7a4:	5453494c 	.word	0x5453494c
 800b7a8:	6c726468 	.word	0x6c726468
 800b7ac:	68697661 	.word	0x68697661
 800b7b0:	6c727473 	.word	0x6c727473
 800b7b4:	68727473 	.word	0x68727473
 800b7b8:	73646976 	.word	0x73646976
 800b7bc:	47504a4d 	.word	0x47504a4d
 800b7c0:	08011614 	.word	0x08011614
 800b7c4:	0801162c 	.word	0x0801162c
 800b7c8:	66727473 	.word	0x66727473
 800b7cc:	73647561 	.word	0x73647561
 800b7d0:	0801161c 	.word	0x0801161c
 800b7d4:	08011624 	.word	0x08011624
    }
    
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800b7d8:	6a3b      	ldr	r3, [r7, #32]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	3314      	adds	r3, #20
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a22      	ldr	r2, [pc, #136]	@ (800b874 <__AVI_Init+0x314>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d001      	beq.n	800b7f2 <__AVI_Init+0x292>
    {
      return AVI_STRF_ERR;  
 800b7ee:	2308      	movs	r3, #8
 800b7f0:	e03b      	b.n	800b86a <__AVI_Init+0x30a>
    }
    
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	699b      	ldr	r3, [r3, #24]
 800b7f6:	4a20      	ldr	r2, [pc, #128]	@ (800b878 <__AVI_Init+0x318>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d001      	beq.n	800b800 <__AVI_Init+0x2a0>
    {
      return AVI_FORMAT_ERR;
 800b7fc:	230a      	movs	r3, #10
 800b7fe:	e034      	b.n	800b86a <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	68da      	ldr	r2, [r3, #12]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height;   
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	691a      	ldr	r2, [r3, #16]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	611a      	str	r2, [r3, #16]
  }
  offset= __AVI_SearchID(tbuf,size,(uint8_t*)"movi");
 800b810:	4a1a      	ldr	r2, [pc, #104]	@ (800b87c <__AVI_Init+0x31c>)
 800b812:	6879      	ldr	r1, [r7, #4]
 800b814:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b816:	f7ff fe17 	bl	800b448 <__AVI_SearchID>
 800b81a:	4603      	mov	r3, r0
 800b81c:	82fb      	strh	r3, [r7, #22]
  if(offset == 0)
 800b81e:	8afb      	ldrh	r3, [r7, #22]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <__AVI_Init+0x2c8>
  {
    return AVI_MOVI_ERR;
 800b824:	2309      	movs	r3, #9
 800b826:	e020      	b.n	800b86a <__AVI_Init+0x30a>
  }
  
  if(pavi->aviInfo.SampleRate)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	695b      	ldr	r3, [r3, #20]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d01a      	beq.n	800b866 <__AVI_Init+0x306>
  {
    tbuf+=offset;
 800b830:	8afb      	ldrh	r3, [r7, #22]
 800b832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b834:	4413      	add	r3, r2
 800b836:	633b      	str	r3, [r7, #48]	@ 0x30
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b83c:	461a      	mov	r2, r3
 800b83e:	6879      	ldr	r1, [r7, #4]
 800b840:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b842:	f7ff fe01 	bl	800b448 <__AVI_SearchID>
 800b846:	4603      	mov	r3, r0
 800b848:	82fb      	strh	r3, [r7, #22]
    if(offset == 0)
 800b84a:	8afb      	ldrh	r3, [r7, #22]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d101      	bne.n	800b854 <__AVI_Init+0x2f4>
    {
      return AVI_STREAM_ERR;
 800b850:	230b      	movs	r3, #11
 800b852:	e00a      	b.n	800b86a <__AVI_Init+0x30a>
    }
    
    tbuf+=offset+4;
 800b854:	8afb      	ldrh	r3, [r7, #22]
 800b856:	3304      	adds	r3, #4
 800b858:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b85a:	4413      	add	r3, r2
 800b85c:	633b      	str	r3, [r7, #48]	@ 0x30
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 800b85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b860:	881a      	ldrh	r2, [r3, #0]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	835a      	strh	r2, [r3, #26]
  }
  
  return res;
 800b866:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3738      	adds	r7, #56	@ 0x38
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	66727473 	.word	0x66727473
 800b878:	47504a4d 	.word	0x47504a4d
 800b87c:	08011634 	.word	0x08011634

0800b880 <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT * pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b086      	sub	sp, #24
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
 800b88c:	603b      	str	r3, [r7, #0]
  uint32_t readSize= 0;
 800b88e:	2300      	movs	r3, #0
 800b890:	617b      	str	r3, [r7, #20]
  
  pavi->pVideoBuffer = pVideoBuffer;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	635a      	str	r2, [r3, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	683a      	ldr	r2, [r7, #0]
 800b89c:	639a      	str	r2, [r3, #56]	@ 0x38

  pavi->pAudioBuffer = pAudioBuffer;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6a3a      	ldr	r2, [r7, #32]
 800b8a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  pavi->AudioBufferSize = AudioBufferSize;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8a8:	641a      	str	r2, [r3, #64]	@ 0x40
  
  f_lseek(file, 0 );
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	68b8      	ldr	r0, [r7, #8]
 800b8ae:	f004 fea0 	bl	80105f2 <f_lseek>
  
  f_read(file, pavi->pVideoBuffer, VideoBufferSize,(UINT*) &readSize );
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b8b6:	f107 0314 	add.w	r3, r7, #20
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	68b8      	ldr	r0, [r7, #8]
 800b8be:	f004 fcb1 	bl	8010224 <f_read>
  if(readSize != VideoBufferSize)
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	683a      	ldr	r2, [r7, #0]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d001      	beq.n	800b8ce <AVI_ParserInit+0x4e>
  {
    return 1;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e013      	b.n	800b8f6 <AVI_ParserInit+0x76>
  }
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8d2:	683a      	ldr	r2, [r7, #0]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	68f8      	ldr	r0, [r7, #12]
 800b8d8:	f7ff fe42 	bl	800b560 <__AVI_Init>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <AVI_ParserInit+0x66>
  {
    return 1;    
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e007      	b.n	800b8f6 <AVI_ParserInit+0x76>
  }

  pavi->FileSize= f_size(file);
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	68da      	ldr	r2, [r3, #12]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	645a      	str	r2, [r3, #68]	@ 0x44
  pavi->CurrentImage=0;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  return  0;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3718      	adds	r7, #24
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
	...

0800b900 <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT * pavi, FIL *file, uint8_t skipFlag)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b086      	sub	sp, #24
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	4613      	mov	r3, r2
 800b90c:	71fb      	strb	r3, [r7, #7]
  uint32_t  offset ;
  uint32_t readSize = 0;
 800b90e:	2300      	movs	r3, #0
 800b910:	613b      	str	r3, [r7, #16]
  
  if(pavi->CurrentImage== 0 )
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b916:	2b00      	cmp	r3, #0
 800b918:	d124      	bne.n	800b964 <AVI_GetFrame+0x64>
  {
    
    f_lseek(file, 0 ); /* Go to the file start */
 800b91a:	2100      	movs	r1, #0
 800b91c:	68b8      	ldr	r0, [r7, #8]
 800b91e:	f004 fe68 	bl	80105f2 <f_lseek>
    /* Read data*/
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b92a:	f107 0310 	add.w	r3, r7, #16
 800b92e:	68b8      	ldr	r0, [r7, #8]
 800b930:	f004 fc78 	bl	8010224 <f_read>
    
    /* Check for "movi" tag */
    offset = __AVI_SearchID(pavi->pVideoBuffer,pavi->VideoBufferSize,(uint8_t*)"movi");
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b93c:	4a49      	ldr	r2, [pc, #292]	@ (800ba64 <AVI_GetFrame+0x164>)
 800b93e:	4619      	mov	r1, r3
 800b940:	f7ff fd82 	bl	800b448 <__AVI_SearchID>
 800b944:	6178      	str	r0, [r7, #20]
    /* Read first Frame info*/
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	3304      	adds	r3, #4
 800b94e:	4413      	add	r3, r2
 800b950:	4619      	mov	r1, r3
 800b952:	68f8      	ldr	r0, [r7, #12]
 800b954:	f7ff fdba 	bl	800b4cc <__AVI_GetStreamInfo>
    /* go to the first frame offset in the avi file*/
    f_lseek(file, offset + 12 );
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	330c      	adds	r3, #12
 800b95c:	4619      	mov	r1, r3
 800b95e:	68b8      	ldr	r0, [r7, #8]
 800b960:	f004 fe47 	bl	80105f2 <f_lseek>
    
  }

  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	8bdb      	ldrh	r3, [r3, #30]
 800b968:	f246 4263 	movw	r2, #25699	@ 0x6463
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d158      	bne.n	800ba22 <AVI_GetFrame+0x122>
  {
    /* the Frame is a Video Frame */
       
	if(skipFlag == 1)
 800b970:	79fb      	ldrb	r3, [r7, #7]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d11b      	bne.n	800b9ae <AVI_GetFrame+0xae>
	{

		/* Get the current frame size */
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	6a1a      	ldr	r2, [r3, #32]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	631a      	str	r2, [r3, #48]	@ 0x30

		f_lseek(file, f_tell(file) + pavi->FrameSize);
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	699a      	ldr	r2, [r3, #24]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b986:	4413      	add	r3, r2
 800b988:	4619      	mov	r1, r3
 800b98a:	68b8      	ldr	r0, [r7, #8]
 800b98c:	f004 fe31 	bl	80105f2 <f_lseek>

	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b994:	f107 0310 	add.w	r3, r7, #16
 800b998:	2208      	movs	r2, #8
 800b99a:	68b8      	ldr	r0, [r7, #8]
 800b99c:	f004 fc42 	bl	8010224 <f_read>

	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	f7ff fd90 	bl	800b4cc <__AVI_GetStreamInfo>
 800b9ac:	e037      	b.n	800ba1e <AVI_GetFrame+0x11e>

	}
	else if(skipFlag == 2)
 800b9ae:	79fb      	ldrb	r3, [r7, #7]
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	d11c      	bne.n	800b9ee <AVI_GetFrame+0xee>
	{

		f_lseek(file, f_tell(file) - pavi->FrameSize - 8 - 8);
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	699a      	ldr	r2, [r3, #24]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9bc:	1ad3      	subs	r3, r2, r3
 800b9be:	3b10      	subs	r3, #16
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	68b8      	ldr	r0, [r7, #8]
 800b9c4:	f004 fe15 	bl	80105f2 <f_lseek>

	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b9cc:	f107 0310 	add.w	r3, r7, #16
 800b9d0:	2208      	movs	r2, #8
 800b9d2:	68b8      	ldr	r0, [r7, #8]
 800b9d4:	f004 fc26 	bl	8010224 <f_read>

	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9dc:	4619      	mov	r1, r3
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f7ff fd74 	bl	800b4cc <__AVI_GetStreamInfo>

		// Get the previous frame size
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	6a1a      	ldr	r2, [r3, #32]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	631a      	str	r2, [r3, #48]	@ 0x30
 800b9ec:	e017      	b.n	800ba1e <AVI_GetFrame+0x11e>
	}
	else
	{

		/* Get the current frame size */
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6a1a      	ldr	r2, [r3, #32]
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Read The current frame + the header of the next frame (8 bytes) */
		f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9fe:	f103 0208 	add.w	r2, r3, #8
 800ba02:	f107 0310 	add.w	r3, r7, #16
 800ba06:	68b8      	ldr	r0, [r7, #8]
 800ba08:	f004 fc0c 	bl	8010224 <f_read>

		/* Get the info of the next frame */
		__AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6a1b      	ldr	r3, [r3, #32]
 800ba14:	4413      	add	r3, r2
 800ba16:	4619      	mov	r1, r3
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	f7ff fd57 	bl	800b4cc <__AVI_GetStreamInfo>
    	/* Return VIDEO frame */

	}
    
    return AVI_VIDEO_FRAME;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e01c      	b.n	800ba5c <AVI_GetFrame+0x15c>
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	8bdb      	ldrh	r3, [r3, #30]
 800ba26:	f247 7262 	movw	r2, #30562	@ 0x7762
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d115      	bne.n	800ba5a <AVI_GetFrame+0x15a>
  { /* the Frame is an Audio Frame */
    
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba36:	f103 0208 	add.w	r2, r3, #8
 800ba3a:	f107 0310 	add.w	r3, r7, #16
 800ba3e:	68b8      	ldr	r0, [r7, #8]
 800ba40:	f004 fbf0 	bl	8010224 <f_read>

    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6a1b      	ldr	r3, [r3, #32]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	4619      	mov	r1, r3
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f7ff fd3b 	bl	800b4cc <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
 800ba56:	2302      	movs	r3, #2
 800ba58:	e000      	b.n	800ba5c <AVI_GetFrame+0x15c>
    
  }
  
  return 0;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3718      	adds	r7, #24
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	08011634 	.word	0x08011634

0800ba68 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	4603      	mov	r3, r0
 800ba70:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800ba72:	79fb      	ldrb	r3, [r7, #7]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d105      	bne.n	800ba84 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 800ba78:	2200      	movs	r2, #0
 800ba7a:	2120      	movs	r1, #32
 800ba7c:	4806      	ldr	r0, [pc, #24]	@ (800ba98 <GC9A01_set_reset+0x30>)
 800ba7e:	f7f6 f8dd 	bl	8001c3c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 800ba82:	e004      	b.n	800ba8e <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 800ba84:	2201      	movs	r2, #1
 800ba86:	2120      	movs	r1, #32
 800ba88:	4803      	ldr	r0, [pc, #12]	@ (800ba98 <GC9A01_set_reset+0x30>)
 800ba8a:	f7f6 f8d7 	bl	8001c3c <HAL_GPIO_WritePin>
}
 800ba8e:	bf00      	nop
 800ba90:	3708      	adds	r7, #8
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	58022400 	.word	0x58022400

0800ba9c <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	4603      	mov	r3, r0
 800baa4:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800baa6:	79fb      	ldrb	r3, [r7, #7]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d105      	bne.n	800bab8 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 800baac:	2200      	movs	r2, #0
 800baae:	2140      	movs	r1, #64	@ 0x40
 800bab0:	4806      	ldr	r0, [pc, #24]	@ (800bacc <GC9A01_set_data_command+0x30>)
 800bab2:	f7f6 f8c3 	bl	8001c3c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 800bab6:	e004      	b.n	800bac2 <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800bab8:	2201      	movs	r2, #1
 800baba:	2140      	movs	r1, #64	@ 0x40
 800babc:	4803      	ldr	r0, [pc, #12]	@ (800bacc <GC9A01_set_data_command+0x30>)
 800babe:	f7f6 f8bd 	bl	8001c3c <HAL_GPIO_WritePin>
}
 800bac2:	bf00      	nop
 800bac4:	3708      	adds	r7, #8
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	58022400 	.word	0x58022400

0800bad0 <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	4603      	mov	r3, r0
 800bad8:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800bada:	79fb      	ldrb	r3, [r7, #7]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d105      	bne.n	800baec <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800bae0:	2200      	movs	r2, #0
 800bae2:	2102      	movs	r1, #2
 800bae4:	4806      	ldr	r0, [pc, #24]	@ (800bb00 <GC9A01_set_chip_select+0x30>)
 800bae6:	f7f6 f8a9 	bl	8001c3c <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 800baea:	e004      	b.n	800baf6 <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800baec:	2201      	movs	r2, #1
 800baee:	2102      	movs	r1, #2
 800baf0:	4803      	ldr	r0, [pc, #12]	@ (800bb00 <GC9A01_set_chip_select+0x30>)
 800baf2:	f7f6 f8a3 	bl	8001c3c <HAL_GPIO_WritePin>
}
 800baf6:	bf00      	nop
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	58022800 	.word	0x58022800

0800bb04 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 800bb0e:	2000      	movs	r0, #0
 800bb10:	f7ff ffc4 	bl	800ba9c <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 800bb14:	2000      	movs	r0, #0
 800bb16:	f7ff ffdb 	bl	800bad0 <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 800bb1a:	1dfb      	adds	r3, r7, #7
 800bb1c:	2101      	movs	r1, #1
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f000 fac4 	bl	800c0ac <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 800bb24:	2001      	movs	r0, #1
 800bb26:	f7ff ffd3 	bl	800bad0 <GC9A01_set_chip_select>
}
 800bb2a:	bf00      	nop
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b082      	sub	sp, #8
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
 800bb3a:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 800bb3c:	2001      	movs	r0, #1
 800bb3e:	f7ff ffad 	bl	800ba9c <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 800bb42:	2000      	movs	r0, #0
 800bb44:	f7ff ffc4 	bl	800bad0 <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 faac 	bl	800c0ac <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 800bb54:	2001      	movs	r0, #1
 800bb56:	f7ff ffbb 	bl	800bad0 <GC9A01_set_chip_select>
}
 800bb5a:	bf00      	nop
 800bb5c:	3708      	adds	r7, #8
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b082      	sub	sp, #8
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	4603      	mov	r3, r0
 800bb6a:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 800bb6c:	1dfb      	adds	r3, r7, #7
 800bb6e:	2101      	movs	r1, #1
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7ff ffde 	bl	800bb32 <GC9A01_write_data>
}
 800bb76:	bf00      	nop
 800bb78:	3708      	adds	r7, #8
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <GC9A01_init>:
void GC9A01_write_continue(uint8_t *data, size_t len) {
    GC9A01_write_command(MEM_WR_CONT);
    GC9A01_write_data(data, len);
}

void GC9A01_init(void) {
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 800bb82:	2001      	movs	r0, #1
 800bb84:	f7ff ffa4 	bl	800bad0 <GC9A01_set_chip_select>
    HAL_Delay(5);
 800bb88:	2005      	movs	r0, #5
 800bb8a:	f7f5 f9c7 	bl	8000f1c <HAL_Delay>
    GC9A01_set_reset(OFF);
 800bb8e:	2000      	movs	r0, #0
 800bb90:	f7ff ff6a 	bl	800ba68 <GC9A01_set_reset>
    HAL_Delay(10);
 800bb94:	200a      	movs	r0, #10
 800bb96:	f7f5 f9c1 	bl	8000f1c <HAL_Delay>
    GC9A01_set_reset(ON);
 800bb9a:	2001      	movs	r0, #1
 800bb9c:	f7ff ff64 	bl	800ba68 <GC9A01_set_reset>
    HAL_Delay(120);
 800bba0:	2078      	movs	r0, #120	@ 0x78
 800bba2:	f7f5 f9bb 	bl	8000f1c <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 800bba6:	20ef      	movs	r0, #239	@ 0xef
 800bba8:	f7ff ffac 	bl	800bb04 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 800bbac:	20eb      	movs	r0, #235	@ 0xeb
 800bbae:	f7ff ffa9 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800bbb2:	2014      	movs	r0, #20
 800bbb4:	f7ff ffd5 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 800bbb8:	20fe      	movs	r0, #254	@ 0xfe
 800bbba:	f7ff ffa3 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 800bbbe:	20ef      	movs	r0, #239	@ 0xef
 800bbc0:	f7ff ffa0 	bl	800bb04 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 800bbc4:	20eb      	movs	r0, #235	@ 0xeb
 800bbc6:	f7ff ff9d 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800bbca:	2014      	movs	r0, #20
 800bbcc:	f7ff ffc9 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 800bbd0:	2084      	movs	r0, #132	@ 0x84
 800bbd2:	f7ff ff97 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 800bbd6:	2040      	movs	r0, #64	@ 0x40
 800bbd8:	f7ff ffc3 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 800bbdc:	2085      	movs	r0, #133	@ 0x85
 800bbde:	f7ff ff91 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bbe2:	20ff      	movs	r0, #255	@ 0xff
 800bbe4:	f7ff ffbd 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 800bbe8:	2086      	movs	r0, #134	@ 0x86
 800bbea:	f7ff ff8b 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bbee:	20ff      	movs	r0, #255	@ 0xff
 800bbf0:	f7ff ffb7 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 800bbf4:	2087      	movs	r0, #135	@ 0x87
 800bbf6:	f7ff ff85 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bbfa:	20ff      	movs	r0, #255	@ 0xff
 800bbfc:	f7ff ffb1 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 800bc00:	2088      	movs	r0, #136	@ 0x88
 800bc02:	f7ff ff7f 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 800bc06:	200a      	movs	r0, #10
 800bc08:	f7ff ffab 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 800bc0c:	2089      	movs	r0, #137	@ 0x89
 800bc0e:	f7ff ff79 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 800bc12:	2021      	movs	r0, #33	@ 0x21
 800bc14:	f7ff ffa5 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 800bc18:	208a      	movs	r0, #138	@ 0x8a
 800bc1a:	f7ff ff73 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800bc1e:	2000      	movs	r0, #0
 800bc20:	f7ff ff9f 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 800bc24:	208b      	movs	r0, #139	@ 0x8b
 800bc26:	f7ff ff6d 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 800bc2a:	2080      	movs	r0, #128	@ 0x80
 800bc2c:	f7ff ff99 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 800bc30:	208c      	movs	r0, #140	@ 0x8c
 800bc32:	f7ff ff67 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800bc36:	2001      	movs	r0, #1
 800bc38:	f7ff ff93 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 800bc3c:	208d      	movs	r0, #141	@ 0x8d
 800bc3e:	f7ff ff61 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800bc42:	2001      	movs	r0, #1
 800bc44:	f7ff ff8d 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 800bc48:	208e      	movs	r0, #142	@ 0x8e
 800bc4a:	f7ff ff5b 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bc4e:	20ff      	movs	r0, #255	@ 0xff
 800bc50:	f7ff ff87 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 800bc54:	208f      	movs	r0, #143	@ 0x8f
 800bc56:	f7ff ff55 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bc5a:	20ff      	movs	r0, #255	@ 0xff
 800bc5c:	f7ff ff81 	bl	800bb62 <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 800bc60:	20b6      	movs	r0, #182	@ 0xb6
 800bc62:	f7ff ff4f 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800bc66:	2000      	movs	r0, #0
 800bc68:	f7ff ff7b 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	f7ff ff78 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 800bc72:	2036      	movs	r0, #54	@ 0x36
 800bc74:	f7ff ff46 	bl	800bb04 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 800bc78:	2048      	movs	r0, #72	@ 0x48
 800bc7a:	f7ff ff72 	bl	800bb62 <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 800bc7e:	203a      	movs	r0, #58	@ 0x3a
 800bc80:	f7ff ff40 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 800bc84:	2005      	movs	r0, #5
 800bc86:	f7ff ff6c 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 800bc8a:	2090      	movs	r0, #144	@ 0x90
 800bc8c:	f7ff ff3a 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 800bc90:	2008      	movs	r0, #8
 800bc92:	f7ff ff66 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bc96:	2008      	movs	r0, #8
 800bc98:	f7ff ff63 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bc9c:	2008      	movs	r0, #8
 800bc9e:	f7ff ff60 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bca2:	2008      	movs	r0, #8
 800bca4:	f7ff ff5d 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 800bca8:	20bd      	movs	r0, #189	@ 0xbd
 800bcaa:	f7ff ff2b 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 800bcae:	2006      	movs	r0, #6
 800bcb0:	f7ff ff57 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 800bcb4:	20bc      	movs	r0, #188	@ 0xbc
 800bcb6:	f7ff ff25 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800bcba:	2000      	movs	r0, #0
 800bcbc:	f7ff ff51 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 800bcc0:	20ff      	movs	r0, #255	@ 0xff
 800bcc2:	f7ff ff1f 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 800bcc6:	2060      	movs	r0, #96	@ 0x60
 800bcc8:	f7ff ff4b 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800bccc:	2001      	movs	r0, #1
 800bcce:	f7ff ff48 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 800bcd2:	2004      	movs	r0, #4
 800bcd4:	f7ff ff45 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 800bcd8:	20c3      	movs	r0, #195	@ 0xc3
 800bcda:	f7ff ff13 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 800bcde:	2013      	movs	r0, #19
 800bce0:	f7ff ff3f 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 800bce4:	20c4      	movs	r0, #196	@ 0xc4
 800bce6:	f7ff ff0d 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 800bcea:	2013      	movs	r0, #19
 800bcec:	f7ff ff39 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 800bcf0:	20c9      	movs	r0, #201	@ 0xc9
 800bcf2:	f7ff ff07 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 800bcf6:	2022      	movs	r0, #34	@ 0x22
 800bcf8:	f7ff ff33 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 800bcfc:	20be      	movs	r0, #190	@ 0xbe
 800bcfe:	f7ff ff01 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 800bd02:	2011      	movs	r0, #17
 800bd04:	f7ff ff2d 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 800bd08:	20e1      	movs	r0, #225	@ 0xe1
 800bd0a:	f7ff fefb 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800bd0e:	2010      	movs	r0, #16
 800bd10:	f7ff ff27 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 800bd14:	200e      	movs	r0, #14
 800bd16:	f7ff ff24 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 800bd1a:	20df      	movs	r0, #223	@ 0xdf
 800bd1c:	f7ff fef2 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 800bd20:	2021      	movs	r0, #33	@ 0x21
 800bd22:	f7ff ff1e 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 800bd26:	200c      	movs	r0, #12
 800bd28:	f7ff ff1b 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 800bd2c:	2002      	movs	r0, #2
 800bd2e:	f7ff ff18 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 800bd32:	20f0      	movs	r0, #240	@ 0xf0
 800bd34:	f7ff fee6 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 800bd38:	2045      	movs	r0, #69	@ 0x45
 800bd3a:	f7ff ff12 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800bd3e:	2009      	movs	r0, #9
 800bd40:	f7ff ff0f 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bd44:	2008      	movs	r0, #8
 800bd46:	f7ff ff0c 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bd4a:	2008      	movs	r0, #8
 800bd4c:	f7ff ff09 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 800bd50:	2026      	movs	r0, #38	@ 0x26
 800bd52:	f7ff ff06 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 800bd56:	202a      	movs	r0, #42	@ 0x2a
 800bd58:	f7ff ff03 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 800bd5c:	20f1      	movs	r0, #241	@ 0xf1
 800bd5e:	f7ff fed1 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800bd62:	2043      	movs	r0, #67	@ 0x43
 800bd64:	f7ff fefd 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bd68:	2070      	movs	r0, #112	@ 0x70
 800bd6a:	f7ff fefa 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800bd6e:	2072      	movs	r0, #114	@ 0x72
 800bd70:	f7ff fef7 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 800bd74:	2036      	movs	r0, #54	@ 0x36
 800bd76:	f7ff fef4 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 800bd7a:	2037      	movs	r0, #55	@ 0x37
 800bd7c:	f7ff fef1 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 800bd80:	206f      	movs	r0, #111	@ 0x6f
 800bd82:	f7ff feee 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 800bd86:	20f2      	movs	r0, #242	@ 0xf2
 800bd88:	f7ff febc 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 800bd8c:	2045      	movs	r0, #69	@ 0x45
 800bd8e:	f7ff fee8 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800bd92:	2009      	movs	r0, #9
 800bd94:	f7ff fee5 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bd98:	2008      	movs	r0, #8
 800bd9a:	f7ff fee2 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bd9e:	2008      	movs	r0, #8
 800bda0:	f7ff fedf 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 800bda4:	2026      	movs	r0, #38	@ 0x26
 800bda6:	f7ff fedc 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 800bdaa:	202a      	movs	r0, #42	@ 0x2a
 800bdac:	f7ff fed9 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 800bdb0:	20f3      	movs	r0, #243	@ 0xf3
 800bdb2:	f7ff fea7 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800bdb6:	2043      	movs	r0, #67	@ 0x43
 800bdb8:	f7ff fed3 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bdbc:	2070      	movs	r0, #112	@ 0x70
 800bdbe:	f7ff fed0 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800bdc2:	2072      	movs	r0, #114	@ 0x72
 800bdc4:	f7ff fecd 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 800bdc8:	2036      	movs	r0, #54	@ 0x36
 800bdca:	f7ff feca 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 800bdce:	2037      	movs	r0, #55	@ 0x37
 800bdd0:	f7ff fec7 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 800bdd4:	206f      	movs	r0, #111	@ 0x6f
 800bdd6:	f7ff fec4 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 800bdda:	20ed      	movs	r0, #237	@ 0xed
 800bddc:	f7ff fe92 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 800bde0:	201b      	movs	r0, #27
 800bde2:	f7ff febe 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 800bde6:	200b      	movs	r0, #11
 800bde8:	f7ff febb 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 800bdec:	20ae      	movs	r0, #174	@ 0xae
 800bdee:	f7ff fe89 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 800bdf2:	2077      	movs	r0, #119	@ 0x77
 800bdf4:	f7ff feb5 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 800bdf8:	20cd      	movs	r0, #205	@ 0xcd
 800bdfa:	f7ff fe83 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 800bdfe:	2063      	movs	r0, #99	@ 0x63
 800be00:	f7ff feaf 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 800be04:	2070      	movs	r0, #112	@ 0x70
 800be06:	f7ff fe7d 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 800be0a:	2007      	movs	r0, #7
 800be0c:	f7ff fea9 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800be10:	2007      	movs	r0, #7
 800be12:	f7ff fea6 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 800be16:	2004      	movs	r0, #4
 800be18:	f7ff fea3 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 800be1c:	200e      	movs	r0, #14
 800be1e:	f7ff fea0 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 800be22:	200f      	movs	r0, #15
 800be24:	f7ff fe9d 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800be28:	2009      	movs	r0, #9
 800be2a:	f7ff fe9a 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800be2e:	2007      	movs	r0, #7
 800be30:	f7ff fe97 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800be34:	2008      	movs	r0, #8
 800be36:	f7ff fe94 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 800be3a:	2003      	movs	r0, #3
 800be3c:	f7ff fe91 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 800be40:	20e8      	movs	r0, #232	@ 0xe8
 800be42:	f7ff fe5f 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 800be46:	2034      	movs	r0, #52	@ 0x34
 800be48:	f7ff fe8b 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 800be4c:	2062      	movs	r0, #98	@ 0x62
 800be4e:	f7ff fe59 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800be52:	2018      	movs	r0, #24
 800be54:	f7ff fe85 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 800be58:	200d      	movs	r0, #13
 800be5a:	f7ff fe82 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800be5e:	2071      	movs	r0, #113	@ 0x71
 800be60:	f7ff fe7f 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 800be64:	20ed      	movs	r0, #237	@ 0xed
 800be66:	f7ff fe7c 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800be6a:	2070      	movs	r0, #112	@ 0x70
 800be6c:	f7ff fe79 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800be70:	2070      	movs	r0, #112	@ 0x70
 800be72:	f7ff fe76 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 800be76:	2018      	movs	r0, #24
 800be78:	f7ff fe73 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 800be7c:	200f      	movs	r0, #15
 800be7e:	f7ff fe70 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800be82:	2071      	movs	r0, #113	@ 0x71
 800be84:	f7ff fe6d 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 800be88:	20ef      	movs	r0, #239	@ 0xef
 800be8a:	f7ff fe6a 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800be8e:	2070      	movs	r0, #112	@ 0x70
 800be90:	f7ff fe67 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800be94:	2070      	movs	r0, #112	@ 0x70
 800be96:	f7ff fe64 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 800be9a:	2063      	movs	r0, #99	@ 0x63
 800be9c:	f7ff fe32 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800bea0:	2018      	movs	r0, #24
 800bea2:	f7ff fe5e 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 800bea6:	2011      	movs	r0, #17
 800bea8:	f7ff fe5b 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800beac:	2071      	movs	r0, #113	@ 0x71
 800beae:	f7ff fe58 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800beb2:	20f1      	movs	r0, #241	@ 0xf1
 800beb4:	f7ff fe55 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800beb8:	2070      	movs	r0, #112	@ 0x70
 800beba:	f7ff fe52 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bebe:	2070      	movs	r0, #112	@ 0x70
 800bec0:	f7ff fe4f 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 800bec4:	2018      	movs	r0, #24
 800bec6:	f7ff fe4c 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 800beca:	2013      	movs	r0, #19
 800becc:	f7ff fe49 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800bed0:	2071      	movs	r0, #113	@ 0x71
 800bed2:	f7ff fe46 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 800bed6:	20f3      	movs	r0, #243	@ 0xf3
 800bed8:	f7ff fe43 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bedc:	2070      	movs	r0, #112	@ 0x70
 800bede:	f7ff fe40 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bee2:	2070      	movs	r0, #112	@ 0x70
 800bee4:	f7ff fe3d 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 800bee8:	2064      	movs	r0, #100	@ 0x64
 800beea:	f7ff fe0b 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 800beee:	2028      	movs	r0, #40	@ 0x28
 800bef0:	f7ff fe37 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 800bef4:	2029      	movs	r0, #41	@ 0x29
 800bef6:	f7ff fe34 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800befa:	20f1      	movs	r0, #241	@ 0xf1
 800befc:	f7ff fe31 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800bf00:	2001      	movs	r0, #1
 800bf02:	f7ff fe2e 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800bf06:	20f1      	movs	r0, #241	@ 0xf1
 800bf08:	f7ff fe2b 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bf0c:	2000      	movs	r0, #0
 800bf0e:	f7ff fe28 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800bf12:	2007      	movs	r0, #7
 800bf14:	f7ff fe25 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 800bf18:	2066      	movs	r0, #102	@ 0x66
 800bf1a:	f7ff fdf3 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 800bf1e:	203c      	movs	r0, #60	@ 0x3c
 800bf20:	f7ff fe1f 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bf24:	2000      	movs	r0, #0
 800bf26:	f7ff fe1c 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 800bf2a:	20cd      	movs	r0, #205	@ 0xcd
 800bf2c:	f7ff fe19 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 800bf30:	2067      	movs	r0, #103	@ 0x67
 800bf32:	f7ff fe16 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 800bf36:	2045      	movs	r0, #69	@ 0x45
 800bf38:	f7ff fe13 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 800bf3c:	2045      	movs	r0, #69	@ 0x45
 800bf3e:	f7ff fe10 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 800bf42:	2010      	movs	r0, #16
 800bf44:	f7ff fe0d 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bf48:	2000      	movs	r0, #0
 800bf4a:	f7ff fe0a 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bf4e:	2000      	movs	r0, #0
 800bf50:	f7ff fe07 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bf54:	2000      	movs	r0, #0
 800bf56:	f7ff fe04 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 800bf5a:	2067      	movs	r0, #103	@ 0x67
 800bf5c:	f7ff fdd2 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800bf60:	2000      	movs	r0, #0
 800bf62:	f7ff fdfe 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 800bf66:	203c      	movs	r0, #60	@ 0x3c
 800bf68:	f7ff fdfb 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	f7ff fdf8 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bf72:	2000      	movs	r0, #0
 800bf74:	f7ff fdf5 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bf78:	2000      	movs	r0, #0
 800bf7a:	f7ff fdf2 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800bf7e:	2001      	movs	r0, #1
 800bf80:	f7ff fdef 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 800bf84:	2054      	movs	r0, #84	@ 0x54
 800bf86:	f7ff fdec 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 800bf8a:	2010      	movs	r0, #16
 800bf8c:	f7ff fde9 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 800bf90:	2032      	movs	r0, #50	@ 0x32
 800bf92:	f7ff fde6 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 800bf96:	2098      	movs	r0, #152	@ 0x98
 800bf98:	f7ff fde3 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 800bf9c:	2074      	movs	r0, #116	@ 0x74
 800bf9e:	f7ff fdb1 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800bfa2:	2010      	movs	r0, #16
 800bfa4:	f7ff fddd 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 800bfa8:	2085      	movs	r0, #133	@ 0x85
 800bfaa:	f7ff fdda 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 800bfae:	2080      	movs	r0, #128	@ 0x80
 800bfb0:	f7ff fdd7 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	f7ff fdd4 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bfba:	2000      	movs	r0, #0
 800bfbc:	f7ff fdd1 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 800bfc0:	204e      	movs	r0, #78	@ 0x4e
 800bfc2:	f7ff fdce 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bfc6:	2000      	movs	r0, #0
 800bfc8:	f7ff fdcb 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 800bfcc:	2098      	movs	r0, #152	@ 0x98
 800bfce:	f7ff fd99 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 800bfd2:	203e      	movs	r0, #62	@ 0x3e
 800bfd4:	f7ff fdc5 	bl	800bb62 <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800bfd8:	2007      	movs	r0, #7
 800bfda:	f7ff fdc2 	bl	800bb62 <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 800bfde:	2035      	movs	r0, #53	@ 0x35
 800bfe0:	f7ff fd90 	bl	800bb04 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 800bfe4:	2021      	movs	r0, #33	@ 0x21
 800bfe6:	f7ff fd8d 	bl	800bb04 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 800bfea:	2011      	movs	r0, #17
 800bfec:	f7ff fd8a 	bl	800bb04 <GC9A01_write_command>
    HAL_Delay(120);
 800bff0:	2078      	movs	r0, #120	@ 0x78
 800bff2:	f7f4 ff93 	bl	8000f1c <HAL_Delay>
    GC9A01_write_command(0x29);
 800bff6:	2029      	movs	r0, #41	@ 0x29
 800bff8:	f7ff fd84 	bl	800bb04 <GC9A01_write_command>
    HAL_Delay(20);
 800bffc:	2014      	movs	r0, #20
 800bffe:	f7f4 ff8d 	bl	8000f1c <HAL_Delay>
    
}
 800c002:	bf00      	nop
 800c004:	bd80      	pop	{r7, pc}

0800c006 <GC9A01_set_frame>:

void GC9A01_set_frame(struct GC9A01_frame frame) {
 800c006:	b580      	push	{r7, lr}
 800c008:	b084      	sub	sp, #16
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	463b      	mov	r3, r7
 800c00e:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t data[4];
    
    GC9A01_write_command(COL_ADDR_SET);
 800c012:	202a      	movs	r0, #42	@ 0x2a
 800c014:	f7ff fd76 	bl	800bb04 <GC9A01_write_command>
    data[0] = (frame.start.X >> 8) & 0xFF;
 800c018:	883b      	ldrh	r3, [r7, #0]
 800c01a:	0a1b      	lsrs	r3, r3, #8
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.X & 0xFF;
 800c022:	883b      	ldrh	r3, [r7, #0]
 800c024:	b2db      	uxtb	r3, r3
 800c026:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.X >> 8) & 0xFF;
 800c028:	88bb      	ldrh	r3, [r7, #4]
 800c02a:	0a1b      	lsrs	r3, r3, #8
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.X & 0xFF;
 800c032:	88bb      	ldrh	r3, [r7, #4]
 800c034:	b2db      	uxtb	r3, r3
 800c036:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 800c038:	f107 030c 	add.w	r3, r7, #12
 800c03c:	2104      	movs	r1, #4
 800c03e:	4618      	mov	r0, r3
 800c040:	f7ff fd77 	bl	800bb32 <GC9A01_write_data>

    GC9A01_write_command(ROW_ADDR_SET);
 800c044:	202b      	movs	r0, #43	@ 0x2b
 800c046:	f7ff fd5d 	bl	800bb04 <GC9A01_write_command>
    data[0] = (frame.start.Y >> 8) & 0xFF;
 800c04a:	887b      	ldrh	r3, [r7, #2]
 800c04c:	0a1b      	lsrs	r3, r3, #8
 800c04e:	b29b      	uxth	r3, r3
 800c050:	b2db      	uxtb	r3, r3
 800c052:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.Y & 0xFF;
 800c054:	887b      	ldrh	r3, [r7, #2]
 800c056:	b2db      	uxtb	r3, r3
 800c058:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.Y >> 8) & 0xFF;
 800c05a:	88fb      	ldrh	r3, [r7, #6]
 800c05c:	0a1b      	lsrs	r3, r3, #8
 800c05e:	b29b      	uxth	r3, r3
 800c060:	b2db      	uxtb	r3, r3
 800c062:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.Y & 0xFF;
 800c064:	88fb      	ldrh	r3, [r7, #6]
 800c066:	b2db      	uxtb	r3, r3
 800c068:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 800c06a:	f107 030c 	add.w	r3, r7, #12
 800c06e:	2104      	movs	r1, #4
 800c070:	4618      	mov	r0, r3
 800c072:	f7ff fd5e 	bl	800bb32 <GC9A01_write_data>
    
}
 800c076:	bf00      	nop
 800c078:	3710      	adds	r7, #16
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <GC9A01_sleep_mode>:


void GC9A01_sleep_mode(uint8_t command)
{
 800c07e:	b580      	push	{r7, lr}
 800c080:	b082      	sub	sp, #8
 800c082:	af00      	add	r7, sp, #0
 800c084:	4603      	mov	r3, r0
 800c086:	71fb      	strb	r3, [r7, #7]

	if(command)
 800c088:	79fb      	ldrb	r3, [r7, #7]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d003      	beq.n	800c096 <GC9A01_sleep_mode+0x18>
		GC9A01_write_command(SLEEP_MODE_ON);
 800c08e:	2010      	movs	r0, #16
 800c090:	f7ff fd38 	bl	800bb04 <GC9A01_write_command>
 800c094:	e002      	b.n	800c09c <GC9A01_sleep_mode+0x1e>
	else
		GC9A01_write_command(SLEEP_MODE_OFF);
 800c096:	2011      	movs	r0, #17
 800c098:	f7ff fd34 	bl	800bb04 <GC9A01_write_command>

	HAL_Delay(120);
 800c09c:	2078      	movs	r0, #120	@ 0x78
 800c09e:	f7f4 ff3d 	bl	8000f1c <HAL_Delay>

}
 800c0a2:	bf00      	nop
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
	...

0800c0ac <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 800c0b8:	887a      	ldrh	r2, [r7, #2]
 800c0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c0be:	6879      	ldr	r1, [r7, #4]
 800c0c0:	4806      	ldr	r0, [pc, #24]	@ (800c0dc <GC9A01_spi_tx+0x30>)
 800c0c2:	f7fd fffb 	bl	800a0bc <HAL_SPI_Transmit>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	4b05      	ldr	r3, [pc, #20]	@ (800c0e0 <GC9A01_spi_tx+0x34>)
 800c0cc:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 800c0ce:	4b04      	ldr	r3, [pc, #16]	@ (800c0e0 <GC9A01_spi_tx+0x34>)
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
		return;

}
 800c0d4:	3708      	adds	r7, #8
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	200002dc 	.word	0x200002dc
 800c0e0:	200001cc 	.word	0x200001cc

0800c0e4 <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b086      	sub	sp, #24
 800c0e8:	af02      	add	r7, sp, #8
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	607a      	str	r2, [r7, #4]
 800c0f0:	603b      	str	r3, [r7, #0]
  JPEGSourceAddress =  FrameSourceAddress ;
 800c0f2:	4a11      	ldr	r2, [pc, #68]	@ (800c138 <JPEG_Decode_DMA+0x54>)
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 800c0f8:	4a10      	ldr	r2, [pc, #64]	@ (800c13c <JPEG_Decode_DMA+0x58>)
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	6013      	str	r3, [r2, #0]
  Input_frameIndex=0;
 800c0fe:	4b10      	ldr	r3, [pc, #64]	@ (800c140 <JPEG_Decode_DMA+0x5c>)
 800c100:	2200      	movs	r2, #0
 800c102:	601a      	str	r2, [r3, #0]
  Input_frameSize = FrameSize;
 800c104:	4a0f      	ldr	r2, [pc, #60]	@ (800c144 <JPEG_Decode_DMA+0x60>)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6013      	str	r3, [r2, #0]
  
  Jpeg_HWDecodingEnd = 0;
 800c10a:	4b0f      	ldr	r3, [pc, #60]	@ (800c148 <JPEG_Decode_DMA+0x64>)
 800c10c:	2200      	movs	r2, #0
 800c10e:	601a      	str	r2, [r3, #0]
  
  /* Start JPEG decoding with DMA method */
  HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT);
 800c110:	4b09      	ldr	r3, [pc, #36]	@ (800c138 <JPEG_Decode_DMA+0x54>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4619      	mov	r1, r3
 800c116:	4b09      	ldr	r3, [pc, #36]	@ (800c13c <JPEG_Decode_DMA+0x58>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	461a      	mov	r2, r3
 800c11c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c120:	9300      	str	r3, [sp, #0]
 800c122:	4613      	mov	r3, r2
 800c124:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800c128:	68f8      	ldr	r0, [r7, #12]
 800c12a:	f7f5 fed2 	bl	8001ed2 <HAL_JPEG_Decode_DMA>
  
  
  return 0;
 800c12e:	2300      	movs	r3, #0
  
}
 800c130:	4618      	mov	r0, r3
 800c132:	3710      	adds	r7, #16
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	200001d8 	.word	0x200001d8
 800c13c:	200001d4 	.word	0x200001d4
 800c140:	200001e0 	.word	0x200001e0
 800c144:	200001dc 	.word	0x200001dc
 800c148:	200001d0 	.word	0x200001d0

0800c14c <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
}
 800c156:	bf00      	nop
 800c158:	370c      	adds	r7, #12
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
	...

0800c164 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 800c16e:	4b19      	ldr	r3, [pc, #100]	@ (800c1d4 <HAL_JPEG_GetDataCallback+0x70>)
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	4413      	add	r3, r2
 800c176:	4a17      	ldr	r2, [pc, #92]	@ (800c1d4 <HAL_JPEG_GetDataCallback+0x70>)
 800c178:	6013      	str	r3, [r2, #0]
  if( Input_frameIndex < Input_frameSize)
 800c17a:	4b16      	ldr	r3, [pc, #88]	@ (800c1d4 <HAL_JPEG_GetDataCallback+0x70>)
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	4b16      	ldr	r3, [pc, #88]	@ (800c1d8 <HAL_JPEG_GetDataCallback+0x74>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	429a      	cmp	r2, r3
 800c184:	d218      	bcs.n	800c1b8 <HAL_JPEG_GetDataCallback+0x54>
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 800c186:	4b15      	ldr	r3, [pc, #84]	@ (800c1dc <HAL_JPEG_GetDataCallback+0x78>)
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	4413      	add	r3, r2
 800c18e:	4a13      	ldr	r2, [pc, #76]	@ (800c1dc <HAL_JPEG_GetDataCallback+0x78>)
 800c190:	6013      	str	r3, [r2, #0]
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 800c192:	4b11      	ldr	r3, [pc, #68]	@ (800c1d8 <HAL_JPEG_GetDataCallback+0x74>)
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	4b0f      	ldr	r3, [pc, #60]	@ (800c1d4 <HAL_JPEG_GetDataCallback+0x70>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1a0:	d303      	bcc.n	800c1aa <HAL_JPEG_GetDataCallback+0x46>
    {
      inDataLength = CHUNK_SIZE_IN;
 800c1a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c1a6:	60fb      	str	r3, [r7, #12]
 800c1a8:	e008      	b.n	800c1bc <HAL_JPEG_GetDataCallback+0x58>
    }
    else
    {
      inDataLength = Input_frameSize - Input_frameIndex;
 800c1aa:	4b0b      	ldr	r3, [pc, #44]	@ (800c1d8 <HAL_JPEG_GetDataCallback+0x74>)
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	4b09      	ldr	r3, [pc, #36]	@ (800c1d4 <HAL_JPEG_GetDataCallback+0x70>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	60fb      	str	r3, [r7, #12]
 800c1b6:	e001      	b.n	800c1bc <HAL_JPEG_GetDataCallback+0x58>
    }    
  }
  else
  {
    inDataLength = 0; 
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	60fb      	str	r3, [r7, #12]
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 800c1bc:	4b07      	ldr	r3, [pc, #28]	@ (800c1dc <HAL_JPEG_GetDataCallback+0x78>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f7f5 ff3f 	bl	8002048 <HAL_JPEG_ConfigInputBuffer>
  
}
 800c1ca:	bf00      	nop
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	200001e0 	.word	0x200001e0
 800c1d8:	200001dc 	.word	0x200001dc
 800c1dc:	200001d8 	.word	0x200001d8

0800c1e0 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	60b9      	str	r1, [r7, #8]
 800c1ea:	607a      	str	r2, [r7, #4]
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 800c1ec:	4b08      	ldr	r3, [pc, #32]	@ (800c210 <HAL_JPEG_DataReadyCallback+0x30>)
 800c1ee:	681a      	ldr	r2, [r3, #0]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	4a06      	ldr	r2, [pc, #24]	@ (800c210 <HAL_JPEG_DataReadyCallback+0x30>)
 800c1f6:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 800c1f8:	4b05      	ldr	r3, [pc, #20]	@ (800c210 <HAL_JPEG_DataReadyCallback+0x30>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800c200:	4619      	mov	r1, r3
 800c202:	68f8      	ldr	r0, [r7, #12]
 800c204:	f7f5 ff32 	bl	800206c <HAL_JPEG_ConfigOutputBuffer>
}
 800c208:	bf00      	nop
 800c20a:	3710      	adds	r7, #16
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	200001d4 	.word	0x200001d4

0800c214 <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  Error_Handler();
 800c21c:	f000 f83a 	bl	800c294 <Error_Handler>
}
 800c220:	bf00      	nop
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
 800c228:	b480      	push	{r7}
 800c22a:	b083      	sub	sp, #12
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1; 
 800c230:	4b04      	ldr	r3, [pc, #16]	@ (800c244 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 800c232:	2201      	movs	r2, #1
 800c234:	601a      	str	r2, [r3, #0]
}
 800c236:	bf00      	nop
 800c238:	370c      	adds	r7, #12
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr
 800c242:	bf00      	nop
 800c244:	200001d0 	.word	0x200001d0

0800c248 <main>:
RTC_HandleTypeDef hrtc;
SPI_HandleTypeDef hspi5;


int main(void)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	af00      	add	r7, sp, #0

  // System configurations
  MPU_Config();							// Parameters configuration for external SDRAM
 800c24c:	f000 f8be 	bl	800c3cc <MPU_Config>
  CPU_CACHE_Enable();
 800c250:	f000 f8fe 	bl	800c450 <CPU_CACHE_Enable>
  HAL_Init();
 800c254:	f7f4 fdd0 	bl	8000df8 <HAL_Init>
  SystemClock_Config(); 				// System-Clock; HSE 200MHz, RTC-Clock; LSE 32kHz
 800c258:	f000 f820 	bl	800c29c <SystemClock_Config>
  
  // Microcntroller's peripherals initialization
  MX_GPIO_Init(1);
 800c25c:	2001      	movs	r0, #1
 800c25e:	f000 f9b9 	bl	800c5d4 <MX_GPIO_Init>
  MX_SPI5_Init();
 800c262:	f000 f963 	bl	800c52c <MX_SPI5_Init>
  MX_RTC_Init();
 800c266:	f000 fa93 	bl	800c790 <MX_RTC_Init>

  // External peripherals initialization
  GC9A01_init();
 800c26a:	f7ff fc88 	bl	800bb7e <GC9A01_init>
  BSP_SDRAM_Init(0);
 800c26e:	2000      	movs	r0, #0
 800c270:	f7f4 fb92 	bl	8000998 <BSP_SDRAM_Init>

  // JPEG initialization
  JPEG_Handle.Instance = JPEG;
 800c274:	4b05      	ldr	r3, [pc, #20]	@ (800c28c <main+0x44>)
 800c276:	4a06      	ldr	r2, [pc, #24]	@ (800c290 <main+0x48>)
 800c278:	601a      	str	r2, [r3, #0]
  HAL_JPEG_Init(&JPEG_Handle);    
 800c27a:	4804      	ldr	r0, [pc, #16]	@ (800c28c <main+0x44>)
 800c27c:	f7f5 fd12 	bl	8001ca4 <HAL_JPEG_Init>

////////////////////////////////////////////////	APPLICATION SECTION

  // Application initialization
  smart_watch_init();
 800c280:	f000 fbba 	bl	800c9f8 <smart_watch_init>

  // Application process
  smart_watch_process();
 800c284:	f000 fbe6 	bl	800ca54 <smart_watch_process>

  while (1);
 800c288:	bf00      	nop
 800c28a:	e7fd      	b.n	800c288 <main+0x40>
 800c28c:	200001e4 	.word	0x200001e4
 800c290:	52003000 	.word	0x52003000

0800c294 <Error_Handler>:

}


void Error_Handler(void)
{
 800c294:	b480      	push	{r7}
 800c296:	af00      	add	r7, sp, #0

  while(1);
 800c298:	bf00      	nop
 800c29a:	e7fd      	b.n	800c298 <Error_Handler+0x4>

0800c29c <SystemClock_Config>:
// PLL_Q                          = 4
// PLL_R                          = 2
// VDD(V)                         = 3.3
// Flash Latency(WS)              = 4
void SystemClock_Config(void)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b09e      	sub	sp, #120	@ 0x78
 800c2a0:	af00      	add	r7, sp, #0

  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800c2a8:	2004      	movs	r0, #4
 800c2aa:	f7f7 ff6f 	bl	800418c <HAL_PWREx_ConfigSupply>

  // The voltage scaling allows optimizing the power consumption when the device is
  // clocked below the maximum system frequency
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	607b      	str	r3, [r7, #4]
 800c2b2:	4b43      	ldr	r3, [pc, #268]	@ (800c3c0 <SystemClock_Config+0x124>)
 800c2b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2b6:	4a42      	ldr	r2, [pc, #264]	@ (800c3c0 <SystemClock_Config+0x124>)
 800c2b8:	f023 0301 	bic.w	r3, r3, #1
 800c2bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c2be:	4b40      	ldr	r3, [pc, #256]	@ (800c3c0 <SystemClock_Config+0x124>)
 800c2c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2c2:	f003 0301 	and.w	r3, r3, #1
 800c2c6:	607b      	str	r3, [r7, #4]
 800c2c8:	4b3e      	ldr	r3, [pc, #248]	@ (800c3c4 <SystemClock_Config+0x128>)
 800c2ca:	699b      	ldr	r3, [r3, #24]
 800c2cc:	4a3d      	ldr	r2, [pc, #244]	@ (800c3c4 <SystemClock_Config+0x128>)
 800c2ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c2d2:	6193      	str	r3, [r2, #24]
 800c2d4:	4b3b      	ldr	r3, [pc, #236]	@ (800c3c4 <SystemClock_Config+0x128>)
 800c2d6:	699b      	ldr	r3, [r3, #24]
 800c2d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c2dc:	607b      	str	r3, [r7, #4]
 800c2de:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800c2e0:	bf00      	nop
 800c2e2:	4b38      	ldr	r3, [pc, #224]	@ (800c3c4 <SystemClock_Config+0x128>)
 800c2e4:	699b      	ldr	r3, [r3, #24]
 800c2e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c2ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2ee:	d1f8      	bne.n	800c2e2 <SystemClock_Config+0x46>

  // Clocks configurations
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
 800c2f0:	2305      	movs	r3, #5
 800c2f2:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c2f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c2f8:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800c2fe:	2300      	movs	r3, #0
 800c300:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800c302:	2300      	movs	r3, #0
 800c304:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c306:	2302      	movs	r3, #2
 800c308:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c30a:	2302      	movs	r3, #2
 800c30c:	633b      	str	r3, [r7, #48]	@ 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 800c30e:	2305      	movs	r3, #5
 800c310:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 70;
 800c312:	2346      	movs	r3, #70	@ 0x46
 800c314:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800c316:	2300      	movs	r3, #0
 800c318:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800c31a:	2302      	movs	r3, #2
 800c31c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800c31e:	2302      	movs	r3, #2
 800c320:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c322:	2304      	movs	r3, #4
 800c324:	643b      	str	r3, [r7, #64]	@ 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800c326:	2300      	movs	r3, #0
 800c328:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800c32a:	2308      	movs	r3, #8
 800c32c:	64bb      	str	r3, [r7, #72]	@ 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800c32e:	f107 0308 	add.w	r3, r7, #8
 800c332:	4618      	mov	r0, r3
 800c334:	f7f7 ff84 	bl	8004240 <HAL_RCC_OscConfig>
 800c338:	4603      	mov	r3, r0
 800c33a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 800c33e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c342:	2b00      	cmp	r3, #0
 800c344:	d001      	beq.n	800c34a <SystemClock_Config+0xae>
  {
    Error_Handler();
 800c346:	f7ff ffa5 	bl	800c294 <Error_Handler>
  }

  // CLocks assignment to peripheral buses
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800c34a:	233f      	movs	r3, #63	@ 0x3f
 800c34c:	657b      	str	r3, [r7, #84]	@ 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c34e:	2303      	movs	r3, #3
 800c350:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800c352:	2300      	movs	r3, #0
 800c354:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800c356:	2308      	movs	r3, #8
 800c358:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800c35a:	2340      	movs	r3, #64	@ 0x40
 800c35c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800c35e:	2340      	movs	r3, #64	@ 0x40
 800c360:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800c362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c366:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800c368:	2340      	movs	r3, #64	@ 0x40
 800c36a:	673b      	str	r3, [r7, #112]	@ 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800c36c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c370:	2104      	movs	r1, #4
 800c372:	4618      	mov	r0, r3
 800c374:	f7f8 fbbe 	bl	8004af4 <HAL_RCC_ClockConfig>
 800c378:	4603      	mov	r3, r0
 800c37a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 800c37e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c382:	2b00      	cmp	r3, #0
 800c384:	d001      	beq.n	800c38a <SystemClock_Config+0xee>
  {
    Error_Handler();
 800c386:	f7ff ff85 	bl	800c294 <Error_Handler>
        - The activation of the CSI clock
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  __HAL_RCC_CSI_ENABLE() ;
 800c38a:	4b0f      	ldr	r3, [pc, #60]	@ (800c3c8 <SystemClock_Config+0x12c>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a0e      	ldr	r2, [pc, #56]	@ (800c3c8 <SystemClock_Config+0x12c>)
 800c390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c394:	6013      	str	r3, [r2, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 800c396:	4b0c      	ldr	r3, [pc, #48]	@ (800c3c8 <SystemClock_Config+0x12c>)
 800c398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c39c:	4a0a      	ldr	r2, [pc, #40]	@ (800c3c8 <SystemClock_Config+0x12c>)
 800c39e:	f043 0302 	orr.w	r3, r3, #2
 800c3a2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800c3a6:	4b08      	ldr	r3, [pc, #32]	@ (800c3c8 <SystemClock_Config+0x12c>)
 800c3a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c3ac:	f003 0302 	and.w	r3, r3, #2
 800c3b0:	603b      	str	r3, [r7, #0]
 800c3b2:	683b      	ldr	r3, [r7, #0]
  HAL_EnableCompensationCell();
 800c3b4:	f7f4 fe02 	bl	8000fbc <HAL_EnableCompensationCell>

}
 800c3b8:	bf00      	nop
 800c3ba:	3778      	adds	r7, #120	@ 0x78
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	58000400 	.word	0x58000400
 800c3c4:	58024800 	.word	0x58024800
 800c3c8:	58024400 	.word	0x58024400

0800c3cc <MPU_Config>:

// Configure the MPU attributes as Write Through for External SDRAM.
// The Base Address is SDRAM_DEVICE_ADDR .
// The Configured Region Size is 32MB because same as SDRAM size.
void MPU_Config(void)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b084      	sub	sp, #16
 800c3d0:	af00      	add	r7, sp, #0

  MPU_Region_InitTypeDef MPU_InitStruct;
  

  HAL_MPU_Disable();
 800c3d2:	f7f4 ff13 	bl	80011fc <HAL_MPU_Disable>

  // Configure the MPU as Strongly ordered for not defined regions
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800c3de:	231f      	movs	r3, #31
 800c3e0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800c3fa:	2387      	movs	r3, #135	@ 0x87
 800c3fc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800c3fe:	2301      	movs	r3, #1
 800c400:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800c402:	463b      	mov	r3, r7
 800c404:	4618      	mov	r0, r3
 800c406:	f7f4 ff31 	bl	800126c <HAL_MPU_ConfigRegion>

  // Configure the MPU attributes as WT for SDRAM
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800c40a:	2301      	movs	r3, #1
 800c40c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 800c40e:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800c412:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800c414:	2318      	movs	r3, #24
 800c416:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800c418:	2303      	movs	r3, #3
 800c41a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800c41c:	2300      	movs	r3, #0
 800c41e:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800c420:	2301      	movs	r3, #1
 800c422:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800c424:	2300      	movs	r3, #0
 800c426:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800c428:	2301      	movs	r3, #1
 800c42a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800c42c:	2300      	movs	r3, #0
 800c42e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800c430:	2300      	movs	r3, #0
 800c432:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800c434:	2300      	movs	r3, #0
 800c436:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800c438:	463b      	mov	r3, r7
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7f4 ff16 	bl	800126c <HAL_MPU_ConfigRegion>

  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800c440:	2004      	movs	r0, #4
 800c442:	f7f4 fef3 	bl	800122c <HAL_MPU_Enable>

}
 800c446:	bf00      	nop
 800c448:	3710      	adds	r7, #16
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
	...

0800c450 <CPU_CACHE_Enable>:


void CPU_CACHE_Enable(void)
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800c456:	4b34      	ldr	r3, [pc, #208]	@ (800c528 <CPU_CACHE_Enable+0xd8>)
 800c458:	695b      	ldr	r3, [r3, #20]
 800c45a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d11b      	bne.n	800c49a <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800c462:	f3bf 8f4f 	dsb	sy
}
 800c466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c468:	f3bf 8f6f 	isb	sy
}
 800c46c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800c46e:	4b2e      	ldr	r3, [pc, #184]	@ (800c528 <CPU_CACHE_Enable+0xd8>)
 800c470:	2200      	movs	r2, #0
 800c472:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800c476:	f3bf 8f4f 	dsb	sy
}
 800c47a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c47c:	f3bf 8f6f 	isb	sy
}
 800c480:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800c482:	4b29      	ldr	r3, [pc, #164]	@ (800c528 <CPU_CACHE_Enable+0xd8>)
 800c484:	695b      	ldr	r3, [r3, #20]
 800c486:	4a28      	ldr	r2, [pc, #160]	@ (800c528 <CPU_CACHE_Enable+0xd8>)
 800c488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c48c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c48e:	f3bf 8f4f 	dsb	sy
}
 800c492:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c494:	f3bf 8f6f 	isb	sy
}
 800c498:	e000      	b.n	800c49c <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800c49a:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800c49c:	4b22      	ldr	r3, [pc, #136]	@ (800c528 <CPU_CACHE_Enable+0xd8>)
 800c49e:	695b      	ldr	r3, [r3, #20]
 800c4a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d138      	bne.n	800c51a <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800c4a8:	4b1f      	ldr	r3, [pc, #124]	@ (800c528 <CPU_CACHE_Enable+0xd8>)
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800c4b0:	f3bf 8f4f 	dsb	sy
}
 800c4b4:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800c4b6:	4b1c      	ldr	r3, [pc, #112]	@ (800c528 <CPU_CACHE_Enable+0xd8>)
 800c4b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4bc:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	0b5b      	lsrs	r3, r3, #13
 800c4c2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c4c6:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	08db      	lsrs	r3, r3, #3
 800c4cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4d0:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	015a      	lsls	r2, r3, #5
 800c4d6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800c4da:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800c4e0:	4911      	ldr	r1, [pc, #68]	@ (800c528 <CPU_CACHE_Enable+0xd8>)
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	1e5a      	subs	r2, r3, #1
 800c4ec:	607a      	str	r2, [r7, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d1ef      	bne.n	800c4d2 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	1e5a      	subs	r2, r3, #1
 800c4f6:	60ba      	str	r2, [r7, #8]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1e5      	bne.n	800c4c8 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800c4fc:	f3bf 8f4f 	dsb	sy
}
 800c500:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800c502:	4b09      	ldr	r3, [pc, #36]	@ (800c528 <CPU_CACHE_Enable+0xd8>)
 800c504:	695b      	ldr	r3, [r3, #20]
 800c506:	4a08      	ldr	r2, [pc, #32]	@ (800c528 <CPU_CACHE_Enable+0xd8>)
 800c508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c50c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c50e:	f3bf 8f4f 	dsb	sy
}
 800c512:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c514:	f3bf 8f6f 	isb	sy
}
 800c518:	e000      	b.n	800c51c <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800c51a:	bf00      	nop

  SCB_EnableICache();
  SCB_EnableDCache();

}
 800c51c:	bf00      	nop
 800c51e:	3714      	adds	r7, #20
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr
 800c528:	e000ed00 	.word	0xe000ed00

0800c52c <MX_SPI5_Init>:


void MX_SPI5_Init(void)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 800c530:	4b26      	ldr	r3, [pc, #152]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c532:	4a27      	ldr	r2, [pc, #156]	@ (800c5d0 <MX_SPI5_Init+0xa4>)
 800c534:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800c536:	4b25      	ldr	r3, [pc, #148]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c538:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800c53c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800c53e:	4b23      	ldr	r3, [pc, #140]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c540:	2200      	movs	r2, #0
 800c542:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800c544:	4b21      	ldr	r3, [pc, #132]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c546:	2207      	movs	r2, #7
 800c548:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c54a:	4b20      	ldr	r3, [pc, #128]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c54c:	2200      	movs	r2, #0
 800c54e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c550:	4b1e      	ldr	r3, [pc, #120]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c552:	2200      	movs	r2, #0
 800c554:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800c556:	4b1d      	ldr	r3, [pc, #116]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c558:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800c55c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c55e:	4b1b      	ldr	r3, [pc, #108]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c560:	2200      	movs	r2, #0
 800c562:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c564:	4b19      	ldr	r3, [pc, #100]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c566:	2200      	movs	r2, #0
 800c568:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800c56a:	4b18      	ldr	r3, [pc, #96]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c56c:	2200      	movs	r2, #0
 800c56e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c570:	4b16      	ldr	r3, [pc, #88]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c572:	2200      	movs	r2, #0
 800c574:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800c576:	4b15      	ldr	r3, [pc, #84]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c578:	2200      	movs	r2, #0
 800c57a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800c57c:	4b13      	ldr	r3, [pc, #76]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c57e:	2200      	movs	r2, #0
 800c580:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800c582:	4b12      	ldr	r3, [pc, #72]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c584:	2200      	movs	r2, #0
 800c586:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800c588:	4b10      	ldr	r3, [pc, #64]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c58a:	2200      	movs	r2, #0
 800c58c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c58e:	4b0f      	ldr	r3, [pc, #60]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c590:	2200      	movs	r2, #0
 800c592:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c594:	4b0d      	ldr	r3, [pc, #52]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c596:	2200      	movs	r2, #0
 800c598:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800c59a:	4b0c      	ldr	r3, [pc, #48]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c59c:	2200      	movs	r2, #0
 800c59e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800c5a0:	4b0a      	ldr	r3, [pc, #40]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800c5a6:	4b09      	ldr	r3, [pc, #36]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800c5ac:	4b07      	ldr	r3, [pc, #28]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800c5b2:	4b06      	ldr	r3, [pc, #24]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	659a      	str	r2, [r3, #88]	@ 0x58

  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800c5b8:	4804      	ldr	r0, [pc, #16]	@ (800c5cc <MX_SPI5_Init+0xa0>)
 800c5ba:	f7fd fc5b 	bl	8009e74 <HAL_SPI_Init>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d001      	beq.n	800c5c8 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 800c5c4:	f7ff fe66 	bl	800c294 <Error_Handler>
  }


}
 800c5c8:	bf00      	nop
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	200002dc 	.word	0x200002dc
 800c5d0:	40015000 	.word	0x40015000

0800c5d4 <MX_GPIO_Init>:


void MX_GPIO_Init(uint8_t it_en)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b08e      	sub	sp, #56	@ 0x38
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	4603      	mov	r3, r0
 800c5dc:	71fb      	strb	r3, [r7, #7]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	601a      	str	r2, [r3, #0]
 800c5e6:	605a      	str	r2, [r3, #4]
 800c5e8:	609a      	str	r2, [r3, #8]
 800c5ea:	60da      	str	r2, [r3, #12]
 800c5ec:	611a      	str	r2, [r3, #16]


  // GPIO Ports Clock Enable
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c5ee:	4b65      	ldr	r3, [pc, #404]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c5f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c5f4:	4a63      	ldr	r2, [pc, #396]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c5f6:	f043 0304 	orr.w	r3, r3, #4
 800c5fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c5fe:	4b61      	ldr	r3, [pc, #388]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c604:	f003 0304 	and.w	r3, r3, #4
 800c608:	623b      	str	r3, [r7, #32]
 800c60a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c60c:	4b5d      	ldr	r3, [pc, #372]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c60e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c612:	4a5c      	ldr	r2, [pc, #368]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c614:	f043 0308 	orr.w	r3, r3, #8
 800c618:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c61c:	4b59      	ldr	r3, [pc, #356]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c61e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c622:	f003 0308 	and.w	r3, r3, #8
 800c626:	61fb      	str	r3, [r7, #28]
 800c628:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c62a:	4b56      	ldr	r3, [pc, #344]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c62c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c630:	4a54      	ldr	r2, [pc, #336]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c632:	f043 0301 	orr.w	r3, r3, #1
 800c636:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c63a:	4b52      	ldr	r3, [pc, #328]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c63c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c640:	f003 0301 	and.w	r3, r3, #1
 800c644:	61bb      	str	r3, [r7, #24]
 800c646:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800c648:	4b4e      	ldr	r3, [pc, #312]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c64a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c64e:	4a4d      	ldr	r2, [pc, #308]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c654:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c658:	4b4a      	ldr	r3, [pc, #296]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c65a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c65e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c662:	617b      	str	r3, [r7, #20]
 800c664:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c666:	4b47      	ldr	r3, [pc, #284]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c66c:	4a45      	ldr	r2, [pc, #276]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c66e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c672:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c676:	4b43      	ldr	r3, [pc, #268]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c67c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c680:	613b      	str	r3, [r7, #16]
 800c682:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800c684:	4b3f      	ldr	r3, [pc, #252]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c68a:	4a3e      	ldr	r2, [pc, #248]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c68c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c690:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c694:	4b3b      	ldr	r3, [pc, #236]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c69a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c69e:	60fb      	str	r3, [r7, #12]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c6a2:	4b38      	ldr	r3, [pc, #224]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c6a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c6a8:	4a36      	ldr	r2, [pc, #216]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c6aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c6ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c6b2:	4b34      	ldr	r3, [pc, #208]	@ (800c784 <MX_GPIO_Init+0x1b0>)
 800c6b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c6b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c6bc:	60bb      	str	r3, [r7, #8]
 800c6be:	68bb      	ldr	r3, [r7, #8]


  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	2102      	movs	r1, #2
 800c6c4:	4830      	ldr	r0, [pc, #192]	@ (800c788 <MX_GPIO_Init+0x1b4>)
 800c6c6:	f7f5 fab9 	bl	8001c3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	2161      	movs	r1, #97	@ 0x61
 800c6ce:	482f      	ldr	r0, [pc, #188]	@ (800c78c <MX_GPIO_Init+0x1b8>)
 800c6d0:	f7f5 fab4 	bl	8001c3c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOJ, BUTTON_MINUS_Pin|BUTTON_PLUS_Pin|BUTTON_SETTING_Pin, GPIO_PIN_SET);

  // Configure GPIO pin - GC9A01_CS_Pin
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 800c6d4:	2302      	movs	r3, #2
 800c6d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 800c6e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	4827      	ldr	r0, [pc, #156]	@ (800c788 <MX_GPIO_Init+0x1b4>)
 800c6ec:	f7f5 f8de 	bl	80018ac <HAL_GPIO_Init>

  // Configure GPIO pins - GC9A01_BL_Pin ; GC9A01_DC_Pin ; GC9A01_RST_Pin
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 800c6f0:	2361      	movs	r3, #97	@ 0x61
 800c6f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800c700:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c704:	4619      	mov	r1, r3
 800c706:	4821      	ldr	r0, [pc, #132]	@ (800c78c <MX_GPIO_Init+0x1b8>)
 800c708:	f7f5 f8d0 	bl	80018ac <HAL_GPIO_Init>

  if(it_en)
 800c70c:	79fb      	ldrb	r3, [r7, #7]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d025      	beq.n	800c75e <MX_GPIO_Init+0x18a>
  {

	  GPIO_InitStruct.Pin = ( BUTTON_MINUS_Pin | BUTTON_PLUS_Pin | BUTTON_SETTING_Pin );
 800c712:	2389      	movs	r3, #137	@ 0x89
 800c714:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800c716:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800c71a:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c71c:	2301      	movs	r3, #1
 800c71e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800c720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c724:	4619      	mov	r1, r3
 800c726:	4819      	ldr	r0, [pc, #100]	@ (800c78c <MX_GPIO_Init+0x1b8>)
 800c728:	f7f5 f8c0 	bl	80018ac <HAL_GPIO_Init>

	  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800c72c:	2200      	movs	r2, #0
 800c72e:	2100      	movs	r1, #0
 800c730:	2006      	movs	r0, #6
 800c732:	f7f4 fd2e 	bl	8001192 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800c736:	2006      	movs	r0, #6
 800c738:	f7f4 fd45 	bl	80011c6 <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800c73c:	2200      	movs	r2, #0
 800c73e:	2100      	movs	r1, #0
 800c740:	2017      	movs	r0, #23
 800c742:	f7f4 fd26 	bl	8001192 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800c746:	2017      	movs	r0, #23
 800c748:	f7f4 fd3d 	bl	80011c6 <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800c74c:	2200      	movs	r2, #0
 800c74e:	2100      	movs	r1, #0
 800c750:	2009      	movs	r0, #9
 800c752:	f7f4 fd1e 	bl	8001192 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800c756:	2009      	movs	r0, #9
 800c758:	f7f4 fd35 	bl	80011c6 <HAL_NVIC_EnableIRQ>
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);

  }

}
 800c75c:	e00d      	b.n	800c77a <MX_GPIO_Init+0x1a6>
	  GPIO_InitStruct.Pin =  BUTTON_MINUS_Pin|BUTTON_PLUS_Pin|BUTTON_SETTING_Pin;
 800c75e:	2389      	movs	r3, #137	@ 0x89
 800c760:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c762:	2300      	movs	r3, #0
 800c764:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c766:	2301      	movs	r3, #1
 800c768:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c76a:	2300      	movs	r3, #0
 800c76c:	633b      	str	r3, [r7, #48]	@ 0x30
	  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800c76e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c772:	4619      	mov	r1, r3
 800c774:	4805      	ldr	r0, [pc, #20]	@ (800c78c <MX_GPIO_Init+0x1b8>)
 800c776:	f7f5 f899 	bl	80018ac <HAL_GPIO_Init>
}
 800c77a:	bf00      	nop
 800c77c:	3738      	adds	r7, #56	@ 0x38
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	58024400 	.word	0x58024400
 800c788:	58022800 	.word	0x58022800
 800c78c:	58022400 	.word	0x58022400

0800c790 <MX_RTC_Init>:


void MX_RTC_Init(void)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b086      	sub	sp, #24
 800c794:	af00      	add	r7, sp, #0

  RTC_TimeTypeDef sTime = {0};
 800c796:	1d3b      	adds	r3, r7, #4
 800c798:	2200      	movs	r2, #0
 800c79a:	601a      	str	r2, [r3, #0]
 800c79c:	605a      	str	r2, [r3, #4]
 800c79e:	609a      	str	r2, [r3, #8]
 800c7a0:	60da      	str	r2, [r3, #12]
 800c7a2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	603b      	str	r3, [r7, #0]


  hrtc.Instance = RTC;
 800c7a8:	4b25      	ldr	r3, [pc, #148]	@ (800c840 <MX_RTC_Init+0xb0>)
 800c7aa:	4a26      	ldr	r2, [pc, #152]	@ (800c844 <MX_RTC_Init+0xb4>)
 800c7ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800c7ae:	4b24      	ldr	r3, [pc, #144]	@ (800c840 <MX_RTC_Init+0xb0>)
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800c7b4:	4b22      	ldr	r3, [pc, #136]	@ (800c840 <MX_RTC_Init+0xb0>)
 800c7b6:	227f      	movs	r2, #127	@ 0x7f
 800c7b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800c7ba:	4b21      	ldr	r3, [pc, #132]	@ (800c840 <MX_RTC_Init+0xb0>)
 800c7bc:	22ff      	movs	r2, #255	@ 0xff
 800c7be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c7c0:	4b1f      	ldr	r3, [pc, #124]	@ (800c840 <MX_RTC_Init+0xb0>)
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c7c6:	4b1e      	ldr	r3, [pc, #120]	@ (800c840 <MX_RTC_Init+0xb0>)
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c7cc:	4b1c      	ldr	r3, [pc, #112]	@ (800c840 <MX_RTC_Init+0xb0>)
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800c7d2:	4b1b      	ldr	r3, [pc, #108]	@ (800c840 <MX_RTC_Init+0xb0>)
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800c7d8:	4819      	ldr	r0, [pc, #100]	@ (800c840 <MX_RTC_Init+0xb0>)
 800c7da:	f7fb fa3f 	bl	8007c5c <HAL_RTC_Init>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d001      	beq.n	800c7e8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800c7e4:	f7ff fd56 	bl	800c294 <Error_Handler>
  }


  sTime.Hours = 0;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800c7fc:	1d3b      	adds	r3, r7, #4
 800c7fe:	2200      	movs	r2, #0
 800c800:	4619      	mov	r1, r3
 800c802:	480f      	ldr	r0, [pc, #60]	@ (800c840 <MX_RTC_Init+0xb0>)
 800c804:	f7fb faac 	bl	8007d60 <HAL_RTC_SetTime>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d001      	beq.n	800c812 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800c80e:	f7ff fd41 	bl	800c294 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800c812:	2301      	movs	r3, #1
 800c814:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800c816:	2301      	movs	r3, #1
 800c818:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800c81a:	2301      	movs	r3, #1
 800c81c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800c81e:	2300      	movs	r3, #0
 800c820:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800c822:	463b      	mov	r3, r7
 800c824:	2200      	movs	r2, #0
 800c826:	4619      	mov	r1, r3
 800c828:	4805      	ldr	r0, [pc, #20]	@ (800c840 <MX_RTC_Init+0xb0>)
 800c82a:	f7fb fb93 	bl	8007f54 <HAL_RTC_SetDate>
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d001      	beq.n	800c838 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800c834:	f7ff fd2e 	bl	800c294 <Error_Handler>
  }

}
 800c838:	bf00      	nop
 800c83a:	3718      	adds	r7, #24
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	200002b8 	.word	0x200002b8
 800c844:	58004000 	.word	0x58004000

0800c848 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	4603      	mov	r3, r0
 800c850:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c852:	4b0c      	ldr	r3, [pc, #48]	@ (800c884 <SD_CheckStatus+0x3c>)
 800c854:	2201      	movs	r2, #1
 800c856:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState(0) == BSP_ERROR_NONE)
 800c858:	2000      	movs	r0, #0
 800c85a:	f7f3 ffc5 	bl	80007e8 <BSP_SD_GetCardState>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d107      	bne.n	800c874 <SD_CheckStatus+0x2c>
  {
    Stat &= ~STA_NOINIT;
 800c864:	4b07      	ldr	r3, [pc, #28]	@ (800c884 <SD_CheckStatus+0x3c>)
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	f023 0301 	bic.w	r3, r3, #1
 800c86e:	b2da      	uxtb	r2, r3
 800c870:	4b04      	ldr	r3, [pc, #16]	@ (800c884 <SD_CheckStatus+0x3c>)
 800c872:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800c874:	4b03      	ldr	r3, [pc, #12]	@ (800c884 <SD_CheckStatus+0x3c>)
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	b2db      	uxtb	r3, r3
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	2000000d 	.word	0x2000000d

0800c888 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	4603      	mov	r3, r0
 800c890:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c892:	79fb      	ldrb	r3, [r7, #7]
 800c894:	4618      	mov	r0, r3
 800c896:	f7ff ffd7 	bl	800c848 <SD_CheckStatus>
 800c89a:	4603      	mov	r3, r0
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3708      	adds	r7, #8
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c8ae:	79fb      	ldrb	r3, [r7, #7]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7ff ffc9 	bl	800c848 <SD_CheckStatus>
 800c8b6:	4603      	mov	r3, r0
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3708      	adds	r7, #8
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b086      	sub	sp, #24
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60b9      	str	r1, [r7, #8]
 800c8c8:	607a      	str	r2, [r7, #4]
 800c8ca:	603b      	str	r3, [r7, #0]
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_ReadBlocks(0,(uint32_t*)buff, 
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	68b9      	ldr	r1, [r7, #8]
 800c8da:	2000      	movs	r0, #0
 800c8dc:	f7f3 ff24 	bl	8000728 <BSP_SD_ReadBlocks>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d108      	bne.n	800c8f8 <SD_read+0x38>
                       (uint32_t) (sector), 
                       count) == BSP_ERROR_NONE)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState(0)!= BSP_ERROR_NONE)
 800c8e6:	bf00      	nop
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	f7f3 ff7d 	bl	80007e8 <BSP_SD_GetCardState>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1f9      	bne.n	800c8e8 <SD_read+0x28>
    {
    }
    res = RES_OK;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800c8f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3718      	adds	r7, #24
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b086      	sub	sp, #24
 800c906:	af00      	add	r7, sp, #0
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	607a      	str	r2, [r7, #4]
 800c90c:	603b      	str	r3, [r7, #0]
 800c90e:	4603      	mov	r3, r0
 800c910:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c912:	2301      	movs	r3, #1
 800c914:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_WriteBlocks(0,(uint32_t*)buff, 
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	68b9      	ldr	r1, [r7, #8]
 800c91c:	2000      	movs	r0, #0
 800c91e:	f7f3 ff33 	bl	8000788 <BSP_SD_WriteBlocks>
 800c922:	4603      	mov	r3, r0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d108      	bne.n	800c93a <SD_write+0x38>
                        (uint32_t)(sector), 
                        count) == BSP_ERROR_NONE)
  {
  /* wait until the Write operation is finished */
    while(BSP_SD_GetCardState(0) != BSP_ERROR_NONE)
 800c928:	bf00      	nop
 800c92a:	2000      	movs	r0, #0
 800c92c:	f7f3 ff5c 	bl	80007e8 <BSP_SD_GetCardState>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d1f9      	bne.n	800c92a <SD_write+0x28>
    {
    }    
    res = RES_OK;
 800c936:	2300      	movs	r3, #0
 800c938:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800c93a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3718      	adds	r7, #24
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b08c      	sub	sp, #48	@ 0x30
 800c948:	af00      	add	r7, sp, #0
 800c94a:	4603      	mov	r3, r0
 800c94c:	603a      	str	r2, [r7, #0]
 800c94e:	71fb      	strb	r3, [r7, #7]
 800c950:	460b      	mov	r3, r1
 800c952:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c954:	2301      	movs	r3, #1
 800c956:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c95a:	4b26      	ldr	r3, [pc, #152]	@ (800c9f4 <SD_ioctl+0xb0>)
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	f003 0301 	and.w	r3, r3, #1
 800c964:	2b00      	cmp	r3, #0
 800c966:	d001      	beq.n	800c96c <SD_ioctl+0x28>
 800c968:	2303      	movs	r3, #3
 800c96a:	e03e      	b.n	800c9ea <SD_ioctl+0xa6>
  
  switch (cmd)
 800c96c:	79bb      	ldrb	r3, [r7, #6]
 800c96e:	2b03      	cmp	r3, #3
 800c970:	d836      	bhi.n	800c9e0 <SD_ioctl+0x9c>
 800c972:	a201      	add	r2, pc, #4	@ (adr r2, 800c978 <SD_ioctl+0x34>)
 800c974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c978:	0800c989 	.word	0x0800c989
 800c97c:	0800c991 	.word	0x0800c991
 800c980:	0800c9ab 	.word	0x0800c9ab
 800c984:	0800c9c7 	.word	0x0800c9c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c988:	2300      	movs	r3, #0
 800c98a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c98e:	e02a      	b.n	800c9e6 <SD_ioctl+0xa2>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800c990:	f107 0308 	add.w	r3, r7, #8
 800c994:	4619      	mov	r1, r3
 800c996:	2000      	movs	r0, #0
 800c998:	f7f3 ff40 	bl	800081c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c99c:	6a3a      	ldr	r2, [r7, #32]
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c9a8:	e01d      	b.n	800c9e6 <SD_ioctl+0xa2>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800c9aa:	f107 0308 	add.w	r3, r7, #8
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	2000      	movs	r0, #0
 800c9b2:	f7f3 ff33 	bl	800081c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c9c4:	e00f      	b.n	800c9e6 <SD_ioctl+0xa2>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800c9c6:	f107 0308 	add.w	r3, r7, #8
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	f7f3 ff25 	bl	800081c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800c9d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	601a      	str	r2, [r3, #0]
  res = RES_OK;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c9de:	e002      	b.n	800c9e6 <SD_ioctl+0xa2>
  
  default:
    res = RES_PARERR;
 800c9e0:	2304      	movs	r3, #4
 800c9e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }
  
  return res;
 800c9e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3730      	adds	r7, #48	@ 0x30
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	2000000d 	.word	0x2000000d

0800c9f8 <smart_watch_init>:

video_t video;													// Video data structure


void smart_watch_init(void)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	af00      	add	r7, sp, #0

	parameters_reset();
 800c9fc:	f000 fc90 	bl	800d320 <parameters_reset>

	// First time setting
	video.video_mode = SETTING_MODE;
 800ca00:	4b10      	ldr	r3, [pc, #64]	@ (800ca44 <smart_watch_init+0x4c>)
 800ca02:	2200      	movs	r2, #0
 800ca04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

	// SD card initialization
	// Link the micro SD disk I/O driver
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800ca08:	490f      	ldr	r1, [pc, #60]	@ (800ca48 <smart_watch_init+0x50>)
 800ca0a:	4810      	ldr	r0, [pc, #64]	@ (800ca4c <smart_watch_init+0x54>)
 800ca0c:	f004 f846 	bl	8010a9c <FATFS_LinkDriver>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d112      	bne.n	800ca3c <smart_watch_init+0x44>
	{

		// Init the SD Card
	    SD_Initialize();
 800ca16:	f000 fe5d 	bl	800d6d4 <SD_Initialize>

	    if(BSP_SD_IsDetected(0))
 800ca1a:	2000      	movs	r0, #0
 800ca1c:	f7f3 fe60 	bl	80006e0 <BSP_SD_IsDetected>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d009      	beq.n	800ca3a <smart_watch_init+0x42>
	    {

	      // Register the file system object to the FatFs module
	      if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 800ca26:	2200      	movs	r2, #0
 800ca28:	4907      	ldr	r1, [pc, #28]	@ (800ca48 <smart_watch_init+0x50>)
 800ca2a:	4809      	ldr	r0, [pc, #36]	@ (800ca50 <smart_watch_init+0x58>)
 800ca2c:	f003 f9ea 	bl	800fe04 <f_mount>
 800ca30:	4603      	mov	r3, r0
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d003      	beq.n	800ca3e <smart_watch_init+0x46>
	      {

	    	  while(1);
 800ca36:	bf00      	nop
 800ca38:	e7fd      	b.n	800ca36 <smart_watch_init+0x3e>

	    }
	    else
  		{

  			while(1);
 800ca3a:	e7fe      	b.n	800ca3a <smart_watch_init+0x42>

  	}
	else
	{

		while(1);
 800ca3c:	e7fe      	b.n	800ca3c <smart_watch_init+0x44>

	}

}
 800ca3e:	bf00      	nop
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	20018824 	.word	0x20018824
 800ca48:	200185a8 	.word	0x200185a8
 800ca4c:	0801190c 	.word	0x0801190c
 800ca50:	20018374 	.word	0x20018374

0800ca54 <smart_watch_process>:


void smart_watch_process(void)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	af00      	add	r7, sp, #0

	while(1)
	{

		// Check if new file needs to be open
		file_handler(0);
 800ca58:	2000      	movs	r0, #0
 800ca5a:	f000 fb27 	bl	800d0ac <file_handler>

		// Video processing unit
		mjpeg_video_processing();
 800ca5e:	f000 f807 	bl	800ca70 <mjpeg_video_processing>

		// Check for user buttons pressed
		user_buttons_handler();
 800ca62:	f000 fba1 	bl	800d1a8 <user_buttons_handler>

		// Battery management
		battery_management();
 800ca66:	f000 fbdd 	bl	800d224 <battery_management>
		file_handler(0);
 800ca6a:	bf00      	nop
 800ca6c:	e7f4      	b.n	800ca58 <smart_watch_process+0x4>
	...

0800ca70 <mjpeg_video_processing>:

////////////////////////////////////////////////////// PRIVATE FUNCTIONS


static void mjpeg_video_processing(void)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	af00      	add	r7, sp, #0

	switch(video.video_mode)
 800ca74:	4b06      	ldr	r3, [pc, #24]	@ (800ca90 <mjpeg_video_processing+0x20>)
 800ca76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	d002      	beq.n	800ca84 <mjpeg_video_processing+0x14>
	{

		default:
		case SETTING_MODE:

			clock_setting();
 800ca7e:	f000 f809 	bl	800ca94 <clock_setting>

			break;
 800ca82:	e002      	b.n	800ca8a <mjpeg_video_processing+0x1a>

		case NORMAL_MODE:

			clock_normal();
 800ca84:	f000 f914 	bl	800ccb0 <clock_normal>

			break;
 800ca88:	bf00      	nop

	}

}
 800ca8a:	bf00      	nop
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	20018824 	.word	0x20018824

0800ca94 <clock_setting>:


static void clock_setting(void)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	af00      	add	r7, sp, #0

	switch(video.set)
 800ca98:	4b81      	ldr	r3, [pc, #516]	@ (800cca0 <clock_setting+0x20c>)
 800ca9a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800ca9e:	2b03      	cmp	r3, #3
 800caa0:	f000 80ed 	beq.w	800cc7e <clock_setting+0x1ea>
 800caa4:	2b03      	cmp	r3, #3
 800caa6:	dc03      	bgt.n	800cab0 <clock_setting+0x1c>
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d00e      	beq.n	800caca <clock_setting+0x36>
 800caac:	2b02      	cmp	r3, #2
 800caae:	d06d      	beq.n	800cb8c <clock_setting+0xf8>
	{

		default:
		case SET_IDLE:

			while(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin));
 800cab0:	bf00      	nop
 800cab2:	2108      	movs	r1, #8
 800cab4:	487b      	ldr	r0, [pc, #492]	@ (800cca4 <clock_setting+0x210>)
 800cab6:	f7f5 f8a9 	bl	8001c0c <HAL_GPIO_ReadPin>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d0f8      	beq.n	800cab2 <clock_setting+0x1e>

			video.set = SET_HOURS;
 800cac0:	4b77      	ldr	r3, [pc, #476]	@ (800cca0 <clock_setting+0x20c>)
 800cac2:	2201      	movs	r2, #1
 800cac4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			break;
 800cac8:	e0e8      	b.n	800cc9c <clock_setting+0x208>

		case SET_HOURS:

			show_frame(0);
 800caca:	2000      	movs	r0, #0
 800cacc:	f000 fa1c 	bl	800cf08 <show_frame>

			// If button plus
			if(!HAL_GPIO_ReadPin(BUTTON_PLUS_GPIO_Port, BUTTON_PLUS_Pin))
 800cad0:	2180      	movs	r1, #128	@ 0x80
 800cad2:	4874      	ldr	r0, [pc, #464]	@ (800cca4 <clock_setting+0x210>)
 800cad4:	f7f5 f89a 	bl	8001c0c <HAL_GPIO_ReadPin>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d122      	bne.n	800cb24 <clock_setting+0x90>
			{

				HAL_Delay(200);
 800cade:	20c8      	movs	r0, #200	@ 0xc8
 800cae0:	f7f4 fa1c 	bl	8000f1c <HAL_Delay>

				video.time.Hours++;
 800cae4:	4b6e      	ldr	r3, [pc, #440]	@ (800cca0 <clock_setting+0x20c>)
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	3301      	adds	r3, #1
 800caea:	b2da      	uxtb	r2, r3
 800caec:	4b6c      	ldr	r3, [pc, #432]	@ (800cca0 <clock_setting+0x20c>)
 800caee:	701a      	strb	r2, [r3, #0]
				video.time.Hours %= 12;
 800caf0:	4b6b      	ldr	r3, [pc, #428]	@ (800cca0 <clock_setting+0x20c>)
 800caf2:	781a      	ldrb	r2, [r3, #0]
 800caf4:	4b6c      	ldr	r3, [pc, #432]	@ (800cca8 <clock_setting+0x214>)
 800caf6:	fba3 1302 	umull	r1, r3, r3, r2
 800cafa:	08d9      	lsrs	r1, r3, #3
 800cafc:	460b      	mov	r3, r1
 800cafe:	005b      	lsls	r3, r3, #1
 800cb00:	440b      	add	r3, r1
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	1ad3      	subs	r3, r2, r3
 800cb06:	b2da      	uxtb	r2, r3
 800cb08:	4b65      	ldr	r3, [pc, #404]	@ (800cca0 <clock_setting+0x20c>)
 800cb0a:	701a      	strb	r2, [r3, #0]

				video.file_idx = ( video.time.Hours * 60 );
 800cb0c:	4b64      	ldr	r3, [pc, #400]	@ (800cca0 <clock_setting+0x20c>)
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	461a      	mov	r2, r3
 800cb12:	0112      	lsls	r2, r2, #4
 800cb14:	1ad3      	subs	r3, r2, r3
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	b29a      	uxth	r2, r3
 800cb1a:	4b61      	ldr	r3, [pc, #388]	@ (800cca0 <clock_setting+0x20c>)
 800cb1c:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 800cb1e:	2001      	movs	r0, #1
 800cb20:	f000 fac4 	bl	800d0ac <file_handler>

			}

			// If button minus
			if(!HAL_GPIO_ReadPin(BUTTON_MINUS_GPIO_Port, BUTTON_MINUS_Pin))
 800cb24:	2101      	movs	r1, #1
 800cb26:	485f      	ldr	r0, [pc, #380]	@ (800cca4 <clock_setting+0x210>)
 800cb28:	f7f5 f870 	bl	8001c0c <HAL_GPIO_ReadPin>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d11c      	bne.n	800cb6c <clock_setting+0xd8>
			{

				HAL_Delay(200);
 800cb32:	20c8      	movs	r0, #200	@ 0xc8
 800cb34:	f7f4 f9f2 	bl	8000f1c <HAL_Delay>

				if(video.time.Hours > 0)
 800cb38:	4b59      	ldr	r3, [pc, #356]	@ (800cca0 <clock_setting+0x20c>)
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d006      	beq.n	800cb4e <clock_setting+0xba>
					video.time.Hours--;
 800cb40:	4b57      	ldr	r3, [pc, #348]	@ (800cca0 <clock_setting+0x20c>)
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	3b01      	subs	r3, #1
 800cb46:	b2da      	uxtb	r2, r3
 800cb48:	4b55      	ldr	r3, [pc, #340]	@ (800cca0 <clock_setting+0x20c>)
 800cb4a:	701a      	strb	r2, [r3, #0]
 800cb4c:	e002      	b.n	800cb54 <clock_setting+0xc0>
				else
					video.time.Hours = 11;
 800cb4e:	4b54      	ldr	r3, [pc, #336]	@ (800cca0 <clock_setting+0x20c>)
 800cb50:	220b      	movs	r2, #11
 800cb52:	701a      	strb	r2, [r3, #0]

				video.file_idx = ( video.time.Hours * 60 );
 800cb54:	4b52      	ldr	r3, [pc, #328]	@ (800cca0 <clock_setting+0x20c>)
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	461a      	mov	r2, r3
 800cb5a:	0112      	lsls	r2, r2, #4
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	009b      	lsls	r3, r3, #2
 800cb60:	b29a      	uxth	r2, r3
 800cb62:	4b4f      	ldr	r3, [pc, #316]	@ (800cca0 <clock_setting+0x20c>)
 800cb64:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 800cb66:	2001      	movs	r0, #1
 800cb68:	f000 faa0 	bl	800d0ac <file_handler>

			}

			// If button settings
			if(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin))
 800cb6c:	2108      	movs	r1, #8
 800cb6e:	484d      	ldr	r0, [pc, #308]	@ (800cca4 <clock_setting+0x210>)
 800cb70:	f7f5 f84c 	bl	8001c0c <HAL_GPIO_ReadPin>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	f040 808d 	bne.w	800cc96 <clock_setting+0x202>
			{

				HAL_Delay(200);
 800cb7c:	20c8      	movs	r0, #200	@ 0xc8
 800cb7e:	f7f4 f9cd 	bl	8000f1c <HAL_Delay>

				video.set = SET_MINUTES;
 800cb82:	4b47      	ldr	r3, [pc, #284]	@ (800cca0 <clock_setting+0x20c>)
 800cb84:	2202      	movs	r2, #2
 800cb86:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			}

			break;
 800cb8a:	e084      	b.n	800cc96 <clock_setting+0x202>

		case SET_MINUTES:

			show_frame(0);
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	f000 f9bb 	bl	800cf08 <show_frame>

			// If button plus
			if(!HAL_GPIO_ReadPin(BUTTON_PLUS_GPIO_Port, BUTTON_PLUS_Pin))
 800cb92:	2180      	movs	r1, #128	@ 0x80
 800cb94:	4843      	ldr	r0, [pc, #268]	@ (800cca4 <clock_setting+0x210>)
 800cb96:	f7f5 f839 	bl	8001c0c <HAL_GPIO_ReadPin>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d129      	bne.n	800cbf4 <clock_setting+0x160>
			{

				HAL_Delay(200);
 800cba0:	20c8      	movs	r0, #200	@ 0xc8
 800cba2:	f7f4 f9bb 	bl	8000f1c <HAL_Delay>

				video.time.Minutes++;
 800cba6:	4b3e      	ldr	r3, [pc, #248]	@ (800cca0 <clock_setting+0x20c>)
 800cba8:	785b      	ldrb	r3, [r3, #1]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	b2da      	uxtb	r2, r3
 800cbae:	4b3c      	ldr	r3, [pc, #240]	@ (800cca0 <clock_setting+0x20c>)
 800cbb0:	705a      	strb	r2, [r3, #1]
				video.time.Minutes %= 60;
 800cbb2:	4b3b      	ldr	r3, [pc, #236]	@ (800cca0 <clock_setting+0x20c>)
 800cbb4:	785a      	ldrb	r2, [r3, #1]
 800cbb6:	4b3d      	ldr	r3, [pc, #244]	@ (800ccac <clock_setting+0x218>)
 800cbb8:	fba3 1302 	umull	r1, r3, r3, r2
 800cbbc:	0959      	lsrs	r1, r3, #5
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	011b      	lsls	r3, r3, #4
 800cbc2:	1a5b      	subs	r3, r3, r1
 800cbc4:	009b      	lsls	r3, r3, #2
 800cbc6:	1ad3      	subs	r3, r2, r3
 800cbc8:	b2da      	uxtb	r2, r3
 800cbca:	4b35      	ldr	r3, [pc, #212]	@ (800cca0 <clock_setting+0x20c>)
 800cbcc:	705a      	strb	r2, [r3, #1]

				video.file_idx += video.time.Minutes;
 800cbce:	4b34      	ldr	r3, [pc, #208]	@ (800cca0 <clock_setting+0x20c>)
 800cbd0:	8a9b      	ldrh	r3, [r3, #20]
 800cbd2:	4a33      	ldr	r2, [pc, #204]	@ (800cca0 <clock_setting+0x20c>)
 800cbd4:	7852      	ldrb	r2, [r2, #1]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	b29a      	uxth	r2, r3
 800cbda:	4b31      	ldr	r3, [pc, #196]	@ (800cca0 <clock_setting+0x20c>)
 800cbdc:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 800cbde:	2001      	movs	r0, #1
 800cbe0:	f000 fa64 	bl	800d0ac <file_handler>

				video.file_idx -= video.time.Minutes;
 800cbe4:	4b2e      	ldr	r3, [pc, #184]	@ (800cca0 <clock_setting+0x20c>)
 800cbe6:	8a9b      	ldrh	r3, [r3, #20]
 800cbe8:	4a2d      	ldr	r2, [pc, #180]	@ (800cca0 <clock_setting+0x20c>)
 800cbea:	7852      	ldrb	r2, [r2, #1]
 800cbec:	1a9b      	subs	r3, r3, r2
 800cbee:	b29a      	uxth	r2, r3
 800cbf0:	4b2b      	ldr	r3, [pc, #172]	@ (800cca0 <clock_setting+0x20c>)
 800cbf2:	829a      	strh	r2, [r3, #20]


			}

			// If button minus
			if(!HAL_GPIO_ReadPin(BUTTON_MINUS_GPIO_Port, BUTTON_MINUS_Pin))
 800cbf4:	2101      	movs	r1, #1
 800cbf6:	482b      	ldr	r0, [pc, #172]	@ (800cca4 <clock_setting+0x210>)
 800cbf8:	f7f5 f808 	bl	8001c0c <HAL_GPIO_ReadPin>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d123      	bne.n	800cc4a <clock_setting+0x1b6>
			{

				HAL_Delay(200);
 800cc02:	20c8      	movs	r0, #200	@ 0xc8
 800cc04:	f7f4 f98a 	bl	8000f1c <HAL_Delay>

				if(video.time.Minutes > 0)
 800cc08:	4b25      	ldr	r3, [pc, #148]	@ (800cca0 <clock_setting+0x20c>)
 800cc0a:	785b      	ldrb	r3, [r3, #1]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d006      	beq.n	800cc1e <clock_setting+0x18a>
					video.time.Minutes--;
 800cc10:	4b23      	ldr	r3, [pc, #140]	@ (800cca0 <clock_setting+0x20c>)
 800cc12:	785b      	ldrb	r3, [r3, #1]
 800cc14:	3b01      	subs	r3, #1
 800cc16:	b2da      	uxtb	r2, r3
 800cc18:	4b21      	ldr	r3, [pc, #132]	@ (800cca0 <clock_setting+0x20c>)
 800cc1a:	705a      	strb	r2, [r3, #1]
 800cc1c:	e002      	b.n	800cc24 <clock_setting+0x190>
				else
					video.time.Minutes = 59;
 800cc1e:	4b20      	ldr	r3, [pc, #128]	@ (800cca0 <clock_setting+0x20c>)
 800cc20:	223b      	movs	r2, #59	@ 0x3b
 800cc22:	705a      	strb	r2, [r3, #1]

				video.file_idx += video.time.Minutes;
 800cc24:	4b1e      	ldr	r3, [pc, #120]	@ (800cca0 <clock_setting+0x20c>)
 800cc26:	8a9b      	ldrh	r3, [r3, #20]
 800cc28:	4a1d      	ldr	r2, [pc, #116]	@ (800cca0 <clock_setting+0x20c>)
 800cc2a:	7852      	ldrb	r2, [r2, #1]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	b29a      	uxth	r2, r3
 800cc30:	4b1b      	ldr	r3, [pc, #108]	@ (800cca0 <clock_setting+0x20c>)
 800cc32:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 800cc34:	2001      	movs	r0, #1
 800cc36:	f000 fa39 	bl	800d0ac <file_handler>

				video.file_idx -= video.time.Minutes;
 800cc3a:	4b19      	ldr	r3, [pc, #100]	@ (800cca0 <clock_setting+0x20c>)
 800cc3c:	8a9b      	ldrh	r3, [r3, #20]
 800cc3e:	4a18      	ldr	r2, [pc, #96]	@ (800cca0 <clock_setting+0x20c>)
 800cc40:	7852      	ldrb	r2, [r2, #1]
 800cc42:	1a9b      	subs	r3, r3, r2
 800cc44:	b29a      	uxth	r2, r3
 800cc46:	4b16      	ldr	r3, [pc, #88]	@ (800cca0 <clock_setting+0x20c>)
 800cc48:	829a      	strh	r2, [r3, #20]

			}

			// If button settings
			if(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin))
 800cc4a:	2108      	movs	r1, #8
 800cc4c:	4815      	ldr	r0, [pc, #84]	@ (800cca4 <clock_setting+0x210>)
 800cc4e:	f7f4 ffdd 	bl	8001c0c <HAL_GPIO_ReadPin>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d120      	bne.n	800cc9a <clock_setting+0x206>
			{

				HAL_Delay(200);
 800cc58:	20c8      	movs	r0, #200	@ 0xc8
 800cc5a:	f7f4 f95f 	bl	8000f1c <HAL_Delay>

				video.file_idx += video.time.Minutes;
 800cc5e:	4b10      	ldr	r3, [pc, #64]	@ (800cca0 <clock_setting+0x20c>)
 800cc60:	8a9b      	ldrh	r3, [r3, #20]
 800cc62:	4a0f      	ldr	r2, [pc, #60]	@ (800cca0 <clock_setting+0x20c>)
 800cc64:	7852      	ldrb	r2, [r2, #1]
 800cc66:	4413      	add	r3, r2
 800cc68:	b29a      	uxth	r2, r3
 800cc6a:	4b0d      	ldr	r3, [pc, #52]	@ (800cca0 <clock_setting+0x20c>)
 800cc6c:	829a      	strh	r2, [r3, #20]

				video.isfirstFrame = 1;
 800cc6e:	4b0c      	ldr	r3, [pc, #48]	@ (800cca0 <clock_setting+0x20c>)
 800cc70:	2201      	movs	r2, #1
 800cc72:	759a      	strb	r2, [r3, #22]

				video.set = SET_START;
 800cc74:	4b0a      	ldr	r3, [pc, #40]	@ (800cca0 <clock_setting+0x20c>)
 800cc76:	2203      	movs	r2, #3
 800cc78:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			}

			break;
 800cc7c:	e00d      	b.n	800cc9a <clock_setting+0x206>

		case SET_START:

			file_handler(1);
 800cc7e:	2001      	movs	r0, #1
 800cc80:	f000 fa14 	bl	800d0ac <file_handler>

			video.set = SET_IDLE;
 800cc84:	4b06      	ldr	r3, [pc, #24]	@ (800cca0 <clock_setting+0x20c>)
 800cc86:	2200      	movs	r2, #0
 800cc88:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
			video.video_mode = NORMAL_MODE;
 800cc8c:	4b04      	ldr	r3, [pc, #16]	@ (800cca0 <clock_setting+0x20c>)
 800cc8e:	2201      	movs	r2, #1
 800cc90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

			break;
 800cc94:	e002      	b.n	800cc9c <clock_setting+0x208>
			break;
 800cc96:	bf00      	nop
 800cc98:	e000      	b.n	800cc9c <clock_setting+0x208>
			break;
 800cc9a:	bf00      	nop

	}

}
 800cc9c:	bf00      	nop
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	20018824 	.word	0x20018824
 800cca4:	58022400 	.word	0x58022400
 800cca8:	aaaaaaab 	.word	0xaaaaaaab
 800ccac:	88888889 	.word	0x88888889

0800ccb0 <clock_normal>:


static void clock_normal(void)
{
 800ccb0:	b590      	push	{r4, r7, lr}
 800ccb2:	b087      	sub	sp, #28
 800ccb4:	af02      	add	r7, sp, #8

	if(video.display_status == DISPLAY_OFF)
 800ccb6:	4b8a      	ldr	r3, [pc, #552]	@ (800cee0 <clock_normal+0x230>)
 800ccb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f000 8106 	beq.w	800cece <clock_normal+0x21e>
		return;

	// Save the frame into MJPEG_VideoBuffer
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	4987      	ldr	r1, [pc, #540]	@ (800cee4 <clock_normal+0x234>)
 800ccc6:	4888      	ldr	r0, [pc, #544]	@ (800cee8 <clock_normal+0x238>)
 800ccc8:	f7fe fe1a 	bl	800b900 <AVI_GetFrame>
 800cccc:	4603      	mov	r3, r0
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	4b83      	ldr	r3, [pc, #524]	@ (800cee0 <clock_normal+0x230>)
 800ccd2:	75da      	strb	r2, [r3, #23]


	if(video.frameToSkip > 0)
 800ccd4:	4b82      	ldr	r3, [pc, #520]	@ (800cee0 <clock_normal+0x230>)
 800ccd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	dd0f      	ble.n	800ccfc <clock_normal+0x4c>
	{

		// Skip frames until the the watch time is
		// synchronized with the actual time

		video.frameToSkip--;
 800ccdc:	4b80      	ldr	r3, [pc, #512]	@ (800cee0 <clock_normal+0x230>)
 800ccde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cce0:	3b01      	subs	r3, #1
 800cce2:	4a7f      	ldr	r2, [pc, #508]	@ (800cee0 <clock_normal+0x230>)
 800cce4:	6253      	str	r3, [r2, #36]	@ 0x24
		AVI_Handel.CurrentImage++;
 800cce6:	4b80      	ldr	r3, [pc, #512]	@ (800cee8 <clock_normal+0x238>)
 800cce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccea:	3301      	adds	r3, #1
 800ccec:	4a7e      	ldr	r2, [pc, #504]	@ (800cee8 <clock_normal+0x238>)
 800ccee:	62d3      	str	r3, [r2, #44]	@ 0x2c
		video.frameCount++;
 800ccf0:	4b7b      	ldr	r3, [pc, #492]	@ (800cee0 <clock_normal+0x230>)
 800ccf2:	6a1b      	ldr	r3, [r3, #32]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	4a7a      	ldr	r2, [pc, #488]	@ (800cee0 <clock_normal+0x230>)
 800ccf8:	6213      	str	r3, [r2, #32]
 800ccfa:	e096      	b.n	800ce2a <clock_normal+0x17a>

	}
	else if(video.FrameType == AVI_VIDEO_FRAME)
 800ccfc:	4b78      	ldr	r3, [pc, #480]	@ (800cee0 <clock_normal+0x230>)
 800ccfe:	7ddb      	ldrb	r3, [r3, #23]
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	f040 8092 	bne.w	800ce2a <clock_normal+0x17a>
	{

		AVI_Handel.CurrentImage++;
 800cd06:	4b78      	ldr	r3, [pc, #480]	@ (800cee8 <clock_normal+0x238>)
 800cd08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	4a76      	ldr	r2, [pc, #472]	@ (800cee8 <clock_normal+0x238>)
 800cd0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
		video.frameCount++;
 800cd10:	4b73      	ldr	r3, [pc, #460]	@ (800cee0 <clock_normal+0x230>)
 800cd12:	6a1b      	ldr	r3, [r3, #32]
 800cd14:	3301      	adds	r3, #1
 800cd16:	4a72      	ldr	r2, [pc, #456]	@ (800cee0 <clock_normal+0x230>)
 800cd18:	6213      	str	r3, [r2, #32]

		// Decode the frame inside MJPEG_VideoBuffer and put it into jpegOutDataAdreess in the format YCrCb
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 800cd1a:	4974      	ldr	r1, [pc, #464]	@ (800ceec <clock_normal+0x23c>)
 800cd1c:	4b72      	ldr	r3, [pc, #456]	@ (800cee8 <clock_normal+0x238>)
 800cd1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd20:	4b6f      	ldr	r3, [pc, #444]	@ (800cee0 <clock_normal+0x230>)
 800cd22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd24:	4872      	ldr	r0, [pc, #456]	@ (800cef0 <clock_normal+0x240>)
 800cd26:	f7ff f9dd 	bl	800c0e4 <JPEG_Decode_DMA>

		while(Jpeg_HWDecodingEnd == 0);
 800cd2a:	bf00      	nop
 800cd2c:	4b71      	ldr	r3, [pc, #452]	@ (800cef4 <clock_normal+0x244>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d0fb      	beq.n	800cd2c <clock_normal+0x7c>

		if(video.isfirstFrame == 1)
 800cd34:	4b6a      	ldr	r3, [pc, #424]	@ (800cee0 <clock_normal+0x230>)
 800cd36:	7d9b      	ldrb	r3, [r3, #22]
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d143      	bne.n	800cdc4 <clock_normal+0x114>
		{

			video.isfirstFrame = 0;
 800cd3c:	4b68      	ldr	r3, [pc, #416]	@ (800cee0 <clock_normal+0x230>)
 800cd3e:	2200      	movs	r2, #0
 800cd40:	759a      	strb	r2, [r3, #22]

			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 800cd42:	496d      	ldr	r1, [pc, #436]	@ (800cef8 <clock_normal+0x248>)
 800cd44:	486a      	ldr	r0, [pc, #424]	@ (800cef0 <clock_normal+0x240>)
 800cd46:	f7f5 f82f 	bl	8001da8 <HAL_JPEG_GetInfo>

			DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 800cd4a:	4b6b      	ldr	r3, [pc, #428]	@ (800cef8 <clock_normal+0x248>)
 800cd4c:	68db      	ldr	r3, [r3, #12]
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	4a69      	ldr	r2, [pc, #420]	@ (800cef8 <clock_normal+0x248>)
 800cd52:	6892      	ldr	r2, [r2, #8]
 800cd54:	b291      	uxth	r1, r2
 800cd56:	4a68      	ldr	r2, [pc, #416]	@ (800cef8 <clock_normal+0x248>)
 800cd58:	6852      	ldr	r2, [r2, #4]
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f000 fc02 	bl	800d564 <DMA2D_Init>

			video.width = JPEG_Info.ImageWidth;
 800cd60:	4b65      	ldr	r3, [pc, #404]	@ (800cef8 <clock_normal+0x248>)
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	b29a      	uxth	r2, r3
 800cd66:	4b5e      	ldr	r3, [pc, #376]	@ (800cee0 <clock_normal+0x230>)
 800cd68:	831a      	strh	r2, [r3, #24]
			video.height = JPEG_Info.ImageHeight;
 800cd6a:	4b63      	ldr	r3, [pc, #396]	@ (800cef8 <clock_normal+0x248>)
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	b29a      	uxth	r2, r3
 800cd70:	4b5b      	ldr	r3, [pc, #364]	@ (800cee0 <clock_normal+0x230>)
 800cd72:	835a      	strh	r2, [r3, #26]
			video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 800cd74:	4b5a      	ldr	r3, [pc, #360]	@ (800cee0 <clock_normal+0x230>)
 800cd76:	8b1b      	ldrh	r3, [r3, #24]
 800cd78:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	da00      	bge.n	800cd82 <clock_normal+0xd2>
 800cd80:	3301      	adds	r3, #1
 800cd82:	105b      	asrs	r3, r3, #1
 800cd84:	b29a      	uxth	r2, r3
 800cd86:	4b56      	ldr	r3, [pc, #344]	@ (800cee0 <clock_normal+0x230>)
 800cd88:	839a      	strh	r2, [r3, #28]
			video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 800cd8a:	4b55      	ldr	r3, [pc, #340]	@ (800cee0 <clock_normal+0x230>)
 800cd8c:	8b5b      	ldrh	r3, [r3, #26]
 800cd8e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	da00      	bge.n	800cd98 <clock_normal+0xe8>
 800cd96:	3301      	adds	r3, #1
 800cd98:	105b      	asrs	r3, r3, #1
 800cd9a:	b29a      	uxth	r2, r3
 800cd9c:	4b50      	ldr	r3, [pc, #320]	@ (800cee0 <clock_normal+0x230>)
 800cd9e:	83da      	strh	r2, [r3, #30]

			video.frame_time = AVI_Handel.aviInfo.SecPerFrame;
 800cda0:	4b51      	ldr	r3, [pc, #324]	@ (800cee8 <clock_normal+0x238>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	b29a      	uxth	r2, r3
 800cda6:	4b4e      	ldr	r3, [pc, #312]	@ (800cee0 <clock_normal+0x230>)
 800cda8:	851a      	strh	r2, [r3, #40]	@ 0x28

			video.tick_offset = HAL_GetTick();
 800cdaa:	f7f4 f8ab 	bl	8000f04 <HAL_GetTick>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	4a4b      	ldr	r2, [pc, #300]	@ (800cee0 <clock_normal+0x230>)
 800cdb2:	6313      	str	r3, [r2, #48]	@ 0x30
			video.frameCount = 1;
 800cdb4:	4b4a      	ldr	r3, [pc, #296]	@ (800cee0 <clock_normal+0x230>)
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	621a      	str	r2, [r3, #32]

			HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 800cdba:	2200      	movs	r2, #0
 800cdbc:	4948      	ldr	r1, [pc, #288]	@ (800cee0 <clock_normal+0x230>)
 800cdbe:	484f      	ldr	r0, [pc, #316]	@ (800cefc <clock_normal+0x24c>)
 800cdc0:	f7fa ffce 	bl	8007d60 <HAL_RTC_SetTime>

		}

		// Copies the output frame into LCD_FRAME_BUFFER and does the conversion from YCrCb to RGB888
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)LCD_FRAME_BUFFER, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800cdc4:	4b46      	ldr	r3, [pc, #280]	@ (800cee0 <clock_normal+0x230>)
 800cdc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdc8:	4618      	mov	r0, r3
 800cdca:	4b4b      	ldr	r3, [pc, #300]	@ (800cef8 <clock_normal+0x248>)
 800cdcc:	68db      	ldr	r3, [r3, #12]
 800cdce:	b29a      	uxth	r2, r3
 800cdd0:	4b49      	ldr	r3, [pc, #292]	@ (800cef8 <clock_normal+0x248>)
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	b29b      	uxth	r3, r3
 800cdd6:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 800cdda:	f000 fc41 	bl	800d660 <DMA2D_CopyBuffer>

		video.jpegOutDataAdreess = (video.jpegOutDataAdreess == JPEG_OUTPUT_DATA_BUFFER0) ? JPEG_OUTPUT_DATA_BUFFER1 : JPEG_OUTPUT_DATA_BUFFER0;
 800cdde:	4b40      	ldr	r3, [pc, #256]	@ (800cee0 <clock_normal+0x230>)
 800cde0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cde2:	4a47      	ldr	r2, [pc, #284]	@ (800cf00 <clock_normal+0x250>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d101      	bne.n	800cdec <clock_normal+0x13c>
 800cde8:	4b46      	ldr	r3, [pc, #280]	@ (800cf04 <clock_normal+0x254>)
 800cdea:	e000      	b.n	800cdee <clock_normal+0x13e>
 800cdec:	4b44      	ldr	r3, [pc, #272]	@ (800cf00 <clock_normal+0x250>)
 800cdee:	4a3c      	ldr	r2, [pc, #240]	@ (800cee0 <clock_normal+0x230>)
 800cdf0:	6353      	str	r3, [r2, #52]	@ 0x34

		// Implements the data conversion from RGB888 to RGB565
		doubleFormat pOut;
		pOut.u8Arr = (uint8_t *)LCD_FRAME_BUFFER;
 800cdf2:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800cdf6:	607b      	str	r3, [r7, #4]
		depth24To16(&pOut, ( video.width * video.height ), 3);
 800cdf8:	4b39      	ldr	r3, [pc, #228]	@ (800cee0 <clock_normal+0x230>)
 800cdfa:	8b1a      	ldrh	r2, [r3, #24]
 800cdfc:	4b38      	ldr	r3, [pc, #224]	@ (800cee0 <clock_normal+0x230>)
 800cdfe:	8b5b      	ldrh	r3, [r3, #26]
 800ce00:	fb12 f303 	smulbb	r3, r2, r3
 800ce04:	b299      	uxth	r1, r3
 800ce06:	1d3b      	adds	r3, r7, #4
 800ce08:	2203      	movs	r2, #3
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f000 face 	bl	800d3ac <depth24To16>

		// Display the image
		lcd_draw(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr);
 800ce10:	4b33      	ldr	r3, [pc, #204]	@ (800cee0 <clock_normal+0x230>)
 800ce12:	8b98      	ldrh	r0, [r3, #28]
 800ce14:	4b32      	ldr	r3, [pc, #200]	@ (800cee0 <clock_normal+0x230>)
 800ce16:	8bd9      	ldrh	r1, [r3, #30]
 800ce18:	4b31      	ldr	r3, [pc, #196]	@ (800cee0 <clock_normal+0x230>)
 800ce1a:	8b1a      	ldrh	r2, [r3, #24]
 800ce1c:	4b30      	ldr	r3, [pc, #192]	@ (800cee0 <clock_normal+0x230>)
 800ce1e:	8b5c      	ldrh	r4, [r3, #26]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	9300      	str	r3, [sp, #0]
 800ce24:	4623      	mov	r3, r4
 800ce26:	f000 fb4b 	bl	800d4c0 <lcd_draw>
	}

	// Synchronization

	// Obtain the number of frames to skip the next cycle
	video.actual_time = ( HAL_GetTick() - video.tick_offset );
 800ce2a:	f7f4 f86b 	bl	8000f04 <HAL_GetTick>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	4b2b      	ldr	r3, [pc, #172]	@ (800cee0 <clock_normal+0x230>)
 800ce32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce34:	1ad3      	subs	r3, r2, r3
 800ce36:	4a2a      	ldr	r2, [pc, #168]	@ (800cee0 <clock_normal+0x230>)
 800ce38:	62d3      	str	r3, [r2, #44]	@ 0x2c
	float watch_time = ( video.frameCount * ( video.frame_time / 1000.0 ) );
 800ce3a:	4b29      	ldr	r3, [pc, #164]	@ (800cee0 <clock_normal+0x230>)
 800ce3c:	6a1b      	ldr	r3, [r3, #32]
 800ce3e:	ee07 3a90 	vmov	s15, r3
 800ce42:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800ce46:	4b26      	ldr	r3, [pc, #152]	@ (800cee0 <clock_normal+0x230>)
 800ce48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce4a:	ee07 3a90 	vmov	s15, r3
 800ce4e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ce52:	ed9f 4b21 	vldr	d4, [pc, #132]	@ 800ced8 <clock_normal+0x228>
 800ce56:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800ce5a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ce5e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ce62:	edc7 7a03 	vstr	s15, [r7, #12]
	video.frameToSkip = ( ( video.actual_time - watch_time ) / ( video.frame_time / 1000.0 ) );
 800ce66:	4b1e      	ldr	r3, [pc, #120]	@ (800cee0 <clock_normal+0x230>)
 800ce68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce6a:	ee07 3a90 	vmov	s15, r3
 800ce6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ce72:	edd7 7a03 	vldr	s15, [r7, #12]
 800ce76:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce7a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800ce7e:	4b18      	ldr	r3, [pc, #96]	@ (800cee0 <clock_normal+0x230>)
 800ce80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce82:	ee07 3a90 	vmov	s15, r3
 800ce86:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ce8a:	ed9f 4b13 	vldr	d4, [pc, #76]	@ 800ced8 <clock_normal+0x228>
 800ce8e:	ee87 6b04 	vdiv.f64	d6, d7, d4
 800ce92:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800ce96:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ce9a:	ee17 2a90 	vmov	r2, s15
 800ce9e:	4b10      	ldr	r3, [pc, #64]	@ (800cee0 <clock_normal+0x230>)
 800cea0:	625a      	str	r2, [r3, #36]	@ 0x24

	if(video.frameToSkip < 0)
 800cea2:	4b0f      	ldr	r3, [pc, #60]	@ (800cee0 <clock_normal+0x230>)
 800cea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	da02      	bge.n	800ceb0 <clock_normal+0x200>
		video.frameToSkip = 0;
 800ceaa:	4b0d      	ldr	r3, [pc, #52]	@ (800cee0 <clock_normal+0x230>)
 800ceac:	2200      	movs	r2, #0
 800ceae:	625a      	str	r2, [r3, #36]	@ 0x24

	RTC_DateTypeDef sDate = {0};
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	60bb      	str	r3, [r7, #8]
	HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	490a      	ldr	r1, [pc, #40]	@ (800cee0 <clock_normal+0x230>)
 800ceb8:	4810      	ldr	r0, [pc, #64]	@ (800cefc <clock_normal+0x24c>)
 800ceba:	f7fa ffef 	bl	8007e9c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800cebe:	f107 0308 	add.w	r3, r7, #8
 800cec2:	2200      	movs	r2, #0
 800cec4:	4619      	mov	r1, r3
 800cec6:	480d      	ldr	r0, [pc, #52]	@ (800cefc <clock_normal+0x24c>)
 800cec8:	f7fb f8cc 	bl	8008064 <HAL_RTC_GetDate>
 800cecc:	e000      	b.n	800ced0 <clock_normal+0x220>
		return;
 800cece:	bf00      	nop

}
 800ced0:	3714      	adds	r7, #20
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd90      	pop	{r4, r7, pc}
 800ced6:	bf00      	nop
 800ced8:	00000000 	.word	0x00000000
 800cedc:	408f4000 	.word	0x408f4000
 800cee0:	20018824 	.word	0x20018824
 800cee4:	200185ac 	.word	0x200185ac
 800cee8:	200187dc 	.word	0x200187dc
 800ceec:	20000374 	.word	0x20000374
 800cef0:	200001e4 	.word	0x200001e4
 800cef4:	200001d0 	.word	0x200001d0
 800cef8:	200002a4 	.word	0x200002a4
 800cefc:	200002b8 	.word	0x200002b8
 800cf00:	d0600000 	.word	0xd0600000
 800cf04:	d0800000 	.word	0xd0800000

0800cf08 <show_frame>:


static void show_frame(uint32_t frame_num)
{
 800cf08:	b590      	push	{r4, r7, lr}
 800cf0a:	b089      	sub	sp, #36	@ 0x24
 800cf0c:	af02      	add	r7, sp, #8
 800cf0e:	6078      	str	r0, [r7, #4]

	for(int i = 0 ; i < frame_num ; i++)
 800cf10:	2300      	movs	r3, #0
 800cf12:	617b      	str	r3, [r7, #20]
 800cf14:	e011      	b.n	800cf3a <show_frame+0x32>
	{

		AVI_GetFrame(&AVI_Handel, &MJPEG_File, 1);
 800cf16:	2201      	movs	r2, #1
 800cf18:	495b      	ldr	r1, [pc, #364]	@ (800d088 <show_frame+0x180>)
 800cf1a:	485c      	ldr	r0, [pc, #368]	@ (800d08c <show_frame+0x184>)
 800cf1c:	f7fe fcf0 	bl	800b900 <AVI_GetFrame>

		AVI_Handel.CurrentImage++;
 800cf20:	4b5a      	ldr	r3, [pc, #360]	@ (800d08c <show_frame+0x184>)
 800cf22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf24:	3301      	adds	r3, #1
 800cf26:	4a59      	ldr	r2, [pc, #356]	@ (800d08c <show_frame+0x184>)
 800cf28:	62d3      	str	r3, [r2, #44]	@ 0x2c
		video.frameCount++;
 800cf2a:	4b59      	ldr	r3, [pc, #356]	@ (800d090 <show_frame+0x188>)
 800cf2c:	6a1b      	ldr	r3, [r3, #32]
 800cf2e:	3301      	adds	r3, #1
 800cf30:	4a57      	ldr	r2, [pc, #348]	@ (800d090 <show_frame+0x188>)
 800cf32:	6213      	str	r3, [r2, #32]
	for(int i = 0 ; i < frame_num ; i++)
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	3301      	adds	r3, #1
 800cf38:	617b      	str	r3, [r7, #20]
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d8e9      	bhi.n	800cf16 <show_frame+0xe>

	}

	for(int i = 0 ; i < 2 ; i++)
 800cf42:	2300      	movs	r3, #0
 800cf44:	613b      	str	r3, [r7, #16]
 800cf46:	e096      	b.n	800d076 <show_frame+0x16e>
	{

		// Save the frame into MJPEG_VideoBuffer
		video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 800cf48:	2200      	movs	r2, #0
 800cf4a:	494f      	ldr	r1, [pc, #316]	@ (800d088 <show_frame+0x180>)
 800cf4c:	484f      	ldr	r0, [pc, #316]	@ (800d08c <show_frame+0x184>)
 800cf4e:	f7fe fcd7 	bl	800b900 <AVI_GetFrame>
 800cf52:	4603      	mov	r3, r0
 800cf54:	b2da      	uxtb	r2, r3
 800cf56:	4b4e      	ldr	r3, [pc, #312]	@ (800d090 <show_frame+0x188>)
 800cf58:	75da      	strb	r2, [r3, #23]

		if(video.FrameType == AVI_VIDEO_FRAME)
 800cf5a:	4b4d      	ldr	r3, [pc, #308]	@ (800d090 <show_frame+0x188>)
 800cf5c:	7ddb      	ldrb	r3, [r3, #23]
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	f040 8086 	bne.w	800d070 <show_frame+0x168>
		{

			AVI_Handel.CurrentImage++;
 800cf64:	4b49      	ldr	r3, [pc, #292]	@ (800d08c <show_frame+0x184>)
 800cf66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf68:	3301      	adds	r3, #1
 800cf6a:	4a48      	ldr	r2, [pc, #288]	@ (800d08c <show_frame+0x184>)
 800cf6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
			video.frameCount++;
 800cf6e:	4b48      	ldr	r3, [pc, #288]	@ (800d090 <show_frame+0x188>)
 800cf70:	6a1b      	ldr	r3, [r3, #32]
 800cf72:	3301      	adds	r3, #1
 800cf74:	4a46      	ldr	r2, [pc, #280]	@ (800d090 <show_frame+0x188>)
 800cf76:	6213      	str	r3, [r2, #32]

			// Decode the frame inside MJPEG_VideoBuffer and put it into jpegOutDataAdreess in the format YCrCb
			JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 800cf78:	4946      	ldr	r1, [pc, #280]	@ (800d094 <show_frame+0x18c>)
 800cf7a:	4b44      	ldr	r3, [pc, #272]	@ (800d08c <show_frame+0x184>)
 800cf7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cf7e:	4b44      	ldr	r3, [pc, #272]	@ (800d090 <show_frame+0x188>)
 800cf80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf82:	4845      	ldr	r0, [pc, #276]	@ (800d098 <show_frame+0x190>)
 800cf84:	f7ff f8ae 	bl	800c0e4 <JPEG_Decode_DMA>

			while(Jpeg_HWDecodingEnd == 0);
 800cf88:	bf00      	nop
 800cf8a:	4b44      	ldr	r3, [pc, #272]	@ (800d09c <show_frame+0x194>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d0fb      	beq.n	800cf8a <show_frame+0x82>

			if(video.isfirstFrame == 1)
 800cf92:	4b3f      	ldr	r3, [pc, #252]	@ (800d090 <show_frame+0x188>)
 800cf94:	7d9b      	ldrb	r3, [r3, #22]
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	d136      	bne.n	800d008 <show_frame+0x100>
			{

				video.isfirstFrame = 0;
 800cf9a:	4b3d      	ldr	r3, [pc, #244]	@ (800d090 <show_frame+0x188>)
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	759a      	strb	r2, [r3, #22]

				HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 800cfa0:	493f      	ldr	r1, [pc, #252]	@ (800d0a0 <show_frame+0x198>)
 800cfa2:	483d      	ldr	r0, [pc, #244]	@ (800d098 <show_frame+0x190>)
 800cfa4:	f7f4 ff00 	bl	8001da8 <HAL_JPEG_GetInfo>

				DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 800cfa8:	4b3d      	ldr	r3, [pc, #244]	@ (800d0a0 <show_frame+0x198>)
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	4a3c      	ldr	r2, [pc, #240]	@ (800d0a0 <show_frame+0x198>)
 800cfb0:	6892      	ldr	r2, [r2, #8]
 800cfb2:	b291      	uxth	r1, r2
 800cfb4:	4a3a      	ldr	r2, [pc, #232]	@ (800d0a0 <show_frame+0x198>)
 800cfb6:	6852      	ldr	r2, [r2, #4]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f000 fad3 	bl	800d564 <DMA2D_Init>

				video.width = JPEG_Info.ImageWidth;
 800cfbe:	4b38      	ldr	r3, [pc, #224]	@ (800d0a0 <show_frame+0x198>)
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	b29a      	uxth	r2, r3
 800cfc4:	4b32      	ldr	r3, [pc, #200]	@ (800d090 <show_frame+0x188>)
 800cfc6:	831a      	strh	r2, [r3, #24]
				video.height = JPEG_Info.ImageHeight;
 800cfc8:	4b35      	ldr	r3, [pc, #212]	@ (800d0a0 <show_frame+0x198>)
 800cfca:	689b      	ldr	r3, [r3, #8]
 800cfcc:	b29a      	uxth	r2, r3
 800cfce:	4b30      	ldr	r3, [pc, #192]	@ (800d090 <show_frame+0x188>)
 800cfd0:	835a      	strh	r2, [r3, #26]
				video.xPos = ( ( LCD_X_SIZE - video.width ) / 2 );					// Center the image in x
 800cfd2:	4b2f      	ldr	r3, [pc, #188]	@ (800d090 <show_frame+0x188>)
 800cfd4:	8b1b      	ldrh	r3, [r3, #24]
 800cfd6:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	da00      	bge.n	800cfe0 <show_frame+0xd8>
 800cfde:	3301      	adds	r3, #1
 800cfe0:	105b      	asrs	r3, r3, #1
 800cfe2:	b29a      	uxth	r2, r3
 800cfe4:	4b2a      	ldr	r3, [pc, #168]	@ (800d090 <show_frame+0x188>)
 800cfe6:	839a      	strh	r2, [r3, #28]
				video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 800cfe8:	4b29      	ldr	r3, [pc, #164]	@ (800d090 <show_frame+0x188>)
 800cfea:	8b5b      	ldrh	r3, [r3, #26]
 800cfec:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	da00      	bge.n	800cff6 <show_frame+0xee>
 800cff4:	3301      	adds	r3, #1
 800cff6:	105b      	asrs	r3, r3, #1
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	4b25      	ldr	r3, [pc, #148]	@ (800d090 <show_frame+0x188>)
 800cffc:	83da      	strh	r2, [r3, #30]

				video.frame_time = AVI_Handel.aviInfo.SecPerFrame;
 800cffe:	4b23      	ldr	r3, [pc, #140]	@ (800d08c <show_frame+0x184>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	b29a      	uxth	r2, r3
 800d004:	4b22      	ldr	r3, [pc, #136]	@ (800d090 <show_frame+0x188>)
 800d006:	851a      	strh	r2, [r3, #40]	@ 0x28

			}

			// Copies the output frame into LCD_FRAME_BUFFER and does the conversion from YCrCb to RGB888
			DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)LCD_FRAME_BUFFER, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800d008:	4b21      	ldr	r3, [pc, #132]	@ (800d090 <show_frame+0x188>)
 800d00a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d00c:	4618      	mov	r0, r3
 800d00e:	4b24      	ldr	r3, [pc, #144]	@ (800d0a0 <show_frame+0x198>)
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	b29a      	uxth	r2, r3
 800d014:	4b22      	ldr	r3, [pc, #136]	@ (800d0a0 <show_frame+0x198>)
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	b29b      	uxth	r3, r3
 800d01a:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 800d01e:	f000 fb1f 	bl	800d660 <DMA2D_CopyBuffer>

			video.jpegOutDataAdreess = (video.jpegOutDataAdreess == JPEG_OUTPUT_DATA_BUFFER0) ? JPEG_OUTPUT_DATA_BUFFER1 : JPEG_OUTPUT_DATA_BUFFER0;
 800d022:	4b1b      	ldr	r3, [pc, #108]	@ (800d090 <show_frame+0x188>)
 800d024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d026:	4a1f      	ldr	r2, [pc, #124]	@ (800d0a4 <show_frame+0x19c>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d101      	bne.n	800d030 <show_frame+0x128>
 800d02c:	4b1e      	ldr	r3, [pc, #120]	@ (800d0a8 <show_frame+0x1a0>)
 800d02e:	e000      	b.n	800d032 <show_frame+0x12a>
 800d030:	4b1c      	ldr	r3, [pc, #112]	@ (800d0a4 <show_frame+0x19c>)
 800d032:	4a17      	ldr	r2, [pc, #92]	@ (800d090 <show_frame+0x188>)
 800d034:	6353      	str	r3, [r2, #52]	@ 0x34

			// Implements the data conversion from RGB888 to RGB565
			doubleFormat pOut;
			pOut.u8Arr = (uint8_t *)LCD_FRAME_BUFFER;
 800d036:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800d03a:	60fb      	str	r3, [r7, #12]
			depth24To16(&pOut, ( video.width * video.height ), 3);
 800d03c:	4b14      	ldr	r3, [pc, #80]	@ (800d090 <show_frame+0x188>)
 800d03e:	8b1a      	ldrh	r2, [r3, #24]
 800d040:	4b13      	ldr	r3, [pc, #76]	@ (800d090 <show_frame+0x188>)
 800d042:	8b5b      	ldrh	r3, [r3, #26]
 800d044:	fb12 f303 	smulbb	r3, r2, r3
 800d048:	b299      	uxth	r1, r3
 800d04a:	f107 030c 	add.w	r3, r7, #12
 800d04e:	2203      	movs	r2, #3
 800d050:	4618      	mov	r0, r3
 800d052:	f000 f9ab 	bl	800d3ac <depth24To16>

			lcd_draw(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr);
 800d056:	4b0e      	ldr	r3, [pc, #56]	@ (800d090 <show_frame+0x188>)
 800d058:	8b98      	ldrh	r0, [r3, #28]
 800d05a:	4b0d      	ldr	r3, [pc, #52]	@ (800d090 <show_frame+0x188>)
 800d05c:	8bd9      	ldrh	r1, [r3, #30]
 800d05e:	4b0c      	ldr	r3, [pc, #48]	@ (800d090 <show_frame+0x188>)
 800d060:	8b1a      	ldrh	r2, [r3, #24]
 800d062:	4b0b      	ldr	r3, [pc, #44]	@ (800d090 <show_frame+0x188>)
 800d064:	8b5c      	ldrh	r4, [r3, #26]
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	9300      	str	r3, [sp, #0]
 800d06a:	4623      	mov	r3, r4
 800d06c:	f000 fa28 	bl	800d4c0 <lcd_draw>
	for(int i = 0 ; i < 2 ; i++)
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	3301      	adds	r3, #1
 800d074:	613b      	str	r3, [r7, #16]
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	2b01      	cmp	r3, #1
 800d07a:	f77f af65 	ble.w	800cf48 <show_frame+0x40>

		}

	}

}
 800d07e:	bf00      	nop
 800d080:	bf00      	nop
 800d082:	371c      	adds	r7, #28
 800d084:	46bd      	mov	sp, r7
 800d086:	bd90      	pop	{r4, r7, pc}
 800d088:	200185ac 	.word	0x200185ac
 800d08c:	200187dc 	.word	0x200187dc
 800d090:	20018824 	.word	0x20018824
 800d094:	20000374 	.word	0x20000374
 800d098:	200001e4 	.word	0x200001e4
 800d09c:	200001d0 	.word	0x200001d0
 800d0a0:	200002a4 	.word	0x200002a4
 800d0a4:	d0600000 	.word	0xd0600000
 800d0a8:	d0800000 	.word	0xd0800000

0800d0ac <file_handler>:


static void file_handler(uint8_t openFile)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b086      	sub	sp, #24
 800d0b0:	af02      	add	r7, sp, #8
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	71fb      	strb	r3, [r7, #7]
	  // Each file takes 30m

     static uint8_t  new_file_flag = 1;


     if(new_file_flag || openFile)
 800d0b6:	4b31      	ldr	r3, [pc, #196]	@ (800d17c <file_handler+0xd0>)
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d102      	bne.n	800d0c4 <file_handler+0x18>
 800d0be:	79fb      	ldrb	r3, [r7, #7]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d033      	beq.n	800d12c <file_handler+0x80>
     {

    	 if(openFile)
 800d0c4:	79fb      	ldrb	r3, [r7, #7]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d002      	beq.n	800d0d0 <file_handler+0x24>
    		 f_close(&MJPEG_File);
 800d0ca:	482d      	ldr	r0, [pc, #180]	@ (800d180 <file_handler+0xd4>)
 800d0cc:	f003 fa67 	bl	801059e <f_close>

    	 new_file_flag = 0;
 800d0d0:	4b2a      	ldr	r3, [pc, #168]	@ (800d17c <file_handler+0xd0>)
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	701a      	strb	r2, [r3, #0]

    	 char file_idx_str[4];
    	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 800d0d6:	4b2b      	ldr	r3, [pc, #172]	@ (800d184 <file_handler+0xd8>)
 800d0d8:	8a9b      	ldrh	r3, [r3, #20]
 800d0da:	f107 000c 	add.w	r0, r7, #12
 800d0de:	4a2a      	ldr	r2, [pc, #168]	@ (800d188 <file_handler+0xdc>)
 800d0e0:	2104      	movs	r1, #4
 800d0e2:	f003 fe85 	bl	8010df0 <sniprintf>
    	 snprintf(name, sizeof(name), "video_%s.avi", file_idx_str);
 800d0e6:	f107 030c 	add.w	r3, r7, #12
 800d0ea:	4a28      	ldr	r2, [pc, #160]	@ (800d18c <file_handler+0xe0>)
 800d0ec:	210e      	movs	r1, #14
 800d0ee:	4828      	ldr	r0, [pc, #160]	@ (800d190 <file_handler+0xe4>)
 800d0f0:	f003 fe7e 	bl	8010df0 <sniprintf>

    	 // Open the MJPEG avi file with read access
    	 if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 800d0f4:	2201      	movs	r2, #1
 800d0f6:	4926      	ldr	r1, [pc, #152]	@ (800d190 <file_handler+0xe4>)
 800d0f8:	4821      	ldr	r0, [pc, #132]	@ (800d180 <file_handler+0xd4>)
 800d0fa:	f002 fec9 	bl	800fe90 <f_open>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d112      	bne.n	800d12a <file_handler+0x7e>
    	 {

    		 video.isfirstFrame = 1;
 800d104:	4b1f      	ldr	r3, [pc, #124]	@ (800d184 <file_handler+0xd8>)
 800d106:	2201      	movs	r2, #1
 800d108:	759a      	strb	r2, [r3, #22]

    		 // parse the AVI file Header
    		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 800d10a:	2300      	movs	r3, #0
 800d10c:	9301      	str	r3, [sp, #4]
 800d10e:	4b21      	ldr	r3, [pc, #132]	@ (800d194 <file_handler+0xe8>)
 800d110:	9300      	str	r3, [sp, #0]
 800d112:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 800d116:	4a20      	ldr	r2, [pc, #128]	@ (800d198 <file_handler+0xec>)
 800d118:	4919      	ldr	r1, [pc, #100]	@ (800d180 <file_handler+0xd4>)
 800d11a:	4820      	ldr	r0, [pc, #128]	@ (800d19c <file_handler+0xf0>)
 800d11c:	f7fe fbb0 	bl	800b880 <AVI_ParserInit>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	d002      	beq.n	800d12c <file_handler+0x80>
    			 while(1);
 800d126:	bf00      	nop
 800d128:	e7fd      	b.n	800d126 <file_handler+0x7a>

    	 }
    	 else
    	 {

    		 while(1);
 800d12a:	e7fe      	b.n	800d12a <file_handler+0x7e>
    	 }

     }

     // Check for the end of the video
     if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 800d12c:	4b1b      	ldr	r3, [pc, #108]	@ (800d19c <file_handler+0xf0>)
 800d12e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d130:	4b1a      	ldr	r3, [pc, #104]	@ (800d19c <file_handler+0xf0>)
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	429a      	cmp	r2, r3
 800d136:	d31d      	bcc.n	800d174 <file_handler+0xc8>
     {

    	 video.file_idx++;
 800d138:	4b12      	ldr	r3, [pc, #72]	@ (800d184 <file_handler+0xd8>)
 800d13a:	8a9b      	ldrh	r3, [r3, #20]
 800d13c:	3301      	adds	r3, #1
 800d13e:	b29a      	uxth	r2, r3
 800d140:	4b10      	ldr	r3, [pc, #64]	@ (800d184 <file_handler+0xd8>)
 800d142:	829a      	strh	r2, [r3, #20]
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 800d144:	4b0f      	ldr	r3, [pc, #60]	@ (800d184 <file_handler+0xd8>)
 800d146:	8a9b      	ldrh	r3, [r3, #20]
 800d148:	091a      	lsrs	r2, r3, #4
 800d14a:	4915      	ldr	r1, [pc, #84]	@ (800d1a0 <file_handler+0xf4>)
 800d14c:	fba1 1202 	umull	r1, r2, r1, r2
 800d150:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 800d154:	fb01 f202 	mul.w	r2, r1, r2
 800d158:	1a9b      	subs	r3, r3, r2
 800d15a:	b29a      	uxth	r2, r3
 800d15c:	4b09      	ldr	r3, [pc, #36]	@ (800d184 <file_handler+0xd8>)
 800d15e:	829a      	strh	r2, [r3, #20]

		 //  wait for the Last DMA2D transfer to ends
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 800d160:	2132      	movs	r1, #50	@ 0x32
 800d162:	4810      	ldr	r0, [pc, #64]	@ (800d1a4 <file_handler+0xf8>)
 800d164:	f7f4 f965 	bl	8001432 <HAL_DMA2D_PollForTransfer>

		 f_close(&MJPEG_File);
 800d168:	4805      	ldr	r0, [pc, #20]	@ (800d180 <file_handler+0xd4>)
 800d16a:	f003 fa18 	bl	801059e <f_close>

		 new_file_flag = 1;
 800d16e:	4b03      	ldr	r3, [pc, #12]	@ (800d17c <file_handler+0xd0>)
 800d170:	2201      	movs	r2, #1
 800d172:	701a      	strb	r2, [r3, #0]

     }

}
 800d174:	bf00      	nop
 800d176:	3710      	adds	r7, #16
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	2000000e 	.word	0x2000000e
 800d180:	200185ac 	.word	0x200185ac
 800d184:	20018824 	.word	0x20018824
 800d188:	0801163c 	.word	0x0801163c
 800d18c:	08011644 	.word	0x08011644
 800d190:	20000364 	.word	0x20000364
 800d194:	20018374 	.word	0x20018374
 800d198:	20000374 	.word	0x20000374
 800d19c:	200187dc 	.word	0x200187dc
 800d1a0:	05b05b06 	.word	0x05b05b06
 800d1a4:	2000023c 	.word	0x2000023c

0800d1a8 <user_buttons_handler>:


static void user_buttons_handler(void)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	af00      	add	r7, sp, #0

	static uint8_t first = 1;
	static uint32_t button_timer = 0;


	if(video.video_mode == SETTING_MODE)
 800d1ac:	4b19      	ldr	r3, [pc, #100]	@ (800d214 <user_buttons_handler+0x6c>)
 800d1ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d02c      	beq.n	800d210 <user_buttons_handler+0x68>
		return;

	// Long press enters in setting mode
	if(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin))
 800d1b6:	2108      	movs	r1, #8
 800d1b8:	4817      	ldr	r0, [pc, #92]	@ (800d218 <user_buttons_handler+0x70>)
 800d1ba:	f7f4 fd27 	bl	8001c0c <HAL_GPIO_ReadPin>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d121      	bne.n	800d208 <user_buttons_handler+0x60>
	{

		if(first)
 800d1c4:	4b15      	ldr	r3, [pc, #84]	@ (800d21c <user_buttons_handler+0x74>)
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d007      	beq.n	800d1dc <user_buttons_handler+0x34>
		{

			first = 0;
 800d1cc:	4b13      	ldr	r3, [pc, #76]	@ (800d21c <user_buttons_handler+0x74>)
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	701a      	strb	r2, [r3, #0]
			button_timer = HAL_GetTick();
 800d1d2:	f7f3 fe97 	bl	8000f04 <HAL_GetTick>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	4a11      	ldr	r2, [pc, #68]	@ (800d220 <user_buttons_handler+0x78>)
 800d1da:	6013      	str	r3, [r2, #0]

		}

		if(abs( HAL_GetTick() - button_timer ) >= 3000)
 800d1dc:	f7f3 fe92 	bl	8000f04 <HAL_GetTick>
 800d1e0:	4602      	mov	r2, r0
 800d1e2:	4b0f      	ldr	r3, [pc, #60]	@ (800d220 <user_buttons_handler+0x78>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	1ad3      	subs	r3, r2, r3
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	bfb8      	it	lt
 800d1ec:	425b      	neglt	r3, r3
 800d1ee:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	dd0d      	ble.n	800d212 <user_buttons_handler+0x6a>
		{

			video.video_mode = SETTING_MODE;
 800d1f6:	4b07      	ldr	r3, [pc, #28]	@ (800d214 <user_buttons_handler+0x6c>)
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
			video.set = SET_IDLE;
 800d1fe:	4b05      	ldr	r3, [pc, #20]	@ (800d214 <user_buttons_handler+0x6c>)
 800d200:	2200      	movs	r2, #0
 800d202:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800d206:	e004      	b.n	800d212 <user_buttons_handler+0x6a>

	}
	else
	{

		first = 1;
 800d208:	4b04      	ldr	r3, [pc, #16]	@ (800d21c <user_buttons_handler+0x74>)
 800d20a:	2201      	movs	r2, #1
 800d20c:	701a      	strb	r2, [r3, #0]
 800d20e:	e000      	b.n	800d212 <user_buttons_handler+0x6a>
		return;
 800d210:	bf00      	nop

	}

}
 800d212:	bd80      	pop	{r7, pc}
 800d214:	20018824 	.word	0x20018824
 800d218:	58022400 	.word	0x58022400
 800d21c:	2000000f 	.word	0x2000000f
 800d220:	20018868 	.word	0x20018868

0800d224 <battery_management>:


static void battery_management()
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0


	if(video.display_status == DISPLAY_ON)
 800d22a:	4b3a      	ldr	r3, [pc, #232]	@ (800d314 <battery_management+0xf0>)
 800d22c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d230:	2b01      	cmp	r3, #1
 800d232:	d16b      	bne.n	800d30c <battery_management+0xe8>
	{

		if(TIME_ELAPSED(video.time.Seconds, video.display_ts) > DISPLAY_STANDBY_TIMER)
 800d234:	4b37      	ldr	r3, [pc, #220]	@ (800d314 <battery_management+0xf0>)
 800d236:	789b      	ldrb	r3, [r3, #2]
 800d238:	461a      	mov	r2, r3
 800d23a:	4b36      	ldr	r3, [pc, #216]	@ (800d314 <battery_management+0xf0>)
 800d23c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d23e:	429a      	cmp	r2, r3
 800d240:	d00b      	beq.n	800d25a <battery_management+0x36>
 800d242:	4b34      	ldr	r3, [pc, #208]	@ (800d314 <battery_management+0xf0>)
 800d244:	789b      	ldrb	r3, [r3, #2]
 800d246:	461a      	mov	r2, r3
 800d248:	4b32      	ldr	r3, [pc, #200]	@ (800d314 <battery_management+0xf0>)
 800d24a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d24c:	1ad3      	subs	r3, r2, r3
 800d24e:	2b1e      	cmp	r3, #30
 800d250:	bf8c      	ite	hi
 800d252:	2301      	movhi	r3, #1
 800d254:	2300      	movls	r3, #0
 800d256:	b2db      	uxtb	r3, r3
 800d258:	e009      	b.n	800d26e <battery_management+0x4a>
 800d25a:	4b2e      	ldr	r3, [pc, #184]	@ (800d314 <battery_management+0xf0>)
 800d25c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d25e:	4a2d      	ldr	r2, [pc, #180]	@ (800d314 <battery_management+0xf0>)
 800d260:	7892      	ldrb	r2, [r2, #2]
 800d262:	1a9b      	subs	r3, r3, r2
 800d264:	2b1e      	cmp	r3, #30
 800d266:	bf8c      	ite	hi
 800d268:	2301      	movhi	r3, #1
 800d26a:	2300      	movls	r3, #0
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d04c      	beq.n	800d30c <battery_management+0xe8>
		{

			// Enable interrupts for user buttons
			//MX_GPIO_Init(1);

			parameters_reset();
 800d272:	f000 f855 	bl	800d320 <parameters_reset>

			GC9A01_sleep_mode(ON);
 800d276:	2001      	movs	r0, #1
 800d278:	f7fe ff01 	bl	800c07e <GC9A01_sleep_mode>
			video.display_status = DISPLAY_OFF;
 800d27c:	4b25      	ldr	r3, [pc, #148]	@ (800d314 <battery_management+0xf0>)
 800d27e:	2200      	movs	r2, #0
 800d280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

			// Stop mode

			HAL_SuspendTick();
 800d284:	f7f3 fe6e 	bl	8000f64 <HAL_SuspendTick>
  __ASM volatile ("cpsid i" : : : "memory");
 800d288:	b672      	cpsid	i
}
 800d28a:	bf00      	nop

			__disable_irq();

			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800d28c:	2101      	movs	r1, #1
 800d28e:	2001      	movs	r0, #1
 800d290:	f7f6 ff3c 	bl	800410c <HAL_PWR_EnterSTOPMode>
  __ASM volatile ("cpsie i" : : : "memory");
 800d294:	b662      	cpsie	i
}
 800d296:	bf00      	nop

			// Wake up

			__enable_irq();

			HAL_ResumeTick();
 800d298:	f7f3 fe74 	bl	8000f84 <HAL_ResumeTick>

			SystemClock_Config();
 800d29c:	f7fe fffe 	bl	800c29c <SystemClock_Config>

			GC9A01_init();
 800d2a0:	f7fe fc6d 	bl	800bb7e <GC9A01_init>
			video.display_status = DISPLAY_ON;
 800d2a4:	4b1b      	ldr	r3, [pc, #108]	@ (800d314 <battery_management+0xf0>)
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

			// Clock setting

			RTC_DateTypeDef sDate = {0};
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	607b      	str	r3, [r7, #4]
			HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	4918      	ldr	r1, [pc, #96]	@ (800d314 <battery_management+0xf0>)
 800d2b4:	4818      	ldr	r0, [pc, #96]	@ (800d318 <battery_management+0xf4>)
 800d2b6:	f7fa fdf1 	bl	8007e9c <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800d2ba:	1d3b      	adds	r3, r7, #4
 800d2bc:	2200      	movs	r2, #0
 800d2be:	4619      	mov	r1, r3
 800d2c0:	4815      	ldr	r0, [pc, #84]	@ (800d318 <battery_management+0xf4>)
 800d2c2:	f7fa fecf 	bl	8008064 <HAL_RTC_GetDate>

			video.file_idx = ( ( video.time.Hours % 12 ) * 60 );
 800d2c6:	4b13      	ldr	r3, [pc, #76]	@ (800d314 <battery_management+0xf0>)
 800d2c8:	781a      	ldrb	r2, [r3, #0]
 800d2ca:	4b14      	ldr	r3, [pc, #80]	@ (800d31c <battery_management+0xf8>)
 800d2cc:	fba3 1302 	umull	r1, r3, r3, r2
 800d2d0:	08d9      	lsrs	r1, r3, #3
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	005b      	lsls	r3, r3, #1
 800d2d6:	440b      	add	r3, r1
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	461a      	mov	r2, r3
 800d2e0:	0112      	lsls	r2, r2, #4
 800d2e2:	1ad3      	subs	r3, r2, r3
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	b29a      	uxth	r2, r3
 800d2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800d314 <battery_management+0xf0>)
 800d2ea:	829a      	strh	r2, [r3, #20]
			video.file_idx += video.time.Minutes;
 800d2ec:	4b09      	ldr	r3, [pc, #36]	@ (800d314 <battery_management+0xf0>)
 800d2ee:	8a9b      	ldrh	r3, [r3, #20]
 800d2f0:	4a08      	ldr	r2, [pc, #32]	@ (800d314 <battery_management+0xf0>)
 800d2f2:	7852      	ldrb	r2, [r2, #1]
 800d2f4:	4413      	add	r3, r2
 800d2f6:	b29a      	uxth	r2, r3
 800d2f8:	4b06      	ldr	r3, [pc, #24]	@ (800d314 <battery_management+0xf0>)
 800d2fa:	829a      	strh	r2, [r3, #20]

			file_handler(1);
 800d2fc:	2001      	movs	r0, #1
 800d2fe:	f7ff fed5 	bl	800d0ac <file_handler>

			video.display_ts = video.time.Seconds;
 800d302:	4b04      	ldr	r3, [pc, #16]	@ (800d314 <battery_management+0xf0>)
 800d304:	789b      	ldrb	r3, [r3, #2]
 800d306:	461a      	mov	r2, r3
 800d308:	4b02      	ldr	r3, [pc, #8]	@ (800d314 <battery_management+0xf0>)
 800d30a:	63da      	str	r2, [r3, #60]	@ 0x3c

		}

	}

}
 800d30c:	bf00      	nop
 800d30e:	3708      	adds	r7, #8
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	20018824 	.word	0x20018824
 800d318:	200002b8 	.word	0x200002b8
 800d31c:	aaaaaaab 	.word	0xaaaaaaab

0800d320 <parameters_reset>:


static void parameters_reset(void)
{
 800d320:	b480      	push	{r7}
 800d322:	af00      	add	r7, sp, #0

	video.width = 0;
 800d324:	4b1f      	ldr	r3, [pc, #124]	@ (800d3a4 <parameters_reset+0x84>)
 800d326:	2200      	movs	r2, #0
 800d328:	831a      	strh	r2, [r3, #24]
	video.height = 0;
 800d32a:	4b1e      	ldr	r3, [pc, #120]	@ (800d3a4 <parameters_reset+0x84>)
 800d32c:	2200      	movs	r2, #0
 800d32e:	835a      	strh	r2, [r3, #26]
	video.xPos = 0;
 800d330:	4b1c      	ldr	r3, [pc, #112]	@ (800d3a4 <parameters_reset+0x84>)
 800d332:	2200      	movs	r2, #0
 800d334:	839a      	strh	r2, [r3, #28]
	video.yPos = 0;
 800d336:	4b1b      	ldr	r3, [pc, #108]	@ (800d3a4 <parameters_reset+0x84>)
 800d338:	2200      	movs	r2, #0
 800d33a:	83da      	strh	r2, [r3, #30]

	video.time.Hours = 0;
 800d33c:	4b19      	ldr	r3, [pc, #100]	@ (800d3a4 <parameters_reset+0x84>)
 800d33e:	2200      	movs	r2, #0
 800d340:	701a      	strb	r2, [r3, #0]
	video.time.Minutes = 0;
 800d342:	4b18      	ldr	r3, [pc, #96]	@ (800d3a4 <parameters_reset+0x84>)
 800d344:	2200      	movs	r2, #0
 800d346:	705a      	strb	r2, [r3, #1]
	video.time.Seconds = 0;
 800d348:	4b16      	ldr	r3, [pc, #88]	@ (800d3a4 <parameters_reset+0x84>)
 800d34a:	2200      	movs	r2, #0
 800d34c:	709a      	strb	r2, [r3, #2]

	video.file_idx = 0;
 800d34e:	4b15      	ldr	r3, [pc, #84]	@ (800d3a4 <parameters_reset+0x84>)
 800d350:	2200      	movs	r2, #0
 800d352:	829a      	strh	r2, [r3, #20]
	video.FrameType = 0;
 800d354:	4b13      	ldr	r3, [pc, #76]	@ (800d3a4 <parameters_reset+0x84>)
 800d356:	2200      	movs	r2, #0
 800d358:	75da      	strb	r2, [r3, #23]

	video.frameToSkip = 0;
 800d35a:	4b12      	ldr	r3, [pc, #72]	@ (800d3a4 <parameters_reset+0x84>)
 800d35c:	2200      	movs	r2, #0
 800d35e:	625a      	str	r2, [r3, #36]	@ 0x24
	video.frame_time = 0;
 800d360:	4b10      	ldr	r3, [pc, #64]	@ (800d3a4 <parameters_reset+0x84>)
 800d362:	2200      	movs	r2, #0
 800d364:	851a      	strh	r2, [r3, #40]	@ 0x28
	video.actual_time = 0;
 800d366:	4b0f      	ldr	r3, [pc, #60]	@ (800d3a4 <parameters_reset+0x84>)
 800d368:	2200      	movs	r2, #0
 800d36a:	62da      	str	r2, [r3, #44]	@ 0x2c
	video.tick_offset = 0;
 800d36c:	4b0d      	ldr	r3, [pc, #52]	@ (800d3a4 <parameters_reset+0x84>)
 800d36e:	2200      	movs	r2, #0
 800d370:	631a      	str	r2, [r3, #48]	@ 0x30
	video.jpegOutDataAdreess = JPEG_OUTPUT_DATA_BUFFER0;
 800d372:	4b0c      	ldr	r3, [pc, #48]	@ (800d3a4 <parameters_reset+0x84>)
 800d374:	4a0c      	ldr	r2, [pc, #48]	@ (800d3a8 <parameters_reset+0x88>)
 800d376:	635a      	str	r2, [r3, #52]	@ 0x34

	video.display_ts = video.time.Seconds;
 800d378:	4b0a      	ldr	r3, [pc, #40]	@ (800d3a4 <parameters_reset+0x84>)
 800d37a:	789b      	ldrb	r3, [r3, #2]
 800d37c:	461a      	mov	r2, r3
 800d37e:	4b09      	ldr	r3, [pc, #36]	@ (800d3a4 <parameters_reset+0x84>)
 800d380:	63da      	str	r2, [r3, #60]	@ 0x3c

	video.display_status = DISPLAY_ON;
 800d382:	4b08      	ldr	r3, [pc, #32]	@ (800d3a4 <parameters_reset+0x84>)
 800d384:	2201      	movs	r2, #1
 800d386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	video.frameCount = 0;
 800d38a:	4b06      	ldr	r3, [pc, #24]	@ (800d3a4 <parameters_reset+0x84>)
 800d38c:	2200      	movs	r2, #0
 800d38e:	621a      	str	r2, [r3, #32]

	//video.video_mode = NORMAL_MODE;
	video.set = SET_IDLE;
 800d390:	4b04      	ldr	r3, [pc, #16]	@ (800d3a4 <parameters_reset+0x84>)
 800d392:	2200      	movs	r2, #0
 800d394:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

}
 800d398:	bf00      	nop
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr
 800d3a2:	bf00      	nop
 800d3a4:	20018824 	.word	0x20018824
 800d3a8:	d0600000 	.word	0xd0600000

0800d3ac <depth24To16>:


static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b085      	sub	sp, #20
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	807b      	strh	r3, [r7, #2]
 800d3b8:	4613      	mov	r3, r2
 800d3ba:	707b      	strb	r3, [r7, #1]

	uint8_t b;
	uint8_t g;
	uint8_t r;

	int i = 0;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	60fb      	str	r3, [r7, #12]


	// Only half of the frame is handled per time
	// Alternate the top and bottom half every cycle
    if(swap)
 800d3c0:	4b3d      	ldr	r3, [pc, #244]	@ (800d4b8 <depth24To16+0x10c>)
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d00c      	beq.n	800d3e2 <depth24To16+0x36>
    {

    	swap = 0;
 800d3c8:	4b3b      	ldr	r3, [pc, #236]	@ (800d4b8 <depth24To16+0x10c>)
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	701a      	strb	r2, [r3, #0]

    	i = 0;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	60fb      	str	r3, [r7, #12]
    	length /= 2;
 800d3d2:	887b      	ldrh	r3, [r7, #2]
 800d3d4:	085b      	lsrs	r3, r3, #1
 800d3d6:	807b      	strh	r3, [r7, #2]
    	length += 1000;
 800d3d8:	887b      	ldrh	r3, [r7, #2]
 800d3da:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800d3de:	807b      	strh	r3, [r7, #2]
 800d3e0:	e05e      	b.n	800d4a0 <depth24To16+0xf4>

    }
    else
    {

    	swap = 1;
 800d3e2:	4b35      	ldr	r3, [pc, #212]	@ (800d4b8 <depth24To16+0x10c>)
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	701a      	strb	r2, [r3, #0]

    	i = ( length / 2 ) - 2000;
 800d3e8:	887b      	ldrh	r3, [r7, #2]
 800d3ea:	085b      	lsrs	r3, r3, #1
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800d3f2:	60fb      	str	r3, [r7, #12]

    }

	for( ; i < length ; i++)
 800d3f4:	e054      	b.n	800d4a0 <depth24To16+0xf4>
	{

		b = pxArr->u8Arr[i*bpx];
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	787a      	ldrb	r2, [r7, #1]
 800d3fc:	68f9      	ldr	r1, [r7, #12]
 800d3fe:	fb01 f202 	mul.w	r2, r1, r2
 800d402:	4413      	add	r3, r2
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	72fb      	strb	r3, [r7, #11]
		g = pxArr->u8Arr[i*bpx+1];
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681a      	ldr	r2, [r3, #0]
 800d40c:	787b      	ldrb	r3, [r7, #1]
 800d40e:	68f9      	ldr	r1, [r7, #12]
 800d410:	fb01 f303 	mul.w	r3, r1, r3
 800d414:	3301      	adds	r3, #1
 800d416:	4413      	add	r3, r2
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	72bb      	strb	r3, [r7, #10]
		r = pxArr->u8Arr[i*bpx+2];
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	787b      	ldrb	r3, [r7, #1]
 800d422:	68f9      	ldr	r1, [r7, #12]
 800d424:	fb01 f303 	mul.w	r3, r1, r3
 800d428:	3302      	adds	r3, #2
 800d42a:	4413      	add	r3, r2
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	727b      	strb	r3, [r7, #9]

		pxArr->u16Arr[i] = color565(r, g, b);
 800d430:	7a7b      	ldrb	r3, [r7, #9]
 800d432:	021b      	lsls	r3, r3, #8
 800d434:	b21a      	sxth	r2, r3
 800d436:	4b21      	ldr	r3, [pc, #132]	@ (800d4bc <depth24To16+0x110>)
 800d438:	4013      	ands	r3, r2
 800d43a:	b21a      	sxth	r2, r3
 800d43c:	7abb      	ldrb	r3, [r7, #10]
 800d43e:	00db      	lsls	r3, r3, #3
 800d440:	b21b      	sxth	r3, r3
 800d442:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800d446:	b21b      	sxth	r3, r3
 800d448:	4313      	orrs	r3, r2
 800d44a:	b21a      	sxth	r2, r3
 800d44c:	7afb      	ldrb	r3, [r7, #11]
 800d44e:	08db      	lsrs	r3, r3, #3
 800d450:	b2db      	uxtb	r3, r3
 800d452:	b21b      	sxth	r3, r3
 800d454:	4313      	orrs	r3, r2
 800d456:	b219      	sxth	r1, r3
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681a      	ldr	r2, [r3, #0]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	005b      	lsls	r3, r3, #1
 800d460:	4413      	add	r3, r2
 800d462:	b28a      	uxth	r2, r1
 800d464:	801a      	strh	r2, [r3, #0]
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	005b      	lsls	r3, r3, #1
 800d46e:	4413      	add	r3, r2
 800d470:	881b      	ldrh	r3, [r3, #0]
 800d472:	021b      	lsls	r3, r3, #8
 800d474:	b21a      	sxth	r2, r3
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6819      	ldr	r1, [r3, #0]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	005b      	lsls	r3, r3, #1
 800d47e:	440b      	add	r3, r1
 800d480:	881b      	ldrh	r3, [r3, #0]
 800d482:	0a1b      	lsrs	r3, r3, #8
 800d484:	b29b      	uxth	r3, r3
 800d486:	b21b      	sxth	r3, r3
 800d488:	4313      	orrs	r3, r2
 800d48a:	b219      	sxth	r1, r3
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681a      	ldr	r2, [r3, #0]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	005b      	lsls	r3, r3, #1
 800d494:	4413      	add	r3, r2
 800d496:	b28a      	uxth	r2, r1
 800d498:	801a      	strh	r2, [r3, #0]
	for( ; i < length ; i++)
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	3301      	adds	r3, #1
 800d49e:	60fb      	str	r3, [r7, #12]
 800d4a0:	887b      	ldrh	r3, [r7, #2]
 800d4a2:	68fa      	ldr	r2, [r7, #12]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	dba6      	blt.n	800d3f6 <depth24To16+0x4a>

	}

}
 800d4a8:	bf00      	nop
 800d4aa:	bf00      	nop
 800d4ac:	3714      	adds	r7, #20
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr
 800d4b6:	bf00      	nop
 800d4b8:	2001886c 	.word	0x2001886c
 800d4bc:	fffff800 	.word	0xfffff800

0800d4c0 <lcd_draw>:


static void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 800d4c0:	b590      	push	{r4, r7, lr}
 800d4c2:	b087      	sub	sp, #28
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	4604      	mov	r4, r0
 800d4c8:	4608      	mov	r0, r1
 800d4ca:	4611      	mov	r1, r2
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	4623      	mov	r3, r4
 800d4d0:	80fb      	strh	r3, [r7, #6]
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	80bb      	strh	r3, [r7, #4]
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	807b      	strh	r3, [r7, #2]
 800d4da:	4613      	mov	r3, r2
 800d4dc:	803b      	strh	r3, [r7, #0]
	   struct GC9A01_frame frame;


		// Only half of the frame is handled per time
		// Alternate the top and bottom half every cycle
	   	if(swap)
 800d4de:	4b20      	ldr	r3, [pc, #128]	@ (800d560 <lcd_draw+0xa0>)
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d00b      	beq.n	800d4fe <lcd_draw+0x3e>
	   	{

	   		swap = 0;
 800d4e6:	4b1e      	ldr	r3, [pc, #120]	@ (800d560 <lcd_draw+0xa0>)
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	701a      	strb	r2, [r3, #0]

	        frame.start.X = 0;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	81bb      	strh	r3, [r7, #12]
	        frame.start.Y = 0;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	81fb      	strh	r3, [r7, #14]
	        frame.end.X = 239;
 800d4f4:	23ef      	movs	r3, #239	@ 0xef
 800d4f6:	823b      	strh	r3, [r7, #16]
	        frame.end.Y = 119;
 800d4f8:	2377      	movs	r3, #119	@ 0x77
 800d4fa:	827b      	strh	r3, [r7, #18]
 800d4fc:	e00e      	b.n	800d51c <lcd_draw+0x5c>

	   	}
	   	else
	   	{

	   		swap = 1;
 800d4fe:	4b18      	ldr	r3, [pc, #96]	@ (800d560 <lcd_draw+0xa0>)
 800d500:	2201      	movs	r2, #1
 800d502:	701a      	strb	r2, [r3, #0]

	   		data += ( 240 * 240 );
 800d504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d506:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 800d50a:	62bb      	str	r3, [r7, #40]	@ 0x28

	        frame.start.X = 0;
 800d50c:	2300      	movs	r3, #0
 800d50e:	81bb      	strh	r3, [r7, #12]
	        frame.start.Y = 120;
 800d510:	2378      	movs	r3, #120	@ 0x78
 800d512:	81fb      	strh	r3, [r7, #14]
	        frame.end.X = 239;
 800d514:	23ef      	movs	r3, #239	@ 0xef
 800d516:	823b      	strh	r3, [r7, #16]
	        frame.end.Y = 239;
 800d518:	23ef      	movs	r3, #239	@ 0xef
 800d51a:	827b      	strh	r3, [r7, #18]

	   	}

	   	// Sends the block of data in a single time

	    GC9A01_set_frame(frame);
 800d51c:	f107 030c 	add.w	r3, r7, #12
 800d520:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d524:	f7fe fd6f 	bl	800c006 <GC9A01_set_frame>
	    GC9A01_write_command(MEM_WR);
 800d528:	202c      	movs	r0, #44	@ 0x2c
 800d52a:	f7fe faeb 	bl	800bb04 <GC9A01_write_command>

	    GC9A01_set_data_command(ON);
 800d52e:	2001      	movs	r0, #1
 800d530:	f7fe fab4 	bl	800ba9c <GC9A01_set_data_command>
	    GC9A01_set_chip_select(OFF);
 800d534:	2000      	movs	r0, #0
 800d536:	f7fe facb 	bl	800bad0 <GC9A01_set_chip_select>

	    uint32_t total_bytes = wd * ht;		// 2 byte per pixel
 800d53a:	887b      	ldrh	r3, [r7, #2]
 800d53c:	883a      	ldrh	r2, [r7, #0]
 800d53e:	fb02 f303 	mul.w	r3, r2, r3
 800d542:	617b      	str	r3, [r7, #20]
	    GC9A01_spi_tx(data, total_bytes);
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	b29b      	uxth	r3, r3
 800d548:	4619      	mov	r1, r3
 800d54a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d54c:	f7fe fdae 	bl	800c0ac <GC9A01_spi_tx>

	    GC9A01_set_chip_select(ON);
 800d550:	2001      	movs	r0, #1
 800d552:	f7fe fabd 	bl	800bad0 <GC9A01_set_chip_select>

}
 800d556:	bf00      	nop
 800d558:	371c      	adds	r7, #28
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd90      	pop	{r4, r7, pc}
 800d55e:	bf00      	nop
 800d560:	2001886d 	.word	0x2001886d

0800d564 <DMA2D_Init>:


static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	4603      	mov	r3, r0
 800d56c:	603a      	str	r2, [r7, #0]
 800d56e:	80fb      	strh	r3, [r7, #6]
 800d570:	460b      	mov	r3, r1
 800d572:	80bb      	strh	r3, [r7, #4]

  uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 800d574:	2301      	movs	r3, #1
 800d576:	60fb      	str	r3, [r7, #12]
 800d578:	2300      	movs	r3, #0
 800d57a:	60bb      	str	r3, [r7, #8]


  HAL_DMA2D_MspInit(&DMA2D_Handle);
 800d57c:	4836      	ldr	r0, [pc, #216]	@ (800d658 <DMA2D_Init+0xf4>)
 800d57e:	f000 fa03 	bl	800d988 <HAL_DMA2D_MspInit>

  if(ChromaSampling == JPEG_420_SUBSAMPLING)
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	2b01      	cmp	r3, #1
 800d586:	d10d      	bne.n	800d5a4 <DMA2D_Init+0x40>
  {

    cssMode = DMA2D_CSS_420;
 800d588:	2302      	movs	r3, #2
 800d58a:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 800d58c:	88fb      	ldrh	r3, [r7, #6]
 800d58e:	f003 030f 	and.w	r3, r3, #15
 800d592:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d025      	beq.n	800d5e6 <DMA2D_Init+0x82>
    {

      inputLineOffset = 16 - inputLineOffset;
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	f1c3 0310 	rsb	r3, r3, #16
 800d5a0:	60bb      	str	r3, [r7, #8]
 800d5a2:	e020      	b.n	800d5e6 <DMA2D_Init+0x82>

    }

  }
  else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d10d      	bne.n	800d5c6 <DMA2D_Init+0x62>
  {

    cssMode = DMA2D_NO_CSS;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 8;
 800d5ae:	88fb      	ldrh	r3, [r7, #6]
 800d5b0:	f003 0307 	and.w	r3, r3, #7
 800d5b4:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d014      	beq.n	800d5e6 <DMA2D_Init+0x82>
    {

      inputLineOffset = 8 - inputLineOffset;
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	f1c3 0308 	rsb	r3, r3, #8
 800d5c2:	60bb      	str	r3, [r7, #8]
 800d5c4:	e00f      	b.n	800d5e6 <DMA2D_Init+0x82>

    }

  }
  else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	2b02      	cmp	r3, #2
 800d5ca:	d10c      	bne.n	800d5e6 <DMA2D_Init+0x82>
  {

    cssMode = DMA2D_CSS_422;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 800d5d0:	88fb      	ldrh	r3, [r7, #6]
 800d5d2:	f003 030f 	and.w	r3, r3, #15
 800d5d6:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d003      	beq.n	800d5e6 <DMA2D_Init+0x82>
    {

      inputLineOffset = 16 - inputLineOffset;
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	f1c3 0310 	rsb	r3, r3, #16
 800d5e4:	60bb      	str	r3, [r7, #8]
    }

  }

  // Configure the DMA2D Mode, Color Mode and output offset
  DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 800d5e6:	4b1c      	ldr	r3, [pc, #112]	@ (800d658 <DMA2D_Init+0xf4>)
 800d5e8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800d5ec:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
 800d5ee:	4b1a      	ldr	r3, [pc, #104]	@ (800d658 <DMA2D_Init+0xf4>)
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 800d5f4:	88fb      	ldrh	r3, [r7, #6]
 800d5f6:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	4b16      	ldr	r3, [pc, #88]	@ (800d658 <DMA2D_Init+0xf4>)
 800d5fe:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  // No Output Alpha Inversion
 800d600:	4b15      	ldr	r3, [pc, #84]	@ (800d658 <DMA2D_Init+0xf4>)
 800d602:	2200      	movs	r2, #0
 800d604:	611a      	str	r2, [r3, #16]
  DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     // No Output Red & Blue swap
 800d606:	4b14      	ldr	r3, [pc, #80]	@ (800d658 <DMA2D_Init+0xf4>)
 800d608:	2200      	movs	r2, #0
 800d60a:	615a      	str	r2, [r3, #20]

  // DMA2D Callbacks Configuration
  DMA2D_Handle.XferCpltCallback  = NULL;
 800d60c:	4b12      	ldr	r3, [pc, #72]	@ (800d658 <DMA2D_Init+0xf4>)
 800d60e:	2200      	movs	r2, #0
 800d610:	621a      	str	r2, [r3, #32]

  // Foreground Configuration
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 800d612:	4b11      	ldr	r3, [pc, #68]	@ (800d658 <DMA2D_Init+0xf4>)
 800d614:	2201      	movs	r2, #1
 800d616:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 800d618:	4b0f      	ldr	r3, [pc, #60]	@ (800d658 <DMA2D_Init+0xf4>)
 800d61a:	22ff      	movs	r2, #255	@ 0xff
 800d61c:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 800d61e:	4b0e      	ldr	r3, [pc, #56]	@ (800d658 <DMA2D_Init+0xf4>)
 800d620:	220b      	movs	r2, #11
 800d622:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 800d624:	4a0c      	ldr	r2, [pc, #48]	@ (800d658 <DMA2D_Init+0xf4>)
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	65d3      	str	r3, [r2, #92]	@ 0x5c
  DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 800d62a:	4a0b      	ldr	r2, [pc, #44]	@ (800d658 <DMA2D_Init+0xf4>)
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	6453      	str	r3, [r2, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; 		// No ForeGround Red/Blue swap
 800d630:	4b09      	ldr	r3, [pc, #36]	@ (800d658 <DMA2D_Init+0xf4>)
 800d632:	2200      	movs	r2, #0
 800d634:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion
 800d636:	4b08      	ldr	r3, [pc, #32]	@ (800d658 <DMA2D_Init+0xf4>)
 800d638:	2200      	movs	r2, #0
 800d63a:	655a      	str	r2, [r3, #84]	@ 0x54

  DMA2D_Handle.Instance = DMA2D;
 800d63c:	4b06      	ldr	r3, [pc, #24]	@ (800d658 <DMA2D_Init+0xf4>)
 800d63e:	4a07      	ldr	r2, [pc, #28]	@ (800d65c <DMA2D_Init+0xf8>)
 800d640:	601a      	str	r2, [r3, #0]

  // DMA2D Initialization
  HAL_DMA2D_Init(&DMA2D_Handle);
 800d642:	4805      	ldr	r0, [pc, #20]	@ (800d658 <DMA2D_Init+0xf4>)
 800d644:	f7f3 fe66 	bl	8001314 <HAL_DMA2D_Init>
  HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 800d648:	2101      	movs	r1, #1
 800d64a:	4803      	ldr	r0, [pc, #12]	@ (800d658 <DMA2D_Init+0xf4>)
 800d64c:	f7f3 ffda 	bl	8001604 <HAL_DMA2D_ConfigLayer>

}
 800d650:	bf00      	nop
 800d652:	3710      	adds	r7, #16
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	2000023c 	.word	0x2000023c
 800d65c:	52001000 	.word	0x52001000

0800d660 <DMA2D_CopyBuffer>:


static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t ImageWidth, uint16_t ImageHeight)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b08a      	sub	sp, #40	@ 0x28
 800d664:	af02      	add	r7, sp, #8
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	4611      	mov	r1, r2
 800d66c:	461a      	mov	r2, r3
 800d66e:	460b      	mov	r3, r1
 800d670:	80fb      	strh	r3, [r7, #6]
 800d672:	4613      	mov	r3, r2
 800d674:	80bb      	strh	r3, [r7, #4]

  uint32_t xPos, yPos, destination;


  // calculate the destination transfer address
  xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 800d676:	4b15      	ldr	r3, [pc, #84]	@ (800d6cc <DMA2D_CopyBuffer+0x6c>)
 800d678:	68db      	ldr	r3, [r3, #12]
 800d67a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800d67e:	085b      	lsrs	r3, r3, #1
 800d680:	61fb      	str	r3, [r7, #28]
  yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 800d682:	4b12      	ldr	r3, [pc, #72]	@ (800d6cc <DMA2D_CopyBuffer+0x6c>)
 800d684:	689b      	ldr	r3, [r3, #8]
 800d686:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800d68a:	085b      	lsrs	r3, r3, #1
 800d68c:	61bb      	str	r3, [r7, #24]

  destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 800d68e:	69ba      	ldr	r2, [r7, #24]
 800d690:	4613      	mov	r3, r2
 800d692:	011b      	lsls	r3, r3, #4
 800d694:	1a9b      	subs	r3, r3, r2
 800d696:	011b      	lsls	r3, r3, #4
 800d698:	461a      	mov	r2, r3
 800d69a:	69fb      	ldr	r3, [r7, #28]
 800d69c:	4413      	add	r3, r2
 800d69e:	009a      	lsls	r2, r3, #2
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	4413      	add	r3, r2
 800d6a4:	617b      	str	r3, [r7, #20]

  // wait for the DMA2D transfer to ends
  HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 800d6a6:	f04f 31ff 	mov.w	r1, #4294967295
 800d6aa:	4809      	ldr	r0, [pc, #36]	@ (800d6d0 <DMA2D_CopyBuffer+0x70>)
 800d6ac:	f7f3 fec1 	bl	8001432 <HAL_DMA2D_PollForTransfer>
  // copy the new decoded frame to the LCD Frame buffer
  HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 800d6b0:	68f9      	ldr	r1, [r7, #12]
 800d6b2:	88fa      	ldrh	r2, [r7, #6]
 800d6b4:	88bb      	ldrh	r3, [r7, #4]
 800d6b6:	9300      	str	r3, [sp, #0]
 800d6b8:	4613      	mov	r3, r2
 800d6ba:	697a      	ldr	r2, [r7, #20]
 800d6bc:	4804      	ldr	r0, [pc, #16]	@ (800d6d0 <DMA2D_CopyBuffer+0x70>)
 800d6be:	f7f3 fe8d 	bl	80013dc <HAL_DMA2D_Start>

}
 800d6c2:	bf00      	nop
 800d6c4:	3720      	adds	r7, #32
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	200002a4 	.word	0x200002a4
 800d6d0:	2000023c 	.word	0x2000023c

0800d6d4 <SD_Initialize>:


static void SD_Initialize(void)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	af00      	add	r7, sp, #0

  BSP_SD_Init(0);
 800d6d8:	2000      	movs	r0, #0
 800d6da:	f7f2 ff5d 	bl	8000598 <BSP_SD_Init>

}
 800d6de:	bf00      	nop
 800d6e0:	bd80      	pop	{r7, pc}

0800d6e2 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d6e2:	b480      	push	{r7}
 800d6e4:	b083      	sub	sp, #12
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	80fb      	strh	r3, [r7, #6]
	//HAL_NVIC_DisableIRQ(EXTI3_IRQn);
	//HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);

	//MX_GPIO_Init(0);

}
 800d6ec:	bf00      	nop
 800d6ee:	370c      	adds	r7, #12
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <HAL_JPEG_MspInit>:

#include "main.h"


void HAL_JPEG_MspInit(JPEG_HandleTypeDef *hjpeg)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]

  static MDMA_HandleTypeDef   hmdmaIn;
  static MDMA_HandleTypeDef   hmdmaOut;  
  

  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 800d700:	4b54      	ldr	r3, [pc, #336]	@ (800d854 <HAL_JPEG_MspInit+0x15c>)
 800d702:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d706:	4a53      	ldr	r2, [pc, #332]	@ (800d854 <HAL_JPEG_MspInit+0x15c>)
 800d708:	f043 0320 	orr.w	r3, r3, #32
 800d70c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800d710:	4b50      	ldr	r3, [pc, #320]	@ (800d854 <HAL_JPEG_MspInit+0x15c>)
 800d712:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d716:	f003 0320 	and.w	r3, r3, #32
 800d71a:	60fb      	str	r3, [r7, #12]
 800d71c:	68fb      	ldr	r3, [r7, #12]
  
  __HAL_RCC_MDMA_CLK_ENABLE();
 800d71e:	4b4d      	ldr	r3, [pc, #308]	@ (800d854 <HAL_JPEG_MspInit+0x15c>)
 800d720:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d724:	4a4b      	ldr	r2, [pc, #300]	@ (800d854 <HAL_JPEG_MspInit+0x15c>)
 800d726:	f043 0301 	orr.w	r3, r3, #1
 800d72a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800d72e:	4b49      	ldr	r3, [pc, #292]	@ (800d854 <HAL_JPEG_MspInit+0x15c>)
 800d730:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d734:	f003 0301 	and.w	r3, r3, #1
 800d738:	60bb      	str	r3, [r7, #8]
 800d73a:	68bb      	ldr	r3, [r7, #8]
  
  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 800d73c:	220f      	movs	r2, #15
 800d73e:	2107      	movs	r1, #7
 800d740:	2079      	movs	r0, #121	@ 0x79
 800d742:	f7f3 fd26 	bl	8001192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(JPEG_IRQn);  
 800d746:	2079      	movs	r0, #121	@ 0x79
 800d748:	f7f3 fd3d 	bl	80011c6 <HAL_NVIC_EnableIRQ>
  
  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 800d74c:	4b42      	ldr	r3, [pc, #264]	@ (800d858 <HAL_JPEG_MspInit+0x160>)
 800d74e:	2280      	movs	r2, #128	@ 0x80
 800d750:	60da      	str	r2, [r3, #12]
  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800d752:	4b41      	ldr	r3, [pc, #260]	@ (800d858 <HAL_JPEG_MspInit+0x160>)
 800d754:	2200      	movs	r2, #0
 800d756:	611a      	str	r2, [r3, #16]
  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 800d758:	4b3f      	ldr	r3, [pc, #252]	@ (800d858 <HAL_JPEG_MspInit+0x160>)
 800d75a:	2202      	movs	r2, #2
 800d75c:	615a      	str	r2, [r3, #20]
  hmdmaIn.Init.DestinationInc     = MDMA_DEST_INC_DISABLE;
 800d75e:	4b3e      	ldr	r3, [pc, #248]	@ (800d858 <HAL_JPEG_MspInit+0x160>)
 800d760:	2200      	movs	r2, #0
 800d762:	619a      	str	r2, [r3, #24]
  hmdmaIn.Init.SourceDataSize     = MDMA_SRC_DATASIZE_BYTE;
 800d764:	4b3c      	ldr	r3, [pc, #240]	@ (800d858 <HAL_JPEG_MspInit+0x160>)
 800d766:	2200      	movs	r2, #0
 800d768:	61da      	str	r2, [r3, #28]
  hmdmaIn.Init.DestDataSize       = MDMA_DEST_DATASIZE_WORD;
 800d76a:	4b3b      	ldr	r3, [pc, #236]	@ (800d858 <HAL_JPEG_MspInit+0x160>)
 800d76c:	2280      	movs	r2, #128	@ 0x80
 800d76e:	621a      	str	r2, [r3, #32]
  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;   
 800d770:	4b39      	ldr	r3, [pc, #228]	@ (800d858 <HAL_JPEG_MspInit+0x160>)
 800d772:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800d776:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 800d778:	4b37      	ldr	r3, [pc, #220]	@ (800d858 <HAL_JPEG_MspInit+0x160>)
 800d77a:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800d77e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdmaIn.Init.DestBurst          = MDMA_DEST_BURST_16BEATS; 
 800d780:	4b35      	ldr	r3, [pc, #212]	@ (800d858 <HAL_JPEG_MspInit+0x160>)
 800d782:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800d786:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdmaIn.Init.SourceBlockAddressOffset = 0;
 800d788:	4b33      	ldr	r3, [pc, #204]	@ (800d858 <HAL_JPEG_MspInit+0x160>)
 800d78a:	2200      	movs	r2, #0
 800d78c:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdmaIn.Init.DestBlockAddressOffset  = 0;
 800d78e:	4b32      	ldr	r3, [pc, #200]	@ (800d858 <HAL_JPEG_MspInit+0x160>)
 800d790:	2200      	movs	r2, #0
 800d792:	639a      	str	r2, [r3, #56]	@ 0x38
  
  hmdmaIn.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800d794:	4b30      	ldr	r3, [pc, #192]	@ (800d858 <HAL_JPEG_MspInit+0x160>)
 800d796:	2211      	movs	r2, #17
 800d798:	605a      	str	r2, [r3, #4]
  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;  
 800d79a:	4b2f      	ldr	r3, [pc, #188]	@ (800d858 <HAL_JPEG_MspInit+0x160>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	609a      	str	r2, [r3, #8]
  hmdmaIn.Init.BufferTransferLength = 32;
 800d7a0:	4b2d      	ldr	r3, [pc, #180]	@ (800d858 <HAL_JPEG_MspInit+0x160>)
 800d7a2:	2220      	movs	r2, #32
 800d7a4:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hmdmaIn.Instance = MDMA_Channel1;
 800d7a6:	4b2c      	ldr	r3, [pc, #176]	@ (800d858 <HAL_JPEG_MspInit+0x160>)
 800d7a8:	4a2c      	ldr	r2, [pc, #176]	@ (800d85c <HAL_JPEG_MspInit+0x164>)
 800d7aa:	601a      	str	r2, [r3, #0]
  
  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4a2a      	ldr	r2, [pc, #168]	@ (800d858 <HAL_JPEG_MspInit+0x160>)
 800d7b0:	631a      	str	r2, [r3, #48]	@ 0x30
 800d7b2:	4a29      	ldr	r2, [pc, #164]	@ (800d858 <HAL_JPEG_MspInit+0x160>)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6413      	str	r3, [r2, #64]	@ 0x40
  
  HAL_MDMA_DeInit(&hmdmaIn);  
 800d7b8:	4827      	ldr	r0, [pc, #156]	@ (800d858 <HAL_JPEG_MspInit+0x160>)
 800d7ba:	f7f6 f943 	bl	8003a44 <HAL_MDMA_DeInit>

  HAL_MDMA_Init(&hmdmaIn);
 800d7be:	4826      	ldr	r0, [pc, #152]	@ (800d858 <HAL_JPEG_MspInit+0x160>)
 800d7c0:	f7f6 f8f4 	bl	80039ac <HAL_MDMA_Init>
  
  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 800d7c4:	4b26      	ldr	r3, [pc, #152]	@ (800d860 <HAL_JPEG_MspInit+0x168>)
 800d7c6:	22c0      	movs	r2, #192	@ 0xc0
 800d7c8:	60da      	str	r2, [r3, #12]
  hmdmaOut.Init.Endianness      = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800d7ca:	4b25      	ldr	r3, [pc, #148]	@ (800d860 <HAL_JPEG_MspInit+0x168>)
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	611a      	str	r2, [r3, #16]
  hmdmaOut.Init.SourceInc       = MDMA_SRC_INC_DISABLE;
 800d7d0:	4b23      	ldr	r3, [pc, #140]	@ (800d860 <HAL_JPEG_MspInit+0x168>)
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	615a      	str	r2, [r3, #20]
  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
 800d7d6:	4b22      	ldr	r3, [pc, #136]	@ (800d860 <HAL_JPEG_MspInit+0x168>)
 800d7d8:	2208      	movs	r2, #8
 800d7da:	619a      	str	r2, [r3, #24]
  hmdmaOut.Init.SourceDataSize  = MDMA_SRC_DATASIZE_WORD;
 800d7dc:	4b20      	ldr	r3, [pc, #128]	@ (800d860 <HAL_JPEG_MspInit+0x168>)
 800d7de:	2220      	movs	r2, #32
 800d7e0:	61da      	str	r2, [r3, #28]
  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
 800d7e2:	4b1f      	ldr	r3, [pc, #124]	@ (800d860 <HAL_JPEG_MspInit+0x168>)
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	621a      	str	r2, [r3, #32]
  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
 800d7e8:	4b1d      	ldr	r3, [pc, #116]	@ (800d860 <HAL_JPEG_MspInit+0x168>)
 800d7ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800d7ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
 800d7f0:	4b1b      	ldr	r3, [pc, #108]	@ (800d860 <HAL_JPEG_MspInit+0x168>)
 800d7f2:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800d7f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;  
 800d7f8:	4b19      	ldr	r3, [pc, #100]	@ (800d860 <HAL_JPEG_MspInit+0x168>)
 800d7fa:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800d7fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdmaOut.Init.SourceBlockAddressOffset = 0;
 800d800:	4b17      	ldr	r3, [pc, #92]	@ (800d860 <HAL_JPEG_MspInit+0x168>)
 800d802:	2200      	movs	r2, #0
 800d804:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdmaOut.Init.DestBlockAddressOffset  = 0;
 800d806:	4b16      	ldr	r3, [pc, #88]	@ (800d860 <HAL_JPEG_MspInit+0x168>)
 800d808:	2200      	movs	r2, #0
 800d80a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800d80c:	4b14      	ldr	r3, [pc, #80]	@ (800d860 <HAL_JPEG_MspInit+0x168>)
 800d80e:	2213      	movs	r2, #19
 800d810:	605a      	str	r2, [r3, #4]
  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;    
 800d812:	4b13      	ldr	r3, [pc, #76]	@ (800d860 <HAL_JPEG_MspInit+0x168>)
 800d814:	2200      	movs	r2, #0
 800d816:	609a      	str	r2, [r3, #8]
  hmdmaOut.Init.BufferTransferLength = 32;
 800d818:	4b11      	ldr	r3, [pc, #68]	@ (800d860 <HAL_JPEG_MspInit+0x168>)
 800d81a:	2220      	movs	r2, #32
 800d81c:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hmdmaOut.Instance = MDMA_Channel0;
 800d81e:	4b10      	ldr	r3, [pc, #64]	@ (800d860 <HAL_JPEG_MspInit+0x168>)
 800d820:	4a10      	ldr	r2, [pc, #64]	@ (800d864 <HAL_JPEG_MspInit+0x16c>)
 800d822:	601a      	str	r2, [r3, #0]

  HAL_MDMA_DeInit(&hmdmaOut);  
 800d824:	480e      	ldr	r0, [pc, #56]	@ (800d860 <HAL_JPEG_MspInit+0x168>)
 800d826:	f7f6 f90d 	bl	8003a44 <HAL_MDMA_DeInit>

  HAL_MDMA_Init(&hmdmaOut);
 800d82a:	480d      	ldr	r0, [pc, #52]	@ (800d860 <HAL_JPEG_MspInit+0x168>)
 800d82c:	f7f6 f8be 	bl	80039ac <HAL_MDMA_Init>
  
  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	4a0b      	ldr	r2, [pc, #44]	@ (800d860 <HAL_JPEG_MspInit+0x168>)
 800d834:	635a      	str	r2, [r3, #52]	@ 0x34
 800d836:	4a0a      	ldr	r2, [pc, #40]	@ (800d860 <HAL_JPEG_MspInit+0x168>)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6413      	str	r3, [r2, #64]	@ 0x40
  
  
  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 800d83c:	220f      	movs	r2, #15
 800d83e:	2108      	movs	r1, #8
 800d840:	207a      	movs	r0, #122	@ 0x7a
 800d842:	f7f3 fca6 	bl	8001192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800d846:	207a      	movs	r0, #122	@ 0x7a
 800d848:	f7f3 fcbd 	bl	80011c6 <HAL_NVIC_EnableIRQ>
  
}
 800d84c:	bf00      	nop
 800d84e:	3710      	adds	r7, #16
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	58024400 	.word	0x58024400
 800d858:	20018870 	.word	0x20018870
 800d85c:	52000080 	.word	0x52000080
 800d860:	200188dc 	.word	0x200188dc
 800d864:	52000040 	.word	0x52000040

0800d868 <HAL_SPI_MspInit>:

}


void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b0be      	sub	sp, #248	@ 0xf8
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d870:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800d874:	2200      	movs	r2, #0
 800d876:	601a      	str	r2, [r3, #0]
 800d878:	605a      	str	r2, [r3, #4]
 800d87a:	609a      	str	r2, [r3, #8]
 800d87c:	60da      	str	r2, [r3, #12]
 800d87e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d880:	f107 0318 	add.w	r3, r7, #24
 800d884:	22c8      	movs	r2, #200	@ 0xc8
 800d886:	2100      	movs	r1, #0
 800d888:	4618      	mov	r0, r3
 800d88a:	f003 fae5 	bl	8010e58 <memset>
  if(hspi->Instance==SPI5)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	4a39      	ldr	r2, [pc, #228]	@ (800d978 <HAL_SPI_MspInit+0x110>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d16a      	bne.n	800d96e <HAL_SPI_MspInit+0x106>
  {

    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800d898:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d89c:	f04f 0300 	mov.w	r3, #0
 800d8a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d8aa:	f107 0318 	add.w	r3, r7, #24
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7f7 fc96 	bl	80051e0 <HAL_RCCEx_PeriphCLKConfig>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d001      	beq.n	800d8be <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800d8ba:	f7fe fceb 	bl	800c294 <Error_Handler>
    }

    __HAL_RCC_SPI5_CLK_ENABLE();
 800d8be:	4b2f      	ldr	r3, [pc, #188]	@ (800d97c <HAL_SPI_MspInit+0x114>)
 800d8c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d8c4:	4a2d      	ldr	r2, [pc, #180]	@ (800d97c <HAL_SPI_MspInit+0x114>)
 800d8c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d8ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d8ce:	4b2b      	ldr	r3, [pc, #172]	@ (800d97c <HAL_SPI_MspInit+0x114>)
 800d8d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d8d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d8d8:	617b      	str	r3, [r7, #20]
 800d8da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800d8dc:	4b27      	ldr	r3, [pc, #156]	@ (800d97c <HAL_SPI_MspInit+0x114>)
 800d8de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d8e2:	4a26      	ldr	r2, [pc, #152]	@ (800d97c <HAL_SPI_MspInit+0x114>)
 800d8e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d8e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d8ec:	4b23      	ldr	r3, [pc, #140]	@ (800d97c <HAL_SPI_MspInit+0x114>)
 800d8ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d8f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d8f6:	613b      	str	r3, [r7, #16]
 800d8f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800d8fa:	4b20      	ldr	r3, [pc, #128]	@ (800d97c <HAL_SPI_MspInit+0x114>)
 800d8fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d900:	4a1e      	ldr	r2, [pc, #120]	@ (800d97c <HAL_SPI_MspInit+0x114>)
 800d902:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d906:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d90a:	4b1c      	ldr	r3, [pc, #112]	@ (800d97c <HAL_SPI_MspInit+0x114>)
 800d90c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d910:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d914:	60fb      	str	r3, [r7, #12]
 800d916:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = ARD_D13_Pin;
 800d918:	2301      	movs	r3, #1
 800d91a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d91e:	2302      	movs	r3, #2
 800d920:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d924:	2300      	movs	r3, #0
 800d926:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d92a:	2300      	movs	r3, #0
 800d92c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800d930:	2305      	movs	r3, #5
 800d932:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 800d936:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800d93a:	4619      	mov	r1, r3
 800d93c:	4810      	ldr	r0, [pc, #64]	@ (800d980 <HAL_SPI_MspInit+0x118>)
 800d93e:	f7f3 ffb5 	bl	80018ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800d942:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800d946:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d94a:	2302      	movs	r3, #2
 800d94c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d950:	2300      	movs	r3, #0
 800d952:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d956:	2300      	movs	r3, #0
 800d958:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800d95c:	2305      	movs	r3, #5
 800d95e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800d962:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800d966:	4619      	mov	r1, r3
 800d968:	4806      	ldr	r0, [pc, #24]	@ (800d984 <HAL_SPI_MspInit+0x11c>)
 800d96a:	f7f3 ff9f 	bl	80018ac <HAL_GPIO_Init>

  }

}
 800d96e:	bf00      	nop
 800d970:	37f8      	adds	r7, #248	@ 0xf8
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
 800d976:	bf00      	nop
 800d978:	40015000 	.word	0x40015000
 800d97c:	58024400 	.word	0x58024400
 800d980:	58022800 	.word	0x58022800
 800d984:	58022400 	.word	0x58022400

0800d988 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b084      	sub	sp, #16
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a0e      	ldr	r2, [pc, #56]	@ (800d9d0 <HAL_DMA2D_MspInit+0x48>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d116      	bne.n	800d9c8 <HAL_DMA2D_MspInit+0x40>
  {

    __HAL_RCC_DMA2D_CLK_ENABLE();
 800d99a:	4b0e      	ldr	r3, [pc, #56]	@ (800d9d4 <HAL_DMA2D_MspInit+0x4c>)
 800d99c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d9a0:	4a0c      	ldr	r2, [pc, #48]	@ (800d9d4 <HAL_DMA2D_MspInit+0x4c>)
 800d9a2:	f043 0310 	orr.w	r3, r3, #16
 800d9a6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800d9aa:	4b0a      	ldr	r3, [pc, #40]	@ (800d9d4 <HAL_DMA2D_MspInit+0x4c>)
 800d9ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d9b0:	f003 0310 	and.w	r3, r3, #16
 800d9b4:	60fb      	str	r3, [r7, #12]
 800d9b6:	68fb      	ldr	r3, [r7, #12]

    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	2100      	movs	r1, #0
 800d9bc:	205a      	movs	r0, #90	@ 0x5a
 800d9be:	f7f3 fbe8 	bl	8001192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800d9c2:	205a      	movs	r0, #90	@ 0x5a
 800d9c4:	f7f3 fbff 	bl	80011c6 <HAL_NVIC_EnableIRQ>

  }

}
 800d9c8:	bf00      	nop
 800d9ca:	3710      	adds	r7, #16
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	52001000 	.word	0x52001000
 800d9d4:	58024400 	.word	0x58024400

0800d9d8 <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b0b4      	sub	sp, #208	@ 0xd0
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d9e0:	f107 0308 	add.w	r3, r7, #8
 800d9e4:	22c8      	movs	r2, #200	@ 0xc8
 800d9e6:	2100      	movs	r1, #0
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f003 fa35 	bl	8010e58 <memset>
  if(hrtc->Instance==RTC)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4a10      	ldr	r2, [pc, #64]	@ (800da34 <HAL_RTC_MspInit+0x5c>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d119      	bne.n	800da2c <HAL_RTC_MspInit+0x54>
  {

    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800d9f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800d9fc:	f04f 0300 	mov.w	r3, #0
 800da00:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800da04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800da08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800da0c:	f107 0308 	add.w	r3, r7, #8
 800da10:	4618      	mov	r0, r3
 800da12:	f7f7 fbe5 	bl	80051e0 <HAL_RCCEx_PeriphCLKConfig>
 800da16:	4603      	mov	r3, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d001      	beq.n	800da20 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800da1c:	f7fe fc3a 	bl	800c294 <Error_Handler>
    }

    __HAL_RCC_RTC_ENABLE();
 800da20:	4b05      	ldr	r3, [pc, #20]	@ (800da38 <HAL_RTC_MspInit+0x60>)
 800da22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da24:	4a04      	ldr	r2, [pc, #16]	@ (800da38 <HAL_RTC_MspInit+0x60>)
 800da26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da2a:	6713      	str	r3, [r2, #112]	@ 0x70

  }

}
 800da2c:	bf00      	nop
 800da2e:	37d0      	adds	r7, #208	@ 0xd0
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}
 800da34:	58004000 	.word	0x58004000
 800da38:	58024400 	.word	0x58024400

0800da3c <NMI_Handler>:

extern JPEG_HandleTypeDef    JPEG_Handle;


void NMI_Handler(void)
{
 800da3c:	b480      	push	{r7}
 800da3e:	af00      	add	r7, sp, #0
}
 800da40:	bf00      	nop
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr

0800da4a <HardFault_Handler>:


void HardFault_Handler(void)
{
 800da4a:	b480      	push	{r7}
 800da4c:	af00      	add	r7, sp, #0
  while (1)
 800da4e:	bf00      	nop
 800da50:	e7fd      	b.n	800da4e <HardFault_Handler+0x4>

0800da52 <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 800da52:	b480      	push	{r7}
 800da54:	af00      	add	r7, sp, #0
  while (1)
 800da56:	bf00      	nop
 800da58:	e7fd      	b.n	800da56 <MemManage_Handler+0x4>

0800da5a <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 800da5a:	b480      	push	{r7}
 800da5c:	af00      	add	r7, sp, #0
  while (1)
 800da5e:	bf00      	nop
 800da60:	e7fd      	b.n	800da5e <BusFault_Handler+0x4>

0800da62 <UsageFault_Handler>:
  }
}


void UsageFault_Handler(void)
{
 800da62:	b480      	push	{r7}
 800da64:	af00      	add	r7, sp, #0
  while (1)
 800da66:	bf00      	nop
 800da68:	e7fd      	b.n	800da66 <UsageFault_Handler+0x4>

0800da6a <SVC_Handler>:
  }
}


void SVC_Handler(void)
{
 800da6a:	b480      	push	{r7}
 800da6c:	af00      	add	r7, sp, #0
}
 800da6e:	bf00      	nop
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 800da78:	b480      	push	{r7}
 800da7a:	af00      	add	r7, sp, #0
}
 800da7c:	bf00      	nop
 800da7e:	46bd      	mov	sp, r7
 800da80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da84:	4770      	bx	lr

0800da86 <PendSV_Handler>:


void PendSV_Handler(void)
{
 800da86:	b480      	push	{r7}
 800da88:	af00      	add	r7, sp, #0
}
 800da8a:	bf00      	nop
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr

0800da94 <SysTick_Handler>:


void SysTick_Handler(void)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	af00      	add	r7, sp, #0

  HAL_IncTick();
 800da98:	f7f3 fa20 	bl	8000edc <HAL_IncTick>

}
 800da9c:	bf00      	nop
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <JPEG_IRQHandler>:


void JPEG_IRQHandler(void)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	af00      	add	r7, sp, #0
  HAL_JPEG_IRQHandler(&JPEG_Handle);
 800daa4:	4802      	ldr	r0, [pc, #8]	@ (800dab0 <JPEG_IRQHandler+0x10>)
 800daa6:	f7f4 fafd 	bl	80020a4 <HAL_JPEG_IRQHandler>
}
 800daaa:	bf00      	nop
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	200001e4 	.word	0x200001e4

0800dab4 <MDMA_IRQHandler>:


void MDMA_IRQHandler()
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	af00      	add	r7, sp, #0
  /* Check the interrupt and clear flag */
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmain);
 800dab8:	4b05      	ldr	r3, [pc, #20]	@ (800dad0 <MDMA_IRQHandler+0x1c>)
 800daba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7f6 f8c1 	bl	8003c44 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);  
 800dac2:	4b03      	ldr	r3, [pc, #12]	@ (800dad0 <MDMA_IRQHandler+0x1c>)
 800dac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7f6 f8bc 	bl	8003c44 <HAL_MDMA_IRQHandler>
}
 800dacc:	bf00      	nop
 800dace:	bd80      	pop	{r7, pc}
 800dad0:	200001e4 	.word	0x200001e4

0800dad4 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	af00      	add	r7, sp, #0

    HAL_GPIO_EXTI_IRQHandler(BUTTON_MINUS_Pin);
 800dad8:	2001      	movs	r0, #1
 800dada:	f7f4 f8c8 	bl	8001c6e <HAL_GPIO_EXTI_IRQHandler>

}
 800dade:	bf00      	nop
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	af00      	add	r7, sp, #0

    HAL_GPIO_EXTI_IRQHandler(BUTTON_SETTING_Pin);
 800dae6:	2008      	movs	r0, #8
 800dae8:	f7f4 f8c1 	bl	8001c6e <HAL_GPIO_EXTI_IRQHandler>

}
 800daec:	bf00      	nop
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	af00      	add	r7, sp, #0

    HAL_GPIO_EXTI_IRQHandler(BUTTON_PLUS_Pin);
 800daf4:	2080      	movs	r0, #128	@ 0x80
 800daf6:	f7f4 f8ba 	bl	8001c6e <HAL_GPIO_EXTI_IRQHandler>

}
 800dafa:	bf00      	nop
 800dafc:	bd80      	pop	{r7, pc}
	...

0800db00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b086      	sub	sp, #24
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800db08:	4a14      	ldr	r2, [pc, #80]	@ (800db5c <_sbrk+0x5c>)
 800db0a:	4b15      	ldr	r3, [pc, #84]	@ (800db60 <_sbrk+0x60>)
 800db0c:	1ad3      	subs	r3, r2, r3
 800db0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800db14:	4b13      	ldr	r3, [pc, #76]	@ (800db64 <_sbrk+0x64>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d102      	bne.n	800db22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800db1c:	4b11      	ldr	r3, [pc, #68]	@ (800db64 <_sbrk+0x64>)
 800db1e:	4a12      	ldr	r2, [pc, #72]	@ (800db68 <_sbrk+0x68>)
 800db20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800db22:	4b10      	ldr	r3, [pc, #64]	@ (800db64 <_sbrk+0x64>)
 800db24:	681a      	ldr	r2, [r3, #0]
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	4413      	add	r3, r2
 800db2a:	693a      	ldr	r2, [r7, #16]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d207      	bcs.n	800db40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800db30:	f003 f9aa 	bl	8010e88 <__errno>
 800db34:	4603      	mov	r3, r0
 800db36:	220c      	movs	r2, #12
 800db38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800db3a:	f04f 33ff 	mov.w	r3, #4294967295
 800db3e:	e009      	b.n	800db54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800db40:	4b08      	ldr	r3, [pc, #32]	@ (800db64 <_sbrk+0x64>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800db46:	4b07      	ldr	r3, [pc, #28]	@ (800db64 <_sbrk+0x64>)
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	4413      	add	r3, r2
 800db4e:	4a05      	ldr	r2, [pc, #20]	@ (800db64 <_sbrk+0x64>)
 800db50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800db52:	68fb      	ldr	r3, [r7, #12]
}
 800db54:	4618      	mov	r0, r3
 800db56:	3718      	adds	r7, #24
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}
 800db5c:	20020000 	.word	0x20020000
 800db60:	00002000 	.word	0x00002000
 800db64:	20018948 	.word	0x20018948
 800db68:	20018ac8 	.word	0x20018ac8

0800db6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800db6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800dba4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800db70:	f7f3 f8ba 	bl	8000ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800db74:	480c      	ldr	r0, [pc, #48]	@ (800dba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800db76:	490d      	ldr	r1, [pc, #52]	@ (800dbac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800db78:	4a0d      	ldr	r2, [pc, #52]	@ (800dbb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800db7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800db7c:	e002      	b.n	800db84 <LoopCopyDataInit>

0800db7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800db7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800db80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800db82:	3304      	adds	r3, #4

0800db84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800db84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800db86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800db88:	d3f9      	bcc.n	800db7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800db8a:	4a0a      	ldr	r2, [pc, #40]	@ (800dbb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800db8c:	4c0a      	ldr	r4, [pc, #40]	@ (800dbb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800db8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800db90:	e001      	b.n	800db96 <LoopFillZerobss>

0800db92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800db92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800db94:	3204      	adds	r2, #4

0800db96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800db96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800db98:	d3fb      	bcc.n	800db92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800db9a:	f003 f97b 	bl	8010e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800db9e:	f7fe fb53 	bl	800c248 <main>
  bx  lr
 800dba2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800dba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800dba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800dbac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800dbb0:	08011da4 	.word	0x08011da4
  ldr r2, =_sbss
 800dbb4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800dbb8:	20018ac8 	.word	0x20018ac8

0800dbbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800dbbc:	e7fe      	b.n	800dbbc <ADC3_IRQHandler>
	...

0800dbc0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800dbca:	79fb      	ldrb	r3, [r7, #7]
 800dbcc:	4a08      	ldr	r2, [pc, #32]	@ (800dbf0 <disk_status+0x30>)
 800dbce:	009b      	lsls	r3, r3, #2
 800dbd0:	4413      	add	r3, r2
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	685b      	ldr	r3, [r3, #4]
 800dbd6:	79fa      	ldrb	r2, [r7, #7]
 800dbd8:	4905      	ldr	r1, [pc, #20]	@ (800dbf0 <disk_status+0x30>)
 800dbda:	440a      	add	r2, r1
 800dbdc:	7a12      	ldrb	r2, [r2, #8]
 800dbde:	4610      	mov	r0, r2
 800dbe0:	4798      	blx	r3
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800dbe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3710      	adds	r7, #16
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	20018974 	.word	0x20018974

0800dbf4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800dc02:	79fb      	ldrb	r3, [r7, #7]
 800dc04:	4a0e      	ldr	r2, [pc, #56]	@ (800dc40 <disk_initialize+0x4c>)
 800dc06:	5cd3      	ldrb	r3, [r2, r3]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d114      	bne.n	800dc36 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800dc0c:	79fb      	ldrb	r3, [r7, #7]
 800dc0e:	4a0c      	ldr	r2, [pc, #48]	@ (800dc40 <disk_initialize+0x4c>)
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	4413      	add	r3, r2
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	79fa      	ldrb	r2, [r7, #7]
 800dc1a:	4909      	ldr	r1, [pc, #36]	@ (800dc40 <disk_initialize+0x4c>)
 800dc1c:	440a      	add	r2, r1
 800dc1e:	7a12      	ldrb	r2, [r2, #8]
 800dc20:	4610      	mov	r0, r2
 800dc22:	4798      	blx	r3
 800dc24:	4603      	mov	r3, r0
 800dc26:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800dc28:	7bfb      	ldrb	r3, [r7, #15]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d103      	bne.n	800dc36 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800dc2e:	79fb      	ldrb	r3, [r7, #7]
 800dc30:	4a03      	ldr	r2, [pc, #12]	@ (800dc40 <disk_initialize+0x4c>)
 800dc32:	2101      	movs	r1, #1
 800dc34:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800dc36:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3710      	adds	r7, #16
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	20018974 	.word	0x20018974

0800dc44 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800dc44:	b590      	push	{r4, r7, lr}
 800dc46:	b087      	sub	sp, #28
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60b9      	str	r1, [r7, #8]
 800dc4c:	607a      	str	r2, [r7, #4]
 800dc4e:	603b      	str	r3, [r7, #0]
 800dc50:	4603      	mov	r3, r0
 800dc52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dc54:	7bfb      	ldrb	r3, [r7, #15]
 800dc56:	4a0a      	ldr	r2, [pc, #40]	@ (800dc80 <disk_read+0x3c>)
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	4413      	add	r3, r2
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	689c      	ldr	r4, [r3, #8]
 800dc60:	7bfb      	ldrb	r3, [r7, #15]
 800dc62:	4a07      	ldr	r2, [pc, #28]	@ (800dc80 <disk_read+0x3c>)
 800dc64:	4413      	add	r3, r2
 800dc66:	7a18      	ldrb	r0, [r3, #8]
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	68b9      	ldr	r1, [r7, #8]
 800dc6e:	47a0      	blx	r4
 800dc70:	4603      	mov	r3, r0
 800dc72:	75fb      	strb	r3, [r7, #23]
  return res;
 800dc74:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	371c      	adds	r7, #28
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd90      	pop	{r4, r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	20018974 	.word	0x20018974

0800dc84 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800dc84:	b590      	push	{r4, r7, lr}
 800dc86:	b087      	sub	sp, #28
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60b9      	str	r1, [r7, #8]
 800dc8c:	607a      	str	r2, [r7, #4]
 800dc8e:	603b      	str	r3, [r7, #0]
 800dc90:	4603      	mov	r3, r0
 800dc92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800dc94:	7bfb      	ldrb	r3, [r7, #15]
 800dc96:	4a0a      	ldr	r2, [pc, #40]	@ (800dcc0 <disk_write+0x3c>)
 800dc98:	009b      	lsls	r3, r3, #2
 800dc9a:	4413      	add	r3, r2
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	68dc      	ldr	r4, [r3, #12]
 800dca0:	7bfb      	ldrb	r3, [r7, #15]
 800dca2:	4a07      	ldr	r2, [pc, #28]	@ (800dcc0 <disk_write+0x3c>)
 800dca4:	4413      	add	r3, r2
 800dca6:	7a18      	ldrb	r0, [r3, #8]
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	68b9      	ldr	r1, [r7, #8]
 800dcae:	47a0      	blx	r4
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	75fb      	strb	r3, [r7, #23]
  return res;
 800dcb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	371c      	adds	r7, #28
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd90      	pop	{r4, r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	20018974 	.word	0x20018974

0800dcc4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	4603      	mov	r3, r0
 800dccc:	603a      	str	r2, [r7, #0]
 800dcce:	71fb      	strb	r3, [r7, #7]
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800dcd4:	79fb      	ldrb	r3, [r7, #7]
 800dcd6:	4a09      	ldr	r2, [pc, #36]	@ (800dcfc <disk_ioctl+0x38>)
 800dcd8:	009b      	lsls	r3, r3, #2
 800dcda:	4413      	add	r3, r2
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	691b      	ldr	r3, [r3, #16]
 800dce0:	79fa      	ldrb	r2, [r7, #7]
 800dce2:	4906      	ldr	r1, [pc, #24]	@ (800dcfc <disk_ioctl+0x38>)
 800dce4:	440a      	add	r2, r1
 800dce6:	7a10      	ldrb	r0, [r2, #8]
 800dce8:	79b9      	ldrb	r1, [r7, #6]
 800dcea:	683a      	ldr	r2, [r7, #0]
 800dcec:	4798      	blx	r3
 800dcee:	4603      	mov	r3, r0
 800dcf0:	73fb      	strb	r3, [r7, #15]
  return res;
 800dcf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3710      	adds	r7, #16
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}
 800dcfc:	20018974 	.word	0x20018974

0800dd00 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 800dd00:	b480      	push	{r7}
 800dd02:	af00      	add	r7, sp, #0
  return 0;
 800dd04:	2300      	movs	r3, #0
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr

0800dd10 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800dd10:	b480      	push	{r7}
 800dd12:	b085      	sub	sp, #20
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800dd20:	89fb      	ldrh	r3, [r7, #14]
 800dd22:	021b      	lsls	r3, r3, #8
 800dd24:	b21a      	sxth	r2, r3
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	b21b      	sxth	r3, r3
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	b21b      	sxth	r3, r3
 800dd30:	81fb      	strh	r3, [r7, #14]
	return rv;
 800dd32:	89fb      	ldrh	r3, [r7, #14]
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3714      	adds	r7, #20
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	3303      	adds	r3, #3
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	021b      	lsls	r3, r3, #8
 800dd54:	687a      	ldr	r2, [r7, #4]
 800dd56:	3202      	adds	r2, #2
 800dd58:	7812      	ldrb	r2, [r2, #0]
 800dd5a:	4313      	orrs	r3, r2
 800dd5c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	021b      	lsls	r3, r3, #8
 800dd62:	687a      	ldr	r2, [r7, #4]
 800dd64:	3201      	adds	r2, #1
 800dd66:	7812      	ldrb	r2, [r2, #0]
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	021b      	lsls	r3, r3, #8
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	7812      	ldrb	r2, [r2, #0]
 800dd74:	4313      	orrs	r3, r2
 800dd76:	60fb      	str	r3, [r7, #12]
	return rv;
 800dd78:	68fb      	ldr	r3, [r7, #12]
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3714      	adds	r7, #20
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr

0800dd86 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800dd86:	b480      	push	{r7}
 800dd88:	b083      	sub	sp, #12
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
 800dd8e:	460b      	mov	r3, r1
 800dd90:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	1c5a      	adds	r2, r3, #1
 800dd96:	607a      	str	r2, [r7, #4]
 800dd98:	887a      	ldrh	r2, [r7, #2]
 800dd9a:	b2d2      	uxtb	r2, r2
 800dd9c:	701a      	strb	r2, [r3, #0]
 800dd9e:	887b      	ldrh	r3, [r7, #2]
 800dda0:	0a1b      	lsrs	r3, r3, #8
 800dda2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	1c5a      	adds	r2, r3, #1
 800dda8:	607a      	str	r2, [r7, #4]
 800ddaa:	887a      	ldrh	r2, [r7, #2]
 800ddac:	b2d2      	uxtb	r2, r2
 800ddae:	701a      	strb	r2, [r3, #0]
}
 800ddb0:	bf00      	nop
 800ddb2:	370c      	adds	r7, #12
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b083      	sub	sp, #12
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	1c5a      	adds	r2, r3, #1
 800ddca:	607a      	str	r2, [r7, #4]
 800ddcc:	683a      	ldr	r2, [r7, #0]
 800ddce:	b2d2      	uxtb	r2, r2
 800ddd0:	701a      	strb	r2, [r3, #0]
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	0a1b      	lsrs	r3, r3, #8
 800ddd6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	1c5a      	adds	r2, r3, #1
 800dddc:	607a      	str	r2, [r7, #4]
 800ddde:	683a      	ldr	r2, [r7, #0]
 800dde0:	b2d2      	uxtb	r2, r2
 800dde2:	701a      	strb	r2, [r3, #0]
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	0a1b      	lsrs	r3, r3, #8
 800dde8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	1c5a      	adds	r2, r3, #1
 800ddee:	607a      	str	r2, [r7, #4]
 800ddf0:	683a      	ldr	r2, [r7, #0]
 800ddf2:	b2d2      	uxtb	r2, r2
 800ddf4:	701a      	strb	r2, [r3, #0]
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	0a1b      	lsrs	r3, r3, #8
 800ddfa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	1c5a      	adds	r2, r3, #1
 800de00:	607a      	str	r2, [r7, #4]
 800de02:	683a      	ldr	r2, [r7, #0]
 800de04:	b2d2      	uxtb	r2, r2
 800de06:	701a      	strb	r2, [r3, #0]
}
 800de08:	bf00      	nop
 800de0a:	370c      	adds	r7, #12
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800de14:	b480      	push	{r7}
 800de16:	b087      	sub	sp, #28
 800de18:	af00      	add	r7, sp, #0
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	60b9      	str	r1, [r7, #8]
 800de1e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00d      	beq.n	800de4a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800de2e:	693a      	ldr	r2, [r7, #16]
 800de30:	1c53      	adds	r3, r2, #1
 800de32:	613b      	str	r3, [r7, #16]
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	1c59      	adds	r1, r3, #1
 800de38:	6179      	str	r1, [r7, #20]
 800de3a:	7812      	ldrb	r2, [r2, #0]
 800de3c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	3b01      	subs	r3, #1
 800de42:	607b      	str	r3, [r7, #4]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d1f1      	bne.n	800de2e <mem_cpy+0x1a>
	}
}
 800de4a:	bf00      	nop
 800de4c:	371c      	adds	r7, #28
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr

0800de56 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800de56:	b480      	push	{r7}
 800de58:	b087      	sub	sp, #28
 800de5a:	af00      	add	r7, sp, #0
 800de5c:	60f8      	str	r0, [r7, #12]
 800de5e:	60b9      	str	r1, [r7, #8]
 800de60:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	1c5a      	adds	r2, r3, #1
 800de6a:	617a      	str	r2, [r7, #20]
 800de6c:	68ba      	ldr	r2, [r7, #8]
 800de6e:	b2d2      	uxtb	r2, r2
 800de70:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	3b01      	subs	r3, #1
 800de76:	607b      	str	r3, [r7, #4]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d1f3      	bne.n	800de66 <mem_set+0x10>
}
 800de7e:	bf00      	nop
 800de80:	bf00      	nop
 800de82:	371c      	adds	r7, #28
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800de8c:	b480      	push	{r7}
 800de8e:	b089      	sub	sp, #36	@ 0x24
 800de90:	af00      	add	r7, sp, #0
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	61fb      	str	r3, [r7, #28]
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800dea0:	2300      	movs	r3, #0
 800dea2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800dea4:	69fb      	ldr	r3, [r7, #28]
 800dea6:	1c5a      	adds	r2, r3, #1
 800dea8:	61fa      	str	r2, [r7, #28]
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	4619      	mov	r1, r3
 800deae:	69bb      	ldr	r3, [r7, #24]
 800deb0:	1c5a      	adds	r2, r3, #1
 800deb2:	61ba      	str	r2, [r7, #24]
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	1acb      	subs	r3, r1, r3
 800deb8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	3b01      	subs	r3, #1
 800debe:	607b      	str	r3, [r7, #4]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d002      	beq.n	800decc <mem_cmp+0x40>
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d0eb      	beq.n	800dea4 <mem_cmp+0x18>

	return r;
 800decc:	697b      	ldr	r3, [r7, #20]
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3724      	adds	r7, #36	@ 0x24
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr

0800deda <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800deda:	b480      	push	{r7}
 800dedc:	b083      	sub	sp, #12
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
 800dee2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800dee4:	e002      	b.n	800deec <chk_chr+0x12>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	3301      	adds	r3, #1
 800deea:	607b      	str	r3, [r7, #4]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d005      	beq.n	800df00 <chk_chr+0x26>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	461a      	mov	r2, r3
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	4293      	cmp	r3, r2
 800defe:	d1f2      	bne.n	800dee6 <chk_chr+0xc>
	return *str;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	781b      	ldrb	r3, [r3, #0]
}
 800df04:	4618      	mov	r0, r3
 800df06:	370c      	adds	r7, #12
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800df10:	b480      	push	{r7}
 800df12:	b085      	sub	sp, #20
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800df1a:	2300      	movs	r3, #0
 800df1c:	60bb      	str	r3, [r7, #8]
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	60fb      	str	r3, [r7, #12]
 800df22:	e029      	b.n	800df78 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800df24:	4a27      	ldr	r2, [pc, #156]	@ (800dfc4 <chk_lock+0xb4>)
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	011b      	lsls	r3, r3, #4
 800df2a:	4413      	add	r3, r2
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d01d      	beq.n	800df6e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800df32:	4a24      	ldr	r2, [pc, #144]	@ (800dfc4 <chk_lock+0xb4>)
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	011b      	lsls	r3, r3, #4
 800df38:	4413      	add	r3, r2
 800df3a:	681a      	ldr	r2, [r3, #0]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	429a      	cmp	r2, r3
 800df42:	d116      	bne.n	800df72 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800df44:	4a1f      	ldr	r2, [pc, #124]	@ (800dfc4 <chk_lock+0xb4>)
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	011b      	lsls	r3, r3, #4
 800df4a:	4413      	add	r3, r2
 800df4c:	3304      	adds	r3, #4
 800df4e:	681a      	ldr	r2, [r3, #0]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800df54:	429a      	cmp	r2, r3
 800df56:	d10c      	bne.n	800df72 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800df58:	4a1a      	ldr	r2, [pc, #104]	@ (800dfc4 <chk_lock+0xb4>)
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	011b      	lsls	r3, r3, #4
 800df5e:	4413      	add	r3, r2
 800df60:	3308      	adds	r3, #8
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800df68:	429a      	cmp	r2, r3
 800df6a:	d102      	bne.n	800df72 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800df6c:	e007      	b.n	800df7e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800df6e:	2301      	movs	r3, #1
 800df70:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	3301      	adds	r3, #1
 800df76:	60fb      	str	r3, [r7, #12]
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2b01      	cmp	r3, #1
 800df7c:	d9d2      	bls.n	800df24 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	2b02      	cmp	r3, #2
 800df82:	d109      	bne.n	800df98 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d102      	bne.n	800df90 <chk_lock+0x80>
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	2b02      	cmp	r3, #2
 800df8e:	d101      	bne.n	800df94 <chk_lock+0x84>
 800df90:	2300      	movs	r3, #0
 800df92:	e010      	b.n	800dfb6 <chk_lock+0xa6>
 800df94:	2312      	movs	r3, #18
 800df96:	e00e      	b.n	800dfb6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d108      	bne.n	800dfb0 <chk_lock+0xa0>
 800df9e:	4a09      	ldr	r2, [pc, #36]	@ (800dfc4 <chk_lock+0xb4>)
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	011b      	lsls	r3, r3, #4
 800dfa4:	4413      	add	r3, r2
 800dfa6:	330c      	adds	r3, #12
 800dfa8:	881b      	ldrh	r3, [r3, #0]
 800dfaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dfae:	d101      	bne.n	800dfb4 <chk_lock+0xa4>
 800dfb0:	2310      	movs	r3, #16
 800dfb2:	e000      	b.n	800dfb6 <chk_lock+0xa6>
 800dfb4:	2300      	movs	r3, #0
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3714      	adds	r7, #20
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc0:	4770      	bx	lr
 800dfc2:	bf00      	nop
 800dfc4:	20018954 	.word	0x20018954

0800dfc8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b083      	sub	sp, #12
 800dfcc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	607b      	str	r3, [r7, #4]
 800dfd2:	e002      	b.n	800dfda <enq_lock+0x12>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	607b      	str	r3, [r7, #4]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d806      	bhi.n	800dfee <enq_lock+0x26>
 800dfe0:	4a09      	ldr	r2, [pc, #36]	@ (800e008 <enq_lock+0x40>)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	011b      	lsls	r3, r3, #4
 800dfe6:	4413      	add	r3, r2
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d1f2      	bne.n	800dfd4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2b02      	cmp	r3, #2
 800dff2:	bf14      	ite	ne
 800dff4:	2301      	movne	r3, #1
 800dff6:	2300      	moveq	r3, #0
 800dff8:	b2db      	uxtb	r3, r3
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	370c      	adds	r7, #12
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr
 800e006:	bf00      	nop
 800e008:	20018954 	.word	0x20018954

0800e00c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b085      	sub	sp, #20
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e016:	2300      	movs	r3, #0
 800e018:	60fb      	str	r3, [r7, #12]
 800e01a:	e01f      	b.n	800e05c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e01c:	4a41      	ldr	r2, [pc, #260]	@ (800e124 <inc_lock+0x118>)
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	011b      	lsls	r3, r3, #4
 800e022:	4413      	add	r3, r2
 800e024:	681a      	ldr	r2, [r3, #0]
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d113      	bne.n	800e056 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e02e:	4a3d      	ldr	r2, [pc, #244]	@ (800e124 <inc_lock+0x118>)
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	011b      	lsls	r3, r3, #4
 800e034:	4413      	add	r3, r2
 800e036:	3304      	adds	r3, #4
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e03e:	429a      	cmp	r2, r3
 800e040:	d109      	bne.n	800e056 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e042:	4a38      	ldr	r2, [pc, #224]	@ (800e124 <inc_lock+0x118>)
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	011b      	lsls	r3, r3, #4
 800e048:	4413      	add	r3, r2
 800e04a:	3308      	adds	r3, #8
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e052:	429a      	cmp	r2, r3
 800e054:	d006      	beq.n	800e064 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	3301      	adds	r3, #1
 800e05a:	60fb      	str	r3, [r7, #12]
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d9dc      	bls.n	800e01c <inc_lock+0x10>
 800e062:	e000      	b.n	800e066 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e064:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2b02      	cmp	r3, #2
 800e06a:	d132      	bne.n	800e0d2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e06c:	2300      	movs	r3, #0
 800e06e:	60fb      	str	r3, [r7, #12]
 800e070:	e002      	b.n	800e078 <inc_lock+0x6c>
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	3301      	adds	r3, #1
 800e076:	60fb      	str	r3, [r7, #12]
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2b01      	cmp	r3, #1
 800e07c:	d806      	bhi.n	800e08c <inc_lock+0x80>
 800e07e:	4a29      	ldr	r2, [pc, #164]	@ (800e124 <inc_lock+0x118>)
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	011b      	lsls	r3, r3, #4
 800e084:	4413      	add	r3, r2
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d1f2      	bne.n	800e072 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2b02      	cmp	r3, #2
 800e090:	d101      	bne.n	800e096 <inc_lock+0x8a>
 800e092:	2300      	movs	r3, #0
 800e094:	e040      	b.n	800e118 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681a      	ldr	r2, [r3, #0]
 800e09a:	4922      	ldr	r1, [pc, #136]	@ (800e124 <inc_lock+0x118>)
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	011b      	lsls	r3, r3, #4
 800e0a0:	440b      	add	r3, r1
 800e0a2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	689a      	ldr	r2, [r3, #8]
 800e0a8:	491e      	ldr	r1, [pc, #120]	@ (800e124 <inc_lock+0x118>)
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	011b      	lsls	r3, r3, #4
 800e0ae:	440b      	add	r3, r1
 800e0b0:	3304      	adds	r3, #4
 800e0b2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	695a      	ldr	r2, [r3, #20]
 800e0b8:	491a      	ldr	r1, [pc, #104]	@ (800e124 <inc_lock+0x118>)
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	011b      	lsls	r3, r3, #4
 800e0be:	440b      	add	r3, r1
 800e0c0:	3308      	adds	r3, #8
 800e0c2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e0c4:	4a17      	ldr	r2, [pc, #92]	@ (800e124 <inc_lock+0x118>)
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	011b      	lsls	r3, r3, #4
 800e0ca:	4413      	add	r3, r2
 800e0cc:	330c      	adds	r3, #12
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d009      	beq.n	800e0ec <inc_lock+0xe0>
 800e0d8:	4a12      	ldr	r2, [pc, #72]	@ (800e124 <inc_lock+0x118>)
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	011b      	lsls	r3, r3, #4
 800e0de:	4413      	add	r3, r2
 800e0e0:	330c      	adds	r3, #12
 800e0e2:	881b      	ldrh	r3, [r3, #0]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d001      	beq.n	800e0ec <inc_lock+0xe0>
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	e015      	b.n	800e118 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d108      	bne.n	800e104 <inc_lock+0xf8>
 800e0f2:	4a0c      	ldr	r2, [pc, #48]	@ (800e124 <inc_lock+0x118>)
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	011b      	lsls	r3, r3, #4
 800e0f8:	4413      	add	r3, r2
 800e0fa:	330c      	adds	r3, #12
 800e0fc:	881b      	ldrh	r3, [r3, #0]
 800e0fe:	3301      	adds	r3, #1
 800e100:	b29a      	uxth	r2, r3
 800e102:	e001      	b.n	800e108 <inc_lock+0xfc>
 800e104:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e108:	4906      	ldr	r1, [pc, #24]	@ (800e124 <inc_lock+0x118>)
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	011b      	lsls	r3, r3, #4
 800e10e:	440b      	add	r3, r1
 800e110:	330c      	adds	r3, #12
 800e112:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	3301      	adds	r3, #1
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3714      	adds	r7, #20
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr
 800e124:	20018954 	.word	0x20018954

0800e128 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e128:	b480      	push	{r7}
 800e12a:	b085      	sub	sp, #20
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	3b01      	subs	r3, #1
 800e134:	607b      	str	r3, [r7, #4]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d825      	bhi.n	800e188 <dec_lock+0x60>
		n = Files[i].ctr;
 800e13c:	4a17      	ldr	r2, [pc, #92]	@ (800e19c <dec_lock+0x74>)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	011b      	lsls	r3, r3, #4
 800e142:	4413      	add	r3, r2
 800e144:	330c      	adds	r3, #12
 800e146:	881b      	ldrh	r3, [r3, #0]
 800e148:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e14a:	89fb      	ldrh	r3, [r7, #14]
 800e14c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e150:	d101      	bne.n	800e156 <dec_lock+0x2e>
 800e152:	2300      	movs	r3, #0
 800e154:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e156:	89fb      	ldrh	r3, [r7, #14]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d002      	beq.n	800e162 <dec_lock+0x3a>
 800e15c:	89fb      	ldrh	r3, [r7, #14]
 800e15e:	3b01      	subs	r3, #1
 800e160:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e162:	4a0e      	ldr	r2, [pc, #56]	@ (800e19c <dec_lock+0x74>)
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	011b      	lsls	r3, r3, #4
 800e168:	4413      	add	r3, r2
 800e16a:	330c      	adds	r3, #12
 800e16c:	89fa      	ldrh	r2, [r7, #14]
 800e16e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e170:	89fb      	ldrh	r3, [r7, #14]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d105      	bne.n	800e182 <dec_lock+0x5a>
 800e176:	4a09      	ldr	r2, [pc, #36]	@ (800e19c <dec_lock+0x74>)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	011b      	lsls	r3, r3, #4
 800e17c:	4413      	add	r3, r2
 800e17e:	2200      	movs	r2, #0
 800e180:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e182:	2300      	movs	r3, #0
 800e184:	737b      	strb	r3, [r7, #13]
 800e186:	e001      	b.n	800e18c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e188:	2302      	movs	r3, #2
 800e18a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e18c:	7b7b      	ldrb	r3, [r7, #13]
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3714      	adds	r7, #20
 800e192:	46bd      	mov	sp, r7
 800e194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e198:	4770      	bx	lr
 800e19a:	bf00      	nop
 800e19c:	20018954 	.word	0x20018954

0800e1a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	b085      	sub	sp, #20
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	60fb      	str	r3, [r7, #12]
 800e1ac:	e010      	b.n	800e1d0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e1ae:	4a0d      	ldr	r2, [pc, #52]	@ (800e1e4 <clear_lock+0x44>)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	011b      	lsls	r3, r3, #4
 800e1b4:	4413      	add	r3, r2
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	687a      	ldr	r2, [r7, #4]
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d105      	bne.n	800e1ca <clear_lock+0x2a>
 800e1be:	4a09      	ldr	r2, [pc, #36]	@ (800e1e4 <clear_lock+0x44>)
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	011b      	lsls	r3, r3, #4
 800e1c4:	4413      	add	r3, r2
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	60fb      	str	r3, [r7, #12]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2b01      	cmp	r3, #1
 800e1d4:	d9eb      	bls.n	800e1ae <clear_lock+0xe>
	}
}
 800e1d6:	bf00      	nop
 800e1d8:	bf00      	nop
 800e1da:	3714      	adds	r7, #20
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr
 800e1e4:	20018954 	.word	0x20018954

0800e1e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b086      	sub	sp, #24
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	78db      	ldrb	r3, [r3, #3]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d034      	beq.n	800e266 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e200:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	7858      	ldrb	r0, [r3, #1]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800e20c:	2301      	movs	r3, #1
 800e20e:	697a      	ldr	r2, [r7, #20]
 800e210:	f7ff fd38 	bl	800dc84 <disk_write>
 800e214:	4603      	mov	r3, r0
 800e216:	2b00      	cmp	r3, #0
 800e218:	d002      	beq.n	800e220 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e21a:	2301      	movs	r3, #1
 800e21c:	73fb      	strb	r3, [r7, #15]
 800e21e:	e022      	b.n	800e266 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2200      	movs	r2, #0
 800e224:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e22a:	697a      	ldr	r2, [r7, #20]
 800e22c:	1ad2      	subs	r2, r2, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	69db      	ldr	r3, [r3, #28]
 800e232:	429a      	cmp	r2, r3
 800e234:	d217      	bcs.n	800e266 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	789b      	ldrb	r3, [r3, #2]
 800e23a:	613b      	str	r3, [r7, #16]
 800e23c:	e010      	b.n	800e260 <sync_window+0x78>
					wsect += fs->fsize;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	69db      	ldr	r3, [r3, #28]
 800e242:	697a      	ldr	r2, [r7, #20]
 800e244:	4413      	add	r3, r2
 800e246:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	7858      	ldrb	r0, [r3, #1]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800e252:	2301      	movs	r3, #1
 800e254:	697a      	ldr	r2, [r7, #20]
 800e256:	f7ff fd15 	bl	800dc84 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	3b01      	subs	r3, #1
 800e25e:	613b      	str	r3, [r7, #16]
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	2b01      	cmp	r3, #1
 800e264:	d8eb      	bhi.n	800e23e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e266:	7bfb      	ldrb	r3, [r7, #15]
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3718      	adds	r7, #24
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
 800e278:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e27a:	2300      	movs	r3, #0
 800e27c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e282:	683a      	ldr	r2, [r7, #0]
 800e284:	429a      	cmp	r2, r3
 800e286:	d01b      	beq.n	800e2c0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f7ff ffad 	bl	800e1e8 <sync_window>
 800e28e:	4603      	mov	r3, r0
 800e290:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e292:	7bfb      	ldrb	r3, [r7, #15]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d113      	bne.n	800e2c0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	7858      	ldrb	r0, [r3, #1]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	683a      	ldr	r2, [r7, #0]
 800e2a6:	f7ff fccd 	bl	800dc44 <disk_read>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d004      	beq.n	800e2ba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e2b4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	683a      	ldr	r2, [r7, #0]
 800e2be:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800e2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3710      	adds	r7, #16
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
	...

0800e2cc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b084      	sub	sp, #16
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f7ff ff87 	bl	800e1e8 <sync_window>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e2de:	7bfb      	ldrb	r3, [r7, #15]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d158      	bne.n	800e396 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	2b03      	cmp	r3, #3
 800e2ea:	d148      	bne.n	800e37e <sync_fs+0xb2>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	791b      	ldrb	r3, [r3, #4]
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d144      	bne.n	800e37e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	3334      	adds	r3, #52	@ 0x34
 800e2f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e2fc:	2100      	movs	r1, #0
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7ff fda9 	bl	800de56 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	3334      	adds	r3, #52	@ 0x34
 800e308:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e30c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e310:	4618      	mov	r0, r3
 800e312:	f7ff fd38 	bl	800dd86 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	3334      	adds	r3, #52	@ 0x34
 800e31a:	4921      	ldr	r1, [pc, #132]	@ (800e3a0 <sync_fs+0xd4>)
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7ff fd4d 	bl	800ddbc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	3334      	adds	r3, #52	@ 0x34
 800e326:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e32a:	491e      	ldr	r1, [pc, #120]	@ (800e3a4 <sync_fs+0xd8>)
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7ff fd45 	bl	800ddbc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	3334      	adds	r3, #52	@ 0x34
 800e336:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	695b      	ldr	r3, [r3, #20]
 800e33e:	4619      	mov	r1, r3
 800e340:	4610      	mov	r0, r2
 800e342:	f7ff fd3b 	bl	800ddbc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	3334      	adds	r3, #52	@ 0x34
 800e34a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	691b      	ldr	r3, [r3, #16]
 800e352:	4619      	mov	r1, r3
 800e354:	4610      	mov	r0, r2
 800e356:	f7ff fd31 	bl	800ddbc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6a1b      	ldr	r3, [r3, #32]
 800e35e:	1c5a      	adds	r2, r3, #1
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	7858      	ldrb	r0, [r3, #1]
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e372:	2301      	movs	r3, #1
 800e374:	f7ff fc86 	bl	800dc84 <disk_write>
			fs->fsi_flag = 0;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2200      	movs	r2, #0
 800e37c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	785b      	ldrb	r3, [r3, #1]
 800e382:	2200      	movs	r2, #0
 800e384:	2100      	movs	r1, #0
 800e386:	4618      	mov	r0, r3
 800e388:	f7ff fc9c 	bl	800dcc4 <disk_ioctl>
 800e38c:	4603      	mov	r3, r0
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d001      	beq.n	800e396 <sync_fs+0xca>
 800e392:	2301      	movs	r3, #1
 800e394:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e396:	7bfb      	ldrb	r3, [r7, #15]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3710      	adds	r7, #16
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	41615252 	.word	0x41615252
 800e3a4:	61417272 	.word	0x61417272

0800e3a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b083      	sub	sp, #12
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	3b02      	subs	r3, #2
 800e3b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	699b      	ldr	r3, [r3, #24]
 800e3bc:	3b02      	subs	r3, #2
 800e3be:	683a      	ldr	r2, [r7, #0]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d301      	bcc.n	800e3c8 <clust2sect+0x20>
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	e008      	b.n	800e3da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	895b      	ldrh	r3, [r3, #10]
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	fb03 f202 	mul.w	r2, r3, r2
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3d8:	4413      	add	r3, r2
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	370c      	adds	r7, #12
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e4:	4770      	bx	lr

0800e3e6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e3e6:	b580      	push	{r7, lr}
 800e3e8:	b086      	sub	sp, #24
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	6078      	str	r0, [r7, #4]
 800e3ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d904      	bls.n	800e406 <get_fat+0x20>
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	699b      	ldr	r3, [r3, #24]
 800e400:	683a      	ldr	r2, [r7, #0]
 800e402:	429a      	cmp	r2, r3
 800e404:	d302      	bcc.n	800e40c <get_fat+0x26>
		val = 1;	/* Internal error */
 800e406:	2301      	movs	r3, #1
 800e408:	617b      	str	r3, [r7, #20]
 800e40a:	e08e      	b.n	800e52a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e40c:	f04f 33ff 	mov.w	r3, #4294967295
 800e410:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	2b03      	cmp	r3, #3
 800e418:	d061      	beq.n	800e4de <get_fat+0xf8>
 800e41a:	2b03      	cmp	r3, #3
 800e41c:	dc7b      	bgt.n	800e516 <get_fat+0x130>
 800e41e:	2b01      	cmp	r3, #1
 800e420:	d002      	beq.n	800e428 <get_fat+0x42>
 800e422:	2b02      	cmp	r3, #2
 800e424:	d041      	beq.n	800e4aa <get_fat+0xc4>
 800e426:	e076      	b.n	800e516 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	60fb      	str	r3, [r7, #12]
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	085b      	lsrs	r3, r3, #1
 800e430:	68fa      	ldr	r2, [r7, #12]
 800e432:	4413      	add	r3, r2
 800e434:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	0a5b      	lsrs	r3, r3, #9
 800e43e:	4413      	add	r3, r2
 800e440:	4619      	mov	r1, r3
 800e442:	6938      	ldr	r0, [r7, #16]
 800e444:	f7ff ff14 	bl	800e270 <move_window>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d166      	bne.n	800e51c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	1c5a      	adds	r2, r3, #1
 800e452:	60fa      	str	r2, [r7, #12]
 800e454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e458:	693a      	ldr	r2, [r7, #16]
 800e45a:	4413      	add	r3, r2
 800e45c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e460:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	0a5b      	lsrs	r3, r3, #9
 800e46a:	4413      	add	r3, r2
 800e46c:	4619      	mov	r1, r3
 800e46e:	6938      	ldr	r0, [r7, #16]
 800e470:	f7ff fefe 	bl	800e270 <move_window>
 800e474:	4603      	mov	r3, r0
 800e476:	2b00      	cmp	r3, #0
 800e478:	d152      	bne.n	800e520 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e480:	693a      	ldr	r2, [r7, #16]
 800e482:	4413      	add	r3, r2
 800e484:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e488:	021b      	lsls	r3, r3, #8
 800e48a:	68ba      	ldr	r2, [r7, #8]
 800e48c:	4313      	orrs	r3, r2
 800e48e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	f003 0301 	and.w	r3, r3, #1
 800e496:	2b00      	cmp	r3, #0
 800e498:	d002      	beq.n	800e4a0 <get_fat+0xba>
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	091b      	lsrs	r3, r3, #4
 800e49e:	e002      	b.n	800e4a6 <get_fat+0xc0>
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e4a6:	617b      	str	r3, [r7, #20]
			break;
 800e4a8:	e03f      	b.n	800e52a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	0a1b      	lsrs	r3, r3, #8
 800e4b2:	4413      	add	r3, r2
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	6938      	ldr	r0, [r7, #16]
 800e4b8:	f7ff feda 	bl	800e270 <move_window>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d130      	bne.n	800e524 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	005b      	lsls	r3, r3, #1
 800e4cc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e4d0:	4413      	add	r3, r2
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7ff fc1c 	bl	800dd10 <ld_word>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	617b      	str	r3, [r7, #20]
			break;
 800e4dc:	e025      	b.n	800e52a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	09db      	lsrs	r3, r3, #7
 800e4e6:	4413      	add	r3, r2
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	6938      	ldr	r0, [r7, #16]
 800e4ec:	f7ff fec0 	bl	800e270 <move_window>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d118      	bne.n	800e528 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e504:	4413      	add	r3, r2
 800e506:	4618      	mov	r0, r3
 800e508:	f7ff fc1a 	bl	800dd40 <ld_dword>
 800e50c:	4603      	mov	r3, r0
 800e50e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e512:	617b      	str	r3, [r7, #20]
			break;
 800e514:	e009      	b.n	800e52a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e516:	2301      	movs	r3, #1
 800e518:	617b      	str	r3, [r7, #20]
 800e51a:	e006      	b.n	800e52a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e51c:	bf00      	nop
 800e51e:	e004      	b.n	800e52a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e520:	bf00      	nop
 800e522:	e002      	b.n	800e52a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e524:	bf00      	nop
 800e526:	e000      	b.n	800e52a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e528:	bf00      	nop
		}
	}

	return val;
 800e52a:	697b      	ldr	r3, [r7, #20]
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3718      	adds	r7, #24
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}

0800e534 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e534:	b590      	push	{r4, r7, lr}
 800e536:	b089      	sub	sp, #36	@ 0x24
 800e538:	af00      	add	r7, sp, #0
 800e53a:	60f8      	str	r0, [r7, #12]
 800e53c:	60b9      	str	r1, [r7, #8]
 800e53e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e540:	2302      	movs	r3, #2
 800e542:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	2b01      	cmp	r3, #1
 800e548:	f240 80d9 	bls.w	800e6fe <put_fat+0x1ca>
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	699b      	ldr	r3, [r3, #24]
 800e550:	68ba      	ldr	r2, [r7, #8]
 800e552:	429a      	cmp	r2, r3
 800e554:	f080 80d3 	bcs.w	800e6fe <put_fat+0x1ca>
		switch (fs->fs_type) {
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	781b      	ldrb	r3, [r3, #0]
 800e55c:	2b03      	cmp	r3, #3
 800e55e:	f000 8096 	beq.w	800e68e <put_fat+0x15a>
 800e562:	2b03      	cmp	r3, #3
 800e564:	f300 80cb 	bgt.w	800e6fe <put_fat+0x1ca>
 800e568:	2b01      	cmp	r3, #1
 800e56a:	d002      	beq.n	800e572 <put_fat+0x3e>
 800e56c:	2b02      	cmp	r3, #2
 800e56e:	d06e      	beq.n	800e64e <put_fat+0x11a>
 800e570:	e0c5      	b.n	800e6fe <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	61bb      	str	r3, [r7, #24]
 800e576:	69bb      	ldr	r3, [r7, #24]
 800e578:	085b      	lsrs	r3, r3, #1
 800e57a:	69ba      	ldr	r2, [r7, #24]
 800e57c:	4413      	add	r3, r2
 800e57e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e584:	69bb      	ldr	r3, [r7, #24]
 800e586:	0a5b      	lsrs	r3, r3, #9
 800e588:	4413      	add	r3, r2
 800e58a:	4619      	mov	r1, r3
 800e58c:	68f8      	ldr	r0, [r7, #12]
 800e58e:	f7ff fe6f 	bl	800e270 <move_window>
 800e592:	4603      	mov	r3, r0
 800e594:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e596:	7ffb      	ldrb	r3, [r7, #31]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f040 80a9 	bne.w	800e6f0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e5a4:	69bb      	ldr	r3, [r7, #24]
 800e5a6:	1c59      	adds	r1, r3, #1
 800e5a8:	61b9      	str	r1, [r7, #24]
 800e5aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5ae:	4413      	add	r3, r2
 800e5b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	f003 0301 	and.w	r3, r3, #1
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d00d      	beq.n	800e5d8 <put_fat+0xa4>
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	b25b      	sxtb	r3, r3
 800e5c2:	f003 030f 	and.w	r3, r3, #15
 800e5c6:	b25a      	sxtb	r2, r3
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	b2db      	uxtb	r3, r3
 800e5cc:	011b      	lsls	r3, r3, #4
 800e5ce:	b25b      	sxtb	r3, r3
 800e5d0:	4313      	orrs	r3, r2
 800e5d2:	b25b      	sxtb	r3, r3
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	e001      	b.n	800e5dc <put_fat+0xa8>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	b2db      	uxtb	r3, r3
 800e5dc:	697a      	ldr	r2, [r7, #20]
 800e5de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e5ea:	69bb      	ldr	r3, [r7, #24]
 800e5ec:	0a5b      	lsrs	r3, r3, #9
 800e5ee:	4413      	add	r3, r2
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	68f8      	ldr	r0, [r7, #12]
 800e5f4:	f7ff fe3c 	bl	800e270 <move_window>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e5fc:	7ffb      	ldrb	r3, [r7, #31]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d178      	bne.n	800e6f4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e608:	69bb      	ldr	r3, [r7, #24]
 800e60a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e60e:	4413      	add	r3, r2
 800e610:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	f003 0301 	and.w	r3, r3, #1
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d003      	beq.n	800e624 <put_fat+0xf0>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	091b      	lsrs	r3, r3, #4
 800e620:	b2db      	uxtb	r3, r3
 800e622:	e00e      	b.n	800e642 <put_fat+0x10e>
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	b25b      	sxtb	r3, r3
 800e62a:	f023 030f 	bic.w	r3, r3, #15
 800e62e:	b25a      	sxtb	r2, r3
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	0a1b      	lsrs	r3, r3, #8
 800e634:	b25b      	sxtb	r3, r3
 800e636:	f003 030f 	and.w	r3, r3, #15
 800e63a:	b25b      	sxtb	r3, r3
 800e63c:	4313      	orrs	r3, r2
 800e63e:	b25b      	sxtb	r3, r3
 800e640:	b2db      	uxtb	r3, r3
 800e642:	697a      	ldr	r2, [r7, #20]
 800e644:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	2201      	movs	r2, #1
 800e64a:	70da      	strb	r2, [r3, #3]
			break;
 800e64c:	e057      	b.n	800e6fe <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	0a1b      	lsrs	r3, r3, #8
 800e656:	4413      	add	r3, r2
 800e658:	4619      	mov	r1, r3
 800e65a:	68f8      	ldr	r0, [r7, #12]
 800e65c:	f7ff fe08 	bl	800e270 <move_window>
 800e660:	4603      	mov	r3, r0
 800e662:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e664:	7ffb      	ldrb	r3, [r7, #31]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d146      	bne.n	800e6f8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	005b      	lsls	r3, r3, #1
 800e674:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e678:	4413      	add	r3, r2
 800e67a:	687a      	ldr	r2, [r7, #4]
 800e67c:	b292      	uxth	r2, r2
 800e67e:	4611      	mov	r1, r2
 800e680:	4618      	mov	r0, r3
 800e682:	f7ff fb80 	bl	800dd86 <st_word>
			fs->wflag = 1;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2201      	movs	r2, #1
 800e68a:	70da      	strb	r2, [r3, #3]
			break;
 800e68c:	e037      	b.n	800e6fe <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	09db      	lsrs	r3, r3, #7
 800e696:	4413      	add	r3, r2
 800e698:	4619      	mov	r1, r3
 800e69a:	68f8      	ldr	r0, [r7, #12]
 800e69c:	f7ff fde8 	bl	800e270 <move_window>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e6a4:	7ffb      	ldrb	r3, [r7, #31]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d128      	bne.n	800e6fc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	009b      	lsls	r3, r3, #2
 800e6ba:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e6be:	4413      	add	r3, r2
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7ff fb3d 	bl	800dd40 <ld_dword>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800e6cc:	4323      	orrs	r3, r4
 800e6ce:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	009b      	lsls	r3, r3, #2
 800e6da:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e6de:	4413      	add	r3, r2
 800e6e0:	6879      	ldr	r1, [r7, #4]
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7ff fb6a 	bl	800ddbc <st_dword>
			fs->wflag = 1;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	70da      	strb	r2, [r3, #3]
			break;
 800e6ee:	e006      	b.n	800e6fe <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e6f0:	bf00      	nop
 800e6f2:	e004      	b.n	800e6fe <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e6f4:	bf00      	nop
 800e6f6:	e002      	b.n	800e6fe <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e6f8:	bf00      	nop
 800e6fa:	e000      	b.n	800e6fe <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e6fc:	bf00      	nop
		}
	}
	return res;
 800e6fe:	7ffb      	ldrb	r3, [r7, #31]
}
 800e700:	4618      	mov	r0, r3
 800e702:	3724      	adds	r7, #36	@ 0x24
 800e704:	46bd      	mov	sp, r7
 800e706:	bd90      	pop	{r4, r7, pc}

0800e708 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b088      	sub	sp, #32
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	60f8      	str	r0, [r7, #12]
 800e710:	60b9      	str	r1, [r7, #8]
 800e712:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e714:	2300      	movs	r3, #0
 800e716:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	2b01      	cmp	r3, #1
 800e722:	d904      	bls.n	800e72e <remove_chain+0x26>
 800e724:	69bb      	ldr	r3, [r7, #24]
 800e726:	699b      	ldr	r3, [r3, #24]
 800e728:	68ba      	ldr	r2, [r7, #8]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d301      	bcc.n	800e732 <remove_chain+0x2a>
 800e72e:	2302      	movs	r3, #2
 800e730:	e04b      	b.n	800e7ca <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d00c      	beq.n	800e752 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e738:	f04f 32ff 	mov.w	r2, #4294967295
 800e73c:	6879      	ldr	r1, [r7, #4]
 800e73e:	69b8      	ldr	r0, [r7, #24]
 800e740:	f7ff fef8 	bl	800e534 <put_fat>
 800e744:	4603      	mov	r3, r0
 800e746:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e748:	7ffb      	ldrb	r3, [r7, #31]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d001      	beq.n	800e752 <remove_chain+0x4a>
 800e74e:	7ffb      	ldrb	r3, [r7, #31]
 800e750:	e03b      	b.n	800e7ca <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e752:	68b9      	ldr	r1, [r7, #8]
 800e754:	68f8      	ldr	r0, [r7, #12]
 800e756:	f7ff fe46 	bl	800e3e6 <get_fat>
 800e75a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d031      	beq.n	800e7c6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	2b01      	cmp	r3, #1
 800e766:	d101      	bne.n	800e76c <remove_chain+0x64>
 800e768:	2302      	movs	r3, #2
 800e76a:	e02e      	b.n	800e7ca <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e772:	d101      	bne.n	800e778 <remove_chain+0x70>
 800e774:	2301      	movs	r3, #1
 800e776:	e028      	b.n	800e7ca <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e778:	2200      	movs	r2, #0
 800e77a:	68b9      	ldr	r1, [r7, #8]
 800e77c:	69b8      	ldr	r0, [r7, #24]
 800e77e:	f7ff fed9 	bl	800e534 <put_fat>
 800e782:	4603      	mov	r3, r0
 800e784:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e786:	7ffb      	ldrb	r3, [r7, #31]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d001      	beq.n	800e790 <remove_chain+0x88>
 800e78c:	7ffb      	ldrb	r3, [r7, #31]
 800e78e:	e01c      	b.n	800e7ca <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e790:	69bb      	ldr	r3, [r7, #24]
 800e792:	695a      	ldr	r2, [r3, #20]
 800e794:	69bb      	ldr	r3, [r7, #24]
 800e796:	699b      	ldr	r3, [r3, #24]
 800e798:	3b02      	subs	r3, #2
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d20b      	bcs.n	800e7b6 <remove_chain+0xae>
			fs->free_clst++;
 800e79e:	69bb      	ldr	r3, [r7, #24]
 800e7a0:	695b      	ldr	r3, [r3, #20]
 800e7a2:	1c5a      	adds	r2, r3, #1
 800e7a4:	69bb      	ldr	r3, [r7, #24]
 800e7a6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e7a8:	69bb      	ldr	r3, [r7, #24]
 800e7aa:	791b      	ldrb	r3, [r3, #4]
 800e7ac:	f043 0301 	orr.w	r3, r3, #1
 800e7b0:	b2da      	uxtb	r2, r3
 800e7b2:	69bb      	ldr	r3, [r7, #24]
 800e7b4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	699b      	ldr	r3, [r3, #24]
 800e7be:	68ba      	ldr	r2, [r7, #8]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d3c6      	bcc.n	800e752 <remove_chain+0x4a>
 800e7c4:	e000      	b.n	800e7c8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e7c6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e7c8:	2300      	movs	r3, #0
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3720      	adds	r7, #32
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}

0800e7d2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e7d2:	b580      	push	{r7, lr}
 800e7d4:	b088      	sub	sp, #32
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	6078      	str	r0, [r7, #4]
 800e7da:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d10d      	bne.n	800e804 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	691b      	ldr	r3, [r3, #16]
 800e7ec:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e7ee:	69bb      	ldr	r3, [r7, #24]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d004      	beq.n	800e7fe <create_chain+0x2c>
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	699b      	ldr	r3, [r3, #24]
 800e7f8:	69ba      	ldr	r2, [r7, #24]
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d31b      	bcc.n	800e836 <create_chain+0x64>
 800e7fe:	2301      	movs	r3, #1
 800e800:	61bb      	str	r3, [r7, #24]
 800e802:	e018      	b.n	800e836 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e804:	6839      	ldr	r1, [r7, #0]
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f7ff fded 	bl	800e3e6 <get_fat>
 800e80c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	2b01      	cmp	r3, #1
 800e812:	d801      	bhi.n	800e818 <create_chain+0x46>
 800e814:	2301      	movs	r3, #1
 800e816:	e070      	b.n	800e8fa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e81e:	d101      	bne.n	800e824 <create_chain+0x52>
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	e06a      	b.n	800e8fa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	699b      	ldr	r3, [r3, #24]
 800e828:	68fa      	ldr	r2, [r7, #12]
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d201      	bcs.n	800e832 <create_chain+0x60>
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	e063      	b.n	800e8fa <create_chain+0x128>
		scl = clst;
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e836:	69bb      	ldr	r3, [r7, #24]
 800e838:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e83a:	69fb      	ldr	r3, [r7, #28]
 800e83c:	3301      	adds	r3, #1
 800e83e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	699b      	ldr	r3, [r3, #24]
 800e844:	69fa      	ldr	r2, [r7, #28]
 800e846:	429a      	cmp	r2, r3
 800e848:	d307      	bcc.n	800e85a <create_chain+0x88>
				ncl = 2;
 800e84a:	2302      	movs	r3, #2
 800e84c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e84e:	69fa      	ldr	r2, [r7, #28]
 800e850:	69bb      	ldr	r3, [r7, #24]
 800e852:	429a      	cmp	r2, r3
 800e854:	d901      	bls.n	800e85a <create_chain+0x88>
 800e856:	2300      	movs	r3, #0
 800e858:	e04f      	b.n	800e8fa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e85a:	69f9      	ldr	r1, [r7, #28]
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f7ff fdc2 	bl	800e3e6 <get_fat>
 800e862:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d00e      	beq.n	800e888 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2b01      	cmp	r3, #1
 800e86e:	d003      	beq.n	800e878 <create_chain+0xa6>
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e876:	d101      	bne.n	800e87c <create_chain+0xaa>
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	e03e      	b.n	800e8fa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e87c:	69fa      	ldr	r2, [r7, #28]
 800e87e:	69bb      	ldr	r3, [r7, #24]
 800e880:	429a      	cmp	r2, r3
 800e882:	d1da      	bne.n	800e83a <create_chain+0x68>
 800e884:	2300      	movs	r3, #0
 800e886:	e038      	b.n	800e8fa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e888:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e88a:	f04f 32ff 	mov.w	r2, #4294967295
 800e88e:	69f9      	ldr	r1, [r7, #28]
 800e890:	6938      	ldr	r0, [r7, #16]
 800e892:	f7ff fe4f 	bl	800e534 <put_fat>
 800e896:	4603      	mov	r3, r0
 800e898:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e89a:	7dfb      	ldrb	r3, [r7, #23]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d109      	bne.n	800e8b4 <create_chain+0xe2>
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d006      	beq.n	800e8b4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e8a6:	69fa      	ldr	r2, [r7, #28]
 800e8a8:	6839      	ldr	r1, [r7, #0]
 800e8aa:	6938      	ldr	r0, [r7, #16]
 800e8ac:	f7ff fe42 	bl	800e534 <put_fat>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e8b4:	7dfb      	ldrb	r3, [r7, #23]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d116      	bne.n	800e8e8 <create_chain+0x116>
		fs->last_clst = ncl;
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	69fa      	ldr	r2, [r7, #28]
 800e8be:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	695a      	ldr	r2, [r3, #20]
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	699b      	ldr	r3, [r3, #24]
 800e8c8:	3b02      	subs	r3, #2
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d804      	bhi.n	800e8d8 <create_chain+0x106>
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	695b      	ldr	r3, [r3, #20]
 800e8d2:	1e5a      	subs	r2, r3, #1
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	791b      	ldrb	r3, [r3, #4]
 800e8dc:	f043 0301 	orr.w	r3, r3, #1
 800e8e0:	b2da      	uxtb	r2, r3
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	711a      	strb	r2, [r3, #4]
 800e8e6:	e007      	b.n	800e8f8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e8e8:	7dfb      	ldrb	r3, [r7, #23]
 800e8ea:	2b01      	cmp	r3, #1
 800e8ec:	d102      	bne.n	800e8f4 <create_chain+0x122>
 800e8ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e8f2:	e000      	b.n	800e8f6 <create_chain+0x124>
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e8f8:	69fb      	ldr	r3, [r7, #28]
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3720      	adds	r7, #32
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}

0800e902 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e902:	b480      	push	{r7}
 800e904:	b087      	sub	sp, #28
 800e906:	af00      	add	r7, sp, #0
 800e908:	6078      	str	r0, [r7, #4]
 800e90a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e916:	3304      	adds	r3, #4
 800e918:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	0a5b      	lsrs	r3, r3, #9
 800e91e:	68fa      	ldr	r2, [r7, #12]
 800e920:	8952      	ldrh	r2, [r2, #10]
 800e922:	fbb3 f3f2 	udiv	r3, r3, r2
 800e926:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	1d1a      	adds	r2, r3, #4
 800e92c:	613a      	str	r2, [r7, #16]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d101      	bne.n	800e93c <clmt_clust+0x3a>
 800e938:	2300      	movs	r3, #0
 800e93a:	e010      	b.n	800e95e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e93c:	697a      	ldr	r2, [r7, #20]
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	429a      	cmp	r2, r3
 800e942:	d307      	bcc.n	800e954 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e944:	697a      	ldr	r2, [r7, #20]
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	1ad3      	subs	r3, r2, r3
 800e94a:	617b      	str	r3, [r7, #20]
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	3304      	adds	r3, #4
 800e950:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e952:	e7e9      	b.n	800e928 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e954:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	4413      	add	r3, r2
}
 800e95e:	4618      	mov	r0, r3
 800e960:	371c      	adds	r7, #28
 800e962:	46bd      	mov	sp, r7
 800e964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e968:	4770      	bx	lr

0800e96a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e96a:	b580      	push	{r7, lr}
 800e96c:	b086      	sub	sp, #24
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
 800e972:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e980:	d204      	bcs.n	800e98c <dir_sdi+0x22>
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	f003 031f 	and.w	r3, r3, #31
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d001      	beq.n	800e990 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e98c:	2302      	movs	r3, #2
 800e98e:	e063      	b.n	800ea58 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	683a      	ldr	r2, [r7, #0]
 800e994:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	689b      	ldr	r3, [r3, #8]
 800e99a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d106      	bne.n	800e9b0 <dir_sdi+0x46>
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	2b02      	cmp	r3, #2
 800e9a8:	d902      	bls.n	800e9b0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9ae:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d10c      	bne.n	800e9d0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	095b      	lsrs	r3, r3, #5
 800e9ba:	693a      	ldr	r2, [r7, #16]
 800e9bc:	8912      	ldrh	r2, [r2, #8]
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	d301      	bcc.n	800e9c6 <dir_sdi+0x5c>
 800e9c2:	2302      	movs	r3, #2
 800e9c4:	e048      	b.n	800ea58 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	61da      	str	r2, [r3, #28]
 800e9ce:	e029      	b.n	800ea24 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	895b      	ldrh	r3, [r3, #10]
 800e9d4:	025b      	lsls	r3, r3, #9
 800e9d6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e9d8:	e019      	b.n	800ea0e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6979      	ldr	r1, [r7, #20]
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7ff fd01 	bl	800e3e6 <get_fat>
 800e9e4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ec:	d101      	bne.n	800e9f2 <dir_sdi+0x88>
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	e032      	b.n	800ea58 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	d904      	bls.n	800ea02 <dir_sdi+0x98>
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	699b      	ldr	r3, [r3, #24]
 800e9fc:	697a      	ldr	r2, [r7, #20]
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d301      	bcc.n	800ea06 <dir_sdi+0x9c>
 800ea02:	2302      	movs	r3, #2
 800ea04:	e028      	b.n	800ea58 <dir_sdi+0xee>
			ofs -= csz;
 800ea06:	683a      	ldr	r2, [r7, #0]
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	1ad3      	subs	r3, r2, r3
 800ea0c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ea0e:	683a      	ldr	r2, [r7, #0]
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d2e1      	bcs.n	800e9da <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ea16:	6979      	ldr	r1, [r7, #20]
 800ea18:	6938      	ldr	r0, [r7, #16]
 800ea1a:	f7ff fcc5 	bl	800e3a8 <clust2sect>
 800ea1e:	4602      	mov	r2, r0
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	697a      	ldr	r2, [r7, #20]
 800ea28:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	69db      	ldr	r3, [r3, #28]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d101      	bne.n	800ea36 <dir_sdi+0xcc>
 800ea32:	2302      	movs	r3, #2
 800ea34:	e010      	b.n	800ea58 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	69da      	ldr	r2, [r3, #28]
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	0a5b      	lsrs	r3, r3, #9
 800ea3e:	441a      	add	r2, r3
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ea44:	693b      	ldr	r3, [r7, #16]
 800ea46:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea50:	441a      	add	r2, r3
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ea56:	2300      	movs	r3, #0
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3718      	adds	r7, #24
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b086      	sub	sp, #24
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	695b      	ldr	r3, [r3, #20]
 800ea74:	3320      	adds	r3, #32
 800ea76:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	69db      	ldr	r3, [r3, #28]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d003      	beq.n	800ea88 <dir_next+0x28>
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ea86:	d301      	bcc.n	800ea8c <dir_next+0x2c>
 800ea88:	2304      	movs	r3, #4
 800ea8a:	e0aa      	b.n	800ebe2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	f040 8098 	bne.w	800ebc8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	69db      	ldr	r3, [r3, #28]
 800ea9c:	1c5a      	adds	r2, r3, #1
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	699b      	ldr	r3, [r3, #24]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d10b      	bne.n	800eac2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	095b      	lsrs	r3, r3, #5
 800eaae:	68fa      	ldr	r2, [r7, #12]
 800eab0:	8912      	ldrh	r2, [r2, #8]
 800eab2:	4293      	cmp	r3, r2
 800eab4:	f0c0 8088 	bcc.w	800ebc8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2200      	movs	r2, #0
 800eabc:	61da      	str	r2, [r3, #28]
 800eabe:	2304      	movs	r3, #4
 800eac0:	e08f      	b.n	800ebe2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	0a5b      	lsrs	r3, r3, #9
 800eac6:	68fa      	ldr	r2, [r7, #12]
 800eac8:	8952      	ldrh	r2, [r2, #10]
 800eaca:	3a01      	subs	r2, #1
 800eacc:	4013      	ands	r3, r2
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d17a      	bne.n	800ebc8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ead2:	687a      	ldr	r2, [r7, #4]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	699b      	ldr	r3, [r3, #24]
 800ead8:	4619      	mov	r1, r3
 800eada:	4610      	mov	r0, r2
 800eadc:	f7ff fc83 	bl	800e3e6 <get_fat>
 800eae0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d801      	bhi.n	800eaec <dir_next+0x8c>
 800eae8:	2302      	movs	r3, #2
 800eaea:	e07a      	b.n	800ebe2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaf2:	d101      	bne.n	800eaf8 <dir_next+0x98>
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	e074      	b.n	800ebe2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	699b      	ldr	r3, [r3, #24]
 800eafc:	697a      	ldr	r2, [r7, #20]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d358      	bcc.n	800ebb4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d104      	bne.n	800eb12 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	61da      	str	r2, [r3, #28]
 800eb0e:	2304      	movs	r3, #4
 800eb10:	e067      	b.n	800ebe2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800eb12:	687a      	ldr	r2, [r7, #4]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	699b      	ldr	r3, [r3, #24]
 800eb18:	4619      	mov	r1, r3
 800eb1a:	4610      	mov	r0, r2
 800eb1c:	f7ff fe59 	bl	800e7d2 <create_chain>
 800eb20:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d101      	bne.n	800eb2c <dir_next+0xcc>
 800eb28:	2307      	movs	r3, #7
 800eb2a:	e05a      	b.n	800ebe2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	d101      	bne.n	800eb36 <dir_next+0xd6>
 800eb32:	2302      	movs	r3, #2
 800eb34:	e055      	b.n	800ebe2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb3c:	d101      	bne.n	800eb42 <dir_next+0xe2>
 800eb3e:	2301      	movs	r3, #1
 800eb40:	e04f      	b.n	800ebe2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800eb42:	68f8      	ldr	r0, [r7, #12]
 800eb44:	f7ff fb50 	bl	800e1e8 <sync_window>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d001      	beq.n	800eb52 <dir_next+0xf2>
 800eb4e:	2301      	movs	r3, #1
 800eb50:	e047      	b.n	800ebe2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	3334      	adds	r3, #52	@ 0x34
 800eb56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb5a:	2100      	movs	r1, #0
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7ff f97a 	bl	800de56 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eb62:	2300      	movs	r3, #0
 800eb64:	613b      	str	r3, [r7, #16]
 800eb66:	6979      	ldr	r1, [r7, #20]
 800eb68:	68f8      	ldr	r0, [r7, #12]
 800eb6a:	f7ff fc1d 	bl	800e3a8 <clust2sect>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	631a      	str	r2, [r3, #48]	@ 0x30
 800eb74:	e012      	b.n	800eb9c <dir_next+0x13c>
						fs->wflag = 1;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	2201      	movs	r2, #1
 800eb7a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800eb7c:	68f8      	ldr	r0, [r7, #12]
 800eb7e:	f7ff fb33 	bl	800e1e8 <sync_window>
 800eb82:	4603      	mov	r3, r0
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d001      	beq.n	800eb8c <dir_next+0x12c>
 800eb88:	2301      	movs	r3, #1
 800eb8a:	e02a      	b.n	800ebe2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	3301      	adds	r3, #1
 800eb90:	613b      	str	r3, [r7, #16]
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb96:	1c5a      	adds	r2, r3, #1
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	631a      	str	r2, [r3, #48]	@ 0x30
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	895b      	ldrh	r3, [r3, #10]
 800eba0:	461a      	mov	r2, r3
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d3e6      	bcc.n	800eb76 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	1ad2      	subs	r2, r2, r3
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	697a      	ldr	r2, [r7, #20]
 800ebb8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ebba:	6979      	ldr	r1, [r7, #20]
 800ebbc:	68f8      	ldr	r0, [r7, #12]
 800ebbe:	f7ff fbf3 	bl	800e3a8 <clust2sect>
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	68ba      	ldr	r2, [r7, #8]
 800ebcc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebda:	441a      	add	r2, r3
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ebe0:	2300      	movs	r3, #0
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3718      	adds	r7, #24
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}

0800ebea <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ebea:	b580      	push	{r7, lr}
 800ebec:	b086      	sub	sp, #24
 800ebee:	af00      	add	r7, sp, #0
 800ebf0:	6078      	str	r0, [r7, #4]
 800ebf2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ebfa:	2100      	movs	r1, #0
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f7ff feb4 	bl	800e96a <dir_sdi>
 800ec02:	4603      	mov	r3, r0
 800ec04:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ec06:	7dfb      	ldrb	r3, [r7, #23]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d12b      	bne.n	800ec64 <dir_alloc+0x7a>
		n = 0;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	69db      	ldr	r3, [r3, #28]
 800ec14:	4619      	mov	r1, r3
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	f7ff fb2a 	bl	800e270 <move_window>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ec20:	7dfb      	ldrb	r3, [r7, #23]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d11d      	bne.n	800ec62 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6a1b      	ldr	r3, [r3, #32]
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	2be5      	cmp	r3, #229	@ 0xe5
 800ec2e:	d004      	beq.n	800ec3a <dir_alloc+0x50>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6a1b      	ldr	r3, [r3, #32]
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d107      	bne.n	800ec4a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	613b      	str	r3, [r7, #16]
 800ec40:	693a      	ldr	r2, [r7, #16]
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d102      	bne.n	800ec4e <dir_alloc+0x64>
 800ec48:	e00c      	b.n	800ec64 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ec4e:	2101      	movs	r1, #1
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f7ff ff05 	bl	800ea60 <dir_next>
 800ec56:	4603      	mov	r3, r0
 800ec58:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ec5a:	7dfb      	ldrb	r3, [r7, #23]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d0d7      	beq.n	800ec10 <dir_alloc+0x26>
 800ec60:	e000      	b.n	800ec64 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ec62:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ec64:	7dfb      	ldrb	r3, [r7, #23]
 800ec66:	2b04      	cmp	r3, #4
 800ec68:	d101      	bne.n	800ec6e <dir_alloc+0x84>
 800ec6a:	2307      	movs	r3, #7
 800ec6c:	75fb      	strb	r3, [r7, #23]
	return res;
 800ec6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3718      	adds	r7, #24
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}

0800ec78 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b084      	sub	sp, #16
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	331a      	adds	r3, #26
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7ff f842 	bl	800dd10 <ld_word>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	2b03      	cmp	r3, #3
 800ec96:	d109      	bne.n	800ecac <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	3314      	adds	r3, #20
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7ff f837 	bl	800dd10 <ld_word>
 800eca2:	4603      	mov	r3, r0
 800eca4:	041b      	lsls	r3, r3, #16
 800eca6:	68fa      	ldr	r2, [r7, #12]
 800eca8:	4313      	orrs	r3, r2
 800ecaa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ecac:	68fb      	ldr	r3, [r7, #12]
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3710      	adds	r7, #16
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}

0800ecb6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ecb6:	b580      	push	{r7, lr}
 800ecb8:	b084      	sub	sp, #16
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	60f8      	str	r0, [r7, #12]
 800ecbe:	60b9      	str	r1, [r7, #8]
 800ecc0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	331a      	adds	r3, #26
 800ecc6:	687a      	ldr	r2, [r7, #4]
 800ecc8:	b292      	uxth	r2, r2
 800ecca:	4611      	mov	r1, r2
 800eccc:	4618      	mov	r0, r3
 800ecce:	f7ff f85a 	bl	800dd86 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	2b03      	cmp	r3, #3
 800ecd8:	d109      	bne.n	800ecee <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	f103 0214 	add.w	r2, r3, #20
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	0c1b      	lsrs	r3, r3, #16
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	4619      	mov	r1, r3
 800ece8:	4610      	mov	r0, r2
 800ecea:	f7ff f84c 	bl	800dd86 <st_word>
	}
}
 800ecee:	bf00      	nop
 800ecf0:	3710      	adds	r7, #16
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
	...

0800ecf8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ecf8:	b590      	push	{r4, r7, lr}
 800ecfa:	b087      	sub	sp, #28
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	331a      	adds	r3, #26
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7ff f802 	bl	800dd10 <ld_word>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d001      	beq.n	800ed16 <cmp_lfn+0x1e>
 800ed12:	2300      	movs	r3, #0
 800ed14:	e059      	b.n	800edca <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ed1e:	1e5a      	subs	r2, r3, #1
 800ed20:	4613      	mov	r3, r2
 800ed22:	005b      	lsls	r3, r3, #1
 800ed24:	4413      	add	r3, r2
 800ed26:	009b      	lsls	r3, r3, #2
 800ed28:	4413      	add	r3, r2
 800ed2a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	81fb      	strh	r3, [r7, #14]
 800ed30:	2300      	movs	r3, #0
 800ed32:	613b      	str	r3, [r7, #16]
 800ed34:	e033      	b.n	800ed9e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ed36:	4a27      	ldr	r2, [pc, #156]	@ (800edd4 <cmp_lfn+0xdc>)
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	4413      	add	r3, r2
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	461a      	mov	r2, r3
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	4413      	add	r3, r2
 800ed44:	4618      	mov	r0, r3
 800ed46:	f7fe ffe3 	bl	800dd10 <ld_word>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ed4e:	89fb      	ldrh	r3, [r7, #14]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d01a      	beq.n	800ed8a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	2bfe      	cmp	r3, #254	@ 0xfe
 800ed58:	d812      	bhi.n	800ed80 <cmp_lfn+0x88>
 800ed5a:	89bb      	ldrh	r3, [r7, #12]
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f001 feff 	bl	8010b60 <ff_wtoupper>
 800ed62:	4603      	mov	r3, r0
 800ed64:	461c      	mov	r4, r3
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	1c5a      	adds	r2, r3, #1
 800ed6a:	617a      	str	r2, [r7, #20]
 800ed6c:	005b      	lsls	r3, r3, #1
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	4413      	add	r3, r2
 800ed72:	881b      	ldrh	r3, [r3, #0]
 800ed74:	4618      	mov	r0, r3
 800ed76:	f001 fef3 	bl	8010b60 <ff_wtoupper>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	429c      	cmp	r4, r3
 800ed7e:	d001      	beq.n	800ed84 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ed80:	2300      	movs	r3, #0
 800ed82:	e022      	b.n	800edca <cmp_lfn+0xd2>
			}
			wc = uc;
 800ed84:	89bb      	ldrh	r3, [r7, #12]
 800ed86:	81fb      	strh	r3, [r7, #14]
 800ed88:	e006      	b.n	800ed98 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ed8a:	89bb      	ldrh	r3, [r7, #12]
 800ed8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d001      	beq.n	800ed98 <cmp_lfn+0xa0>
 800ed94:	2300      	movs	r3, #0
 800ed96:	e018      	b.n	800edca <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	613b      	str	r3, [r7, #16]
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	2b0c      	cmp	r3, #12
 800eda2:	d9c8      	bls.n	800ed36 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800edac:	2b00      	cmp	r3, #0
 800edae:	d00b      	beq.n	800edc8 <cmp_lfn+0xd0>
 800edb0:	89fb      	ldrh	r3, [r7, #14]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d008      	beq.n	800edc8 <cmp_lfn+0xd0>
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	005b      	lsls	r3, r3, #1
 800edba:	687a      	ldr	r2, [r7, #4]
 800edbc:	4413      	add	r3, r2
 800edbe:	881b      	ldrh	r3, [r3, #0]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d001      	beq.n	800edc8 <cmp_lfn+0xd0>
 800edc4:	2300      	movs	r3, #0
 800edc6:	e000      	b.n	800edca <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800edc8:	2301      	movs	r3, #1
}
 800edca:	4618      	mov	r0, r3
 800edcc:	371c      	adds	r7, #28
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd90      	pop	{r4, r7, pc}
 800edd2:	bf00      	nop
 800edd4:	080119a0 	.word	0x080119a0

0800edd8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b088      	sub	sp, #32
 800eddc:	af00      	add	r7, sp, #0
 800edde:	60f8      	str	r0, [r7, #12]
 800ede0:	60b9      	str	r1, [r7, #8]
 800ede2:	4611      	mov	r1, r2
 800ede4:	461a      	mov	r2, r3
 800ede6:	460b      	mov	r3, r1
 800ede8:	71fb      	strb	r3, [r7, #7]
 800edea:	4613      	mov	r3, r2
 800edec:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	330d      	adds	r3, #13
 800edf2:	79ba      	ldrb	r2, [r7, #6]
 800edf4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	330b      	adds	r3, #11
 800edfa:	220f      	movs	r2, #15
 800edfc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	330c      	adds	r3, #12
 800ee02:	2200      	movs	r2, #0
 800ee04:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	331a      	adds	r3, #26
 800ee0a:	2100      	movs	r1, #0
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f7fe ffba 	bl	800dd86 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ee12:	79fb      	ldrb	r3, [r7, #7]
 800ee14:	1e5a      	subs	r2, r3, #1
 800ee16:	4613      	mov	r3, r2
 800ee18:	005b      	lsls	r3, r3, #1
 800ee1a:	4413      	add	r3, r2
 800ee1c:	009b      	lsls	r3, r3, #2
 800ee1e:	4413      	add	r3, r2
 800ee20:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ee22:	2300      	movs	r3, #0
 800ee24:	82fb      	strh	r3, [r7, #22]
 800ee26:	2300      	movs	r3, #0
 800ee28:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ee2a:	8afb      	ldrh	r3, [r7, #22]
 800ee2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee30:	4293      	cmp	r3, r2
 800ee32:	d007      	beq.n	800ee44 <put_lfn+0x6c>
 800ee34:	69fb      	ldr	r3, [r7, #28]
 800ee36:	1c5a      	adds	r2, r3, #1
 800ee38:	61fa      	str	r2, [r7, #28]
 800ee3a:	005b      	lsls	r3, r3, #1
 800ee3c:	68fa      	ldr	r2, [r7, #12]
 800ee3e:	4413      	add	r3, r2
 800ee40:	881b      	ldrh	r3, [r3, #0]
 800ee42:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ee44:	4a17      	ldr	r2, [pc, #92]	@ (800eea4 <put_lfn+0xcc>)
 800ee46:	69bb      	ldr	r3, [r7, #24]
 800ee48:	4413      	add	r3, r2
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	4413      	add	r3, r2
 800ee52:	8afa      	ldrh	r2, [r7, #22]
 800ee54:	4611      	mov	r1, r2
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7fe ff95 	bl	800dd86 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ee5c:	8afb      	ldrh	r3, [r7, #22]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d102      	bne.n	800ee68 <put_lfn+0x90>
 800ee62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ee66:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ee68:	69bb      	ldr	r3, [r7, #24]
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	61bb      	str	r3, [r7, #24]
 800ee6e:	69bb      	ldr	r3, [r7, #24]
 800ee70:	2b0c      	cmp	r3, #12
 800ee72:	d9da      	bls.n	800ee2a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ee74:	8afb      	ldrh	r3, [r7, #22]
 800ee76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	d006      	beq.n	800ee8c <put_lfn+0xb4>
 800ee7e:	69fb      	ldr	r3, [r7, #28]
 800ee80:	005b      	lsls	r3, r3, #1
 800ee82:	68fa      	ldr	r2, [r7, #12]
 800ee84:	4413      	add	r3, r2
 800ee86:	881b      	ldrh	r3, [r3, #0]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d103      	bne.n	800ee94 <put_lfn+0xbc>
 800ee8c:	79fb      	ldrb	r3, [r7, #7]
 800ee8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee92:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	79fa      	ldrb	r2, [r7, #7]
 800ee98:	701a      	strb	r2, [r3, #0]
}
 800ee9a:	bf00      	nop
 800ee9c:	3720      	adds	r7, #32
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	080119a0 	.word	0x080119a0

0800eea8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b08c      	sub	sp, #48	@ 0x30
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	60f8      	str	r0, [r7, #12]
 800eeb0:	60b9      	str	r1, [r7, #8]
 800eeb2:	607a      	str	r2, [r7, #4]
 800eeb4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800eeb6:	220b      	movs	r2, #11
 800eeb8:	68b9      	ldr	r1, [r7, #8]
 800eeba:	68f8      	ldr	r0, [r7, #12]
 800eebc:	f7fe ffaa 	bl	800de14 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	2b05      	cmp	r3, #5
 800eec4:	d929      	bls.n	800ef1a <gen_numname+0x72>
		sr = seq;
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800eeca:	e020      	b.n	800ef0e <gen_numname+0x66>
			wc = *lfn++;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	1c9a      	adds	r2, r3, #2
 800eed0:	607a      	str	r2, [r7, #4]
 800eed2:	881b      	ldrh	r3, [r3, #0]
 800eed4:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800eed6:	2300      	movs	r3, #0
 800eed8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eeda:	e015      	b.n	800ef08 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	005a      	lsls	r2, r3, #1
 800eee0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eee2:	f003 0301 	and.w	r3, r3, #1
 800eee6:	4413      	add	r3, r2
 800eee8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800eeea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eeec:	085b      	lsrs	r3, r3, #1
 800eeee:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800eef0:	69fb      	ldr	r3, [r7, #28]
 800eef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d003      	beq.n	800ef02 <gen_numname+0x5a>
 800eefa:	69fa      	ldr	r2, [r7, #28]
 800eefc:	4b30      	ldr	r3, [pc, #192]	@ (800efc0 <gen_numname+0x118>)
 800eefe:	4053      	eors	r3, r2
 800ef00:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ef02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef04:	3301      	adds	r3, #1
 800ef06:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ef08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef0a:	2b0f      	cmp	r3, #15
 800ef0c:	d9e6      	bls.n	800eedc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	881b      	ldrh	r3, [r3, #0]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d1da      	bne.n	800eecc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ef16:	69fb      	ldr	r3, [r7, #28]
 800ef18:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ef1a:	2307      	movs	r3, #7
 800ef1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	b2db      	uxtb	r3, r3
 800ef22:	f003 030f 	and.w	r3, r3, #15
 800ef26:	b2db      	uxtb	r3, r3
 800ef28:	3330      	adds	r3, #48	@ 0x30
 800ef2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800ef2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ef32:	2b39      	cmp	r3, #57	@ 0x39
 800ef34:	d904      	bls.n	800ef40 <gen_numname+0x98>
 800ef36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ef3a:	3307      	adds	r3, #7
 800ef3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800ef40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef42:	1e5a      	subs	r2, r3, #1
 800ef44:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ef46:	3330      	adds	r3, #48	@ 0x30
 800ef48:	443b      	add	r3, r7
 800ef4a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800ef4e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	091b      	lsrs	r3, r3, #4
 800ef56:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1df      	bne.n	800ef1e <gen_numname+0x76>
	ns[i] = '~';
 800ef5e:	f107 0214 	add.w	r2, r7, #20
 800ef62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef64:	4413      	add	r3, r2
 800ef66:	227e      	movs	r2, #126	@ 0x7e
 800ef68:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef6e:	e002      	b.n	800ef76 <gen_numname+0xce>
 800ef70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef72:	3301      	adds	r3, #1
 800ef74:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d205      	bcs.n	800ef8a <gen_numname+0xe2>
 800ef7e:	68fa      	ldr	r2, [r7, #12]
 800ef80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef82:	4413      	add	r3, r2
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	2b20      	cmp	r3, #32
 800ef88:	d1f2      	bne.n	800ef70 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ef8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef8c:	2b07      	cmp	r3, #7
 800ef8e:	d807      	bhi.n	800efa0 <gen_numname+0xf8>
 800ef90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef92:	1c5a      	adds	r2, r3, #1
 800ef94:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ef96:	3330      	adds	r3, #48	@ 0x30
 800ef98:	443b      	add	r3, r7
 800ef9a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ef9e:	e000      	b.n	800efa2 <gen_numname+0xfa>
 800efa0:	2120      	movs	r1, #32
 800efa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efa4:	1c5a      	adds	r2, r3, #1
 800efa6:	627a      	str	r2, [r7, #36]	@ 0x24
 800efa8:	68fa      	ldr	r2, [r7, #12]
 800efaa:	4413      	add	r3, r2
 800efac:	460a      	mov	r2, r1
 800efae:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800efb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efb2:	2b07      	cmp	r3, #7
 800efb4:	d9e9      	bls.n	800ef8a <gen_numname+0xe2>
}
 800efb6:	bf00      	nop
 800efb8:	bf00      	nop
 800efba:	3730      	adds	r7, #48	@ 0x30
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	00011021 	.word	0x00011021

0800efc4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800efc4:	b480      	push	{r7}
 800efc6:	b085      	sub	sp, #20
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800efcc:	2300      	movs	r3, #0
 800efce:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800efd0:	230b      	movs	r3, #11
 800efd2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800efd4:	7bfb      	ldrb	r3, [r7, #15]
 800efd6:	b2da      	uxtb	r2, r3
 800efd8:	0852      	lsrs	r2, r2, #1
 800efda:	01db      	lsls	r3, r3, #7
 800efdc:	4313      	orrs	r3, r2
 800efde:	b2da      	uxtb	r2, r3
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	1c59      	adds	r1, r3, #1
 800efe4:	6079      	str	r1, [r7, #4]
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	4413      	add	r3, r2
 800efea:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	3b01      	subs	r3, #1
 800eff0:	60bb      	str	r3, [r7, #8]
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d1ed      	bne.n	800efd4 <sum_sfn+0x10>
	return sum;
 800eff8:	7bfb      	ldrb	r3, [r7, #15]
}
 800effa:	4618      	mov	r0, r3
 800effc:	3714      	adds	r7, #20
 800effe:	46bd      	mov	sp, r7
 800f000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f004:	4770      	bx	lr

0800f006 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f006:	b580      	push	{r7, lr}
 800f008:	b086      	sub	sp, #24
 800f00a:	af00      	add	r7, sp, #0
 800f00c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f014:	2100      	movs	r1, #0
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	f7ff fca7 	bl	800e96a <dir_sdi>
 800f01c:	4603      	mov	r3, r0
 800f01e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f020:	7dfb      	ldrb	r3, [r7, #23]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d001      	beq.n	800f02a <dir_find+0x24>
 800f026:	7dfb      	ldrb	r3, [r7, #23]
 800f028:	e0a9      	b.n	800f17e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f02a:	23ff      	movs	r3, #255	@ 0xff
 800f02c:	753b      	strb	r3, [r7, #20]
 800f02e:	7d3b      	ldrb	r3, [r7, #20]
 800f030:	757b      	strb	r3, [r7, #21]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f04f 32ff 	mov.w	r2, #4294967295
 800f038:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	69db      	ldr	r3, [r3, #28]
 800f03e:	4619      	mov	r1, r3
 800f040:	6938      	ldr	r0, [r7, #16]
 800f042:	f7ff f915 	bl	800e270 <move_window>
 800f046:	4603      	mov	r3, r0
 800f048:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f04a:	7dfb      	ldrb	r3, [r7, #23]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	f040 8090 	bne.w	800f172 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6a1b      	ldr	r3, [r3, #32]
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f05a:	7dbb      	ldrb	r3, [r7, #22]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d102      	bne.n	800f066 <dir_find+0x60>
 800f060:	2304      	movs	r3, #4
 800f062:	75fb      	strb	r3, [r7, #23]
 800f064:	e08a      	b.n	800f17c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6a1b      	ldr	r3, [r3, #32]
 800f06a:	330b      	adds	r3, #11
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f072:	73fb      	strb	r3, [r7, #15]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	7bfa      	ldrb	r2, [r7, #15]
 800f078:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f07a:	7dbb      	ldrb	r3, [r7, #22]
 800f07c:	2be5      	cmp	r3, #229	@ 0xe5
 800f07e:	d007      	beq.n	800f090 <dir_find+0x8a>
 800f080:	7bfb      	ldrb	r3, [r7, #15]
 800f082:	f003 0308 	and.w	r3, r3, #8
 800f086:	2b00      	cmp	r3, #0
 800f088:	d009      	beq.n	800f09e <dir_find+0x98>
 800f08a:	7bfb      	ldrb	r3, [r7, #15]
 800f08c:	2b0f      	cmp	r3, #15
 800f08e:	d006      	beq.n	800f09e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f090:	23ff      	movs	r3, #255	@ 0xff
 800f092:	757b      	strb	r3, [r7, #21]
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f04f 32ff 	mov.w	r2, #4294967295
 800f09a:	631a      	str	r2, [r3, #48]	@ 0x30
 800f09c:	e05e      	b.n	800f15c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f09e:	7bfb      	ldrb	r3, [r7, #15]
 800f0a0:	2b0f      	cmp	r3, #15
 800f0a2:	d136      	bne.n	800f112 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f0aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d154      	bne.n	800f15c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f0b2:	7dbb      	ldrb	r3, [r7, #22]
 800f0b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d00d      	beq.n	800f0d8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6a1b      	ldr	r3, [r3, #32]
 800f0c0:	7b5b      	ldrb	r3, [r3, #13]
 800f0c2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f0c4:	7dbb      	ldrb	r3, [r7, #22]
 800f0c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f0ca:	75bb      	strb	r3, [r7, #22]
 800f0cc:	7dbb      	ldrb	r3, [r7, #22]
 800f0ce:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	695a      	ldr	r2, [r3, #20]
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f0d8:	7dba      	ldrb	r2, [r7, #22]
 800f0da:	7d7b      	ldrb	r3, [r7, #21]
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d115      	bne.n	800f10c <dir_find+0x106>
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6a1b      	ldr	r3, [r3, #32]
 800f0e4:	330d      	adds	r3, #13
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	7d3a      	ldrb	r2, [r7, #20]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d10e      	bne.n	800f10c <dir_find+0x106>
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	68da      	ldr	r2, [r3, #12]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6a1b      	ldr	r3, [r3, #32]
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	4610      	mov	r0, r2
 800f0fa:	f7ff fdfd 	bl	800ecf8 <cmp_lfn>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d003      	beq.n	800f10c <dir_find+0x106>
 800f104:	7d7b      	ldrb	r3, [r7, #21]
 800f106:	3b01      	subs	r3, #1
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	e000      	b.n	800f10e <dir_find+0x108>
 800f10c:	23ff      	movs	r3, #255	@ 0xff
 800f10e:	757b      	strb	r3, [r7, #21]
 800f110:	e024      	b.n	800f15c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f112:	7d7b      	ldrb	r3, [r7, #21]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d109      	bne.n	800f12c <dir_find+0x126>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6a1b      	ldr	r3, [r3, #32]
 800f11c:	4618      	mov	r0, r3
 800f11e:	f7ff ff51 	bl	800efc4 <sum_sfn>
 800f122:	4603      	mov	r3, r0
 800f124:	461a      	mov	r2, r3
 800f126:	7d3b      	ldrb	r3, [r7, #20]
 800f128:	4293      	cmp	r3, r2
 800f12a:	d024      	beq.n	800f176 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f132:	f003 0301 	and.w	r3, r3, #1
 800f136:	2b00      	cmp	r3, #0
 800f138:	d10a      	bne.n	800f150 <dir_find+0x14a>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6a18      	ldr	r0, [r3, #32]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	3324      	adds	r3, #36	@ 0x24
 800f142:	220b      	movs	r2, #11
 800f144:	4619      	mov	r1, r3
 800f146:	f7fe fea1 	bl	800de8c <mem_cmp>
 800f14a:	4603      	mov	r3, r0
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d014      	beq.n	800f17a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f150:	23ff      	movs	r3, #255	@ 0xff
 800f152:	757b      	strb	r3, [r7, #21]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f04f 32ff 	mov.w	r2, #4294967295
 800f15a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f15c:	2100      	movs	r1, #0
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f7ff fc7e 	bl	800ea60 <dir_next>
 800f164:	4603      	mov	r3, r0
 800f166:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f168:	7dfb      	ldrb	r3, [r7, #23]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	f43f af65 	beq.w	800f03a <dir_find+0x34>
 800f170:	e004      	b.n	800f17c <dir_find+0x176>
		if (res != FR_OK) break;
 800f172:	bf00      	nop
 800f174:	e002      	b.n	800f17c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f176:	bf00      	nop
 800f178:	e000      	b.n	800f17c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f17a:	bf00      	nop

	return res;
 800f17c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f17e:	4618      	mov	r0, r3
 800f180:	3718      	adds	r7, #24
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}
	...

0800f188 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b08c      	sub	sp, #48	@ 0x30
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f19c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d001      	beq.n	800f1a8 <dir_register+0x20>
 800f1a4:	2306      	movs	r3, #6
 800f1a6:	e0e0      	b.n	800f36a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1ac:	e002      	b.n	800f1b4 <dir_register+0x2c>
 800f1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	68da      	ldr	r2, [r3, #12]
 800f1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ba:	005b      	lsls	r3, r3, #1
 800f1bc:	4413      	add	r3, r2
 800f1be:	881b      	ldrh	r3, [r3, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d1f4      	bne.n	800f1ae <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800f1ca:	f107 030c 	add.w	r3, r7, #12
 800f1ce:	220c      	movs	r2, #12
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f7fe fe1f 	bl	800de14 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f1d6:	7dfb      	ldrb	r3, [r7, #23]
 800f1d8:	f003 0301 	and.w	r3, r3, #1
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d032      	beq.n	800f246 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2240      	movs	r2, #64	@ 0x40
 800f1e4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f1ec:	e016      	b.n	800f21c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800f1f4:	69fb      	ldr	r3, [r7, #28]
 800f1f6:	68da      	ldr	r2, [r3, #12]
 800f1f8:	f107 010c 	add.w	r1, r7, #12
 800f1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1fe:	f7ff fe53 	bl	800eea8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f7ff feff 	bl	800f006 <dir_find>
 800f208:	4603      	mov	r3, r0
 800f20a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800f20e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f212:	2b00      	cmp	r3, #0
 800f214:	d106      	bne.n	800f224 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f218:	3301      	adds	r3, #1
 800f21a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f21e:	2b63      	cmp	r3, #99	@ 0x63
 800f220:	d9e5      	bls.n	800f1ee <dir_register+0x66>
 800f222:	e000      	b.n	800f226 <dir_register+0x9e>
			if (res != FR_OK) break;
 800f224:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f228:	2b64      	cmp	r3, #100	@ 0x64
 800f22a:	d101      	bne.n	800f230 <dir_register+0xa8>
 800f22c:	2307      	movs	r3, #7
 800f22e:	e09c      	b.n	800f36a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f230:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f234:	2b04      	cmp	r3, #4
 800f236:	d002      	beq.n	800f23e <dir_register+0xb6>
 800f238:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f23c:	e095      	b.n	800f36a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f23e:	7dfa      	ldrb	r2, [r7, #23]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f246:	7dfb      	ldrb	r3, [r7, #23]
 800f248:	f003 0302 	and.w	r3, r3, #2
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d007      	beq.n	800f260 <dir_register+0xd8>
 800f250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f252:	330c      	adds	r3, #12
 800f254:	4a47      	ldr	r2, [pc, #284]	@ (800f374 <dir_register+0x1ec>)
 800f256:	fba2 2303 	umull	r2, r3, r2, r3
 800f25a:	089b      	lsrs	r3, r3, #2
 800f25c:	3301      	adds	r3, #1
 800f25e:	e000      	b.n	800f262 <dir_register+0xda>
 800f260:	2301      	movs	r3, #1
 800f262:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f264:	6a39      	ldr	r1, [r7, #32]
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f7ff fcbf 	bl	800ebea <dir_alloc>
 800f26c:	4603      	mov	r3, r0
 800f26e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f272:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f276:	2b00      	cmp	r3, #0
 800f278:	d148      	bne.n	800f30c <dir_register+0x184>
 800f27a:	6a3b      	ldr	r3, [r7, #32]
 800f27c:	3b01      	subs	r3, #1
 800f27e:	623b      	str	r3, [r7, #32]
 800f280:	6a3b      	ldr	r3, [r7, #32]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d042      	beq.n	800f30c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	695a      	ldr	r2, [r3, #20]
 800f28a:	6a3b      	ldr	r3, [r7, #32]
 800f28c:	015b      	lsls	r3, r3, #5
 800f28e:	1ad3      	subs	r3, r2, r3
 800f290:	4619      	mov	r1, r3
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f7ff fb69 	bl	800e96a <dir_sdi>
 800f298:	4603      	mov	r3, r0
 800f29a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800f29e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d132      	bne.n	800f30c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	3324      	adds	r3, #36	@ 0x24
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7ff fe8a 	bl	800efc4 <sum_sfn>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	69db      	ldr	r3, [r3, #28]
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	69f8      	ldr	r0, [r7, #28]
 800f2bc:	f7fe ffd8 	bl	800e270 <move_window>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800f2c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d11d      	bne.n	800f30a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	68d8      	ldr	r0, [r3, #12]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6a19      	ldr	r1, [r3, #32]
 800f2d6:	6a3b      	ldr	r3, [r7, #32]
 800f2d8:	b2da      	uxtb	r2, r3
 800f2da:	7efb      	ldrb	r3, [r7, #27]
 800f2dc:	f7ff fd7c 	bl	800edd8 <put_lfn>
				fs->wflag = 1;
 800f2e0:	69fb      	ldr	r3, [r7, #28]
 800f2e2:	2201      	movs	r2, #1
 800f2e4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f2e6:	2100      	movs	r1, #0
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f7ff fbb9 	bl	800ea60 <dir_next>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800f2f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d107      	bne.n	800f30c <dir_register+0x184>
 800f2fc:	6a3b      	ldr	r3, [r7, #32]
 800f2fe:	3b01      	subs	r3, #1
 800f300:	623b      	str	r3, [r7, #32]
 800f302:	6a3b      	ldr	r3, [r7, #32]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d1d5      	bne.n	800f2b4 <dir_register+0x12c>
 800f308:	e000      	b.n	800f30c <dir_register+0x184>
				if (res != FR_OK) break;
 800f30a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f30c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f310:	2b00      	cmp	r3, #0
 800f312:	d128      	bne.n	800f366 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	69db      	ldr	r3, [r3, #28]
 800f318:	4619      	mov	r1, r3
 800f31a:	69f8      	ldr	r0, [r7, #28]
 800f31c:	f7fe ffa8 	bl	800e270 <move_window>
 800f320:	4603      	mov	r3, r0
 800f322:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800f326:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d11b      	bne.n	800f366 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6a1b      	ldr	r3, [r3, #32]
 800f332:	2220      	movs	r2, #32
 800f334:	2100      	movs	r1, #0
 800f336:	4618      	mov	r0, r3
 800f338:	f7fe fd8d 	bl	800de56 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6a18      	ldr	r0, [r3, #32]
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	3324      	adds	r3, #36	@ 0x24
 800f344:	220b      	movs	r2, #11
 800f346:	4619      	mov	r1, r3
 800f348:	f7fe fd64 	bl	800de14 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6a1b      	ldr	r3, [r3, #32]
 800f356:	330c      	adds	r3, #12
 800f358:	f002 0218 	and.w	r2, r2, #24
 800f35c:	b2d2      	uxtb	r2, r2
 800f35e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f360:	69fb      	ldr	r3, [r7, #28]
 800f362:	2201      	movs	r2, #1
 800f364:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f366:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	3730      	adds	r7, #48	@ 0x30
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}
 800f372:	bf00      	nop
 800f374:	4ec4ec4f 	.word	0x4ec4ec4f

0800f378 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b08a      	sub	sp, #40	@ 0x28
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	613b      	str	r3, [r7, #16]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	68db      	ldr	r3, [r3, #12]
 800f38e:	60fb      	str	r3, [r7, #12]
 800f390:	2300      	movs	r3, #0
 800f392:	617b      	str	r3, [r7, #20]
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f398:	69bb      	ldr	r3, [r7, #24]
 800f39a:	1c5a      	adds	r2, r3, #1
 800f39c:	61ba      	str	r2, [r7, #24]
 800f39e:	693a      	ldr	r2, [r7, #16]
 800f3a0:	4413      	add	r3, r2
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f3a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f3a8:	2b1f      	cmp	r3, #31
 800f3aa:	d940      	bls.n	800f42e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f3ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f3ae:	2b2f      	cmp	r3, #47	@ 0x2f
 800f3b0:	d006      	beq.n	800f3c0 <create_name+0x48>
 800f3b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f3b4:	2b5c      	cmp	r3, #92	@ 0x5c
 800f3b6:	d110      	bne.n	800f3da <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f3b8:	e002      	b.n	800f3c0 <create_name+0x48>
 800f3ba:	69bb      	ldr	r3, [r7, #24]
 800f3bc:	3301      	adds	r3, #1
 800f3be:	61bb      	str	r3, [r7, #24]
 800f3c0:	693a      	ldr	r2, [r7, #16]
 800f3c2:	69bb      	ldr	r3, [r7, #24]
 800f3c4:	4413      	add	r3, r2
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	2b2f      	cmp	r3, #47	@ 0x2f
 800f3ca:	d0f6      	beq.n	800f3ba <create_name+0x42>
 800f3cc:	693a      	ldr	r2, [r7, #16]
 800f3ce:	69bb      	ldr	r3, [r7, #24]
 800f3d0:	4413      	add	r3, r2
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	2b5c      	cmp	r3, #92	@ 0x5c
 800f3d6:	d0f0      	beq.n	800f3ba <create_name+0x42>
			break;
 800f3d8:	e02a      	b.n	800f430 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	2bfe      	cmp	r3, #254	@ 0xfe
 800f3de:	d901      	bls.n	800f3e4 <create_name+0x6c>
 800f3e0:	2306      	movs	r3, #6
 800f3e2:	e17d      	b.n	800f6e0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f3e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f3e6:	b2db      	uxtb	r3, r3
 800f3e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f3ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f3ec:	2101      	movs	r1, #1
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f001 fb7a 	bl	8010ae8 <ff_convert>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f3f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d101      	bne.n	800f402 <create_name+0x8a>
 800f3fe:	2306      	movs	r3, #6
 800f400:	e16e      	b.n	800f6e0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f402:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f404:	2b7f      	cmp	r3, #127	@ 0x7f
 800f406:	d809      	bhi.n	800f41c <create_name+0xa4>
 800f408:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f40a:	4619      	mov	r1, r3
 800f40c:	488d      	ldr	r0, [pc, #564]	@ (800f644 <create_name+0x2cc>)
 800f40e:	f7fe fd64 	bl	800deda <chk_chr>
 800f412:	4603      	mov	r3, r0
 800f414:	2b00      	cmp	r3, #0
 800f416:	d001      	beq.n	800f41c <create_name+0xa4>
 800f418:	2306      	movs	r3, #6
 800f41a:	e161      	b.n	800f6e0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	1c5a      	adds	r2, r3, #1
 800f420:	617a      	str	r2, [r7, #20]
 800f422:	005b      	lsls	r3, r3, #1
 800f424:	68fa      	ldr	r2, [r7, #12]
 800f426:	4413      	add	r3, r2
 800f428:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f42a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f42c:	e7b4      	b.n	800f398 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f42e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f430:	693a      	ldr	r2, [r7, #16]
 800f432:	69bb      	ldr	r3, [r7, #24]
 800f434:	441a      	add	r2, r3
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f43a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f43c:	2b1f      	cmp	r3, #31
 800f43e:	d801      	bhi.n	800f444 <create_name+0xcc>
 800f440:	2304      	movs	r3, #4
 800f442:	e000      	b.n	800f446 <create_name+0xce>
 800f444:	2300      	movs	r3, #0
 800f446:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f44a:	e011      	b.n	800f470 <create_name+0xf8>
		w = lfn[di - 1];
 800f44c:	697a      	ldr	r2, [r7, #20]
 800f44e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f452:	4413      	add	r3, r2
 800f454:	005b      	lsls	r3, r3, #1
 800f456:	68fa      	ldr	r2, [r7, #12]
 800f458:	4413      	add	r3, r2
 800f45a:	881b      	ldrh	r3, [r3, #0]
 800f45c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800f45e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f460:	2b20      	cmp	r3, #32
 800f462:	d002      	beq.n	800f46a <create_name+0xf2>
 800f464:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f466:	2b2e      	cmp	r3, #46	@ 0x2e
 800f468:	d106      	bne.n	800f478 <create_name+0x100>
		di--;
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	3b01      	subs	r3, #1
 800f46e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d1ea      	bne.n	800f44c <create_name+0xd4>
 800f476:	e000      	b.n	800f47a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f478:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	005b      	lsls	r3, r3, #1
 800f47e:	68fa      	ldr	r2, [r7, #12]
 800f480:	4413      	add	r3, r2
 800f482:	2200      	movs	r2, #0
 800f484:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d101      	bne.n	800f490 <create_name+0x118>
 800f48c:	2306      	movs	r3, #6
 800f48e:	e127      	b.n	800f6e0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	3324      	adds	r3, #36	@ 0x24
 800f494:	220b      	movs	r2, #11
 800f496:	2120      	movs	r1, #32
 800f498:	4618      	mov	r0, r3
 800f49a:	f7fe fcdc 	bl	800de56 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f49e:	2300      	movs	r3, #0
 800f4a0:	61bb      	str	r3, [r7, #24]
 800f4a2:	e002      	b.n	800f4aa <create_name+0x132>
 800f4a4:	69bb      	ldr	r3, [r7, #24]
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	61bb      	str	r3, [r7, #24]
 800f4aa:	69bb      	ldr	r3, [r7, #24]
 800f4ac:	005b      	lsls	r3, r3, #1
 800f4ae:	68fa      	ldr	r2, [r7, #12]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	881b      	ldrh	r3, [r3, #0]
 800f4b4:	2b20      	cmp	r3, #32
 800f4b6:	d0f5      	beq.n	800f4a4 <create_name+0x12c>
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	005b      	lsls	r3, r3, #1
 800f4bc:	68fa      	ldr	r2, [r7, #12]
 800f4be:	4413      	add	r3, r2
 800f4c0:	881b      	ldrh	r3, [r3, #0]
 800f4c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f4c4:	d0ee      	beq.n	800f4a4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f4c6:	69bb      	ldr	r3, [r7, #24]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d009      	beq.n	800f4e0 <create_name+0x168>
 800f4cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f4d0:	f043 0303 	orr.w	r3, r3, #3
 800f4d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f4d8:	e002      	b.n	800f4e0 <create_name+0x168>
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	3b01      	subs	r3, #1
 800f4de:	617b      	str	r3, [r7, #20]
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d009      	beq.n	800f4fa <create_name+0x182>
 800f4e6:	697a      	ldr	r2, [r7, #20]
 800f4e8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f4ec:	4413      	add	r3, r2
 800f4ee:	005b      	lsls	r3, r3, #1
 800f4f0:	68fa      	ldr	r2, [r7, #12]
 800f4f2:	4413      	add	r3, r2
 800f4f4:	881b      	ldrh	r3, [r3, #0]
 800f4f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800f4f8:	d1ef      	bne.n	800f4da <create_name+0x162>

	i = b = 0; ni = 8;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f500:	2300      	movs	r3, #0
 800f502:	623b      	str	r3, [r7, #32]
 800f504:	2308      	movs	r3, #8
 800f506:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f508:	69bb      	ldr	r3, [r7, #24]
 800f50a:	1c5a      	adds	r2, r3, #1
 800f50c:	61ba      	str	r2, [r7, #24]
 800f50e:	005b      	lsls	r3, r3, #1
 800f510:	68fa      	ldr	r2, [r7, #12]
 800f512:	4413      	add	r3, r2
 800f514:	881b      	ldrh	r3, [r3, #0]
 800f516:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f518:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	f000 8090 	beq.w	800f640 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f520:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f522:	2b20      	cmp	r3, #32
 800f524:	d006      	beq.n	800f534 <create_name+0x1bc>
 800f526:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f528:	2b2e      	cmp	r3, #46	@ 0x2e
 800f52a:	d10a      	bne.n	800f542 <create_name+0x1ca>
 800f52c:	69ba      	ldr	r2, [r7, #24]
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	429a      	cmp	r2, r3
 800f532:	d006      	beq.n	800f542 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f538:	f043 0303 	orr.w	r3, r3, #3
 800f53c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f540:	e07d      	b.n	800f63e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f542:	6a3a      	ldr	r2, [r7, #32]
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	429a      	cmp	r2, r3
 800f548:	d203      	bcs.n	800f552 <create_name+0x1da>
 800f54a:	69ba      	ldr	r2, [r7, #24]
 800f54c:	697b      	ldr	r3, [r7, #20]
 800f54e:	429a      	cmp	r2, r3
 800f550:	d123      	bne.n	800f59a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	2b0b      	cmp	r3, #11
 800f556:	d106      	bne.n	800f566 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f55c:	f043 0303 	orr.w	r3, r3, #3
 800f560:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f564:	e075      	b.n	800f652 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f566:	69ba      	ldr	r2, [r7, #24]
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	429a      	cmp	r2, r3
 800f56c:	d005      	beq.n	800f57a <create_name+0x202>
 800f56e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f572:	f043 0303 	orr.w	r3, r3, #3
 800f576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800f57a:	69ba      	ldr	r2, [r7, #24]
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	429a      	cmp	r2, r3
 800f580:	d866      	bhi.n	800f650 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	61bb      	str	r3, [r7, #24]
 800f586:	2308      	movs	r3, #8
 800f588:	623b      	str	r3, [r7, #32]
 800f58a:	230b      	movs	r3, #11
 800f58c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f58e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f592:	009b      	lsls	r3, r3, #2
 800f594:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f598:	e051      	b.n	800f63e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f59a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f59c:	2b7f      	cmp	r3, #127	@ 0x7f
 800f59e:	d914      	bls.n	800f5ca <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f5a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f5a2:	2100      	movs	r1, #0
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f001 fa9f 	bl	8010ae8 <ff_convert>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f5ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d004      	beq.n	800f5be <create_name+0x246>
 800f5b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f5b6:	3b80      	subs	r3, #128	@ 0x80
 800f5b8:	4a23      	ldr	r2, [pc, #140]	@ (800f648 <create_name+0x2d0>)
 800f5ba:	5cd3      	ldrb	r3, [r2, r3]
 800f5bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f5be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f5c2:	f043 0302 	orr.w	r3, r3, #2
 800f5c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f5ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d007      	beq.n	800f5e0 <create_name+0x268>
 800f5d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f5d2:	4619      	mov	r1, r3
 800f5d4:	481d      	ldr	r0, [pc, #116]	@ (800f64c <create_name+0x2d4>)
 800f5d6:	f7fe fc80 	bl	800deda <chk_chr>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d008      	beq.n	800f5f2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f5e0:	235f      	movs	r3, #95	@ 0x5f
 800f5e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800f5e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f5e8:	f043 0303 	orr.w	r3, r3, #3
 800f5ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f5f0:	e01b      	b.n	800f62a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f5f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f5f4:	2b40      	cmp	r3, #64	@ 0x40
 800f5f6:	d909      	bls.n	800f60c <create_name+0x294>
 800f5f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f5fa:	2b5a      	cmp	r3, #90	@ 0x5a
 800f5fc:	d806      	bhi.n	800f60c <create_name+0x294>
					b |= 2;
 800f5fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f602:	f043 0302 	orr.w	r3, r3, #2
 800f606:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f60a:	e00e      	b.n	800f62a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f60c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f60e:	2b60      	cmp	r3, #96	@ 0x60
 800f610:	d90b      	bls.n	800f62a <create_name+0x2b2>
 800f612:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f614:	2b7a      	cmp	r3, #122	@ 0x7a
 800f616:	d808      	bhi.n	800f62a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f618:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f61c:	f043 0301 	orr.w	r3, r3, #1
 800f620:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f624:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f626:	3b20      	subs	r3, #32
 800f628:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f62a:	6a3b      	ldr	r3, [r7, #32]
 800f62c:	1c5a      	adds	r2, r3, #1
 800f62e:	623a      	str	r2, [r7, #32]
 800f630:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f632:	b2d1      	uxtb	r1, r2
 800f634:	687a      	ldr	r2, [r7, #4]
 800f636:	4413      	add	r3, r2
 800f638:	460a      	mov	r2, r1
 800f63a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f63e:	e763      	b.n	800f508 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f640:	bf00      	nop
 800f642:	e006      	b.n	800f652 <create_name+0x2da>
 800f644:	08011654 	.word	0x08011654
 800f648:	08011920 	.word	0x08011920
 800f64c:	08011660 	.word	0x08011660
			if (si > di) break;			/* No extension */
 800f650:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f658:	2be5      	cmp	r3, #229	@ 0xe5
 800f65a:	d103      	bne.n	800f664 <create_name+0x2ec>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2205      	movs	r2, #5
 800f660:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800f664:	69fb      	ldr	r3, [r7, #28]
 800f666:	2b08      	cmp	r3, #8
 800f668:	d104      	bne.n	800f674 <create_name+0x2fc>
 800f66a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f66e:	009b      	lsls	r3, r3, #2
 800f670:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f674:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f678:	f003 030c 	and.w	r3, r3, #12
 800f67c:	2b0c      	cmp	r3, #12
 800f67e:	d005      	beq.n	800f68c <create_name+0x314>
 800f680:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f684:	f003 0303 	and.w	r3, r3, #3
 800f688:	2b03      	cmp	r3, #3
 800f68a:	d105      	bne.n	800f698 <create_name+0x320>
 800f68c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f690:	f043 0302 	orr.w	r3, r3, #2
 800f694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f69c:	f003 0302 	and.w	r3, r3, #2
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d117      	bne.n	800f6d4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f6a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f6a8:	f003 0303 	and.w	r3, r3, #3
 800f6ac:	2b01      	cmp	r3, #1
 800f6ae:	d105      	bne.n	800f6bc <create_name+0x344>
 800f6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f6b4:	f043 0310 	orr.w	r3, r3, #16
 800f6b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f6bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f6c0:	f003 030c 	and.w	r3, r3, #12
 800f6c4:	2b04      	cmp	r3, #4
 800f6c6:	d105      	bne.n	800f6d4 <create_name+0x35c>
 800f6c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f6cc:	f043 0308 	orr.w	r3, r3, #8
 800f6d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800f6da:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800f6de:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3728      	adds	r7, #40	@ 0x28
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}

0800f6e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b086      	sub	sp, #24
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
 800f6f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f6fc:	e002      	b.n	800f704 <follow_path+0x1c>
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	3301      	adds	r3, #1
 800f702:	603b      	str	r3, [r7, #0]
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	2b2f      	cmp	r3, #47	@ 0x2f
 800f70a:	d0f8      	beq.n	800f6fe <follow_path+0x16>
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	2b5c      	cmp	r3, #92	@ 0x5c
 800f712:	d0f4      	beq.n	800f6fe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f714:	693b      	ldr	r3, [r7, #16]
 800f716:	2200      	movs	r2, #0
 800f718:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	2b1f      	cmp	r3, #31
 800f720:	d80a      	bhi.n	800f738 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2280      	movs	r2, #128	@ 0x80
 800f726:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800f72a:	2100      	movs	r1, #0
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f7ff f91c 	bl	800e96a <dir_sdi>
 800f732:	4603      	mov	r3, r0
 800f734:	75fb      	strb	r3, [r7, #23]
 800f736:	e043      	b.n	800f7c0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f738:	463b      	mov	r3, r7
 800f73a:	4619      	mov	r1, r3
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f7ff fe1b 	bl	800f378 <create_name>
 800f742:	4603      	mov	r3, r0
 800f744:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f746:	7dfb      	ldrb	r3, [r7, #23]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d134      	bne.n	800f7b6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f7ff fc5a 	bl	800f006 <dir_find>
 800f752:	4603      	mov	r3, r0
 800f754:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f75c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f75e:	7dfb      	ldrb	r3, [r7, #23]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d00a      	beq.n	800f77a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f764:	7dfb      	ldrb	r3, [r7, #23]
 800f766:	2b04      	cmp	r3, #4
 800f768:	d127      	bne.n	800f7ba <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f76a:	7afb      	ldrb	r3, [r7, #11]
 800f76c:	f003 0304 	and.w	r3, r3, #4
 800f770:	2b00      	cmp	r3, #0
 800f772:	d122      	bne.n	800f7ba <follow_path+0xd2>
 800f774:	2305      	movs	r3, #5
 800f776:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f778:	e01f      	b.n	800f7ba <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f77a:	7afb      	ldrb	r3, [r7, #11]
 800f77c:	f003 0304 	and.w	r3, r3, #4
 800f780:	2b00      	cmp	r3, #0
 800f782:	d11c      	bne.n	800f7be <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	799b      	ldrb	r3, [r3, #6]
 800f788:	f003 0310 	and.w	r3, r3, #16
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d102      	bne.n	800f796 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f790:	2305      	movs	r3, #5
 800f792:	75fb      	strb	r3, [r7, #23]
 800f794:	e014      	b.n	800f7c0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	695b      	ldr	r3, [r3, #20]
 800f7a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7a4:	4413      	add	r3, r2
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	68f8      	ldr	r0, [r7, #12]
 800f7aa:	f7ff fa65 	bl	800ec78 <ld_clust>
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f7b4:	e7c0      	b.n	800f738 <follow_path+0x50>
			if (res != FR_OK) break;
 800f7b6:	bf00      	nop
 800f7b8:	e002      	b.n	800f7c0 <follow_path+0xd8>
				break;
 800f7ba:	bf00      	nop
 800f7bc:	e000      	b.n	800f7c0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f7be:	bf00      	nop
			}
		}
	}

	return res;
 800f7c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3718      	adds	r7, #24
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}

0800f7ca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f7ca:	b480      	push	{r7}
 800f7cc:	b087      	sub	sp, #28
 800f7ce:	af00      	add	r7, sp, #0
 800f7d0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f7d2:	f04f 33ff 	mov.w	r3, #4294967295
 800f7d6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d031      	beq.n	800f844 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	617b      	str	r3, [r7, #20]
 800f7e6:	e002      	b.n	800f7ee <get_ldnumber+0x24>
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	617b      	str	r3, [r7, #20]
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	2b1f      	cmp	r3, #31
 800f7f4:	d903      	bls.n	800f7fe <get_ldnumber+0x34>
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	781b      	ldrb	r3, [r3, #0]
 800f7fa:	2b3a      	cmp	r3, #58	@ 0x3a
 800f7fc:	d1f4      	bne.n	800f7e8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f7fe:	697b      	ldr	r3, [r7, #20]
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	2b3a      	cmp	r3, #58	@ 0x3a
 800f804:	d11c      	bne.n	800f840 <get_ldnumber+0x76>
			tp = *path;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	1c5a      	adds	r2, r3, #1
 800f810:	60fa      	str	r2, [r7, #12]
 800f812:	781b      	ldrb	r3, [r3, #0]
 800f814:	3b30      	subs	r3, #48	@ 0x30
 800f816:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	2b09      	cmp	r3, #9
 800f81c:	d80e      	bhi.n	800f83c <get_ldnumber+0x72>
 800f81e:	68fa      	ldr	r2, [r7, #12]
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	429a      	cmp	r2, r3
 800f824:	d10a      	bne.n	800f83c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d107      	bne.n	800f83c <get_ldnumber+0x72>
					vol = (int)i;
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	3301      	adds	r3, #1
 800f834:	617b      	str	r3, [r7, #20]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	697a      	ldr	r2, [r7, #20]
 800f83a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	e002      	b.n	800f846 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f840:	2300      	movs	r3, #0
 800f842:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f844:	693b      	ldr	r3, [r7, #16]
}
 800f846:	4618      	mov	r0, r3
 800f848:	371c      	adds	r7, #28
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr
	...

0800f854 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2200      	movs	r2, #0
 800f862:	70da      	strb	r2, [r3, #3]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f04f 32ff 	mov.w	r2, #4294967295
 800f86a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f86c:	6839      	ldr	r1, [r7, #0]
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f7fe fcfe 	bl	800e270 <move_window>
 800f874:	4603      	mov	r3, r0
 800f876:	2b00      	cmp	r3, #0
 800f878:	d001      	beq.n	800f87e <check_fs+0x2a>
 800f87a:	2304      	movs	r3, #4
 800f87c:	e038      	b.n	800f8f0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	3334      	adds	r3, #52	@ 0x34
 800f882:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f886:	4618      	mov	r0, r3
 800f888:	f7fe fa42 	bl	800dd10 <ld_word>
 800f88c:	4603      	mov	r3, r0
 800f88e:	461a      	mov	r2, r3
 800f890:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f894:	429a      	cmp	r2, r3
 800f896:	d001      	beq.n	800f89c <check_fs+0x48>
 800f898:	2303      	movs	r3, #3
 800f89a:	e029      	b.n	800f8f0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f8a2:	2be9      	cmp	r3, #233	@ 0xe9
 800f8a4:	d009      	beq.n	800f8ba <check_fs+0x66>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f8ac:	2beb      	cmp	r3, #235	@ 0xeb
 800f8ae:	d11e      	bne.n	800f8ee <check_fs+0x9a>
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800f8b6:	2b90      	cmp	r3, #144	@ 0x90
 800f8b8:	d119      	bne.n	800f8ee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	3334      	adds	r3, #52	@ 0x34
 800f8be:	3336      	adds	r3, #54	@ 0x36
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f7fe fa3d 	bl	800dd40 <ld_dword>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f8cc:	4a0a      	ldr	r2, [pc, #40]	@ (800f8f8 <check_fs+0xa4>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d101      	bne.n	800f8d6 <check_fs+0x82>
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	e00c      	b.n	800f8f0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	3334      	adds	r3, #52	@ 0x34
 800f8da:	3352      	adds	r3, #82	@ 0x52
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7fe fa2f 	bl	800dd40 <ld_dword>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	4a05      	ldr	r2, [pc, #20]	@ (800f8fc <check_fs+0xa8>)
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d101      	bne.n	800f8ee <check_fs+0x9a>
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	e000      	b.n	800f8f0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f8ee:	2302      	movs	r3, #2
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3708      	adds	r7, #8
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	00544146 	.word	0x00544146
 800f8fc:	33544146 	.word	0x33544146

0800f900 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b096      	sub	sp, #88	@ 0x58
 800f904:	af00      	add	r7, sp, #0
 800f906:	60f8      	str	r0, [r7, #12]
 800f908:	60b9      	str	r1, [r7, #8]
 800f90a:	4613      	mov	r3, r2
 800f90c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	2200      	movs	r2, #0
 800f912:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f914:	68f8      	ldr	r0, [r7, #12]
 800f916:	f7ff ff58 	bl	800f7ca <get_ldnumber>
 800f91a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f91c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f91e:	2b00      	cmp	r3, #0
 800f920:	da01      	bge.n	800f926 <find_volume+0x26>
 800f922:	230b      	movs	r3, #11
 800f924:	e22d      	b.n	800fd82 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f926:	4aa1      	ldr	r2, [pc, #644]	@ (800fbac <find_volume+0x2ac>)
 800f928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f92a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f92e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f932:	2b00      	cmp	r3, #0
 800f934:	d101      	bne.n	800f93a <find_volume+0x3a>
 800f936:	230c      	movs	r3, #12
 800f938:	e223      	b.n	800fd82 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f93e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f940:	79fb      	ldrb	r3, [r7, #7]
 800f942:	f023 0301 	bic.w	r3, r3, #1
 800f946:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d01a      	beq.n	800f986 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f952:	785b      	ldrb	r3, [r3, #1]
 800f954:	4618      	mov	r0, r3
 800f956:	f7fe f933 	bl	800dbc0 <disk_status>
 800f95a:	4603      	mov	r3, r0
 800f95c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f960:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f964:	f003 0301 	and.w	r3, r3, #1
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d10c      	bne.n	800f986 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f96c:	79fb      	ldrb	r3, [r7, #7]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d007      	beq.n	800f982 <find_volume+0x82>
 800f972:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f976:	f003 0304 	and.w	r3, r3, #4
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d001      	beq.n	800f982 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f97e:	230a      	movs	r3, #10
 800f980:	e1ff      	b.n	800fd82 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800f982:	2300      	movs	r3, #0
 800f984:	e1fd      	b.n	800fd82 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f988:	2200      	movs	r2, #0
 800f98a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f98c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f98e:	b2da      	uxtb	r2, r3
 800f990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f992:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f996:	785b      	ldrb	r3, [r3, #1]
 800f998:	4618      	mov	r0, r3
 800f99a:	f7fe f92b 	bl	800dbf4 <disk_initialize>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f9a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f9a8:	f003 0301 	and.w	r3, r3, #1
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d001      	beq.n	800f9b4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f9b0:	2303      	movs	r3, #3
 800f9b2:	e1e6      	b.n	800fd82 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f9b4:	79fb      	ldrb	r3, [r7, #7]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d007      	beq.n	800f9ca <find_volume+0xca>
 800f9ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f9be:	f003 0304 	and.w	r3, r3, #4
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d001      	beq.n	800f9ca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f9c6:	230a      	movs	r3, #10
 800f9c8:	e1db      	b.n	800fd82 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f9ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f9d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f9d2:	f7ff ff3f 	bl	800f854 <check_fs>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f9dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f9e0:	2b02      	cmp	r3, #2
 800f9e2:	d149      	bne.n	800fa78 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800f9e8:	e01e      	b.n	800fa28 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ec:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f9f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9f2:	011b      	lsls	r3, r3, #4
 800f9f4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f9f8:	4413      	add	r3, r2
 800f9fa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9fe:	3304      	adds	r3, #4
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d006      	beq.n	800fa14 <find_volume+0x114>
 800fa06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa08:	3308      	adds	r3, #8
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fe f998 	bl	800dd40 <ld_dword>
 800fa10:	4602      	mov	r2, r0
 800fa12:	e000      	b.n	800fa16 <find_volume+0x116>
 800fa14:	2200      	movs	r2, #0
 800fa16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa18:	009b      	lsls	r3, r3, #2
 800fa1a:	3358      	adds	r3, #88	@ 0x58
 800fa1c:	443b      	add	r3, r7
 800fa1e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fa22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa24:	3301      	adds	r3, #1
 800fa26:	643b      	str	r3, [r7, #64]	@ 0x40
 800fa28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa2a:	2b03      	cmp	r3, #3
 800fa2c:	d9dd      	bls.n	800f9ea <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fa2e:	2300      	movs	r3, #0
 800fa30:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800fa32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d002      	beq.n	800fa3e <find_volume+0x13e>
 800fa38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa3a:	3b01      	subs	r3, #1
 800fa3c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fa3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa40:	009b      	lsls	r3, r3, #2
 800fa42:	3358      	adds	r3, #88	@ 0x58
 800fa44:	443b      	add	r3, r7
 800fa46:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fa4a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fa4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d005      	beq.n	800fa5e <find_volume+0x15e>
 800fa52:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fa54:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fa56:	f7ff fefd 	bl	800f854 <check_fs>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	e000      	b.n	800fa60 <find_volume+0x160>
 800fa5e:	2303      	movs	r3, #3
 800fa60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fa64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fa68:	2b01      	cmp	r3, #1
 800fa6a:	d905      	bls.n	800fa78 <find_volume+0x178>
 800fa6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa6e:	3301      	adds	r3, #1
 800fa70:	643b      	str	r3, [r7, #64]	@ 0x40
 800fa72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa74:	2b03      	cmp	r3, #3
 800fa76:	d9e2      	bls.n	800fa3e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fa78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fa7c:	2b04      	cmp	r3, #4
 800fa7e:	d101      	bne.n	800fa84 <find_volume+0x184>
 800fa80:	2301      	movs	r3, #1
 800fa82:	e17e      	b.n	800fd82 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fa84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d901      	bls.n	800fa90 <find_volume+0x190>
 800fa8c:	230d      	movs	r3, #13
 800fa8e:	e178      	b.n	800fd82 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fa90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa92:	3334      	adds	r3, #52	@ 0x34
 800fa94:	330b      	adds	r3, #11
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7fe f93a 	bl	800dd10 <ld_word>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800faa2:	d001      	beq.n	800faa8 <find_volume+0x1a8>
 800faa4:	230d      	movs	r3, #13
 800faa6:	e16c      	b.n	800fd82 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800faa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faaa:	3334      	adds	r3, #52	@ 0x34
 800faac:	3316      	adds	r3, #22
 800faae:	4618      	mov	r0, r3
 800fab0:	f7fe f92e 	bl	800dd10 <ld_word>
 800fab4:	4603      	mov	r3, r0
 800fab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d106      	bne.n	800facc <find_volume+0x1cc>
 800fabe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fac0:	3334      	adds	r3, #52	@ 0x34
 800fac2:	3324      	adds	r3, #36	@ 0x24
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7fe f93b 	bl	800dd40 <ld_dword>
 800faca:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800facc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800face:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fad0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fad4:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800fad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fada:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fade:	789b      	ldrb	r3, [r3, #2]
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	d005      	beq.n	800faf0 <find_volume+0x1f0>
 800fae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fae6:	789b      	ldrb	r3, [r3, #2]
 800fae8:	2b02      	cmp	r3, #2
 800faea:	d001      	beq.n	800faf0 <find_volume+0x1f0>
 800faec:	230d      	movs	r3, #13
 800faee:	e148      	b.n	800fd82 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800faf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faf2:	789b      	ldrb	r3, [r3, #2]
 800faf4:	461a      	mov	r2, r3
 800faf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800faf8:	fb02 f303 	mul.w	r3, r2, r3
 800fafc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fb04:	461a      	mov	r2, r3
 800fb06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb08:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fb0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb0c:	895b      	ldrh	r3, [r3, #10]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d008      	beq.n	800fb24 <find_volume+0x224>
 800fb12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb14:	895b      	ldrh	r3, [r3, #10]
 800fb16:	461a      	mov	r2, r3
 800fb18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb1a:	895b      	ldrh	r3, [r3, #10]
 800fb1c:	3b01      	subs	r3, #1
 800fb1e:	4013      	ands	r3, r2
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d001      	beq.n	800fb28 <find_volume+0x228>
 800fb24:	230d      	movs	r3, #13
 800fb26:	e12c      	b.n	800fd82 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fb28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb2a:	3334      	adds	r3, #52	@ 0x34
 800fb2c:	3311      	adds	r3, #17
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7fe f8ee 	bl	800dd10 <ld_word>
 800fb34:	4603      	mov	r3, r0
 800fb36:	461a      	mov	r2, r3
 800fb38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb3a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fb3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb3e:	891b      	ldrh	r3, [r3, #8]
 800fb40:	f003 030f 	and.w	r3, r3, #15
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d001      	beq.n	800fb4e <find_volume+0x24e>
 800fb4a:	230d      	movs	r3, #13
 800fb4c:	e119      	b.n	800fd82 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fb4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb50:	3334      	adds	r3, #52	@ 0x34
 800fb52:	3313      	adds	r3, #19
 800fb54:	4618      	mov	r0, r3
 800fb56:	f7fe f8db 	bl	800dd10 <ld_word>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fb5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d106      	bne.n	800fb72 <find_volume+0x272>
 800fb64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb66:	3334      	adds	r3, #52	@ 0x34
 800fb68:	3320      	adds	r3, #32
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7fe f8e8 	bl	800dd40 <ld_dword>
 800fb70:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb74:	3334      	adds	r3, #52	@ 0x34
 800fb76:	330e      	adds	r3, #14
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7fe f8c9 	bl	800dd10 <ld_word>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fb82:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d101      	bne.n	800fb8c <find_volume+0x28c>
 800fb88:	230d      	movs	r3, #13
 800fb8a:	e0fa      	b.n	800fd82 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fb8c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fb8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb90:	4413      	add	r3, r2
 800fb92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fb94:	8912      	ldrh	r2, [r2, #8]
 800fb96:	0912      	lsrs	r2, r2, #4
 800fb98:	b292      	uxth	r2, r2
 800fb9a:	4413      	add	r3, r2
 800fb9c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fb9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d204      	bcs.n	800fbb0 <find_volume+0x2b0>
 800fba6:	230d      	movs	r3, #13
 800fba8:	e0eb      	b.n	800fd82 <find_volume+0x482>
 800fbaa:	bf00      	nop
 800fbac:	2001894c 	.word	0x2001894c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fbb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fbb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbb4:	1ad3      	subs	r3, r2, r3
 800fbb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fbb8:	8952      	ldrh	r2, [r2, #10]
 800fbba:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbbe:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fbc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d101      	bne.n	800fbca <find_volume+0x2ca>
 800fbc6:	230d      	movs	r3, #13
 800fbc8:	e0db      	b.n	800fd82 <find_volume+0x482>
		fmt = FS_FAT32;
 800fbca:	2303      	movs	r3, #3
 800fbcc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbd2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d802      	bhi.n	800fbe0 <find_volume+0x2e0>
 800fbda:	2302      	movs	r3, #2
 800fbdc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbe2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d802      	bhi.n	800fbf0 <find_volume+0x2f0>
 800fbea:	2301      	movs	r3, #1
 800fbec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbf2:	1c9a      	adds	r2, r3, #2
 800fbf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbf6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800fbf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbfa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fbfc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fbfe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fc00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc02:	441a      	add	r2, r3
 800fc04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc06:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800fc08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fc0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc0c:	441a      	add	r2, r3
 800fc0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc10:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800fc12:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fc16:	2b03      	cmp	r3, #3
 800fc18:	d11e      	bne.n	800fc58 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fc1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc1c:	3334      	adds	r3, #52	@ 0x34
 800fc1e:	332a      	adds	r3, #42	@ 0x2a
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7fe f875 	bl	800dd10 <ld_word>
 800fc26:	4603      	mov	r3, r0
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d001      	beq.n	800fc30 <find_volume+0x330>
 800fc2c:	230d      	movs	r3, #13
 800fc2e:	e0a8      	b.n	800fd82 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fc30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc32:	891b      	ldrh	r3, [r3, #8]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d001      	beq.n	800fc3c <find_volume+0x33c>
 800fc38:	230d      	movs	r3, #13
 800fc3a:	e0a2      	b.n	800fd82 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc3e:	3334      	adds	r3, #52	@ 0x34
 800fc40:	332c      	adds	r3, #44	@ 0x2c
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7fe f87c 	bl	800dd40 <ld_dword>
 800fc48:	4602      	mov	r2, r0
 800fc4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc4c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fc4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc50:	699b      	ldr	r3, [r3, #24]
 800fc52:	009b      	lsls	r3, r3, #2
 800fc54:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc56:	e01f      	b.n	800fc98 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fc58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc5a:	891b      	ldrh	r3, [r3, #8]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d101      	bne.n	800fc64 <find_volume+0x364>
 800fc60:	230d      	movs	r3, #13
 800fc62:	e08e      	b.n	800fd82 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc6a:	441a      	add	r2, r3
 800fc6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc6e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fc70:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fc74:	2b02      	cmp	r3, #2
 800fc76:	d103      	bne.n	800fc80 <find_volume+0x380>
 800fc78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc7a:	699b      	ldr	r3, [r3, #24]
 800fc7c:	005b      	lsls	r3, r3, #1
 800fc7e:	e00a      	b.n	800fc96 <find_volume+0x396>
 800fc80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc82:	699a      	ldr	r2, [r3, #24]
 800fc84:	4613      	mov	r3, r2
 800fc86:	005b      	lsls	r3, r3, #1
 800fc88:	4413      	add	r3, r2
 800fc8a:	085a      	lsrs	r2, r3, #1
 800fc8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc8e:	699b      	ldr	r3, [r3, #24]
 800fc90:	f003 0301 	and.w	r3, r3, #1
 800fc94:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fc96:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fc98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc9a:	69da      	ldr	r2, [r3, #28]
 800fc9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc9e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800fca2:	0a5b      	lsrs	r3, r3, #9
 800fca4:	429a      	cmp	r2, r3
 800fca6:	d201      	bcs.n	800fcac <find_volume+0x3ac>
 800fca8:	230d      	movs	r3, #13
 800fcaa:	e06a      	b.n	800fd82 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fcac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcae:	f04f 32ff 	mov.w	r2, #4294967295
 800fcb2:	615a      	str	r2, [r3, #20]
 800fcb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcb6:	695a      	ldr	r2, [r3, #20]
 800fcb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcba:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800fcbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcbe:	2280      	movs	r2, #128	@ 0x80
 800fcc0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fcc2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fcc6:	2b03      	cmp	r3, #3
 800fcc8:	d149      	bne.n	800fd5e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fcca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fccc:	3334      	adds	r3, #52	@ 0x34
 800fcce:	3330      	adds	r3, #48	@ 0x30
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f7fe f81d 	bl	800dd10 <ld_word>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	d140      	bne.n	800fd5e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fcdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fcde:	3301      	adds	r3, #1
 800fce0:	4619      	mov	r1, r3
 800fce2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fce4:	f7fe fac4 	bl	800e270 <move_window>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d137      	bne.n	800fd5e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800fcee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fcf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcf6:	3334      	adds	r3, #52	@ 0x34
 800fcf8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7fe f807 	bl	800dd10 <ld_word>
 800fd02:	4603      	mov	r3, r0
 800fd04:	461a      	mov	r2, r3
 800fd06:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d127      	bne.n	800fd5e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fd0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd10:	3334      	adds	r3, #52	@ 0x34
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7fe f814 	bl	800dd40 <ld_dword>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	4a1c      	ldr	r2, [pc, #112]	@ (800fd8c <find_volume+0x48c>)
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	d11e      	bne.n	800fd5e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fd20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd22:	3334      	adds	r3, #52	@ 0x34
 800fd24:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7fe f809 	bl	800dd40 <ld_dword>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	4a17      	ldr	r2, [pc, #92]	@ (800fd90 <find_volume+0x490>)
 800fd32:	4293      	cmp	r3, r2
 800fd34:	d113      	bne.n	800fd5e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fd36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd38:	3334      	adds	r3, #52	@ 0x34
 800fd3a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7fd fffe 	bl	800dd40 <ld_dword>
 800fd44:	4602      	mov	r2, r0
 800fd46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd48:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fd4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd4c:	3334      	adds	r3, #52	@ 0x34
 800fd4e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7fd fff4 	bl	800dd40 <ld_dword>
 800fd58:	4602      	mov	r2, r0
 800fd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd5c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fd5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd60:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800fd64:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fd66:	4b0b      	ldr	r3, [pc, #44]	@ (800fd94 <find_volume+0x494>)
 800fd68:	881b      	ldrh	r3, [r3, #0]
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	b29a      	uxth	r2, r3
 800fd6e:	4b09      	ldr	r3, [pc, #36]	@ (800fd94 <find_volume+0x494>)
 800fd70:	801a      	strh	r2, [r3, #0]
 800fd72:	4b08      	ldr	r3, [pc, #32]	@ (800fd94 <find_volume+0x494>)
 800fd74:	881a      	ldrh	r2, [r3, #0]
 800fd76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd78:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fd7a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fd7c:	f7fe fa10 	bl	800e1a0 <clear_lock>
#endif
	return FR_OK;
 800fd80:	2300      	movs	r3, #0
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3758      	adds	r7, #88	@ 0x58
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	41615252 	.word	0x41615252
 800fd90:	61417272 	.word	0x61417272
 800fd94:	20018950 	.word	0x20018950

0800fd98 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b084      	sub	sp, #16
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fda2:	2309      	movs	r3, #9
 800fda4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d01c      	beq.n	800fde6 <validate+0x4e>
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d018      	beq.n	800fde6 <validate+0x4e>
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	781b      	ldrb	r3, [r3, #0]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d013      	beq.n	800fde6 <validate+0x4e>
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	889a      	ldrh	r2, [r3, #4]
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	88db      	ldrh	r3, [r3, #6]
 800fdc8:	429a      	cmp	r2, r3
 800fdca:	d10c      	bne.n	800fde6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	785b      	ldrb	r3, [r3, #1]
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fd fef4 	bl	800dbc0 <disk_status>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	f003 0301 	and.w	r3, r3, #1
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d101      	bne.n	800fde6 <validate+0x4e>
			res = FR_OK;
 800fde2:	2300      	movs	r3, #0
 800fde4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fde6:	7bfb      	ldrb	r3, [r7, #15]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d102      	bne.n	800fdf2 <validate+0x5a>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	e000      	b.n	800fdf4 <validate+0x5c>
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	683a      	ldr	r2, [r7, #0]
 800fdf6:	6013      	str	r3, [r2, #0]
	return res;
 800fdf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	3710      	adds	r7, #16
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}
	...

0800fe04 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b088      	sub	sp, #32
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	60f8      	str	r0, [r7, #12]
 800fe0c:	60b9      	str	r1, [r7, #8]
 800fe0e:	4613      	mov	r3, r2
 800fe10:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fe16:	f107 0310 	add.w	r3, r7, #16
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7ff fcd5 	bl	800f7ca <get_ldnumber>
 800fe20:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fe22:	69fb      	ldr	r3, [r7, #28]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	da01      	bge.n	800fe2c <f_mount+0x28>
 800fe28:	230b      	movs	r3, #11
 800fe2a:	e02b      	b.n	800fe84 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fe2c:	4a17      	ldr	r2, [pc, #92]	@ (800fe8c <f_mount+0x88>)
 800fe2e:	69fb      	ldr	r3, [r7, #28]
 800fe30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe34:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fe36:	69bb      	ldr	r3, [r7, #24]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d005      	beq.n	800fe48 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fe3c:	69b8      	ldr	r0, [r7, #24]
 800fe3e:	f7fe f9af 	bl	800e1a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fe42:	69bb      	ldr	r3, [r7, #24]
 800fe44:	2200      	movs	r2, #0
 800fe46:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d002      	beq.n	800fe54 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	2200      	movs	r2, #0
 800fe52:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fe54:	68fa      	ldr	r2, [r7, #12]
 800fe56:	490d      	ldr	r1, [pc, #52]	@ (800fe8c <f_mount+0x88>)
 800fe58:	69fb      	ldr	r3, [r7, #28]
 800fe5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d002      	beq.n	800fe6a <f_mount+0x66>
 800fe64:	79fb      	ldrb	r3, [r7, #7]
 800fe66:	2b01      	cmp	r3, #1
 800fe68:	d001      	beq.n	800fe6e <f_mount+0x6a>
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	e00a      	b.n	800fe84 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fe6e:	f107 010c 	add.w	r1, r7, #12
 800fe72:	f107 0308 	add.w	r3, r7, #8
 800fe76:	2200      	movs	r2, #0
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f7ff fd41 	bl	800f900 <find_volume>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fe82:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	3720      	adds	r7, #32
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}
 800fe8c:	2001894c 	.word	0x2001894c

0800fe90 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b09a      	sub	sp, #104	@ 0x68
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	60b9      	str	r1, [r7, #8]
 800fe9a:	4613      	mov	r3, r2
 800fe9c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d101      	bne.n	800fea8 <f_open+0x18>
 800fea4:	2309      	movs	r3, #9
 800fea6:	e1b9      	b.n	801021c <f_open+0x38c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fea8:	79fb      	ldrb	r3, [r7, #7]
 800feaa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800feae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800feb0:	79fa      	ldrb	r2, [r7, #7]
 800feb2:	f107 0110 	add.w	r1, r7, #16
 800feb6:	f107 0308 	add.w	r3, r7, #8
 800feba:	4618      	mov	r0, r3
 800febc:	f7ff fd20 	bl	800f900 <find_volume>
 800fec0:	4603      	mov	r3, r0
 800fec2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800fec6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800feca:	2b00      	cmp	r3, #0
 800fecc:	f040 819d 	bne.w	801020a <f_open+0x37a>
		dj.obj.fs = fs;
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800fed4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800fed8:	f000 fdef 	bl	8010aba <ff_memalloc>
 800fedc:	65b8      	str	r0, [r7, #88]	@ 0x58
 800fede:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d101      	bne.n	800fee8 <f_open+0x58>
 800fee4:	2311      	movs	r3, #17
 800fee6:	e199      	b.n	801021c <f_open+0x38c>
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800feec:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800feee:	68ba      	ldr	r2, [r7, #8]
 800fef0:	f107 0314 	add.w	r3, r7, #20
 800fef4:	4611      	mov	r1, r2
 800fef6:	4618      	mov	r0, r3
 800fef8:	f7ff fbf6 	bl	800f6e8 <follow_path>
 800fefc:	4603      	mov	r3, r0
 800fefe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ff02:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d118      	bne.n	800ff3c <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ff0a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ff0e:	b25b      	sxtb	r3, r3
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	da03      	bge.n	800ff1c <f_open+0x8c>
				res = FR_INVALID_NAME;
 800ff14:	2306      	movs	r3, #6
 800ff16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ff1a:	e00f      	b.n	800ff3c <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ff1c:	79fb      	ldrb	r3, [r7, #7]
 800ff1e:	2b01      	cmp	r3, #1
 800ff20:	bf8c      	ite	hi
 800ff22:	2301      	movhi	r3, #1
 800ff24:	2300      	movls	r3, #0
 800ff26:	b2db      	uxtb	r3, r3
 800ff28:	461a      	mov	r2, r3
 800ff2a:	f107 0314 	add.w	r3, r7, #20
 800ff2e:	4611      	mov	r1, r2
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7fd ffed 	bl	800df10 <chk_lock>
 800ff36:	4603      	mov	r3, r0
 800ff38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ff3c:	79fb      	ldrb	r3, [r7, #7]
 800ff3e:	f003 031c 	and.w	r3, r3, #28
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d07f      	beq.n	8010046 <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 800ff46:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d017      	beq.n	800ff7e <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ff4e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ff52:	2b04      	cmp	r3, #4
 800ff54:	d10e      	bne.n	800ff74 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ff56:	f7fe f837 	bl	800dfc8 <enq_lock>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d006      	beq.n	800ff6e <f_open+0xde>
 800ff60:	f107 0314 	add.w	r3, r7, #20
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7ff f90f 	bl	800f188 <dir_register>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	e000      	b.n	800ff70 <f_open+0xe0>
 800ff6e:	2312      	movs	r3, #18
 800ff70:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ff74:	79fb      	ldrb	r3, [r7, #7]
 800ff76:	f043 0308 	orr.w	r3, r3, #8
 800ff7a:	71fb      	strb	r3, [r7, #7]
 800ff7c:	e010      	b.n	800ffa0 <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ff7e:	7ebb      	ldrb	r3, [r7, #26]
 800ff80:	f003 0311 	and.w	r3, r3, #17
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d003      	beq.n	800ff90 <f_open+0x100>
					res = FR_DENIED;
 800ff88:	2307      	movs	r3, #7
 800ff8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ff8e:	e007      	b.n	800ffa0 <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ff90:	79fb      	ldrb	r3, [r7, #7]
 800ff92:	f003 0304 	and.w	r3, r3, #4
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d002      	beq.n	800ffa0 <f_open+0x110>
 800ff9a:	2308      	movs	r3, #8
 800ff9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ffa0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d168      	bne.n	801007a <f_open+0x1ea>
 800ffa8:	79fb      	ldrb	r3, [r7, #7]
 800ffaa:	f003 0308 	and.w	r3, r3, #8
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d063      	beq.n	801007a <f_open+0x1ea>
				dw = GET_FATTIME();
 800ffb2:	f7fd fea5 	bl	800dd00 <get_fattime>
 800ffb6:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ffb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffba:	330e      	adds	r3, #14
 800ffbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f7fd fefc 	bl	800ddbc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ffc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffc6:	3316      	adds	r3, #22
 800ffc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7fd fef6 	bl	800ddbc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ffd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffd2:	330b      	adds	r3, #11
 800ffd4:	2220      	movs	r2, #32
 800ffd6:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ffdc:	4611      	mov	r1, r2
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7fe fe4a 	bl	800ec78 <ld_clust>
 800ffe4:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ffe6:	693b      	ldr	r3, [r7, #16]
 800ffe8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ffea:	2200      	movs	r2, #0
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7fe fe62 	bl	800ecb6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fff4:	331c      	adds	r3, #28
 800fff6:	2100      	movs	r1, #0
 800fff8:	4618      	mov	r0, r3
 800fffa:	f7fd fedf 	bl	800ddbc <st_dword>
					fs->wflag = 1;
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	2201      	movs	r2, #1
 8010002:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010004:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010006:	2b00      	cmp	r3, #0
 8010008:	d037      	beq.n	801007a <f_open+0x1ea>
						dw = fs->winsect;
 801000a:	693b      	ldr	r3, [r7, #16]
 801000c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801000e:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8010010:	f107 0314 	add.w	r3, r7, #20
 8010014:	2200      	movs	r2, #0
 8010016:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010018:	4618      	mov	r0, r3
 801001a:	f7fe fb75 	bl	800e708 <remove_chain>
 801001e:	4603      	mov	r3, r0
 8010020:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8010024:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010028:	2b00      	cmp	r3, #0
 801002a:	d126      	bne.n	801007a <f_open+0x1ea>
							res = move_window(fs, dw);
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010030:	4618      	mov	r0, r3
 8010032:	f7fe f91d 	bl	800e270 <move_window>
 8010036:	4603      	mov	r3, r0
 8010038:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010040:	3a01      	subs	r2, #1
 8010042:	611a      	str	r2, [r3, #16]
 8010044:	e019      	b.n	801007a <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010046:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801004a:	2b00      	cmp	r3, #0
 801004c:	d115      	bne.n	801007a <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801004e:	7ebb      	ldrb	r3, [r7, #26]
 8010050:	f003 0310 	and.w	r3, r3, #16
 8010054:	2b00      	cmp	r3, #0
 8010056:	d003      	beq.n	8010060 <f_open+0x1d0>
					res = FR_NO_FILE;
 8010058:	2304      	movs	r3, #4
 801005a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801005e:	e00c      	b.n	801007a <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010060:	79fb      	ldrb	r3, [r7, #7]
 8010062:	f003 0302 	and.w	r3, r3, #2
 8010066:	2b00      	cmp	r3, #0
 8010068:	d007      	beq.n	801007a <f_open+0x1ea>
 801006a:	7ebb      	ldrb	r3, [r7, #26]
 801006c:	f003 0301 	and.w	r3, r3, #1
 8010070:	2b00      	cmp	r3, #0
 8010072:	d002      	beq.n	801007a <f_open+0x1ea>
						res = FR_DENIED;
 8010074:	2307      	movs	r3, #7
 8010076:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801007a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801007e:	2b00      	cmp	r3, #0
 8010080:	d126      	bne.n	80100d0 <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010082:	79fb      	ldrb	r3, [r7, #7]
 8010084:	f003 0308 	and.w	r3, r3, #8
 8010088:	2b00      	cmp	r3, #0
 801008a:	d003      	beq.n	8010094 <f_open+0x204>
				mode |= FA_MODIFIED;
 801008c:	79fb      	ldrb	r3, [r7, #7]
 801008e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010092:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801009c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80100a2:	79fb      	ldrb	r3, [r7, #7]
 80100a4:	2b01      	cmp	r3, #1
 80100a6:	bf8c      	ite	hi
 80100a8:	2301      	movhi	r3, #1
 80100aa:	2300      	movls	r3, #0
 80100ac:	b2db      	uxtb	r3, r3
 80100ae:	461a      	mov	r2, r3
 80100b0:	f107 0314 	add.w	r3, r7, #20
 80100b4:	4611      	mov	r1, r2
 80100b6:	4618      	mov	r0, r3
 80100b8:	f7fd ffa8 	bl	800e00c <inc_lock>
 80100bc:	4602      	mov	r2, r0
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	691b      	ldr	r3, [r3, #16]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d102      	bne.n	80100d0 <f_open+0x240>
 80100ca:	2302      	movs	r3, #2
 80100cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80100d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	f040 8095 	bne.w	8010204 <f_open+0x374>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80100de:	4611      	mov	r1, r2
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7fe fdc9 	bl	800ec78 <ld_clust>
 80100e6:	4602      	mov	r2, r0
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80100ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100ee:	331c      	adds	r3, #28
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7fd fe25 	bl	800dd40 <ld_dword>
 80100f6:	4602      	mov	r2, r0
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	2200      	movs	r2, #0
 8010100:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010102:	693a      	ldr	r2, [r7, #16]
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	88da      	ldrh	r2, [r3, #6]
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	79fa      	ldrb	r2, [r7, #7]
 8010114:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	2200      	movs	r2, #0
 801011a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	2200      	movs	r2, #0
 8010120:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	2200      	movs	r2, #0
 8010126:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	3330      	adds	r3, #48	@ 0x30
 801012c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010130:	2100      	movs	r1, #0
 8010132:	4618      	mov	r0, r3
 8010134:	f7fd fe8f 	bl	800de56 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010138:	79fb      	ldrb	r3, [r7, #7]
 801013a:	f003 0320 	and.w	r3, r3, #32
 801013e:	2b00      	cmp	r3, #0
 8010140:	d060      	beq.n	8010204 <f_open+0x374>
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	68db      	ldr	r3, [r3, #12]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d05c      	beq.n	8010204 <f_open+0x374>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	68da      	ldr	r2, [r3, #12]
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010152:	693b      	ldr	r3, [r7, #16]
 8010154:	895b      	ldrh	r3, [r3, #10]
 8010156:	025b      	lsls	r3, r3, #9
 8010158:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	689b      	ldr	r3, [r3, #8]
 801015e:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	68db      	ldr	r3, [r3, #12]
 8010164:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010166:	e016      	b.n	8010196 <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801016c:	4618      	mov	r0, r3
 801016e:	f7fe f93a 	bl	800e3e6 <get_fat>
 8010172:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8010174:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010176:	2b01      	cmp	r3, #1
 8010178:	d802      	bhi.n	8010180 <f_open+0x2f0>
 801017a:	2302      	movs	r3, #2
 801017c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010180:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010186:	d102      	bne.n	801018e <f_open+0x2fe>
 8010188:	2301      	movs	r3, #1
 801018a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801018e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010192:	1ad3      	subs	r3, r2, r3
 8010194:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010196:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801019a:	2b00      	cmp	r3, #0
 801019c:	d103      	bne.n	80101a6 <f_open+0x316>
 801019e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80101a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d8e0      	bhi.n	8010168 <f_open+0x2d8>
				}
				fp->clust = clst;
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80101aa:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80101ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d127      	bne.n	8010204 <f_open+0x374>
 80101b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80101b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d022      	beq.n	8010204 <f_open+0x374>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7fe f8f0 	bl	800e3a8 <clust2sect>
 80101c8:	64b8      	str	r0, [r7, #72]	@ 0x48
 80101ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d103      	bne.n	80101d8 <f_open+0x348>
						res = FR_INT_ERR;
 80101d0:	2302      	movs	r3, #2
 80101d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80101d6:	e015      	b.n	8010204 <f_open+0x374>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80101d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80101da:	0a5a      	lsrs	r2, r3, #9
 80101dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80101de:	441a      	add	r2, r3
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	7858      	ldrb	r0, [r3, #1]
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	6a1a      	ldr	r2, [r3, #32]
 80101f2:	2301      	movs	r3, #1
 80101f4:	f7fd fd26 	bl	800dc44 <disk_read>
 80101f8:	4603      	mov	r3, r0
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d002      	beq.n	8010204 <f_open+0x374>
 80101fe:	2301      	movs	r3, #1
 8010200:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8010204:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010206:	f000 fc64 	bl	8010ad2 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801020a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801020e:	2b00      	cmp	r3, #0
 8010210:	d002      	beq.n	8010218 <f_open+0x388>
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2200      	movs	r2, #0
 8010216:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010218:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801021c:	4618      	mov	r0, r3
 801021e:	3768      	adds	r7, #104	@ 0x68
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}

08010224 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b08e      	sub	sp, #56	@ 0x38
 8010228:	af00      	add	r7, sp, #0
 801022a:	60f8      	str	r0, [r7, #12]
 801022c:	60b9      	str	r1, [r7, #8]
 801022e:	607a      	str	r2, [r7, #4]
 8010230:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	2200      	movs	r2, #0
 801023a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	f107 0214 	add.w	r2, r7, #20
 8010242:	4611      	mov	r1, r2
 8010244:	4618      	mov	r0, r3
 8010246:	f7ff fda7 	bl	800fd98 <validate>
 801024a:	4603      	mov	r3, r0
 801024c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010250:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010254:	2b00      	cmp	r3, #0
 8010256:	d107      	bne.n	8010268 <f_read+0x44>
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	7d5b      	ldrb	r3, [r3, #21]
 801025c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010260:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010264:	2b00      	cmp	r3, #0
 8010266:	d002      	beq.n	801026e <f_read+0x4a>
 8010268:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801026c:	e115      	b.n	801049a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	7d1b      	ldrb	r3, [r3, #20]
 8010272:	f003 0301 	and.w	r3, r3, #1
 8010276:	2b00      	cmp	r3, #0
 8010278:	d101      	bne.n	801027e <f_read+0x5a>
 801027a:	2307      	movs	r3, #7
 801027c:	e10d      	b.n	801049a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	68da      	ldr	r2, [r3, #12]
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	699b      	ldr	r3, [r3, #24]
 8010286:	1ad3      	subs	r3, r2, r3
 8010288:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801028a:	687a      	ldr	r2, [r7, #4]
 801028c:	6a3b      	ldr	r3, [r7, #32]
 801028e:	429a      	cmp	r2, r3
 8010290:	f240 80fe 	bls.w	8010490 <f_read+0x26c>
 8010294:	6a3b      	ldr	r3, [r7, #32]
 8010296:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010298:	e0fa      	b.n	8010490 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	699b      	ldr	r3, [r3, #24]
 801029e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	f040 80c6 	bne.w	8010434 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	699b      	ldr	r3, [r3, #24]
 80102ac:	0a5b      	lsrs	r3, r3, #9
 80102ae:	697a      	ldr	r2, [r7, #20]
 80102b0:	8952      	ldrh	r2, [r2, #10]
 80102b2:	3a01      	subs	r2, #1
 80102b4:	4013      	ands	r3, r2
 80102b6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80102b8:	69fb      	ldr	r3, [r7, #28]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d12f      	bne.n	801031e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	699b      	ldr	r3, [r3, #24]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d103      	bne.n	80102ce <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	689b      	ldr	r3, [r3, #8]
 80102ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80102cc:	e013      	b.n	80102f6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d007      	beq.n	80102e6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	699b      	ldr	r3, [r3, #24]
 80102da:	4619      	mov	r1, r3
 80102dc:	68f8      	ldr	r0, [r7, #12]
 80102de:	f7fe fb10 	bl	800e902 <clmt_clust>
 80102e2:	6338      	str	r0, [r7, #48]	@ 0x30
 80102e4:	e007      	b.n	80102f6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80102e6:	68fa      	ldr	r2, [r7, #12]
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	69db      	ldr	r3, [r3, #28]
 80102ec:	4619      	mov	r1, r3
 80102ee:	4610      	mov	r0, r2
 80102f0:	f7fe f879 	bl	800e3e6 <get_fat>
 80102f4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80102f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102f8:	2b01      	cmp	r3, #1
 80102fa:	d804      	bhi.n	8010306 <f_read+0xe2>
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	2202      	movs	r2, #2
 8010300:	755a      	strb	r2, [r3, #21]
 8010302:	2302      	movs	r3, #2
 8010304:	e0c9      	b.n	801049a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010308:	f1b3 3fff 	cmp.w	r3, #4294967295
 801030c:	d104      	bne.n	8010318 <f_read+0xf4>
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	2201      	movs	r2, #1
 8010312:	755a      	strb	r2, [r3, #21]
 8010314:	2301      	movs	r3, #1
 8010316:	e0c0      	b.n	801049a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801031c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801031e:	697a      	ldr	r2, [r7, #20]
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	69db      	ldr	r3, [r3, #28]
 8010324:	4619      	mov	r1, r3
 8010326:	4610      	mov	r0, r2
 8010328:	f7fe f83e 	bl	800e3a8 <clust2sect>
 801032c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801032e:	69bb      	ldr	r3, [r7, #24]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d104      	bne.n	801033e <f_read+0x11a>
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	2202      	movs	r2, #2
 8010338:	755a      	strb	r2, [r3, #21]
 801033a:	2302      	movs	r3, #2
 801033c:	e0ad      	b.n	801049a <f_read+0x276>
			sect += csect;
 801033e:	69ba      	ldr	r2, [r7, #24]
 8010340:	69fb      	ldr	r3, [r7, #28]
 8010342:	4413      	add	r3, r2
 8010344:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	0a5b      	lsrs	r3, r3, #9
 801034a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801034c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801034e:	2b00      	cmp	r3, #0
 8010350:	d039      	beq.n	80103c6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010352:	69fa      	ldr	r2, [r7, #28]
 8010354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010356:	4413      	add	r3, r2
 8010358:	697a      	ldr	r2, [r7, #20]
 801035a:	8952      	ldrh	r2, [r2, #10]
 801035c:	4293      	cmp	r3, r2
 801035e:	d905      	bls.n	801036c <f_read+0x148>
					cc = fs->csize - csect;
 8010360:	697b      	ldr	r3, [r7, #20]
 8010362:	895b      	ldrh	r3, [r3, #10]
 8010364:	461a      	mov	r2, r3
 8010366:	69fb      	ldr	r3, [r7, #28]
 8010368:	1ad3      	subs	r3, r2, r3
 801036a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	7858      	ldrb	r0, [r3, #1]
 8010370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010372:	69ba      	ldr	r2, [r7, #24]
 8010374:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010376:	f7fd fc65 	bl	800dc44 <disk_read>
 801037a:	4603      	mov	r3, r0
 801037c:	2b00      	cmp	r3, #0
 801037e:	d004      	beq.n	801038a <f_read+0x166>
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	2201      	movs	r2, #1
 8010384:	755a      	strb	r2, [r3, #21]
 8010386:	2301      	movs	r3, #1
 8010388:	e087      	b.n	801049a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	7d1b      	ldrb	r3, [r3, #20]
 801038e:	b25b      	sxtb	r3, r3
 8010390:	2b00      	cmp	r3, #0
 8010392:	da14      	bge.n	80103be <f_read+0x19a>
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	6a1a      	ldr	r2, [r3, #32]
 8010398:	69bb      	ldr	r3, [r7, #24]
 801039a:	1ad3      	subs	r3, r2, r3
 801039c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801039e:	429a      	cmp	r2, r3
 80103a0:	d90d      	bls.n	80103be <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	6a1a      	ldr	r2, [r3, #32]
 80103a6:	69bb      	ldr	r3, [r7, #24]
 80103a8:	1ad3      	subs	r3, r2, r3
 80103aa:	025b      	lsls	r3, r3, #9
 80103ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80103ae:	18d0      	adds	r0, r2, r3
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	3330      	adds	r3, #48	@ 0x30
 80103b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80103b8:	4619      	mov	r1, r3
 80103ba:	f7fd fd2b 	bl	800de14 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80103be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103c0:	025b      	lsls	r3, r3, #9
 80103c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80103c4:	e050      	b.n	8010468 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	6a1b      	ldr	r3, [r3, #32]
 80103ca:	69ba      	ldr	r2, [r7, #24]
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d02e      	beq.n	801042e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	7d1b      	ldrb	r3, [r3, #20]
 80103d4:	b25b      	sxtb	r3, r3
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	da18      	bge.n	801040c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	7858      	ldrb	r0, [r3, #1]
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	6a1a      	ldr	r2, [r3, #32]
 80103e8:	2301      	movs	r3, #1
 80103ea:	f7fd fc4b 	bl	800dc84 <disk_write>
 80103ee:	4603      	mov	r3, r0
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d004      	beq.n	80103fe <f_read+0x1da>
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	2201      	movs	r2, #1
 80103f8:	755a      	strb	r2, [r3, #21]
 80103fa:	2301      	movs	r3, #1
 80103fc:	e04d      	b.n	801049a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	7d1b      	ldrb	r3, [r3, #20]
 8010402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010406:	b2da      	uxtb	r2, r3
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	7858      	ldrb	r0, [r3, #1]
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010416:	2301      	movs	r3, #1
 8010418:	69ba      	ldr	r2, [r7, #24]
 801041a:	f7fd fc13 	bl	800dc44 <disk_read>
 801041e:	4603      	mov	r3, r0
 8010420:	2b00      	cmp	r3, #0
 8010422:	d004      	beq.n	801042e <f_read+0x20a>
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	2201      	movs	r2, #1
 8010428:	755a      	strb	r2, [r3, #21]
 801042a:	2301      	movs	r3, #1
 801042c:	e035      	b.n	801049a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	69ba      	ldr	r2, [r7, #24]
 8010432:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	699b      	ldr	r3, [r3, #24]
 8010438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801043c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8010440:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010442:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	429a      	cmp	r2, r3
 8010448:	d901      	bls.n	801044e <f_read+0x22a>
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	699b      	ldr	r3, [r3, #24]
 8010458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801045c:	4413      	add	r3, r2
 801045e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010460:	4619      	mov	r1, r3
 8010462:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010464:	f7fd fcd6 	bl	800de14 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801046a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801046c:	4413      	add	r3, r2
 801046e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	699a      	ldr	r2, [r3, #24]
 8010474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010476:	441a      	add	r2, r3
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	619a      	str	r2, [r3, #24]
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	681a      	ldr	r2, [r3, #0]
 8010480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010482:	441a      	add	r2, r3
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	601a      	str	r2, [r3, #0]
 8010488:	687a      	ldr	r2, [r7, #4]
 801048a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801048c:	1ad3      	subs	r3, r2, r3
 801048e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2b00      	cmp	r3, #0
 8010494:	f47f af01 	bne.w	801029a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010498:	2300      	movs	r3, #0
}
 801049a:	4618      	mov	r0, r3
 801049c:	3738      	adds	r7, #56	@ 0x38
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}

080104a2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80104a2:	b580      	push	{r7, lr}
 80104a4:	b086      	sub	sp, #24
 80104a6:	af00      	add	r7, sp, #0
 80104a8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f107 0208 	add.w	r2, r7, #8
 80104b0:	4611      	mov	r1, r2
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7ff fc70 	bl	800fd98 <validate>
 80104b8:	4603      	mov	r3, r0
 80104ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80104bc:	7dfb      	ldrb	r3, [r7, #23]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d168      	bne.n	8010594 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	7d1b      	ldrb	r3, [r3, #20]
 80104c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d062      	beq.n	8010594 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	7d1b      	ldrb	r3, [r3, #20]
 80104d2:	b25b      	sxtb	r3, r3
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	da15      	bge.n	8010504 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	7858      	ldrb	r0, [r3, #1]
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6a1a      	ldr	r2, [r3, #32]
 80104e6:	2301      	movs	r3, #1
 80104e8:	f7fd fbcc 	bl	800dc84 <disk_write>
 80104ec:	4603      	mov	r3, r0
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d001      	beq.n	80104f6 <f_sync+0x54>
 80104f2:	2301      	movs	r3, #1
 80104f4:	e04f      	b.n	8010596 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	7d1b      	ldrb	r3, [r3, #20]
 80104fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80104fe:	b2da      	uxtb	r2, r3
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010504:	f7fd fbfc 	bl	800dd00 <get_fattime>
 8010508:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801050a:	68ba      	ldr	r2, [r7, #8]
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010510:	4619      	mov	r1, r3
 8010512:	4610      	mov	r0, r2
 8010514:	f7fd feac 	bl	800e270 <move_window>
 8010518:	4603      	mov	r3, r0
 801051a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801051c:	7dfb      	ldrb	r3, [r7, #23]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d138      	bne.n	8010594 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010526:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	330b      	adds	r3, #11
 801052c:	781a      	ldrb	r2, [r3, #0]
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	330b      	adds	r3, #11
 8010532:	f042 0220 	orr.w	r2, r2, #32
 8010536:	b2d2      	uxtb	r2, r2
 8010538:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6818      	ldr	r0, [r3, #0]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	689b      	ldr	r3, [r3, #8]
 8010542:	461a      	mov	r2, r3
 8010544:	68f9      	ldr	r1, [r7, #12]
 8010546:	f7fe fbb6 	bl	800ecb6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	f103 021c 	add.w	r2, r3, #28
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	68db      	ldr	r3, [r3, #12]
 8010554:	4619      	mov	r1, r3
 8010556:	4610      	mov	r0, r2
 8010558:	f7fd fc30 	bl	800ddbc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	3316      	adds	r3, #22
 8010560:	6939      	ldr	r1, [r7, #16]
 8010562:	4618      	mov	r0, r3
 8010564:	f7fd fc2a 	bl	800ddbc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	3312      	adds	r3, #18
 801056c:	2100      	movs	r1, #0
 801056e:	4618      	mov	r0, r3
 8010570:	f7fd fc09 	bl	800dd86 <st_word>
					fs->wflag = 1;
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	2201      	movs	r2, #1
 8010578:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	4618      	mov	r0, r3
 801057e:	f7fd fea5 	bl	800e2cc <sync_fs>
 8010582:	4603      	mov	r3, r0
 8010584:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	7d1b      	ldrb	r3, [r3, #20]
 801058a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801058e:	b2da      	uxtb	r2, r3
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010594:	7dfb      	ldrb	r3, [r7, #23]
}
 8010596:	4618      	mov	r0, r3
 8010598:	3718      	adds	r7, #24
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}

0801059e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801059e:	b580      	push	{r7, lr}
 80105a0:	b084      	sub	sp, #16
 80105a2:	af00      	add	r7, sp, #0
 80105a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f7ff ff7b 	bl	80104a2 <f_sync>
 80105ac:	4603      	mov	r3, r0
 80105ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80105b0:	7bfb      	ldrb	r3, [r7, #15]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d118      	bne.n	80105e8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f107 0208 	add.w	r2, r7, #8
 80105bc:	4611      	mov	r1, r2
 80105be:	4618      	mov	r0, r3
 80105c0:	f7ff fbea 	bl	800fd98 <validate>
 80105c4:	4603      	mov	r3, r0
 80105c6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80105c8:	7bfb      	ldrb	r3, [r7, #15]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d10c      	bne.n	80105e8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	691b      	ldr	r3, [r3, #16]
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7fd fda8 	bl	800e128 <dec_lock>
 80105d8:	4603      	mov	r3, r0
 80105da:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80105dc:	7bfb      	ldrb	r3, [r7, #15]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d102      	bne.n	80105e8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2200      	movs	r2, #0
 80105e6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80105e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3710      	adds	r7, #16
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}

080105f2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80105f2:	b580      	push	{r7, lr}
 80105f4:	b090      	sub	sp, #64	@ 0x40
 80105f6:	af00      	add	r7, sp, #0
 80105f8:	6078      	str	r0, [r7, #4]
 80105fa:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f107 0208 	add.w	r2, r7, #8
 8010602:	4611      	mov	r1, r2
 8010604:	4618      	mov	r0, r3
 8010606:	f7ff fbc7 	bl	800fd98 <validate>
 801060a:	4603      	mov	r3, r0
 801060c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010610:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010614:	2b00      	cmp	r3, #0
 8010616:	d103      	bne.n	8010620 <f_lseek+0x2e>
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	7d5b      	ldrb	r3, [r3, #21]
 801061c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010620:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010624:	2b00      	cmp	r3, #0
 8010626:	d002      	beq.n	801062e <f_lseek+0x3c>
 8010628:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801062c:	e1e6      	b.n	80109fc <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010632:	2b00      	cmp	r3, #0
 8010634:	f000 80d1 	beq.w	80107da <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801063e:	d15a      	bne.n	80106f6 <f_lseek+0x104>
			tbl = fp->cltbl;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010644:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010648:	1d1a      	adds	r2, r3, #4
 801064a:	627a      	str	r2, [r7, #36]	@ 0x24
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	617b      	str	r3, [r7, #20]
 8010650:	2302      	movs	r3, #2
 8010652:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	689b      	ldr	r3, [r3, #8]
 8010658:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 801065a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801065c:	2b00      	cmp	r3, #0
 801065e:	d03a      	beq.n	80106d6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010662:	613b      	str	r3, [r7, #16]
 8010664:	2300      	movs	r3, #0
 8010666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801066a:	3302      	adds	r3, #2
 801066c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 801066e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010670:	60fb      	str	r3, [r7, #12]
 8010672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010674:	3301      	adds	r3, #1
 8010676:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801067c:	4618      	mov	r0, r3
 801067e:	f7fd feb2 	bl	800e3e6 <get_fat>
 8010682:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010686:	2b01      	cmp	r3, #1
 8010688:	d804      	bhi.n	8010694 <f_lseek+0xa2>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2202      	movs	r2, #2
 801068e:	755a      	strb	r2, [r3, #21]
 8010690:	2302      	movs	r3, #2
 8010692:	e1b3      	b.n	80109fc <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010696:	f1b3 3fff 	cmp.w	r3, #4294967295
 801069a:	d104      	bne.n	80106a6 <f_lseek+0xb4>
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2201      	movs	r2, #1
 80106a0:	755a      	strb	r2, [r3, #21]
 80106a2:	2301      	movs	r3, #1
 80106a4:	e1aa      	b.n	80109fc <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	3301      	adds	r3, #1
 80106aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d0de      	beq.n	801066e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80106b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d809      	bhi.n	80106cc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80106b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106ba:	1d1a      	adds	r2, r3, #4
 80106bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80106be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80106c0:	601a      	str	r2, [r3, #0]
 80106c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106c4:	1d1a      	adds	r2, r3, #4
 80106c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80106c8:	693a      	ldr	r2, [r7, #16]
 80106ca:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	699b      	ldr	r3, [r3, #24]
 80106d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80106d2:	429a      	cmp	r2, r3
 80106d4:	d3c4      	bcc.n	8010660 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80106dc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80106de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d803      	bhi.n	80106ee <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80106e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106e8:	2200      	movs	r2, #0
 80106ea:	601a      	str	r2, [r3, #0]
 80106ec:	e184      	b.n	80109f8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80106ee:	2311      	movs	r3, #17
 80106f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80106f4:	e180      	b.n	80109f8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	68db      	ldr	r3, [r3, #12]
 80106fa:	683a      	ldr	r2, [r7, #0]
 80106fc:	429a      	cmp	r2, r3
 80106fe:	d902      	bls.n	8010706 <f_lseek+0x114>
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	68db      	ldr	r3, [r3, #12]
 8010704:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	683a      	ldr	r2, [r7, #0]
 801070a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	2b00      	cmp	r3, #0
 8010710:	f000 8172 	beq.w	80109f8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	3b01      	subs	r3, #1
 8010718:	4619      	mov	r1, r3
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f7fe f8f1 	bl	800e902 <clmt_clust>
 8010720:	4602      	mov	r2, r0
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010726:	68ba      	ldr	r2, [r7, #8]
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	69db      	ldr	r3, [r3, #28]
 801072c:	4619      	mov	r1, r3
 801072e:	4610      	mov	r0, r2
 8010730:	f7fd fe3a 	bl	800e3a8 <clust2sect>
 8010734:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010736:	69bb      	ldr	r3, [r7, #24]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d104      	bne.n	8010746 <f_lseek+0x154>
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2202      	movs	r2, #2
 8010740:	755a      	strb	r2, [r3, #21]
 8010742:	2302      	movs	r3, #2
 8010744:	e15a      	b.n	80109fc <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	3b01      	subs	r3, #1
 801074a:	0a5b      	lsrs	r3, r3, #9
 801074c:	68ba      	ldr	r2, [r7, #8]
 801074e:	8952      	ldrh	r2, [r2, #10]
 8010750:	3a01      	subs	r2, #1
 8010752:	4013      	ands	r3, r2
 8010754:	69ba      	ldr	r2, [r7, #24]
 8010756:	4413      	add	r3, r2
 8010758:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	699b      	ldr	r3, [r3, #24]
 801075e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010762:	2b00      	cmp	r3, #0
 8010764:	f000 8148 	beq.w	80109f8 <f_lseek+0x406>
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6a1b      	ldr	r3, [r3, #32]
 801076c:	69ba      	ldr	r2, [r7, #24]
 801076e:	429a      	cmp	r2, r3
 8010770:	f000 8142 	beq.w	80109f8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	7d1b      	ldrb	r3, [r3, #20]
 8010778:	b25b      	sxtb	r3, r3
 801077a:	2b00      	cmp	r3, #0
 801077c:	da18      	bge.n	80107b0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	7858      	ldrb	r0, [r3, #1]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6a1a      	ldr	r2, [r3, #32]
 801078c:	2301      	movs	r3, #1
 801078e:	f7fd fa79 	bl	800dc84 <disk_write>
 8010792:	4603      	mov	r3, r0
 8010794:	2b00      	cmp	r3, #0
 8010796:	d004      	beq.n	80107a2 <f_lseek+0x1b0>
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2201      	movs	r2, #1
 801079c:	755a      	strb	r2, [r3, #21]
 801079e:	2301      	movs	r3, #1
 80107a0:	e12c      	b.n	80109fc <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	7d1b      	ldrb	r3, [r3, #20]
 80107a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80107aa:	b2da      	uxtb	r2, r3
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	7858      	ldrb	r0, [r3, #1]
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80107ba:	2301      	movs	r3, #1
 80107bc:	69ba      	ldr	r2, [r7, #24]
 80107be:	f7fd fa41 	bl	800dc44 <disk_read>
 80107c2:	4603      	mov	r3, r0
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d004      	beq.n	80107d2 <f_lseek+0x1e0>
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2201      	movs	r2, #1
 80107cc:	755a      	strb	r2, [r3, #21]
 80107ce:	2301      	movs	r3, #1
 80107d0:	e114      	b.n	80109fc <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	69ba      	ldr	r2, [r7, #24]
 80107d6:	621a      	str	r2, [r3, #32]
 80107d8:	e10e      	b.n	80109f8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	68db      	ldr	r3, [r3, #12]
 80107de:	683a      	ldr	r2, [r7, #0]
 80107e0:	429a      	cmp	r2, r3
 80107e2:	d908      	bls.n	80107f6 <f_lseek+0x204>
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	7d1b      	ldrb	r3, [r3, #20]
 80107e8:	f003 0302 	and.w	r3, r3, #2
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d102      	bne.n	80107f6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	68db      	ldr	r3, [r3, #12]
 80107f4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	699b      	ldr	r3, [r3, #24]
 80107fa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80107fc:	2300      	movs	r3, #0
 80107fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010804:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	2b00      	cmp	r3, #0
 801080a:	f000 80a7 	beq.w	801095c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	895b      	ldrh	r3, [r3, #10]
 8010812:	025b      	lsls	r3, r3, #9
 8010814:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010816:	6a3b      	ldr	r3, [r7, #32]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d01b      	beq.n	8010854 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	1e5a      	subs	r2, r3, #1
 8010820:	69fb      	ldr	r3, [r7, #28]
 8010822:	fbb2 f2f3 	udiv	r2, r2, r3
 8010826:	6a3b      	ldr	r3, [r7, #32]
 8010828:	1e59      	subs	r1, r3, #1
 801082a:	69fb      	ldr	r3, [r7, #28]
 801082c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010830:	429a      	cmp	r2, r3
 8010832:	d30f      	bcc.n	8010854 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010834:	6a3b      	ldr	r3, [r7, #32]
 8010836:	1e5a      	subs	r2, r3, #1
 8010838:	69fb      	ldr	r3, [r7, #28]
 801083a:	425b      	negs	r3, r3
 801083c:	401a      	ands	r2, r3
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	699b      	ldr	r3, [r3, #24]
 8010846:	683a      	ldr	r2, [r7, #0]
 8010848:	1ad3      	subs	r3, r2, r3
 801084a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	69db      	ldr	r3, [r3, #28]
 8010850:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010852:	e022      	b.n	801089a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	689b      	ldr	r3, [r3, #8]
 8010858:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801085a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801085c:	2b00      	cmp	r3, #0
 801085e:	d119      	bne.n	8010894 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2100      	movs	r1, #0
 8010864:	4618      	mov	r0, r3
 8010866:	f7fd ffb4 	bl	800e7d2 <create_chain>
 801086a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801086c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801086e:	2b01      	cmp	r3, #1
 8010870:	d104      	bne.n	801087c <f_lseek+0x28a>
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2202      	movs	r2, #2
 8010876:	755a      	strb	r2, [r3, #21]
 8010878:	2302      	movs	r3, #2
 801087a:	e0bf      	b.n	80109fc <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801087c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801087e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010882:	d104      	bne.n	801088e <f_lseek+0x29c>
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2201      	movs	r2, #1
 8010888:	755a      	strb	r2, [r3, #21]
 801088a:	2301      	movs	r3, #1
 801088c:	e0b6      	b.n	80109fc <f_lseek+0x40a>
					fp->obj.sclust = clst;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010892:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010898:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801089a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801089c:	2b00      	cmp	r3, #0
 801089e:	d05d      	beq.n	801095c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80108a0:	e03a      	b.n	8010918 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80108a2:	683a      	ldr	r2, [r7, #0]
 80108a4:	69fb      	ldr	r3, [r7, #28]
 80108a6:	1ad3      	subs	r3, r2, r3
 80108a8:	603b      	str	r3, [r7, #0]
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	699a      	ldr	r2, [r3, #24]
 80108ae:	69fb      	ldr	r3, [r7, #28]
 80108b0:	441a      	add	r2, r3
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	7d1b      	ldrb	r3, [r3, #20]
 80108ba:	f003 0302 	and.w	r3, r3, #2
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d00b      	beq.n	80108da <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7fd ff83 	bl	800e7d2 <create_chain>
 80108cc:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80108ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d108      	bne.n	80108e6 <f_lseek+0x2f4>
							ofs = 0; break;
 80108d4:	2300      	movs	r3, #0
 80108d6:	603b      	str	r3, [r7, #0]
 80108d8:	e022      	b.n	8010920 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80108de:	4618      	mov	r0, r3
 80108e0:	f7fd fd81 	bl	800e3e6 <get_fat>
 80108e4:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80108e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108ec:	d104      	bne.n	80108f8 <f_lseek+0x306>
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2201      	movs	r2, #1
 80108f2:	755a      	strb	r2, [r3, #21]
 80108f4:	2301      	movs	r3, #1
 80108f6:	e081      	b.n	80109fc <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80108f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108fa:	2b01      	cmp	r3, #1
 80108fc:	d904      	bls.n	8010908 <f_lseek+0x316>
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	699b      	ldr	r3, [r3, #24]
 8010902:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010904:	429a      	cmp	r2, r3
 8010906:	d304      	bcc.n	8010912 <f_lseek+0x320>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2202      	movs	r2, #2
 801090c:	755a      	strb	r2, [r3, #21]
 801090e:	2302      	movs	r3, #2
 8010910:	e074      	b.n	80109fc <f_lseek+0x40a>
					fp->clust = clst;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010916:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010918:	683a      	ldr	r2, [r7, #0]
 801091a:	69fb      	ldr	r3, [r7, #28]
 801091c:	429a      	cmp	r2, r3
 801091e:	d8c0      	bhi.n	80108a2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	699a      	ldr	r2, [r3, #24]
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	441a      	add	r2, r3
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010932:	2b00      	cmp	r3, #0
 8010934:	d012      	beq.n	801095c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010936:	68bb      	ldr	r3, [r7, #8]
 8010938:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801093a:	4618      	mov	r0, r3
 801093c:	f7fd fd34 	bl	800e3a8 <clust2sect>
 8010940:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010944:	2b00      	cmp	r3, #0
 8010946:	d104      	bne.n	8010952 <f_lseek+0x360>
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2202      	movs	r2, #2
 801094c:	755a      	strb	r2, [r3, #21]
 801094e:	2302      	movs	r3, #2
 8010950:	e054      	b.n	80109fc <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	0a5b      	lsrs	r3, r3, #9
 8010956:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010958:	4413      	add	r3, r2
 801095a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	699a      	ldr	r2, [r3, #24]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	68db      	ldr	r3, [r3, #12]
 8010964:	429a      	cmp	r2, r3
 8010966:	d90a      	bls.n	801097e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	699a      	ldr	r2, [r3, #24]
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	7d1b      	ldrb	r3, [r3, #20]
 8010974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010978:	b2da      	uxtb	r2, r3
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	699b      	ldr	r3, [r3, #24]
 8010982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010986:	2b00      	cmp	r3, #0
 8010988:	d036      	beq.n	80109f8 <f_lseek+0x406>
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	6a1b      	ldr	r3, [r3, #32]
 801098e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010990:	429a      	cmp	r2, r3
 8010992:	d031      	beq.n	80109f8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	7d1b      	ldrb	r3, [r3, #20]
 8010998:	b25b      	sxtb	r3, r3
 801099a:	2b00      	cmp	r3, #0
 801099c:	da18      	bge.n	80109d0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	7858      	ldrb	r0, [r3, #1]
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6a1a      	ldr	r2, [r3, #32]
 80109ac:	2301      	movs	r3, #1
 80109ae:	f7fd f969 	bl	800dc84 <disk_write>
 80109b2:	4603      	mov	r3, r0
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d004      	beq.n	80109c2 <f_lseek+0x3d0>
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2201      	movs	r2, #1
 80109bc:	755a      	strb	r2, [r3, #21]
 80109be:	2301      	movs	r3, #1
 80109c0:	e01c      	b.n	80109fc <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	7d1b      	ldrb	r3, [r3, #20]
 80109c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80109ca:	b2da      	uxtb	r2, r3
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	7858      	ldrb	r0, [r3, #1]
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80109da:	2301      	movs	r3, #1
 80109dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80109de:	f7fd f931 	bl	800dc44 <disk_read>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d004      	beq.n	80109f2 <f_lseek+0x400>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	2201      	movs	r2, #1
 80109ec:	755a      	strb	r2, [r3, #21]
 80109ee:	2301      	movs	r3, #1
 80109f0:	e004      	b.n	80109fc <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80109f6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80109f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80109fc:	4618      	mov	r0, r3
 80109fe:	3740      	adds	r7, #64	@ 0x40
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}

08010a04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010a04:	b480      	push	{r7}
 8010a06:	b087      	sub	sp, #28
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	60f8      	str	r0, [r7, #12]
 8010a0c:	60b9      	str	r1, [r7, #8]
 8010a0e:	4613      	mov	r3, r2
 8010a10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010a12:	2301      	movs	r3, #1
 8010a14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010a16:	2300      	movs	r3, #0
 8010a18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8010a98 <FATFS_LinkDriverEx+0x94>)
 8010a1c:	7a5b      	ldrb	r3, [r3, #9]
 8010a1e:	b2db      	uxtb	r3, r3
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d131      	bne.n	8010a88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010a24:	4b1c      	ldr	r3, [pc, #112]	@ (8010a98 <FATFS_LinkDriverEx+0x94>)
 8010a26:	7a5b      	ldrb	r3, [r3, #9]
 8010a28:	b2db      	uxtb	r3, r3
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8010a98 <FATFS_LinkDriverEx+0x94>)
 8010a2e:	2100      	movs	r1, #0
 8010a30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010a32:	4b19      	ldr	r3, [pc, #100]	@ (8010a98 <FATFS_LinkDriverEx+0x94>)
 8010a34:	7a5b      	ldrb	r3, [r3, #9]
 8010a36:	b2db      	uxtb	r3, r3
 8010a38:	4a17      	ldr	r2, [pc, #92]	@ (8010a98 <FATFS_LinkDriverEx+0x94>)
 8010a3a:	009b      	lsls	r3, r3, #2
 8010a3c:	4413      	add	r3, r2
 8010a3e:	68fa      	ldr	r2, [r7, #12]
 8010a40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010a42:	4b15      	ldr	r3, [pc, #84]	@ (8010a98 <FATFS_LinkDriverEx+0x94>)
 8010a44:	7a5b      	ldrb	r3, [r3, #9]
 8010a46:	b2db      	uxtb	r3, r3
 8010a48:	461a      	mov	r2, r3
 8010a4a:	4b13      	ldr	r3, [pc, #76]	@ (8010a98 <FATFS_LinkDriverEx+0x94>)
 8010a4c:	4413      	add	r3, r2
 8010a4e:	79fa      	ldrb	r2, [r7, #7]
 8010a50:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010a52:	4b11      	ldr	r3, [pc, #68]	@ (8010a98 <FATFS_LinkDriverEx+0x94>)
 8010a54:	7a5b      	ldrb	r3, [r3, #9]
 8010a56:	b2db      	uxtb	r3, r3
 8010a58:	1c5a      	adds	r2, r3, #1
 8010a5a:	b2d1      	uxtb	r1, r2
 8010a5c:	4a0e      	ldr	r2, [pc, #56]	@ (8010a98 <FATFS_LinkDriverEx+0x94>)
 8010a5e:	7251      	strb	r1, [r2, #9]
 8010a60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010a62:	7dbb      	ldrb	r3, [r7, #22]
 8010a64:	3330      	adds	r3, #48	@ 0x30
 8010a66:	b2da      	uxtb	r2, r3
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	3301      	adds	r3, #1
 8010a70:	223a      	movs	r2, #58	@ 0x3a
 8010a72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	3302      	adds	r3, #2
 8010a78:	222f      	movs	r2, #47	@ 0x2f
 8010a7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	3303      	adds	r3, #3
 8010a80:	2200      	movs	r2, #0
 8010a82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010a84:	2300      	movs	r3, #0
 8010a86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	371c      	adds	r7, #28
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a94:	4770      	bx	lr
 8010a96:	bf00      	nop
 8010a98:	20018974 	.word	0x20018974

08010a9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b082      	sub	sp, #8
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	6839      	ldr	r1, [r7, #0]
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f7ff ffaa 	bl	8010a04 <FATFS_LinkDriverEx>
 8010ab0:	4603      	mov	r3, r0
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3708      	adds	r7, #8
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}

08010aba <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8010aba:	b580      	push	{r7, lr}
 8010abc:	b082      	sub	sp, #8
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f000 f8d6 	bl	8010c74 <malloc>
 8010ac8:	4603      	mov	r3, r0
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	3708      	adds	r7, #8
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}

08010ad2 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8010ad2:	b580      	push	{r7, lr}
 8010ad4:	b082      	sub	sp, #8
 8010ad6:	af00      	add	r7, sp, #0
 8010ad8:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f000 f8d2 	bl	8010c84 <free>
}
 8010ae0:	bf00      	nop
 8010ae2:	3708      	adds	r7, #8
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}

08010ae8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b085      	sub	sp, #20
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	4603      	mov	r3, r0
 8010af0:	6039      	str	r1, [r7, #0]
 8010af2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010af4:	88fb      	ldrh	r3, [r7, #6]
 8010af6:	2b7f      	cmp	r3, #127	@ 0x7f
 8010af8:	d802      	bhi.n	8010b00 <ff_convert+0x18>
		c = chr;
 8010afa:	88fb      	ldrh	r3, [r7, #6]
 8010afc:	81fb      	strh	r3, [r7, #14]
 8010afe:	e025      	b.n	8010b4c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d00b      	beq.n	8010b1e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010b06:	88fb      	ldrh	r3, [r7, #6]
 8010b08:	2bff      	cmp	r3, #255	@ 0xff
 8010b0a:	d805      	bhi.n	8010b18 <ff_convert+0x30>
 8010b0c:	88fb      	ldrh	r3, [r7, #6]
 8010b0e:	3b80      	subs	r3, #128	@ 0x80
 8010b10:	4a12      	ldr	r2, [pc, #72]	@ (8010b5c <ff_convert+0x74>)
 8010b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b16:	e000      	b.n	8010b1a <ff_convert+0x32>
 8010b18:	2300      	movs	r3, #0
 8010b1a:	81fb      	strh	r3, [r7, #14]
 8010b1c:	e016      	b.n	8010b4c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010b1e:	2300      	movs	r3, #0
 8010b20:	81fb      	strh	r3, [r7, #14]
 8010b22:	e009      	b.n	8010b38 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010b24:	89fb      	ldrh	r3, [r7, #14]
 8010b26:	4a0d      	ldr	r2, [pc, #52]	@ (8010b5c <ff_convert+0x74>)
 8010b28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b2c:	88fa      	ldrh	r2, [r7, #6]
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	d006      	beq.n	8010b40 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010b32:	89fb      	ldrh	r3, [r7, #14]
 8010b34:	3301      	adds	r3, #1
 8010b36:	81fb      	strh	r3, [r7, #14]
 8010b38:	89fb      	ldrh	r3, [r7, #14]
 8010b3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8010b3c:	d9f2      	bls.n	8010b24 <ff_convert+0x3c>
 8010b3e:	e000      	b.n	8010b42 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010b40:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010b42:	89fb      	ldrh	r3, [r7, #14]
 8010b44:	3380      	adds	r3, #128	@ 0x80
 8010b46:	b29b      	uxth	r3, r3
 8010b48:	b2db      	uxtb	r3, r3
 8010b4a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010b4c:	89fb      	ldrh	r3, [r7, #14]
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3714      	adds	r7, #20
 8010b52:	46bd      	mov	sp, r7
 8010b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b58:	4770      	bx	lr
 8010b5a:	bf00      	nop
 8010b5c:	080119b0 	.word	0x080119b0

08010b60 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010b60:	b480      	push	{r7}
 8010b62:	b087      	sub	sp, #28
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	4603      	mov	r3, r0
 8010b68:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010b6a:	88fb      	ldrh	r3, [r7, #6]
 8010b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010b70:	d201      	bcs.n	8010b76 <ff_wtoupper+0x16>
 8010b72:	4b3e      	ldr	r3, [pc, #248]	@ (8010c6c <ff_wtoupper+0x10c>)
 8010b74:	e000      	b.n	8010b78 <ff_wtoupper+0x18>
 8010b76:	4b3e      	ldr	r3, [pc, #248]	@ (8010c70 <ff_wtoupper+0x110>)
 8010b78:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	1c9a      	adds	r2, r3, #2
 8010b7e:	617a      	str	r2, [r7, #20]
 8010b80:	881b      	ldrh	r3, [r3, #0]
 8010b82:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010b84:	8a7b      	ldrh	r3, [r7, #18]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d068      	beq.n	8010c5c <ff_wtoupper+0xfc>
 8010b8a:	88fa      	ldrh	r2, [r7, #6]
 8010b8c:	8a7b      	ldrh	r3, [r7, #18]
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d364      	bcc.n	8010c5c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010b92:	697b      	ldr	r3, [r7, #20]
 8010b94:	1c9a      	adds	r2, r3, #2
 8010b96:	617a      	str	r2, [r7, #20]
 8010b98:	881b      	ldrh	r3, [r3, #0]
 8010b9a:	823b      	strh	r3, [r7, #16]
 8010b9c:	8a3b      	ldrh	r3, [r7, #16]
 8010b9e:	0a1b      	lsrs	r3, r3, #8
 8010ba0:	81fb      	strh	r3, [r7, #14]
 8010ba2:	8a3b      	ldrh	r3, [r7, #16]
 8010ba4:	b2db      	uxtb	r3, r3
 8010ba6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010ba8:	88fa      	ldrh	r2, [r7, #6]
 8010baa:	8a79      	ldrh	r1, [r7, #18]
 8010bac:	8a3b      	ldrh	r3, [r7, #16]
 8010bae:	440b      	add	r3, r1
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	da49      	bge.n	8010c48 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010bb4:	89fb      	ldrh	r3, [r7, #14]
 8010bb6:	2b08      	cmp	r3, #8
 8010bb8:	d84f      	bhi.n	8010c5a <ff_wtoupper+0xfa>
 8010bba:	a201      	add	r2, pc, #4	@ (adr r2, 8010bc0 <ff_wtoupper+0x60>)
 8010bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bc0:	08010be5 	.word	0x08010be5
 8010bc4:	08010bf7 	.word	0x08010bf7
 8010bc8:	08010c0d 	.word	0x08010c0d
 8010bcc:	08010c15 	.word	0x08010c15
 8010bd0:	08010c1d 	.word	0x08010c1d
 8010bd4:	08010c25 	.word	0x08010c25
 8010bd8:	08010c2d 	.word	0x08010c2d
 8010bdc:	08010c35 	.word	0x08010c35
 8010be0:	08010c3d 	.word	0x08010c3d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010be4:	88fa      	ldrh	r2, [r7, #6]
 8010be6:	8a7b      	ldrh	r3, [r7, #18]
 8010be8:	1ad3      	subs	r3, r2, r3
 8010bea:	005b      	lsls	r3, r3, #1
 8010bec:	697a      	ldr	r2, [r7, #20]
 8010bee:	4413      	add	r3, r2
 8010bf0:	881b      	ldrh	r3, [r3, #0]
 8010bf2:	80fb      	strh	r3, [r7, #6]
 8010bf4:	e027      	b.n	8010c46 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010bf6:	88fa      	ldrh	r2, [r7, #6]
 8010bf8:	8a7b      	ldrh	r3, [r7, #18]
 8010bfa:	1ad3      	subs	r3, r2, r3
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	f003 0301 	and.w	r3, r3, #1
 8010c02:	b29b      	uxth	r3, r3
 8010c04:	88fa      	ldrh	r2, [r7, #6]
 8010c06:	1ad3      	subs	r3, r2, r3
 8010c08:	80fb      	strh	r3, [r7, #6]
 8010c0a:	e01c      	b.n	8010c46 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010c0c:	88fb      	ldrh	r3, [r7, #6]
 8010c0e:	3b10      	subs	r3, #16
 8010c10:	80fb      	strh	r3, [r7, #6]
 8010c12:	e018      	b.n	8010c46 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010c14:	88fb      	ldrh	r3, [r7, #6]
 8010c16:	3b20      	subs	r3, #32
 8010c18:	80fb      	strh	r3, [r7, #6]
 8010c1a:	e014      	b.n	8010c46 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010c1c:	88fb      	ldrh	r3, [r7, #6]
 8010c1e:	3b30      	subs	r3, #48	@ 0x30
 8010c20:	80fb      	strh	r3, [r7, #6]
 8010c22:	e010      	b.n	8010c46 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010c24:	88fb      	ldrh	r3, [r7, #6]
 8010c26:	3b1a      	subs	r3, #26
 8010c28:	80fb      	strh	r3, [r7, #6]
 8010c2a:	e00c      	b.n	8010c46 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010c2c:	88fb      	ldrh	r3, [r7, #6]
 8010c2e:	3308      	adds	r3, #8
 8010c30:	80fb      	strh	r3, [r7, #6]
 8010c32:	e008      	b.n	8010c46 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010c34:	88fb      	ldrh	r3, [r7, #6]
 8010c36:	3b50      	subs	r3, #80	@ 0x50
 8010c38:	80fb      	strh	r3, [r7, #6]
 8010c3a:	e004      	b.n	8010c46 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010c3c:	88fb      	ldrh	r3, [r7, #6]
 8010c3e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8010c42:	80fb      	strh	r3, [r7, #6]
 8010c44:	bf00      	nop
			}
			break;
 8010c46:	e008      	b.n	8010c5a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010c48:	89fb      	ldrh	r3, [r7, #14]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d195      	bne.n	8010b7a <ff_wtoupper+0x1a>
 8010c4e:	8a3b      	ldrh	r3, [r7, #16]
 8010c50:	005b      	lsls	r3, r3, #1
 8010c52:	697a      	ldr	r2, [r7, #20]
 8010c54:	4413      	add	r3, r2
 8010c56:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010c58:	e78f      	b.n	8010b7a <ff_wtoupper+0x1a>
			break;
 8010c5a:	bf00      	nop
	}

	return chr;
 8010c5c:	88fb      	ldrh	r3, [r7, #6]
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	371c      	adds	r7, #28
 8010c62:	46bd      	mov	sp, r7
 8010c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c68:	4770      	bx	lr
 8010c6a:	bf00      	nop
 8010c6c:	08011ab0 	.word	0x08011ab0
 8010c70:	08011ca4 	.word	0x08011ca4

08010c74 <malloc>:
 8010c74:	4b02      	ldr	r3, [pc, #8]	@ (8010c80 <malloc+0xc>)
 8010c76:	4601      	mov	r1, r0
 8010c78:	6818      	ldr	r0, [r3, #0]
 8010c7a:	f000 b82d 	b.w	8010cd8 <_malloc_r>
 8010c7e:	bf00      	nop
 8010c80:	20000010 	.word	0x20000010

08010c84 <free>:
 8010c84:	4b02      	ldr	r3, [pc, #8]	@ (8010c90 <free+0xc>)
 8010c86:	4601      	mov	r1, r0
 8010c88:	6818      	ldr	r0, [r3, #0]
 8010c8a:	f000 b929 	b.w	8010ee0 <_free_r>
 8010c8e:	bf00      	nop
 8010c90:	20000010 	.word	0x20000010

08010c94 <sbrk_aligned>:
 8010c94:	b570      	push	{r4, r5, r6, lr}
 8010c96:	4e0f      	ldr	r6, [pc, #60]	@ (8010cd4 <sbrk_aligned+0x40>)
 8010c98:	460c      	mov	r4, r1
 8010c9a:	6831      	ldr	r1, [r6, #0]
 8010c9c:	4605      	mov	r5, r0
 8010c9e:	b911      	cbnz	r1, 8010ca6 <sbrk_aligned+0x12>
 8010ca0:	f000 f8e2 	bl	8010e68 <_sbrk_r>
 8010ca4:	6030      	str	r0, [r6, #0]
 8010ca6:	4621      	mov	r1, r4
 8010ca8:	4628      	mov	r0, r5
 8010caa:	f000 f8dd 	bl	8010e68 <_sbrk_r>
 8010cae:	1c43      	adds	r3, r0, #1
 8010cb0:	d103      	bne.n	8010cba <sbrk_aligned+0x26>
 8010cb2:	f04f 34ff 	mov.w	r4, #4294967295
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	bd70      	pop	{r4, r5, r6, pc}
 8010cba:	1cc4      	adds	r4, r0, #3
 8010cbc:	f024 0403 	bic.w	r4, r4, #3
 8010cc0:	42a0      	cmp	r0, r4
 8010cc2:	d0f8      	beq.n	8010cb6 <sbrk_aligned+0x22>
 8010cc4:	1a21      	subs	r1, r4, r0
 8010cc6:	4628      	mov	r0, r5
 8010cc8:	f000 f8ce 	bl	8010e68 <_sbrk_r>
 8010ccc:	3001      	adds	r0, #1
 8010cce:	d1f2      	bne.n	8010cb6 <sbrk_aligned+0x22>
 8010cd0:	e7ef      	b.n	8010cb2 <sbrk_aligned+0x1e>
 8010cd2:	bf00      	nop
 8010cd4:	20018980 	.word	0x20018980

08010cd8 <_malloc_r>:
 8010cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cdc:	1ccd      	adds	r5, r1, #3
 8010cde:	f025 0503 	bic.w	r5, r5, #3
 8010ce2:	3508      	adds	r5, #8
 8010ce4:	2d0c      	cmp	r5, #12
 8010ce6:	bf38      	it	cc
 8010ce8:	250c      	movcc	r5, #12
 8010cea:	2d00      	cmp	r5, #0
 8010cec:	4606      	mov	r6, r0
 8010cee:	db01      	blt.n	8010cf4 <_malloc_r+0x1c>
 8010cf0:	42a9      	cmp	r1, r5
 8010cf2:	d904      	bls.n	8010cfe <_malloc_r+0x26>
 8010cf4:	230c      	movs	r3, #12
 8010cf6:	6033      	str	r3, [r6, #0]
 8010cf8:	2000      	movs	r0, #0
 8010cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010dd4 <_malloc_r+0xfc>
 8010d02:	f000 f869 	bl	8010dd8 <__malloc_lock>
 8010d06:	f8d8 3000 	ldr.w	r3, [r8]
 8010d0a:	461c      	mov	r4, r3
 8010d0c:	bb44      	cbnz	r4, 8010d60 <_malloc_r+0x88>
 8010d0e:	4629      	mov	r1, r5
 8010d10:	4630      	mov	r0, r6
 8010d12:	f7ff ffbf 	bl	8010c94 <sbrk_aligned>
 8010d16:	1c43      	adds	r3, r0, #1
 8010d18:	4604      	mov	r4, r0
 8010d1a:	d158      	bne.n	8010dce <_malloc_r+0xf6>
 8010d1c:	f8d8 4000 	ldr.w	r4, [r8]
 8010d20:	4627      	mov	r7, r4
 8010d22:	2f00      	cmp	r7, #0
 8010d24:	d143      	bne.n	8010dae <_malloc_r+0xd6>
 8010d26:	2c00      	cmp	r4, #0
 8010d28:	d04b      	beq.n	8010dc2 <_malloc_r+0xea>
 8010d2a:	6823      	ldr	r3, [r4, #0]
 8010d2c:	4639      	mov	r1, r7
 8010d2e:	4630      	mov	r0, r6
 8010d30:	eb04 0903 	add.w	r9, r4, r3
 8010d34:	f000 f898 	bl	8010e68 <_sbrk_r>
 8010d38:	4581      	cmp	r9, r0
 8010d3a:	d142      	bne.n	8010dc2 <_malloc_r+0xea>
 8010d3c:	6821      	ldr	r1, [r4, #0]
 8010d3e:	1a6d      	subs	r5, r5, r1
 8010d40:	4629      	mov	r1, r5
 8010d42:	4630      	mov	r0, r6
 8010d44:	f7ff ffa6 	bl	8010c94 <sbrk_aligned>
 8010d48:	3001      	adds	r0, #1
 8010d4a:	d03a      	beq.n	8010dc2 <_malloc_r+0xea>
 8010d4c:	6823      	ldr	r3, [r4, #0]
 8010d4e:	442b      	add	r3, r5
 8010d50:	6023      	str	r3, [r4, #0]
 8010d52:	f8d8 3000 	ldr.w	r3, [r8]
 8010d56:	685a      	ldr	r2, [r3, #4]
 8010d58:	bb62      	cbnz	r2, 8010db4 <_malloc_r+0xdc>
 8010d5a:	f8c8 7000 	str.w	r7, [r8]
 8010d5e:	e00f      	b.n	8010d80 <_malloc_r+0xa8>
 8010d60:	6822      	ldr	r2, [r4, #0]
 8010d62:	1b52      	subs	r2, r2, r5
 8010d64:	d420      	bmi.n	8010da8 <_malloc_r+0xd0>
 8010d66:	2a0b      	cmp	r2, #11
 8010d68:	d917      	bls.n	8010d9a <_malloc_r+0xc2>
 8010d6a:	1961      	adds	r1, r4, r5
 8010d6c:	42a3      	cmp	r3, r4
 8010d6e:	6025      	str	r5, [r4, #0]
 8010d70:	bf18      	it	ne
 8010d72:	6059      	strne	r1, [r3, #4]
 8010d74:	6863      	ldr	r3, [r4, #4]
 8010d76:	bf08      	it	eq
 8010d78:	f8c8 1000 	streq.w	r1, [r8]
 8010d7c:	5162      	str	r2, [r4, r5]
 8010d7e:	604b      	str	r3, [r1, #4]
 8010d80:	4630      	mov	r0, r6
 8010d82:	f000 f82f 	bl	8010de4 <__malloc_unlock>
 8010d86:	f104 000b 	add.w	r0, r4, #11
 8010d8a:	1d23      	adds	r3, r4, #4
 8010d8c:	f020 0007 	bic.w	r0, r0, #7
 8010d90:	1ac2      	subs	r2, r0, r3
 8010d92:	bf1c      	itt	ne
 8010d94:	1a1b      	subne	r3, r3, r0
 8010d96:	50a3      	strne	r3, [r4, r2]
 8010d98:	e7af      	b.n	8010cfa <_malloc_r+0x22>
 8010d9a:	6862      	ldr	r2, [r4, #4]
 8010d9c:	42a3      	cmp	r3, r4
 8010d9e:	bf0c      	ite	eq
 8010da0:	f8c8 2000 	streq.w	r2, [r8]
 8010da4:	605a      	strne	r2, [r3, #4]
 8010da6:	e7eb      	b.n	8010d80 <_malloc_r+0xa8>
 8010da8:	4623      	mov	r3, r4
 8010daa:	6864      	ldr	r4, [r4, #4]
 8010dac:	e7ae      	b.n	8010d0c <_malloc_r+0x34>
 8010dae:	463c      	mov	r4, r7
 8010db0:	687f      	ldr	r7, [r7, #4]
 8010db2:	e7b6      	b.n	8010d22 <_malloc_r+0x4a>
 8010db4:	461a      	mov	r2, r3
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	42a3      	cmp	r3, r4
 8010dba:	d1fb      	bne.n	8010db4 <_malloc_r+0xdc>
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	6053      	str	r3, [r2, #4]
 8010dc0:	e7de      	b.n	8010d80 <_malloc_r+0xa8>
 8010dc2:	230c      	movs	r3, #12
 8010dc4:	6033      	str	r3, [r6, #0]
 8010dc6:	4630      	mov	r0, r6
 8010dc8:	f000 f80c 	bl	8010de4 <__malloc_unlock>
 8010dcc:	e794      	b.n	8010cf8 <_malloc_r+0x20>
 8010dce:	6005      	str	r5, [r0, #0]
 8010dd0:	e7d6      	b.n	8010d80 <_malloc_r+0xa8>
 8010dd2:	bf00      	nop
 8010dd4:	20018984 	.word	0x20018984

08010dd8 <__malloc_lock>:
 8010dd8:	4801      	ldr	r0, [pc, #4]	@ (8010de0 <__malloc_lock+0x8>)
 8010dda:	f000 b87f 	b.w	8010edc <__retarget_lock_acquire_recursive>
 8010dde:	bf00      	nop
 8010de0:	20018ac4 	.word	0x20018ac4

08010de4 <__malloc_unlock>:
 8010de4:	4801      	ldr	r0, [pc, #4]	@ (8010dec <__malloc_unlock+0x8>)
 8010de6:	f000 b87a 	b.w	8010ede <__retarget_lock_release_recursive>
 8010dea:	bf00      	nop
 8010dec:	20018ac4 	.word	0x20018ac4

08010df0 <sniprintf>:
 8010df0:	b40c      	push	{r2, r3}
 8010df2:	b530      	push	{r4, r5, lr}
 8010df4:	4b17      	ldr	r3, [pc, #92]	@ (8010e54 <sniprintf+0x64>)
 8010df6:	1e0c      	subs	r4, r1, #0
 8010df8:	681d      	ldr	r5, [r3, #0]
 8010dfa:	b09d      	sub	sp, #116	@ 0x74
 8010dfc:	da08      	bge.n	8010e10 <sniprintf+0x20>
 8010dfe:	238b      	movs	r3, #139	@ 0x8b
 8010e00:	602b      	str	r3, [r5, #0]
 8010e02:	f04f 30ff 	mov.w	r0, #4294967295
 8010e06:	b01d      	add	sp, #116	@ 0x74
 8010e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e0c:	b002      	add	sp, #8
 8010e0e:	4770      	bx	lr
 8010e10:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010e14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010e18:	bf14      	ite	ne
 8010e1a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010e1e:	4623      	moveq	r3, r4
 8010e20:	9304      	str	r3, [sp, #16]
 8010e22:	9307      	str	r3, [sp, #28]
 8010e24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010e28:	9002      	str	r0, [sp, #8]
 8010e2a:	9006      	str	r0, [sp, #24]
 8010e2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010e30:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010e32:	ab21      	add	r3, sp, #132	@ 0x84
 8010e34:	a902      	add	r1, sp, #8
 8010e36:	4628      	mov	r0, r5
 8010e38:	9301      	str	r3, [sp, #4]
 8010e3a:	f000 f8f7 	bl	801102c <_svfiprintf_r>
 8010e3e:	1c43      	adds	r3, r0, #1
 8010e40:	bfbc      	itt	lt
 8010e42:	238b      	movlt	r3, #139	@ 0x8b
 8010e44:	602b      	strlt	r3, [r5, #0]
 8010e46:	2c00      	cmp	r4, #0
 8010e48:	d0dd      	beq.n	8010e06 <sniprintf+0x16>
 8010e4a:	9b02      	ldr	r3, [sp, #8]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	701a      	strb	r2, [r3, #0]
 8010e50:	e7d9      	b.n	8010e06 <sniprintf+0x16>
 8010e52:	bf00      	nop
 8010e54:	20000010 	.word	0x20000010

08010e58 <memset>:
 8010e58:	4402      	add	r2, r0
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	4293      	cmp	r3, r2
 8010e5e:	d100      	bne.n	8010e62 <memset+0xa>
 8010e60:	4770      	bx	lr
 8010e62:	f803 1b01 	strb.w	r1, [r3], #1
 8010e66:	e7f9      	b.n	8010e5c <memset+0x4>

08010e68 <_sbrk_r>:
 8010e68:	b538      	push	{r3, r4, r5, lr}
 8010e6a:	4d06      	ldr	r5, [pc, #24]	@ (8010e84 <_sbrk_r+0x1c>)
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	4604      	mov	r4, r0
 8010e70:	4608      	mov	r0, r1
 8010e72:	602b      	str	r3, [r5, #0]
 8010e74:	f7fc fe44 	bl	800db00 <_sbrk>
 8010e78:	1c43      	adds	r3, r0, #1
 8010e7a:	d102      	bne.n	8010e82 <_sbrk_r+0x1a>
 8010e7c:	682b      	ldr	r3, [r5, #0]
 8010e7e:	b103      	cbz	r3, 8010e82 <_sbrk_r+0x1a>
 8010e80:	6023      	str	r3, [r4, #0]
 8010e82:	bd38      	pop	{r3, r4, r5, pc}
 8010e84:	20018ac0 	.word	0x20018ac0

08010e88 <__errno>:
 8010e88:	4b01      	ldr	r3, [pc, #4]	@ (8010e90 <__errno+0x8>)
 8010e8a:	6818      	ldr	r0, [r3, #0]
 8010e8c:	4770      	bx	lr
 8010e8e:	bf00      	nop
 8010e90:	20000010 	.word	0x20000010

08010e94 <__libc_init_array>:
 8010e94:	b570      	push	{r4, r5, r6, lr}
 8010e96:	4d0d      	ldr	r5, [pc, #52]	@ (8010ecc <__libc_init_array+0x38>)
 8010e98:	4c0d      	ldr	r4, [pc, #52]	@ (8010ed0 <__libc_init_array+0x3c>)
 8010e9a:	1b64      	subs	r4, r4, r5
 8010e9c:	10a4      	asrs	r4, r4, #2
 8010e9e:	2600      	movs	r6, #0
 8010ea0:	42a6      	cmp	r6, r4
 8010ea2:	d109      	bne.n	8010eb8 <__libc_init_array+0x24>
 8010ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8010ed4 <__libc_init_array+0x40>)
 8010ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8010ed8 <__libc_init_array+0x44>)
 8010ea8:	f000 fba8 	bl	80115fc <_init>
 8010eac:	1b64      	subs	r4, r4, r5
 8010eae:	10a4      	asrs	r4, r4, #2
 8010eb0:	2600      	movs	r6, #0
 8010eb2:	42a6      	cmp	r6, r4
 8010eb4:	d105      	bne.n	8010ec2 <__libc_init_array+0x2e>
 8010eb6:	bd70      	pop	{r4, r5, r6, pc}
 8010eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ebc:	4798      	blx	r3
 8010ebe:	3601      	adds	r6, #1
 8010ec0:	e7ee      	b.n	8010ea0 <__libc_init_array+0xc>
 8010ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ec6:	4798      	blx	r3
 8010ec8:	3601      	adds	r6, #1
 8010eca:	e7f2      	b.n	8010eb2 <__libc_init_array+0x1e>
 8010ecc:	08011d9c 	.word	0x08011d9c
 8010ed0:	08011d9c 	.word	0x08011d9c
 8010ed4:	08011d9c 	.word	0x08011d9c
 8010ed8:	08011da0 	.word	0x08011da0

08010edc <__retarget_lock_acquire_recursive>:
 8010edc:	4770      	bx	lr

08010ede <__retarget_lock_release_recursive>:
 8010ede:	4770      	bx	lr

08010ee0 <_free_r>:
 8010ee0:	b538      	push	{r3, r4, r5, lr}
 8010ee2:	4605      	mov	r5, r0
 8010ee4:	2900      	cmp	r1, #0
 8010ee6:	d041      	beq.n	8010f6c <_free_r+0x8c>
 8010ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010eec:	1f0c      	subs	r4, r1, #4
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	bfb8      	it	lt
 8010ef2:	18e4      	addlt	r4, r4, r3
 8010ef4:	f7ff ff70 	bl	8010dd8 <__malloc_lock>
 8010ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8010f70 <_free_r+0x90>)
 8010efa:	6813      	ldr	r3, [r2, #0]
 8010efc:	b933      	cbnz	r3, 8010f0c <_free_r+0x2c>
 8010efe:	6063      	str	r3, [r4, #4]
 8010f00:	6014      	str	r4, [r2, #0]
 8010f02:	4628      	mov	r0, r5
 8010f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f08:	f7ff bf6c 	b.w	8010de4 <__malloc_unlock>
 8010f0c:	42a3      	cmp	r3, r4
 8010f0e:	d908      	bls.n	8010f22 <_free_r+0x42>
 8010f10:	6820      	ldr	r0, [r4, #0]
 8010f12:	1821      	adds	r1, r4, r0
 8010f14:	428b      	cmp	r3, r1
 8010f16:	bf01      	itttt	eq
 8010f18:	6819      	ldreq	r1, [r3, #0]
 8010f1a:	685b      	ldreq	r3, [r3, #4]
 8010f1c:	1809      	addeq	r1, r1, r0
 8010f1e:	6021      	streq	r1, [r4, #0]
 8010f20:	e7ed      	b.n	8010efe <_free_r+0x1e>
 8010f22:	461a      	mov	r2, r3
 8010f24:	685b      	ldr	r3, [r3, #4]
 8010f26:	b10b      	cbz	r3, 8010f2c <_free_r+0x4c>
 8010f28:	42a3      	cmp	r3, r4
 8010f2a:	d9fa      	bls.n	8010f22 <_free_r+0x42>
 8010f2c:	6811      	ldr	r1, [r2, #0]
 8010f2e:	1850      	adds	r0, r2, r1
 8010f30:	42a0      	cmp	r0, r4
 8010f32:	d10b      	bne.n	8010f4c <_free_r+0x6c>
 8010f34:	6820      	ldr	r0, [r4, #0]
 8010f36:	4401      	add	r1, r0
 8010f38:	1850      	adds	r0, r2, r1
 8010f3a:	4283      	cmp	r3, r0
 8010f3c:	6011      	str	r1, [r2, #0]
 8010f3e:	d1e0      	bne.n	8010f02 <_free_r+0x22>
 8010f40:	6818      	ldr	r0, [r3, #0]
 8010f42:	685b      	ldr	r3, [r3, #4]
 8010f44:	6053      	str	r3, [r2, #4]
 8010f46:	4408      	add	r0, r1
 8010f48:	6010      	str	r0, [r2, #0]
 8010f4a:	e7da      	b.n	8010f02 <_free_r+0x22>
 8010f4c:	d902      	bls.n	8010f54 <_free_r+0x74>
 8010f4e:	230c      	movs	r3, #12
 8010f50:	602b      	str	r3, [r5, #0]
 8010f52:	e7d6      	b.n	8010f02 <_free_r+0x22>
 8010f54:	6820      	ldr	r0, [r4, #0]
 8010f56:	1821      	adds	r1, r4, r0
 8010f58:	428b      	cmp	r3, r1
 8010f5a:	bf04      	itt	eq
 8010f5c:	6819      	ldreq	r1, [r3, #0]
 8010f5e:	685b      	ldreq	r3, [r3, #4]
 8010f60:	6063      	str	r3, [r4, #4]
 8010f62:	bf04      	itt	eq
 8010f64:	1809      	addeq	r1, r1, r0
 8010f66:	6021      	streq	r1, [r4, #0]
 8010f68:	6054      	str	r4, [r2, #4]
 8010f6a:	e7ca      	b.n	8010f02 <_free_r+0x22>
 8010f6c:	bd38      	pop	{r3, r4, r5, pc}
 8010f6e:	bf00      	nop
 8010f70:	20018984 	.word	0x20018984

08010f74 <__ssputs_r>:
 8010f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f78:	688e      	ldr	r6, [r1, #8]
 8010f7a:	461f      	mov	r7, r3
 8010f7c:	42be      	cmp	r6, r7
 8010f7e:	680b      	ldr	r3, [r1, #0]
 8010f80:	4682      	mov	sl, r0
 8010f82:	460c      	mov	r4, r1
 8010f84:	4690      	mov	r8, r2
 8010f86:	d82d      	bhi.n	8010fe4 <__ssputs_r+0x70>
 8010f88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010f8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010f90:	d026      	beq.n	8010fe0 <__ssputs_r+0x6c>
 8010f92:	6965      	ldr	r5, [r4, #20]
 8010f94:	6909      	ldr	r1, [r1, #16]
 8010f96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010f9a:	eba3 0901 	sub.w	r9, r3, r1
 8010f9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010fa2:	1c7b      	adds	r3, r7, #1
 8010fa4:	444b      	add	r3, r9
 8010fa6:	106d      	asrs	r5, r5, #1
 8010fa8:	429d      	cmp	r5, r3
 8010faa:	bf38      	it	cc
 8010fac:	461d      	movcc	r5, r3
 8010fae:	0553      	lsls	r3, r2, #21
 8010fb0:	d527      	bpl.n	8011002 <__ssputs_r+0x8e>
 8010fb2:	4629      	mov	r1, r5
 8010fb4:	f7ff fe90 	bl	8010cd8 <_malloc_r>
 8010fb8:	4606      	mov	r6, r0
 8010fba:	b360      	cbz	r0, 8011016 <__ssputs_r+0xa2>
 8010fbc:	6921      	ldr	r1, [r4, #16]
 8010fbe:	464a      	mov	r2, r9
 8010fc0:	f000 fad8 	bl	8011574 <memcpy>
 8010fc4:	89a3      	ldrh	r3, [r4, #12]
 8010fc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010fce:	81a3      	strh	r3, [r4, #12]
 8010fd0:	6126      	str	r6, [r4, #16]
 8010fd2:	6165      	str	r5, [r4, #20]
 8010fd4:	444e      	add	r6, r9
 8010fd6:	eba5 0509 	sub.w	r5, r5, r9
 8010fda:	6026      	str	r6, [r4, #0]
 8010fdc:	60a5      	str	r5, [r4, #8]
 8010fde:	463e      	mov	r6, r7
 8010fe0:	42be      	cmp	r6, r7
 8010fe2:	d900      	bls.n	8010fe6 <__ssputs_r+0x72>
 8010fe4:	463e      	mov	r6, r7
 8010fe6:	6820      	ldr	r0, [r4, #0]
 8010fe8:	4632      	mov	r2, r6
 8010fea:	4641      	mov	r1, r8
 8010fec:	f000 faa8 	bl	8011540 <memmove>
 8010ff0:	68a3      	ldr	r3, [r4, #8]
 8010ff2:	1b9b      	subs	r3, r3, r6
 8010ff4:	60a3      	str	r3, [r4, #8]
 8010ff6:	6823      	ldr	r3, [r4, #0]
 8010ff8:	4433      	add	r3, r6
 8010ffa:	6023      	str	r3, [r4, #0]
 8010ffc:	2000      	movs	r0, #0
 8010ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011002:	462a      	mov	r2, r5
 8011004:	f000 fac4 	bl	8011590 <_realloc_r>
 8011008:	4606      	mov	r6, r0
 801100a:	2800      	cmp	r0, #0
 801100c:	d1e0      	bne.n	8010fd0 <__ssputs_r+0x5c>
 801100e:	6921      	ldr	r1, [r4, #16]
 8011010:	4650      	mov	r0, sl
 8011012:	f7ff ff65 	bl	8010ee0 <_free_r>
 8011016:	230c      	movs	r3, #12
 8011018:	f8ca 3000 	str.w	r3, [sl]
 801101c:	89a3      	ldrh	r3, [r4, #12]
 801101e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011022:	81a3      	strh	r3, [r4, #12]
 8011024:	f04f 30ff 	mov.w	r0, #4294967295
 8011028:	e7e9      	b.n	8010ffe <__ssputs_r+0x8a>
	...

0801102c <_svfiprintf_r>:
 801102c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011030:	4698      	mov	r8, r3
 8011032:	898b      	ldrh	r3, [r1, #12]
 8011034:	061b      	lsls	r3, r3, #24
 8011036:	b09d      	sub	sp, #116	@ 0x74
 8011038:	4607      	mov	r7, r0
 801103a:	460d      	mov	r5, r1
 801103c:	4614      	mov	r4, r2
 801103e:	d510      	bpl.n	8011062 <_svfiprintf_r+0x36>
 8011040:	690b      	ldr	r3, [r1, #16]
 8011042:	b973      	cbnz	r3, 8011062 <_svfiprintf_r+0x36>
 8011044:	2140      	movs	r1, #64	@ 0x40
 8011046:	f7ff fe47 	bl	8010cd8 <_malloc_r>
 801104a:	6028      	str	r0, [r5, #0]
 801104c:	6128      	str	r0, [r5, #16]
 801104e:	b930      	cbnz	r0, 801105e <_svfiprintf_r+0x32>
 8011050:	230c      	movs	r3, #12
 8011052:	603b      	str	r3, [r7, #0]
 8011054:	f04f 30ff 	mov.w	r0, #4294967295
 8011058:	b01d      	add	sp, #116	@ 0x74
 801105a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801105e:	2340      	movs	r3, #64	@ 0x40
 8011060:	616b      	str	r3, [r5, #20]
 8011062:	2300      	movs	r3, #0
 8011064:	9309      	str	r3, [sp, #36]	@ 0x24
 8011066:	2320      	movs	r3, #32
 8011068:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801106c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011070:	2330      	movs	r3, #48	@ 0x30
 8011072:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011210 <_svfiprintf_r+0x1e4>
 8011076:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801107a:	f04f 0901 	mov.w	r9, #1
 801107e:	4623      	mov	r3, r4
 8011080:	469a      	mov	sl, r3
 8011082:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011086:	b10a      	cbz	r2, 801108c <_svfiprintf_r+0x60>
 8011088:	2a25      	cmp	r2, #37	@ 0x25
 801108a:	d1f9      	bne.n	8011080 <_svfiprintf_r+0x54>
 801108c:	ebba 0b04 	subs.w	fp, sl, r4
 8011090:	d00b      	beq.n	80110aa <_svfiprintf_r+0x7e>
 8011092:	465b      	mov	r3, fp
 8011094:	4622      	mov	r2, r4
 8011096:	4629      	mov	r1, r5
 8011098:	4638      	mov	r0, r7
 801109a:	f7ff ff6b 	bl	8010f74 <__ssputs_r>
 801109e:	3001      	adds	r0, #1
 80110a0:	f000 80a7 	beq.w	80111f2 <_svfiprintf_r+0x1c6>
 80110a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80110a6:	445a      	add	r2, fp
 80110a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80110aa:	f89a 3000 	ldrb.w	r3, [sl]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	f000 809f 	beq.w	80111f2 <_svfiprintf_r+0x1c6>
 80110b4:	2300      	movs	r3, #0
 80110b6:	f04f 32ff 	mov.w	r2, #4294967295
 80110ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110be:	f10a 0a01 	add.w	sl, sl, #1
 80110c2:	9304      	str	r3, [sp, #16]
 80110c4:	9307      	str	r3, [sp, #28]
 80110c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80110ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80110cc:	4654      	mov	r4, sl
 80110ce:	2205      	movs	r2, #5
 80110d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110d4:	484e      	ldr	r0, [pc, #312]	@ (8011210 <_svfiprintf_r+0x1e4>)
 80110d6:	f7ef f903 	bl	80002e0 <memchr>
 80110da:	9a04      	ldr	r2, [sp, #16]
 80110dc:	b9d8      	cbnz	r0, 8011116 <_svfiprintf_r+0xea>
 80110de:	06d0      	lsls	r0, r2, #27
 80110e0:	bf44      	itt	mi
 80110e2:	2320      	movmi	r3, #32
 80110e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80110e8:	0711      	lsls	r1, r2, #28
 80110ea:	bf44      	itt	mi
 80110ec:	232b      	movmi	r3, #43	@ 0x2b
 80110ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80110f2:	f89a 3000 	ldrb.w	r3, [sl]
 80110f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80110f8:	d015      	beq.n	8011126 <_svfiprintf_r+0xfa>
 80110fa:	9a07      	ldr	r2, [sp, #28]
 80110fc:	4654      	mov	r4, sl
 80110fe:	2000      	movs	r0, #0
 8011100:	f04f 0c0a 	mov.w	ip, #10
 8011104:	4621      	mov	r1, r4
 8011106:	f811 3b01 	ldrb.w	r3, [r1], #1
 801110a:	3b30      	subs	r3, #48	@ 0x30
 801110c:	2b09      	cmp	r3, #9
 801110e:	d94b      	bls.n	80111a8 <_svfiprintf_r+0x17c>
 8011110:	b1b0      	cbz	r0, 8011140 <_svfiprintf_r+0x114>
 8011112:	9207      	str	r2, [sp, #28]
 8011114:	e014      	b.n	8011140 <_svfiprintf_r+0x114>
 8011116:	eba0 0308 	sub.w	r3, r0, r8
 801111a:	fa09 f303 	lsl.w	r3, r9, r3
 801111e:	4313      	orrs	r3, r2
 8011120:	9304      	str	r3, [sp, #16]
 8011122:	46a2      	mov	sl, r4
 8011124:	e7d2      	b.n	80110cc <_svfiprintf_r+0xa0>
 8011126:	9b03      	ldr	r3, [sp, #12]
 8011128:	1d19      	adds	r1, r3, #4
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	9103      	str	r1, [sp, #12]
 801112e:	2b00      	cmp	r3, #0
 8011130:	bfbb      	ittet	lt
 8011132:	425b      	neglt	r3, r3
 8011134:	f042 0202 	orrlt.w	r2, r2, #2
 8011138:	9307      	strge	r3, [sp, #28]
 801113a:	9307      	strlt	r3, [sp, #28]
 801113c:	bfb8      	it	lt
 801113e:	9204      	strlt	r2, [sp, #16]
 8011140:	7823      	ldrb	r3, [r4, #0]
 8011142:	2b2e      	cmp	r3, #46	@ 0x2e
 8011144:	d10a      	bne.n	801115c <_svfiprintf_r+0x130>
 8011146:	7863      	ldrb	r3, [r4, #1]
 8011148:	2b2a      	cmp	r3, #42	@ 0x2a
 801114a:	d132      	bne.n	80111b2 <_svfiprintf_r+0x186>
 801114c:	9b03      	ldr	r3, [sp, #12]
 801114e:	1d1a      	adds	r2, r3, #4
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	9203      	str	r2, [sp, #12]
 8011154:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011158:	3402      	adds	r4, #2
 801115a:	9305      	str	r3, [sp, #20]
 801115c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011220 <_svfiprintf_r+0x1f4>
 8011160:	7821      	ldrb	r1, [r4, #0]
 8011162:	2203      	movs	r2, #3
 8011164:	4650      	mov	r0, sl
 8011166:	f7ef f8bb 	bl	80002e0 <memchr>
 801116a:	b138      	cbz	r0, 801117c <_svfiprintf_r+0x150>
 801116c:	9b04      	ldr	r3, [sp, #16]
 801116e:	eba0 000a 	sub.w	r0, r0, sl
 8011172:	2240      	movs	r2, #64	@ 0x40
 8011174:	4082      	lsls	r2, r0
 8011176:	4313      	orrs	r3, r2
 8011178:	3401      	adds	r4, #1
 801117a:	9304      	str	r3, [sp, #16]
 801117c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011180:	4824      	ldr	r0, [pc, #144]	@ (8011214 <_svfiprintf_r+0x1e8>)
 8011182:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011186:	2206      	movs	r2, #6
 8011188:	f7ef f8aa 	bl	80002e0 <memchr>
 801118c:	2800      	cmp	r0, #0
 801118e:	d036      	beq.n	80111fe <_svfiprintf_r+0x1d2>
 8011190:	4b21      	ldr	r3, [pc, #132]	@ (8011218 <_svfiprintf_r+0x1ec>)
 8011192:	bb1b      	cbnz	r3, 80111dc <_svfiprintf_r+0x1b0>
 8011194:	9b03      	ldr	r3, [sp, #12]
 8011196:	3307      	adds	r3, #7
 8011198:	f023 0307 	bic.w	r3, r3, #7
 801119c:	3308      	adds	r3, #8
 801119e:	9303      	str	r3, [sp, #12]
 80111a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111a2:	4433      	add	r3, r6
 80111a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80111a6:	e76a      	b.n	801107e <_svfiprintf_r+0x52>
 80111a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80111ac:	460c      	mov	r4, r1
 80111ae:	2001      	movs	r0, #1
 80111b0:	e7a8      	b.n	8011104 <_svfiprintf_r+0xd8>
 80111b2:	2300      	movs	r3, #0
 80111b4:	3401      	adds	r4, #1
 80111b6:	9305      	str	r3, [sp, #20]
 80111b8:	4619      	mov	r1, r3
 80111ba:	f04f 0c0a 	mov.w	ip, #10
 80111be:	4620      	mov	r0, r4
 80111c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111c4:	3a30      	subs	r2, #48	@ 0x30
 80111c6:	2a09      	cmp	r2, #9
 80111c8:	d903      	bls.n	80111d2 <_svfiprintf_r+0x1a6>
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d0c6      	beq.n	801115c <_svfiprintf_r+0x130>
 80111ce:	9105      	str	r1, [sp, #20]
 80111d0:	e7c4      	b.n	801115c <_svfiprintf_r+0x130>
 80111d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80111d6:	4604      	mov	r4, r0
 80111d8:	2301      	movs	r3, #1
 80111da:	e7f0      	b.n	80111be <_svfiprintf_r+0x192>
 80111dc:	ab03      	add	r3, sp, #12
 80111de:	9300      	str	r3, [sp, #0]
 80111e0:	462a      	mov	r2, r5
 80111e2:	4b0e      	ldr	r3, [pc, #56]	@ (801121c <_svfiprintf_r+0x1f0>)
 80111e4:	a904      	add	r1, sp, #16
 80111e6:	4638      	mov	r0, r7
 80111e8:	f3af 8000 	nop.w
 80111ec:	1c42      	adds	r2, r0, #1
 80111ee:	4606      	mov	r6, r0
 80111f0:	d1d6      	bne.n	80111a0 <_svfiprintf_r+0x174>
 80111f2:	89ab      	ldrh	r3, [r5, #12]
 80111f4:	065b      	lsls	r3, r3, #25
 80111f6:	f53f af2d 	bmi.w	8011054 <_svfiprintf_r+0x28>
 80111fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80111fc:	e72c      	b.n	8011058 <_svfiprintf_r+0x2c>
 80111fe:	ab03      	add	r3, sp, #12
 8011200:	9300      	str	r3, [sp, #0]
 8011202:	462a      	mov	r2, r5
 8011204:	4b05      	ldr	r3, [pc, #20]	@ (801121c <_svfiprintf_r+0x1f0>)
 8011206:	a904      	add	r1, sp, #16
 8011208:	4638      	mov	r0, r7
 801120a:	f000 f879 	bl	8011300 <_printf_i>
 801120e:	e7ed      	b.n	80111ec <_svfiprintf_r+0x1c0>
 8011210:	08011d60 	.word	0x08011d60
 8011214:	08011d6a 	.word	0x08011d6a
 8011218:	00000000 	.word	0x00000000
 801121c:	08010f75 	.word	0x08010f75
 8011220:	08011d66 	.word	0x08011d66

08011224 <_printf_common>:
 8011224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011228:	4616      	mov	r6, r2
 801122a:	4698      	mov	r8, r3
 801122c:	688a      	ldr	r2, [r1, #8]
 801122e:	690b      	ldr	r3, [r1, #16]
 8011230:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011234:	4293      	cmp	r3, r2
 8011236:	bfb8      	it	lt
 8011238:	4613      	movlt	r3, r2
 801123a:	6033      	str	r3, [r6, #0]
 801123c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011240:	4607      	mov	r7, r0
 8011242:	460c      	mov	r4, r1
 8011244:	b10a      	cbz	r2, 801124a <_printf_common+0x26>
 8011246:	3301      	adds	r3, #1
 8011248:	6033      	str	r3, [r6, #0]
 801124a:	6823      	ldr	r3, [r4, #0]
 801124c:	0699      	lsls	r1, r3, #26
 801124e:	bf42      	ittt	mi
 8011250:	6833      	ldrmi	r3, [r6, #0]
 8011252:	3302      	addmi	r3, #2
 8011254:	6033      	strmi	r3, [r6, #0]
 8011256:	6825      	ldr	r5, [r4, #0]
 8011258:	f015 0506 	ands.w	r5, r5, #6
 801125c:	d106      	bne.n	801126c <_printf_common+0x48>
 801125e:	f104 0a19 	add.w	sl, r4, #25
 8011262:	68e3      	ldr	r3, [r4, #12]
 8011264:	6832      	ldr	r2, [r6, #0]
 8011266:	1a9b      	subs	r3, r3, r2
 8011268:	42ab      	cmp	r3, r5
 801126a:	dc26      	bgt.n	80112ba <_printf_common+0x96>
 801126c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011270:	6822      	ldr	r2, [r4, #0]
 8011272:	3b00      	subs	r3, #0
 8011274:	bf18      	it	ne
 8011276:	2301      	movne	r3, #1
 8011278:	0692      	lsls	r2, r2, #26
 801127a:	d42b      	bmi.n	80112d4 <_printf_common+0xb0>
 801127c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011280:	4641      	mov	r1, r8
 8011282:	4638      	mov	r0, r7
 8011284:	47c8      	blx	r9
 8011286:	3001      	adds	r0, #1
 8011288:	d01e      	beq.n	80112c8 <_printf_common+0xa4>
 801128a:	6823      	ldr	r3, [r4, #0]
 801128c:	6922      	ldr	r2, [r4, #16]
 801128e:	f003 0306 	and.w	r3, r3, #6
 8011292:	2b04      	cmp	r3, #4
 8011294:	bf02      	ittt	eq
 8011296:	68e5      	ldreq	r5, [r4, #12]
 8011298:	6833      	ldreq	r3, [r6, #0]
 801129a:	1aed      	subeq	r5, r5, r3
 801129c:	68a3      	ldr	r3, [r4, #8]
 801129e:	bf0c      	ite	eq
 80112a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80112a4:	2500      	movne	r5, #0
 80112a6:	4293      	cmp	r3, r2
 80112a8:	bfc4      	itt	gt
 80112aa:	1a9b      	subgt	r3, r3, r2
 80112ac:	18ed      	addgt	r5, r5, r3
 80112ae:	2600      	movs	r6, #0
 80112b0:	341a      	adds	r4, #26
 80112b2:	42b5      	cmp	r5, r6
 80112b4:	d11a      	bne.n	80112ec <_printf_common+0xc8>
 80112b6:	2000      	movs	r0, #0
 80112b8:	e008      	b.n	80112cc <_printf_common+0xa8>
 80112ba:	2301      	movs	r3, #1
 80112bc:	4652      	mov	r2, sl
 80112be:	4641      	mov	r1, r8
 80112c0:	4638      	mov	r0, r7
 80112c2:	47c8      	blx	r9
 80112c4:	3001      	adds	r0, #1
 80112c6:	d103      	bne.n	80112d0 <_printf_common+0xac>
 80112c8:	f04f 30ff 	mov.w	r0, #4294967295
 80112cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112d0:	3501      	adds	r5, #1
 80112d2:	e7c6      	b.n	8011262 <_printf_common+0x3e>
 80112d4:	18e1      	adds	r1, r4, r3
 80112d6:	1c5a      	adds	r2, r3, #1
 80112d8:	2030      	movs	r0, #48	@ 0x30
 80112da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80112de:	4422      	add	r2, r4
 80112e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80112e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80112e8:	3302      	adds	r3, #2
 80112ea:	e7c7      	b.n	801127c <_printf_common+0x58>
 80112ec:	2301      	movs	r3, #1
 80112ee:	4622      	mov	r2, r4
 80112f0:	4641      	mov	r1, r8
 80112f2:	4638      	mov	r0, r7
 80112f4:	47c8      	blx	r9
 80112f6:	3001      	adds	r0, #1
 80112f8:	d0e6      	beq.n	80112c8 <_printf_common+0xa4>
 80112fa:	3601      	adds	r6, #1
 80112fc:	e7d9      	b.n	80112b2 <_printf_common+0x8e>
	...

08011300 <_printf_i>:
 8011300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011304:	7e0f      	ldrb	r7, [r1, #24]
 8011306:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011308:	2f78      	cmp	r7, #120	@ 0x78
 801130a:	4691      	mov	r9, r2
 801130c:	4680      	mov	r8, r0
 801130e:	460c      	mov	r4, r1
 8011310:	469a      	mov	sl, r3
 8011312:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011316:	d807      	bhi.n	8011328 <_printf_i+0x28>
 8011318:	2f62      	cmp	r7, #98	@ 0x62
 801131a:	d80a      	bhi.n	8011332 <_printf_i+0x32>
 801131c:	2f00      	cmp	r7, #0
 801131e:	f000 80d2 	beq.w	80114c6 <_printf_i+0x1c6>
 8011322:	2f58      	cmp	r7, #88	@ 0x58
 8011324:	f000 80b9 	beq.w	801149a <_printf_i+0x19a>
 8011328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801132c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011330:	e03a      	b.n	80113a8 <_printf_i+0xa8>
 8011332:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011336:	2b15      	cmp	r3, #21
 8011338:	d8f6      	bhi.n	8011328 <_printf_i+0x28>
 801133a:	a101      	add	r1, pc, #4	@ (adr r1, 8011340 <_printf_i+0x40>)
 801133c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011340:	08011399 	.word	0x08011399
 8011344:	080113ad 	.word	0x080113ad
 8011348:	08011329 	.word	0x08011329
 801134c:	08011329 	.word	0x08011329
 8011350:	08011329 	.word	0x08011329
 8011354:	08011329 	.word	0x08011329
 8011358:	080113ad 	.word	0x080113ad
 801135c:	08011329 	.word	0x08011329
 8011360:	08011329 	.word	0x08011329
 8011364:	08011329 	.word	0x08011329
 8011368:	08011329 	.word	0x08011329
 801136c:	080114ad 	.word	0x080114ad
 8011370:	080113d7 	.word	0x080113d7
 8011374:	08011467 	.word	0x08011467
 8011378:	08011329 	.word	0x08011329
 801137c:	08011329 	.word	0x08011329
 8011380:	080114cf 	.word	0x080114cf
 8011384:	08011329 	.word	0x08011329
 8011388:	080113d7 	.word	0x080113d7
 801138c:	08011329 	.word	0x08011329
 8011390:	08011329 	.word	0x08011329
 8011394:	0801146f 	.word	0x0801146f
 8011398:	6833      	ldr	r3, [r6, #0]
 801139a:	1d1a      	adds	r2, r3, #4
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	6032      	str	r2, [r6, #0]
 80113a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80113a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80113a8:	2301      	movs	r3, #1
 80113aa:	e09d      	b.n	80114e8 <_printf_i+0x1e8>
 80113ac:	6833      	ldr	r3, [r6, #0]
 80113ae:	6820      	ldr	r0, [r4, #0]
 80113b0:	1d19      	adds	r1, r3, #4
 80113b2:	6031      	str	r1, [r6, #0]
 80113b4:	0606      	lsls	r6, r0, #24
 80113b6:	d501      	bpl.n	80113bc <_printf_i+0xbc>
 80113b8:	681d      	ldr	r5, [r3, #0]
 80113ba:	e003      	b.n	80113c4 <_printf_i+0xc4>
 80113bc:	0645      	lsls	r5, r0, #25
 80113be:	d5fb      	bpl.n	80113b8 <_printf_i+0xb8>
 80113c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80113c4:	2d00      	cmp	r5, #0
 80113c6:	da03      	bge.n	80113d0 <_printf_i+0xd0>
 80113c8:	232d      	movs	r3, #45	@ 0x2d
 80113ca:	426d      	negs	r5, r5
 80113cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80113d0:	4859      	ldr	r0, [pc, #356]	@ (8011538 <_printf_i+0x238>)
 80113d2:	230a      	movs	r3, #10
 80113d4:	e011      	b.n	80113fa <_printf_i+0xfa>
 80113d6:	6821      	ldr	r1, [r4, #0]
 80113d8:	6833      	ldr	r3, [r6, #0]
 80113da:	0608      	lsls	r0, r1, #24
 80113dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80113e0:	d402      	bmi.n	80113e8 <_printf_i+0xe8>
 80113e2:	0649      	lsls	r1, r1, #25
 80113e4:	bf48      	it	mi
 80113e6:	b2ad      	uxthmi	r5, r5
 80113e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80113ea:	4853      	ldr	r0, [pc, #332]	@ (8011538 <_printf_i+0x238>)
 80113ec:	6033      	str	r3, [r6, #0]
 80113ee:	bf14      	ite	ne
 80113f0:	230a      	movne	r3, #10
 80113f2:	2308      	moveq	r3, #8
 80113f4:	2100      	movs	r1, #0
 80113f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80113fa:	6866      	ldr	r6, [r4, #4]
 80113fc:	60a6      	str	r6, [r4, #8]
 80113fe:	2e00      	cmp	r6, #0
 8011400:	bfa2      	ittt	ge
 8011402:	6821      	ldrge	r1, [r4, #0]
 8011404:	f021 0104 	bicge.w	r1, r1, #4
 8011408:	6021      	strge	r1, [r4, #0]
 801140a:	b90d      	cbnz	r5, 8011410 <_printf_i+0x110>
 801140c:	2e00      	cmp	r6, #0
 801140e:	d04b      	beq.n	80114a8 <_printf_i+0x1a8>
 8011410:	4616      	mov	r6, r2
 8011412:	fbb5 f1f3 	udiv	r1, r5, r3
 8011416:	fb03 5711 	mls	r7, r3, r1, r5
 801141a:	5dc7      	ldrb	r7, [r0, r7]
 801141c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011420:	462f      	mov	r7, r5
 8011422:	42bb      	cmp	r3, r7
 8011424:	460d      	mov	r5, r1
 8011426:	d9f4      	bls.n	8011412 <_printf_i+0x112>
 8011428:	2b08      	cmp	r3, #8
 801142a:	d10b      	bne.n	8011444 <_printf_i+0x144>
 801142c:	6823      	ldr	r3, [r4, #0]
 801142e:	07df      	lsls	r7, r3, #31
 8011430:	d508      	bpl.n	8011444 <_printf_i+0x144>
 8011432:	6923      	ldr	r3, [r4, #16]
 8011434:	6861      	ldr	r1, [r4, #4]
 8011436:	4299      	cmp	r1, r3
 8011438:	bfde      	ittt	le
 801143a:	2330      	movle	r3, #48	@ 0x30
 801143c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011440:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011444:	1b92      	subs	r2, r2, r6
 8011446:	6122      	str	r2, [r4, #16]
 8011448:	f8cd a000 	str.w	sl, [sp]
 801144c:	464b      	mov	r3, r9
 801144e:	aa03      	add	r2, sp, #12
 8011450:	4621      	mov	r1, r4
 8011452:	4640      	mov	r0, r8
 8011454:	f7ff fee6 	bl	8011224 <_printf_common>
 8011458:	3001      	adds	r0, #1
 801145a:	d14a      	bne.n	80114f2 <_printf_i+0x1f2>
 801145c:	f04f 30ff 	mov.w	r0, #4294967295
 8011460:	b004      	add	sp, #16
 8011462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011466:	6823      	ldr	r3, [r4, #0]
 8011468:	f043 0320 	orr.w	r3, r3, #32
 801146c:	6023      	str	r3, [r4, #0]
 801146e:	4833      	ldr	r0, [pc, #204]	@ (801153c <_printf_i+0x23c>)
 8011470:	2778      	movs	r7, #120	@ 0x78
 8011472:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011476:	6823      	ldr	r3, [r4, #0]
 8011478:	6831      	ldr	r1, [r6, #0]
 801147a:	061f      	lsls	r7, r3, #24
 801147c:	f851 5b04 	ldr.w	r5, [r1], #4
 8011480:	d402      	bmi.n	8011488 <_printf_i+0x188>
 8011482:	065f      	lsls	r7, r3, #25
 8011484:	bf48      	it	mi
 8011486:	b2ad      	uxthmi	r5, r5
 8011488:	6031      	str	r1, [r6, #0]
 801148a:	07d9      	lsls	r1, r3, #31
 801148c:	bf44      	itt	mi
 801148e:	f043 0320 	orrmi.w	r3, r3, #32
 8011492:	6023      	strmi	r3, [r4, #0]
 8011494:	b11d      	cbz	r5, 801149e <_printf_i+0x19e>
 8011496:	2310      	movs	r3, #16
 8011498:	e7ac      	b.n	80113f4 <_printf_i+0xf4>
 801149a:	4827      	ldr	r0, [pc, #156]	@ (8011538 <_printf_i+0x238>)
 801149c:	e7e9      	b.n	8011472 <_printf_i+0x172>
 801149e:	6823      	ldr	r3, [r4, #0]
 80114a0:	f023 0320 	bic.w	r3, r3, #32
 80114a4:	6023      	str	r3, [r4, #0]
 80114a6:	e7f6      	b.n	8011496 <_printf_i+0x196>
 80114a8:	4616      	mov	r6, r2
 80114aa:	e7bd      	b.n	8011428 <_printf_i+0x128>
 80114ac:	6833      	ldr	r3, [r6, #0]
 80114ae:	6825      	ldr	r5, [r4, #0]
 80114b0:	6961      	ldr	r1, [r4, #20]
 80114b2:	1d18      	adds	r0, r3, #4
 80114b4:	6030      	str	r0, [r6, #0]
 80114b6:	062e      	lsls	r6, r5, #24
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	d501      	bpl.n	80114c0 <_printf_i+0x1c0>
 80114bc:	6019      	str	r1, [r3, #0]
 80114be:	e002      	b.n	80114c6 <_printf_i+0x1c6>
 80114c0:	0668      	lsls	r0, r5, #25
 80114c2:	d5fb      	bpl.n	80114bc <_printf_i+0x1bc>
 80114c4:	8019      	strh	r1, [r3, #0]
 80114c6:	2300      	movs	r3, #0
 80114c8:	6123      	str	r3, [r4, #16]
 80114ca:	4616      	mov	r6, r2
 80114cc:	e7bc      	b.n	8011448 <_printf_i+0x148>
 80114ce:	6833      	ldr	r3, [r6, #0]
 80114d0:	1d1a      	adds	r2, r3, #4
 80114d2:	6032      	str	r2, [r6, #0]
 80114d4:	681e      	ldr	r6, [r3, #0]
 80114d6:	6862      	ldr	r2, [r4, #4]
 80114d8:	2100      	movs	r1, #0
 80114da:	4630      	mov	r0, r6
 80114dc:	f7ee ff00 	bl	80002e0 <memchr>
 80114e0:	b108      	cbz	r0, 80114e6 <_printf_i+0x1e6>
 80114e2:	1b80      	subs	r0, r0, r6
 80114e4:	6060      	str	r0, [r4, #4]
 80114e6:	6863      	ldr	r3, [r4, #4]
 80114e8:	6123      	str	r3, [r4, #16]
 80114ea:	2300      	movs	r3, #0
 80114ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80114f0:	e7aa      	b.n	8011448 <_printf_i+0x148>
 80114f2:	6923      	ldr	r3, [r4, #16]
 80114f4:	4632      	mov	r2, r6
 80114f6:	4649      	mov	r1, r9
 80114f8:	4640      	mov	r0, r8
 80114fa:	47d0      	blx	sl
 80114fc:	3001      	adds	r0, #1
 80114fe:	d0ad      	beq.n	801145c <_printf_i+0x15c>
 8011500:	6823      	ldr	r3, [r4, #0]
 8011502:	079b      	lsls	r3, r3, #30
 8011504:	d413      	bmi.n	801152e <_printf_i+0x22e>
 8011506:	68e0      	ldr	r0, [r4, #12]
 8011508:	9b03      	ldr	r3, [sp, #12]
 801150a:	4298      	cmp	r0, r3
 801150c:	bfb8      	it	lt
 801150e:	4618      	movlt	r0, r3
 8011510:	e7a6      	b.n	8011460 <_printf_i+0x160>
 8011512:	2301      	movs	r3, #1
 8011514:	4632      	mov	r2, r6
 8011516:	4649      	mov	r1, r9
 8011518:	4640      	mov	r0, r8
 801151a:	47d0      	blx	sl
 801151c:	3001      	adds	r0, #1
 801151e:	d09d      	beq.n	801145c <_printf_i+0x15c>
 8011520:	3501      	adds	r5, #1
 8011522:	68e3      	ldr	r3, [r4, #12]
 8011524:	9903      	ldr	r1, [sp, #12]
 8011526:	1a5b      	subs	r3, r3, r1
 8011528:	42ab      	cmp	r3, r5
 801152a:	dcf2      	bgt.n	8011512 <_printf_i+0x212>
 801152c:	e7eb      	b.n	8011506 <_printf_i+0x206>
 801152e:	2500      	movs	r5, #0
 8011530:	f104 0619 	add.w	r6, r4, #25
 8011534:	e7f5      	b.n	8011522 <_printf_i+0x222>
 8011536:	bf00      	nop
 8011538:	08011d71 	.word	0x08011d71
 801153c:	08011d82 	.word	0x08011d82

08011540 <memmove>:
 8011540:	4288      	cmp	r0, r1
 8011542:	b510      	push	{r4, lr}
 8011544:	eb01 0402 	add.w	r4, r1, r2
 8011548:	d902      	bls.n	8011550 <memmove+0x10>
 801154a:	4284      	cmp	r4, r0
 801154c:	4623      	mov	r3, r4
 801154e:	d807      	bhi.n	8011560 <memmove+0x20>
 8011550:	1e43      	subs	r3, r0, #1
 8011552:	42a1      	cmp	r1, r4
 8011554:	d008      	beq.n	8011568 <memmove+0x28>
 8011556:	f811 2b01 	ldrb.w	r2, [r1], #1
 801155a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801155e:	e7f8      	b.n	8011552 <memmove+0x12>
 8011560:	4402      	add	r2, r0
 8011562:	4601      	mov	r1, r0
 8011564:	428a      	cmp	r2, r1
 8011566:	d100      	bne.n	801156a <memmove+0x2a>
 8011568:	bd10      	pop	{r4, pc}
 801156a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801156e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011572:	e7f7      	b.n	8011564 <memmove+0x24>

08011574 <memcpy>:
 8011574:	440a      	add	r2, r1
 8011576:	4291      	cmp	r1, r2
 8011578:	f100 33ff 	add.w	r3, r0, #4294967295
 801157c:	d100      	bne.n	8011580 <memcpy+0xc>
 801157e:	4770      	bx	lr
 8011580:	b510      	push	{r4, lr}
 8011582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011586:	f803 4f01 	strb.w	r4, [r3, #1]!
 801158a:	4291      	cmp	r1, r2
 801158c:	d1f9      	bne.n	8011582 <memcpy+0xe>
 801158e:	bd10      	pop	{r4, pc}

08011590 <_realloc_r>:
 8011590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011594:	4680      	mov	r8, r0
 8011596:	4615      	mov	r5, r2
 8011598:	460c      	mov	r4, r1
 801159a:	b921      	cbnz	r1, 80115a6 <_realloc_r+0x16>
 801159c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115a0:	4611      	mov	r1, r2
 80115a2:	f7ff bb99 	b.w	8010cd8 <_malloc_r>
 80115a6:	b92a      	cbnz	r2, 80115b4 <_realloc_r+0x24>
 80115a8:	f7ff fc9a 	bl	8010ee0 <_free_r>
 80115ac:	2400      	movs	r4, #0
 80115ae:	4620      	mov	r0, r4
 80115b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115b4:	f000 f81a 	bl	80115ec <_malloc_usable_size_r>
 80115b8:	4285      	cmp	r5, r0
 80115ba:	4606      	mov	r6, r0
 80115bc:	d802      	bhi.n	80115c4 <_realloc_r+0x34>
 80115be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80115c2:	d8f4      	bhi.n	80115ae <_realloc_r+0x1e>
 80115c4:	4629      	mov	r1, r5
 80115c6:	4640      	mov	r0, r8
 80115c8:	f7ff fb86 	bl	8010cd8 <_malloc_r>
 80115cc:	4607      	mov	r7, r0
 80115ce:	2800      	cmp	r0, #0
 80115d0:	d0ec      	beq.n	80115ac <_realloc_r+0x1c>
 80115d2:	42b5      	cmp	r5, r6
 80115d4:	462a      	mov	r2, r5
 80115d6:	4621      	mov	r1, r4
 80115d8:	bf28      	it	cs
 80115da:	4632      	movcs	r2, r6
 80115dc:	f7ff ffca 	bl	8011574 <memcpy>
 80115e0:	4621      	mov	r1, r4
 80115e2:	4640      	mov	r0, r8
 80115e4:	f7ff fc7c 	bl	8010ee0 <_free_r>
 80115e8:	463c      	mov	r4, r7
 80115ea:	e7e0      	b.n	80115ae <_realloc_r+0x1e>

080115ec <_malloc_usable_size_r>:
 80115ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115f0:	1f18      	subs	r0, r3, #4
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	bfbc      	itt	lt
 80115f6:	580b      	ldrlt	r3, [r1, r0]
 80115f8:	18c0      	addlt	r0, r0, r3
 80115fa:	4770      	bx	lr

080115fc <_init>:
 80115fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115fe:	bf00      	nop
 8011600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011602:	bc08      	pop	{r3}
 8011604:	469e      	mov	lr, r3
 8011606:	4770      	bx	lr

08011608 <_fini>:
 8011608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801160a:	bf00      	nop
 801160c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801160e:	bc08      	pop	{r3}
 8011610:	469e      	mov	lr, r3
 8011612:	4770      	bx	lr
