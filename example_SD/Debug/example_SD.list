
example_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007328  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080073e4  080073e4  000173e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007564  08007564  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08007564  08007564  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007564  08007564  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007564  08007564  00017564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007568  08007568  00017568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800756c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  20000024  08007590  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  08007590  00020640  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ebae  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002826  00000000  00000000  0002ec3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd8  00000000  00000000  00031468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f6  00000000  00000000  00032140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000123b2  00000000  00000000  00032b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012ff1  00000000  00000000  00044ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000676fa  00000000  00000000  00057ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d68  00000000  00000000  000bf5d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000c233c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000024 	.word	0x20000024
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080073cc 	.word	0x080073cc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000028 	.word	0x20000028
 8000100:	080073cc 	.word	0x080073cc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80003f0:	b5b0      	push	{r4, r5, r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af02      	add	r7, sp, #8
 80003f6:	0005      	movs	r5, r0
 80003f8:	000c      	movs	r4, r1
 80003fa:	0010      	movs	r0, r2
 80003fc:	0019      	movs	r1, r3
 80003fe:	1dbb      	adds	r3, r7, #6
 8000400:	1c2a      	adds	r2, r5, #0
 8000402:	801a      	strh	r2, [r3, #0]
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	1c22      	adds	r2, r4, #0
 8000408:	801a      	strh	r2, [r3, #0]
 800040a:	1cbb      	adds	r3, r7, #2
 800040c:	1c02      	adds	r2, r0, #0
 800040e:	801a      	strh	r2, [r3, #0]
 8000410:	003b      	movs	r3, r7
 8000412:	1c0a      	adds	r2, r1, #0
 8000414:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000416:	1dbb      	adds	r3, r7, #6
 8000418:	8818      	ldrh	r0, [r3, #0]
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	8819      	ldrh	r1, [r3, #0]
 800041e:	1cbb      	adds	r3, r7, #2
 8000420:	881a      	ldrh	r2, [r3, #0]
 8000422:	003b      	movs	r3, r7
 8000424:	881c      	ldrh	r4, [r3, #0]
 8000426:	2318      	movs	r3, #24
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	9300      	str	r3, [sp, #0]
 800042e:	0023      	movs	r3, r4
 8000430:	f000 fa04 	bl	800083c <ST7735_FillRectangle>
}
 8000434:	46c0      	nop			; (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	b002      	add	sp, #8
 800043a:	bdb0      	pop	{r4, r5, r7, pc}

0800043c <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af02      	add	r7, sp, #8
 8000442:	0002      	movs	r2, r0
 8000444:	1dbb      	adds	r3, r7, #6
 8000446:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, _width, _height, color);
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <fillScreen+0x30>)
 800044a:	2200      	movs	r2, #0
 800044c:	5e9a      	ldrsh	r2, [r3, r2]
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <fillScreen+0x34>)
 8000450:	2100      	movs	r1, #0
 8000452:	5e59      	ldrsh	r1, [r3, r1]
 8000454:	1dbb      	adds	r3, r7, #6
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	9300      	str	r3, [sp, #0]
 800045a:	000b      	movs	r3, r1
 800045c:	2100      	movs	r1, #0
 800045e:	2000      	movs	r0, #0
 8000460:	f7ff ffc6 	bl	80003f0 <fillRect>
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000040 	.word	0x20000040
 8000470:	20000042 	.word	0x20000042

08000474 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	01db      	lsls	r3, r3, #7
 800047c:	4803      	ldr	r0, [pc, #12]	; (800048c <ST7735_Select+0x18>)
 800047e:	2200      	movs	r2, #0
 8000480:	0019      	movs	r1, r3
 8000482:	f001 f9bb 	bl	80017fc <HAL_GPIO_WritePin>
}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	48000800 	.word	0x48000800

08000490 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	01db      	lsls	r3, r3, #7
 8000498:	4803      	ldr	r0, [pc, #12]	; (80004a8 <ST7735_Unselect+0x18>)
 800049a:	2201      	movs	r2, #1
 800049c:	0019      	movs	r1, r3
 800049e:	f001 f9ad 	bl	80017fc <HAL_GPIO_WritePin>
}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	48000800 	.word	0x48000800

080004ac <ST7735_Reset>:

void ST7735_Reset()
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	021b      	lsls	r3, r3, #8
 80004b4:	4808      	ldr	r0, [pc, #32]	; (80004d8 <ST7735_Reset+0x2c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	0019      	movs	r1, r3
 80004ba:	f001 f99f 	bl	80017fc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80004be:	2005      	movs	r0, #5
 80004c0:	f000 ff54 	bl	800136c <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	021b      	lsls	r3, r3, #8
 80004c8:	4803      	ldr	r0, [pc, #12]	; (80004d8 <ST7735_Reset+0x2c>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	0019      	movs	r1, r3
 80004ce:	f001 f995 	bl	80017fc <HAL_GPIO_WritePin>
}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	48000800 	.word	0x48000800

080004dc <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	0002      	movs	r2, r0
 80004e4:	1dfb      	adds	r3, r7, #7
 80004e6:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(AD_PORT, AD_PIN, GPIO_PIN_RESET);
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	019b      	lsls	r3, r3, #6
 80004ec:	4807      	ldr	r0, [pc, #28]	; (800050c <ST7735_WriteCommand+0x30>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	0019      	movs	r1, r3
 80004f2:	f001 f983 	bl	80017fc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80004f6:	2301      	movs	r3, #1
 80004f8:	425b      	negs	r3, r3
 80004fa:	1df9      	adds	r1, r7, #7
 80004fc:	4804      	ldr	r0, [pc, #16]	; (8000510 <ST7735_WriteCommand+0x34>)
 80004fe:	2201      	movs	r2, #1
 8000500:	f001 ff84 	bl	800240c <HAL_SPI_Transmit>
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b002      	add	sp, #8
 800050a:	bd80      	pop	{r7, pc}
 800050c:	48000800 	.word	0x48000800
 8000510:	200000b0 	.word	0x200000b0

08000514 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(AD_PORT, AD_PIN, GPIO_PIN_SET);
 800051e:	2380      	movs	r3, #128	; 0x80
 8000520:	019b      	lsls	r3, r3, #6
 8000522:	4808      	ldr	r0, [pc, #32]	; (8000544 <ST7735_WriteData+0x30>)
 8000524:	2201      	movs	r2, #1
 8000526:	0019      	movs	r1, r3
 8000528:	f001 f968 	bl	80017fc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	b29a      	uxth	r2, r3
 8000530:	2301      	movs	r3, #1
 8000532:	425b      	negs	r3, r3
 8000534:	6879      	ldr	r1, [r7, #4]
 8000536:	4804      	ldr	r0, [pc, #16]	; (8000548 <ST7735_WriteData+0x34>)
 8000538:	f001 ff68 	bl	800240c <HAL_SPI_Transmit>
}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	b002      	add	sp, #8
 8000542:	bd80      	pop	{r7, pc}
 8000544:	48000800 	.word	0x48000800
 8000548:	200000b0 	.word	0x200000b0

0800054c <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	607a      	str	r2, [r7, #4]
 800055a:	220f      	movs	r2, #15
 800055c:	18ba      	adds	r2, r7, r2
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8000562:	e04a      	b.n	80005fa <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	607a      	str	r2, [r7, #4]
 800056a:	210b      	movs	r1, #11
 800056c:	187a      	adds	r2, r7, r1
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8000572:	187b      	adds	r3, r7, r1
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	0018      	movs	r0, r3
 8000578:	f7ff ffb0 	bl	80004dc <ST7735_WriteCommand>

        numArgs = *addr++;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	607a      	str	r2, [r7, #4]
 8000582:	200a      	movs	r0, #10
 8000584:	183a      	adds	r2, r7, r0
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800058a:	183b      	adds	r3, r7, r0
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	b29a      	uxth	r2, r3
 8000590:	230c      	movs	r3, #12
 8000592:	18fb      	adds	r3, r7, r3
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	400a      	ands	r2, r1
 8000598:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 800059a:	183b      	adds	r3, r7, r0
 800059c:	183a      	adds	r2, r7, r0
 800059e:	7812      	ldrb	r2, [r2, #0]
 80005a0:	217f      	movs	r1, #127	; 0x7f
 80005a2:	400a      	ands	r2, r1
 80005a4:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 80005a6:	183b      	adds	r3, r7, r0
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d00c      	beq.n	80005c8 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80005ae:	0004      	movs	r4, r0
 80005b0:	183b      	adds	r3, r7, r0
 80005b2:	781a      	ldrb	r2, [r3, #0]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	0011      	movs	r1, r2
 80005b8:	0018      	movs	r0, r3
 80005ba:	f7ff ffab 	bl	8000514 <ST7735_WriteData>
            addr += numArgs;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	18d3      	adds	r3, r2, r3
 80005c6:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80005c8:	210c      	movs	r1, #12
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d013      	beq.n	80005fa <DisplayInit+0xae>
            ms = *addr++;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	1c5a      	adds	r2, r3, #1
 80005d6:	607a      	str	r2, [r7, #4]
 80005d8:	781a      	ldrb	r2, [r3, #0]
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	2bff      	cmp	r3, #255	; 0xff
 80005e4:	d103      	bne.n	80005ee <DisplayInit+0xa2>
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	22fa      	movs	r2, #250	; 0xfa
 80005ea:	0052      	lsls	r2, r2, #1
 80005ec:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 80005ee:	230c      	movs	r3, #12
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 feb9 	bl	800136c <HAL_Delay>
    while(numCommands--) {
 80005fa:	220f      	movs	r2, #15
 80005fc:	18bb      	adds	r3, r7, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	18ba      	adds	r2, r7, r2
 8000602:	1e59      	subs	r1, r3, #1
 8000604:	7011      	strb	r1, [r2, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1ac      	bne.n	8000564 <DisplayInit+0x18>
        }
    }
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46c0      	nop			; (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	b005      	add	sp, #20
 8000612:	bd90      	pop	{r4, r7, pc}

08000614 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000614:	b5b0      	push	{r4, r5, r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	0005      	movs	r5, r0
 800061c:	000c      	movs	r4, r1
 800061e:	0010      	movs	r0, r2
 8000620:	0019      	movs	r1, r3
 8000622:	1dfb      	adds	r3, r7, #7
 8000624:	1c2a      	adds	r2, r5, #0
 8000626:	701a      	strb	r2, [r3, #0]
 8000628:	1dbb      	adds	r3, r7, #6
 800062a:	1c22      	adds	r2, r4, #0
 800062c:	701a      	strb	r2, [r3, #0]
 800062e:	1d7b      	adds	r3, r7, #5
 8000630:	1c02      	adds	r2, r0, #0
 8000632:	701a      	strb	r2, [r3, #0]
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	1c0a      	adds	r2, r1, #0
 8000638:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800063a:	202a      	movs	r0, #42	; 0x2a
 800063c:	f7ff ff4e 	bl	80004dc <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000640:	210c      	movs	r1, #12
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <ST7735_SetAddressWindow+0xa8>)
 800064a:	781a      	ldrb	r2, [r3, #0]
 800064c:	1dfb      	adds	r3, r7, #7
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	18d3      	adds	r3, r2, r3
 8000652:	b2da      	uxtb	r2, r3
 8000654:	187b      	adds	r3, r7, r1
 8000656:	705a      	strb	r2, [r3, #1]
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2200      	movs	r2, #0
 800065c:	709a      	strb	r2, [r3, #2]
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <ST7735_SetAddressWindow+0xa8>)
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	1d7b      	adds	r3, r7, #5
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	18d3      	adds	r3, r2, r3
 8000668:	b2da      	uxtb	r2, r3
 800066a:	187b      	adds	r3, r7, r1
 800066c:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 800066e:	000c      	movs	r4, r1
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2104      	movs	r1, #4
 8000674:	0018      	movs	r0, r3
 8000676:	f7ff ff4d 	bl	8000514 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800067a:	202b      	movs	r0, #43	; 0x2b
 800067c:	f7ff ff2e 	bl	80004dc <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <ST7735_SetAddressWindow+0xac>)
 8000682:	781a      	ldrb	r2, [r3, #0]
 8000684:	1dbb      	adds	r3, r7, #6
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	18d3      	adds	r3, r2, r3
 800068a:	b2da      	uxtb	r2, r3
 800068c:	0021      	movs	r1, r4
 800068e:	187b      	adds	r3, r7, r1
 8000690:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <ST7735_SetAddressWindow+0xac>)
 8000694:	781a      	ldrb	r2, [r3, #0]
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	18d3      	adds	r3, r2, r3
 800069c:	b2da      	uxtb	r2, r3
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2104      	movs	r1, #4
 80006a6:	0018      	movs	r0, r3
 80006a8:	f7ff ff34 	bl	8000514 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80006ac:	202c      	movs	r0, #44	; 0x2c
 80006ae:	f7ff ff15 	bl	80004dc <ST7735_WriteCommand>
}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b004      	add	sp, #16
 80006b8:	bdb0      	pop	{r4, r5, r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	20000047 	.word	0x20000047
 80006c0:	20000048 	.word	0x20000048

080006c4 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	0002      	movs	r2, r0
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 80006d0:	f7ff fed0 	bl	8000474 <ST7735_Select>
    ST7735_Reset();
 80006d4:	f7ff feea 	bl	80004ac <ST7735_Reset>
    DisplayInit(init_cmds1);
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <ST7735_Init+0x50>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f7ff ff36 	bl	800054c <DisplayInit>
    DisplayInit(init_cmds2);
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <ST7735_Init+0x54>)
 80006e2:	0018      	movs	r0, r3
 80006e4:	f7ff ff32 	bl	800054c <DisplayInit>
    DisplayInit(init_cmds3);
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <ST7735_Init+0x58>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff ff2e 	bl	800054c <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <ST7735_Init+0x5c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <ST7735_Init+0x60>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	0018      	movs	r0, r3
 8000702:	f000 f811 	bl	8000728 <ST7735_SetRotation>
    ST7735_Unselect();
 8000706:	f7ff fec3 	bl	8000490 <ST7735_Unselect>

}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b002      	add	sp, #8
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	08007438 	.word	0x08007438
 8000718:	08007470 	.word	0x08007470
 800071c:	08007480 	.word	0x08007480
 8000720:	20000045 	.word	0x20000045
 8000724:	20000046 	.word	0x20000046

08000728 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	0002      	movs	r2, r0
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8000734:	230f      	movs	r3, #15
 8000736:	18fb      	adds	r3, r7, r3
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2203      	movs	r2, #3
 8000742:	4013      	ands	r3, r2
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b36      	ldr	r3, [pc, #216]	; (8000820 <ST7735_SetRotation+0xf8>)
 8000748:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800074a:	4b35      	ldr	r3, [pc, #212]	; (8000820 <ST7735_SetRotation+0xf8>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d041      	beq.n	80007d6 <ST7735_SetRotation+0xae>
 8000752:	dc53      	bgt.n	80007fc <ST7735_SetRotation+0xd4>
 8000754:	2b02      	cmp	r3, #2
 8000756:	d02b      	beq.n	80007b0 <ST7735_SetRotation+0x88>
 8000758:	dc50      	bgt.n	80007fc <ST7735_SetRotation+0xd4>
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <ST7735_SetRotation+0x3c>
 800075e:	2b01      	cmp	r3, #1
 8000760:	d013      	beq.n	800078a <ST7735_SetRotation+0x62>
 8000762:	e04b      	b.n	80007fc <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000764:	230f      	movs	r3, #15
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	22c0      	movs	r2, #192	; 0xc0
 800076a:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 800076c:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <ST7735_SetRotation+0xfc>)
 800076e:	22a0      	movs	r2, #160	; 0xa0
 8000770:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000772:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <ST7735_SetRotation+0x100>)
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000778:	4b2c      	ldr	r3, [pc, #176]	; (800082c <ST7735_SetRotation+0x104>)
 800077a:	781a      	ldrb	r2, [r3, #0]
 800077c:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <ST7735_SetRotation+0x108>)
 800077e:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000780:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <ST7735_SetRotation+0x10c>)
 8000782:	781a      	ldrb	r2, [r3, #0]
 8000784:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <ST7735_SetRotation+0x110>)
 8000786:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000788:	e038      	b.n	80007fc <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800078a:	230f      	movs	r3, #15
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	22a0      	movs	r2, #160	; 0xa0
 8000790:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8000792:	4b25      	ldr	r3, [pc, #148]	; (8000828 <ST7735_SetRotation+0x100>)
 8000794:	22a0      	movs	r2, #160	; 0xa0
 8000796:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000798:	4b22      	ldr	r3, [pc, #136]	; (8000824 <ST7735_SetRotation+0xfc>)
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <ST7735_SetRotation+0x104>)
 80007a0:	781a      	ldrb	r2, [r3, #0]
 80007a2:	4b25      	ldr	r3, [pc, #148]	; (8000838 <ST7735_SetRotation+0x110>)
 80007a4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80007a6:	4b23      	ldr	r3, [pc, #140]	; (8000834 <ST7735_SetRotation+0x10c>)
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <ST7735_SetRotation+0x108>)
 80007ac:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80007ae:	e025      	b.n	80007fc <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80007b0:	230f      	movs	r3, #15
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <ST7735_SetRotation+0xfc>)
 80007ba:	22a0      	movs	r2, #160	; 0xa0
 80007bc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <ST7735_SetRotation+0x100>)
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <ST7735_SetRotation+0x104>)
 80007c6:	781a      	ldrb	r2, [r3, #0]
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <ST7735_SetRotation+0x108>)
 80007ca:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <ST7735_SetRotation+0x10c>)
 80007ce:	781a      	ldrb	r2, [r3, #0]
 80007d0:	4b19      	ldr	r3, [pc, #100]	; (8000838 <ST7735_SetRotation+0x110>)
 80007d2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80007d4:	e012      	b.n	80007fc <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80007d6:	230f      	movs	r3, #15
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	2260      	movs	r2, #96	; 0x60
 80007dc:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <ST7735_SetRotation+0x100>)
 80007e0:	22a0      	movs	r2, #160	; 0xa0
 80007e2:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <ST7735_SetRotation+0xfc>)
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <ST7735_SetRotation+0x104>)
 80007ec:	781a      	ldrb	r2, [r3, #0]
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <ST7735_SetRotation+0x110>)
 80007f0:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <ST7735_SetRotation+0x10c>)
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <ST7735_SetRotation+0x108>)
 80007f8:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80007fa:	46c0      	nop			; (mov r8, r8)
  }
  ST7735_Select();
 80007fc:	f7ff fe3a 	bl	8000474 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000800:	2036      	movs	r0, #54	; 0x36
 8000802:	f7ff fe6b 	bl	80004dc <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000806:	230f      	movs	r3, #15
 8000808:	18fb      	adds	r3, r7, r3
 800080a:	2101      	movs	r1, #1
 800080c:	0018      	movs	r0, r3
 800080e:	f7ff fe81 	bl	8000514 <ST7735_WriteData>
  ST7735_Unselect();
 8000812:	f7ff fe3d 	bl	8000490 <ST7735_Unselect>
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b004      	add	sp, #16
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	20000044 	.word	0x20000044
 8000824:	20000042 	.word	0x20000042
 8000828:	20000040 	.word	0x20000040
 800082c:	20000045 	.word	0x20000045
 8000830:	20000047 	.word	0x20000047
 8000834:	20000046 	.word	0x20000046
 8000838:	20000048 	.word	0x20000048

0800083c <ST7735_FillRectangle>:

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800083c:	b5b0      	push	{r4, r5, r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	0005      	movs	r5, r0
 8000844:	000c      	movs	r4, r1
 8000846:	0010      	movs	r0, r2
 8000848:	0019      	movs	r1, r3
 800084a:	1dbb      	adds	r3, r7, #6
 800084c:	1c2a      	adds	r2, r5, #0
 800084e:	801a      	strh	r2, [r3, #0]
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	1c22      	adds	r2, r4, #0
 8000854:	801a      	strh	r2, [r3, #0]
 8000856:	1cbb      	adds	r3, r7, #2
 8000858:	1c02      	adds	r2, r0, #0
 800085a:	801a      	strh	r2, [r3, #0]
 800085c:	003b      	movs	r3, r7
 800085e:	1c0a      	adds	r2, r1, #0
 8000860:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8000862:	1dbb      	adds	r3, r7, #6
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	4a49      	ldr	r2, [pc, #292]	; (800098c <ST7735_FillRectangle+0x150>)
 8000868:	2100      	movs	r1, #0
 800086a:	5e52      	ldrsh	r2, [r2, r1]
 800086c:	4293      	cmp	r3, r2
 800086e:	db00      	blt.n	8000872 <ST7735_FillRectangle+0x36>
 8000870:	e088      	b.n	8000984 <ST7735_FillRectangle+0x148>
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	4a46      	ldr	r2, [pc, #280]	; (8000990 <ST7735_FillRectangle+0x154>)
 8000878:	2100      	movs	r1, #0
 800087a:	5e52      	ldrsh	r2, [r2, r1]
 800087c:	4293      	cmp	r3, r2
 800087e:	db00      	blt.n	8000882 <ST7735_FillRectangle+0x46>
 8000880:	e080      	b.n	8000984 <ST7735_FillRectangle+0x148>
    if((x + w - 1) >= _width) w = _width - x;
 8000882:	1dbb      	adds	r3, r7, #6
 8000884:	881a      	ldrh	r2, [r3, #0]
 8000886:	1cbb      	adds	r3, r7, #2
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	18d3      	adds	r3, r2, r3
 800088c:	4a3f      	ldr	r2, [pc, #252]	; (800098c <ST7735_FillRectangle+0x150>)
 800088e:	2100      	movs	r1, #0
 8000890:	5e52      	ldrsh	r2, [r2, r1]
 8000892:	4293      	cmp	r3, r2
 8000894:	dd08      	ble.n	80008a8 <ST7735_FillRectangle+0x6c>
 8000896:	4b3d      	ldr	r3, [pc, #244]	; (800098c <ST7735_FillRectangle+0x150>)
 8000898:	2200      	movs	r2, #0
 800089a:	5e9b      	ldrsh	r3, [r3, r2]
 800089c:	b299      	uxth	r1, r3
 800089e:	1cbb      	adds	r3, r7, #2
 80008a0:	1dba      	adds	r2, r7, #6
 80008a2:	8812      	ldrh	r2, [r2, #0]
 80008a4:	1a8a      	subs	r2, r1, r2
 80008a6:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= _height) h = _height - y;
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	881a      	ldrh	r2, [r3, #0]
 80008ac:	003b      	movs	r3, r7
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	18d3      	adds	r3, r2, r3
 80008b2:	4a37      	ldr	r2, [pc, #220]	; (8000990 <ST7735_FillRectangle+0x154>)
 80008b4:	2100      	movs	r1, #0
 80008b6:	5e52      	ldrsh	r2, [r2, r1]
 80008b8:	4293      	cmp	r3, r2
 80008ba:	dd08      	ble.n	80008ce <ST7735_FillRectangle+0x92>
 80008bc:	4b34      	ldr	r3, [pc, #208]	; (8000990 <ST7735_FillRectangle+0x154>)
 80008be:	2200      	movs	r2, #0
 80008c0:	5e9b      	ldrsh	r3, [r3, r2]
 80008c2:	b299      	uxth	r1, r3
 80008c4:	003b      	movs	r3, r7
 80008c6:	1d3a      	adds	r2, r7, #4
 80008c8:	8812      	ldrh	r2, [r2, #0]
 80008ca:	1a8a      	subs	r2, r1, r2
 80008cc:	801a      	strh	r2, [r3, #0]

    ST7735_Select();
 80008ce:	f7ff fdd1 	bl	8000474 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80008d2:	1dbb      	adds	r3, r7, #6
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	b2d8      	uxtb	r0, r3
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	b2d9      	uxtb	r1, r3
 80008de:	1dbb      	adds	r3, r7, #6
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	1cbb      	adds	r3, r7, #2
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	18d3      	adds	r3, r2, r3
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	3b01      	subs	r3, #1
 80008f0:	b2dc      	uxtb	r4, r3
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	003b      	movs	r3, r7
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	18d3      	adds	r3, r2, r3
 8000900:	b2db      	uxtb	r3, r3
 8000902:	3b01      	subs	r3, #1
 8000904:	b2db      	uxtb	r3, r3
 8000906:	0022      	movs	r2, r4
 8000908:	f7ff fe84 	bl	8000614 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800090c:	2120      	movs	r1, #32
 800090e:	187b      	adds	r3, r7, r1
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	0a1b      	lsrs	r3, r3, #8
 8000914:	b29b      	uxth	r3, r3
 8000916:	b2da      	uxtb	r2, r3
 8000918:	200c      	movs	r0, #12
 800091a:	183b      	adds	r3, r7, r0
 800091c:	701a      	strb	r2, [r3, #0]
 800091e:	187b      	adds	r3, r7, r1
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	b2da      	uxtb	r2, r3
 8000924:	183b      	adds	r3, r7, r0
 8000926:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(AD_PORT, AD_PIN, GPIO_PIN_SET);
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	019b      	lsls	r3, r3, #6
 800092c:	4819      	ldr	r0, [pc, #100]	; (8000994 <ST7735_FillRectangle+0x158>)
 800092e:	2201      	movs	r2, #1
 8000930:	0019      	movs	r1, r3
 8000932:	f000 ff63 	bl	80017fc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	003a      	movs	r2, r7
 800093a:	8812      	ldrh	r2, [r2, #0]
 800093c:	801a      	strh	r2, [r3, #0]
 800093e:	e01a      	b.n	8000976 <ST7735_FillRectangle+0x13a>
        for(x = w; x > 0; x--) {
 8000940:	1dbb      	adds	r3, r7, #6
 8000942:	1cba      	adds	r2, r7, #2
 8000944:	8812      	ldrh	r2, [r2, #0]
 8000946:	801a      	strh	r2, [r3, #0]
 8000948:	e00c      	b.n	8000964 <ST7735_FillRectangle+0x128>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800094a:	2301      	movs	r3, #1
 800094c:	425b      	negs	r3, r3
 800094e:	220c      	movs	r2, #12
 8000950:	18b9      	adds	r1, r7, r2
 8000952:	4811      	ldr	r0, [pc, #68]	; (8000998 <ST7735_FillRectangle+0x15c>)
 8000954:	2202      	movs	r2, #2
 8000956:	f001 fd59 	bl	800240c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800095a:	1dbb      	adds	r3, r7, #6
 800095c:	881a      	ldrh	r2, [r3, #0]
 800095e:	1dbb      	adds	r3, r7, #6
 8000960:	3a01      	subs	r2, #1
 8000962:	801a      	strh	r2, [r3, #0]
 8000964:	1dbb      	adds	r3, r7, #6
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1ee      	bne.n	800094a <ST7735_FillRectangle+0x10e>
    for(y = h; y > 0; y--) {
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	881a      	ldrh	r2, [r3, #0]
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	3a01      	subs	r2, #1
 8000974:	801a      	strh	r2, [r3, #0]
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1e0      	bne.n	8000940 <ST7735_FillRectangle+0x104>
        }
    }

    ST7735_Unselect();
 800097e:	f7ff fd87 	bl	8000490 <ST7735_Unselect>
 8000982:	e000      	b.n	8000986 <ST7735_FillRectangle+0x14a>
    if((x >= _width) || (y >= _height)) return;
 8000984:	46c0      	nop			; (mov r8, r8)
}
 8000986:	46bd      	mov	sp, r7
 8000988:	b004      	add	sp, #16
 800098a:	bdb0      	pop	{r4, r5, r7, pc}
 800098c:	20000040 	.word	0x20000040
 8000990:	20000042 	.word	0x20000042
 8000994:	48000800 	.word	0x48000800
 8000998:	200000b0 	.word	0x200000b0

0800099c <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 800099c:	b5b0      	push	{r4, r5, r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	0005      	movs	r5, r0
 80009a4:	000c      	movs	r4, r1
 80009a6:	0010      	movs	r0, r2
 80009a8:	0019      	movs	r1, r3
 80009aa:	1dbb      	adds	r3, r7, #6
 80009ac:	1c2a      	adds	r2, r5, #0
 80009ae:	801a      	strh	r2, [r3, #0]
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	1c22      	adds	r2, r4, #0
 80009b4:	801a      	strh	r2, [r3, #0]
 80009b6:	1cbb      	adds	r3, r7, #2
 80009b8:	1c02      	adds	r2, r0, #0
 80009ba:	801a      	strh	r2, [r3, #0]
 80009bc:	003b      	movs	r3, r7
 80009be:	1c0a      	adds	r2, r1, #0
 80009c0:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 80009c2:	1dbb      	adds	r3, r7, #6
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	4a2a      	ldr	r2, [pc, #168]	; (8000a70 <ST7735_DrawImage+0xd4>)
 80009c8:	2100      	movs	r1, #0
 80009ca:	5e52      	ldrsh	r2, [r2, r1]
 80009cc:	4293      	cmp	r3, r2
 80009ce:	da47      	bge.n	8000a60 <ST7735_DrawImage+0xc4>
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	4a27      	ldr	r2, [pc, #156]	; (8000a74 <ST7735_DrawImage+0xd8>)
 80009d6:	2100      	movs	r1, #0
 80009d8:	5e52      	ldrsh	r2, [r2, r1]
 80009da:	4293      	cmp	r3, r2
 80009dc:	da40      	bge.n	8000a60 <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 80009de:	1dbb      	adds	r3, r7, #6
 80009e0:	881a      	ldrh	r2, [r3, #0]
 80009e2:	1cbb      	adds	r3, r7, #2
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	18d3      	adds	r3, r2, r3
 80009e8:	4a21      	ldr	r2, [pc, #132]	; (8000a70 <ST7735_DrawImage+0xd4>)
 80009ea:	2100      	movs	r1, #0
 80009ec:	5e52      	ldrsh	r2, [r2, r1]
 80009ee:	4293      	cmp	r3, r2
 80009f0:	dc38      	bgt.n	8000a64 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	881a      	ldrh	r2, [r3, #0]
 80009f6:	003b      	movs	r3, r7
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	18d3      	adds	r3, r2, r3
 80009fc:	4a1d      	ldr	r2, [pc, #116]	; (8000a74 <ST7735_DrawImage+0xd8>)
 80009fe:	2100      	movs	r1, #0
 8000a00:	5e52      	ldrsh	r2, [r2, r1]
 8000a02:	4293      	cmp	r3, r2
 8000a04:	dc30      	bgt.n	8000a68 <ST7735_DrawImage+0xcc>

    ST7735_Select();
 8000a06:	f7ff fd35 	bl	8000474 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000a0a:	1dbb      	adds	r3, r7, #6
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	b2d8      	uxtb	r0, r3
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	b2d9      	uxtb	r1, r3
 8000a16:	1dbb      	adds	r3, r7, #6
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	1cbb      	adds	r3, r7, #2
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	18d3      	adds	r3, r2, r3
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	3b01      	subs	r3, #1
 8000a28:	b2dc      	uxtb	r4, r3
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	003b      	movs	r3, r7
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	18d3      	adds	r3, r2, r3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	0022      	movs	r2, r4
 8000a40:	f7ff fde8 	bl	8000614 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000a44:	1cbb      	adds	r3, r7, #2
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	003a      	movs	r2, r7
 8000a4a:	8812      	ldrh	r2, [r2, #0]
 8000a4c:	4353      	muls	r3, r2
 8000a4e:	005a      	lsls	r2, r3, #1
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	0011      	movs	r1, r2
 8000a54:	0018      	movs	r0, r3
 8000a56:	f7ff fd5d 	bl	8000514 <ST7735_WriteData>
    ST7735_Unselect();
 8000a5a:	f7ff fd19 	bl	8000490 <ST7735_Unselect>
 8000a5e:	e004      	b.n	8000a6a <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	e002      	b.n	8000a6a <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	e000      	b.n	8000a6a <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 8000a68:	46c0      	nop			; (mov r8, r8)
}
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b002      	add	sp, #8
 8000a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a70:	20000040 	.word	0x20000040
 8000a74:	20000042 	.word	0x20000042

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7c:	f000 fc12 	bl	80012a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a80:	f000 f822 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a84:	f000 f92e 	bl	8000ce4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a88:	f000 f880 	bl	8000b8c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a8c:	f000 f8fa 	bl	8000c84 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000a90:	f002 fd62 	bl	8003558 <MX_FATFS_Init>
  MX_SPI2_Init();
 8000a94:	f000 f8b8 	bl	8000c08 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  ST7735_Init(0);
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff fe13 	bl	80006c4 <ST7735_Init>

  fillScreen(BLACK);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff fccc 	bl	800043c <fillScreen>
  HAL_Delay(500);
 8000aa4:	23fa      	movs	r3, #250	; 0xfa
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f000 fc5f 	bl	800136c <HAL_Delay>

  sd_process();
 8000aae:	f000 f991 	bl	8000dd4 <sd_process>

  HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000ab2:	23fa      	movs	r3, #250	; 0xfa
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f000 fc58 	bl	800136c <HAL_Delay>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	  HAL_Delay(1000);
 8000abc:	23fa      	movs	r3, #250	; 0xfa
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f000 fc53 	bl	800136c <HAL_Delay>
 8000ac6:	e7f9      	b.n	8000abc <main+0x44>

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b095      	sub	sp, #84	; 0x54
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	2420      	movs	r4, #32
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	2330      	movs	r3, #48	; 0x30
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	2100      	movs	r1, #0
 8000ada:	f006 fc4b 	bl	8007374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ade:	2310      	movs	r3, #16
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	001a      	movs	r2, r3
 8000ae8:	2100      	movs	r1, #0
 8000aea:	f006 fc43 	bl	8007374 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aee:	003b      	movs	r3, r7
 8000af0:	0018      	movs	r0, r3
 8000af2:	2310      	movs	r3, #16
 8000af4:	001a      	movs	r2, r3
 8000af6:	2100      	movs	r1, #0
 8000af8:	f006 fc3c 	bl	8007374 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000afc:	0021      	movs	r1, r4
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2202      	movs	r2, #2
 8000b02:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2201      	movs	r2, #1
 8000b08:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2210      	movs	r2, #16
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	2202      	movs	r2, #2
 8000b14:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	2280      	movs	r2, #128	; 0x80
 8000b1a:	0212      	lsls	r2, r2, #8
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	22e0      	movs	r2, #224	; 0xe0
 8000b22:	0352      	lsls	r2, r2, #13
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2201      	movs	r2, #1
 8000b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 fe82 	bl	8001838 <HAL_RCC_OscConfig>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000b38:	f000 f946 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3c:	2110      	movs	r1, #16
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2207      	movs	r2, #7
 8000b42:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2202      	movs	r2, #2
 8000b48:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2101      	movs	r1, #1
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 f98a 	bl	8001e74 <HAL_RCC_ClockConfig>
 8000b60:	1e03      	subs	r3, r0, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000b64:	f000 f930 	bl	8000dc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b68:	003b      	movs	r3, r7
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000b6e:	003b      	movs	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b74:	003b      	movs	r3, r7
 8000b76:	0018      	movs	r0, r3
 8000b78:	f001 fac2 	bl	8002100 <HAL_RCCEx_PeriphCLKConfig>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000b80:	f000 f922 	bl	8000dc8 <Error_Handler>
  }
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b015      	add	sp, #84	; 0x54
 8000b8a:	bd90      	pop	{r4, r7, pc}

08000b8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <MX_SPI1_Init+0x74>)
 8000b92:	4a1c      	ldr	r2, [pc, #112]	; (8000c04 <MX_SPI1_Init+0x78>)
 8000b94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b96:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_SPI1_Init+0x74>)
 8000b98:	2282      	movs	r2, #130	; 0x82
 8000b9a:	0052      	lsls	r2, r2, #1
 8000b9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <MX_SPI1_Init+0x74>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba4:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <MX_SPI1_Init+0x74>)
 8000ba6:	22e0      	movs	r2, #224	; 0xe0
 8000ba8:	00d2      	lsls	r2, r2, #3
 8000baa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_SPI1_Init+0x74>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <MX_SPI1_Init+0x74>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_SPI1_Init+0x74>)
 8000bba:	2280      	movs	r2, #128	; 0x80
 8000bbc:	0092      	lsls	r2, r2, #2
 8000bbe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_SPI1_Init+0x74>)
 8000bc2:	2230      	movs	r2, #48	; 0x30
 8000bc4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_SPI1_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_SPI1_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_SPI1_Init+0x74>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_SPI1_Init+0x74>)
 8000bda:	2207      	movs	r2, #7
 8000bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MX_SPI1_Init+0x74>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_SPI1_Init+0x74>)
 8000be6:	2208      	movs	r2, #8
 8000be8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <MX_SPI1_Init+0x74>)
 8000bec:	0018      	movs	r0, r3
 8000bee:	f001 fb55 	bl	800229c <HAL_SPI_Init>
 8000bf2:	1e03      	subs	r3, r0, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000bf6:	f000 f8e7 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	2000004c 	.word	0x2000004c
 8000c04:	40013000 	.word	0x40013000

08000c08 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <MX_SPI2_Init+0x74>)
 8000c0e:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <MX_SPI2_Init+0x78>)
 8000c10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_SPI2_Init+0x74>)
 8000c14:	2282      	movs	r2, #130	; 0x82
 8000c16:	0052      	lsls	r2, r2, #1
 8000c18:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <MX_SPI2_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c20:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <MX_SPI2_Init+0x74>)
 8000c22:	22e0      	movs	r2, #224	; 0xe0
 8000c24:	00d2      	lsls	r2, r2, #3
 8000c26:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_SPI2_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <MX_SPI2_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_SPI2_Init+0x74>)
 8000c36:	2280      	movs	r2, #128	; 0x80
 8000c38:	0092      	lsls	r2, r2, #2
 8000c3a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_SPI2_Init+0x74>)
 8000c3e:	2210      	movs	r2, #16
 8000c40:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_SPI2_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_SPI2_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_SPI2_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_SPI2_Init+0x74>)
 8000c56:	2207      	movs	r2, #7
 8000c58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_SPI2_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_SPI2_Init+0x74>)
 8000c62:	2208      	movs	r2, #8
 8000c64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <MX_SPI2_Init+0x74>)
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f001 fb17 	bl	800229c <HAL_SPI_Init>
 8000c6e:	1e03      	subs	r3, r0, #0
 8000c70:	d001      	beq.n	8000c76 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000c72:	f000 f8a9 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200000b0 	.word	0x200000b0
 8000c80:	40003800 	.word	0x40003800

08000c84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000c8a:	4a15      	ldr	r2, [pc, #84]	; (8000ce0 <MX_USART1_UART_Init+0x5c>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000c90:	22e1      	movs	r2, #225	; 0xe1
 8000c92:	0252      	lsls	r2, r2, #9
 8000c94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f002 f857 	bl	8002d7c <HAL_UART_Init>
 8000cce:	1e03      	subs	r3, r0, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000cd2:	f000 f879 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000114 	.word	0x20000114
 8000ce0:	40013800 	.word	0x40013800

08000ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	240c      	movs	r4, #12
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	0018      	movs	r0, r3
 8000cf0:	2314      	movs	r3, #20
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	f006 fb3d 	bl	8007374 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b30      	ldr	r3, [pc, #192]	; (8000dbc <MX_GPIO_Init+0xd8>)
 8000cfc:	695a      	ldr	r2, [r3, #20]
 8000cfe:	4b2f      	ldr	r3, [pc, #188]	; (8000dbc <MX_GPIO_Init+0xd8>)
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	0309      	lsls	r1, r1, #12
 8000d04:	430a      	orrs	r2, r1
 8000d06:	615a      	str	r2, [r3, #20]
 8000d08:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <MX_GPIO_Init+0xd8>)
 8000d0a:	695a      	ldr	r2, [r3, #20]
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	031b      	lsls	r3, r3, #12
 8000d10:	4013      	ands	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <MX_GPIO_Init+0xd8>)
 8000d18:	695a      	ldr	r2, [r3, #20]
 8000d1a:	4b28      	ldr	r3, [pc, #160]	; (8000dbc <MX_GPIO_Init+0xd8>)
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	0289      	lsls	r1, r1, #10
 8000d20:	430a      	orrs	r2, r1
 8000d22:	615a      	str	r2, [r3, #20]
 8000d24:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <MX_GPIO_Init+0xd8>)
 8000d26:	695a      	ldr	r2, [r3, #20]
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	029b      	lsls	r3, r3, #10
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <MX_GPIO_Init+0xd8>)
 8000d34:	695a      	ldr	r2, [r3, #20]
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <MX_GPIO_Init+0xd8>)
 8000d38:	2180      	movs	r1, #128	; 0x80
 8000d3a:	02c9      	lsls	r1, r1, #11
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	615a      	str	r2, [r3, #20]
 8000d40:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <MX_GPIO_Init+0xd8>)
 8000d42:	695a      	ldr	r2, [r3, #20]
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	02db      	lsls	r3, r3, #11
 8000d48:	4013      	ands	r3, r2
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ST7735_AD_Pin|ST7735_CS_Pin|ST7735_RESET_Pin, GPIO_PIN_RESET);
 8000d4e:	23e0      	movs	r3, #224	; 0xe0
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	481b      	ldr	r0, [pc, #108]	; (8000dc0 <MX_GPIO_Init+0xdc>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	0019      	movs	r1, r3
 8000d58:	f000 fd50 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_GPIO_Init+0xe0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2102      	movs	r1, #2
 8000d62:	0018      	movs	r0, r3
 8000d64:	f000 fd4a 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST7735_AD_Pin ST7735_CS_Pin ST7735_RESET_Pin */
  GPIO_InitStruct.Pin = ST7735_AD_Pin|ST7735_CS_Pin|ST7735_RESET_Pin;
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	22e0      	movs	r2, #224	; 0xe0
 8000d6c:	0212      	lsls	r2, r2, #8
 8000d6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	193b      	adds	r3, r7, r4
 8000d72:	2201      	movs	r2, #1
 8000d74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <MX_GPIO_Init+0xdc>)
 8000d86:	0019      	movs	r1, r3
 8000d88:	0010      	movs	r0, r2
 8000d8a:	f000 fbc7 	bl	800151c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000d8e:	0021      	movs	r1, r4
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2202      	movs	r2, #2
 8000d94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2201      	movs	r2, #1
 8000d9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <MX_GPIO_Init+0xe0>)
 8000dac:	0019      	movs	r1, r3
 8000dae:	0010      	movs	r0, r2
 8000db0:	f000 fbb4 	bl	800151c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b009      	add	sp, #36	; 0x24
 8000dba:	bd90      	pop	{r4, r7, pc}
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	48000800 	.word	0x48000800
 8000dc4:	48000400 	.word	0x48000400

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <Error_Handler+0x8>
	...

08000dd4 <sd_process>:
FIL fil; 			//File handle
FRESULT fres; 		//Result after operations


void sd_process(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af02      	add	r7, sp, #8

	ST7735_SetRotation(3); // (wd = 160 ; x_start = 0)  and (ht = 128 ; y_start = 0)
 8000dda:	2003      	movs	r0, #3
 8000ddc:	f7ff fca4 	bl	8000728 <ST7735_SetRotation>
	HAL_Delay(1000);
 8000de0:	23fa      	movs	r3, #250	; 0xfa
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	0018      	movs	r0, r3
 8000de6:	f000 fac1 	bl	800136c <HAL_Delay>
	fillScreen(BLACK);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff fb26 	bl	800043c <fillScreen>

	//Open the file system
	fres = f_mount(&FatFs, "", 1); // 1 = mount now
 8000df0:	490d      	ldr	r1, [pc, #52]	; (8000e28 <sd_process+0x54>)
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <sd_process+0x58>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	0018      	movs	r0, r3
 8000df8:	f005 fa30 	bl	800625c <f_mount>
 8000dfc:	0003      	movs	r3, r0
 8000dfe:	001a      	movs	r2, r3
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <sd_process+0x5c>)
 8000e02:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK)
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <sd_process+0x5c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d002      	beq.n	8000e12 <sd_process+0x3e>
		ferror_handler(ERROR_0_MOUNT);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 f8d3 	bl	8000fb8 <ferror_handler>

	showVideo(FILE_NAME, FRAME_DIM_WD, FRAME_DIM_HT, FRAME_DIV_FACTOR, FRAME_SKIP_FACTOR);
 8000e12:	4808      	ldr	r0, [pc, #32]	; (8000e34 <sd_process+0x60>)
 8000e14:	2300      	movs	r3, #0
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2302      	movs	r3, #2
 8000e1a:	2264      	movs	r2, #100	; 0x64
 8000e1c:	2164      	movs	r1, #100	; 0x64
 8000e1e:	f000 f80b 	bl	8000e38 <showVideo>

}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	080073e4 	.word	0x080073e4
 8000e2c:	2000019c 	.word	0x2000019c
 8000e30:	200005f8 	.word	0x200005f8
 8000e34:	080073e8 	.word	0x080073e8

08000e38 <showVideo>:
// x,y - start x,y on the screen
// wd,ht - width, height of the video (raw data has no header with such info)
// nl - num lines read in one operation (nl*wd*2 bytes are loaded)
// skipFr - num frames to skip
static void showVideo(char *name, int wd, int ht, int nl, int skipFr)
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	4c57      	ldr	r4, [pc, #348]	; (8000f98 <showVideo+0x160>)
 8000e3c:	44a5      	add	sp, r4
 8000e3e:	af02      	add	r7, sp, #8
 8000e40:	60f8      	str	r0, [r7, #12]
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	603b      	str	r3, [r7, #0]

	uint16_t buf[MAX_BUFF_RAM];			// RAM buffer
	UINT byteRead;						// Number of bytes elaborated at time


	fres = f_open(&fil, name, FA_READ);
 8000e48:	68f9      	ldr	r1, [r7, #12]
 8000e4a:	4b54      	ldr	r3, [pc, #336]	; (8000f9c <showVideo+0x164>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f005 fa54 	bl	80062fc <f_open>
 8000e54:	0003      	movs	r3, r0
 8000e56:	001a      	movs	r2, r3
 8000e58:	4b51      	ldr	r3, [pc, #324]	; (8000fa0 <showVideo+0x168>)
 8000e5a:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK)
 8000e5c:	4b50      	ldr	r3, [pc, #320]	; (8000fa0 <showVideo+0x168>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <showVideo+0x32>
		ferror_handler(ERROR_1_OPEN);
 8000e64:	2001      	movs	r0, #1
 8000e66:	f000 f8a7 	bl	8000fb8 <ferror_handler>

	// Point to the initial position
	f_rewind(&fil);
 8000e6a:	4b4c      	ldr	r3, [pc, #304]	; (8000f9c <showVideo+0x164>)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f005 ff70 	bl	8006d54 <f_lseek>


	while(!f_eof(&fil))
 8000e74:	e07b      	b.n	8000f6e <showVideo+0x136>
	{

		for(int i = 0 ; i < ( ht / nl ) ; i++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	4a4a      	ldr	r2, [pc, #296]	; (8000fa4 <showVideo+0x16c>)
 8000e7a:	18ba      	adds	r2, r7, r2
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	e052      	b.n	8000f26 <showVideo+0xee>
		{

			fres = f_read(&fil, buf, ( wd * 2 * nl ), &byteRead);
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	683a      	ldr	r2, [r7, #0]
 8000e84:	4353      	muls	r3, r2
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	001a      	movs	r2, r3
 8000e8a:	2314      	movs	r3, #20
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	2118      	movs	r1, #24
 8000e90:	1879      	adds	r1, r7, r1
 8000e92:	4842      	ldr	r0, [pc, #264]	; (8000f9c <showVideo+0x164>)
 8000e94:	f005 fcb6 	bl	8006804 <f_read>
 8000e98:	0003      	movs	r3, r0
 8000e9a:	001a      	movs	r2, r3
 8000e9c:	4b40      	ldr	r3, [pc, #256]	; (8000fa0 <showVideo+0x168>)
 8000e9e:	701a      	strb	r2, [r3, #0]

			if(fres != FR_OK)
 8000ea0:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <showVideo+0x168>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <showVideo+0x76>
				ferror_handler(ERROR_2_READ);
 8000ea8:	2002      	movs	r0, #2
 8000eaa:	f000 f885 	bl	8000fb8 <ferror_handler>

			if(byteRead != FRAME_SECTION_SIZE)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	4a3d      	ldr	r2, [pc, #244]	; (8000fa8 <showVideo+0x170>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d002      	beq.n	8000ebc <showVideo+0x84>
				ferror_handler(ERROR_3_READ);
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	f000 f87e 	bl	8000fb8 <ferror_handler>

			for(int j = 0 ; j < nl ;j++)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4a3b      	ldr	r2, [pc, #236]	; (8000fac <showVideo+0x174>)
 8000ec0:	18ba      	adds	r2, r7, r2
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	e023      	b.n	8000f0e <showVideo+0xd6>
				ST7735_DrawImage(0, ( ( i * nl ) + j ), wd, 1, ( &buf[20 + ( j * wd )] ));
 8000ec6:	4b37      	ldr	r3, [pc, #220]	; (8000fa4 <showVideo+0x16c>)
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	b292      	uxth	r2, r2
 8000ed2:	4353      	muls	r3, r2
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	4c35      	ldr	r4, [pc, #212]	; (8000fac <showVideo+0x174>)
 8000ed8:	193b      	adds	r3, r7, r4
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	18d3      	adds	r3, r2, r3
 8000ee0:	b299      	uxth	r1, r3
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	b298      	uxth	r0, r3
 8000ee6:	193b      	adds	r3, r7, r4
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	4353      	muls	r3, r2
 8000eee:	3314      	adds	r3, #20
 8000ef0:	2218      	movs	r2, #24
 8000ef2:	18ba      	adds	r2, r7, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	18d3      	adds	r3, r2, r3
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2301      	movs	r3, #1
 8000efc:	0002      	movs	r2, r0
 8000efe:	2000      	movs	r0, #0
 8000f00:	f7ff fd4c 	bl	800099c <ST7735_DrawImage>
			for(int j = 0 ; j < nl ;j++)
 8000f04:	193b      	adds	r3, r7, r4
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	193a      	adds	r2, r7, r4
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	4b27      	ldr	r3, [pc, #156]	; (8000fac <showVideo+0x174>)
 8000f10:	18fb      	adds	r3, r7, r3
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	dbd5      	blt.n	8000ec6 <showVideo+0x8e>
		for(int i = 0 ; i < ( ht / nl ) ; i++)
 8000f1a:	4a22      	ldr	r2, [pc, #136]	; (8000fa4 <showVideo+0x16c>)
 8000f1c:	18bb      	adds	r3, r7, r2
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3301      	adds	r3, #1
 8000f22:	18ba      	adds	r2, r7, r2
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	6839      	ldr	r1, [r7, #0]
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff f975 	bl	8000218 <__divsi3>
 8000f2e:	0003      	movs	r3, r0
 8000f30:	001a      	movs	r2, r3
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <showVideo+0x16c>)
 8000f34:	18fb      	adds	r3, r7, r3
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	dba1      	blt.n	8000e80 <showVideo+0x48>

		}

		// Skip a number of frames
		if(skipFr > 0)
 8000f3c:	481c      	ldr	r0, [pc, #112]	; (8000fb0 <showVideo+0x178>)
 8000f3e:	2408      	movs	r4, #8
 8000f40:	1903      	adds	r3, r0, r4
 8000f42:	19db      	adds	r3, r3, r7
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	dd11      	ble.n	8000f6e <showVideo+0x136>
			f_lseek(&fil, fil.fptr + ( wd * ht * 2 * skipFr ));
 8000f4a:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <showVideo+0x164>)
 8000f4c:	2382      	movs	r3, #130	; 0x82
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	58d3      	ldr	r3, [r2, r3]
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	434a      	muls	r2, r1
 8000f58:	1901      	adds	r1, r0, r4
 8000f5a:	19c9      	adds	r1, r1, r7
 8000f5c:	6809      	ldr	r1, [r1, #0]
 8000f5e:	434a      	muls	r2, r1
 8000f60:	0052      	lsls	r2, r2, #1
 8000f62:	189a      	adds	r2, r3, r2
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <showVideo+0x164>)
 8000f66:	0011      	movs	r1, r2
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f005 fef3 	bl	8006d54 <f_lseek>
	while(!f_eof(&fil))
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <showVideo+0x164>)
 8000f70:	2382      	movs	r3, #130	; 0x82
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	58d2      	ldr	r2, [r2, r3]
 8000f76:	4909      	ldr	r1, [pc, #36]	; (8000f9c <showVideo+0x164>)
 8000f78:	2383      	movs	r3, #131	; 0x83
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	58cb      	ldr	r3, [r1, r3]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d000      	beq.n	8000f84 <showVideo+0x14c>
 8000f82:	e778      	b.n	8000e76 <showVideo+0x3e>

	}

	f_close(&fil);
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <showVideo+0x164>)
 8000f86:	0018      	movs	r0, r3
 8000f88:	f005 feac 	bl	8006ce4 <f_close>

}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <showVideo+0x17c>)
 8000f92:	449d      	add	sp, r3
 8000f94:	bd90      	pop	{r4, r7, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	ffffb024 	.word	0xffffb024
 8000f9c:	200003cc 	.word	0x200003cc
 8000fa0:	200005f8 	.word	0x200005f8
 8000fa4:	00004fcc 	.word	0x00004fcc
 8000fa8:	00002710 	.word	0x00002710
 8000fac:	00004fc8 	.word	0x00004fc8
 8000fb0:	00004fd8 	.word	0x00004fd8
 8000fb4:	00004fd4 	.word	0x00004fd4

08000fb8 <ferror_handler>:

static void ferror_handler(uint8_t error)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	0002      	movs	r2, r0
 8000fc0:	1dfb      	adds	r3, r7, #7
 8000fc2:	701a      	strb	r2, [r3, #0]

	switch(error)
 8000fc4:	1dfb      	adds	r3, r7, #7
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d00b      	beq.n	8000fe4 <ferror_handler+0x2c>
 8000fcc:	dc0b      	bgt.n	8000fe6 <ferror_handler+0x2e>
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d007      	beq.n	8000fe2 <ferror_handler+0x2a>
 8000fd2:	dc08      	bgt.n	8000fe6 <ferror_handler+0x2e>
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <ferror_handler+0x26>
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d001      	beq.n	8000fe0 <ferror_handler+0x28>
			break;


	}

}
 8000fdc:	e003      	b.n	8000fe6 <ferror_handler+0x2e>
			while(1);
 8000fde:	e7fe      	b.n	8000fde <ferror_handler+0x26>
			while(1);
 8000fe0:	e7fe      	b.n	8000fe0 <ferror_handler+0x28>
			while(1);
 8000fe2:	e7fe      	b.n	8000fe2 <ferror_handler+0x2a>
			while(1);
 8000fe4:	e7fe      	b.n	8000fe4 <ferror_handler+0x2c>
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b002      	add	sp, #8
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <HAL_MspInit+0x44>)
 8000ff8:	699a      	ldr	r2, [r3, #24]
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_MspInit+0x44>)
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	430a      	orrs	r2, r1
 8001000:	619a      	str	r2, [r3, #24]
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <HAL_MspInit+0x44>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	2201      	movs	r2, #1
 8001008:	4013      	ands	r3, r2
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_MspInit+0x44>)
 8001010:	69da      	ldr	r2, [r3, #28]
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_MspInit+0x44>)
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	0549      	lsls	r1, r1, #21
 8001018:	430a      	orrs	r2, r1
 800101a:	61da      	str	r2, [r3, #28]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_MspInit+0x44>)
 800101e:	69da      	ldr	r2, [r3, #28]
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	055b      	lsls	r3, r3, #21
 8001024:	4013      	ands	r3, r2
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	b002      	add	sp, #8
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	40021000 	.word	0x40021000

08001038 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b08d      	sub	sp, #52	; 0x34
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	241c      	movs	r4, #28
 8001042:	193b      	adds	r3, r7, r4
 8001044:	0018      	movs	r0, r3
 8001046:	2314      	movs	r3, #20
 8001048:	001a      	movs	r2, r3
 800104a:	2100      	movs	r1, #0
 800104c:	f006 f992 	bl	8007374 <memset>
  if(hspi->Instance==SPI1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a45      	ldr	r2, [pc, #276]	; (800116c <HAL_SPI_MspInit+0x134>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d133      	bne.n	80010c2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800105a:	4b45      	ldr	r3, [pc, #276]	; (8001170 <HAL_SPI_MspInit+0x138>)
 800105c:	699a      	ldr	r2, [r3, #24]
 800105e:	4b44      	ldr	r3, [pc, #272]	; (8001170 <HAL_SPI_MspInit+0x138>)
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	0149      	lsls	r1, r1, #5
 8001064:	430a      	orrs	r2, r1
 8001066:	619a      	str	r2, [r3, #24]
 8001068:	4b41      	ldr	r3, [pc, #260]	; (8001170 <HAL_SPI_MspInit+0x138>)
 800106a:	699a      	ldr	r2, [r3, #24]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	015b      	lsls	r3, r3, #5
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
 8001074:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4b3e      	ldr	r3, [pc, #248]	; (8001170 <HAL_SPI_MspInit+0x138>)
 8001078:	695a      	ldr	r2, [r3, #20]
 800107a:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <HAL_SPI_MspInit+0x138>)
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	0289      	lsls	r1, r1, #10
 8001080:	430a      	orrs	r2, r1
 8001082:	615a      	str	r2, [r3, #20]
 8001084:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <HAL_SPI_MspInit+0x138>)
 8001086:	695a      	ldr	r2, [r3, #20]
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	029b      	lsls	r3, r3, #10
 800108c:	4013      	ands	r3, r2
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001092:	0021      	movs	r1, r4
 8001094:	187b      	adds	r3, r7, r1
 8001096:	22e0      	movs	r2, #224	; 0xe0
 8001098:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2202      	movs	r2, #2
 800109e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2203      	movs	r2, #3
 80010aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	187a      	adds	r2, r7, r1
 80010b4:	2390      	movs	r3, #144	; 0x90
 80010b6:	05db      	lsls	r3, r3, #23
 80010b8:	0011      	movs	r1, r2
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 fa2e 	bl	800151c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010c0:	e04f      	b.n	8001162 <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a2b      	ldr	r2, [pc, #172]	; (8001174 <HAL_SPI_MspInit+0x13c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d14a      	bne.n	8001162 <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010cc:	4b28      	ldr	r3, [pc, #160]	; (8001170 <HAL_SPI_MspInit+0x138>)
 80010ce:	69da      	ldr	r2, [r3, #28]
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <HAL_SPI_MspInit+0x138>)
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	01c9      	lsls	r1, r1, #7
 80010d6:	430a      	orrs	r2, r1
 80010d8:	61da      	str	r2, [r3, #28]
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <HAL_SPI_MspInit+0x138>)
 80010dc:	69da      	ldr	r2, [r3, #28]
 80010de:	2380      	movs	r3, #128	; 0x80
 80010e0:	01db      	lsls	r3, r3, #7
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <HAL_SPI_MspInit+0x138>)
 80010ea:	695a      	ldr	r2, [r3, #20]
 80010ec:	4b20      	ldr	r3, [pc, #128]	; (8001170 <HAL_SPI_MspInit+0x138>)
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	02c9      	lsls	r1, r1, #11
 80010f2:	430a      	orrs	r2, r1
 80010f4:	615a      	str	r2, [r3, #20]
 80010f6:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <HAL_SPI_MspInit+0x138>)
 80010f8:	695a      	ldr	r2, [r3, #20]
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	02db      	lsls	r3, r3, #11
 80010fe:	4013      	ands	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001104:	211c      	movs	r1, #28
 8001106:	187b      	adds	r3, r7, r1
 8001108:	2280      	movs	r2, #128	; 0x80
 800110a:	00d2      	lsls	r2, r2, #3
 800110c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	000c      	movs	r4, r1
 8001110:	193b      	adds	r3, r7, r4
 8001112:	2202      	movs	r2, #2
 8001114:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	193b      	adds	r3, r7, r4
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800111c:	193b      	adds	r3, r7, r4
 800111e:	2203      	movs	r2, #3
 8001120:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001122:	193b      	adds	r3, r7, r4
 8001124:	2205      	movs	r2, #5
 8001126:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001128:	193b      	adds	r3, r7, r4
 800112a:	4a13      	ldr	r2, [pc, #76]	; (8001178 <HAL_SPI_MspInit+0x140>)
 800112c:	0019      	movs	r1, r3
 800112e:	0010      	movs	r0, r2
 8001130:	f000 f9f4 	bl	800151c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001134:	0021      	movs	r1, r4
 8001136:	187b      	adds	r3, r7, r1
 8001138:	22c0      	movs	r2, #192	; 0xc0
 800113a:	0212      	lsls	r2, r2, #8
 800113c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	187b      	adds	r3, r7, r1
 8001140:	2202      	movs	r2, #2
 8001142:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	187b      	adds	r3, r7, r1
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114a:	187b      	adds	r3, r7, r1
 800114c:	2203      	movs	r2, #3
 800114e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001150:	187b      	adds	r3, r7, r1
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001156:	187b      	adds	r3, r7, r1
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_SPI_MspInit+0x140>)
 800115a:	0019      	movs	r1, r3
 800115c:	0010      	movs	r0, r2
 800115e:	f000 f9dd 	bl	800151c <HAL_GPIO_Init>
}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b00d      	add	sp, #52	; 0x34
 8001168:	bd90      	pop	{r4, r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	40013000 	.word	0x40013000
 8001170:	40021000 	.word	0x40021000
 8001174:	40003800 	.word	0x40003800
 8001178:	48000400 	.word	0x48000400

0800117c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b08b      	sub	sp, #44	; 0x2c
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	2414      	movs	r4, #20
 8001186:	193b      	adds	r3, r7, r4
 8001188:	0018      	movs	r0, r3
 800118a:	2314      	movs	r3, #20
 800118c:	001a      	movs	r2, r3
 800118e:	2100      	movs	r1, #0
 8001190:	f006 f8f0 	bl	8007374 <memset>
  if(huart->Instance==USART1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a1d      	ldr	r2, [pc, #116]	; (8001210 <HAL_UART_MspInit+0x94>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d133      	bne.n	8001206 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800119e:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <HAL_UART_MspInit+0x98>)
 80011a0:	699a      	ldr	r2, [r3, #24]
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <HAL_UART_MspInit+0x98>)
 80011a4:	2180      	movs	r1, #128	; 0x80
 80011a6:	01c9      	lsls	r1, r1, #7
 80011a8:	430a      	orrs	r2, r1
 80011aa:	619a      	str	r2, [r3, #24]
 80011ac:	4b19      	ldr	r3, [pc, #100]	; (8001214 <HAL_UART_MspInit+0x98>)
 80011ae:	699a      	ldr	r2, [r3, #24]
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	01db      	lsls	r3, r3, #7
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <HAL_UART_MspInit+0x98>)
 80011bc:	695a      	ldr	r2, [r3, #20]
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_UART_MspInit+0x98>)
 80011c0:	2180      	movs	r1, #128	; 0x80
 80011c2:	0289      	lsls	r1, r1, #10
 80011c4:	430a      	orrs	r2, r1
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_UART_MspInit+0x98>)
 80011ca:	695a      	ldr	r2, [r3, #20]
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	029b      	lsls	r3, r3, #10
 80011d0:	4013      	ands	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011d6:	193b      	adds	r3, r7, r4
 80011d8:	22c0      	movs	r2, #192	; 0xc0
 80011da:	00d2      	lsls	r2, r2, #3
 80011dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	0021      	movs	r1, r4
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	2202      	movs	r2, #2
 80011e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	2203      	movs	r2, #3
 80011f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	2201      	movs	r2, #1
 80011f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	187a      	adds	r2, r7, r1
 80011fa:	2390      	movs	r3, #144	; 0x90
 80011fc:	05db      	lsls	r3, r3, #23
 80011fe:	0011      	movs	r1, r2
 8001200:	0018      	movs	r0, r3
 8001202:	f000 f98b 	bl	800151c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b00b      	add	sp, #44	; 0x2c
 800120c:	bd90      	pop	{r4, r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	40013800 	.word	0x40013800
 8001214:	40021000 	.word	0x40021000

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800121c:	e7fe      	b.n	800121c <NMI_Handler+0x4>

0800121e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <HardFault_Handler+0x4>

08001224 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123c:	f000 f87a 	bl	8001334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001252:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001254:	f7ff fff7 	bl	8001246 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <LoopForever+0x6>)
  ldr r1, =_edata
 800125a:	490d      	ldr	r1, [pc, #52]	; (8001290 <LoopForever+0xa>)
  ldr r2, =_sidata
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <LoopForever+0xe>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001270:	4c0a      	ldr	r4, [pc, #40]	; (800129c <LoopForever+0x16>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800127e:	f006 f881 	bl	8007384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001282:	f7ff fbf9 	bl	8000a78 <main>

08001286 <LoopForever>:

LoopForever:
    b LoopForever
 8001286:	e7fe      	b.n	8001286 <LoopForever>
  ldr   r0, =_estack
 8001288:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001294:	0800756c 	.word	0x0800756c
  ldr r2, =_sbss
 8001298:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800129c:	20000640 	.word	0x20000640

080012a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC1_IRQHandler>
	...

080012a4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <HAL_Init+0x24>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_Init+0x24>)
 80012ae:	2110      	movs	r1, #16
 80012b0:	430a      	orrs	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80012b4:	2003      	movs	r0, #3
 80012b6:	f000 f809 	bl	80012cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ba:	f7ff fe99 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	0018      	movs	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	40022000 	.word	0x40022000

080012cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <HAL_InitTick+0x5c>)
 80012d6:	681c      	ldr	r4, [r3, #0]
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_InitTick+0x60>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	0019      	movs	r1, r3
 80012de:	23fa      	movs	r3, #250	; 0xfa
 80012e0:	0098      	lsls	r0, r3, #2
 80012e2:	f7fe ff0f 	bl	8000104 <__udivsi3>
 80012e6:	0003      	movs	r3, r0
 80012e8:	0019      	movs	r1, r3
 80012ea:	0020      	movs	r0, r4
 80012ec:	f7fe ff0a 	bl	8000104 <__udivsi3>
 80012f0:	0003      	movs	r3, r0
 80012f2:	0018      	movs	r0, r3
 80012f4:	f000 f905 	bl	8001502 <HAL_SYSTICK_Config>
 80012f8:	1e03      	subs	r3, r0, #0
 80012fa:	d001      	beq.n	8001300 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e00f      	b.n	8001320 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b03      	cmp	r3, #3
 8001304:	d80b      	bhi.n	800131e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	2301      	movs	r3, #1
 800130a:	425b      	negs	r3, r3
 800130c:	2200      	movs	r2, #0
 800130e:	0018      	movs	r0, r3
 8001310:	f000 f8e2 	bl	80014d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_InitTick+0x64>)
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
}
 8001320:	0018      	movs	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	b003      	add	sp, #12
 8001326:	bd90      	pop	{r4, r7, pc}
 8001328:	20000000 	.word	0x20000000
 800132c:	20000008 	.word	0x20000008
 8001330:	20000004 	.word	0x20000004

08001334 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_IncTick+0x1c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	001a      	movs	r2, r3
 800133e:	4b05      	ldr	r3, [pc, #20]	; (8001354 <HAL_IncTick+0x20>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	18d2      	adds	r2, r2, r3
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <HAL_IncTick+0x20>)
 8001346:	601a      	str	r2, [r3, #0]
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	20000008 	.word	0x20000008
 8001354:	200005fc 	.word	0x200005fc

08001358 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b02      	ldr	r3, [pc, #8]	; (8001368 <HAL_GetTick+0x10>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	200005fc 	.word	0x200005fc

0800136c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff fff0 	bl	8001358 <HAL_GetTick>
 8001378:	0003      	movs	r3, r0
 800137a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	3301      	adds	r3, #1
 8001384:	d005      	beq.n	8001392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_Delay+0x44>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	001a      	movs	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	189b      	adds	r3, r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	f7ff ffe0 	bl	8001358 <HAL_GetTick>
 8001398:	0002      	movs	r2, r0
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d8f7      	bhi.n	8001394 <HAL_Delay+0x28>
  {
  }
}
 80013a4:	46c0      	nop			; (mov r8, r8)
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b004      	add	sp, #16
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	20000008 	.word	0x20000008

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	0002      	movs	r2, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	1dfb      	adds	r3, r7, #7
 80013c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	1dfb      	adds	r3, r7, #7
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b7f      	cmp	r3, #127	; 0x7f
 80013c8:	d828      	bhi.n	800141c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ca:	4a2f      	ldr	r2, [pc, #188]	; (8001488 <__NVIC_SetPriority+0xd4>)
 80013cc:	1dfb      	adds	r3, r7, #7
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	33c0      	adds	r3, #192	; 0xc0
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	589b      	ldr	r3, [r3, r2]
 80013da:	1dfa      	adds	r2, r7, #7
 80013dc:	7812      	ldrb	r2, [r2, #0]
 80013de:	0011      	movs	r1, r2
 80013e0:	2203      	movs	r2, #3
 80013e2:	400a      	ands	r2, r1
 80013e4:	00d2      	lsls	r2, r2, #3
 80013e6:	21ff      	movs	r1, #255	; 0xff
 80013e8:	4091      	lsls	r1, r2
 80013ea:	000a      	movs	r2, r1
 80013ec:	43d2      	mvns	r2, r2
 80013ee:	401a      	ands	r2, r3
 80013f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	019b      	lsls	r3, r3, #6
 80013f6:	22ff      	movs	r2, #255	; 0xff
 80013f8:	401a      	ands	r2, r3
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	0018      	movs	r0, r3
 8001400:	2303      	movs	r3, #3
 8001402:	4003      	ands	r3, r0
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001408:	481f      	ldr	r0, [pc, #124]	; (8001488 <__NVIC_SetPriority+0xd4>)
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b25b      	sxtb	r3, r3
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	430a      	orrs	r2, r1
 8001414:	33c0      	adds	r3, #192	; 0xc0
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800141a:	e031      	b.n	8001480 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800141c:	4a1b      	ldr	r2, [pc, #108]	; (800148c <__NVIC_SetPriority+0xd8>)
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	0019      	movs	r1, r3
 8001424:	230f      	movs	r3, #15
 8001426:	400b      	ands	r3, r1
 8001428:	3b08      	subs	r3, #8
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3306      	adds	r3, #6
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	18d3      	adds	r3, r2, r3
 8001432:	3304      	adds	r3, #4
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	1dfa      	adds	r2, r7, #7
 8001438:	7812      	ldrb	r2, [r2, #0]
 800143a:	0011      	movs	r1, r2
 800143c:	2203      	movs	r2, #3
 800143e:	400a      	ands	r2, r1
 8001440:	00d2      	lsls	r2, r2, #3
 8001442:	21ff      	movs	r1, #255	; 0xff
 8001444:	4091      	lsls	r1, r2
 8001446:	000a      	movs	r2, r1
 8001448:	43d2      	mvns	r2, r2
 800144a:	401a      	ands	r2, r3
 800144c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	019b      	lsls	r3, r3, #6
 8001452:	22ff      	movs	r2, #255	; 0xff
 8001454:	401a      	ands	r2, r3
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	0018      	movs	r0, r3
 800145c:	2303      	movs	r3, #3
 800145e:	4003      	ands	r3, r0
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001464:	4809      	ldr	r0, [pc, #36]	; (800148c <__NVIC_SetPriority+0xd8>)
 8001466:	1dfb      	adds	r3, r7, #7
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	001c      	movs	r4, r3
 800146c:	230f      	movs	r3, #15
 800146e:	4023      	ands	r3, r4
 8001470:	3b08      	subs	r3, #8
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	430a      	orrs	r2, r1
 8001476:	3306      	adds	r3, #6
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	18c3      	adds	r3, r0, r3
 800147c:	3304      	adds	r3, #4
 800147e:	601a      	str	r2, [r3, #0]
}
 8001480:	46c0      	nop			; (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	b003      	add	sp, #12
 8001486:	bd90      	pop	{r4, r7, pc}
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	1e5a      	subs	r2, r3, #1
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	045b      	lsls	r3, r3, #17
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d301      	bcc.n	80014a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a4:	2301      	movs	r3, #1
 80014a6:	e010      	b.n	80014ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <SysTick_Config+0x44>)
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	3a01      	subs	r2, #1
 80014ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b0:	2301      	movs	r3, #1
 80014b2:	425b      	negs	r3, r3
 80014b4:	2103      	movs	r1, #3
 80014b6:	0018      	movs	r0, r3
 80014b8:	f7ff ff7c 	bl	80013b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <SysTick_Config+0x44>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <SysTick_Config+0x44>)
 80014c4:	2207      	movs	r2, #7
 80014c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b002      	add	sp, #8
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	e000e010 	.word	0xe000e010

080014d8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	210f      	movs	r1, #15
 80014e4:	187b      	adds	r3, r7, r1
 80014e6:	1c02      	adds	r2, r0, #0
 80014e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	0011      	movs	r1, r2
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7ff ff5d 	bl	80013b4 <__NVIC_SetPriority>
}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b004      	add	sp, #16
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	0018      	movs	r0, r3
 800150e:	f7ff ffbf 	bl	8001490 <SysTick_Config>
 8001512:	0003      	movs	r3, r0
}
 8001514:	0018      	movs	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	b002      	add	sp, #8
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152a:	e14f      	b.n	80017cc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2101      	movs	r1, #1
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4091      	lsls	r1, r2
 8001536:	000a      	movs	r2, r1
 8001538:	4013      	ands	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d100      	bne.n	8001544 <HAL_GPIO_Init+0x28>
 8001542:	e140      	b.n	80017c6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2203      	movs	r2, #3
 800154a:	4013      	ands	r3, r2
 800154c:	2b01      	cmp	r3, #1
 800154e:	d005      	beq.n	800155c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2203      	movs	r2, #3
 8001556:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001558:	2b02      	cmp	r3, #2
 800155a:	d130      	bne.n	80015be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	409a      	lsls	r2, r3
 800156a:	0013      	movs	r3, r2
 800156c:	43da      	mvns	r2, r3
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	409a      	lsls	r2, r3
 800157e:	0013      	movs	r3, r2
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001592:	2201      	movs	r2, #1
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
 8001598:	0013      	movs	r3, r2
 800159a:	43da      	mvns	r2, r3
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	091b      	lsrs	r3, r3, #4
 80015a8:	2201      	movs	r2, #1
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
 80015b0:	0013      	movs	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2203      	movs	r2, #3
 80015c4:	4013      	ands	r3, r2
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d017      	beq.n	80015fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	2203      	movs	r2, #3
 80015d6:	409a      	lsls	r2, r3
 80015d8:	0013      	movs	r3, r2
 80015da:	43da      	mvns	r2, r3
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	409a      	lsls	r2, r3
 80015ec:	0013      	movs	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2203      	movs	r2, #3
 8001600:	4013      	ands	r3, r2
 8001602:	2b02      	cmp	r3, #2
 8001604:	d123      	bne.n	800164e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	08da      	lsrs	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3208      	adds	r2, #8
 800160e:	0092      	lsls	r2, r2, #2
 8001610:	58d3      	ldr	r3, [r2, r3]
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	2207      	movs	r2, #7
 8001618:	4013      	ands	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	220f      	movs	r2, #15
 800161e:	409a      	lsls	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	43da      	mvns	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	2107      	movs	r1, #7
 8001632:	400b      	ands	r3, r1
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	409a      	lsls	r2, r3
 8001638:	0013      	movs	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	08da      	lsrs	r2, r3, #3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3208      	adds	r2, #8
 8001648:	0092      	lsls	r2, r2, #2
 800164a:	6939      	ldr	r1, [r7, #16]
 800164c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2203      	movs	r2, #3
 800165a:	409a      	lsls	r2, r3
 800165c:	0013      	movs	r3, r2
 800165e:	43da      	mvns	r2, r3
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2203      	movs	r2, #3
 800166c:	401a      	ands	r2, r3
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	409a      	lsls	r2, r3
 8001674:	0013      	movs	r3, r2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	23c0      	movs	r3, #192	; 0xc0
 8001688:	029b      	lsls	r3, r3, #10
 800168a:	4013      	ands	r3, r2
 800168c:	d100      	bne.n	8001690 <HAL_GPIO_Init+0x174>
 800168e:	e09a      	b.n	80017c6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001690:	4b54      	ldr	r3, [pc, #336]	; (80017e4 <HAL_GPIO_Init+0x2c8>)
 8001692:	699a      	ldr	r2, [r3, #24]
 8001694:	4b53      	ldr	r3, [pc, #332]	; (80017e4 <HAL_GPIO_Init+0x2c8>)
 8001696:	2101      	movs	r1, #1
 8001698:	430a      	orrs	r2, r1
 800169a:	619a      	str	r2, [r3, #24]
 800169c:	4b51      	ldr	r3, [pc, #324]	; (80017e4 <HAL_GPIO_Init+0x2c8>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	2201      	movs	r2, #1
 80016a2:	4013      	ands	r3, r2
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016a8:	4a4f      	ldr	r2, [pc, #316]	; (80017e8 <HAL_GPIO_Init+0x2cc>)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	3302      	adds	r3, #2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	589b      	ldr	r3, [r3, r2]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2203      	movs	r2, #3
 80016ba:	4013      	ands	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	220f      	movs	r2, #15
 80016c0:	409a      	lsls	r2, r3
 80016c2:	0013      	movs	r3, r2
 80016c4:	43da      	mvns	r2, r3
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	2390      	movs	r3, #144	; 0x90
 80016d0:	05db      	lsls	r3, r3, #23
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d013      	beq.n	80016fe <HAL_GPIO_Init+0x1e2>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a44      	ldr	r2, [pc, #272]	; (80017ec <HAL_GPIO_Init+0x2d0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d00d      	beq.n	80016fa <HAL_GPIO_Init+0x1de>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a43      	ldr	r2, [pc, #268]	; (80017f0 <HAL_GPIO_Init+0x2d4>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d007      	beq.n	80016f6 <HAL_GPIO_Init+0x1da>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a42      	ldr	r2, [pc, #264]	; (80017f4 <HAL_GPIO_Init+0x2d8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_GPIO_Init+0x1d6>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x1e4>
 80016f2:	2305      	movs	r3, #5
 80016f4:	e004      	b.n	8001700 <HAL_GPIO_Init+0x1e4>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e002      	b.n	8001700 <HAL_GPIO_Init+0x1e4>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <HAL_GPIO_Init+0x1e4>
 80016fe:	2300      	movs	r3, #0
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	2103      	movs	r1, #3
 8001704:	400a      	ands	r2, r1
 8001706:	0092      	lsls	r2, r2, #2
 8001708:	4093      	lsls	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001710:	4935      	ldr	r1, [pc, #212]	; (80017e8 <HAL_GPIO_Init+0x2cc>)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	3302      	adds	r3, #2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800171e:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <HAL_GPIO_Init+0x2dc>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43da      	mvns	r2, r3
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	035b      	lsls	r3, r3, #13
 8001736:	4013      	ands	r3, r2
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_GPIO_Init+0x2dc>)
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001748:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <HAL_GPIO_Init+0x2dc>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	43da      	mvns	r2, r3
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	039b      	lsls	r3, r3, #14
 8001760:	4013      	ands	r3, r2
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800176c:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <HAL_GPIO_Init+0x2dc>)
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <HAL_GPIO_Init+0x2dc>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	43da      	mvns	r2, r3
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	029b      	lsls	r3, r3, #10
 800178a:	4013      	ands	r3, r2
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4313      	orrs	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_GPIO_Init+0x2dc>)
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_GPIO_Init+0x2dc>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	43da      	mvns	r2, r3
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	025b      	lsls	r3, r3, #9
 80017b4:	4013      	ands	r3, r2
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_GPIO_Init+0x2dc>)
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3301      	adds	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	40da      	lsrs	r2, r3
 80017d4:	1e13      	subs	r3, r2, #0
 80017d6:	d000      	beq.n	80017da <HAL_GPIO_Init+0x2be>
 80017d8:	e6a8      	b.n	800152c <HAL_GPIO_Init+0x10>
  } 
}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	46c0      	nop			; (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	b006      	add	sp, #24
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40010000 	.word	0x40010000
 80017ec:	48000400 	.word	0x48000400
 80017f0:	48000800 	.word	0x48000800
 80017f4:	48000c00 	.word	0x48000c00
 80017f8:	40010400 	.word	0x40010400

080017fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	0008      	movs	r0, r1
 8001806:	0011      	movs	r1, r2
 8001808:	1cbb      	adds	r3, r7, #2
 800180a:	1c02      	adds	r2, r0, #0
 800180c:	801a      	strh	r2, [r3, #0]
 800180e:	1c7b      	adds	r3, r7, #1
 8001810:	1c0a      	adds	r2, r1, #0
 8001812:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001814:	1c7b      	adds	r3, r7, #1
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d004      	beq.n	8001826 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800181c:	1cbb      	adds	r3, r7, #2
 800181e:	881a      	ldrh	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001824:	e003      	b.n	800182e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001826:	1cbb      	adds	r3, r7, #2
 8001828:	881a      	ldrh	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	46bd      	mov	sp, r7
 8001832:	b002      	add	sp, #8
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e305      	b.n	8001e56 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2201      	movs	r2, #1
 8001850:	4013      	ands	r3, r2
 8001852:	d100      	bne.n	8001856 <HAL_RCC_OscConfig+0x1e>
 8001854:	e08d      	b.n	8001972 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001856:	4bc5      	ldr	r3, [pc, #788]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	220c      	movs	r2, #12
 800185c:	4013      	ands	r3, r2
 800185e:	2b04      	cmp	r3, #4
 8001860:	d00e      	beq.n	8001880 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001862:	4bc2      	ldr	r3, [pc, #776]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	220c      	movs	r2, #12
 8001868:	4013      	ands	r3, r2
 800186a:	2b08      	cmp	r3, #8
 800186c:	d116      	bne.n	800189c <HAL_RCC_OscConfig+0x64>
 800186e:	4bbf      	ldr	r3, [pc, #764]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	23c0      	movs	r3, #192	; 0xc0
 8001874:	025b      	lsls	r3, r3, #9
 8001876:	401a      	ands	r2, r3
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	025b      	lsls	r3, r3, #9
 800187c:	429a      	cmp	r2, r3
 800187e:	d10d      	bne.n	800189c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001880:	4bba      	ldr	r3, [pc, #744]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	029b      	lsls	r3, r3, #10
 8001888:	4013      	ands	r3, r2
 800188a:	d100      	bne.n	800188e <HAL_RCC_OscConfig+0x56>
 800188c:	e070      	b.n	8001970 <HAL_RCC_OscConfig+0x138>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d000      	beq.n	8001898 <HAL_RCC_OscConfig+0x60>
 8001896:	e06b      	b.n	8001970 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e2dc      	b.n	8001e56 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d107      	bne.n	80018b4 <HAL_RCC_OscConfig+0x7c>
 80018a4:	4bb1      	ldr	r3, [pc, #708]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4bb0      	ldr	r3, [pc, #704]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 80018aa:	2180      	movs	r1, #128	; 0x80
 80018ac:	0249      	lsls	r1, r1, #9
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	e02f      	b.n	8001914 <HAL_RCC_OscConfig+0xdc>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10c      	bne.n	80018d6 <HAL_RCC_OscConfig+0x9e>
 80018bc:	4bab      	ldr	r3, [pc, #684]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4baa      	ldr	r3, [pc, #680]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 80018c2:	49ab      	ldr	r1, [pc, #684]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 80018c4:	400a      	ands	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	4ba8      	ldr	r3, [pc, #672]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4ba7      	ldr	r3, [pc, #668]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 80018ce:	49a9      	ldr	r1, [pc, #676]	; (8001b74 <HAL_RCC_OscConfig+0x33c>)
 80018d0:	400a      	ands	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	e01e      	b.n	8001914 <HAL_RCC_OscConfig+0xdc>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b05      	cmp	r3, #5
 80018dc:	d10e      	bne.n	80018fc <HAL_RCC_OscConfig+0xc4>
 80018de:	4ba3      	ldr	r3, [pc, #652]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4ba2      	ldr	r3, [pc, #648]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	02c9      	lsls	r1, r1, #11
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	4b9f      	ldr	r3, [pc, #636]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b9e      	ldr	r3, [pc, #632]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	0249      	lsls	r1, r1, #9
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0xdc>
 80018fc:	4b9b      	ldr	r3, [pc, #620]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b9a      	ldr	r3, [pc, #616]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001902:	499b      	ldr	r1, [pc, #620]	; (8001b70 <HAL_RCC_OscConfig+0x338>)
 8001904:	400a      	ands	r2, r1
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	4b98      	ldr	r3, [pc, #608]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b97      	ldr	r3, [pc, #604]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 800190e:	4999      	ldr	r1, [pc, #612]	; (8001b74 <HAL_RCC_OscConfig+0x33c>)
 8001910:	400a      	ands	r2, r1
 8001912:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d014      	beq.n	8001946 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fd1c 	bl	8001358 <HAL_GetTick>
 8001920:	0003      	movs	r3, r0
 8001922:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001926:	f7ff fd17 	bl	8001358 <HAL_GetTick>
 800192a:	0002      	movs	r2, r0
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b64      	cmp	r3, #100	; 0x64
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e28e      	b.n	8001e56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001938:	4b8c      	ldr	r3, [pc, #560]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	029b      	lsls	r3, r3, #10
 8001940:	4013      	ands	r3, r2
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0xee>
 8001944:	e015      	b.n	8001972 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001946:	f7ff fd07 	bl	8001358 <HAL_GetTick>
 800194a:	0003      	movs	r3, r0
 800194c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff fd02 	bl	8001358 <HAL_GetTick>
 8001954:	0002      	movs	r2, r0
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e279      	b.n	8001e56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001962:	4b82      	ldr	r3, [pc, #520]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	029b      	lsls	r3, r3, #10
 800196a:	4013      	ands	r3, r2
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x118>
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2202      	movs	r2, #2
 8001978:	4013      	ands	r3, r2
 800197a:	d100      	bne.n	800197e <HAL_RCC_OscConfig+0x146>
 800197c:	e06c      	b.n	8001a58 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800197e:	4b7b      	ldr	r3, [pc, #492]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	220c      	movs	r2, #12
 8001984:	4013      	ands	r3, r2
 8001986:	d00e      	beq.n	80019a6 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001988:	4b78      	ldr	r3, [pc, #480]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	220c      	movs	r2, #12
 800198e:	4013      	ands	r3, r2
 8001990:	2b08      	cmp	r3, #8
 8001992:	d11f      	bne.n	80019d4 <HAL_RCC_OscConfig+0x19c>
 8001994:	4b75      	ldr	r3, [pc, #468]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	23c0      	movs	r3, #192	; 0xc0
 800199a:	025b      	lsls	r3, r3, #9
 800199c:	401a      	ands	r2, r3
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d116      	bne.n	80019d4 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a6:	4b71      	ldr	r3, [pc, #452]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2202      	movs	r2, #2
 80019ac:	4013      	ands	r3, r2
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_OscConfig+0x184>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e24c      	b.n	8001e56 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019bc:	4b6b      	ldr	r3, [pc, #428]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	22f8      	movs	r2, #248	; 0xf8
 80019c2:	4393      	bics	r3, r2
 80019c4:	0019      	movs	r1, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	00da      	lsls	r2, r3, #3
 80019cc:	4b67      	ldr	r3, [pc, #412]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 80019ce:	430a      	orrs	r2, r1
 80019d0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d2:	e041      	b.n	8001a58 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d024      	beq.n	8001a26 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019dc:	4b63      	ldr	r3, [pc, #396]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b62      	ldr	r3, [pc, #392]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 80019e2:	2101      	movs	r1, #1
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff fcb6 	bl	8001358 <HAL_GetTick>
 80019ec:	0003      	movs	r3, r0
 80019ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f2:	f7ff fcb1 	bl	8001358 <HAL_GetTick>
 80019f6:	0002      	movs	r2, r0
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e228      	b.n	8001e56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a04:	4b59      	ldr	r3, [pc, #356]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2202      	movs	r2, #2
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d0f1      	beq.n	80019f2 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0e:	4b57      	ldr	r3, [pc, #348]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	22f8      	movs	r2, #248	; 0xf8
 8001a14:	4393      	bics	r3, r2
 8001a16:	0019      	movs	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	00da      	lsls	r2, r3, #3
 8001a1e:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001a20:	430a      	orrs	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e018      	b.n	8001a58 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a26:	4b51      	ldr	r3, [pc, #324]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	438a      	bics	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7ff fc91 	bl	8001358 <HAL_GetTick>
 8001a36:	0003      	movs	r3, r0
 8001a38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7ff fc8c 	bl	8001358 <HAL_GetTick>
 8001a40:	0002      	movs	r2, r0
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e203      	b.n	8001e56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	4b47      	ldr	r3, [pc, #284]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2202      	movs	r2, #2
 8001a54:	4013      	ands	r3, r2
 8001a56:	d1f1      	bne.n	8001a3c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2208      	movs	r2, #8
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d036      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d019      	beq.n	8001a9e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6a:	4b40      	ldr	r3, [pc, #256]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001a70:	2101      	movs	r1, #1
 8001a72:	430a      	orrs	r2, r1
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fc6f 	bl	8001358 <HAL_GetTick>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a80:	f7ff fc6a 	bl	8001358 <HAL_GetTick>
 8001a84:	0002      	movs	r2, r0
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e1e1      	b.n	8001e56 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a92:	4b36      	ldr	r3, [pc, #216]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	2202      	movs	r2, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d0f1      	beq.n	8001a80 <HAL_RCC_OscConfig+0x248>
 8001a9c:	e018      	b.n	8001ad0 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9e:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa2:	4b32      	ldr	r3, [pc, #200]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	438a      	bics	r2, r1
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff fc55 	bl	8001358 <HAL_GetTick>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab4:	f7ff fc50 	bl	8001358 <HAL_GetTick>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e1c7      	b.n	8001e56 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac6:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	2202      	movs	r2, #2
 8001acc:	4013      	ands	r3, r2
 8001ace:	d1f1      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d100      	bne.n	8001adc <HAL_RCC_OscConfig+0x2a4>
 8001ada:	e0b5      	b.n	8001c48 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001adc:	201f      	movs	r0, #31
 8001ade:	183b      	adds	r3, r7, r0
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae4:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001ae6:	69da      	ldr	r2, [r3, #28]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	055b      	lsls	r3, r3, #21
 8001aec:	4013      	ands	r3, r2
 8001aee:	d110      	bne.n	8001b12 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001af2:	69da      	ldr	r2, [r3, #28]
 8001af4:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	0549      	lsls	r1, r1, #21
 8001afa:	430a      	orrs	r2, r1
 8001afc:	61da      	str	r2, [r3, #28]
 8001afe:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001b00:	69da      	ldr	r2, [r3, #28]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	055b      	lsls	r3, r3, #21
 8001b06:	4013      	ands	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b0c:	183b      	adds	r3, r7, r0
 8001b0e:	2201      	movs	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_RCC_OscConfig+0x340>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d11a      	bne.n	8001b54 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <HAL_RCC_OscConfig+0x340>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_RCC_OscConfig+0x340>)
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	0049      	lsls	r1, r1, #1
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2c:	f7ff fc14 	bl	8001358 <HAL_GetTick>
 8001b30:	0003      	movs	r3, r0
 8001b32:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b36:	f7ff fc0f 	bl	8001358 <HAL_GetTick>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b64      	cmp	r3, #100	; 0x64
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e186      	b.n	8001e56 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_OscConfig+0x340>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4013      	ands	r3, r2
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d10f      	bne.n	8001b7c <HAL_RCC_OscConfig+0x344>
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001b5e:	6a1a      	ldr	r2, [r3, #32]
 8001b60:	4b02      	ldr	r3, [pc, #8]	; (8001b6c <HAL_RCC_OscConfig+0x334>)
 8001b62:	2101      	movs	r1, #1
 8001b64:	430a      	orrs	r2, r1
 8001b66:	621a      	str	r2, [r3, #32]
 8001b68:	e036      	b.n	8001bd8 <HAL_RCC_OscConfig+0x3a0>
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	fffeffff 	.word	0xfffeffff
 8001b74:	fffbffff 	.word	0xfffbffff
 8001b78:	40007000 	.word	0x40007000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10c      	bne.n	8001b9e <HAL_RCC_OscConfig+0x366>
 8001b84:	4bb6      	ldr	r3, [pc, #728]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001b86:	6a1a      	ldr	r2, [r3, #32]
 8001b88:	4bb5      	ldr	r3, [pc, #724]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	438a      	bics	r2, r1
 8001b8e:	621a      	str	r2, [r3, #32]
 8001b90:	4bb3      	ldr	r3, [pc, #716]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001b92:	6a1a      	ldr	r2, [r3, #32]
 8001b94:	4bb2      	ldr	r3, [pc, #712]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001b96:	2104      	movs	r1, #4
 8001b98:	438a      	bics	r2, r1
 8001b9a:	621a      	str	r2, [r3, #32]
 8001b9c:	e01c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x3a0>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x388>
 8001ba6:	4bae      	ldr	r3, [pc, #696]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001ba8:	6a1a      	ldr	r2, [r3, #32]
 8001baa:	4bad      	ldr	r3, [pc, #692]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001bac:	2104      	movs	r1, #4
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	621a      	str	r2, [r3, #32]
 8001bb2:	4bab      	ldr	r3, [pc, #684]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001bb4:	6a1a      	ldr	r2, [r3, #32]
 8001bb6:	4baa      	ldr	r3, [pc, #680]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001bb8:	2101      	movs	r1, #1
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	621a      	str	r2, [r3, #32]
 8001bbe:	e00b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x3a0>
 8001bc0:	4ba7      	ldr	r3, [pc, #668]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001bc2:	6a1a      	ldr	r2, [r3, #32]
 8001bc4:	4ba6      	ldr	r3, [pc, #664]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	438a      	bics	r2, r1
 8001bca:	621a      	str	r2, [r3, #32]
 8001bcc:	4ba4      	ldr	r3, [pc, #656]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001bce:	6a1a      	ldr	r2, [r3, #32]
 8001bd0:	4ba3      	ldr	r3, [pc, #652]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	438a      	bics	r2, r1
 8001bd6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d014      	beq.n	8001c0a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be0:	f7ff fbba 	bl	8001358 <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be8:	e009      	b.n	8001bfe <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f7ff fbb5 	bl	8001358 <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	4a9b      	ldr	r2, [pc, #620]	; (8001e64 <HAL_RCC_OscConfig+0x62c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e12b      	b.n	8001e56 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfe:	4b98      	ldr	r3, [pc, #608]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	2202      	movs	r2, #2
 8001c04:	4013      	ands	r3, r2
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x3b2>
 8001c08:	e013      	b.n	8001c32 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0a:	f7ff fba5 	bl	8001358 <HAL_GetTick>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c12:	e009      	b.n	8001c28 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c14:	f7ff fba0 	bl	8001358 <HAL_GetTick>
 8001c18:	0002      	movs	r2, r0
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	4a91      	ldr	r2, [pc, #580]	; (8001e64 <HAL_RCC_OscConfig+0x62c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e116      	b.n	8001e56 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c28:	4b8d      	ldr	r3, [pc, #564]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c32:	231f      	movs	r3, #31
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d105      	bne.n	8001c48 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c3c:	4b88      	ldr	r3, [pc, #544]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001c3e:	69da      	ldr	r2, [r3, #28]
 8001c40:	4b87      	ldr	r3, [pc, #540]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001c42:	4989      	ldr	r1, [pc, #548]	; (8001e68 <HAL_RCC_OscConfig+0x630>)
 8001c44:	400a      	ands	r2, r1
 8001c46:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2210      	movs	r2, #16
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d063      	beq.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d12a      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c5a:	4b81      	ldr	r3, [pc, #516]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c5e:	4b80      	ldr	r3, [pc, #512]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001c60:	2104      	movs	r1, #4
 8001c62:	430a      	orrs	r2, r1
 8001c64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001c66:	4b7e      	ldr	r3, [pc, #504]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c6a:	4b7d      	ldr	r3, [pc, #500]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c72:	f7ff fb71 	bl	8001358 <HAL_GetTick>
 8001c76:	0003      	movs	r3, r0
 8001c78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c7c:	f7ff fb6c 	bl	8001358 <HAL_GetTick>
 8001c80:	0002      	movs	r2, r0
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e0e3      	b.n	8001e56 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c8e:	4b74      	ldr	r3, [pc, #464]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c92:	2202      	movs	r2, #2
 8001c94:	4013      	ands	r3, r2
 8001c96:	d0f1      	beq.n	8001c7c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c98:	4b71      	ldr	r3, [pc, #452]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9c:	22f8      	movs	r2, #248	; 0xf8
 8001c9e:	4393      	bics	r3, r2
 8001ca0:	0019      	movs	r1, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	00da      	lsls	r2, r3, #3
 8001ca8:	4b6d      	ldr	r3, [pc, #436]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001caa:	430a      	orrs	r2, r1
 8001cac:	635a      	str	r2, [r3, #52]	; 0x34
 8001cae:	e034      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	3305      	adds	r3, #5
 8001cb6:	d111      	bne.n	8001cdc <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001cb8:	4b69      	ldr	r3, [pc, #420]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cbc:	4b68      	ldr	r3, [pc, #416]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001cbe:	2104      	movs	r1, #4
 8001cc0:	438a      	bics	r2, r1
 8001cc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001cc4:	4b66      	ldr	r3, [pc, #408]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc8:	22f8      	movs	r2, #248	; 0xf8
 8001cca:	4393      	bics	r3, r2
 8001ccc:	0019      	movs	r1, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	00da      	lsls	r2, r3, #3
 8001cd4:	4b62      	ldr	r3, [pc, #392]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	635a      	str	r2, [r3, #52]	; 0x34
 8001cda:	e01e      	b.n	8001d1a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cdc:	4b60      	ldr	r3, [pc, #384]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ce0:	4b5f      	ldr	r3, [pc, #380]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ce8:	4b5d      	ldr	r3, [pc, #372]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cec:	4b5c      	ldr	r3, [pc, #368]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001cee:	2101      	movs	r1, #1
 8001cf0:	438a      	bics	r2, r1
 8001cf2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf4:	f7ff fb30 	bl	8001358 <HAL_GetTick>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001cfe:	f7ff fb2b 	bl	8001358 <HAL_GetTick>
 8001d02:	0002      	movs	r2, r0
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e0a2      	b.n	8001e56 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d10:	4b53      	ldr	r3, [pc, #332]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d14:	2202      	movs	r2, #2
 8001d16:	4013      	ands	r3, r2
 8001d18:	d1f1      	bne.n	8001cfe <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d100      	bne.n	8001d24 <HAL_RCC_OscConfig+0x4ec>
 8001d22:	e097      	b.n	8001e54 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d24:	4b4e      	ldr	r3, [pc, #312]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	220c      	movs	r2, #12
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d100      	bne.n	8001d32 <HAL_RCC_OscConfig+0x4fa>
 8001d30:	e06b      	b.n	8001e0a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d14c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3a:	4b49      	ldr	r3, [pc, #292]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	4b48      	ldr	r3, [pc, #288]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001d40:	494a      	ldr	r1, [pc, #296]	; (8001e6c <HAL_RCC_OscConfig+0x634>)
 8001d42:	400a      	ands	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d46:	f7ff fb07 	bl	8001358 <HAL_GetTick>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d50:	f7ff fb02 	bl	8001358 <HAL_GetTick>
 8001d54:	0002      	movs	r2, r0
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e079      	b.n	8001e56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d62:	4b3f      	ldr	r3, [pc, #252]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	049b      	lsls	r3, r3, #18
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d6e:	4b3c      	ldr	r3, [pc, #240]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	220f      	movs	r2, #15
 8001d74:	4393      	bics	r3, r2
 8001d76:	0019      	movs	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d7c:	4b38      	ldr	r3, [pc, #224]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d82:	4b37      	ldr	r3, [pc, #220]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	4a3a      	ldr	r2, [pc, #232]	; (8001e70 <HAL_RCC_OscConfig+0x638>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	0019      	movs	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	431a      	orrs	r2, r3
 8001d96:	4b32      	ldr	r3, [pc, #200]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d9c:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b2f      	ldr	r3, [pc, #188]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001da2:	2180      	movs	r1, #128	; 0x80
 8001da4:	0449      	lsls	r1, r1, #17
 8001da6:	430a      	orrs	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7ff fad5 	bl	8001358 <HAL_GetTick>
 8001dae:	0003      	movs	r3, r0
 8001db0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db4:	f7ff fad0 	bl	8001358 <HAL_GetTick>
 8001db8:	0002      	movs	r2, r0
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e047      	b.n	8001e56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc6:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	049b      	lsls	r3, r3, #18
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0x57c>
 8001dd2:	e03f      	b.n	8001e54 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001dda:	4924      	ldr	r1, [pc, #144]	; (8001e6c <HAL_RCC_OscConfig+0x634>)
 8001ddc:	400a      	ands	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff faba 	bl	8001358 <HAL_GetTick>
 8001de4:	0003      	movs	r3, r0
 8001de6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dea:	f7ff fab5 	bl	8001358 <HAL_GetTick>
 8001dee:	0002      	movs	r2, r0
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e02c      	b.n	8001e56 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfc:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	049b      	lsls	r3, r3, #18
 8001e04:	4013      	ands	r3, r2
 8001e06:	d1f0      	bne.n	8001dea <HAL_RCC_OscConfig+0x5b2>
 8001e08:	e024      	b.n	8001e54 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e01f      	b.n	8001e56 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001e1c:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <HAL_RCC_OscConfig+0x628>)
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	23c0      	movs	r3, #192	; 0xc0
 8001e26:	025b      	lsls	r3, r3, #9
 8001e28:	401a      	ands	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d10e      	bne.n	8001e50 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	220f      	movs	r2, #15
 8001e36:	401a      	ands	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d107      	bne.n	8001e50 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	23f0      	movs	r3, #240	; 0xf0
 8001e44:	039b      	lsls	r3, r3, #14
 8001e46:	401a      	ands	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b008      	add	sp, #32
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	40021000 	.word	0x40021000
 8001e64:	00001388 	.word	0x00001388
 8001e68:	efffffff 	.word	0xefffffff
 8001e6c:	feffffff 	.word	0xfeffffff
 8001e70:	ffc27fff 	.word	0xffc27fff

08001e74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0b3      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e88:	4b5b      	ldr	r3, [pc, #364]	; (8001ff8 <HAL_RCC_ClockConfig+0x184>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d911      	bls.n	8001eba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e96:	4b58      	ldr	r3, [pc, #352]	; (8001ff8 <HAL_RCC_ClockConfig+0x184>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4393      	bics	r3, r2
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	4b55      	ldr	r3, [pc, #340]	; (8001ff8 <HAL_RCC_ClockConfig+0x184>)
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea8:	4b53      	ldr	r3, [pc, #332]	; (8001ff8 <HAL_RCC_ClockConfig+0x184>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2201      	movs	r2, #1
 8001eae:	4013      	ands	r3, r2
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e09a      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d015      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2204      	movs	r2, #4
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d006      	beq.n	8001edc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ece:	4b4b      	ldr	r3, [pc, #300]	; (8001ffc <HAL_RCC_ClockConfig+0x188>)
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <HAL_RCC_ClockConfig+0x188>)
 8001ed4:	21e0      	movs	r1, #224	; 0xe0
 8001ed6:	00c9      	lsls	r1, r1, #3
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001edc:	4b47      	ldr	r3, [pc, #284]	; (8001ffc <HAL_RCC_ClockConfig+0x188>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	22f0      	movs	r2, #240	; 0xf0
 8001ee2:	4393      	bics	r3, r2
 8001ee4:	0019      	movs	r1, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	4b44      	ldr	r3, [pc, #272]	; (8001ffc <HAL_RCC_ClockConfig+0x188>)
 8001eec:	430a      	orrs	r2, r1
 8001eee:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d040      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	4b3e      	ldr	r3, [pc, #248]	; (8001ffc <HAL_RCC_ClockConfig+0x188>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	029b      	lsls	r3, r3, #10
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d114      	bne.n	8001f38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e06e      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1a:	4b38      	ldr	r3, [pc, #224]	; (8001ffc <HAL_RCC_ClockConfig+0x188>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	049b      	lsls	r3, r3, #18
 8001f22:	4013      	ands	r3, r2
 8001f24:	d108      	bne.n	8001f38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e062      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2a:	4b34      	ldr	r3, [pc, #208]	; (8001ffc <HAL_RCC_ClockConfig+0x188>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	4013      	ands	r3, r2
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e05b      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f38:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <HAL_RCC_ClockConfig+0x188>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	4393      	bics	r3, r2
 8001f40:	0019      	movs	r1, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <HAL_RCC_ClockConfig+0x188>)
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f4c:	f7ff fa04 	bl	8001358 <HAL_GetTick>
 8001f50:	0003      	movs	r3, r0
 8001f52:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f54:	e009      	b.n	8001f6a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f56:	f7ff f9ff 	bl	8001358 <HAL_GetTick>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	4a27      	ldr	r2, [pc, #156]	; (8002000 <HAL_RCC_ClockConfig+0x18c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e042      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <HAL_RCC_ClockConfig+0x188>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	220c      	movs	r2, #12
 8001f70:	401a      	ands	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d1ec      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ff8 <HAL_RCC_ClockConfig+0x184>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2201      	movs	r2, #1
 8001f82:	4013      	ands	r3, r2
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d211      	bcs.n	8001fae <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <HAL_RCC_ClockConfig+0x184>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4393      	bics	r3, r2
 8001f92:	0019      	movs	r1, r3
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_RCC_ClockConfig+0x184>)
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9c:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <HAL_RCC_ClockConfig+0x184>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e020      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d009      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_RCC_ClockConfig+0x188>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4a11      	ldr	r2, [pc, #68]	; (8002004 <HAL_RCC_ClockConfig+0x190>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <HAL_RCC_ClockConfig+0x188>)
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fcc:	f000 f820 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8001fd0:	0001      	movs	r1, r0
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_RCC_ClockConfig+0x188>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	091b      	lsrs	r3, r3, #4
 8001fd8:	220f      	movs	r2, #15
 8001fda:	4013      	ands	r3, r2
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_RCC_ClockConfig+0x194>)
 8001fde:	5cd3      	ldrb	r3, [r2, r3]
 8001fe0:	000a      	movs	r2, r1
 8001fe2:	40da      	lsrs	r2, r3
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <HAL_RCC_ClockConfig+0x198>)
 8001fe6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fe8:	2003      	movs	r0, #3
 8001fea:	f7ff f96f 	bl	80012cc <HAL_InitTick>
  
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b004      	add	sp, #16
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	00001388 	.word	0x00001388
 8002004:	fffff8ff 	.word	0xfffff8ff
 8002008:	080074ac 	.word	0x080074ac
 800200c:	20000000 	.word	0x20000000

08002010 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800202a:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	220c      	movs	r2, #12
 8002034:	4013      	ands	r3, r2
 8002036:	2b04      	cmp	r3, #4
 8002038:	d002      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x30>
 800203a:	2b08      	cmp	r3, #8
 800203c:	d003      	beq.n	8002046 <HAL_RCC_GetSysClockFreq+0x36>
 800203e:	e02e      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002040:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002042:	613b      	str	r3, [r7, #16]
      break;
 8002044:	e02e      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	0c9b      	lsrs	r3, r3, #18
 800204a:	220f      	movs	r2, #15
 800204c:	4013      	ands	r3, r2
 800204e:	4a1a      	ldr	r2, [pc, #104]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002050:	5cd3      	ldrb	r3, [r2, r3]
 8002052:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002054:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	220f      	movs	r2, #15
 800205a:	4013      	ands	r3, r2
 800205c:	4a17      	ldr	r2, [pc, #92]	; (80020bc <HAL_RCC_GetSysClockFreq+0xac>)
 800205e:	5cd3      	ldrb	r3, [r2, r3]
 8002060:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	23c0      	movs	r3, #192	; 0xc0
 8002066:	025b      	lsls	r3, r3, #9
 8002068:	401a      	ands	r2, r3
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	025b      	lsls	r3, r3, #9
 800206e:	429a      	cmp	r2, r3
 8002070:	d109      	bne.n	8002086 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	480f      	ldr	r0, [pc, #60]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002076:	f7fe f845 	bl	8000104 <__udivsi3>
 800207a:	0003      	movs	r3, r0
 800207c:	001a      	movs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4353      	muls	r3, r2
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	e008      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002086:	68b9      	ldr	r1, [r7, #8]
 8002088:	480a      	ldr	r0, [pc, #40]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800208a:	f7fe f83b 	bl	8000104 <__udivsi3>
 800208e:	0003      	movs	r3, r0
 8002090:	001a      	movs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4353      	muls	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	613b      	str	r3, [r7, #16]
      break;
 800209c:	e002      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800209e:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020a0:	613b      	str	r3, [r7, #16]
      break;
 80020a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020a4:	693b      	ldr	r3, [r7, #16]
}
 80020a6:	0018      	movs	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b006      	add	sp, #24
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	40021000 	.word	0x40021000
 80020b4:	007a1200 	.word	0x007a1200
 80020b8:	080074c4 	.word	0x080074c4
 80020bc:	080074d4 	.word	0x080074d4

080020c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c4:	4b02      	ldr	r3, [pc, #8]	; (80020d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	0018      	movs	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	20000000 	.word	0x20000000

080020d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80020d8:	f7ff fff2 	bl	80020c0 <HAL_RCC_GetHCLKFreq>
 80020dc:	0001      	movs	r1, r0
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	2207      	movs	r2, #7
 80020e6:	4013      	ands	r3, r2
 80020e8:	4a04      	ldr	r2, [pc, #16]	; (80020fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ea:	5cd3      	ldrb	r3, [r2, r3]
 80020ec:	40d9      	lsrs	r1, r3
 80020ee:	000b      	movs	r3, r1
}    
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	40021000 	.word	0x40021000
 80020fc:	080074bc 	.word	0x080074bc

08002100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	025b      	lsls	r3, r3, #9
 8002118:	4013      	ands	r3, r2
 800211a:	d100      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800211c:	e08e      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800211e:	2017      	movs	r0, #23
 8002120:	183b      	adds	r3, r7, r0
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002126:	4b57      	ldr	r3, [pc, #348]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	055b      	lsls	r3, r3, #21
 800212e:	4013      	ands	r3, r2
 8002130:	d110      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	4b54      	ldr	r3, [pc, #336]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002134:	69da      	ldr	r2, [r3, #28]
 8002136:	4b53      	ldr	r3, [pc, #332]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002138:	2180      	movs	r1, #128	; 0x80
 800213a:	0549      	lsls	r1, r1, #21
 800213c:	430a      	orrs	r2, r1
 800213e:	61da      	str	r2, [r3, #28]
 8002140:	4b50      	ldr	r3, [pc, #320]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002142:	69da      	ldr	r2, [r3, #28]
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	055b      	lsls	r3, r3, #21
 8002148:	4013      	ands	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214e:	183b      	adds	r3, r7, r0
 8002150:	2201      	movs	r2, #1
 8002152:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	4b4c      	ldr	r3, [pc, #304]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4013      	ands	r3, r2
 800215e:	d11a      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002160:	4b49      	ldr	r3, [pc, #292]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b48      	ldr	r3, [pc, #288]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002166:	2180      	movs	r1, #128	; 0x80
 8002168:	0049      	lsls	r1, r1, #1
 800216a:	430a      	orrs	r2, r1
 800216c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216e:	f7ff f8f3 	bl	8001358 <HAL_GetTick>
 8002172:	0003      	movs	r3, r0
 8002174:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	e008      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002178:	f7ff f8ee 	bl	8001358 <HAL_GetTick>
 800217c:	0002      	movs	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e077      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218a:	4b3f      	ldr	r3, [pc, #252]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4013      	ands	r3, r2
 8002194:	d0f0      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002196:	4b3b      	ldr	r3, [pc, #236]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002198:	6a1a      	ldr	r2, [r3, #32]
 800219a:	23c0      	movs	r3, #192	; 0xc0
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4013      	ands	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d034      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	23c0      	movs	r3, #192	; 0xc0
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4013      	ands	r3, r2
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d02c      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021b8:	4b32      	ldr	r3, [pc, #200]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4a33      	ldr	r2, [pc, #204]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80021be:	4013      	ands	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021c2:	4b30      	ldr	r3, [pc, #192]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021c4:	6a1a      	ldr	r2, [r3, #32]
 80021c6:	4b2f      	ldr	r3, [pc, #188]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	0249      	lsls	r1, r1, #9
 80021cc:	430a      	orrs	r2, r1
 80021ce:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021d0:	4b2c      	ldr	r3, [pc, #176]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021d2:	6a1a      	ldr	r2, [r3, #32]
 80021d4:	4b2b      	ldr	r3, [pc, #172]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021d6:	492e      	ldr	r1, [pc, #184]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80021d8:	400a      	ands	r2, r1
 80021da:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021dc:	4b29      	ldr	r3, [pc, #164]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	4013      	ands	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7ff f8b5 	bl	8001358 <HAL_GetTick>
 80021ee:	0003      	movs	r3, r0
 80021f0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	e009      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f4:	f7ff f8b0 	bl	8001358 <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	4a25      	ldr	r2, [pc, #148]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d901      	bls.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e038      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002208:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	2202      	movs	r2, #2
 800220e:	4013      	ands	r3, r2
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002212:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4a1d      	ldr	r2, [pc, #116]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002218:	4013      	ands	r3, r2
 800221a:	0019      	movs	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	4b18      	ldr	r3, [pc, #96]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002222:	430a      	orrs	r2, r1
 8002224:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002226:	2317      	movs	r3, #23
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d105      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002230:	4b14      	ldr	r3, [pc, #80]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002232:	69da      	ldr	r2, [r3, #28]
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002236:	4918      	ldr	r1, [pc, #96]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002238:	400a      	ands	r2, r1
 800223a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2201      	movs	r2, #1
 8002242:	4013      	ands	r3, r2
 8002244:	d009      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	2203      	movs	r2, #3
 800224c:	4393      	bics	r3, r2
 800224e:	0019      	movs	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002256:	430a      	orrs	r2, r1
 8002258:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2220      	movs	r2, #32
 8002260:	4013      	ands	r3, r2
 8002262:	d009      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	2210      	movs	r2, #16
 800226a:	4393      	bics	r3, r2
 800226c:	0019      	movs	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	4b04      	ldr	r3, [pc, #16]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002274:	430a      	orrs	r2, r1
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	0018      	movs	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	b006      	add	sp, #24
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	40021000 	.word	0x40021000
 8002288:	40007000 	.word	0x40007000
 800228c:	fffffcff 	.word	0xfffffcff
 8002290:	fffeffff 	.word	0xfffeffff
 8002294:	00001388 	.word	0x00001388
 8002298:	efffffff 	.word	0xefffffff

0800229c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0a8      	b.n	8002400 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	2382      	movs	r3, #130	; 0x82
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	429a      	cmp	r2, r3
 80022c0:	d009      	beq.n	80022d6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	61da      	str	r2, [r3, #28]
 80022c8:	e005      	b.n	80022d6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	225d      	movs	r2, #93	; 0x5d
 80022e0:	5c9b      	ldrb	r3, [r3, r2]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d107      	bne.n	80022f8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	225c      	movs	r2, #92	; 0x5c
 80022ec:	2100      	movs	r1, #0
 80022ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	0018      	movs	r0, r3
 80022f4:	f7fe fea0 	bl	8001038 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	225d      	movs	r2, #93	; 0x5d
 80022fc:	2102      	movs	r1, #2
 80022fe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2140      	movs	r1, #64	; 0x40
 800230c:	438a      	bics	r2, r1
 800230e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	23e0      	movs	r3, #224	; 0xe0
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	429a      	cmp	r2, r3
 800231a:	d902      	bls.n	8002322 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	e002      	b.n	8002328 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	015b      	lsls	r3, r3, #5
 8002326:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	23f0      	movs	r3, #240	; 0xf0
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	429a      	cmp	r2, r3
 8002332:	d008      	beq.n	8002346 <HAL_SPI_Init+0xaa>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	23e0      	movs	r3, #224	; 0xe0
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	429a      	cmp	r2, r3
 800233e:	d002      	beq.n	8002346 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	2382      	movs	r3, #130	; 0x82
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	401a      	ands	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6899      	ldr	r1, [r3, #8]
 8002354:	2384      	movs	r3, #132	; 0x84
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	400b      	ands	r3, r1
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2102      	movs	r1, #2
 8002362:	400b      	ands	r3, r1
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	2101      	movs	r1, #1
 800236c:	400b      	ands	r3, r1
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6999      	ldr	r1, [r3, #24]
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	400b      	ands	r3, r1
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	2138      	movs	r1, #56	; 0x38
 8002382:	400b      	ands	r3, r1
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	2180      	movs	r1, #128	; 0x80
 800238c:	400b      	ands	r3, r1
 800238e:	431a      	orrs	r2, r3
 8002390:	0011      	movs	r1, r2
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	019b      	lsls	r3, r3, #6
 800239a:	401a      	ands	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	0c1b      	lsrs	r3, r3, #16
 80023aa:	2204      	movs	r2, #4
 80023ac:	401a      	ands	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	2110      	movs	r1, #16
 80023b4:	400b      	ands	r3, r1
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023bc:	2108      	movs	r1, #8
 80023be:	400b      	ands	r3, r1
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68d9      	ldr	r1, [r3, #12]
 80023c6:	23f0      	movs	r3, #240	; 0xf0
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	400b      	ands	r3, r1
 80023cc:	431a      	orrs	r2, r3
 80023ce:	0011      	movs	r1, r2
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	015b      	lsls	r3, r3, #5
 80023d6:	401a      	ands	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69da      	ldr	r2, [r3, #28]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4907      	ldr	r1, [pc, #28]	; (8002408 <HAL_SPI_Init+0x16c>)
 80023ec:	400a      	ands	r2, r1
 80023ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	225d      	movs	r2, #93	; 0x5d
 80023fa:	2101      	movs	r1, #1
 80023fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	0018      	movs	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	b004      	add	sp, #16
 8002406:	bd80      	pop	{r7, pc}
 8002408:	fffff7ff 	.word	0xfffff7ff

0800240c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	1dbb      	adds	r3, r7, #6
 800241a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800241c:	231f      	movs	r3, #31
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	225c      	movs	r2, #92	; 0x5c
 8002428:	5c9b      	ldrb	r3, [r3, r2]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_SPI_Transmit+0x26>
 800242e:	2302      	movs	r3, #2
 8002430:	e147      	b.n	80026c2 <HAL_SPI_Transmit+0x2b6>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	225c      	movs	r2, #92	; 0x5c
 8002436:	2101      	movs	r1, #1
 8002438:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800243a:	f7fe ff8d 	bl	8001358 <HAL_GetTick>
 800243e:	0003      	movs	r3, r0
 8002440:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002442:	2316      	movs	r3, #22
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	1dba      	adds	r2, r7, #6
 8002448:	8812      	ldrh	r2, [r2, #0]
 800244a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	225d      	movs	r2, #93	; 0x5d
 8002450:	5c9b      	ldrb	r3, [r3, r2]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b01      	cmp	r3, #1
 8002456:	d004      	beq.n	8002462 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002458:	231f      	movs	r3, #31
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	2202      	movs	r2, #2
 800245e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002460:	e128      	b.n	80026b4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_SPI_Transmit+0x64>
 8002468:	1dbb      	adds	r3, r7, #6
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d104      	bne.n	800247a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002470:	231f      	movs	r3, #31
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	2201      	movs	r2, #1
 8002476:	701a      	strb	r2, [r3, #0]
    goto error;
 8002478:	e11c      	b.n	80026b4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	225d      	movs	r2, #93	; 0x5d
 800247e:	2103      	movs	r1, #3
 8002480:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1dba      	adds	r2, r7, #6
 8002492:	8812      	ldrh	r2, [r2, #0]
 8002494:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1dba      	adds	r2, r7, #6
 800249a:	8812      	ldrh	r2, [r2, #0]
 800249c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2244      	movs	r2, #68	; 0x44
 80024a8:	2100      	movs	r1, #0
 80024aa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2246      	movs	r2, #70	; 0x46
 80024b0:	2100      	movs	r1, #0
 80024b2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d110      	bne.n	80024ee <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2140      	movs	r1, #64	; 0x40
 80024d8:	438a      	bics	r2, r1
 80024da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2180      	movs	r1, #128	; 0x80
 80024e8:	01c9      	lsls	r1, r1, #7
 80024ea:	430a      	orrs	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2240      	movs	r2, #64	; 0x40
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b40      	cmp	r3, #64	; 0x40
 80024fa:	d007      	beq.n	800250c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2140      	movs	r1, #64	; 0x40
 8002508:	430a      	orrs	r2, r1
 800250a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	23e0      	movs	r3, #224	; 0xe0
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	429a      	cmp	r2, r3
 8002516:	d952      	bls.n	80025be <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d004      	beq.n	800252a <HAL_SPI_Transmit+0x11e>
 8002520:	2316      	movs	r3, #22
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d143      	bne.n	80025b2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252e:	881a      	ldrh	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253a:	1c9a      	adds	r2, r3, #2
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002544:	b29b      	uxth	r3, r3
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800254e:	e030      	b.n	80025b2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2202      	movs	r2, #2
 8002558:	4013      	ands	r3, r2
 800255a:	2b02      	cmp	r3, #2
 800255c:	d112      	bne.n	8002584 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002562:	881a      	ldrh	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	1c9a      	adds	r2, r3, #2
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002578:	b29b      	uxth	r3, r3
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002582:	e016      	b.n	80025b2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002584:	f7fe fee8 	bl	8001358 <HAL_GetTick>
 8002588:	0002      	movs	r2, r0
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d802      	bhi.n	800259a <HAL_SPI_Transmit+0x18e>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	d102      	bne.n	80025a0 <HAL_SPI_Transmit+0x194>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d108      	bne.n	80025b2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80025a0:	231f      	movs	r3, #31
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	2203      	movs	r2, #3
 80025a6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	225d      	movs	r2, #93	; 0x5d
 80025ac:	2101      	movs	r1, #1
 80025ae:	5499      	strb	r1, [r3, r2]
          goto error;
 80025b0:	e080      	b.n	80026b4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1c9      	bne.n	8002550 <HAL_SPI_Transmit+0x144>
 80025bc:	e053      	b.n	8002666 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d004      	beq.n	80025d0 <HAL_SPI_Transmit+0x1c4>
 80025c6:	2316      	movs	r3, #22
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d145      	bne.n	800265c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	330c      	adds	r3, #12
 80025da:	7812      	ldrb	r2, [r2, #0]
 80025dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80025f6:	e031      	b.n	800265c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2202      	movs	r2, #2
 8002600:	4013      	ands	r3, r2
 8002602:	2b02      	cmp	r3, #2
 8002604:	d113      	bne.n	800262e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	330c      	adds	r3, #12
 8002610:	7812      	ldrb	r2, [r2, #0]
 8002612:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800262c:	e016      	b.n	800265c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800262e:	f7fe fe93 	bl	8001358 <HAL_GetTick>
 8002632:	0002      	movs	r2, r0
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d802      	bhi.n	8002644 <HAL_SPI_Transmit+0x238>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	3301      	adds	r3, #1
 8002642:	d102      	bne.n	800264a <HAL_SPI_Transmit+0x23e>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d108      	bne.n	800265c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800264a:	231f      	movs	r3, #31
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	2203      	movs	r2, #3
 8002650:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	225d      	movs	r2, #93	; 0x5d
 8002656:	2101      	movs	r1, #1
 8002658:	5499      	strb	r1, [r3, r2]
          goto error;
 800265a:	e02b      	b.n	80026b4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1c8      	bne.n	80025f8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	6839      	ldr	r1, [r7, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	0018      	movs	r0, r3
 800266e:	f000 fb3f 	bl	8002cf0 <SPI_EndRxTxTransaction>
 8002672:	1e03      	subs	r3, r0, #0
 8002674:	d002      	beq.n	800267c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2220      	movs	r2, #32
 800267a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10a      	bne.n	800269a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d004      	beq.n	80026ac <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80026a2:	231f      	movs	r3, #31
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	e003      	b.n	80026b4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	225d      	movs	r2, #93	; 0x5d
 80026b0:	2101      	movs	r1, #1
 80026b2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	225c      	movs	r2, #92	; 0x5c
 80026b8:	2100      	movs	r1, #0
 80026ba:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80026bc:	231f      	movs	r3, #31
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	781b      	ldrb	r3, [r3, #0]
}
 80026c2:	0018      	movs	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b008      	add	sp, #32
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	001a      	movs	r2, r3
 80026da:	1cbb      	adds	r3, r7, #2
 80026dc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026de:	2301      	movs	r3, #1
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80026e2:	2323      	movs	r3, #35	; 0x23
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	225c      	movs	r2, #92	; 0x5c
 80026ee:	5c9b      	ldrb	r3, [r3, r2]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_SPI_TransmitReceive+0x2c>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e1c4      	b.n	8002a82 <HAL_SPI_TransmitReceive+0x3b6>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	225c      	movs	r2, #92	; 0x5c
 80026fc:	2101      	movs	r1, #1
 80026fe:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002700:	f7fe fe2a 	bl	8001358 <HAL_GetTick>
 8002704:	0003      	movs	r3, r0
 8002706:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002708:	201b      	movs	r0, #27
 800270a:	183b      	adds	r3, r7, r0
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	215d      	movs	r1, #93	; 0x5d
 8002710:	5c52      	ldrb	r2, [r2, r1]
 8002712:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800271a:	2312      	movs	r3, #18
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	1cba      	adds	r2, r7, #2
 8002720:	8812      	ldrh	r2, [r2, #0]
 8002722:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002724:	183b      	adds	r3, r7, r0
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d011      	beq.n	8002750 <HAL_SPI_TransmitReceive+0x84>
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	2382      	movs	r3, #130	; 0x82
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	429a      	cmp	r2, r3
 8002734:	d107      	bne.n	8002746 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d103      	bne.n	8002746 <HAL_SPI_TransmitReceive+0x7a>
 800273e:	183b      	adds	r3, r7, r0
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b04      	cmp	r3, #4
 8002744:	d004      	beq.n	8002750 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002746:	2323      	movs	r3, #35	; 0x23
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	2202      	movs	r2, #2
 800274c:	701a      	strb	r2, [r3, #0]
    goto error;
 800274e:	e191      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d006      	beq.n	8002764 <HAL_SPI_TransmitReceive+0x98>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_SPI_TransmitReceive+0x98>
 800275c:	1cbb      	adds	r3, r7, #2
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d104      	bne.n	800276e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002764:	2323      	movs	r3, #35	; 0x23
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
    goto error;
 800276c:	e182      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	225d      	movs	r2, #93	; 0x5d
 8002772:	5c9b      	ldrb	r3, [r3, r2]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b04      	cmp	r3, #4
 8002778:	d003      	beq.n	8002782 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	225d      	movs	r2, #93	; 0x5d
 800277e:	2105      	movs	r1, #5
 8002780:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1cba      	adds	r2, r7, #2
 8002792:	2146      	movs	r1, #70	; 0x46
 8002794:	8812      	ldrh	r2, [r2, #0]
 8002796:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1cba      	adds	r2, r7, #2
 800279c:	2144      	movs	r1, #68	; 0x44
 800279e:	8812      	ldrh	r2, [r2, #0]
 80027a0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1cba      	adds	r2, r7, #2
 80027ac:	8812      	ldrh	r2, [r2, #0]
 80027ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1cba      	adds	r2, r7, #2
 80027b4:	8812      	ldrh	r2, [r2, #0]
 80027b6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	23e0      	movs	r3, #224	; 0xe0
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d908      	bls.n	80027e2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	49ac      	ldr	r1, [pc, #688]	; (8002a8c <HAL_SPI_TransmitReceive+0x3c0>)
 80027dc:	400a      	ands	r2, r1
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	e008      	b.n	80027f4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2180      	movs	r1, #128	; 0x80
 80027ee:	0149      	lsls	r1, r1, #5
 80027f0:	430a      	orrs	r2, r1
 80027f2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2240      	movs	r2, #64	; 0x40
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b40      	cmp	r3, #64	; 0x40
 8002800:	d007      	beq.n	8002812 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2140      	movs	r1, #64	; 0x40
 800280e:	430a      	orrs	r2, r1
 8002810:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	23e0      	movs	r3, #224	; 0xe0
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	429a      	cmp	r2, r3
 800281c:	d800      	bhi.n	8002820 <HAL_SPI_TransmitReceive+0x154>
 800281e:	e083      	b.n	8002928 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_SPI_TransmitReceive+0x168>
 8002828:	2312      	movs	r3, #18
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d000      	beq.n	8002834 <HAL_SPI_TransmitReceive+0x168>
 8002832:	e06d      	b.n	8002910 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002838:	881a      	ldrh	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	1c9a      	adds	r2, r3, #2
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800284e:	b29b      	uxth	r3, r3
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002858:	e05a      	b.n	8002910 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2202      	movs	r2, #2
 8002862:	4013      	ands	r3, r2
 8002864:	2b02      	cmp	r3, #2
 8002866:	d11b      	bne.n	80028a0 <HAL_SPI_TransmitReceive+0x1d4>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <HAL_SPI_TransmitReceive+0x1d4>
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	2b01      	cmp	r3, #1
 8002876:	d113      	bne.n	80028a0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	1c9a      	adds	r2, r3, #2
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2201      	movs	r2, #1
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d11c      	bne.n	80028e8 <HAL_SPI_TransmitReceive+0x21c>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2246      	movs	r2, #70	; 0x46
 80028b2:	5a9b      	ldrh	r3, [r3, r2]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d016      	beq.n	80028e8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	b292      	uxth	r2, r2
 80028c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	1c9a      	adds	r2, r3, #2
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2246      	movs	r2, #70	; 0x46
 80028d6:	5a9b      	ldrh	r3, [r3, r2]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3b01      	subs	r3, #1
 80028dc:	b299      	uxth	r1, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2246      	movs	r2, #70	; 0x46
 80028e2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028e4:	2301      	movs	r3, #1
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028e8:	f7fe fd36 	bl	8001358 <HAL_GetTick>
 80028ec:	0002      	movs	r2, r0
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d80b      	bhi.n	8002910 <HAL_SPI_TransmitReceive+0x244>
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	3301      	adds	r3, #1
 80028fc:	d008      	beq.n	8002910 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80028fe:	2323      	movs	r3, #35	; 0x23
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	2203      	movs	r2, #3
 8002904:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	225d      	movs	r2, #93	; 0x5d
 800290a:	2101      	movs	r1, #1
 800290c:	5499      	strb	r1, [r3, r2]
        goto error;
 800290e:	e0b1      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d19f      	bne.n	800285a <HAL_SPI_TransmitReceive+0x18e>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2246      	movs	r2, #70	; 0x46
 800291e:	5a9b      	ldrh	r3, [r3, r2]
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d199      	bne.n	800285a <HAL_SPI_TransmitReceive+0x18e>
 8002926:	e089      	b.n	8002a3c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_SPI_TransmitReceive+0x270>
 8002930:	2312      	movs	r3, #18
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d000      	beq.n	800293c <HAL_SPI_TransmitReceive+0x270>
 800293a:	e074      	b.n	8002a26 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	330c      	adds	r3, #12
 8002946:	7812      	ldrb	r2, [r2, #0]
 8002948:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002962:	e060      	b.n	8002a26 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2202      	movs	r2, #2
 800296c:	4013      	ands	r3, r2
 800296e:	2b02      	cmp	r3, #2
 8002970:	d11c      	bne.n	80029ac <HAL_SPI_TransmitReceive+0x2e0>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002976:	b29b      	uxth	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d017      	beq.n	80029ac <HAL_SPI_TransmitReceive+0x2e0>
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	2b01      	cmp	r3, #1
 8002980:	d114      	bne.n	80029ac <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	330c      	adds	r3, #12
 800298c:	7812      	ldrb	r2, [r2, #0]
 800298e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2201      	movs	r2, #1
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d11e      	bne.n	80029f8 <HAL_SPI_TransmitReceive+0x32c>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2246      	movs	r2, #70	; 0x46
 80029be:	5a9b      	ldrh	r3, [r3, r2]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d018      	beq.n	80029f8 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	330c      	adds	r3, #12
 80029cc:	001a      	movs	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	7812      	ldrb	r2, [r2, #0]
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2246      	movs	r2, #70	; 0x46
 80029e6:	5a9b      	ldrh	r3, [r3, r2]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b299      	uxth	r1, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2246      	movs	r2, #70	; 0x46
 80029f2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029f4:	2301      	movs	r3, #1
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029f8:	f7fe fcae 	bl	8001358 <HAL_GetTick>
 80029fc:	0002      	movs	r2, r0
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d802      	bhi.n	8002a0e <HAL_SPI_TransmitReceive+0x342>
 8002a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	d102      	bne.n	8002a14 <HAL_SPI_TransmitReceive+0x348>
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d108      	bne.n	8002a26 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002a14:	2323      	movs	r3, #35	; 0x23
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	2203      	movs	r2, #3
 8002a1a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	225d      	movs	r2, #93	; 0x5d
 8002a20:	2101      	movs	r1, #1
 8002a22:	5499      	strb	r1, [r3, r2]
        goto error;
 8002a24:	e026      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d199      	bne.n	8002964 <HAL_SPI_TransmitReceive+0x298>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2246      	movs	r2, #70	; 0x46
 8002a34:	5a9b      	ldrh	r3, [r3, r2]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d193      	bne.n	8002964 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	0018      	movs	r0, r3
 8002a44:	f000 f954 	bl	8002cf0 <SPI_EndRxTxTransaction>
 8002a48:	1e03      	subs	r3, r0, #0
 8002a4a:	d006      	beq.n	8002a5a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002a4c:	2323      	movs	r3, #35	; 0x23
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	2201      	movs	r2, #1
 8002a52:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2220      	movs	r2, #32
 8002a58:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002a62:	2323      	movs	r3, #35	; 0x23
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	e003      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	225d      	movs	r2, #93	; 0x5d
 8002a70:	2101      	movs	r1, #1
 8002a72:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	225c      	movs	r2, #92	; 0x5c
 8002a78:	2100      	movs	r1, #0
 8002a7a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002a7c:	2323      	movs	r3, #35	; 0x23
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	781b      	ldrb	r3, [r3, #0]
}
 8002a82:	0018      	movs	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b00a      	add	sp, #40	; 0x28
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	ffffefff 	.word	0xffffefff

08002a90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	1dfb      	adds	r3, r7, #7
 8002a9e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002aa0:	f7fe fc5a 	bl	8001358 <HAL_GetTick>
 8002aa4:	0002      	movs	r2, r0
 8002aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	18d3      	adds	r3, r2, r3
 8002aae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ab0:	f7fe fc52 	bl	8001358 <HAL_GetTick>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ab8:	4b3a      	ldr	r3, [pc, #232]	; (8002ba4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	015b      	lsls	r3, r3, #5
 8002abe:	0d1b      	lsrs	r3, r3, #20
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	4353      	muls	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ac6:	e058      	b.n	8002b7a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	3301      	adds	r3, #1
 8002acc:	d055      	beq.n	8002b7a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ace:	f7fe fc43 	bl	8001358 <HAL_GetTick>
 8002ad2:	0002      	movs	r2, r0
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	69fa      	ldr	r2, [r7, #28]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d902      	bls.n	8002ae4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d142      	bne.n	8002b6a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	21e0      	movs	r1, #224	; 0xe0
 8002af0:	438a      	bics	r2, r1
 8002af2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	2382      	movs	r3, #130	; 0x82
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d113      	bne.n	8002b28 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	2380      	movs	r3, #128	; 0x80
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d005      	beq.n	8002b18 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d107      	bne.n	8002b28 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2140      	movs	r1, #64	; 0x40
 8002b24:	438a      	bics	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	019b      	lsls	r3, r3, #6
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d110      	bne.n	8002b56 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	491a      	ldr	r1, [pc, #104]	; (8002ba8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002b40:	400a      	ands	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2180      	movs	r1, #128	; 0x80
 8002b50:	0189      	lsls	r1, r1, #6
 8002b52:	430a      	orrs	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	225d      	movs	r2, #93	; 0x5d
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	225c      	movs	r2, #92	; 0x5c
 8002b62:	2100      	movs	r1, #0
 8002b64:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e017      	b.n	8002b9a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	4013      	ands	r3, r2
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	425a      	negs	r2, r3
 8002b8a:	4153      	adcs	r3, r2
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	001a      	movs	r2, r3
 8002b90:	1dfb      	adds	r3, r7, #7
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d197      	bne.n	8002ac8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b008      	add	sp, #32
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	ffffdfff 	.word	0xffffdfff

08002bac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002bba:	2317      	movs	r3, #23
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002bc2:	f7fe fbc9 	bl	8001358 <HAL_GetTick>
 8002bc6:	0002      	movs	r2, r0
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	18d3      	adds	r3, r2, r3
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002bd2:	f7fe fbc1 	bl	8001358 <HAL_GetTick>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	330c      	adds	r3, #12
 8002be0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002be2:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	0013      	movs	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	189b      	adds	r3, r3, r2
 8002bec:	00da      	lsls	r2, r3, #3
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	0d1b      	lsrs	r3, r3, #20
 8002bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf4:	4353      	muls	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002bf8:	e068      	b.n	8002ccc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	23c0      	movs	r3, #192	; 0xc0
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d10a      	bne.n	8002c1a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d107      	bne.n	8002c1a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	2117      	movs	r1, #23
 8002c12:	187b      	adds	r3, r7, r1
 8002c14:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002c16:	187b      	adds	r3, r7, r1
 8002c18:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	d055      	beq.n	8002ccc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c20:	f7fe fb9a 	bl	8001358 <HAL_GetTick>
 8002c24:	0002      	movs	r2, r0
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d902      	bls.n	8002c36 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d142      	bne.n	8002cbc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	21e0      	movs	r1, #224	; 0xe0
 8002c42:	438a      	bics	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	2382      	movs	r3, #130	; 0x82
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d113      	bne.n	8002c7a <SPI_WaitFifoStateUntilTimeout+0xce>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	2380      	movs	r3, #128	; 0x80
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d005      	beq.n	8002c6a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d107      	bne.n	8002c7a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2140      	movs	r1, #64	; 0x40
 8002c76:	438a      	bics	r2, r1
 8002c78:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c7e:	2380      	movs	r3, #128	; 0x80
 8002c80:	019b      	lsls	r3, r3, #6
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d110      	bne.n	8002ca8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4916      	ldr	r1, [pc, #88]	; (8002cec <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002c92:	400a      	ands	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	0189      	lsls	r1, r1, #6
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	225d      	movs	r2, #93	; 0x5d
 8002cac:	2101      	movs	r1, #1
 8002cae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	225c      	movs	r2, #92	; 0x5c
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e010      	b.n	8002cde <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d18e      	bne.n	8002bfa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	0018      	movs	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b00a      	add	sp, #40	; 0x28
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	20000000 	.word	0x20000000
 8002cec:	ffffdfff 	.word	0xffffdfff

08002cf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	23c0      	movs	r3, #192	; 0xc0
 8002d00:	0159      	lsls	r1, r3, #5
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	0013      	movs	r3, r2
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f7ff ff4e 	bl	8002bac <SPI_WaitFifoStateUntilTimeout>
 8002d10:	1e03      	subs	r3, r0, #0
 8002d12:	d007      	beq.n	8002d24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d18:	2220      	movs	r2, #32
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e027      	b.n	8002d74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	0013      	movs	r3, r2
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2180      	movs	r1, #128	; 0x80
 8002d32:	f7ff fead 	bl	8002a90 <SPI_WaitFlagStateUntilTimeout>
 8002d36:	1e03      	subs	r3, r0, #0
 8002d38:	d007      	beq.n	8002d4a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3e:	2220      	movs	r2, #32
 8002d40:	431a      	orrs	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e014      	b.n	8002d74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	23c0      	movs	r3, #192	; 0xc0
 8002d4e:	00d9      	lsls	r1, r3, #3
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	0013      	movs	r3, r2
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f7ff ff27 	bl	8002bac <SPI_WaitFifoStateUntilTimeout>
 8002d5e:	1e03      	subs	r3, r0, #0
 8002d60:	d007      	beq.n	8002d72 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d66:	2220      	movs	r2, #32
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e000      	b.n	8002d74 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b004      	add	sp, #16
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e044      	b.n	8002e18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d107      	bne.n	8002da6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2278      	movs	r2, #120	; 0x78
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	0018      	movs	r0, r3
 8002da2:	f7fe f9eb 	bl	800117c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2224      	movs	r2, #36	; 0x24
 8002daa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2101      	movs	r1, #1
 8002db8:	438a      	bics	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f000 f830 	bl	8002e24 <UART_SetConfig>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e024      	b.n	8002e18 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f000 f993 	bl	8003104 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	490d      	ldr	r1, [pc, #52]	; (8002e20 <HAL_UART_Init+0xa4>)
 8002dea:	400a      	ands	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2108      	movs	r1, #8
 8002dfa:	438a      	bics	r2, r1
 8002dfc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2101      	movs	r1, #1
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	0018      	movs	r0, r3
 8002e12:	f000 fa2b 	bl	800326c <UART_CheckIdleState>
 8002e16:	0003      	movs	r3, r0
}
 8002e18:	0018      	movs	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	b002      	add	sp, #8
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	fffff7ff 	.word	0xfffff7ff

08002e24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e2c:	231e      	movs	r3, #30
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4aa1      	ldr	r2, [pc, #644]	; (80030d8 <UART_SetConfig+0x2b4>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	0019      	movs	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	4a9c      	ldr	r2, [pc, #624]	; (80030dc <UART_SetConfig+0x2b8>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	0019      	movs	r1, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	4a93      	ldr	r2, [pc, #588]	; (80030e0 <UART_SetConfig+0x2bc>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	0019      	movs	r1, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a8f      	ldr	r2, [pc, #572]	; (80030e4 <UART_SetConfig+0x2c0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d127      	bne.n	8002efa <UART_SetConfig+0xd6>
 8002eaa:	4b8f      	ldr	r3, [pc, #572]	; (80030e8 <UART_SetConfig+0x2c4>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	2203      	movs	r2, #3
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d00d      	beq.n	8002ed2 <UART_SetConfig+0xae>
 8002eb6:	d81b      	bhi.n	8002ef0 <UART_SetConfig+0xcc>
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d014      	beq.n	8002ee6 <UART_SetConfig+0xc2>
 8002ebc:	d818      	bhi.n	8002ef0 <UART_SetConfig+0xcc>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <UART_SetConfig+0xa4>
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d00a      	beq.n	8002edc <UART_SetConfig+0xb8>
 8002ec6:	e013      	b.n	8002ef0 <UART_SetConfig+0xcc>
 8002ec8:	231f      	movs	r3, #31
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]
 8002ed0:	e049      	b.n	8002f66 <UART_SetConfig+0x142>
 8002ed2:	231f      	movs	r3, #31
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	701a      	strb	r2, [r3, #0]
 8002eda:	e044      	b.n	8002f66 <UART_SetConfig+0x142>
 8002edc:	231f      	movs	r3, #31
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	701a      	strb	r2, [r3, #0]
 8002ee4:	e03f      	b.n	8002f66 <UART_SetConfig+0x142>
 8002ee6:	231f      	movs	r3, #31
 8002ee8:	18fb      	adds	r3, r7, r3
 8002eea:	2208      	movs	r2, #8
 8002eec:	701a      	strb	r2, [r3, #0]
 8002eee:	e03a      	b.n	8002f66 <UART_SetConfig+0x142>
 8002ef0:	231f      	movs	r3, #31
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	2210      	movs	r2, #16
 8002ef6:	701a      	strb	r2, [r3, #0]
 8002ef8:	e035      	b.n	8002f66 <UART_SetConfig+0x142>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a7b      	ldr	r2, [pc, #492]	; (80030ec <UART_SetConfig+0x2c8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d104      	bne.n	8002f0e <UART_SetConfig+0xea>
 8002f04:	231f      	movs	r3, #31
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	2200      	movs	r2, #0
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	e02b      	b.n	8002f66 <UART_SetConfig+0x142>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a77      	ldr	r2, [pc, #476]	; (80030f0 <UART_SetConfig+0x2cc>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d104      	bne.n	8002f22 <UART_SetConfig+0xfe>
 8002f18:	231f      	movs	r3, #31
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
 8002f20:	e021      	b.n	8002f66 <UART_SetConfig+0x142>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a73      	ldr	r2, [pc, #460]	; (80030f4 <UART_SetConfig+0x2d0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d104      	bne.n	8002f36 <UART_SetConfig+0x112>
 8002f2c:	231f      	movs	r3, #31
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
 8002f34:	e017      	b.n	8002f66 <UART_SetConfig+0x142>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a6f      	ldr	r2, [pc, #444]	; (80030f8 <UART_SetConfig+0x2d4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d104      	bne.n	8002f4a <UART_SetConfig+0x126>
 8002f40:	231f      	movs	r3, #31
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	2200      	movs	r2, #0
 8002f46:	701a      	strb	r2, [r3, #0]
 8002f48:	e00d      	b.n	8002f66 <UART_SetConfig+0x142>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a6b      	ldr	r2, [pc, #428]	; (80030fc <UART_SetConfig+0x2d8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d104      	bne.n	8002f5e <UART_SetConfig+0x13a>
 8002f54:	231f      	movs	r3, #31
 8002f56:	18fb      	adds	r3, r7, r3
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
 8002f5c:	e003      	b.n	8002f66 <UART_SetConfig+0x142>
 8002f5e:	231f      	movs	r3, #31
 8002f60:	18fb      	adds	r3, r7, r3
 8002f62:	2210      	movs	r2, #16
 8002f64:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	2380      	movs	r3, #128	; 0x80
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d15c      	bne.n	800302c <UART_SetConfig+0x208>
  {
    switch (clocksource)
 8002f72:	231f      	movs	r3, #31
 8002f74:	18fb      	adds	r3, r7, r3
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d015      	beq.n	8002fa8 <UART_SetConfig+0x184>
 8002f7c:	dc18      	bgt.n	8002fb0 <UART_SetConfig+0x18c>
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d00d      	beq.n	8002f9e <UART_SetConfig+0x17a>
 8002f82:	dc15      	bgt.n	8002fb0 <UART_SetConfig+0x18c>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <UART_SetConfig+0x16a>
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d005      	beq.n	8002f98 <UART_SetConfig+0x174>
 8002f8c:	e010      	b.n	8002fb0 <UART_SetConfig+0x18c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f8e:	f7ff f8a1 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 8002f92:	0003      	movs	r3, r0
 8002f94:	61bb      	str	r3, [r7, #24]
        break;
 8002f96:	e012      	b.n	8002fbe <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f98:	4b59      	ldr	r3, [pc, #356]	; (8003100 <UART_SetConfig+0x2dc>)
 8002f9a:	61bb      	str	r3, [r7, #24]
        break;
 8002f9c:	e00f      	b.n	8002fbe <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f9e:	f7ff f837 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	61bb      	str	r3, [r7, #24]
        break;
 8002fa6:	e00a      	b.n	8002fbe <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	021b      	lsls	r3, r3, #8
 8002fac:	61bb      	str	r3, [r7, #24]
        break;
 8002fae:	e006      	b.n	8002fbe <UART_SetConfig+0x19a>
      default:
        pclk = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fb4:	231e      	movs	r3, #30
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]
        break;
 8002fbc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d100      	bne.n	8002fc6 <UART_SetConfig+0x1a2>
 8002fc4:	e07a      	b.n	80030bc <UART_SetConfig+0x298>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	005a      	lsls	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	085b      	lsrs	r3, r3, #1
 8002fd0:	18d2      	adds	r2, r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	0010      	movs	r0, r2
 8002fda:	f7fd f893 	bl	8000104 <__udivsi3>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	2b0f      	cmp	r3, #15
 8002fe6:	d91c      	bls.n	8003022 <UART_SetConfig+0x1fe>
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	025b      	lsls	r3, r3, #9
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d217      	bcs.n	8003022 <UART_SetConfig+0x1fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	200e      	movs	r0, #14
 8002ff8:	183b      	adds	r3, r7, r0
 8002ffa:	210f      	movs	r1, #15
 8002ffc:	438a      	bics	r2, r1
 8002ffe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	b29b      	uxth	r3, r3
 8003006:	2207      	movs	r2, #7
 8003008:	4013      	ands	r3, r2
 800300a:	b299      	uxth	r1, r3
 800300c:	183b      	adds	r3, r7, r0
 800300e:	183a      	adds	r2, r7, r0
 8003010:	8812      	ldrh	r2, [r2, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	183a      	adds	r2, r7, r0
 800301c:	8812      	ldrh	r2, [r2, #0]
 800301e:	60da      	str	r2, [r3, #12]
 8003020:	e04c      	b.n	80030bc <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 8003022:	231e      	movs	r3, #30
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	2201      	movs	r2, #1
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	e047      	b.n	80030bc <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 800302c:	231f      	movs	r3, #31
 800302e:	18fb      	adds	r3, r7, r3
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b08      	cmp	r3, #8
 8003034:	d015      	beq.n	8003062 <UART_SetConfig+0x23e>
 8003036:	dc18      	bgt.n	800306a <UART_SetConfig+0x246>
 8003038:	2b04      	cmp	r3, #4
 800303a:	d00d      	beq.n	8003058 <UART_SetConfig+0x234>
 800303c:	dc15      	bgt.n	800306a <UART_SetConfig+0x246>
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <UART_SetConfig+0x224>
 8003042:	2b02      	cmp	r3, #2
 8003044:	d005      	beq.n	8003052 <UART_SetConfig+0x22e>
 8003046:	e010      	b.n	800306a <UART_SetConfig+0x246>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003048:	f7ff f844 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 800304c:	0003      	movs	r3, r0
 800304e:	61bb      	str	r3, [r7, #24]
        break;
 8003050:	e012      	b.n	8003078 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003052:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <UART_SetConfig+0x2dc>)
 8003054:	61bb      	str	r3, [r7, #24]
        break;
 8003056:	e00f      	b.n	8003078 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003058:	f7fe ffda 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 800305c:	0003      	movs	r3, r0
 800305e:	61bb      	str	r3, [r7, #24]
        break;
 8003060:	e00a      	b.n	8003078 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	61bb      	str	r3, [r7, #24]
        break;
 8003068:	e006      	b.n	8003078 <UART_SetConfig+0x254>
      default:
        pclk = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800306e:	231e      	movs	r3, #30
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
        break;
 8003076:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d01e      	beq.n	80030bc <UART_SetConfig+0x298>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	085a      	lsrs	r2, r3, #1
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	18d2      	adds	r2, r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	0019      	movs	r1, r3
 800308e:	0010      	movs	r0, r2
 8003090:	f7fd f838 	bl	8000104 <__udivsi3>
 8003094:	0003      	movs	r3, r0
 8003096:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	2b0f      	cmp	r3, #15
 800309c:	d90a      	bls.n	80030b4 <UART_SetConfig+0x290>
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	025b      	lsls	r3, r3, #9
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d205      	bcs.n	80030b4 <UART_SetConfig+0x290>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	e003      	b.n	80030bc <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 80030b4:	231e      	movs	r3, #30
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	2201      	movs	r2, #1
 80030ba:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80030c8:	231e      	movs	r3, #30
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	781b      	ldrb	r3, [r3, #0]
}
 80030ce:	0018      	movs	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b008      	add	sp, #32
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	efff69f3 	.word	0xefff69f3
 80030dc:	ffffcfff 	.word	0xffffcfff
 80030e0:	fffff4ff 	.word	0xfffff4ff
 80030e4:	40013800 	.word	0x40013800
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40004400 	.word	0x40004400
 80030f0:	40004800 	.word	0x40004800
 80030f4:	40004c00 	.word	0x40004c00
 80030f8:	40005000 	.word	0x40005000
 80030fc:	40011400 	.word	0x40011400
 8003100:	007a1200 	.word	0x007a1200

08003104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	2201      	movs	r2, #1
 8003112:	4013      	ands	r3, r2
 8003114:	d00b      	beq.n	800312e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4a4a      	ldr	r2, [pc, #296]	; (8003248 <UART_AdvFeatureConfig+0x144>)
 800311e:	4013      	ands	r3, r2
 8003120:	0019      	movs	r1, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	2202      	movs	r2, #2
 8003134:	4013      	ands	r3, r2
 8003136:	d00b      	beq.n	8003150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4a43      	ldr	r2, [pc, #268]	; (800324c <UART_AdvFeatureConfig+0x148>)
 8003140:	4013      	ands	r3, r2
 8003142:	0019      	movs	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	2204      	movs	r2, #4
 8003156:	4013      	ands	r3, r2
 8003158:	d00b      	beq.n	8003172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4a3b      	ldr	r2, [pc, #236]	; (8003250 <UART_AdvFeatureConfig+0x14c>)
 8003162:	4013      	ands	r3, r2
 8003164:	0019      	movs	r1, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	2208      	movs	r2, #8
 8003178:	4013      	ands	r3, r2
 800317a:	d00b      	beq.n	8003194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4a34      	ldr	r2, [pc, #208]	; (8003254 <UART_AdvFeatureConfig+0x150>)
 8003184:	4013      	ands	r3, r2
 8003186:	0019      	movs	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	2210      	movs	r2, #16
 800319a:	4013      	ands	r3, r2
 800319c:	d00b      	beq.n	80031b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4a2c      	ldr	r2, [pc, #176]	; (8003258 <UART_AdvFeatureConfig+0x154>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	0019      	movs	r1, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	2220      	movs	r2, #32
 80031bc:	4013      	ands	r3, r2
 80031be:	d00b      	beq.n	80031d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	4a25      	ldr	r2, [pc, #148]	; (800325c <UART_AdvFeatureConfig+0x158>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	0019      	movs	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	2240      	movs	r2, #64	; 0x40
 80031de:	4013      	ands	r3, r2
 80031e0:	d01d      	beq.n	800321e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <UART_AdvFeatureConfig+0x15c>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	0019      	movs	r1, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	035b      	lsls	r3, r3, #13
 8003202:	429a      	cmp	r2, r3
 8003204:	d10b      	bne.n	800321e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4a15      	ldr	r2, [pc, #84]	; (8003264 <UART_AdvFeatureConfig+0x160>)
 800320e:	4013      	ands	r3, r2
 8003210:	0019      	movs	r1, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	2280      	movs	r2, #128	; 0x80
 8003224:	4013      	ands	r3, r2
 8003226:	d00b      	beq.n	8003240 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <UART_AdvFeatureConfig+0x164>)
 8003230:	4013      	ands	r3, r2
 8003232:	0019      	movs	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	605a      	str	r2, [r3, #4]
  }
}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}
 8003248:	fffdffff 	.word	0xfffdffff
 800324c:	fffeffff 	.word	0xfffeffff
 8003250:	fffbffff 	.word	0xfffbffff
 8003254:	ffff7fff 	.word	0xffff7fff
 8003258:	ffffefff 	.word	0xffffefff
 800325c:	ffffdfff 	.word	0xffffdfff
 8003260:	ffefffff 	.word	0xffefffff
 8003264:	ff9fffff 	.word	0xff9fffff
 8003268:	fff7ffff 	.word	0xfff7ffff

0800326c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b092      	sub	sp, #72	; 0x48
 8003270:	af02      	add	r7, sp, #8
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2284      	movs	r2, #132	; 0x84
 8003278:	2100      	movs	r1, #0
 800327a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800327c:	f7fe f86c 	bl	8001358 <HAL_GetTick>
 8003280:	0003      	movs	r3, r0
 8003282:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2208      	movs	r2, #8
 800328c:	4013      	ands	r3, r2
 800328e:	2b08      	cmp	r3, #8
 8003290:	d12c      	bne.n	80032ec <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003294:	2280      	movs	r2, #128	; 0x80
 8003296:	0391      	lsls	r1, r2, #14
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4a46      	ldr	r2, [pc, #280]	; (80033b4 <UART_CheckIdleState+0x148>)
 800329c:	9200      	str	r2, [sp, #0]
 800329e:	2200      	movs	r2, #0
 80032a0:	f000 f88c 	bl	80033bc <UART_WaitOnFlagUntilTimeout>
 80032a4:	1e03      	subs	r3, r0, #0
 80032a6:	d021      	beq.n	80032ec <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a8:	f3ef 8310 	mrs	r3, PRIMASK
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80032b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80032b2:	2301      	movs	r3, #1
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b8:	f383 8810 	msr	PRIMASK, r3
}
 80032bc:	46c0      	nop			; (mov r8, r8)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2180      	movs	r1, #128	; 0x80
 80032ca:	438a      	bics	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d4:	f383 8810 	msr	PRIMASK, r3
}
 80032d8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2220      	movs	r2, #32
 80032de:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2278      	movs	r2, #120	; 0x78
 80032e4:	2100      	movs	r1, #0
 80032e6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e05f      	b.n	80033ac <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2204      	movs	r2, #4
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d146      	bne.n	8003388 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032fc:	2280      	movs	r2, #128	; 0x80
 80032fe:	03d1      	lsls	r1, r2, #15
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4a2c      	ldr	r2, [pc, #176]	; (80033b4 <UART_CheckIdleState+0x148>)
 8003304:	9200      	str	r2, [sp, #0]
 8003306:	2200      	movs	r2, #0
 8003308:	f000 f858 	bl	80033bc <UART_WaitOnFlagUntilTimeout>
 800330c:	1e03      	subs	r3, r0, #0
 800330e:	d03b      	beq.n	8003388 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003310:	f3ef 8310 	mrs	r3, PRIMASK
 8003314:	60fb      	str	r3, [r7, #12]
  return(result);
 8003316:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003318:	637b      	str	r3, [r7, #52]	; 0x34
 800331a:	2301      	movs	r3, #1
 800331c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f383 8810 	msr	PRIMASK, r3
}
 8003324:	46c0      	nop			; (mov r8, r8)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4921      	ldr	r1, [pc, #132]	; (80033b8 <UART_CheckIdleState+0x14c>)
 8003332:	400a      	ands	r2, r1
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003338:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f383 8810 	msr	PRIMASK, r3
}
 8003340:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003342:	f3ef 8310 	mrs	r3, PRIMASK
 8003346:	61bb      	str	r3, [r7, #24]
  return(result);
 8003348:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334a:	633b      	str	r3, [r7, #48]	; 0x30
 800334c:	2301      	movs	r3, #1
 800334e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f383 8810 	msr	PRIMASK, r3
}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2101      	movs	r1, #1
 8003364:	438a      	bics	r2, r1
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	f383 8810 	msr	PRIMASK, r3
}
 8003372:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2280      	movs	r2, #128	; 0x80
 8003378:	2120      	movs	r1, #32
 800337a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2278      	movs	r2, #120	; 0x78
 8003380:	2100      	movs	r1, #0
 8003382:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e011      	b.n	80033ac <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2280      	movs	r2, #128	; 0x80
 8003392:	2120      	movs	r1, #32
 8003394:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2278      	movs	r2, #120	; 0x78
 80033a6:	2100      	movs	r1, #0
 80033a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	0018      	movs	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b010      	add	sp, #64	; 0x40
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	01ffffff 	.word	0x01ffffff
 80033b8:	fffffedf 	.word	0xfffffedf

080033bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	1dfb      	adds	r3, r7, #7
 80033ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033cc:	e04b      	b.n	8003466 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	3301      	adds	r3, #1
 80033d2:	d048      	beq.n	8003466 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d4:	f7fd ffc0 	bl	8001358 <HAL_GetTick>
 80033d8:	0002      	movs	r2, r0
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d302      	bcc.n	80033ea <UART_WaitOnFlagUntilTimeout+0x2e>
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e04b      	b.n	8003486 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2204      	movs	r2, #4
 80033f6:	4013      	ands	r3, r2
 80033f8:	d035      	beq.n	8003466 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	2208      	movs	r2, #8
 8003402:	4013      	ands	r3, r2
 8003404:	2b08      	cmp	r3, #8
 8003406:	d111      	bne.n	800342c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2208      	movs	r2, #8
 800340e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	0018      	movs	r0, r3
 8003414:	f000 f83c 	bl	8003490 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2284      	movs	r2, #132	; 0x84
 800341c:	2108      	movs	r1, #8
 800341e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2278      	movs	r2, #120	; 0x78
 8003424:	2100      	movs	r1, #0
 8003426:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e02c      	b.n	8003486 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	2380      	movs	r3, #128	; 0x80
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	401a      	ands	r2, r3
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	429a      	cmp	r2, r3
 800343e:	d112      	bne.n	8003466 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2280      	movs	r2, #128	; 0x80
 8003446:	0112      	lsls	r2, r2, #4
 8003448:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	0018      	movs	r0, r3
 800344e:	f000 f81f 	bl	8003490 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2284      	movs	r2, #132	; 0x84
 8003456:	2120      	movs	r1, #32
 8003458:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2278      	movs	r2, #120	; 0x78
 800345e:	2100      	movs	r1, #0
 8003460:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e00f      	b.n	8003486 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	4013      	ands	r3, r2
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	425a      	negs	r2, r3
 8003476:	4153      	adcs	r3, r2
 8003478:	b2db      	uxtb	r3, r3
 800347a:	001a      	movs	r2, r3
 800347c:	1dfb      	adds	r3, r7, #7
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d0a4      	beq.n	80033ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	0018      	movs	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	b004      	add	sp, #16
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08e      	sub	sp, #56	; 0x38
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003498:	f3ef 8310 	mrs	r3, PRIMASK
 800349c:	617b      	str	r3, [r7, #20]
  return(result);
 800349e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034a0:	637b      	str	r3, [r7, #52]	; 0x34
 80034a2:	2301      	movs	r3, #1
 80034a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f383 8810 	msr	PRIMASK, r3
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4926      	ldr	r1, [pc, #152]	; (8003554 <UART_EndRxTransfer+0xc4>)
 80034ba:	400a      	ands	r2, r1
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f383 8810 	msr	PRIMASK, r3
}
 80034c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ca:	f3ef 8310 	mrs	r3, PRIMASK
 80034ce:	623b      	str	r3, [r7, #32]
  return(result);
 80034d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d2:	633b      	str	r3, [r7, #48]	; 0x30
 80034d4:	2301      	movs	r3, #1
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	f383 8810 	msr	PRIMASK, r3
}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2101      	movs	r1, #1
 80034ec:	438a      	bics	r2, r1
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f6:	f383 8810 	msr	PRIMASK, r3
}
 80034fa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003500:	2b01      	cmp	r3, #1
 8003502:	d118      	bne.n	8003536 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003504:	f3ef 8310 	mrs	r3, PRIMASK
 8003508:	60bb      	str	r3, [r7, #8]
  return(result);
 800350a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800350c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800350e:	2301      	movs	r3, #1
 8003510:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f383 8810 	msr	PRIMASK, r3
}
 8003518:	46c0      	nop			; (mov r8, r8)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2110      	movs	r1, #16
 8003526:	438a      	bics	r2, r1
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f383 8810 	msr	PRIMASK, r3
}
 8003534:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2280      	movs	r2, #128	; 0x80
 800353a:	2120      	movs	r1, #32
 800353c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	669a      	str	r2, [r3, #104]	; 0x68
}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	46bd      	mov	sp, r7
 800354e:	b00e      	add	sp, #56	; 0x38
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	fffffedf 	.word	0xfffffedf

08003558 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800355c:	4a06      	ldr	r2, [pc, #24]	; (8003578 <MX_FATFS_Init+0x20>)
 800355e:	4b07      	ldr	r3, [pc, #28]	; (800357c <MX_FATFS_Init+0x24>)
 8003560:	0011      	movs	r1, r2
 8003562:	0018      	movs	r0, r3
 8003564:	f003 fef6 	bl	8007354 <FATFS_LinkDriver>
 8003568:	0003      	movs	r3, r0
 800356a:	001a      	movs	r2, r3
 800356c:	4b04      	ldr	r3, [pc, #16]	; (8003580 <MX_FATFS_Init+0x28>)
 800356e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003570:	46c0      	nop			; (mov r8, r8)
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	20000604 	.word	0x20000604
 800357c:	2000000c 	.word	0x2000000c
 8003580:	20000600 	.word	0x20000600

08003584 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003588:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800358a:	0018      	movs	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	0002      	movs	r2, r0
 8003598:	1dfb      	adds	r3, r7, #7
 800359a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800359c:	1dfb      	adds	r3, r7, #7
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f000 fa19 	bl	80039d8 <USER_SPI_initialize>
 80035a6:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 80035a8:	0018      	movs	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b002      	add	sp, #8
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	0002      	movs	r2, r0
 80035b8:	1dfb      	adds	r3, r7, #7
 80035ba:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80035bc:	1dfb      	adds	r3, r7, #7
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f000 fb21 	bl	8003c08 <USER_SPI_status>
 80035c6:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b002      	add	sp, #8
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80035d0:	b5b0      	push	{r4, r5, r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	603b      	str	r3, [r7, #0]
 80035dc:	250f      	movs	r5, #15
 80035de:	197b      	adds	r3, r7, r5
 80035e0:	1c02      	adds	r2, r0, #0
 80035e2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80035e4:	683c      	ldr	r4, [r7, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	197b      	adds	r3, r7, r5
 80035ec:	7818      	ldrb	r0, [r3, #0]
 80035ee:	0023      	movs	r3, r4
 80035f0:	f000 fb20 	bl	8003c34 <USER_SPI_read>
 80035f4:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 80035f6:	0018      	movs	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b004      	add	sp, #16
 80035fc:	bdb0      	pop	{r4, r5, r7, pc}

080035fe <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80035fe:	b5b0      	push	{r4, r5, r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	250f      	movs	r5, #15
 800360c:	197b      	adds	r3, r7, r5
 800360e:	1c02      	adds	r2, r0, #0
 8003610:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8003612:	683c      	ldr	r4, [r7, #0]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	197b      	adds	r3, r7, r5
 800361a:	7818      	ldrb	r0, [r3, #0]
 800361c:	0023      	movs	r3, r4
 800361e:	f000 fb75 	bl	8003d0c <USER_SPI_write>
 8003622:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8003624:	0018      	movs	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	b004      	add	sp, #16
 800362a:	bdb0      	pop	{r4, r5, r7, pc}

0800362c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	603a      	str	r2, [r7, #0]
 8003634:	1dfb      	adds	r3, r7, #7
 8003636:	1c02      	adds	r2, r0, #0
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	1dbb      	adds	r3, r7, #6
 800363c:	1c0a      	adds	r2, r1, #0
 800363e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	1dbb      	adds	r3, r7, #6
 8003644:	7819      	ldrb	r1, [r3, #0]
 8003646:	1dfb      	adds	r3, r7, #7
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	0018      	movs	r0, r3
 800364c:	f000 fbde 	bl	8003e0c <USER_SPI_ioctl>
 8003650:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 8003652:	0018      	movs	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	b002      	add	sp, #8
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003664:	f7fd fe78 	bl	8001358 <HAL_GetTick>
 8003668:	0002      	movs	r2, r0
 800366a:	4b04      	ldr	r3, [pc, #16]	; (800367c <SPI_Timer_On+0x20>)
 800366c:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 800366e:	4b04      	ldr	r3, [pc, #16]	; (8003680 <SPI_Timer_On+0x24>)
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	601a      	str	r2, [r3, #0]
}
 8003674:	46c0      	nop			; (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	b002      	add	sp, #8
 800367a:	bd80      	pop	{r7, pc}
 800367c:	2000060c 	.word	0x2000060c
 8003680:	20000610 	.word	0x20000610

08003684 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003688:	f7fd fe66 	bl	8001358 <HAL_GetTick>
 800368c:	0002      	movs	r2, r0
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <SPI_Timer_Status+0x24>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	1ad2      	subs	r2, r2, r3
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <SPI_Timer_Status+0x28>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	419b      	sbcs	r3, r3
 800369c:	425b      	negs	r3, r3
 800369e:	b2db      	uxtb	r3, r3
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	2000060c 	.word	0x2000060c
 80036ac:	20000610 	.word	0x20000610

080036b0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80036b0:	b590      	push	{r4, r7, lr}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	0002      	movs	r2, r0
 80036b8:	1dfb      	adds	r3, r7, #7
 80036ba:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80036bc:	240f      	movs	r4, #15
 80036be:	193a      	adds	r2, r7, r4
 80036c0:	1df9      	adds	r1, r7, #7
 80036c2:	4806      	ldr	r0, [pc, #24]	; (80036dc <xchg_spi+0x2c>)
 80036c4:	2332      	movs	r3, #50	; 0x32
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	2301      	movs	r3, #1
 80036ca:	f7fe ffff 	bl	80026cc <HAL_SPI_TransmitReceive>
    return rxDat;
 80036ce:	193b      	adds	r3, r7, r4
 80036d0:	781b      	ldrb	r3, [r3, #0]
}
 80036d2:	0018      	movs	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b005      	add	sp, #20
 80036d8:	bd90      	pop	{r4, r7, pc}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	2000004c 	.word	0x2000004c

080036e0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80036e0:	b590      	push	{r4, r7, lr}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	e00a      	b.n	8003706 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	18d4      	adds	r4, r2, r3
 80036f6:	20ff      	movs	r0, #255	; 0xff
 80036f8:	f7ff ffda 	bl	80036b0 <xchg_spi>
 80036fc:	0003      	movs	r3, r0
 80036fe:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3301      	adds	r3, #1
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d3f0      	bcc.n	80036f0 <rcvr_spi_multi+0x10>
	}
}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	46c0      	nop			; (mov r8, r8)
 8003712:	46bd      	mov	sp, r7
 8003714:	b005      	add	sp, #20
 8003716:	bd90      	pop	{r4, r7, pc}

08003718 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	b29a      	uxth	r2, r3
 8003726:	2301      	movs	r3, #1
 8003728:	425b      	negs	r3, r3
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4803      	ldr	r0, [pc, #12]	; (800373c <xmit_spi_multi+0x24>)
 800372e:	f7fe fe6d 	bl	800240c <HAL_SPI_Transmit>
}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	46bd      	mov	sp, r7
 8003736:	b002      	add	sp, #8
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	2000004c 	.word	0x2000004c

08003740 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003740:	b5b0      	push	{r4, r5, r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003748:	f7fd fe06 	bl	8001358 <HAL_GetTick>
 800374c:	0003      	movs	r3, r0
 800374e:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003754:	250f      	movs	r5, #15
 8003756:	197c      	adds	r4, r7, r5
 8003758:	20ff      	movs	r0, #255	; 0xff
 800375a:	f7ff ffa9 	bl	80036b0 <xchg_spi>
 800375e:	0003      	movs	r3, r0
 8003760:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003762:	197b      	adds	r3, r7, r5
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2bff      	cmp	r3, #255	; 0xff
 8003768:	d007      	beq.n	800377a <wait_ready+0x3a>
 800376a:	f7fd fdf5 	bl	8001358 <HAL_GetTick>
 800376e:	0002      	movs	r2, r0
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	429a      	cmp	r2, r3
 8003778:	d8ec      	bhi.n	8003754 <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 800377a:	230f      	movs	r3, #15
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	3bff      	subs	r3, #255	; 0xff
 8003782:	425a      	negs	r2, r3
 8003784:	4153      	adcs	r3, r2
 8003786:	b2db      	uxtb	r3, r3
}
 8003788:	0018      	movs	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	b006      	add	sp, #24
 800378e:	bdb0      	pop	{r4, r5, r7, pc}

08003790 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <despiselect+0x1c>)
 8003796:	2201      	movs	r2, #1
 8003798:	2102      	movs	r1, #2
 800379a:	0018      	movs	r0, r3
 800379c:	f7fe f82e 	bl	80017fc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80037a0:	20ff      	movs	r0, #255	; 0xff
 80037a2:	f7ff ff85 	bl	80036b0 <xchg_spi>

}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	48000400 	.word	0x48000400

080037b0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <spiselect+0x34>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	2102      	movs	r1, #2
 80037ba:	0018      	movs	r0, r3
 80037bc:	f7fe f81e 	bl	80017fc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80037c0:	20ff      	movs	r0, #255	; 0xff
 80037c2:	f7ff ff75 	bl	80036b0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80037c6:	23fa      	movs	r3, #250	; 0xfa
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	0018      	movs	r0, r3
 80037cc:	f7ff ffb8 	bl	8003740 <wait_ready>
 80037d0:	1e03      	subs	r3, r0, #0
 80037d2:	d001      	beq.n	80037d8 <spiselect+0x28>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e002      	b.n	80037de <spiselect+0x2e>

	despiselect();
 80037d8:	f7ff ffda 	bl	8003790 <despiselect>
	return 0;	/* Timeout */
 80037dc:	2300      	movs	r3, #0
}
 80037de:	0018      	movs	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	48000400 	.word	0x48000400

080037e8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80037e8:	b5b0      	push	{r4, r5, r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80037f2:	20c8      	movs	r0, #200	; 0xc8
 80037f4:	f7ff ff32 	bl	800365c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80037f8:	250f      	movs	r5, #15
 80037fa:	197c      	adds	r4, r7, r5
 80037fc:	20ff      	movs	r0, #255	; 0xff
 80037fe:	f7ff ff57 	bl	80036b0 <xchg_spi>
 8003802:	0003      	movs	r3, r0
 8003804:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003806:	197b      	adds	r3, r7, r5
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2bff      	cmp	r3, #255	; 0xff
 800380c:	d103      	bne.n	8003816 <rcvr_datablock+0x2e>
 800380e:	f7ff ff39 	bl	8003684 <SPI_Timer_Status>
 8003812:	1e03      	subs	r3, r0, #0
 8003814:	d1f0      	bne.n	80037f8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003816:	230f      	movs	r3, #15
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2bfe      	cmp	r3, #254	; 0xfe
 800381e:	d001      	beq.n	8003824 <rcvr_datablock+0x3c>
 8003820:	2300      	movs	r3, #0
 8003822:	e00c      	b.n	800383e <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	0011      	movs	r1, r2
 800382a:	0018      	movs	r0, r3
 800382c:	f7ff ff58 	bl	80036e0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003830:	20ff      	movs	r0, #255	; 0xff
 8003832:	f7ff ff3d 	bl	80036b0 <xchg_spi>
 8003836:	20ff      	movs	r0, #255	; 0xff
 8003838:	f7ff ff3a 	bl	80036b0 <xchg_spi>

	return 1;						/* Function succeeded */
 800383c:	2301      	movs	r3, #1
}
 800383e:	0018      	movs	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	b004      	add	sp, #16
 8003844:	bdb0      	pop	{r4, r5, r7, pc}

08003846 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003846:	b5b0      	push	{r4, r5, r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	000a      	movs	r2, r1
 8003850:	1cfb      	adds	r3, r7, #3
 8003852:	701a      	strb	r2, [r3, #0]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003854:	23fa      	movs	r3, #250	; 0xfa
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	0018      	movs	r0, r3
 800385a:	f7ff ff71 	bl	8003740 <wait_ready>
 800385e:	1e03      	subs	r3, r0, #0
 8003860:	d101      	bne.n	8003866 <xmit_datablock+0x20>
 8003862:	2300      	movs	r3, #0
 8003864:	e025      	b.n	80038b2 <xmit_datablock+0x6c>

	xchg_spi(token);					/* Send token */
 8003866:	1cfb      	adds	r3, r7, #3
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	0018      	movs	r0, r3
 800386c:	f7ff ff20 	bl	80036b0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003870:	1cfb      	adds	r3, r7, #3
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2bfd      	cmp	r3, #253	; 0xfd
 8003876:	d01b      	beq.n	80038b0 <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	009a      	lsls	r2, r3, #2
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	0011      	movs	r1, r2
 8003880:	0018      	movs	r0, r3
 8003882:	f7ff ff49 	bl	8003718 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003886:	20ff      	movs	r0, #255	; 0xff
 8003888:	f7ff ff12 	bl	80036b0 <xchg_spi>
 800388c:	20ff      	movs	r0, #255	; 0xff
 800388e:	f7ff ff0f 	bl	80036b0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003892:	250f      	movs	r5, #15
 8003894:	197c      	adds	r4, r7, r5
 8003896:	20ff      	movs	r0, #255	; 0xff
 8003898:	f7ff ff0a 	bl	80036b0 <xchg_spi>
 800389c:	0003      	movs	r3, r0
 800389e:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80038a0:	197b      	adds	r3, r7, r5
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	221f      	movs	r2, #31
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b05      	cmp	r3, #5
 80038aa:	d001      	beq.n	80038b0 <xmit_datablock+0x6a>
 80038ac:	2300      	movs	r3, #0
 80038ae:	e000      	b.n	80038b2 <xmit_datablock+0x6c>
	}
	return 1;
 80038b0:	2301      	movs	r3, #1
}
 80038b2:	0018      	movs	r0, r3
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b004      	add	sp, #16
 80038b8:	bdb0      	pop	{r4, r5, r7, pc}

080038ba <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80038ba:	b5b0      	push	{r4, r5, r7, lr}
 80038bc:	b084      	sub	sp, #16
 80038be:	af00      	add	r7, sp, #0
 80038c0:	0002      	movs	r2, r0
 80038c2:	6039      	str	r1, [r7, #0]
 80038c4:	1dfb      	adds	r3, r7, #7
 80038c6:	701a      	strb	r2, [r3, #0]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80038c8:	1dfb      	adds	r3, r7, #7
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	b25b      	sxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	da15      	bge.n	80038fe <send_cmd+0x44>
		cmd &= 0x7F;
 80038d2:	1dfb      	adds	r3, r7, #7
 80038d4:	1dfa      	adds	r2, r7, #7
 80038d6:	7812      	ldrb	r2, [r2, #0]
 80038d8:	217f      	movs	r1, #127	; 0x7f
 80038da:	400a      	ands	r2, r1
 80038dc:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 80038de:	250e      	movs	r5, #14
 80038e0:	197c      	adds	r4, r7, r5
 80038e2:	2100      	movs	r1, #0
 80038e4:	2037      	movs	r0, #55	; 0x37
 80038e6:	f7ff ffe8 	bl	80038ba <send_cmd>
 80038ea:	0003      	movs	r3, r0
 80038ec:	7023      	strb	r3, [r4, #0]
		if (res > 1) return res;
 80038ee:	002a      	movs	r2, r5
 80038f0:	18bb      	adds	r3, r7, r2
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d902      	bls.n	80038fe <send_cmd+0x44>
 80038f8:	18bb      	adds	r3, r7, r2
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	e067      	b.n	80039ce <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80038fe:	1dfb      	adds	r3, r7, #7
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b0c      	cmp	r3, #12
 8003904:	d007      	beq.n	8003916 <send_cmd+0x5c>
		despiselect();
 8003906:	f7ff ff43 	bl	8003790 <despiselect>
		if (!spiselect()) return 0xFF;
 800390a:	f7ff ff51 	bl	80037b0 <spiselect>
 800390e:	1e03      	subs	r3, r0, #0
 8003910:	d101      	bne.n	8003916 <send_cmd+0x5c>
 8003912:	23ff      	movs	r3, #255	; 0xff
 8003914:	e05b      	b.n	80039ce <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003916:	1dfb      	adds	r3, r7, #7
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2240      	movs	r2, #64	; 0x40
 800391c:	4313      	orrs	r3, r2
 800391e:	b2db      	uxtb	r3, r3
 8003920:	0018      	movs	r0, r3
 8003922:	f7ff fec5 	bl	80036b0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	0e1b      	lsrs	r3, r3, #24
 800392a:	b2db      	uxtb	r3, r3
 800392c:	0018      	movs	r0, r3
 800392e:	f7ff febf 	bl	80036b0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	b2db      	uxtb	r3, r3
 8003938:	0018      	movs	r0, r3
 800393a:	f7ff feb9 	bl	80036b0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	0a1b      	lsrs	r3, r3, #8
 8003942:	b2db      	uxtb	r3, r3
 8003944:	0018      	movs	r0, r3
 8003946:	f7ff feb3 	bl	80036b0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	0018      	movs	r0, r3
 8003950:	f7ff feae 	bl	80036b0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003954:	210f      	movs	r1, #15
 8003956:	187b      	adds	r3, r7, r1
 8003958:	2201      	movs	r2, #1
 800395a:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800395c:	1dfb      	adds	r3, r7, #7
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d102      	bne.n	800396a <send_cmd+0xb0>
 8003964:	187b      	adds	r3, r7, r1
 8003966:	2295      	movs	r2, #149	; 0x95
 8003968:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800396a:	1dfb      	adds	r3, r7, #7
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b08      	cmp	r3, #8
 8003970:	d103      	bne.n	800397a <send_cmd+0xc0>
 8003972:	230f      	movs	r3, #15
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	2287      	movs	r2, #135	; 0x87
 8003978:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 800397a:	230f      	movs	r3, #15
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	0018      	movs	r0, r3
 8003982:	f7ff fe95 	bl	80036b0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003986:	1dfb      	adds	r3, r7, #7
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b0c      	cmp	r3, #12
 800398c:	d102      	bne.n	8003994 <send_cmd+0xda>
 800398e:	20ff      	movs	r0, #255	; 0xff
 8003990:	f7ff fe8e 	bl	80036b0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003994:	230f      	movs	r3, #15
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	220a      	movs	r2, #10
 800399a:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 800399c:	250e      	movs	r5, #14
 800399e:	197c      	adds	r4, r7, r5
 80039a0:	20ff      	movs	r0, #255	; 0xff
 80039a2:	f7ff fe85 	bl	80036b0 <xchg_spi>
 80039a6:	0003      	movs	r3, r0
 80039a8:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 80039aa:	197b      	adds	r3, r7, r5
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	b25b      	sxtb	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	da09      	bge.n	80039c8 <send_cmd+0x10e>
 80039b4:	210f      	movs	r1, #15
 80039b6:	187b      	adds	r3, r7, r1
 80039b8:	187a      	adds	r2, r7, r1
 80039ba:	7812      	ldrb	r2, [r2, #0]
 80039bc:	3a01      	subs	r2, #1
 80039be:	701a      	strb	r2, [r3, #0]
 80039c0:	187b      	adds	r3, r7, r1
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e9      	bne.n	800399c <send_cmd+0xe2>

	return res;							/* Return received response */
 80039c8:	230e      	movs	r3, #14
 80039ca:	18fb      	adds	r3, r7, r3
 80039cc:	781b      	ldrb	r3, [r3, #0]
}
 80039ce:	0018      	movs	r0, r3
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b004      	add	sp, #16
 80039d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080039d8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80039d8:	b5b0      	push	{r4, r5, r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	0002      	movs	r2, r0
 80039e0:	1dfb      	adds	r3, r7, #7
 80039e2:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80039e4:	1dfb      	adds	r3, r7, #7
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <USER_SPI_initialize+0x18>
 80039ec:	2301      	movs	r3, #1
 80039ee:	e100      	b.n	8003bf2 <USER_SPI_initialize+0x21a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80039f0:	4b82      	ldr	r3, [pc, #520]	; (8003bfc <USER_SPI_initialize+0x224>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	001a      	movs	r2, r3
 80039f8:	2302      	movs	r3, #2
 80039fa:	4013      	ands	r3, r2
 80039fc:	d003      	beq.n	8003a06 <USER_SPI_initialize+0x2e>
 80039fe:	4b7f      	ldr	r3, [pc, #508]	; (8003bfc <USER_SPI_initialize+0x224>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	e0f5      	b.n	8003bf2 <USER_SPI_initialize+0x21a>

	FCLK_SLOW();
 8003a06:	4b7e      	ldr	r3, [pc, #504]	; (8003c00 <USER_SPI_initialize+0x228>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2238      	movs	r2, #56	; 0x38
 8003a0e:	4393      	bics	r3, r2
 8003a10:	001a      	movs	r2, r3
 8003a12:	4b7b      	ldr	r3, [pc, #492]	; (8003c00 <USER_SPI_initialize+0x228>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2130      	movs	r1, #48	; 0x30
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003a1c:	230f      	movs	r3, #15
 8003a1e:	18fb      	adds	r3, r7, r3
 8003a20:	220a      	movs	r2, #10
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	e008      	b.n	8003a38 <USER_SPI_initialize+0x60>
 8003a26:	20ff      	movs	r0, #255	; 0xff
 8003a28:	f7ff fe42 	bl	80036b0 <xchg_spi>
 8003a2c:	210f      	movs	r1, #15
 8003a2e:	187b      	adds	r3, r7, r1
 8003a30:	781a      	ldrb	r2, [r3, #0]
 8003a32:	187b      	adds	r3, r7, r1
 8003a34:	3a01      	subs	r2, #1
 8003a36:	701a      	strb	r2, [r3, #0]
 8003a38:	240f      	movs	r4, #15
 8003a3a:	193b      	adds	r3, r7, r4
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f1      	bne.n	8003a26 <USER_SPI_initialize+0x4e>

	ty = 0;
 8003a42:	230d      	movs	r3, #13
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	2200      	movs	r2, #0
 8003a48:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	f7ff ff34 	bl	80038ba <send_cmd>
 8003a52:	0003      	movs	r3, r0
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d000      	beq.n	8003a5a <USER_SPI_initialize+0x82>
 8003a58:	e0a6      	b.n	8003ba8 <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003a5a:	23fa      	movs	r3, #250	; 0xfa
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f7ff fdfc 	bl	800365c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003a64:	23d5      	movs	r3, #213	; 0xd5
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	0019      	movs	r1, r3
 8003a6a:	2008      	movs	r0, #8
 8003a6c:	f7ff ff25 	bl	80038ba <send_cmd>
 8003a70:	0003      	movs	r3, r0
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d162      	bne.n	8003b3c <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003a76:	193b      	adds	r3, r7, r4
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	e00f      	b.n	8003a9e <USER_SPI_initialize+0xc6>
 8003a7e:	250f      	movs	r5, #15
 8003a80:	197b      	adds	r3, r7, r5
 8003a82:	781c      	ldrb	r4, [r3, #0]
 8003a84:	20ff      	movs	r0, #255	; 0xff
 8003a86:	f7ff fe13 	bl	80036b0 <xchg_spi>
 8003a8a:	0003      	movs	r3, r0
 8003a8c:	001a      	movs	r2, r3
 8003a8e:	2308      	movs	r3, #8
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	551a      	strb	r2, [r3, r4]
 8003a94:	197b      	adds	r3, r7, r5
 8003a96:	781a      	ldrb	r2, [r3, #0]
 8003a98:	197b      	adds	r3, r7, r5
 8003a9a:	3201      	adds	r2, #1
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	230f      	movs	r3, #15
 8003aa0:	18fb      	adds	r3, r7, r3
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d9ea      	bls.n	8003a7e <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	18bb      	adds	r3, r7, r2
 8003aac:	789b      	ldrb	r3, [r3, #2]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d000      	beq.n	8003ab4 <USER_SPI_initialize+0xdc>
 8003ab2:	e079      	b.n	8003ba8 <USER_SPI_initialize+0x1d0>
 8003ab4:	18bb      	adds	r3, r7, r2
 8003ab6:	78db      	ldrb	r3, [r3, #3]
 8003ab8:	2baa      	cmp	r3, #170	; 0xaa
 8003aba:	d000      	beq.n	8003abe <USER_SPI_initialize+0xe6>
 8003abc:	e074      	b.n	8003ba8 <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	f7ff fde0 	bl	8003684 <SPI_Timer_Status>
 8003ac4:	1e03      	subs	r3, r0, #0
 8003ac6:	d007      	beq.n	8003ad8 <USER_SPI_initialize+0x100>
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	05db      	lsls	r3, r3, #23
 8003acc:	0019      	movs	r1, r3
 8003ace:	20a9      	movs	r0, #169	; 0xa9
 8003ad0:	f7ff fef3 	bl	80038ba <send_cmd>
 8003ad4:	1e03      	subs	r3, r0, #0
 8003ad6:	d1f3      	bne.n	8003ac0 <USER_SPI_initialize+0xe8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003ad8:	f7ff fdd4 	bl	8003684 <SPI_Timer_Status>
 8003adc:	1e03      	subs	r3, r0, #0
 8003ade:	d063      	beq.n	8003ba8 <USER_SPI_initialize+0x1d0>
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	203a      	movs	r0, #58	; 0x3a
 8003ae4:	f7ff fee9 	bl	80038ba <send_cmd>
 8003ae8:	1e03      	subs	r3, r0, #0
 8003aea:	d15d      	bne.n	8003ba8 <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003aec:	230f      	movs	r3, #15
 8003aee:	18fb      	adds	r3, r7, r3
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
 8003af4:	e00f      	b.n	8003b16 <USER_SPI_initialize+0x13e>
 8003af6:	250f      	movs	r5, #15
 8003af8:	197b      	adds	r3, r7, r5
 8003afa:	781c      	ldrb	r4, [r3, #0]
 8003afc:	20ff      	movs	r0, #255	; 0xff
 8003afe:	f7ff fdd7 	bl	80036b0 <xchg_spi>
 8003b02:	0003      	movs	r3, r0
 8003b04:	001a      	movs	r2, r3
 8003b06:	2308      	movs	r3, #8
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	551a      	strb	r2, [r3, r4]
 8003b0c:	197b      	adds	r3, r7, r5
 8003b0e:	781a      	ldrb	r2, [r3, #0]
 8003b10:	197b      	adds	r3, r7, r5
 8003b12:	3201      	adds	r2, #1
 8003b14:	701a      	strb	r2, [r3, #0]
 8003b16:	230f      	movs	r3, #15
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d9ea      	bls.n	8003af6 <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003b20:	2308      	movs	r3, #8
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	001a      	movs	r2, r3
 8003b28:	2340      	movs	r3, #64	; 0x40
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d001      	beq.n	8003b32 <USER_SPI_initialize+0x15a>
 8003b2e:	220c      	movs	r2, #12
 8003b30:	e000      	b.n	8003b34 <USER_SPI_initialize+0x15c>
 8003b32:	2204      	movs	r2, #4
 8003b34:	230d      	movs	r3, #13
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	e035      	b.n	8003ba8 <USER_SPI_initialize+0x1d0>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	20a9      	movs	r0, #169	; 0xa9
 8003b40:	f7ff febb 	bl	80038ba <send_cmd>
 8003b44:	0003      	movs	r3, r0
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d808      	bhi.n	8003b5c <USER_SPI_initialize+0x184>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003b4a:	230d      	movs	r3, #13
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	2202      	movs	r2, #2
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	230e      	movs	r3, #14
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	22a9      	movs	r2, #169	; 0xa9
 8003b58:	701a      	strb	r2, [r3, #0]
 8003b5a:	e007      	b.n	8003b6c <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003b5c:	230d      	movs	r3, #13
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	2201      	movs	r2, #1
 8003b62:	701a      	strb	r2, [r3, #0]
 8003b64:	230e      	movs	r3, #14
 8003b66:	18fb      	adds	r3, r7, r3
 8003b68:	2201      	movs	r2, #1
 8003b6a:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	f7ff fd89 	bl	8003684 <SPI_Timer_Status>
 8003b72:	1e03      	subs	r3, r0, #0
 8003b74:	d008      	beq.n	8003b88 <USER_SPI_initialize+0x1b0>
 8003b76:	230e      	movs	r3, #14
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f7ff fe9b 	bl	80038ba <send_cmd>
 8003b84:	1e03      	subs	r3, r0, #0
 8003b86:	d1f2      	bne.n	8003b6e <USER_SPI_initialize+0x196>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003b88:	f7ff fd7c 	bl	8003684 <SPI_Timer_Status>
 8003b8c:	1e03      	subs	r3, r0, #0
 8003b8e:	d007      	beq.n	8003ba0 <USER_SPI_initialize+0x1c8>
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	0019      	movs	r1, r3
 8003b96:	2010      	movs	r0, #16
 8003b98:	f7ff fe8f 	bl	80038ba <send_cmd>
 8003b9c:	1e03      	subs	r3, r0, #0
 8003b9e:	d003      	beq.n	8003ba8 <USER_SPI_initialize+0x1d0>
				ty = 0;
 8003ba0:	230d      	movs	r3, #13
 8003ba2:	18fb      	adds	r3, r7, r3
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty;	/* Card type */
 8003ba8:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <USER_SPI_initialize+0x22c>)
 8003baa:	240d      	movs	r4, #13
 8003bac:	193a      	adds	r2, r7, r4
 8003bae:	7812      	ldrb	r2, [r2, #0]
 8003bb0:	701a      	strb	r2, [r3, #0]
	despiselect();
 8003bb2:	f7ff fded 	bl	8003790 <despiselect>

	if (ty) {			/* OK */
 8003bb6:	193b      	adds	r3, r7, r4
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d013      	beq.n	8003be6 <USER_SPI_initialize+0x20e>
		FCLK_FAST();			/* Set fast clock */
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <USER_SPI_initialize+0x228>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2238      	movs	r2, #56	; 0x38
 8003bc6:	4393      	bics	r3, r2
 8003bc8:	001a      	movs	r2, r3
 8003bca:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <USER_SPI_initialize+0x228>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2110      	movs	r1, #16
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003bd4:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <USER_SPI_initialize+0x224>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2201      	movs	r2, #1
 8003bdc:	4393      	bics	r3, r2
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <USER_SPI_initialize+0x224>)
 8003be2:	701a      	strb	r2, [r3, #0]
 8003be4:	e002      	b.n	8003bec <USER_SPI_initialize+0x214>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <USER_SPI_initialize+0x224>)
 8003be8:	2201      	movs	r2, #1
 8003bea:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <USER_SPI_initialize+0x224>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	b2db      	uxtb	r3, r3
}
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b004      	add	sp, #16
 8003bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	20000020 	.word	0x20000020
 8003c00:	2000004c 	.word	0x2000004c
 8003c04:	20000608 	.word	0x20000608

08003c08 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	0002      	movs	r2, r0
 8003c10:	1dfb      	adds	r3, r7, #7
 8003c12:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003c14:	1dfb      	adds	r3, r7, #7
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <USER_SPI_status+0x18>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e002      	b.n	8003c26 <USER_SPI_status+0x1e>

	return Stat;	/* Return disk status */
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <USER_SPI_status+0x28>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	b2db      	uxtb	r3, r3
}
 8003c26:	0018      	movs	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b002      	add	sp, #8
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	20000020 	.word	0x20000020

08003c34 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	210f      	movs	r1, #15
 8003c42:	187b      	adds	r3, r7, r1
 8003c44:	1c02      	adds	r2, r0, #0
 8003c46:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003c48:	187b      	adds	r3, r7, r1
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d102      	bne.n	8003c56 <USER_SPI_read+0x22>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <USER_SPI_read+0x26>
 8003c56:	2304      	movs	r3, #4
 8003c58:	e04f      	b.n	8003cfa <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003c5a:	4b2a      	ldr	r3, [pc, #168]	; (8003d04 <USER_SPI_read+0xd0>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	001a      	movs	r2, r3
 8003c62:	2301      	movs	r3, #1
 8003c64:	4013      	ands	r3, r2
 8003c66:	d001      	beq.n	8003c6c <USER_SPI_read+0x38>
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e046      	b.n	8003cfa <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003c6c:	4b26      	ldr	r3, [pc, #152]	; (8003d08 <USER_SPI_read+0xd4>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	001a      	movs	r2, r3
 8003c72:	2308      	movs	r3, #8
 8003c74:	4013      	ands	r3, r2
 8003c76:	d102      	bne.n	8003c7e <USER_SPI_read+0x4a>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	025b      	lsls	r3, r3, #9
 8003c7c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d112      	bne.n	8003caa <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	0019      	movs	r1, r3
 8003c88:	2011      	movs	r0, #17
 8003c8a:	f7ff fe16 	bl	80038ba <send_cmd>
 8003c8e:	1e03      	subs	r3, r0, #0
 8003c90:	d12d      	bne.n	8003cee <USER_SPI_read+0xba>
			&& rcvr_datablock(buff, 512)) {
 8003c92:	2380      	movs	r3, #128	; 0x80
 8003c94:	009a      	lsls	r2, r3, #2
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	0011      	movs	r1, r2
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f7ff fda4 	bl	80037e8 <rcvr_datablock>
 8003ca0:	1e03      	subs	r3, r0, #0
 8003ca2:	d024      	beq.n	8003cee <USER_SPI_read+0xba>
			count = 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	e021      	b.n	8003cee <USER_SPI_read+0xba>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	0019      	movs	r1, r3
 8003cae:	2012      	movs	r0, #18
 8003cb0:	f7ff fe03 	bl	80038ba <send_cmd>
 8003cb4:	1e03      	subs	r3, r0, #0
 8003cb6:	d11a      	bne.n	8003cee <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003cb8:	2380      	movs	r3, #128	; 0x80
 8003cba:	009a      	lsls	r2, r3, #2
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	0011      	movs	r1, r2
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f7ff fd91 	bl	80037e8 <rcvr_datablock>
 8003cc6:	1e03      	subs	r3, r0, #0
 8003cc8:	d00c      	beq.n	8003ce4 <USER_SPI_read+0xb0>
				buff += 512;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2280      	movs	r2, #128	; 0x80
 8003cce:	0092      	lsls	r2, r2, #2
 8003cd0:	4694      	mov	ip, r2
 8003cd2:	4463      	add	r3, ip
 8003cd4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1ea      	bne.n	8003cb8 <USER_SPI_read+0x84>
 8003ce2:	e000      	b.n	8003ce6 <USER_SPI_read+0xb2>
				if (!rcvr_datablock(buff, 512)) break;
 8003ce4:	46c0      	nop			; (mov r8, r8)
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	200c      	movs	r0, #12
 8003cea:	f7ff fde6 	bl	80038ba <send_cmd>
		}
	}
	despiselect();
 8003cee:	f7ff fd4f 	bl	8003790 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	1e5a      	subs	r2, r3, #1
 8003cf6:	4193      	sbcs	r3, r2
 8003cf8:	b2db      	uxtb	r3, r3
}
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b004      	add	sp, #16
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	20000020 	.word	0x20000020
 8003d08:	20000608 	.word	0x20000608

08003d0c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	607a      	str	r2, [r7, #4]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	210f      	movs	r1, #15
 8003d1a:	187b      	adds	r3, r7, r1
 8003d1c:	1c02      	adds	r2, r0, #0
 8003d1e:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003d20:	187b      	adds	r3, r7, r1
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d102      	bne.n	8003d2e <USER_SPI_write+0x22>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <USER_SPI_write+0x26>
 8003d2e:	2304      	movs	r3, #4
 8003d30:	e063      	b.n	8003dfa <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003d32:	4b34      	ldr	r3, [pc, #208]	; (8003e04 <USER_SPI_write+0xf8>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	001a      	movs	r2, r3
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d001      	beq.n	8003d44 <USER_SPI_write+0x38>
 8003d40:	2303      	movs	r3, #3
 8003d42:	e05a      	b.n	8003dfa <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003d44:	4b2f      	ldr	r3, [pc, #188]	; (8003e04 <USER_SPI_write+0xf8>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	001a      	movs	r2, r3
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d001      	beq.n	8003d56 <USER_SPI_write+0x4a>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e051      	b.n	8003dfa <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003d56:	4b2c      	ldr	r3, [pc, #176]	; (8003e08 <USER_SPI_write+0xfc>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	001a      	movs	r2, r3
 8003d5c:	2308      	movs	r3, #8
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d102      	bne.n	8003d68 <USER_SPI_write+0x5c>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	025b      	lsls	r3, r3, #9
 8003d66:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d110      	bne.n	8003d90 <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	0019      	movs	r1, r3
 8003d72:	2018      	movs	r0, #24
 8003d74:	f7ff fda1 	bl	80038ba <send_cmd>
 8003d78:	1e03      	subs	r3, r0, #0
 8003d7a:	d138      	bne.n	8003dee <USER_SPI_write+0xe2>
			&& xmit_datablock(buff, 0xFE)) {
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	21fe      	movs	r1, #254	; 0xfe
 8003d80:	0018      	movs	r0, r3
 8003d82:	f7ff fd60 	bl	8003846 <xmit_datablock>
 8003d86:	1e03      	subs	r3, r0, #0
 8003d88:	d031      	beq.n	8003dee <USER_SPI_write+0xe2>
			count = 0;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	e02e      	b.n	8003dee <USER_SPI_write+0xe2>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003d90:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <USER_SPI_write+0xfc>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	001a      	movs	r2, r3
 8003d96:	2306      	movs	r3, #6
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d004      	beq.n	8003da6 <USER_SPI_write+0x9a>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	0019      	movs	r1, r3
 8003da0:	2097      	movs	r0, #151	; 0x97
 8003da2:	f7ff fd8a 	bl	80038ba <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	0019      	movs	r1, r3
 8003daa:	2019      	movs	r0, #25
 8003dac:	f7ff fd85 	bl	80038ba <send_cmd>
 8003db0:	1e03      	subs	r3, r0, #0
 8003db2:	d11c      	bne.n	8003dee <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	21fc      	movs	r1, #252	; 0xfc
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7ff fd44 	bl	8003846 <xmit_datablock>
 8003dbe:	1e03      	subs	r3, r0, #0
 8003dc0:	d00c      	beq.n	8003ddc <USER_SPI_write+0xd0>
				buff += 512;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2280      	movs	r2, #128	; 0x80
 8003dc6:	0092      	lsls	r2, r2, #2
 8003dc8:	4694      	mov	ip, r2
 8003dca:	4463      	add	r3, ip
 8003dcc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1ec      	bne.n	8003db4 <USER_SPI_write+0xa8>
 8003dda:	e000      	b.n	8003dde <USER_SPI_write+0xd2>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003ddc:	46c0      	nop			; (mov r8, r8)
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003dde:	21fd      	movs	r1, #253	; 0xfd
 8003de0:	2000      	movs	r0, #0
 8003de2:	f7ff fd30 	bl	8003846 <xmit_datablock>
 8003de6:	1e03      	subs	r3, r0, #0
 8003de8:	d101      	bne.n	8003dee <USER_SPI_write+0xe2>
 8003dea:	2301      	movs	r3, #1
 8003dec:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003dee:	f7ff fccf 	bl	8003790 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	1e5a      	subs	r2, r3, #1
 8003df6:	4193      	sbcs	r3, r2
 8003df8:	b2db      	uxtb	r3, r3
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b004      	add	sp, #16
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	20000020 	.word	0x20000020
 8003e08:	20000608 	.word	0x20000608

08003e0c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003e0c:	b590      	push	{r4, r7, lr}
 8003e0e:	b08d      	sub	sp, #52	; 0x34
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	603a      	str	r2, [r7, #0]
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	1c02      	adds	r2, r0, #0
 8003e18:	701a      	strb	r2, [r3, #0]
 8003e1a:	1dbb      	adds	r3, r7, #6
 8003e1c:	1c0a      	adds	r2, r1, #0
 8003e1e:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003e20:	1dfb      	adds	r3, r7, #7
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <USER_SPI_ioctl+0x20>
 8003e28:	2304      	movs	r3, #4
 8003e2a:	e178      	b.n	800411e <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003e2c:	4bbe      	ldr	r3, [pc, #760]	; (8004128 <USER_SPI_ioctl+0x31c>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	001a      	movs	r2, r3
 8003e34:	2301      	movs	r3, #1
 8003e36:	4013      	ands	r3, r2
 8003e38:	d001      	beq.n	8003e3e <USER_SPI_ioctl+0x32>
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e16f      	b.n	800411e <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 8003e3e:	232f      	movs	r3, #47	; 0x2f
 8003e40:	18fb      	adds	r3, r7, r3
 8003e42:	2201      	movs	r2, #1
 8003e44:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 8003e46:	1dbb      	adds	r3, r7, #6
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d100      	bne.n	8003e50 <USER_SPI_ioctl+0x44>
 8003e4e:	e100      	b.n	8004052 <USER_SPI_ioctl+0x246>
 8003e50:	dd00      	ble.n	8003e54 <USER_SPI_ioctl+0x48>
 8003e52:	e14d      	b.n	80040f0 <USER_SPI_ioctl+0x2e4>
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d100      	bne.n	8003e5a <USER_SPI_ioctl+0x4e>
 8003e58:	e074      	b.n	8003f44 <USER_SPI_ioctl+0x138>
 8003e5a:	dd00      	ble.n	8003e5e <USER_SPI_ioctl+0x52>
 8003e5c:	e148      	b.n	80040f0 <USER_SPI_ioctl+0x2e4>
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <USER_SPI_ioctl+0x5c>
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d00a      	beq.n	8003e7c <USER_SPI_ioctl+0x70>
 8003e66:	e143      	b.n	80040f0 <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003e68:	f7ff fca2 	bl	80037b0 <spiselect>
 8003e6c:	1e03      	subs	r3, r0, #0
 8003e6e:	d100      	bne.n	8003e72 <USER_SPI_ioctl+0x66>
 8003e70:	e143      	b.n	80040fa <USER_SPI_ioctl+0x2ee>
 8003e72:	232f      	movs	r3, #47	; 0x2f
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	2200      	movs	r2, #0
 8003e78:	701a      	strb	r2, [r3, #0]
		break;
 8003e7a:	e13e      	b.n	80040fa <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	2009      	movs	r0, #9
 8003e80:	f7ff fd1b 	bl	80038ba <send_cmd>
 8003e84:	1e03      	subs	r3, r0, #0
 8003e86:	d000      	beq.n	8003e8a <USER_SPI_ioctl+0x7e>
 8003e88:	e139      	b.n	80040fe <USER_SPI_ioctl+0x2f2>
 8003e8a:	240c      	movs	r4, #12
 8003e8c:	193b      	adds	r3, r7, r4
 8003e8e:	2110      	movs	r1, #16
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7ff fca9 	bl	80037e8 <rcvr_datablock>
 8003e96:	1e03      	subs	r3, r0, #0
 8003e98:	d100      	bne.n	8003e9c <USER_SPI_ioctl+0x90>
 8003e9a:	e130      	b.n	80040fe <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003e9c:	0020      	movs	r0, r4
 8003e9e:	183b      	adds	r3, r7, r0
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	099b      	lsrs	r3, r3, #6
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d115      	bne.n	8003ed6 <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003eaa:	183b      	adds	r3, r7, r0
 8003eac:	7a5b      	ldrb	r3, [r3, #9]
 8003eae:	001a      	movs	r2, r3
 8003eb0:	183b      	adds	r3, r7, r0
 8003eb2:	7a1b      	ldrb	r3, [r3, #8]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	18d3      	adds	r3, r2, r3
 8003eb8:	0019      	movs	r1, r3
 8003eba:	183b      	adds	r3, r7, r0
 8003ebc:	79db      	ldrb	r3, [r3, #7]
 8003ebe:	041a      	lsls	r2, r3, #16
 8003ec0:	23fc      	movs	r3, #252	; 0xfc
 8003ec2:	039b      	lsls	r3, r3, #14
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	18cb      	adds	r3, r1, r3
 8003ec8:	3301      	adds	r3, #1
 8003eca:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	029a      	lsls	r2, r3, #10
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	e031      	b.n	8003f3a <USER_SPI_ioctl+0x12e>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003ed6:	200c      	movs	r0, #12
 8003ed8:	183b      	adds	r3, r7, r0
 8003eda:	795b      	ldrb	r3, [r3, #5]
 8003edc:	220f      	movs	r2, #15
 8003ede:	4013      	ands	r3, r2
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	183b      	adds	r3, r7, r0
 8003ee4:	7a9b      	ldrb	r3, [r3, #10]
 8003ee6:	09db      	lsrs	r3, r3, #7
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	18d3      	adds	r3, r2, r3
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	183b      	adds	r3, r7, r0
 8003ef0:	7a5b      	ldrb	r3, [r3, #9]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2106      	movs	r1, #6
 8003ef8:	400b      	ands	r3, r1
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	18d3      	adds	r3, r2, r3
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	242e      	movs	r4, #46	; 0x2e
 8003f02:	193b      	adds	r3, r7, r4
 8003f04:	3202      	adds	r2, #2
 8003f06:	701a      	strb	r2, [r3, #0]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003f08:	183b      	adds	r3, r7, r0
 8003f0a:	7a1b      	ldrb	r3, [r3, #8]
 8003f0c:	099b      	lsrs	r3, r3, #6
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	001a      	movs	r2, r3
 8003f12:	183b      	adds	r3, r7, r0
 8003f14:	79db      	ldrb	r3, [r3, #7]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	18d2      	adds	r2, r2, r3
 8003f1a:	183b      	adds	r3, r7, r0
 8003f1c:	799b      	ldrb	r3, [r3, #6]
 8003f1e:	0299      	lsls	r1, r3, #10
 8003f20:	23c0      	movs	r3, #192	; 0xc0
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	400b      	ands	r3, r1
 8003f26:	18d3      	adds	r3, r2, r3
 8003f28:	3301      	adds	r3, #1
 8003f2a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003f2c:	193b      	adds	r3, r7, r4
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	3b09      	subs	r3, #9
 8003f32:	69fa      	ldr	r2, [r7, #28]
 8003f34:	409a      	lsls	r2, r3
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003f3a:	232f      	movs	r3, #47	; 0x2f
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	2200      	movs	r2, #0
 8003f40:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003f42:	e0dc      	b.n	80040fe <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003f44:	4b79      	ldr	r3, [pc, #484]	; (800412c <USER_SPI_ioctl+0x320>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	001a      	movs	r2, r3
 8003f4a:	2304      	movs	r3, #4
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d035      	beq.n	8003fbc <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003f50:	2100      	movs	r1, #0
 8003f52:	208d      	movs	r0, #141	; 0x8d
 8003f54:	f7ff fcb1 	bl	80038ba <send_cmd>
 8003f58:	1e03      	subs	r3, r0, #0
 8003f5a:	d000      	beq.n	8003f5e <USER_SPI_ioctl+0x152>
 8003f5c:	e0d1      	b.n	8004102 <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 8003f5e:	20ff      	movs	r0, #255	; 0xff
 8003f60:	f7ff fba6 	bl	80036b0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003f64:	230c      	movs	r3, #12
 8003f66:	18fb      	adds	r3, r7, r3
 8003f68:	2110      	movs	r1, #16
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f7ff fc3c 	bl	80037e8 <rcvr_datablock>
 8003f70:	1e03      	subs	r3, r0, #0
 8003f72:	d100      	bne.n	8003f76 <USER_SPI_ioctl+0x16a>
 8003f74:	e0c5      	b.n	8004102 <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003f76:	232e      	movs	r3, #46	; 0x2e
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	2230      	movs	r2, #48	; 0x30
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	e008      	b.n	8003f92 <USER_SPI_ioctl+0x186>
 8003f80:	20ff      	movs	r0, #255	; 0xff
 8003f82:	f7ff fb95 	bl	80036b0 <xchg_spi>
 8003f86:	212e      	movs	r1, #46	; 0x2e
 8003f88:	187b      	adds	r3, r7, r1
 8003f8a:	781a      	ldrb	r2, [r3, #0]
 8003f8c:	187b      	adds	r3, r7, r1
 8003f8e:	3a01      	subs	r2, #1
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	232e      	movs	r3, #46	; 0x2e
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f1      	bne.n	8003f80 <USER_SPI_ioctl+0x174>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003f9c:	230c      	movs	r3, #12
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	7a9b      	ldrb	r3, [r3, #10]
 8003fa2:	091b      	lsrs	r3, r3, #4
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	001a      	movs	r2, r3
 8003fa8:	2310      	movs	r3, #16
 8003faa:	4093      	lsls	r3, r2
 8003fac:	001a      	movs	r2, r3
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8003fb2:	232f      	movs	r3, #47	; 0x2f
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	701a      	strb	r2, [r3, #0]
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8003fba:	e0a2      	b.n	8004102 <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	2009      	movs	r0, #9
 8003fc0:	f7ff fc7b 	bl	80038ba <send_cmd>
 8003fc4:	1e03      	subs	r3, r0, #0
 8003fc6:	d000      	beq.n	8003fca <USER_SPI_ioctl+0x1be>
 8003fc8:	e09b      	b.n	8004102 <USER_SPI_ioctl+0x2f6>
 8003fca:	240c      	movs	r4, #12
 8003fcc:	193b      	adds	r3, r7, r4
 8003fce:	2110      	movs	r1, #16
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f7ff fc09 	bl	80037e8 <rcvr_datablock>
 8003fd6:	1e03      	subs	r3, r0, #0
 8003fd8:	d100      	bne.n	8003fdc <USER_SPI_ioctl+0x1d0>
 8003fda:	e092      	b.n	8004102 <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003fdc:	4b53      	ldr	r3, [pc, #332]	; (800412c <USER_SPI_ioctl+0x320>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	001a      	movs	r2, r3
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d016      	beq.n	8004016 <USER_SPI_ioctl+0x20a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003fe8:	0021      	movs	r1, r4
 8003fea:	187b      	adds	r3, r7, r1
 8003fec:	7a9b      	ldrb	r3, [r3, #10]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	227e      	movs	r2, #126	; 0x7e
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	187a      	adds	r2, r7, r1
 8003ff6:	7ad2      	ldrb	r2, [r2, #11]
 8003ff8:	09d2      	lsrs	r2, r2, #7
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	189b      	adds	r3, r3, r2
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	187b      	adds	r3, r7, r1
 8004002:	7b5b      	ldrb	r3, [r3, #13]
 8004004:	099b      	lsrs	r3, r3, #6
 8004006:	b2db      	uxtb	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	409a      	lsls	r2, r3
 800400c:	0013      	movs	r3, r2
 800400e:	001a      	movs	r2, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	e018      	b.n	8004048 <USER_SPI_ioctl+0x23c>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004016:	210c      	movs	r1, #12
 8004018:	187b      	adds	r3, r7, r1
 800401a:	7a9b      	ldrb	r3, [r3, #10]
 800401c:	109b      	asrs	r3, r3, #2
 800401e:	b29b      	uxth	r3, r3
 8004020:	001a      	movs	r2, r3
 8004022:	231f      	movs	r3, #31
 8004024:	4013      	ands	r3, r2
 8004026:	3301      	adds	r3, #1
 8004028:	0008      	movs	r0, r1
 800402a:	187a      	adds	r2, r7, r1
 800402c:	7ad2      	ldrb	r2, [r2, #11]
 800402e:	00d2      	lsls	r2, r2, #3
 8004030:	2118      	movs	r1, #24
 8004032:	400a      	ands	r2, r1
 8004034:	1839      	adds	r1, r7, r0
 8004036:	7ac9      	ldrb	r1, [r1, #11]
 8004038:	0949      	lsrs	r1, r1, #5
 800403a:	b2c9      	uxtb	r1, r1
 800403c:	1852      	adds	r2, r2, r1
 800403e:	3201      	adds	r2, #1
 8004040:	4353      	muls	r3, r2
 8004042:	001a      	movs	r2, r3
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004048:	232f      	movs	r3, #47	; 0x2f
 800404a:	18fb      	adds	r3, r7, r3
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
		break;
 8004050:	e057      	b.n	8004102 <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004052:	4b36      	ldr	r3, [pc, #216]	; (800412c <USER_SPI_ioctl+0x320>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	001a      	movs	r2, r3
 8004058:	2306      	movs	r3, #6
 800405a:	4013      	ands	r3, r2
 800405c:	d053      	beq.n	8004106 <USER_SPI_ioctl+0x2fa>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800405e:	240c      	movs	r4, #12
 8004060:	193a      	adds	r2, r7, r4
 8004062:	1dfb      	adds	r3, r7, #7
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	210b      	movs	r1, #11
 8004068:	0018      	movs	r0, r3
 800406a:	f7ff fecf 	bl	8003e0c <USER_SPI_ioctl>
 800406e:	1e03      	subs	r3, r0, #0
 8004070:	d14b      	bne.n	800410a <USER_SPI_ioctl+0x2fe>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004072:	193b      	adds	r3, r7, r4
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	099b      	lsrs	r3, r3, #6
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d105      	bne.n	800408a <USER_SPI_ioctl+0x27e>
 800407e:	193b      	adds	r3, r7, r4
 8004080:	7a9b      	ldrb	r3, [r3, #10]
 8004082:	001a      	movs	r2, r3
 8004084:	2340      	movs	r3, #64	; 0x40
 8004086:	4013      	ands	r3, r2
 8004088:	d041      	beq.n	800410e <USER_SPI_ioctl+0x302>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	623b      	str	r3, [r7, #32]
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	62bb      	str	r3, [r7, #40]	; 0x28
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800409a:	4b24      	ldr	r3, [pc, #144]	; (800412c <USER_SPI_ioctl+0x320>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	001a      	movs	r2, r3
 80040a0:	2308      	movs	r3, #8
 80040a2:	4013      	ands	r3, r2
 80040a4:	d105      	bne.n	80040b2 <USER_SPI_ioctl+0x2a6>
			st *= 512; ed *= 512;
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	025b      	lsls	r3, r3, #9
 80040aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	025b      	lsls	r3, r3, #9
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80040b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b4:	0019      	movs	r1, r3
 80040b6:	2020      	movs	r0, #32
 80040b8:	f7ff fbff 	bl	80038ba <send_cmd>
 80040bc:	1e03      	subs	r3, r0, #0
 80040be:	d128      	bne.n	8004112 <USER_SPI_ioctl+0x306>
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	0019      	movs	r1, r3
 80040c4:	2021      	movs	r0, #33	; 0x21
 80040c6:	f7ff fbf8 	bl	80038ba <send_cmd>
 80040ca:	1e03      	subs	r3, r0, #0
 80040cc:	d121      	bne.n	8004112 <USER_SPI_ioctl+0x306>
 80040ce:	2100      	movs	r1, #0
 80040d0:	2026      	movs	r0, #38	; 0x26
 80040d2:	f7ff fbf2 	bl	80038ba <send_cmd>
 80040d6:	1e03      	subs	r3, r0, #0
 80040d8:	d11b      	bne.n	8004112 <USER_SPI_ioctl+0x306>
 80040da:	4b15      	ldr	r3, [pc, #84]	; (8004130 <USER_SPI_ioctl+0x324>)
 80040dc:	0018      	movs	r0, r3
 80040de:	f7ff fb2f 	bl	8003740 <wait_ready>
 80040e2:	1e03      	subs	r3, r0, #0
 80040e4:	d015      	beq.n	8004112 <USER_SPI_ioctl+0x306>
			res = RES_OK;	/* FatFs does not check result of this command */
 80040e6:	232f      	movs	r3, #47	; 0x2f
 80040e8:	18fb      	adds	r3, r7, r3
 80040ea:	2200      	movs	r2, #0
 80040ec:	701a      	strb	r2, [r3, #0]
		}
		break;
 80040ee:	e010      	b.n	8004112 <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 80040f0:	232f      	movs	r3, #47	; 0x2f
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	2204      	movs	r2, #4
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	e00c      	b.n	8004114 <USER_SPI_ioctl+0x308>
		break;
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	e00a      	b.n	8004114 <USER_SPI_ioctl+0x308>
		break;
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	e008      	b.n	8004114 <USER_SPI_ioctl+0x308>
		break;
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	e006      	b.n	8004114 <USER_SPI_ioctl+0x308>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	e004      	b.n	8004114 <USER_SPI_ioctl+0x308>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	e002      	b.n	8004114 <USER_SPI_ioctl+0x308>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	e000      	b.n	8004114 <USER_SPI_ioctl+0x308>
		break;
 8004112:	46c0      	nop			; (mov r8, r8)
	}

	despiselect();
 8004114:	f7ff fb3c 	bl	8003790 <despiselect>

	return res;
 8004118:	232f      	movs	r3, #47	; 0x2f
 800411a:	18fb      	adds	r3, r7, r3
 800411c:	781b      	ldrb	r3, [r3, #0]
}
 800411e:	0018      	movs	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	b00d      	add	sp, #52	; 0x34
 8004124:	bd90      	pop	{r4, r7, pc}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	20000020 	.word	0x20000020
 800412c:	20000608 	.word	0x20000608
 8004130:	00007530 	.word	0x00007530

08004134 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004134:	b5b0      	push	{r4, r5, r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	0002      	movs	r2, r0
 800413c:	1dfb      	adds	r3, r7, #7
 800413e:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004140:	1dfb      	adds	r3, r7, #7
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	4a0b      	ldr	r2, [pc, #44]	; (8004174 <disk_status+0x40>)
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	18d3      	adds	r3, r2, r3
 800414a:	3304      	adds	r3, #4
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	1dfa      	adds	r2, r7, #7
 8004152:	7812      	ldrb	r2, [r2, #0]
 8004154:	4907      	ldr	r1, [pc, #28]	; (8004174 <disk_status+0x40>)
 8004156:	188a      	adds	r2, r1, r2
 8004158:	7a12      	ldrb	r2, [r2, #8]
 800415a:	250f      	movs	r5, #15
 800415c:	197c      	adds	r4, r7, r5
 800415e:	0010      	movs	r0, r2
 8004160:	4798      	blx	r3
 8004162:	0003      	movs	r3, r0
 8004164:	7023      	strb	r3, [r4, #0]
  return stat;
 8004166:	197b      	adds	r3, r7, r5
 8004168:	781b      	ldrb	r3, [r3, #0]
}
 800416a:	0018      	movs	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	b004      	add	sp, #16
 8004170:	bdb0      	pop	{r4, r5, r7, pc}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	20000634 	.word	0x20000634

08004178 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004178:	b590      	push	{r4, r7, lr}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	0002      	movs	r2, r0
 8004180:	1dfb      	adds	r3, r7, #7
 8004182:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8004184:	200f      	movs	r0, #15
 8004186:	183b      	adds	r3, r7, r0
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
  
  if(disk.is_initialized[pdrv] == 0)
 800418c:	1dfb      	adds	r3, r7, #7
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	4a10      	ldr	r2, [pc, #64]	; (80041d4 <disk_initialize+0x5c>)
 8004192:	5cd3      	ldrb	r3, [r2, r3]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d116      	bne.n	80041c6 <disk_initialize+0x4e>
  { 
    disk.is_initialized[pdrv] = 1;
 8004198:	1dfb      	adds	r3, r7, #7
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	4a0d      	ldr	r2, [pc, #52]	; (80041d4 <disk_initialize+0x5c>)
 800419e:	2101      	movs	r1, #1
 80041a0:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80041a2:	1dfb      	adds	r3, r7, #7
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	4a0b      	ldr	r2, [pc, #44]	; (80041d4 <disk_initialize+0x5c>)
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	18d3      	adds	r3, r2, r3
 80041ac:	3304      	adds	r3, #4
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	1dfa      	adds	r2, r7, #7
 80041b4:	7812      	ldrb	r2, [r2, #0]
 80041b6:	4907      	ldr	r1, [pc, #28]	; (80041d4 <disk_initialize+0x5c>)
 80041b8:	188a      	adds	r2, r1, r2
 80041ba:	7a12      	ldrb	r2, [r2, #8]
 80041bc:	183c      	adds	r4, r7, r0
 80041be:	0010      	movs	r0, r2
 80041c0:	4798      	blx	r3
 80041c2:	0003      	movs	r3, r0
 80041c4:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 80041c6:	230f      	movs	r3, #15
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	781b      	ldrb	r3, [r3, #0]
}
 80041cc:	0018      	movs	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	b005      	add	sp, #20
 80041d2:	bd90      	pop	{r4, r7, pc}
 80041d4:	20000634 	.word	0x20000634

080041d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80041d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	607a      	str	r2, [r7, #4]
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	210f      	movs	r1, #15
 80041e6:	187b      	adds	r3, r7, r1
 80041e8:	1c02      	adds	r2, r0, #0
 80041ea:	701a      	strb	r2, [r3, #0]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80041ec:	187b      	adds	r3, r7, r1
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	4a0c      	ldr	r2, [pc, #48]	; (8004224 <disk_read+0x4c>)
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	18d3      	adds	r3, r2, r3
 80041f6:	3304      	adds	r3, #4
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689d      	ldr	r5, [r3, #8]
 80041fc:	187b      	adds	r3, r7, r1
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	4a08      	ldr	r2, [pc, #32]	; (8004224 <disk_read+0x4c>)
 8004202:	18d3      	adds	r3, r2, r3
 8004204:	7a18      	ldrb	r0, [r3, #8]
 8004206:	2617      	movs	r6, #23
 8004208:	19bc      	adds	r4, r7, r6
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	47a8      	blx	r5
 8004212:	0003      	movs	r3, r0
 8004214:	7023      	strb	r3, [r4, #0]
  return res;
 8004216:	19bb      	adds	r3, r7, r6
 8004218:	781b      	ldrb	r3, [r3, #0]
}
 800421a:	0018      	movs	r0, r3
 800421c:	46bd      	mov	sp, r7
 800421e:	b007      	add	sp, #28
 8004220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	20000634 	.word	0x20000634

08004228 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	210f      	movs	r1, #15
 8004236:	187b      	adds	r3, r7, r1
 8004238:	1c02      	adds	r2, r0, #0
 800423a:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800423c:	187b      	adds	r3, r7, r1
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	4a0c      	ldr	r2, [pc, #48]	; (8004274 <disk_write+0x4c>)
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	18d3      	adds	r3, r2, r3
 8004246:	3304      	adds	r3, #4
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68dd      	ldr	r5, [r3, #12]
 800424c:	187b      	adds	r3, r7, r1
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	4a08      	ldr	r2, [pc, #32]	; (8004274 <disk_write+0x4c>)
 8004252:	18d3      	adds	r3, r2, r3
 8004254:	7a18      	ldrb	r0, [r3, #8]
 8004256:	2617      	movs	r6, #23
 8004258:	19bc      	adds	r4, r7, r6
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	47a8      	blx	r5
 8004262:	0003      	movs	r3, r0
 8004264:	7023      	strb	r3, [r4, #0]
  return res;
 8004266:	19bb      	adds	r3, r7, r6
 8004268:	781b      	ldrb	r3, [r3, #0]
}
 800426a:	0018      	movs	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	b007      	add	sp, #28
 8004270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	20000634 	.word	0x20000634

08004278 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	603a      	str	r2, [r7, #0]
 8004280:	1dfb      	adds	r3, r7, #7
 8004282:	1c02      	adds	r2, r0, #0
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	1dbb      	adds	r3, r7, #6
 8004288:	1c0a      	adds	r2, r1, #0
 800428a:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800428c:	1dfb      	adds	r3, r7, #7
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	4a0c      	ldr	r2, [pc, #48]	; (80042c4 <disk_ioctl+0x4c>)
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	18d3      	adds	r3, r2, r3
 8004296:	3304      	adds	r3, #4
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	1dfa      	adds	r2, r7, #7
 800429e:	7812      	ldrb	r2, [r2, #0]
 80042a0:	4908      	ldr	r1, [pc, #32]	; (80042c4 <disk_ioctl+0x4c>)
 80042a2:	188a      	adds	r2, r1, r2
 80042a4:	7a10      	ldrb	r0, [r2, #8]
 80042a6:	260f      	movs	r6, #15
 80042a8:	19bc      	adds	r4, r7, r6
 80042aa:	683d      	ldr	r5, [r7, #0]
 80042ac:	1dba      	adds	r2, r7, #6
 80042ae:	7811      	ldrb	r1, [r2, #0]
 80042b0:	002a      	movs	r2, r5
 80042b2:	4798      	blx	r3
 80042b4:	0003      	movs	r3, r0
 80042b6:	7023      	strb	r3, [r4, #0]
  return res;
 80042b8:	19bb      	adds	r3, r7, r6
 80042ba:	781b      	ldrb	r3, [r3, #0]
}
 80042bc:	0018      	movs	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	b005      	add	sp, #20
 80042c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c4:	20000634 	.word	0x20000634

080042c8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80042dc:	e007      	b.n	80042ee <mem_cpy+0x26>
		*d++ = *s++;
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	1c53      	adds	r3, r2, #1
 80042e2:	613b      	str	r3, [r7, #16]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	1c59      	adds	r1, r3, #1
 80042e8:	6179      	str	r1, [r7, #20]
 80042ea:	7812      	ldrb	r2, [r2, #0]
 80042ec:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	1e5a      	subs	r2, r3, #1
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f2      	bne.n	80042de <mem_cpy+0x16>
}
 80042f8:	46c0      	nop			; (mov r8, r8)
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b006      	add	sp, #24
 8004300:	bd80      	pop	{r7, pc}

08004302 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004302:	b580      	push	{r7, lr}
 8004304:	b086      	sub	sp, #24
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004312:	e005      	b.n	8004320 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	617a      	str	r2, [r7, #20]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	1e5a      	subs	r2, r3, #1
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f4      	bne.n	8004314 <mem_set+0x12>
}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	46c0      	nop			; (mov r8, r8)
 800432e:	46bd      	mov	sp, r7
 8004330:	b006      	add	sp, #24
 8004332:	bd80      	pop	{r7, pc}

08004334 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	1e5a      	subs	r2, r3, #1
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00d      	beq.n	8004374 <mem_cmp+0x40>
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	61fa      	str	r2, [r7, #28]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	0019      	movs	r1, r3
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	61ba      	str	r2, [r7, #24]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	1acb      	subs	r3, r1, r3
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0ec      	beq.n	800434e <mem_cmp+0x1a>
	return r;
 8004374:	697b      	ldr	r3, [r7, #20]
}
 8004376:	0018      	movs	r0, r3
 8004378:	46bd      	mov	sp, r7
 800437a:	b008      	add	sp, #32
 800437c:	bd80      	pop	{r7, pc}

0800437e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004388:	e002      	b.n	8004390 <chk_chr+0x12>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3301      	adds	r3, #1
 800438e:	607b      	str	r3, [r7, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <chk_chr+0x26>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	001a      	movs	r2, r3
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d1f2      	bne.n	800438a <chk_chr+0xc>
	return *str;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	781b      	ldrb	r3, [r3, #0]
}
 80043a8:	0018      	movs	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	b002      	add	sp, #8
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80043ba:	2300      	movs	r3, #0
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	e038      	b.n	8004436 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80043c4:	492f      	ldr	r1, [pc, #188]	; (8004484 <chk_lock+0xd4>)
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	0013      	movs	r3, r2
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	189b      	adds	r3, r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	585b      	ldr	r3, [r3, r1]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d02a      	beq.n	800442c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80043d6:	492b      	ldr	r1, [pc, #172]	; (8004484 <chk_lock+0xd4>)
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	0013      	movs	r3, r2
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	189b      	adds	r3, r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	585a      	ldr	r2, [r3, r1]
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	58cb      	ldr	r3, [r1, r3]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d11f      	bne.n	8004430 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80043f0:	4924      	ldr	r1, [pc, #144]	; (8004484 <chk_lock+0xd4>)
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	0013      	movs	r3, r2
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	189b      	adds	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	18cb      	adds	r3, r1, r3
 80043fe:	3304      	adds	r3, #4
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	2382      	movs	r3, #130	; 0x82
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	58cb      	ldr	r3, [r1, r3]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800440a:	429a      	cmp	r2, r3
 800440c:	d110      	bne.n	8004430 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800440e:	491d      	ldr	r1, [pc, #116]	; (8004484 <chk_lock+0xd4>)
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	0013      	movs	r3, r2
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	189b      	adds	r3, r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	18cb      	adds	r3, r1, r3
 800441c:	3308      	adds	r3, #8
 800441e:	881a      	ldrh	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4919      	ldr	r1, [pc, #100]	; (8004488 <chk_lock+0xd8>)
 8004424:	5a5b      	ldrh	r3, [r3, r1]
				Files[i].clu == dp->sclust &&
 8004426:	429a      	cmp	r2, r3
 8004428:	d102      	bne.n	8004430 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800442a:	e007      	b.n	800443c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800442c:	2301      	movs	r3, #1
 800442e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3301      	adds	r3, #1
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d9c3      	bls.n	80043c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d109      	bne.n	8004456 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d102      	bne.n	800444e <chk_lock+0x9e>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d101      	bne.n	8004452 <chk_lock+0xa2>
 800444e:	2300      	movs	r3, #0
 8004450:	e014      	b.n	800447c <chk_lock+0xcc>
 8004452:	2312      	movs	r3, #18
 8004454:	e012      	b.n	800447c <chk_lock+0xcc>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10c      	bne.n	8004476 <chk_lock+0xc6>
 800445c:	4909      	ldr	r1, [pc, #36]	; (8004484 <chk_lock+0xd4>)
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	0013      	movs	r3, r2
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	189b      	adds	r3, r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	18cb      	adds	r3, r1, r3
 800446a:	330a      	adds	r3, #10
 800446c:	881a      	ldrh	r2, [r3, #0]
 800446e:	2380      	movs	r3, #128	; 0x80
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	429a      	cmp	r2, r3
 8004474:	d101      	bne.n	800447a <chk_lock+0xca>
 8004476:	2310      	movs	r3, #16
 8004478:	e000      	b.n	800447c <chk_lock+0xcc>
 800447a:	2300      	movs	r3, #0
}
 800447c:	0018      	movs	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	b004      	add	sp, #16
 8004482:	bd80      	pop	{r7, pc}
 8004484:	2000061c 	.word	0x2000061c
 8004488:	00000206 	.word	0x00000206

0800448c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004492:	2300      	movs	r3, #0
 8004494:	607b      	str	r3, [r7, #4]
 8004496:	e002      	b.n	800449e <enq_lock+0x12>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3301      	adds	r3, #1
 800449c:	607b      	str	r3, [r7, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d808      	bhi.n	80044b6 <enq_lock+0x2a>
 80044a4:	4908      	ldr	r1, [pc, #32]	; (80044c8 <enq_lock+0x3c>)
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	0013      	movs	r3, r2
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	189b      	adds	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	585b      	ldr	r3, [r3, r1]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3b02      	subs	r3, #2
 80044ba:	1e5a      	subs	r2, r3, #1
 80044bc:	4193      	sbcs	r3, r2
 80044be:	b2db      	uxtb	r3, r3
}
 80044c0:	0018      	movs	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b002      	add	sp, #8
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	2000061c 	.word	0x2000061c

080044cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e02c      	b.n	8004536 <inc_lock+0x6a>
		if (Files[i].fs == dp->fs &&
 80044dc:	4955      	ldr	r1, [pc, #340]	; (8004634 <inc_lock+0x168>)
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	0013      	movs	r3, r2
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	189b      	adds	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	585a      	ldr	r2, [r3, r1]
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	2380      	movs	r3, #128	; 0x80
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	58cb      	ldr	r3, [r1, r3]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d11c      	bne.n	8004530 <inc_lock+0x64>
			Files[i].clu == dp->sclust &&
 80044f6:	494f      	ldr	r1, [pc, #316]	; (8004634 <inc_lock+0x168>)
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	0013      	movs	r3, r2
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	189b      	adds	r3, r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	18cb      	adds	r3, r1, r3
 8004504:	3304      	adds	r3, #4
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	2382      	movs	r3, #130	; 0x82
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	58cb      	ldr	r3, [r1, r3]
		if (Files[i].fs == dp->fs &&
 8004510:	429a      	cmp	r2, r3
 8004512:	d10d      	bne.n	8004530 <inc_lock+0x64>
			Files[i].idx == dp->index) break;
 8004514:	4947      	ldr	r1, [pc, #284]	; (8004634 <inc_lock+0x168>)
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	0013      	movs	r3, r2
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	189b      	adds	r3, r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	18cb      	adds	r3, r1, r3
 8004522:	3308      	adds	r3, #8
 8004524:	881a      	ldrh	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4943      	ldr	r1, [pc, #268]	; (8004638 <inc_lock+0x16c>)
 800452a:	5a5b      	ldrh	r3, [r3, r1]
			Files[i].clu == dp->sclust &&
 800452c:	429a      	cmp	r2, r3
 800452e:	d006      	beq.n	800453e <inc_lock+0x72>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3301      	adds	r3, #1
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d9cf      	bls.n	80044dc <inc_lock+0x10>
 800453c:	e000      	b.n	8004540 <inc_lock+0x74>
			Files[i].idx == dp->index) break;
 800453e:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d145      	bne.n	80045d2 <inc_lock+0x106>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	e002      	b.n	8004552 <inc_lock+0x86>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3301      	adds	r3, #1
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d808      	bhi.n	800456a <inc_lock+0x9e>
 8004558:	4936      	ldr	r1, [pc, #216]	; (8004634 <inc_lock+0x168>)
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	0013      	movs	r3, r2
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	189b      	adds	r3, r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	585b      	ldr	r3, [r3, r1]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <inc_lock+0x80>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d101      	bne.n	8004574 <inc_lock+0xa8>
 8004570:	2300      	movs	r3, #0
 8004572:	e05a      	b.n	800462a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	58d0      	ldr	r0, [r2, r3]
 800457c:	492d      	ldr	r1, [pc, #180]	; (8004634 <inc_lock+0x168>)
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	0013      	movs	r3, r2
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	189b      	adds	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	5058      	str	r0, [r3, r1]
		Files[i].clu = dp->sclust;
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	2382      	movs	r3, #130	; 0x82
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	58d1      	ldr	r1, [r2, r3]
 8004592:	4828      	ldr	r0, [pc, #160]	; (8004634 <inc_lock+0x168>)
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	0013      	movs	r3, r2
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	189b      	adds	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	18c3      	adds	r3, r0, r3
 80045a0:	3304      	adds	r3, #4
 80045a2:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a24      	ldr	r2, [pc, #144]	; (8004638 <inc_lock+0x16c>)
 80045a8:	5a98      	ldrh	r0, [r3, r2]
 80045aa:	4922      	ldr	r1, [pc, #136]	; (8004634 <inc_lock+0x168>)
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	0013      	movs	r3, r2
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	189b      	adds	r3, r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	18cb      	adds	r3, r1, r3
 80045b8:	3308      	adds	r3, #8
 80045ba:	1c02      	adds	r2, r0, #0
 80045bc:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80045be:	491d      	ldr	r1, [pc, #116]	; (8004634 <inc_lock+0x168>)
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	0013      	movs	r3, r2
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	189b      	adds	r3, r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	18cb      	adds	r3, r1, r3
 80045cc:	330a      	adds	r3, #10
 80045ce:	2200      	movs	r2, #0
 80045d0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00c      	beq.n	80045f2 <inc_lock+0x126>
 80045d8:	4916      	ldr	r1, [pc, #88]	; (8004634 <inc_lock+0x168>)
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	0013      	movs	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	189b      	adds	r3, r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	18cb      	adds	r3, r1, r3
 80045e6:	330a      	adds	r3, #10
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <inc_lock+0x126>
 80045ee:	2300      	movs	r3, #0
 80045f0:	e01b      	b.n	800462a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10b      	bne.n	8004610 <inc_lock+0x144>
 80045f8:	490e      	ldr	r1, [pc, #56]	; (8004634 <inc_lock+0x168>)
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	0013      	movs	r3, r2
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	189b      	adds	r3, r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	18cb      	adds	r3, r1, r3
 8004606:	330a      	adds	r3, #10
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	3301      	adds	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	e001      	b.n	8004614 <inc_lock+0x148>
 8004610:	2380      	movs	r3, #128	; 0x80
 8004612:	005a      	lsls	r2, r3, #1
 8004614:	4807      	ldr	r0, [pc, #28]	; (8004634 <inc_lock+0x168>)
 8004616:	68f9      	ldr	r1, [r7, #12]
 8004618:	000b      	movs	r3, r1
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	185b      	adds	r3, r3, r1
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	18c3      	adds	r3, r0, r3
 8004622:	330a      	adds	r3, #10
 8004624:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3301      	adds	r3, #1
}
 800462a:	0018      	movs	r0, r3
 800462c:	46bd      	mov	sp, r7
 800462e:	b004      	add	sp, #16
 8004630:	bd80      	pop	{r7, pc}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	2000061c 	.word	0x2000061c
 8004638:	00000206 	.word	0x00000206

0800463c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800463c:	b590      	push	{r4, r7, lr}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3b01      	subs	r3, #1
 8004648:	607b      	str	r3, [r7, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d83b      	bhi.n	80046c8 <dec_lock+0x8c>
		n = Files[i].ctr;
 8004650:	240e      	movs	r4, #14
 8004652:	1939      	adds	r1, r7, r4
 8004654:	4822      	ldr	r0, [pc, #136]	; (80046e0 <dec_lock+0xa4>)
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	0013      	movs	r3, r2
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	189b      	adds	r3, r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	18c3      	adds	r3, r0, r3
 8004662:	330a      	adds	r3, #10
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	800b      	strh	r3, [r1, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004668:	193b      	adds	r3, r7, r4
 800466a:	881a      	ldrh	r2, [r3, #0]
 800466c:	2380      	movs	r3, #128	; 0x80
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	429a      	cmp	r2, r3
 8004672:	d102      	bne.n	800467a <dec_lock+0x3e>
 8004674:	193b      	adds	r3, r7, r4
 8004676:	2200      	movs	r2, #0
 8004678:	801a      	strh	r2, [r3, #0]
		if (n) n--;					/* Decrement read mode open count */
 800467a:	210e      	movs	r1, #14
 800467c:	187b      	adds	r3, r7, r1
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d004      	beq.n	800468e <dec_lock+0x52>
 8004684:	187b      	adds	r3, r7, r1
 8004686:	881a      	ldrh	r2, [r3, #0]
 8004688:	187b      	adds	r3, r7, r1
 800468a:	3a01      	subs	r2, #1
 800468c:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 800468e:	4914      	ldr	r1, [pc, #80]	; (80046e0 <dec_lock+0xa4>)
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	0013      	movs	r3, r2
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	189b      	adds	r3, r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	18cb      	adds	r3, r1, r3
 800469c:	330a      	adds	r3, #10
 800469e:	210e      	movs	r1, #14
 80046a0:	187a      	adds	r2, r7, r1
 80046a2:	8812      	ldrh	r2, [r2, #0]
 80046a4:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80046a6:	187b      	adds	r3, r7, r1
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d107      	bne.n	80046be <dec_lock+0x82>
 80046ae:	490c      	ldr	r1, [pc, #48]	; (80046e0 <dec_lock+0xa4>)
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	0013      	movs	r3, r2
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	189b      	adds	r3, r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	2200      	movs	r2, #0
 80046bc:	505a      	str	r2, [r3, r1]
		res = FR_OK;
 80046be:	230d      	movs	r3, #13
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	e003      	b.n	80046d0 <dec_lock+0x94>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80046c8:	230d      	movs	r3, #13
 80046ca:	18fb      	adds	r3, r7, r3
 80046cc:	2202      	movs	r2, #2
 80046ce:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80046d0:	230d      	movs	r3, #13
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	781b      	ldrb	r3, [r3, #0]
}
 80046d6:	0018      	movs	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	b005      	add	sp, #20
 80046dc:	bd90      	pop	{r4, r7, pc}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	2000061c 	.word	0x2000061c

080046e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e014      	b.n	800471c <clear_lock+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80046f2:	490e      	ldr	r1, [pc, #56]	; (800472c <clear_lock+0x48>)
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	0013      	movs	r3, r2
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	189b      	adds	r3, r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	585b      	ldr	r3, [r3, r1]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	429a      	cmp	r2, r3
 8004704:	d107      	bne.n	8004716 <clear_lock+0x32>
 8004706:	4909      	ldr	r1, [pc, #36]	; (800472c <clear_lock+0x48>)
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	0013      	movs	r3, r2
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	189b      	adds	r3, r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	2200      	movs	r2, #0
 8004714:	505a      	str	r2, [r3, r1]
	for (i = 0; i < _FS_LOCK; i++) {
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3301      	adds	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d9e7      	bls.n	80046f2 <clear_lock+0xe>
	}
}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	46bd      	mov	sp, r7
 8004728:	b004      	add	sp, #16
 800472a:	bd80      	pop	{r7, pc}
 800472c:	2000061c 	.word	0x2000061c

08004730 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004730:	b590      	push	{r4, r7, lr}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004738:	240f      	movs	r4, #15
 800473a:	193b      	adds	r3, r7, r4
 800473c:	2200      	movs	r2, #0
 800473e:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	2381      	movs	r3, #129	; 0x81
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	5cd3      	ldrb	r3, [r2, r3]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d03d      	beq.n	80047c8 <sync_window+0x98>
		wsect = fs->winsect;	/* Current sector number */
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	238b      	movs	r3, #139	; 0x8b
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	58d3      	ldr	r3, [r2, r3]
 8004754:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a1f      	ldr	r2, [pc, #124]	; (80047d8 <sync_window+0xa8>)
 800475a:	5c98      	ldrb	r0, [r3, r2]
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	2301      	movs	r3, #1
 8004762:	f7ff fd61 	bl	8004228 <disk_write>
 8004766:	1e03      	subs	r3, r0, #0
 8004768:	d003      	beq.n	8004772 <sync_window+0x42>
			res = FR_DISK_ERR;
 800476a:	193b      	adds	r3, r7, r4
 800476c:	2201      	movs	r2, #1
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	e02a      	b.n	80047c8 <sync_window+0x98>
		} else {
			fs->wflag = 0;
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	2381      	movs	r3, #129	; 0x81
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	2100      	movs	r1, #0
 800477a:	54d1      	strb	r1, [r2, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	2388      	movs	r3, #136	; 0x88
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	58d3      	ldr	r3, [r2, r3]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	1ad2      	subs	r2, r2, r3
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	2386      	movs	r3, #134	; 0x86
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	58cb      	ldr	r3, [r1, r3]
 8004790:	429a      	cmp	r2, r3
 8004792:	d219      	bcs.n	80047c8 <sync_window+0x98>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a11      	ldr	r2, [pc, #68]	; (80047dc <sync_window+0xac>)
 8004798:	5c9b      	ldrb	r3, [r3, r2]
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	e011      	b.n	80047c2 <sync_window+0x92>
					wsect += fs->fsize;
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	2386      	movs	r3, #134	; 0x86
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	58d3      	ldr	r3, [r2, r3]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	18d3      	adds	r3, r2, r3
 80047aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a0a      	ldr	r2, [pc, #40]	; (80047d8 <sync_window+0xa8>)
 80047b0:	5c98      	ldrb	r0, [r3, r2]
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	2301      	movs	r3, #1
 80047b8:	f7ff fd36 	bl	8004228 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	3b01      	subs	r3, #1
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d8ea      	bhi.n	800479e <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80047c8:	230f      	movs	r3, #15
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	781b      	ldrb	r3, [r3, #0]
}
 80047ce:	0018      	movs	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b007      	add	sp, #28
 80047d4:	bd90      	pop	{r4, r7, pc}
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	00000201 	.word	0x00000201
 80047dc:	00000203 	.word	0x00000203

080047e0 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80047e0:	b5b0      	push	{r4, r5, r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80047ea:	240f      	movs	r4, #15
 80047ec:	193b      	adds	r3, r7, r4
 80047ee:	2200      	movs	r2, #0
 80047f0:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	238b      	movs	r3, #139	; 0x8b
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	58d3      	ldr	r3, [r2, r3]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d021      	beq.n	8004844 <move_window+0x64>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004800:	0025      	movs	r5, r4
 8004802:	193c      	adds	r4, r7, r4
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	0018      	movs	r0, r3
 8004808:	f7ff ff92 	bl	8004730 <sync_window>
 800480c:	0003      	movs	r3, r0
 800480e:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004810:	002c      	movs	r4, r5
 8004812:	193b      	adds	r3, r7, r4
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d114      	bne.n	8004844 <move_window+0x64>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a0d      	ldr	r2, [pc, #52]	; (8004854 <move_window+0x74>)
 800481e:	5c98      	ldrb	r0, [r3, r2]
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	2301      	movs	r3, #1
 8004826:	f7ff fcd7 	bl	80041d8 <disk_read>
 800482a:	1e03      	subs	r3, r0, #0
 800482c:	d005      	beq.n	800483a <move_window+0x5a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800482e:	2301      	movs	r3, #1
 8004830:	425b      	negs	r3, r3
 8004832:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004834:	193b      	adds	r3, r7, r4
 8004836:	2201      	movs	r2, #1
 8004838:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	238b      	movs	r3, #139	; 0x8b
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	6839      	ldr	r1, [r7, #0]
 8004842:	50d1      	str	r1, [r2, r3]
		}
	}
	return res;
 8004844:	230f      	movs	r3, #15
 8004846:	18fb      	adds	r3, r7, r3
 8004848:	781b      	ldrb	r3, [r3, #0]
}
 800484a:	0018      	movs	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	b004      	add	sp, #16
 8004850:	bdb0      	pop	{r4, r5, r7, pc}
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	00000201 	.word	0x00000201

08004858 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8004858:	b5b0      	push	{r4, r5, r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004860:	250f      	movs	r5, #15
 8004862:	197c      	adds	r4, r7, r5
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	0018      	movs	r0, r3
 8004868:	f7ff ff62 	bl	8004730 <sync_window>
 800486c:	0003      	movs	r3, r0
 800486e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8004870:	197b      	adds	r3, r7, r5
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d000      	beq.n	800487a <sync_fs+0x22>
 8004878:	e0b4      	b.n	80049e4 <sync_fs+0x18c>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	2380      	movs	r3, #128	; 0x80
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	5cd3      	ldrb	r3, [r2, r3]
 8004882:	2b03      	cmp	r3, #3
 8004884:	d000      	beq.n	8004888 <sync_fs+0x30>
 8004886:	e09f      	b.n	80049c8 <sync_fs+0x170>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a5a      	ldr	r2, [pc, #360]	; (80049f4 <sync_fs+0x19c>)
 800488c:	5c9b      	ldrb	r3, [r3, r2]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d000      	beq.n	8004894 <sync_fs+0x3c>
 8004892:	e099      	b.n	80049c8 <sync_fs+0x170>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2280      	movs	r2, #128	; 0x80
 8004898:	0092      	lsls	r2, r2, #2
 800489a:	2100      	movs	r1, #0
 800489c:	0018      	movs	r0, r3
 800489e:	f7ff fd30 	bl	8004302 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	23ff      	movs	r3, #255	; 0xff
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	2155      	movs	r1, #85	; 0x55
 80048aa:	54d1      	strb	r1, [r2, r3]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a52      	ldr	r2, [pc, #328]	; (80049f8 <sync_fs+0x1a0>)
 80048b0:	21aa      	movs	r1, #170	; 0xaa
 80048b2:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2252      	movs	r2, #82	; 0x52
 80048b8:	701a      	strb	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2252      	movs	r2, #82	; 0x52
 80048be:	705a      	strb	r2, [r3, #1]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2261      	movs	r2, #97	; 0x61
 80048c4:	709a      	strb	r2, [r3, #2]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2241      	movs	r2, #65	; 0x41
 80048ca:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	23f2      	movs	r3, #242	; 0xf2
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	2172      	movs	r1, #114	; 0x72
 80048d4:	54d1      	strb	r1, [r2, r3]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	23e6      	movs	r3, #230	; 0xe6
 80048da:	33ff      	adds	r3, #255	; 0xff
 80048dc:	2172      	movs	r1, #114	; 0x72
 80048de:	54d1      	strb	r1, [r2, r3]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	23f3      	movs	r3, #243	; 0xf3
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	2141      	movs	r1, #65	; 0x41
 80048e8:	54d1      	strb	r1, [r2, r3]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	23e8      	movs	r3, #232	; 0xe8
 80048ee:	33ff      	adds	r3, #255	; 0xff
 80048f0:	2161      	movs	r1, #97	; 0x61
 80048f2:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	2384      	movs	r3, #132	; 0x84
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	58d3      	ldr	r3, [r2, r3]
 80048fc:	b2d9      	uxtb	r1, r3
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	23f4      	movs	r3, #244	; 0xf4
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	54d1      	strb	r1, [r2, r3]
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	2384      	movs	r3, #132	; 0x84
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	58d3      	ldr	r3, [r2, r3]
 800490e:	b29b      	uxth	r3, r3
 8004910:	0a1b      	lsrs	r3, r3, #8
 8004912:	b29b      	uxth	r3, r3
 8004914:	b2d9      	uxtb	r1, r3
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	23ea      	movs	r3, #234	; 0xea
 800491a:	33ff      	adds	r3, #255	; 0xff
 800491c:	54d1      	strb	r1, [r2, r3]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	2384      	movs	r3, #132	; 0x84
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	58d3      	ldr	r3, [r2, r3]
 8004926:	0c1b      	lsrs	r3, r3, #16
 8004928:	b2d9      	uxtb	r1, r3
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	23f5      	movs	r3, #245	; 0xf5
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	54d1      	strb	r1, [r2, r3]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	2384      	movs	r3, #132	; 0x84
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	58d3      	ldr	r3, [r2, r3]
 800493a:	0e1b      	lsrs	r3, r3, #24
 800493c:	b2d9      	uxtb	r1, r3
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	23ec      	movs	r3, #236	; 0xec
 8004942:	33ff      	adds	r3, #255	; 0xff
 8004944:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	2383      	movs	r3, #131	; 0x83
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	58d3      	ldr	r3, [r2, r3]
 800494e:	b2d9      	uxtb	r1, r3
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	23f6      	movs	r3, #246	; 0xf6
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	54d1      	strb	r1, [r2, r3]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	2383      	movs	r3, #131	; 0x83
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	58d3      	ldr	r3, [r2, r3]
 8004960:	b29b      	uxth	r3, r3
 8004962:	0a1b      	lsrs	r3, r3, #8
 8004964:	b29b      	uxth	r3, r3
 8004966:	b2d9      	uxtb	r1, r3
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	23ee      	movs	r3, #238	; 0xee
 800496c:	33ff      	adds	r3, #255	; 0xff
 800496e:	54d1      	strb	r1, [r2, r3]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	2383      	movs	r3, #131	; 0x83
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	58d3      	ldr	r3, [r2, r3]
 8004978:	0c1b      	lsrs	r3, r3, #16
 800497a:	b2d9      	uxtb	r1, r3
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	23f7      	movs	r3, #247	; 0xf7
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	54d1      	strb	r1, [r2, r3]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	2383      	movs	r3, #131	; 0x83
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	58d3      	ldr	r3, [r2, r3]
 800498c:	0e1b      	lsrs	r3, r3, #24
 800498e:	b2d9      	uxtb	r1, r3
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	23f0      	movs	r3, #240	; 0xf0
 8004994:	33ff      	adds	r3, #255	; 0xff
 8004996:	54d1      	strb	r1, [r2, r3]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	2387      	movs	r3, #135	; 0x87
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	58d3      	ldr	r3, [r2, r3]
 80049a0:	1c59      	adds	r1, r3, #1
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	238b      	movs	r3, #139	; 0x8b
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	50d1      	str	r1, [r2, r3]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a13      	ldr	r2, [pc, #76]	; (80049fc <sync_fs+0x1a4>)
 80049ae:	5c98      	ldrb	r0, [r3, r2]
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	238b      	movs	r3, #139	; 0x8b
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	58d2      	ldr	r2, [r2, r3]
 80049ba:	2301      	movs	r3, #1
 80049bc:	f7ff fc34 	bl	8004228 <disk_write>
			fs->fsi_flag = 0;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a0c      	ldr	r2, [pc, #48]	; (80049f4 <sync_fs+0x19c>)
 80049c4:	2100      	movs	r1, #0
 80049c6:	5499      	strb	r1, [r3, r2]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a0c      	ldr	r2, [pc, #48]	; (80049fc <sync_fs+0x1a4>)
 80049cc:	5c9b      	ldrb	r3, [r3, r2]
 80049ce:	2200      	movs	r2, #0
 80049d0:	2100      	movs	r1, #0
 80049d2:	0018      	movs	r0, r3
 80049d4:	f7ff fc50 	bl	8004278 <disk_ioctl>
 80049d8:	1e03      	subs	r3, r0, #0
 80049da:	d003      	beq.n	80049e4 <sync_fs+0x18c>
			res = FR_DISK_ERR;
 80049dc:	230f      	movs	r3, #15
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	2201      	movs	r2, #1
 80049e2:	701a      	strb	r2, [r3, #0]
	}

	return res;
 80049e4:	230f      	movs	r3, #15
 80049e6:	18fb      	adds	r3, r7, r3
 80049e8:	781b      	ldrb	r3, [r3, #0]
}
 80049ea:	0018      	movs	r0, r3
 80049ec:	46bd      	mov	sp, r7
 80049ee:	b004      	add	sp, #16
 80049f0:	bdb0      	pop	{r4, r5, r7, pc}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	00000205 	.word	0x00000205
 80049f8:	000001ff 	.word	0x000001ff
 80049fc:	00000201 	.word	0x00000201

08004a00 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	3b02      	subs	r3, #2
 8004a0e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	2385      	movs	r3, #133	; 0x85
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	58d3      	ldr	r3, [r2, r3]
 8004a18:	3b02      	subs	r3, #2
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d301      	bcc.n	8004a24 <clust2sect+0x24>
 8004a20:	2300      	movs	r3, #0
 8004a22:	e00a      	b.n	8004a3a <clust2sect+0x3a>
	return clst * fs->csize + fs->database;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a07      	ldr	r2, [pc, #28]	; (8004a44 <clust2sect+0x44>)
 8004a28:	5c9b      	ldrb	r3, [r3, r2]
 8004a2a:	001a      	movs	r2, r3
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	435a      	muls	r2, r3
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	238a      	movs	r3, #138	; 0x8a
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	58cb      	ldr	r3, [r1, r3]
 8004a38:	18d3      	adds	r3, r2, r3
}
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b002      	add	sp, #8
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	00000202 	.word	0x00000202

08004a48 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d906      	bls.n	8004a66 <get_fat+0x1e>
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	2385      	movs	r3, #133	; 0x85
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	58d3      	ldr	r3, [r2, r3]
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d302      	bcc.n	8004a6c <get_fat+0x24>
		val = 1;	/* Internal error */
 8004a66:	2301      	movs	r3, #1
 8004a68:	617b      	str	r3, [r7, #20]
 8004a6a:	e0aa      	b.n	8004bc2 <get_fat+0x17a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	425b      	negs	r3, r3
 8004a70:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	2380      	movs	r3, #128	; 0x80
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	5cd3      	ldrb	r3, [r2, r3]
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d100      	bne.n	8004a80 <get_fat+0x38>
 8004a7e:	e06b      	b.n	8004b58 <get_fat+0x110>
 8004a80:	dd00      	ble.n	8004a84 <get_fat+0x3c>
 8004a82:	e094      	b.n	8004bae <get_fat+0x166>
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d002      	beq.n	8004a8e <get_fat+0x46>
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d042      	beq.n	8004b12 <get_fat+0xca>
 8004a8c:	e08f      	b.n	8004bae <get_fat+0x166>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	085b      	lsrs	r3, r3, #1
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	18d3      	adds	r3, r2, r3
 8004a9a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	2388      	movs	r3, #136	; 0x88
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	58d2      	ldr	r2, [r2, r3]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	0a5b      	lsrs	r3, r3, #9
 8004aa8:	18d2      	adds	r2, r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	0011      	movs	r1, r2
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f7ff fe96 	bl	80047e0 <move_window>
 8004ab4:	1e03      	subs	r3, r0, #0
 8004ab6:	d000      	beq.n	8004aba <get_fat+0x72>
 8004ab8:	e07c      	b.n	8004bb4 <get_fat+0x16c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	60fa      	str	r2, [r7, #12]
 8004ac0:	05db      	lsls	r3, r3, #23
 8004ac2:	0ddb      	lsrs	r3, r3, #23
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	5cd3      	ldrb	r3, [r2, r3]
 8004ac8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	2388      	movs	r3, #136	; 0x88
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	58d2      	ldr	r2, [r2, r3]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	0a5b      	lsrs	r3, r3, #9
 8004ad6:	18d2      	adds	r2, r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	0011      	movs	r1, r2
 8004adc:	0018      	movs	r0, r3
 8004ade:	f7ff fe7f 	bl	80047e0 <move_window>
 8004ae2:	1e03      	subs	r3, r0, #0
 8004ae4:	d168      	bne.n	8004bb8 <get_fat+0x170>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	05db      	lsls	r3, r3, #23
 8004aea:	0ddb      	lsrs	r3, r3, #23
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	5cd3      	ldrb	r3, [r2, r3]
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	001a      	movs	r2, r3
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2201      	movs	r2, #1
 8004afe:	4013      	ands	r3, r2
 8004b00:	d002      	beq.n	8004b08 <get_fat+0xc0>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	e002      	b.n	8004b0e <get_fat+0xc6>
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	051b      	lsls	r3, r3, #20
 8004b0c:	0d1b      	lsrs	r3, r3, #20
 8004b0e:	617b      	str	r3, [r7, #20]
			break;
 8004b10:	e057      	b.n	8004bc2 <get_fat+0x17a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	2388      	movs	r3, #136	; 0x88
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	58d2      	ldr	r2, [r2, r3]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	0a1b      	lsrs	r3, r3, #8
 8004b1e:	18d2      	adds	r2, r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	0011      	movs	r1, r2
 8004b24:	0018      	movs	r0, r3
 8004b26:	f7ff fe5b 	bl	80047e0 <move_window>
 8004b2a:	1e03      	subs	r3, r0, #0
 8004b2c:	d146      	bne.n	8004bbc <get_fat+0x174>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	005a      	lsls	r2, r3, #1
 8004b32:	23ff      	movs	r3, #255	; 0xff
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	4013      	ands	r3, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	18d3      	adds	r3, r2, r3
 8004b3c:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	3301      	adds	r3, #1
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	021b      	lsls	r3, r3, #8
 8004b46:	b21a      	sxth	r2, r3
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	b21b      	sxth	r3, r3
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	b21b      	sxth	r3, r3
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	617b      	str	r3, [r7, #20]
			break;
 8004b56:	e034      	b.n	8004bc2 <get_fat+0x17a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	2388      	movs	r3, #136	; 0x88
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	58d2      	ldr	r2, [r2, r3]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	09db      	lsrs	r3, r3, #7
 8004b64:	18d2      	adds	r2, r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	0011      	movs	r1, r2
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f7ff fe38 	bl	80047e0 <move_window>
 8004b70:	1e03      	subs	r3, r0, #0
 8004b72:	d125      	bne.n	8004bc0 <get_fat+0x178>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	009a      	lsls	r2, r3, #2
 8004b78:	23fe      	movs	r3, #254	; 0xfe
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	18d3      	adds	r3, r2, r3
 8004b82:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	3303      	adds	r3, #3
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	061a      	lsls	r2, r3, #24
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	3302      	adds	r3, #2
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	041b      	lsls	r3, r3, #16
 8004b94:	4313      	orrs	r3, r2
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	3201      	adds	r2, #1
 8004b9a:	7812      	ldrb	r2, [r2, #0]
 8004b9c:	0212      	lsls	r2, r2, #8
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	7812      	ldrb	r2, [r2, #0]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	617b      	str	r3, [r7, #20]
			break;
 8004bac:	e009      	b.n	8004bc2 <get_fat+0x17a>

		default:
			val = 1;	/* Internal error */
 8004bae:	2301      	movs	r3, #1
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	e006      	b.n	8004bc2 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004bb4:	46c0      	nop			; (mov r8, r8)
 8004bb6:	e004      	b.n	8004bc2 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004bb8:	46c0      	nop			; (mov r8, r8)
 8004bba:	e002      	b.n	8004bc2 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004bbc:	46c0      	nop			; (mov r8, r8)
 8004bbe:	e000      	b.n	8004bc2 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004bc0:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8004bc2:	697b      	ldr	r3, [r7, #20]
}
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b006      	add	sp, #24
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004bcc:	b5b0      	push	{r4, r5, r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d906      	bls.n	8004bec <put_fat+0x20>
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	2385      	movs	r3, #133	; 0x85
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	58d3      	ldr	r3, [r2, r3]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d304      	bcc.n	8004bf6 <put_fat+0x2a>
		res = FR_INT_ERR;
 8004bec:	231f      	movs	r3, #31
 8004bee:	18fb      	adds	r3, r7, r3
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	701a      	strb	r2, [r3, #0]
 8004bf4:	e111      	b.n	8004e1a <put_fat+0x24e>

	} else {
		switch (fs->fs_type) {
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	2380      	movs	r3, #128	; 0x80
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	5cd3      	ldrb	r3, [r2, r3]
 8004bfe:	2b03      	cmp	r3, #3
 8004c00:	d100      	bne.n	8004c04 <put_fat+0x38>
 8004c02:	e0ae      	b.n	8004d62 <put_fat+0x196>
 8004c04:	dd00      	ble.n	8004c08 <put_fat+0x3c>
 8004c06:	e0fc      	b.n	8004e02 <put_fat+0x236>
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d003      	beq.n	8004c14 <put_fat+0x48>
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d100      	bne.n	8004c12 <put_fat+0x46>
 8004c10:	e079      	b.n	8004d06 <put_fat+0x13a>
 8004c12:	e0f6      	b.n	8004e02 <put_fat+0x236>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	085b      	lsrs	r3, r3, #1
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	18d3      	adds	r3, r2, r3
 8004c20:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	2388      	movs	r3, #136	; 0x88
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	58d2      	ldr	r2, [r2, r3]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	0a5b      	lsrs	r3, r3, #9
 8004c2e:	18d2      	adds	r2, r2, r3
 8004c30:	251f      	movs	r5, #31
 8004c32:	197c      	adds	r4, r7, r5
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	0011      	movs	r1, r2
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f7ff fdd1 	bl	80047e0 <move_window>
 8004c3e:	0003      	movs	r3, r0
 8004c40:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004c42:	197b      	adds	r3, r7, r5
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d000      	beq.n	8004c4c <put_fat+0x80>
 8004c4a:	e0df      	b.n	8004e0c <put_fat+0x240>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	617a      	str	r2, [r7, #20]
 8004c52:	05db      	lsls	r3, r3, #23
 8004c54:	0ddb      	lsrs	r3, r3, #23
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	18d3      	adds	r3, r2, r3
 8004c5a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	4013      	ands	r3, r2
 8004c62:	d00d      	beq.n	8004c80 <put_fat+0xb4>
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	b25b      	sxtb	r3, r3
 8004c6a:	220f      	movs	r2, #15
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	b25a      	sxtb	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	b25b      	sxtb	r3, r3
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	b25b      	sxtb	r3, r3
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	e001      	b.n	8004c84 <put_fat+0xb8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	2381      	movs	r3, #129	; 0x81
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	2101      	movs	r1, #1
 8004c90:	54d1      	strb	r1, [r2, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	2388      	movs	r3, #136	; 0x88
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	58d2      	ldr	r2, [r2, r3]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	0a5b      	lsrs	r3, r3, #9
 8004c9e:	18d2      	adds	r2, r2, r3
 8004ca0:	251f      	movs	r5, #31
 8004ca2:	197c      	adds	r4, r7, r5
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	0011      	movs	r1, r2
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f7ff fd99 	bl	80047e0 <move_window>
 8004cae:	0003      	movs	r3, r0
 8004cb0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004cb2:	197b      	adds	r3, r7, r5
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d000      	beq.n	8004cbc <put_fat+0xf0>
 8004cba:	e0a9      	b.n	8004e10 <put_fat+0x244>
			p = &fs->win.d8[bc % SS(fs)];
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	05db      	lsls	r3, r3, #23
 8004cc0:	0ddb      	lsrs	r3, r3, #23
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	18d3      	adds	r3, r2, r3
 8004cc6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	4013      	ands	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <put_fat+0x10c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	091b      	lsrs	r3, r3, #4
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	e00e      	b.n	8004cf6 <put_fat+0x12a>
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	b25b      	sxtb	r3, r3
 8004cde:	220f      	movs	r2, #15
 8004ce0:	4393      	bics	r3, r2
 8004ce2:	b25a      	sxtb	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	0a1b      	lsrs	r3, r3, #8
 8004ce8:	b25b      	sxtb	r3, r3
 8004cea:	210f      	movs	r1, #15
 8004cec:	400b      	ands	r3, r1
 8004cee:	b25b      	sxtb	r3, r3
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	b25b      	sxtb	r3, r3
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	2381      	movs	r3, #129	; 0x81
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	2101      	movs	r1, #1
 8004d02:	54d1      	strb	r1, [r2, r3]
			break;
 8004d04:	e089      	b.n	8004e1a <put_fat+0x24e>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	2388      	movs	r3, #136	; 0x88
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	58d2      	ldr	r2, [r2, r3]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	0a1b      	lsrs	r3, r3, #8
 8004d12:	18d2      	adds	r2, r2, r3
 8004d14:	251f      	movs	r5, #31
 8004d16:	197c      	adds	r4, r7, r5
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	0011      	movs	r1, r2
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f7ff fd5f 	bl	80047e0 <move_window>
 8004d22:	0003      	movs	r3, r0
 8004d24:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004d26:	197b      	adds	r3, r7, r5
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d172      	bne.n	8004e14 <put_fat+0x248>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	005a      	lsls	r2, r3, #1
 8004d32:	23ff      	movs	r3, #255	; 0xff
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	4013      	ands	r3, r2
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	18d3      	adds	r3, r2, r3
 8004d3c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	0a1b      	lsrs	r3, r3, #8
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	3301      	adds	r3, #1
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	2381      	movs	r3, #129	; 0x81
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	54d1      	strb	r1, [r2, r3]
			break;
 8004d60:	e05b      	b.n	8004e1a <put_fat+0x24e>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	2388      	movs	r3, #136	; 0x88
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	58d2      	ldr	r2, [r2, r3]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	09db      	lsrs	r3, r3, #7
 8004d6e:	18d2      	adds	r2, r2, r3
 8004d70:	251f      	movs	r5, #31
 8004d72:	197c      	adds	r4, r7, r5
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	0011      	movs	r1, r2
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f7ff fd31 	bl	80047e0 <move_window>
 8004d7e:	0003      	movs	r3, r0
 8004d80:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004d82:	197b      	adds	r3, r7, r5
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d146      	bne.n	8004e18 <put_fat+0x24c>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	009a      	lsls	r2, r3, #2
 8004d8e:	23fe      	movs	r3, #254	; 0xfe
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	4013      	ands	r3, r2
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	18d3      	adds	r3, r2, r3
 8004d98:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	3303      	adds	r3, #3
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	061a      	lsls	r2, r3, #24
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	3302      	adds	r3, #2
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	041b      	lsls	r3, r3, #16
 8004daa:	4313      	orrs	r3, r2
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	3201      	adds	r2, #1
 8004db0:	7812      	ldrb	r2, [r2, #0]
 8004db2:	0212      	lsls	r2, r2, #8
 8004db4:	4313      	orrs	r3, r2
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	7812      	ldrb	r2, [r2, #0]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	0f1b      	lsrs	r3, r3, #28
 8004dbe:	071b      	lsls	r3, r3, #28
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	0a1b      	lsrs	r3, r3, #8
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	0c1a      	lsrs	r2, r3, #16
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	3302      	adds	r3, #2
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	0e1a      	lsrs	r2, r3, #24
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	3303      	adds	r3, #3
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	2381      	movs	r3, #129	; 0x81
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	54d1      	strb	r1, [r2, r3]
			break;
 8004e00:	e00b      	b.n	8004e1a <put_fat+0x24e>

		default :
			res = FR_INT_ERR;
 8004e02:	231f      	movs	r3, #31
 8004e04:	18fb      	adds	r3, r7, r3
 8004e06:	2202      	movs	r2, #2
 8004e08:	701a      	strb	r2, [r3, #0]
 8004e0a:	e006      	b.n	8004e1a <put_fat+0x24e>
			if (res != FR_OK) break;
 8004e0c:	46c0      	nop			; (mov r8, r8)
 8004e0e:	e004      	b.n	8004e1a <put_fat+0x24e>
			if (res != FR_OK) break;
 8004e10:	46c0      	nop			; (mov r8, r8)
 8004e12:	e002      	b.n	8004e1a <put_fat+0x24e>
			if (res != FR_OK) break;
 8004e14:	46c0      	nop			; (mov r8, r8)
 8004e16:	e000      	b.n	8004e1a <put_fat+0x24e>
			if (res != FR_OK) break;
 8004e18:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8004e1a:	231f      	movs	r3, #31
 8004e1c:	18fb      	adds	r3, r7, r3
 8004e1e:	781b      	ldrb	r3, [r3, #0]
}
 8004e20:	0018      	movs	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b008      	add	sp, #32
 8004e26:	bdb0      	pop	{r4, r5, r7, pc}

08004e28 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004e28:	b5b0      	push	{r4, r5, r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d906      	bls.n	8004e46 <remove_chain+0x1e>
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	2385      	movs	r3, #133	; 0x85
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	58d3      	ldr	r3, [r2, r3]
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d304      	bcc.n	8004e50 <remove_chain+0x28>
		res = FR_INT_ERR;
 8004e46:	230f      	movs	r3, #15
 8004e48:	18fb      	adds	r3, r7, r3
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	e052      	b.n	8004ef6 <remove_chain+0xce>

	} else {
		res = FR_OK;
 8004e50:	230f      	movs	r3, #15
 8004e52:	18fb      	adds	r3, r7, r3
 8004e54:	2200      	movs	r2, #0
 8004e56:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004e58:	e042      	b.n	8004ee0 <remove_chain+0xb8>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	0011      	movs	r1, r2
 8004e60:	0018      	movs	r0, r3
 8004e62:	f7ff fdf1 	bl	8004a48 <get_fat>
 8004e66:	0003      	movs	r3, r0
 8004e68:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d03f      	beq.n	8004ef0 <remove_chain+0xc8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d104      	bne.n	8004e80 <remove_chain+0x58>
 8004e76:	230f      	movs	r3, #15
 8004e78:	18fb      	adds	r3, r7, r3
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	e03a      	b.n	8004ef6 <remove_chain+0xce>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	3301      	adds	r3, #1
 8004e84:	d104      	bne.n	8004e90 <remove_chain+0x68>
 8004e86:	230f      	movs	r3, #15
 8004e88:	18fb      	adds	r3, r7, r3
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	e032      	b.n	8004ef6 <remove_chain+0xce>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004e90:	250f      	movs	r5, #15
 8004e92:	197c      	adds	r4, r7, r5
 8004e94:	6839      	ldr	r1, [r7, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	f7ff fe96 	bl	8004bcc <put_fat>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004ea4:	197b      	adds	r3, r7, r5
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d123      	bne.n	8004ef4 <remove_chain+0xcc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	2384      	movs	r3, #132	; 0x84
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	58d3      	ldr	r3, [r2, r3]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	d011      	beq.n	8004edc <remove_chain+0xb4>
				fs->free_clust++;
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	2384      	movs	r3, #132	; 0x84
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	58d3      	ldr	r3, [r2, r3]
 8004ec0:	1c59      	adds	r1, r3, #1
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	2384      	movs	r3, #132	; 0x84
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	50d1      	str	r1, [r2, r3]
				fs->fsi_flag |= 1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a0d      	ldr	r2, [pc, #52]	; (8004f04 <remove_chain+0xdc>)
 8004ece:	5c9b      	ldrb	r3, [r3, r2]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	b2d9      	uxtb	r1, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a0a      	ldr	r2, [pc, #40]	; (8004f04 <remove_chain+0xdc>)
 8004eda:	5499      	strb	r1, [r3, r2]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	2385      	movs	r3, #133	; 0x85
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	58d3      	ldr	r3, [r2, r3]
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d3b5      	bcc.n	8004e5a <remove_chain+0x32>
 8004eee:	e002      	b.n	8004ef6 <remove_chain+0xce>
			if (nxt == 0) break;				/* Empty cluster? */
 8004ef0:	46c0      	nop			; (mov r8, r8)
 8004ef2:	e000      	b.n	8004ef6 <remove_chain+0xce>
			if (res != FR_OK) break;
 8004ef4:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8004ef6:	230f      	movs	r3, #15
 8004ef8:	18fb      	adds	r3, r7, r3
 8004efa:	781b      	ldrb	r3, [r3, #0]
}
 8004efc:	0018      	movs	r0, r3
 8004efe:	46bd      	mov	sp, r7
 8004f00:	b004      	add	sp, #16
 8004f02:	bdb0      	pop	{r4, r5, r7, pc}
 8004f04:	00000205 	.word	0x00000205

08004f08 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004f08:	b5b0      	push	{r4, r5, r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d111      	bne.n	8004f3c <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	2383      	movs	r3, #131	; 0x83
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	58d3      	ldr	r3, [r2, r3]
 8004f20:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d006      	beq.n	8004f36 <create_chain+0x2e>
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	2385      	movs	r3, #133	; 0x85
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	58d3      	ldr	r3, [r2, r3]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d31f      	bcc.n	8004f76 <create_chain+0x6e>
 8004f36:	2301      	movs	r3, #1
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	e01c      	b.n	8004f76 <create_chain+0x6e>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	0011      	movs	r1, r2
 8004f42:	0018      	movs	r0, r3
 8004f44:	f7ff fd80 	bl	8004a48 <get_fat>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d801      	bhi.n	8004f56 <create_chain+0x4e>
 8004f52:	2301      	movs	r3, #1
 8004f54:	e085      	b.n	8005062 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <create_chain+0x58>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	e080      	b.n	8005062 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	2385      	movs	r3, #133	; 0x85
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	58d3      	ldr	r3, [r2, r3]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d201      	bcs.n	8004f72 <create_chain+0x6a>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	e077      	b.n	8005062 <create_chain+0x15a>
		scl = clst;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	2385      	movs	r3, #133	; 0x85
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	58d3      	ldr	r3, [r2, r3]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d307      	bcc.n	8004f9e <create_chain+0x96>
			ncl = 2;
 8004f8e:	2302      	movs	r3, #2
 8004f90:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d901      	bls.n	8004f9e <create_chain+0x96>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	e061      	b.n	8005062 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	0011      	movs	r1, r2
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	f7ff fd4f 	bl	8004a48 <get_fat>
 8004faa:	0003      	movs	r3, r0
 8004fac:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00d      	beq.n	8004fd0 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	d002      	beq.n	8004fc0 <create_chain+0xb8>
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <create_chain+0xbc>
			return cs;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	e04e      	b.n	8005062 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d1d6      	bne.n	8004f7a <create_chain+0x72>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e048      	b.n	8005062 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 8004fd0:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004fd2:	250f      	movs	r5, #15
 8004fd4:	197c      	adds	r4, r7, r5
 8004fd6:	4a25      	ldr	r2, [pc, #148]	; (800506c <create_chain+0x164>)
 8004fd8:	6979      	ldr	r1, [r7, #20]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f7ff fdf5 	bl	8004bcc <put_fat>
 8004fe2:	0003      	movs	r3, r0
 8004fe4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
 8004fe6:	197b      	adds	r3, r7, r5
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10b      	bne.n	8005006 <create_chain+0xfe>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d008      	beq.n	8005006 <create_chain+0xfe>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004ff4:	197c      	adds	r4, r7, r5
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	6839      	ldr	r1, [r7, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f7ff fde5 	bl	8004bcc <put_fat>
 8005002:	0003      	movs	r3, r0
 8005004:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
 8005006:	230f      	movs	r3, #15
 8005008:	18fb      	adds	r3, r7, r3
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d11d      	bne.n	800504c <create_chain+0x144>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	2383      	movs	r3, #131	; 0x83
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	6979      	ldr	r1, [r7, #20]
 8005018:	50d1      	str	r1, [r2, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	2384      	movs	r3, #132	; 0x84
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	58d3      	ldr	r3, [r2, r3]
 8005022:	3301      	adds	r3, #1
 8005024:	d01c      	beq.n	8005060 <create_chain+0x158>
			fs->free_clust--;
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	2384      	movs	r3, #132	; 0x84
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	58d3      	ldr	r3, [r2, r3]
 800502e:	1e59      	subs	r1, r3, #1
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	2384      	movs	r3, #132	; 0x84
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a0d      	ldr	r2, [pc, #52]	; (8005070 <create_chain+0x168>)
 800503c:	5c9b      	ldrb	r3, [r3, r2]
 800503e:	2201      	movs	r2, #1
 8005040:	4313      	orrs	r3, r2
 8005042:	b2d9      	uxtb	r1, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a0a      	ldr	r2, [pc, #40]	; (8005070 <create_chain+0x168>)
 8005048:	5499      	strb	r1, [r3, r2]
 800504a:	e009      	b.n	8005060 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800504c:	230f      	movs	r3, #15
 800504e:	18fb      	adds	r3, r7, r3
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d102      	bne.n	800505c <create_chain+0x154>
 8005056:	2301      	movs	r3, #1
 8005058:	425b      	negs	r3, r3
 800505a:	e000      	b.n	800505e <create_chain+0x156>
 800505c:	2301      	movs	r3, #1
 800505e:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005060:	697b      	ldr	r3, [r7, #20]
}
 8005062:	0018      	movs	r0, r3
 8005064:	46bd      	mov	sp, r7
 8005066:	b006      	add	sp, #24
 8005068:	bdb0      	pop	{r4, r5, r7, pc}
 800506a:	46c0      	nop			; (mov r8, r8)
 800506c:	0fffffff 	.word	0x0fffffff
 8005070:	00000205 	.word	0x00000205

08005074 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	2389      	movs	r3, #137	; 0x89
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	58d3      	ldr	r3, [r2, r3]
 8005086:	3304      	adds	r3, #4
 8005088:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	0a58      	lsrs	r0, r3, #9
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	2380      	movs	r3, #128	; 0x80
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	58d3      	ldr	r3, [r2, r3]
 8005096:	4a13      	ldr	r2, [pc, #76]	; (80050e4 <clmt_clust+0x70>)
 8005098:	5c9b      	ldrb	r3, [r3, r2]
 800509a:	0019      	movs	r1, r3
 800509c:	f7fb f832 	bl	8000104 <__udivsi3>
 80050a0:	0003      	movs	r3, r0
 80050a2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1d1a      	adds	r2, r3, #4
 80050a8:	613a      	str	r2, [r7, #16]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <clmt_clust+0x44>
 80050b4:	2300      	movs	r3, #0
 80050b6:	e010      	b.n	80050da <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d307      	bcc.n	80050d0 <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	3304      	adds	r3, #4
 80050cc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80050ce:	e7e9      	b.n	80050a4 <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 80050d0:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	18d3      	adds	r3, r2, r3
}
 80050da:	0018      	movs	r0, r3
 80050dc:	46bd      	mov	sp, r7
 80050de:	b006      	add	sp, #24
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	46c0      	nop			; (mov r8, r8)
 80050e4:	00000202 	.word	0x00000202

080050e8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	b299      	uxth	r1, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a51      	ldr	r2, [pc, #324]	; (8005240 <dir_sdi+0x158>)
 80050fa:	5299      	strh	r1, [r3, r2]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	2382      	movs	r3, #130	; 0x82
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	58d3      	ldr	r3, [r2, r3]
 8005104:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d009      	beq.n	8005120 <dir_sdi+0x38>
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	2380      	movs	r3, #128	; 0x80
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	58d2      	ldr	r2, [r2, r3]
 8005114:	2385      	movs	r3, #133	; 0x85
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	58d3      	ldr	r3, [r2, r3]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	429a      	cmp	r2, r3
 800511e:	d301      	bcc.n	8005124 <dir_sdi+0x3c>
		return FR_INT_ERR;
 8005120:	2302      	movs	r3, #2
 8005122:	e088      	b.n	8005236 <dir_sdi+0x14e>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d110      	bne.n	800514c <dir_sdi+0x64>
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	2380      	movs	r3, #128	; 0x80
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	58d2      	ldr	r2, [r2, r3]
 8005132:	2380      	movs	r3, #128	; 0x80
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	5cd3      	ldrb	r3, [r2, r3]
 8005138:	2b03      	cmp	r3, #3
 800513a:	d107      	bne.n	800514c <dir_sdi+0x64>
		clst = dp->fs->dirbase;
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	2380      	movs	r3, #128	; 0x80
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	58d2      	ldr	r2, [r2, r3]
 8005144:	2389      	movs	r3, #137	; 0x89
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	58d3      	ldr	r3, [r2, r3]
 800514a:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d115      	bne.n	800517e <dir_sdi+0x96>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	2380      	movs	r3, #128	; 0x80
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	58d2      	ldr	r2, [r2, r3]
 800515a:	2382      	movs	r3, #130	; 0x82
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	5ad3      	ldrh	r3, [r2, r3]
 8005160:	001a      	movs	r2, r3
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	4293      	cmp	r3, r2
 8005166:	d301      	bcc.n	800516c <dir_sdi+0x84>
			return FR_INT_ERR;
 8005168:	2302      	movs	r3, #2
 800516a:	e064      	b.n	8005236 <dir_sdi+0x14e>
		sect = dp->fs->dirbase;
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	2380      	movs	r3, #128	; 0x80
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	58d2      	ldr	r2, [r2, r3]
 8005174:	2389      	movs	r3, #137	; 0x89
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	58d3      	ldr	r3, [r2, r3]
 800517a:	613b      	str	r3, [r7, #16]
 800517c:	e03a      	b.n	80051f4 <dir_sdi+0x10c>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	2380      	movs	r3, #128	; 0x80
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	58d3      	ldr	r3, [r2, r3]
 8005186:	4a2f      	ldr	r2, [pc, #188]	; (8005244 <dir_sdi+0x15c>)
 8005188:	5c9b      	ldrb	r3, [r3, r2]
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800518e:	e022      	b.n	80051d6 <dir_sdi+0xee>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	2380      	movs	r3, #128	; 0x80
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	58d3      	ldr	r3, [r2, r3]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	0011      	movs	r1, r2
 800519c:	0018      	movs	r0, r3
 800519e:	f7ff fc53 	bl	8004a48 <get_fat>
 80051a2:	0003      	movs	r3, r0
 80051a4:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	3301      	adds	r3, #1
 80051aa:	d101      	bne.n	80051b0 <dir_sdi+0xc8>
 80051ac:	2301      	movs	r3, #1
 80051ae:	e042      	b.n	8005236 <dir_sdi+0x14e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d909      	bls.n	80051ca <dir_sdi+0xe2>
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	2380      	movs	r3, #128	; 0x80
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	58d2      	ldr	r2, [r2, r3]
 80051be:	2385      	movs	r3, #133	; 0x85
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	58d3      	ldr	r3, [r2, r3]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d301      	bcc.n	80051ce <dir_sdi+0xe6>
				return FR_INT_ERR;
 80051ca:	2302      	movs	r3, #2
 80051cc:	e033      	b.n	8005236 <dir_sdi+0x14e>
			idx -= ic;
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d2d8      	bcs.n	8005190 <dir_sdi+0xa8>
		}
		sect = clust2sect(dp->fs, clst);
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	2380      	movs	r3, #128	; 0x80
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	58d3      	ldr	r3, [r2, r3]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	0011      	movs	r1, r2
 80051ea:	0018      	movs	r0, r3
 80051ec:	f7ff fc08 	bl	8004a00 <clust2sect>
 80051f0:	0003      	movs	r3, r0
 80051f2:	613b      	str	r3, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	2383      	movs	r3, #131	; 0x83
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	6979      	ldr	r1, [r7, #20]
 80051fc:	50d1      	str	r1, [r2, r3]
	if (!sect) return FR_INT_ERR;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <dir_sdi+0x120>
 8005204:	2302      	movs	r3, #2
 8005206:	e016      	b.n	8005236 <dir_sdi+0x14e>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	091a      	lsrs	r2, r3, #4
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	18d1      	adds	r1, r2, r3
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	2384      	movs	r3, #132	; 0x84
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	50d1      	str	r1, [r2, r3]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	2380      	movs	r3, #128	; 0x80
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	58d3      	ldr	r3, [r2, r3]
 8005220:	0019      	movs	r1, r3
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	220f      	movs	r2, #15
 8005226:	4013      	ands	r3, r2
 8005228:	015b      	lsls	r3, r3, #5
 800522a:	18c9      	adds	r1, r1, r3
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	2385      	movs	r3, #133	; 0x85
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	0018      	movs	r0, r3
 8005238:	46bd      	mov	sp, r7
 800523a:	b006      	add	sp, #24
 800523c:	bd80      	pop	{r7, pc}
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	00000206 	.word	0x00000206
 8005244:	00000202 	.word	0x00000202

08005248 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005248:	b590      	push	{r4, r7, lr}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a87      	ldr	r2, [pc, #540]	; (8005474 <dir_next+0x22c>)
 8005256:	5a9b      	ldrh	r3, [r3, r2]
 8005258:	3301      	adds	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	041b      	lsls	r3, r3, #16
 8005260:	0c1b      	lsrs	r3, r3, #16
 8005262:	d005      	beq.n	8005270 <dir_next+0x28>
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	2384      	movs	r3, #132	; 0x84
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	58d3      	ldr	r3, [r2, r3]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <dir_next+0x2c>
		return FR_NO_FILE;
 8005270:	2304      	movs	r3, #4
 8005272:	e0fb      	b.n	800546c <dir_next+0x224>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	220f      	movs	r2, #15
 8005278:	4013      	ands	r3, r2
 800527a:	d000      	beq.n	800527e <dir_next+0x36>
 800527c:	e0e2      	b.n	8005444 <dir_next+0x1fc>
		dp->sect++;					/* Next sector */
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	2384      	movs	r3, #132	; 0x84
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	58d3      	ldr	r3, [r2, r3]
 8005286:	1c59      	adds	r1, r3, #1
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	2384      	movs	r3, #132	; 0x84
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	50d1      	str	r1, [r2, r3]

		if (!dp->clust) {		/* Static table */
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	2383      	movs	r3, #131	; 0x83
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	58d3      	ldr	r3, [r2, r3]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10d      	bne.n	80052b8 <dir_next+0x70>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	2380      	movs	r3, #128	; 0x80
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	58d2      	ldr	r2, [r2, r3]
 80052a4:	2382      	movs	r3, #130	; 0x82
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	5ad3      	ldrh	r3, [r2, r3]
 80052aa:	001a      	movs	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d200      	bcs.n	80052b4 <dir_next+0x6c>
 80052b2:	e0c7      	b.n	8005444 <dir_next+0x1fc>
				return FR_NO_FILE;
 80052b4:	2304      	movs	r3, #4
 80052b6:	e0d9      	b.n	800546c <dir_next+0x224>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	091b      	lsrs	r3, r3, #4
 80052bc:	6879      	ldr	r1, [r7, #4]
 80052be:	2280      	movs	r2, #128	; 0x80
 80052c0:	0092      	lsls	r2, r2, #2
 80052c2:	588a      	ldr	r2, [r1, r2]
 80052c4:	496c      	ldr	r1, [pc, #432]	; (8005478 <dir_next+0x230>)
 80052c6:	5c52      	ldrb	r2, [r2, r1]
 80052c8:	3a01      	subs	r2, #1
 80052ca:	4013      	ands	r3, r2
 80052cc:	d000      	beq.n	80052d0 <dir_next+0x88>
 80052ce:	e0b9      	b.n	8005444 <dir_next+0x1fc>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	2380      	movs	r3, #128	; 0x80
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	58d0      	ldr	r0, [r2, r3]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	2383      	movs	r3, #131	; 0x83
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	58d3      	ldr	r3, [r2, r3]
 80052e0:	0019      	movs	r1, r3
 80052e2:	f7ff fbb1 	bl	8004a48 <get_fat>
 80052e6:	0003      	movs	r3, r0
 80052e8:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d801      	bhi.n	80052f4 <dir_next+0xac>
 80052f0:	2302      	movs	r3, #2
 80052f2:	e0bb      	b.n	800546c <dir_next+0x224>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	3301      	adds	r3, #1
 80052f8:	d101      	bne.n	80052fe <dir_next+0xb6>
 80052fa:	2301      	movs	r3, #1
 80052fc:	e0b6      	b.n	800546c <dir_next+0x224>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	58d2      	ldr	r2, [r2, r3]
 8005306:	2385      	movs	r3, #133	; 0x85
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	58d3      	ldr	r3, [r2, r3]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	429a      	cmp	r2, r3
 8005310:	d200      	bcs.n	8005314 <dir_next+0xcc>
 8005312:	e084      	b.n	800541e <dir_next+0x1d6>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <dir_next+0xd6>
 800531a:	2304      	movs	r3, #4
 800531c:	e0a6      	b.n	800546c <dir_next+0x224>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	2380      	movs	r3, #128	; 0x80
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	58d0      	ldr	r0, [r2, r3]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	2383      	movs	r3, #131	; 0x83
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	58d3      	ldr	r3, [r2, r3]
 800532e:	0019      	movs	r1, r3
 8005330:	f7ff fdea 	bl	8004f08 <create_chain>
 8005334:	0003      	movs	r3, r0
 8005336:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <dir_next+0xfa>
 800533e:	2307      	movs	r3, #7
 8005340:	e094      	b.n	800546c <dir_next+0x224>
					if (clst == 1) return FR_INT_ERR;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <dir_next+0x104>
 8005348:	2302      	movs	r3, #2
 800534a:	e08f      	b.n	800546c <dir_next+0x224>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	3301      	adds	r3, #1
 8005350:	d101      	bne.n	8005356 <dir_next+0x10e>
 8005352:	2301      	movs	r3, #1
 8005354:	e08a      	b.n	800546c <dir_next+0x224>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	2380      	movs	r3, #128	; 0x80
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	58d3      	ldr	r3, [r2, r3]
 800535e:	0018      	movs	r0, r3
 8005360:	f7ff f9e6 	bl	8004730 <sync_window>
 8005364:	1e03      	subs	r3, r0, #0
 8005366:	d001      	beq.n	800536c <dir_next+0x124>
 8005368:	2301      	movs	r3, #1
 800536a:	e07f      	b.n	800546c <dir_next+0x224>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	2380      	movs	r3, #128	; 0x80
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	58d3      	ldr	r3, [r2, r3]
 8005374:	0018      	movs	r0, r3
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	001a      	movs	r2, r3
 800537c:	2100      	movs	r1, #0
 800537e:	f7fe ffc0 	bl	8004302 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	2380      	movs	r3, #128	; 0x80
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	58d0      	ldr	r0, [r2, r3]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	2380      	movs	r3, #128	; 0x80
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	58d4      	ldr	r4, [r2, r3]
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	0019      	movs	r1, r3
 8005396:	f7ff fb33 	bl	8004a00 <clust2sect>
 800539a:	0002      	movs	r2, r0
 800539c:	238b      	movs	r3, #139	; 0x8b
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	50e2      	str	r2, [r4, r3]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80053a2:	2300      	movs	r3, #0
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	e020      	b.n	80053ea <dir_next+0x1a2>
						dp->fs->wflag = 1;
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	2380      	movs	r3, #128	; 0x80
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	58d2      	ldr	r2, [r2, r3]
 80053b0:	2381      	movs	r3, #129	; 0x81
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	2101      	movs	r1, #1
 80053b6:	54d1      	strb	r1, [r2, r3]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	2380      	movs	r3, #128	; 0x80
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	58d3      	ldr	r3, [r2, r3]
 80053c0:	0018      	movs	r0, r3
 80053c2:	f7ff f9b5 	bl	8004730 <sync_window>
 80053c6:	1e03      	subs	r3, r0, #0
 80053c8:	d001      	beq.n	80053ce <dir_next+0x186>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e04e      	b.n	800546c <dir_next+0x224>
						dp->fs->winsect++;
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	2380      	movs	r3, #128	; 0x80
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	58d3      	ldr	r3, [r2, r3]
 80053d6:	228b      	movs	r2, #139	; 0x8b
 80053d8:	0092      	lsls	r2, r2, #2
 80053da:	589a      	ldr	r2, [r3, r2]
 80053dc:	1c51      	adds	r1, r2, #1
 80053de:	228b      	movs	r2, #139	; 0x8b
 80053e0:	0092      	lsls	r2, r2, #2
 80053e2:	5099      	str	r1, [r3, r2]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	3301      	adds	r3, #1
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	2380      	movs	r3, #128	; 0x80
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	58d3      	ldr	r3, [r2, r3]
 80053f2:	4a21      	ldr	r2, [pc, #132]	; (8005478 <dir_next+0x230>)
 80053f4:	5c9b      	ldrb	r3, [r3, r2]
 80053f6:	001a      	movs	r2, r3
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d3d4      	bcc.n	80053a8 <dir_next+0x160>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	58d2      	ldr	r2, [r2, r3]
 8005406:	238b      	movs	r3, #139	; 0x8b
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	58d1      	ldr	r1, [r2, r3]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	2380      	movs	r3, #128	; 0x80
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	58d2      	ldr	r2, [r2, r3]
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ac9      	subs	r1, r1, r3
 8005418:	238b      	movs	r3, #139	; 0x8b
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	50d1      	str	r1, [r2, r3]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	2383      	movs	r3, #131	; 0x83
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	6979      	ldr	r1, [r7, #20]
 8005426:	50d1      	str	r1, [r2, r3]
				dp->sect = clust2sect(dp->fs, clst);
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	2380      	movs	r3, #128	; 0x80
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	58d3      	ldr	r3, [r2, r3]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	0011      	movs	r1, r2
 8005434:	0018      	movs	r0, r3
 8005436:	f7ff fae3 	bl	8004a00 <clust2sect>
 800543a:	0001      	movs	r1, r0
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	2384      	movs	r3, #132	; 0x84
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	50d1      	str	r1, [r2, r3]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	b299      	uxth	r1, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a0a      	ldr	r2, [pc, #40]	; (8005474 <dir_next+0x22c>)
 800544c:	5299      	strh	r1, [r3, r2]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	2380      	movs	r3, #128	; 0x80
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	58d3      	ldr	r3, [r2, r3]
 8005456:	0019      	movs	r1, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	220f      	movs	r2, #15
 800545c:	4013      	ands	r3, r2
 800545e:	015b      	lsls	r3, r3, #5
 8005460:	18c9      	adds	r1, r1, r3
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	2385      	movs	r3, #133	; 0x85
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	0018      	movs	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	b007      	add	sp, #28
 8005472:	bd90      	pop	{r4, r7, pc}
 8005474:	00000206 	.word	0x00000206
 8005478:	00000202 	.word	0x00000202

0800547c <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800547c:	b5b0      	push	{r4, r5, r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005486:	250f      	movs	r5, #15
 8005488:	197c      	adds	r4, r7, r5
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2100      	movs	r1, #0
 800548e:	0018      	movs	r0, r3
 8005490:	f7ff fe2a 	bl	80050e8 <dir_sdi>
 8005494:	0003      	movs	r3, r0
 8005496:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8005498:	197b      	adds	r3, r7, r5
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d13b      	bne.n	8005518 <dir_alloc+0x9c>
		n = 0;
 80054a0:	2300      	movs	r3, #0
 80054a2:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	2380      	movs	r3, #128	; 0x80
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	58d0      	ldr	r0, [r2, r3]
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	2384      	movs	r3, #132	; 0x84
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	58d3      	ldr	r3, [r2, r3]
 80054b4:	250f      	movs	r5, #15
 80054b6:	197c      	adds	r4, r7, r5
 80054b8:	0019      	movs	r1, r3
 80054ba:	f7ff f991 	bl	80047e0 <move_window>
 80054be:	0003      	movs	r3, r0
 80054c0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80054c2:	197b      	adds	r3, r7, r5
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d125      	bne.n	8005516 <dir_alloc+0x9a>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	2385      	movs	r3, #133	; 0x85
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	58d3      	ldr	r3, [r2, r3]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2be5      	cmp	r3, #229	; 0xe5
 80054d6:	d006      	beq.n	80054e6 <dir_alloc+0x6a>
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	2385      	movs	r3, #133	; 0x85
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	58d3      	ldr	r3, [r2, r3]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d107      	bne.n	80054f6 <dir_alloc+0x7a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	3301      	adds	r3, #1
 80054ea:	60bb      	str	r3, [r7, #8]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d102      	bne.n	80054fa <dir_alloc+0x7e>
 80054f4:	e010      	b.n	8005518 <dir_alloc+0x9c>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80054f6:	2300      	movs	r3, #0
 80054f8:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80054fa:	250f      	movs	r5, #15
 80054fc:	197c      	adds	r4, r7, r5
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2101      	movs	r1, #1
 8005502:	0018      	movs	r0, r3
 8005504:	f7ff fea0 	bl	8005248 <dir_next>
 8005508:	0003      	movs	r3, r0
 800550a:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
 800550c:	197b      	adds	r3, r7, r5
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0c7      	beq.n	80054a4 <dir_alloc+0x28>
 8005514:	e000      	b.n	8005518 <dir_alloc+0x9c>
			if (res != FR_OK) break;
 8005516:	46c0      	nop			; (mov r8, r8)
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005518:	220f      	movs	r2, #15
 800551a:	18bb      	adds	r3, r7, r2
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b04      	cmp	r3, #4
 8005520:	d102      	bne.n	8005528 <dir_alloc+0xac>
 8005522:	18bb      	adds	r3, r7, r2
 8005524:	2207      	movs	r2, #7
 8005526:	701a      	strb	r2, [r3, #0]
	return res;
 8005528:	230f      	movs	r3, #15
 800552a:	18fb      	adds	r3, r7, r3
 800552c:	781b      	ldrb	r3, [r3, #0]
}
 800552e:	0018      	movs	r0, r3
 8005530:	46bd      	mov	sp, r7
 8005532:	b004      	add	sp, #16
 8005534:	bdb0      	pop	{r4, r5, r7, pc}

08005536 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	331b      	adds	r3, #27
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	021b      	lsls	r3, r3, #8
 8005548:	b21a      	sxth	r2, r3
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	331a      	adds	r3, #26
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	b21b      	sxth	r3, r3
 8005552:	4313      	orrs	r3, r2
 8005554:	b21b      	sxth	r3, r3
 8005556:	b29b      	uxth	r3, r3
 8005558:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	2380      	movs	r3, #128	; 0x80
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	5cd3      	ldrb	r3, [r2, r3]
 8005562:	2b03      	cmp	r3, #3
 8005564:	d10f      	bne.n	8005586 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	3315      	adds	r3, #21
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	b21a      	sxth	r2, r3
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	3314      	adds	r3, #20
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	b21b      	sxth	r3, r3
 8005578:	4313      	orrs	r3, r2
 800557a:	b21b      	sxth	r3, r3
 800557c:	b29b      	uxth	r3, r3
 800557e:	041b      	lsls	r3, r3, #16
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]

	return cl;
 8005586:	68fb      	ldr	r3, [r7, #12]
}
 8005588:	0018      	movs	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	b004      	add	sp, #16
 800558e:	bd80      	pop	{r7, pc}

08005590 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	331a      	adds	r3, #26
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	b2d2      	uxtb	r2, r2
 80055a2:	701a      	strb	r2, [r3, #0]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	0a1b      	lsrs	r3, r3, #8
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	331b      	adds	r3, #27
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	0c1a      	lsrs	r2, r3, #16
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3314      	adds	r3, #20
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	701a      	strb	r2, [r3, #0]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	0c1b      	lsrs	r3, r3, #16
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	0a1b      	lsrs	r3, r3, #8
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3315      	adds	r3, #21
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]
}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	46bd      	mov	sp, r7
 80055d6:	b002      	add	sp, #8
 80055d8:	bd80      	pop	{r7, pc}

080055da <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80055da:	b5b0      	push	{r4, r5, r7, lr}
 80055dc:	b086      	sub	sp, #24
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80055e2:	2517      	movs	r5, #23
 80055e4:	197c      	adds	r4, r7, r5
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2100      	movs	r1, #0
 80055ea:	0018      	movs	r0, r3
 80055ec:	f7ff fd7c 	bl	80050e8 <dir_sdi>
 80055f0:	0003      	movs	r3, r0
 80055f2:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 80055f4:	197b      	adds	r3, r7, r5
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <dir_find+0x28>
 80055fc:	197b      	adds	r3, r7, r5
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	e04b      	b.n	800569a <dir_find+0xc0>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	2380      	movs	r3, #128	; 0x80
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	58d0      	ldr	r0, [r2, r3]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	2384      	movs	r3, #132	; 0x84
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	58d3      	ldr	r3, [r2, r3]
 8005612:	2517      	movs	r5, #23
 8005614:	197c      	adds	r4, r7, r5
 8005616:	0019      	movs	r1, r3
 8005618:	f7ff f8e2 	bl	80047e0 <move_window>
 800561c:	0003      	movs	r3, r0
 800561e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8005620:	0029      	movs	r1, r5
 8005622:	187b      	adds	r3, r7, r1
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d131      	bne.n	800568e <dir_find+0xb4>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	2385      	movs	r3, #133	; 0x85
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	58d3      	ldr	r3, [r2, r3]
 8005632:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005634:	200f      	movs	r0, #15
 8005636:	183b      	adds	r3, r7, r0
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	7812      	ldrb	r2, [r2, #0]
 800563c:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800563e:	183b      	adds	r3, r7, r0
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d103      	bne.n	800564e <dir_find+0x74>
 8005646:	187b      	adds	r3, r7, r1
 8005648:	2204      	movs	r2, #4
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	e022      	b.n	8005694 <dir_find+0xba>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	330b      	adds	r3, #11
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	001a      	movs	r2, r3
 8005656:	2308      	movs	r3, #8
 8005658:	4013      	ands	r3, r2
 800565a:	d10a      	bne.n	8005672 <dir_find+0x98>
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	2386      	movs	r3, #134	; 0x86
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	58d1      	ldr	r1, [r2, r3]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	220b      	movs	r2, #11
 8005668:	0018      	movs	r0, r3
 800566a:	f7fe fe63 	bl	8004334 <mem_cmp>
 800566e:	1e03      	subs	r3, r0, #0
 8005670:	d00f      	beq.n	8005692 <dir_find+0xb8>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005672:	2517      	movs	r5, #23
 8005674:	197c      	adds	r4, r7, r5
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2100      	movs	r1, #0
 800567a:	0018      	movs	r0, r3
 800567c:	f7ff fde4 	bl	8005248 <dir_next>
 8005680:	0003      	movs	r3, r0
 8005682:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 8005684:	197b      	adds	r3, r7, r5
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0ba      	beq.n	8005602 <dir_find+0x28>
 800568c:	e002      	b.n	8005694 <dir_find+0xba>
		if (res != FR_OK) break;
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	e000      	b.n	8005694 <dir_find+0xba>
			break;
 8005692:	46c0      	nop			; (mov r8, r8)

	return res;
 8005694:	2317      	movs	r3, #23
 8005696:	18fb      	adds	r3, r7, r3
 8005698:	781b      	ldrb	r3, [r3, #0]
}
 800569a:	0018      	movs	r0, r3
 800569c:	46bd      	mov	sp, r7
 800569e:	b006      	add	sp, #24
 80056a0:	bdb0      	pop	{r4, r5, r7, pc}

080056a2 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80056a2:	b5b0      	push	{r4, r5, r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80056aa:	250f      	movs	r5, #15
 80056ac:	197c      	adds	r4, r7, r5
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2101      	movs	r1, #1
 80056b2:	0018      	movs	r0, r3
 80056b4:	f7ff fee2 	bl	800547c <dir_alloc>
 80056b8:	0003      	movs	r3, r0
 80056ba:	7023      	strb	r3, [r4, #0]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80056bc:	0029      	movs	r1, r5
 80056be:	187b      	adds	r3, r7, r1
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d12f      	bne.n	8005726 <dir_register+0x84>
		res = move_window(dp->fs, dp->sect);
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	2380      	movs	r3, #128	; 0x80
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	58d0      	ldr	r0, [r2, r3]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	2384      	movs	r3, #132	; 0x84
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	58d3      	ldr	r3, [r2, r3]
 80056d6:	000d      	movs	r5, r1
 80056d8:	187c      	adds	r4, r7, r1
 80056da:	0019      	movs	r1, r3
 80056dc:	f7ff f880 	bl	80047e0 <move_window>
 80056e0:	0003      	movs	r3, r0
 80056e2:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80056e4:	197b      	adds	r3, r7, r5
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d11c      	bne.n	8005726 <dir_register+0x84>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	2385      	movs	r3, #133	; 0x85
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	58d3      	ldr	r3, [r2, r3]
 80056f4:	2220      	movs	r2, #32
 80056f6:	2100      	movs	r1, #0
 80056f8:	0018      	movs	r0, r3
 80056fa:	f7fe fe02 	bl	8004302 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	2385      	movs	r3, #133	; 0x85
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	58d0      	ldr	r0, [r2, r3]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	2386      	movs	r3, #134	; 0x86
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	58d3      	ldr	r3, [r2, r3]
 800570e:	220b      	movs	r2, #11
 8005710:	0019      	movs	r1, r3
 8005712:	f7fe fdd9 	bl	80042c8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	2380      	movs	r3, #128	; 0x80
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	58d2      	ldr	r2, [r2, r3]
 800571e:	2381      	movs	r3, #129	; 0x81
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	2101      	movs	r1, #1
 8005724:	54d1      	strb	r1, [r2, r3]
		}
	}

	return res;
 8005726:	230f      	movs	r3, #15
 8005728:	18fb      	adds	r3, r7, r3
 800572a:	781b      	ldrb	r3, [r3, #0]
}
 800572c:	0018      	movs	r0, r3
 800572e:	46bd      	mov	sp, r7
 8005730:	b004      	add	sp, #16
 8005732:	bdb0      	pop	{r4, r5, r7, pc}

08005734 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	e002      	b.n	800574c <create_name+0x18>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	3301      	adds	r3, #1
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b2f      	cmp	r3, #47	; 0x2f
 8005752:	d0f8      	beq.n	8005746 <create_name+0x12>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b5c      	cmp	r3, #92	; 0x5c
 800575a:	d0f4      	beq.n	8005746 <create_name+0x12>
	sfn = dp->fn;
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	2386      	movs	r3, #134	; 0x86
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	58d3      	ldr	r3, [r2, r3]
 8005764:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	220b      	movs	r2, #11
 800576a:	2120      	movs	r1, #32
 800576c:	0018      	movs	r0, r3
 800576e:	f7fe fdc8 	bl	8004302 <mem_set>
	si = i = b = 0; ni = 8;
 8005772:	231f      	movs	r3, #31
 8005774:	18fb      	adds	r3, r7, r3
 8005776:	2200      	movs	r2, #0
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	2300      	movs	r3, #0
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	2308      	movs	r3, #8
 8005784:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	617a      	str	r2, [r7, #20]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	18d2      	adds	r2, r2, r3
 8005790:	211e      	movs	r1, #30
 8005792:	187b      	adds	r3, r7, r1
 8005794:	7812      	ldrb	r2, [r2, #0]
 8005796:	701a      	strb	r2, [r3, #0]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8005798:	000a      	movs	r2, r1
 800579a:	18bb      	adds	r3, r7, r2
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d800      	bhi.n	80057a4 <create_name+0x70>
 80057a2:	e077      	b.n	8005894 <create_name+0x160>
 80057a4:	18bb      	adds	r3, r7, r2
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b2f      	cmp	r3, #47	; 0x2f
 80057aa:	d100      	bne.n	80057ae <create_name+0x7a>
 80057ac:	e072      	b.n	8005894 <create_name+0x160>
 80057ae:	18bb      	adds	r3, r7, r2
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	2b5c      	cmp	r3, #92	; 0x5c
 80057b4:	d100      	bne.n	80057b8 <create_name+0x84>
 80057b6:	e06d      	b.n	8005894 <create_name+0x160>
		if (c == '.' || i >= ni) {
 80057b8:	18bb      	adds	r3, r7, r2
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b2e      	cmp	r3, #46	; 0x2e
 80057be:	d003      	beq.n	80057c8 <create_name+0x94>
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d314      	bcc.n	80057f2 <create_name+0xbe>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d104      	bne.n	80057d8 <create_name+0xa4>
 80057ce:	231e      	movs	r3, #30
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b2e      	cmp	r3, #46	; 0x2e
 80057d6:	d001      	beq.n	80057dc <create_name+0xa8>
 80057d8:	2306      	movs	r3, #6
 80057da:	e0a3      	b.n	8005924 <create_name+0x1f0>
			i = 8; ni = 11;
 80057dc:	2308      	movs	r3, #8
 80057de:	613b      	str	r3, [r7, #16]
 80057e0:	230b      	movs	r3, #11
 80057e2:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80057e4:	221f      	movs	r2, #31
 80057e6:	18bb      	adds	r3, r7, r2
 80057e8:	18ba      	adds	r2, r7, r2
 80057ea:	7812      	ldrb	r2, [r2, #0]
 80057ec:	0092      	lsls	r2, r2, #2
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	e04f      	b.n	8005892 <create_name+0x15e>
		}
		if (c >= 0x80) {				/* Extended character? */
 80057f2:	201e      	movs	r0, #30
 80057f4:	183b      	adds	r3, r7, r0
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	b25b      	sxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	da0e      	bge.n	800581c <create_name+0xe8>
			b |= 3;						/* Eliminate NT flag */
 80057fe:	221f      	movs	r2, #31
 8005800:	18bb      	adds	r3, r7, r2
 8005802:	18ba      	adds	r2, r7, r2
 8005804:	7812      	ldrb	r2, [r2, #0]
 8005806:	2103      	movs	r1, #3
 8005808:	430a      	orrs	r2, r1
 800580a:	701a      	strb	r2, [r3, #0]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800580c:	183b      	adds	r3, r7, r0
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	3b80      	subs	r3, #128	; 0x80
 8005812:	001a      	movs	r2, r3
 8005814:	183b      	adds	r3, r7, r0
 8005816:	4945      	ldr	r1, [pc, #276]	; (800592c <create_name+0x1f8>)
 8005818:	5c8a      	ldrb	r2, [r1, r2]
 800581a:	701a      	strb	r2, [r3, #0]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800581c:	231e      	movs	r3, #30
 800581e:	18fb      	adds	r3, r7, r3
 8005820:	781a      	ldrb	r2, [r3, #0]
 8005822:	4b43      	ldr	r3, [pc, #268]	; (8005930 <create_name+0x1fc>)
 8005824:	0011      	movs	r1, r2
 8005826:	0018      	movs	r0, r3
 8005828:	f7fe fda9 	bl	800437e <chk_chr>
 800582c:	1e03      	subs	r3, r0, #0
 800582e:	d001      	beq.n	8005834 <create_name+0x100>
				return FR_INVALID_NAME;
 8005830:	2306      	movs	r3, #6
 8005832:	e077      	b.n	8005924 <create_name+0x1f0>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8005834:	221e      	movs	r2, #30
 8005836:	18bb      	adds	r3, r7, r2
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b40      	cmp	r3, #64	; 0x40
 800583c:	d90b      	bls.n	8005856 <create_name+0x122>
 800583e:	18bb      	adds	r3, r7, r2
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2b5a      	cmp	r3, #90	; 0x5a
 8005844:	d807      	bhi.n	8005856 <create_name+0x122>
				b |= 2;
 8005846:	221f      	movs	r2, #31
 8005848:	18bb      	adds	r3, r7, r2
 800584a:	18ba      	adds	r2, r7, r2
 800584c:	7812      	ldrb	r2, [r2, #0]
 800584e:	2102      	movs	r1, #2
 8005850:	430a      	orrs	r2, r1
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	e014      	b.n	8005880 <create_name+0x14c>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8005856:	201e      	movs	r0, #30
 8005858:	183b      	adds	r3, r7, r0
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b60      	cmp	r3, #96	; 0x60
 800585e:	d90f      	bls.n	8005880 <create_name+0x14c>
 8005860:	183b      	adds	r3, r7, r0
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b7a      	cmp	r3, #122	; 0x7a
 8005866:	d80b      	bhi.n	8005880 <create_name+0x14c>
					b |= 1; c -= 0x20;
 8005868:	221f      	movs	r2, #31
 800586a:	18bb      	adds	r3, r7, r2
 800586c:	18ba      	adds	r2, r7, r2
 800586e:	7812      	ldrb	r2, [r2, #0]
 8005870:	2101      	movs	r1, #1
 8005872:	430a      	orrs	r2, r1
 8005874:	701a      	strb	r2, [r3, #0]
 8005876:	183b      	adds	r3, r7, r0
 8005878:	183a      	adds	r2, r7, r0
 800587a:	7812      	ldrb	r2, [r2, #0]
 800587c:	3a20      	subs	r2, #32
 800587e:	701a      	strb	r2, [r3, #0]
				}
			}
			sfn[i++] = c;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	613a      	str	r2, [r7, #16]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	18d3      	adds	r3, r2, r3
 800588a:	221e      	movs	r2, #30
 800588c:	18ba      	adds	r2, r7, r2
 800588e:	7812      	ldrb	r2, [r2, #0]
 8005890:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005892:	e778      	b.n	8005786 <create_name+0x52>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	18d2      	adds	r2, r2, r3
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800589e:	231e      	movs	r3, #30
 80058a0:	18fb      	adds	r3, r7, r3
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d801      	bhi.n	80058ac <create_name+0x178>
 80058a8:	2204      	movs	r2, #4
 80058aa:	e000      	b.n	80058ae <create_name+0x17a>
 80058ac:	2200      	movs	r2, #0
 80058ae:	231e      	movs	r3, #30
 80058b0:	18fb      	adds	r3, r7, r3
 80058b2:	701a      	strb	r2, [r3, #0]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <create_name+0x18a>
 80058ba:	2306      	movs	r3, #6
 80058bc:	e032      	b.n	8005924 <create_name+0x1f0>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2be5      	cmp	r3, #229	; 0xe5
 80058c4:	d102      	bne.n	80058cc <create_name+0x198>
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2205      	movs	r2, #5
 80058ca:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	d105      	bne.n	80058de <create_name+0x1aa>
 80058d2:	221f      	movs	r2, #31
 80058d4:	18bb      	adds	r3, r7, r2
 80058d6:	18ba      	adds	r2, r7, r2
 80058d8:	7812      	ldrb	r2, [r2, #0]
 80058da:	0092      	lsls	r2, r2, #2
 80058dc:	701a      	strb	r2, [r3, #0]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80058de:	231f      	movs	r3, #31
 80058e0:	18fb      	adds	r3, r7, r3
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2203      	movs	r2, #3
 80058e6:	4013      	ands	r3, r2
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d106      	bne.n	80058fa <create_name+0x1c6>
 80058ec:	221e      	movs	r2, #30
 80058ee:	18bb      	adds	r3, r7, r2
 80058f0:	18ba      	adds	r2, r7, r2
 80058f2:	7812      	ldrb	r2, [r2, #0]
 80058f4:	2110      	movs	r1, #16
 80058f6:	430a      	orrs	r2, r1
 80058f8:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80058fa:	231f      	movs	r3, #31
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	220c      	movs	r2, #12
 8005902:	4013      	ands	r3, r2
 8005904:	2b04      	cmp	r3, #4
 8005906:	d106      	bne.n	8005916 <create_name+0x1e2>
 8005908:	221e      	movs	r2, #30
 800590a:	18bb      	adds	r3, r7, r2
 800590c:	18ba      	adds	r2, r7, r2
 800590e:	7812      	ldrb	r2, [r2, #0]
 8005910:	2108      	movs	r1, #8
 8005912:	430a      	orrs	r2, r1
 8005914:	701a      	strb	r2, [r3, #0]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	330b      	adds	r3, #11
 800591a:	221e      	movs	r2, #30
 800591c:	18ba      	adds	r2, r7, r2
 800591e:	7812      	ldrb	r2, [r2, #0]
 8005920:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005922:	2300      	movs	r3, #0
#endif
}
 8005924:	0018      	movs	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	b008      	add	sp, #32
 800592a:	bd80      	pop	{r7, pc}
 800592c:	080074e4 	.word	0x080074e4
 8005930:	080073f4 	.word	0x080073f4

08005934 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005934:	b5b0      	push	{r4, r5, r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b2f      	cmp	r3, #47	; 0x2f
 8005944:	d003      	beq.n	800594e <follow_path+0x1a>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	2b5c      	cmp	r3, #92	; 0x5c
 800594c:	d102      	bne.n	8005954 <follow_path+0x20>
		path++;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	3301      	adds	r3, #1
 8005952:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	2382      	movs	r3, #130	; 0x82
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	2100      	movs	r1, #0
 800595c:	50d1      	str	r1, [r2, r3]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b1f      	cmp	r3, #31
 8005964:	d80e      	bhi.n	8005984 <follow_path+0x50>
		res = dir_sdi(dp, 0);
 8005966:	230f      	movs	r3, #15
 8005968:	18fc      	adds	r4, r7, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2100      	movs	r1, #0
 800596e:	0018      	movs	r0, r3
 8005970:	f7ff fbba 	bl	80050e8 <dir_sdi>
 8005974:	0003      	movs	r3, r0
 8005976:	7023      	strb	r3, [r4, #0]
		dp->dir = 0;
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	2385      	movs	r3, #133	; 0x85
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	2100      	movs	r1, #0
 8005980:	50d1      	str	r1, [r2, r3]
 8005982:	e058      	b.n	8005a36 <follow_path+0x102>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005984:	250f      	movs	r5, #15
 8005986:	197c      	adds	r4, r7, r5
 8005988:	003a      	movs	r2, r7
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	0011      	movs	r1, r2
 800598e:	0018      	movs	r0, r3
 8005990:	f7ff fed0 	bl	8005734 <create_name>
 8005994:	0003      	movs	r3, r0
 8005996:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005998:	197b      	adds	r3, r7, r5
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d145      	bne.n	8005a2c <follow_path+0xf8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80059a0:	197c      	adds	r4, r7, r5
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	0018      	movs	r0, r3
 80059a6:	f7ff fe18 	bl	80055da <dir_find>
 80059aa:	0003      	movs	r3, r0
 80059ac:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	2386      	movs	r3, #134	; 0x86
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	58d2      	ldr	r2, [r2, r3]
 80059b6:	210e      	movs	r1, #14
 80059b8:	187b      	adds	r3, r7, r1
 80059ba:	7ad2      	ldrb	r2, [r2, #11]
 80059bc:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 80059be:	197b      	adds	r3, r7, r5
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00c      	beq.n	80059e0 <follow_path+0xac>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80059c6:	197b      	adds	r3, r7, r5
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d130      	bne.n	8005a30 <follow_path+0xfc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80059ce:	187b      	adds	r3, r7, r1
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2204      	movs	r2, #4
 80059d4:	4013      	ands	r3, r2
 80059d6:	d12b      	bne.n	8005a30 <follow_path+0xfc>
 80059d8:	197b      	adds	r3, r7, r5
 80059da:	2205      	movs	r2, #5
 80059dc:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 80059de:	e027      	b.n	8005a30 <follow_path+0xfc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80059e0:	230e      	movs	r3, #14
 80059e2:	18fb      	adds	r3, r7, r3
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2204      	movs	r2, #4
 80059e8:	4013      	ands	r3, r2
 80059ea:	d123      	bne.n	8005a34 <follow_path+0x100>
			dir = dp->dir;						/* Follow the sub-directory */
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	2385      	movs	r3, #133	; 0x85
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	58d3      	ldr	r3, [r2, r3]
 80059f4:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	330b      	adds	r3, #11
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	001a      	movs	r2, r3
 80059fe:	2310      	movs	r3, #16
 8005a00:	4013      	ands	r3, r2
 8005a02:	d104      	bne.n	8005a0e <follow_path+0xda>
				res = FR_NO_PATH; break;
 8005a04:	230f      	movs	r3, #15
 8005a06:	18fb      	adds	r3, r7, r3
 8005a08:	2205      	movs	r2, #5
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	e013      	b.n	8005a36 <follow_path+0x102>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	2380      	movs	r3, #128	; 0x80
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	58d3      	ldr	r3, [r2, r3]
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	0011      	movs	r1, r2
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	f7ff fd8b 	bl	8005536 <ld_clust>
 8005a20:	0001      	movs	r1, r0
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	2382      	movs	r3, #130	; 0x82
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	50d1      	str	r1, [r2, r3]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005a2a:	e7ab      	b.n	8005984 <follow_path+0x50>
			if (res != FR_OK) break;
 8005a2c:	46c0      	nop			; (mov r8, r8)
 8005a2e:	e002      	b.n	8005a36 <follow_path+0x102>
				break;
 8005a30:	46c0      	nop			; (mov r8, r8)
 8005a32:	e000      	b.n	8005a36 <follow_path+0x102>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005a34:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8005a36:	230f      	movs	r3, #15
 8005a38:	18fb      	adds	r3, r7, r3
 8005a3a:	781b      	ldrb	r3, [r3, #0]
}
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	b004      	add	sp, #16
 8005a42:	bdb0      	pop	{r4, r5, r7, pc}

08005a44 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	425b      	negs	r3, r3
 8005a50:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d031      	beq.n	8005abe <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	e002      	b.n	8005a68 <get_ldnumber+0x24>
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	3301      	adds	r3, #1
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d903      	bls.n	8005a78 <get_ldnumber+0x34>
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b3a      	cmp	r3, #58	; 0x3a
 8005a76:	d1f4      	bne.n	8005a62 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b3a      	cmp	r3, #58	; 0x3a
 8005a7e:	d11c      	bne.n	8005aba <get_ldnumber+0x76>
			tp = *path;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	60fa      	str	r2, [r7, #12]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	3b30      	subs	r3, #48	; 0x30
 8005a90:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b09      	cmp	r3, #9
 8005a96:	d80e      	bhi.n	8005ab6 <get_ldnumber+0x72>
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d10a      	bne.n	8005ab6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d107      	bne.n	8005ab6 <get_ldnumber+0x72>
					vol = (int)i;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	3301      	adds	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	e002      	b.n	8005ac0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005aba:	2300      	movs	r3, #0
 8005abc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005abe:	693b      	ldr	r3, [r7, #16]
}
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	b006      	add	sp, #24
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	2381      	movs	r3, #129	; 0x81
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	2100      	movs	r1, #0
 8005ada:	54d1      	strb	r1, [r2, r3]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	238b      	movs	r3, #139	; 0x8b
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	4249      	negs	r1, r1
 8005ae6:	50d1      	str	r1, [r2, r3]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	0011      	movs	r1, r2
 8005aee:	0018      	movs	r0, r3
 8005af0:	f7fe fe76 	bl	80047e0 <move_window>
 8005af4:	1e03      	subs	r3, r0, #0
 8005af6:	d001      	beq.n	8005afc <check_fs+0x34>
		return 3;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e04b      	b.n	8005b94 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	33ff      	adds	r3, #255	; 0xff
 8005b00:	33ff      	adds	r3, #255	; 0xff
 8005b02:	3301      	adds	r3, #1
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	021b      	lsls	r3, r3, #8
 8005b08:	b21a      	sxth	r2, r3
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	23ff      	movs	r3, #255	; 0xff
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	5ccb      	ldrb	r3, [r1, r3]
 8005b12:	b21b      	sxth	r3, r3
 8005b14:	4313      	orrs	r3, r2
 8005b16:	b21b      	sxth	r3, r3
 8005b18:	4a20      	ldr	r2, [pc, #128]	; (8005b9c <check_fs+0xd4>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d001      	beq.n	8005b22 <check_fs+0x5a>
		return 2;
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e038      	b.n	8005b94 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3336      	adds	r3, #54	; 0x36
 8005b26:	3303      	adds	r3, #3
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	061a      	lsls	r2, r3, #24
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3336      	adds	r3, #54	; 0x36
 8005b30:	3302      	adds	r3, #2
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	041b      	lsls	r3, r3, #16
 8005b36:	4313      	orrs	r3, r2
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	3236      	adds	r2, #54	; 0x36
 8005b3c:	3201      	adds	r2, #1
 8005b3e:	7812      	ldrb	r2, [r2, #0]
 8005b40:	0212      	lsls	r2, r2, #8
 8005b42:	4313      	orrs	r3, r2
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	2136      	movs	r1, #54	; 0x36
 8005b48:	5c52      	ldrb	r2, [r2, r1]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	021b      	lsls	r3, r3, #8
 8005b4e:	0a1b      	lsrs	r3, r3, #8
 8005b50:	4a13      	ldr	r2, [pc, #76]	; (8005ba0 <check_fs+0xd8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d101      	bne.n	8005b5a <check_fs+0x92>
		return 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	e01c      	b.n	8005b94 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3352      	adds	r3, #82	; 0x52
 8005b5e:	3303      	adds	r3, #3
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	061a      	lsls	r2, r3, #24
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3352      	adds	r3, #82	; 0x52
 8005b68:	3302      	adds	r3, #2
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	041b      	lsls	r3, r3, #16
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	3252      	adds	r2, #82	; 0x52
 8005b74:	3201      	adds	r2, #1
 8005b76:	7812      	ldrb	r2, [r2, #0]
 8005b78:	0212      	lsls	r2, r2, #8
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	2152      	movs	r1, #82	; 0x52
 8005b80:	5c52      	ldrb	r2, [r2, r1]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	021b      	lsls	r3, r3, #8
 8005b86:	0a1b      	lsrs	r3, r3, #8
 8005b88:	4a05      	ldr	r2, [pc, #20]	; (8005ba0 <check_fs+0xd8>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d101      	bne.n	8005b92 <check_fs+0xca>
		return 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	e000      	b.n	8005b94 <check_fs+0xcc>

	return 1;
 8005b92:	2301      	movs	r3, #1
}
 8005b94:	0018      	movs	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	b002      	add	sp, #8
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	ffffaa55 	.word	0xffffaa55
 8005ba0:	00544146 	.word	0x00544146

08005ba4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005ba4:	b5b0      	push	{r4, r5, r7, lr}
 8005ba6:	b096      	sub	sp, #88	; 0x58
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	1dfb      	adds	r3, r7, #7
 8005bb0:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f7ff ff42 	bl	8005a44 <get_ldnumber>
 8005bc0:	0003      	movs	r3, r0
 8005bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	da01      	bge.n	8005bce <find_volume+0x2a>
 8005bca:	230b      	movs	r3, #11
 8005bcc:	e2f2      	b.n	80061b4 <find_volume+0x610>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005bce:	4bcf      	ldr	r3, [pc, #828]	; (8005f0c <find_volume+0x368>)
 8005bd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bd2:	0092      	lsls	r2, r2, #2
 8005bd4:	58d3      	ldr	r3, [r2, r3]
 8005bd6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <find_volume+0x3e>
 8005bde:	230c      	movs	r3, #12
 8005be0:	e2e8      	b.n	80061b4 <find_volume+0x610>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005be8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bea:	2380      	movs	r3, #128	; 0x80
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	5cd3      	ldrb	r3, [r2, r3]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01c      	beq.n	8005c2e <find_volume+0x8a>
		stat = disk_status(fs->drv);
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf6:	4ac6      	ldr	r2, [pc, #792]	; (8005f10 <find_volume+0x36c>)
 8005bf8:	5c9b      	ldrb	r3, [r3, r2]
 8005bfa:	2537      	movs	r5, #55	; 0x37
 8005bfc:	197c      	adds	r4, r7, r5
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f7fe fa98 	bl	8004134 <disk_status>
 8005c04:	0003      	movs	r3, r0
 8005c06:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005c08:	0029      	movs	r1, r5
 8005c0a:	187b      	adds	r3, r7, r1
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	4013      	ands	r3, r2
 8005c12:	d10c      	bne.n	8005c2e <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005c14:	1dfb      	adds	r3, r7, #7
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d006      	beq.n	8005c2a <find_volume+0x86>
 8005c1c:	187b      	adds	r3, r7, r1
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2204      	movs	r2, #4
 8005c22:	4013      	ands	r3, r2
 8005c24:	d001      	beq.n	8005c2a <find_volume+0x86>
				return FR_WRITE_PROTECTED;
 8005c26:	230a      	movs	r3, #10
 8005c28:	e2c4      	b.n	80061b4 <find_volume+0x610>
			return FR_OK;				/* The file system object is valid */
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	e2c2      	b.n	80061b4 <find_volume+0x610>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005c2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c30:	2380      	movs	r3, #128	; 0x80
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	2100      	movs	r1, #0
 8005c36:	54d1      	strb	r1, [r2, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c3a:	b2d9      	uxtb	r1, r3
 8005c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3e:	4ab4      	ldr	r2, [pc, #720]	; (8005f10 <find_volume+0x36c>)
 8005c40:	5499      	strb	r1, [r3, r2]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	4ab2      	ldr	r2, [pc, #712]	; (8005f10 <find_volume+0x36c>)
 8005c46:	5c9b      	ldrb	r3, [r3, r2]
 8005c48:	2537      	movs	r5, #55	; 0x37
 8005c4a:	197c      	adds	r4, r7, r5
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	f7fe fa93 	bl	8004178 <disk_initialize>
 8005c52:	0003      	movs	r3, r0
 8005c54:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005c56:	197b      	adds	r3, r7, r5
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	d001      	beq.n	8005c64 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005c60:	2303      	movs	r3, #3
 8005c62:	e2a7      	b.n	80061b4 <find_volume+0x610>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005c64:	1dfb      	adds	r3, r7, #7
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d007      	beq.n	8005c7c <find_volume+0xd8>
 8005c6c:	2337      	movs	r3, #55	; 0x37
 8005c6e:	18fb      	adds	r3, r7, r3
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2204      	movs	r2, #4
 8005c74:	4013      	ands	r3, r2
 8005c76:	d001      	beq.n	8005c7c <find_volume+0xd8>
		return FR_WRITE_PROTECTED;
 8005c78:	230a      	movs	r3, #10
 8005c7a:	e29b      	b.n	80061b4 <find_volume+0x610>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005c80:	2557      	movs	r5, #87	; 0x57
 8005c82:	197c      	adds	r4, r7, r5
 8005c84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	0011      	movs	r1, r2
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	f7ff ff1c 	bl	8005ac8 <check_fs>
 8005c90:	0003      	movs	r3, r0
 8005c92:	7023      	strb	r3, [r4, #0]
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005c94:	197b      	adds	r3, r7, r5
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d155      	bne.n	8005d48 <find_volume+0x1a4>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	643b      	str	r3, [r7, #64]	; 0x40
 8005ca0:	e027      	b.n	8005cf2 <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005ca2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	33bf      	adds	r3, #191	; 0xbf
 8005caa:	33ff      	adds	r3, #255	; 0xff
 8005cac:	18d3      	adds	r3, r2, r3
 8005cae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d012      	beq.n	8005ce0 <find_volume+0x13c>
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	330b      	adds	r3, #11
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	061a      	lsls	r2, r3, #24
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	330a      	adds	r3, #10
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	041b      	lsls	r3, r3, #16
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cce:	3209      	adds	r2, #9
 8005cd0:	7812      	ldrb	r2, [r2, #0]
 8005cd2:	0212      	lsls	r2, r2, #8
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd8:	3208      	adds	r2, #8
 8005cda:	7812      	ldrb	r2, [r2, #0]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	e000      	b.n	8005ce2 <find_volume+0x13e>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	2214      	movs	r2, #20
 8005ce4:	18ba      	adds	r2, r7, r2
 8005ce6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ce8:	0089      	lsls	r1, r1, #2
 8005cea:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cee:	3301      	adds	r3, #1
 8005cf0:	643b      	str	r3, [r7, #64]	; 0x40
 8005cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d9d4      	bls.n	8005ca2 <find_volume+0xfe>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <find_volume+0x164>
 8005d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d04:	3b01      	subs	r3, #1
 8005d06:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005d08:	2314      	movs	r3, #20
 8005d0a:	18fb      	adds	r3, r7, r3
 8005d0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d0e:	0092      	lsls	r2, r2, #2
 8005d10:	58d3      	ldr	r3, [r2, r3]
 8005d12:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d008      	beq.n	8005d2c <find_volume+0x188>
 8005d1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1e:	0011      	movs	r1, r2
 8005d20:	0018      	movs	r0, r3
 8005d22:	f7ff fed1 	bl	8005ac8 <check_fs>
 8005d26:	0003      	movs	r3, r0
 8005d28:	001a      	movs	r2, r3
 8005d2a:	e000      	b.n	8005d2e <find_volume+0x18a>
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	2157      	movs	r1, #87	; 0x57
 8005d30:	187b      	adds	r3, r7, r1
 8005d32:	701a      	strb	r2, [r3, #0]
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005d34:	187b      	adds	r3, r7, r1
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d005      	beq.n	8005d48 <find_volume+0x1a4>
 8005d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d3e:	3301      	adds	r3, #1
 8005d40:	643b      	str	r3, [r7, #64]	; 0x40
 8005d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d9df      	bls.n	8005d08 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005d48:	2357      	movs	r3, #87	; 0x57
 8005d4a:	18fb      	adds	r3, r7, r3
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d101      	bne.n	8005d56 <find_volume+0x1b2>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e22e      	b.n	80061b4 <find_volume+0x610>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005d56:	2357      	movs	r3, #87	; 0x57
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <find_volume+0x1c0>
 8005d60:	230d      	movs	r3, #13
 8005d62:	e227      	b.n	80061b4 <find_volume+0x610>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d66:	7b1b      	ldrb	r3, [r3, #12]
 8005d68:	021b      	lsls	r3, r3, #8
 8005d6a:	b21a      	sxth	r2, r3
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6e:	7adb      	ldrb	r3, [r3, #11]
 8005d70:	b21b      	sxth	r3, r3
 8005d72:	4313      	orrs	r3, r2
 8005d74:	b21a      	sxth	r2, r3
 8005d76:	2380      	movs	r3, #128	; 0x80
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d001      	beq.n	8005d82 <find_volume+0x1de>
		return FR_NO_FILESYSTEM;
 8005d7e:	230d      	movs	r3, #13
 8005d80:	e218      	b.n	80061b4 <find_volume+0x610>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	7ddb      	ldrb	r3, [r3, #23]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	b21a      	sxth	r2, r3
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8c:	7d9b      	ldrb	r3, [r3, #22]
 8005d8e:	b21b      	sxth	r3, r3
 8005d90:	4313      	orrs	r3, r2
 8005d92:	b21b      	sxth	r3, r3
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d112      	bne.n	8005dc4 <find_volume+0x220>
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da0:	2227      	movs	r2, #39	; 0x27
 8005da2:	5c9b      	ldrb	r3, [r3, r2]
 8005da4:	061a      	lsls	r2, r3, #24
 8005da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da8:	2126      	movs	r1, #38	; 0x26
 8005daa:	5c5b      	ldrb	r3, [r3, r1]
 8005dac:	041b      	lsls	r3, r3, #16
 8005dae:	4313      	orrs	r3, r2
 8005db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005db2:	2125      	movs	r1, #37	; 0x25
 8005db4:	5c52      	ldrb	r2, [r2, r1]
 8005db6:	0212      	lsls	r2, r2, #8
 8005db8:	4313      	orrs	r3, r2
 8005dba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dbc:	2124      	movs	r1, #36	; 0x24
 8005dbe:	5c52      	ldrb	r2, [r2, r1]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dc6:	2386      	movs	r3, #134	; 0x86
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005dcc:	50d1      	str	r1, [r2, r3]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	7c19      	ldrb	r1, [r3, #16]
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	4a4f      	ldr	r2, [pc, #316]	; (8005f14 <find_volume+0x370>)
 8005dd6:	5499      	strb	r1, [r3, r2]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dda:	4a4e      	ldr	r2, [pc, #312]	; (8005f14 <find_volume+0x370>)
 8005ddc:	5c9b      	ldrb	r3, [r3, r2]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d006      	beq.n	8005df0 <find_volume+0x24c>
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	4a4b      	ldr	r2, [pc, #300]	; (8005f14 <find_volume+0x370>)
 8005de6:	5c9b      	ldrb	r3, [r3, r2]
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d001      	beq.n	8005df0 <find_volume+0x24c>
		return FR_NO_FILESYSTEM;
 8005dec:	230d      	movs	r3, #13
 8005dee:	e1e1      	b.n	80061b4 <find_volume+0x610>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	4a48      	ldr	r2, [pc, #288]	; (8005f14 <find_volume+0x370>)
 8005df4:	5c9b      	ldrb	r3, [r3, r2]
 8005df6:	001a      	movs	r2, r3
 8005df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dfa:	4353      	muls	r3, r2
 8005dfc:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	7b59      	ldrb	r1, [r3, #13]
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	4a44      	ldr	r2, [pc, #272]	; (8005f18 <find_volume+0x374>)
 8005e06:	5499      	strb	r1, [r3, r2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0a:	4a43      	ldr	r2, [pc, #268]	; (8005f18 <find_volume+0x374>)
 8005e0c:	5c9b      	ldrb	r3, [r3, r2]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d009      	beq.n	8005e26 <find_volume+0x282>
 8005e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e14:	4a40      	ldr	r2, [pc, #256]	; (8005f18 <find_volume+0x374>)
 8005e16:	5c9b      	ldrb	r3, [r3, r2]
 8005e18:	0019      	movs	r1, r3
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1c:	4a3e      	ldr	r2, [pc, #248]	; (8005f18 <find_volume+0x374>)
 8005e1e:	5c9b      	ldrb	r3, [r3, r2]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	400b      	ands	r3, r1
 8005e24:	d001      	beq.n	8005e2a <find_volume+0x286>
		return FR_NO_FILESYSTEM;
 8005e26:	230d      	movs	r3, #13
 8005e28:	e1c4      	b.n	80061b4 <find_volume+0x610>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2c:	7c9b      	ldrb	r3, [r3, #18]
 8005e2e:	021b      	lsls	r3, r3, #8
 8005e30:	b21a      	sxth	r2, r3
 8005e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e34:	7c5b      	ldrb	r3, [r3, #17]
 8005e36:	b21b      	sxth	r3, r3
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	b21b      	sxth	r3, r3
 8005e3c:	b299      	uxth	r1, r3
 8005e3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e40:	2382      	movs	r3, #130	; 0x82
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	52d1      	strh	r1, [r2, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e48:	2382      	movs	r3, #130	; 0x82
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	5ad3      	ldrh	r3, [r2, r3]
 8005e4e:	220f      	movs	r2, #15
 8005e50:	4013      	ands	r3, r2
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <find_volume+0x2b8>
		return FR_NO_FILESYSTEM;
 8005e58:	230d      	movs	r3, #13
 8005e5a:	e1ab      	b.n	80061b4 <find_volume+0x610>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5e:	7d1b      	ldrb	r3, [r3, #20]
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	b21a      	sxth	r2, r3
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	7cdb      	ldrb	r3, [r3, #19]
 8005e68:	b21b      	sxth	r3, r3
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	b21b      	sxth	r3, r3
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d112      	bne.n	8005e9e <find_volume+0x2fa>
 8005e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7a:	2223      	movs	r2, #35	; 0x23
 8005e7c:	5c9b      	ldrb	r3, [r3, r2]
 8005e7e:	061a      	lsls	r2, r3, #24
 8005e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e82:	2122      	movs	r1, #34	; 0x22
 8005e84:	5c5b      	ldrb	r3, [r3, r1]
 8005e86:	041b      	lsls	r3, r3, #16
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e8c:	2121      	movs	r1, #33	; 0x21
 8005e8e:	5c52      	ldrb	r2, [r2, r1]
 8005e90:	0212      	lsls	r2, r2, #8
 8005e92:	4313      	orrs	r3, r2
 8005e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e96:	2120      	movs	r1, #32
 8005e98:	5c52      	ldrb	r2, [r2, r1]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	7bdb      	ldrb	r3, [r3, #15]
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	b21a      	sxth	r2, r3
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	7b9b      	ldrb	r3, [r3, #14]
 8005eaa:	b21b      	sxth	r3, r3
 8005eac:	4313      	orrs	r3, r2
 8005eae:	b21a      	sxth	r2, r3
 8005eb0:	212e      	movs	r1, #46	; 0x2e
 8005eb2:	187b      	adds	r3, r7, r1
 8005eb4:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005eb6:	187b      	adds	r3, r7, r1
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <find_volume+0x31e>
 8005ebe:	230d      	movs	r3, #13
 8005ec0:	e178      	b.n	80061b4 <find_volume+0x610>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005ec2:	232e      	movs	r3, #46	; 0x2e
 8005ec4:	18fb      	adds	r3, r7, r3
 8005ec6:	881a      	ldrh	r2, [r3, #0]
 8005ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eca:	18d3      	adds	r3, r2, r3
 8005ecc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ece:	2282      	movs	r2, #130	; 0x82
 8005ed0:	0092      	lsls	r2, r2, #2
 8005ed2:	5a8a      	ldrh	r2, [r1, r2]
 8005ed4:	0912      	lsrs	r2, r2, #4
 8005ed6:	b292      	uxth	r2, r2
 8005ed8:	189b      	adds	r3, r3, r2
 8005eda:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005edc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d201      	bcs.n	8005ee8 <find_volume+0x344>
 8005ee4:	230d      	movs	r3, #13
 8005ee6:	e165      	b.n	80061b4 <find_volume+0x610>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eec:	1ad2      	subs	r2, r2, r3
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	4909      	ldr	r1, [pc, #36]	; (8005f18 <find_volume+0x374>)
 8005ef2:	5c5b      	ldrb	r3, [r3, r1]
 8005ef4:	0019      	movs	r1, r3
 8005ef6:	0010      	movs	r0, r2
 8005ef8:	f7fa f904 	bl	8000104 <__udivsi3>
 8005efc:	0003      	movs	r3, r0
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10a      	bne.n	8005f1c <find_volume+0x378>
 8005f06:	230d      	movs	r3, #13
 8005f08:	e154      	b.n	80061b4 <find_volume+0x610>
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	20000614 	.word	0x20000614
 8005f10:	00000201 	.word	0x00000201
 8005f14:	00000203 	.word	0x00000203
 8005f18:	00000202 	.word	0x00000202
	fmt = FS_FAT12;
 8005f1c:	2157      	movs	r1, #87	; 0x57
 8005f1e:	187b      	adds	r3, r7, r1
 8005f20:	2201      	movs	r2, #1
 8005f22:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	4aa5      	ldr	r2, [pc, #660]	; (80061bc <find_volume+0x618>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d902      	bls.n	8005f32 <find_volume+0x38e>
 8005f2c:	187b      	adds	r3, r7, r1
 8005f2e:	2202      	movs	r2, #2
 8005f30:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	4aa2      	ldr	r2, [pc, #648]	; (80061c0 <find_volume+0x61c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d903      	bls.n	8005f42 <find_volume+0x39e>
 8005f3a:	2357      	movs	r3, #87	; 0x57
 8005f3c:	18fb      	adds	r3, r7, r3
 8005f3e:	2203      	movs	r2, #3
 8005f40:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	1c99      	adds	r1, r3, #2
 8005f46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f48:	2385      	movs	r3, #133	; 0x85
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	50d1      	str	r1, [r2, r3]
	fs->volbase = bsect;								/* Volume start sector */
 8005f4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f50:	2387      	movs	r3, #135	; 0x87
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f56:	50d1      	str	r1, [r2, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005f58:	232e      	movs	r3, #46	; 0x2e
 8005f5a:	18fb      	adds	r3, r7, r3
 8005f5c:	881a      	ldrh	r2, [r3, #0]
 8005f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f60:	18d1      	adds	r1, r2, r3
 8005f62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f64:	2388      	movs	r3, #136	; 0x88
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	50d1      	str	r1, [r2, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 8005f6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6e:	18d1      	adds	r1, r2, r3
 8005f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f72:	238a      	movs	r3, #138	; 0x8a
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	50d1      	str	r1, [r2, r3]
	if (fmt == FS_FAT32) {
 8005f78:	2357      	movs	r3, #87	; 0x57
 8005f7a:	18fb      	adds	r3, r7, r3
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d125      	bne.n	8005fce <find_volume+0x42a>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f84:	2382      	movs	r3, #130	; 0x82
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	5ad3      	ldrh	r3, [r2, r3]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <find_volume+0x3ee>
 8005f8e:	230d      	movs	r3, #13
 8005f90:	e110      	b.n	80061b4 <find_volume+0x610>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f94:	222f      	movs	r2, #47	; 0x2f
 8005f96:	5c9b      	ldrb	r3, [r3, r2]
 8005f98:	061a      	lsls	r2, r3, #24
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9c:	212e      	movs	r1, #46	; 0x2e
 8005f9e:	5c5b      	ldrb	r3, [r3, r1]
 8005fa0:	041b      	lsls	r3, r3, #16
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fa6:	212d      	movs	r1, #45	; 0x2d
 8005fa8:	5c52      	ldrb	r2, [r2, r1]
 8005faa:	0212      	lsls	r2, r2, #8
 8005fac:	4313      	orrs	r3, r2
 8005fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fb0:	212c      	movs	r1, #44	; 0x2c
 8005fb2:	5c52      	ldrb	r2, [r2, r1]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	0019      	movs	r1, r3
 8005fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fba:	2389      	movs	r3, #137	; 0x89
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	50d1      	str	r1, [r2, r3]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fc2:	2385      	movs	r3, #133	; 0x85
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	58d3      	ldr	r3, [r2, r3]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	647b      	str	r3, [r7, #68]	; 0x44
 8005fcc:	e02c      	b.n	8006028 <find_volume+0x484>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fd0:	2382      	movs	r3, #130	; 0x82
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	5ad3      	ldrh	r3, [r2, r3]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <find_volume+0x43a>
 8005fda:	230d      	movs	r3, #13
 8005fdc:	e0ea      	b.n	80061b4 <find_volume+0x610>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fe0:	2388      	movs	r3, #136	; 0x88
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	58d2      	ldr	r2, [r2, r3]
 8005fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fe8:	18d1      	adds	r1, r2, r3
 8005fea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fec:	2389      	movs	r3, #137	; 0x89
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	50d1      	str	r1, [r2, r3]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005ff2:	2357      	movs	r3, #87	; 0x57
 8005ff4:	18fb      	adds	r3, r7, r3
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d105      	bne.n	8006008 <find_volume+0x464>
 8005ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ffe:	2385      	movs	r3, #133	; 0x85
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	58d3      	ldr	r3, [r2, r3]
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	e00e      	b.n	8006026 <find_volume+0x482>
 8006008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800600a:	2385      	movs	r3, #133	; 0x85
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	58d2      	ldr	r2, [r2, r3]
 8006010:	0013      	movs	r3, r2
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	189b      	adds	r3, r3, r2
 8006016:	085a      	lsrs	r2, r3, #1
 8006018:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800601a:	2385      	movs	r3, #133	; 0x85
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	58cb      	ldr	r3, [r1, r3]
 8006020:	2101      	movs	r1, #1
 8006022:	400b      	ands	r3, r1
 8006024:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006026:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800602a:	2386      	movs	r3, #134	; 0x86
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	58d2      	ldr	r2, [r2, r3]
 8006030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006032:	4964      	ldr	r1, [pc, #400]	; (80061c4 <find_volume+0x620>)
 8006034:	468c      	mov	ip, r1
 8006036:	4463      	add	r3, ip
 8006038:	0a5b      	lsrs	r3, r3, #9
 800603a:	429a      	cmp	r2, r3
 800603c:	d201      	bcs.n	8006042 <find_volume+0x49e>
		return FR_NO_FILESYSTEM;
 800603e:	230d      	movs	r3, #13
 8006040:	e0b8      	b.n	80061b4 <find_volume+0x610>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006044:	2384      	movs	r3, #132	; 0x84
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	2101      	movs	r1, #1
 800604a:	4249      	negs	r1, r1
 800604c:	50d1      	str	r1, [r2, r3]
 800604e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006050:	2384      	movs	r3, #132	; 0x84
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	58d1      	ldr	r1, [r2, r3]
 8006056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006058:	2383      	movs	r3, #131	; 0x83
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	50d1      	str	r1, [r2, r3]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800605e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006060:	4a59      	ldr	r2, [pc, #356]	; (80061c8 <find_volume+0x624>)
 8006062:	2180      	movs	r1, #128	; 0x80
 8006064:	5499      	strb	r1, [r3, r2]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006066:	2357      	movs	r3, #87	; 0x57
 8006068:	18fb      	adds	r3, r7, r3
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b03      	cmp	r3, #3
 800606e:	d000      	beq.n	8006072 <find_volume+0x4ce>
 8006070:	e089      	b.n	8006186 <find_volume+0x5e2>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	2231      	movs	r2, #49	; 0x31
 8006076:	5c9b      	ldrb	r3, [r3, r2]
 8006078:	021b      	lsls	r3, r3, #8
 800607a:	b21a      	sxth	r2, r3
 800607c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607e:	2130      	movs	r1, #48	; 0x30
 8006080:	5c5b      	ldrb	r3, [r3, r1]
 8006082:	b21b      	sxth	r3, r3
 8006084:	4313      	orrs	r3, r2
 8006086:	b21b      	sxth	r3, r3
 8006088:	2b01      	cmp	r3, #1
 800608a:	d000      	beq.n	800608e <find_volume+0x4ea>
 800608c:	e07b      	b.n	8006186 <find_volume+0x5e2>
		&& move_window(fs, bsect + 1) == FR_OK)
 800608e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	0011      	movs	r1, r2
 8006096:	0018      	movs	r0, r3
 8006098:	f7fe fba2 	bl	80047e0 <move_window>
 800609c:	1e03      	subs	r3, r0, #0
 800609e:	d172      	bne.n	8006186 <find_volume+0x5e2>
	{
		fs->fsi_flag = 0;
 80060a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a2:	4a49      	ldr	r2, [pc, #292]	; (80061c8 <find_volume+0x624>)
 80060a4:	2100      	movs	r1, #0
 80060a6:	5499      	strb	r1, [r3, r2]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060aa:	4a46      	ldr	r2, [pc, #280]	; (80061c4 <find_volume+0x620>)
 80060ac:	5c9b      	ldrb	r3, [r3, r2]
 80060ae:	021b      	lsls	r3, r3, #8
 80060b0:	b21a      	sxth	r2, r3
 80060b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060b4:	23ff      	movs	r3, #255	; 0xff
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	5ccb      	ldrb	r3, [r1, r3]
 80060ba:	b21b      	sxth	r3, r3
 80060bc:	4313      	orrs	r3, r2
 80060be:	b21b      	sxth	r3, r3
 80060c0:	4a42      	ldr	r2, [pc, #264]	; (80061cc <find_volume+0x628>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d15f      	bne.n	8006186 <find_volume+0x5e2>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	78db      	ldrb	r3, [r3, #3]
 80060ca:	061a      	lsls	r2, r3, #24
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	789b      	ldrb	r3, [r3, #2]
 80060d0:	041b      	lsls	r3, r3, #16
 80060d2:	4313      	orrs	r3, r2
 80060d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060d6:	7852      	ldrb	r2, [r2, #1]
 80060d8:	0212      	lsls	r2, r2, #8
 80060da:	4313      	orrs	r3, r2
 80060dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060de:	7812      	ldrb	r2, [r2, #0]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	4a3b      	ldr	r2, [pc, #236]	; (80061d0 <find_volume+0x62c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d14e      	bne.n	8006186 <find_volume+0x5e2>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80060e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ea:	23e8      	movs	r3, #232	; 0xe8
 80060ec:	33ff      	adds	r3, #255	; 0xff
 80060ee:	5cd3      	ldrb	r3, [r2, r3]
 80060f0:	061a      	lsls	r2, r3, #24
 80060f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060f4:	23f3      	movs	r3, #243	; 0xf3
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	5ccb      	ldrb	r3, [r1, r3]
 80060fa:	041b      	lsls	r3, r3, #16
 80060fc:	4313      	orrs	r3, r2
 80060fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006100:	22e6      	movs	r2, #230	; 0xe6
 8006102:	32ff      	adds	r2, #255	; 0xff
 8006104:	5c8a      	ldrb	r2, [r1, r2]
 8006106:	0212      	lsls	r2, r2, #8
 8006108:	4313      	orrs	r3, r2
 800610a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800610c:	22f2      	movs	r2, #242	; 0xf2
 800610e:	0052      	lsls	r2, r2, #1
 8006110:	5c8a      	ldrb	r2, [r1, r2]
 8006112:	4313      	orrs	r3, r2
 8006114:	4a2f      	ldr	r2, [pc, #188]	; (80061d4 <find_volume+0x630>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d135      	bne.n	8006186 <find_volume+0x5e2>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800611a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800611c:	23ec      	movs	r3, #236	; 0xec
 800611e:	33ff      	adds	r3, #255	; 0xff
 8006120:	5cd3      	ldrb	r3, [r2, r3]
 8006122:	061a      	lsls	r2, r3, #24
 8006124:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006126:	23f5      	movs	r3, #245	; 0xf5
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	5ccb      	ldrb	r3, [r1, r3]
 800612c:	041b      	lsls	r3, r3, #16
 800612e:	4313      	orrs	r3, r2
 8006130:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006132:	22ea      	movs	r2, #234	; 0xea
 8006134:	32ff      	adds	r2, #255	; 0xff
 8006136:	5c8a      	ldrb	r2, [r1, r2]
 8006138:	0212      	lsls	r2, r2, #8
 800613a:	4313      	orrs	r3, r2
 800613c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800613e:	22f4      	movs	r2, #244	; 0xf4
 8006140:	0052      	lsls	r2, r2, #1
 8006142:	5c8a      	ldrb	r2, [r1, r2]
 8006144:	4313      	orrs	r3, r2
 8006146:	0019      	movs	r1, r3
 8006148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800614a:	2384      	movs	r3, #132	; 0x84
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	50d1      	str	r1, [r2, r3]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006150:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006152:	23f0      	movs	r3, #240	; 0xf0
 8006154:	33ff      	adds	r3, #255	; 0xff
 8006156:	5cd3      	ldrb	r3, [r2, r3]
 8006158:	061a      	lsls	r2, r3, #24
 800615a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800615c:	23f7      	movs	r3, #247	; 0xf7
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	5ccb      	ldrb	r3, [r1, r3]
 8006162:	041b      	lsls	r3, r3, #16
 8006164:	4313      	orrs	r3, r2
 8006166:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006168:	22ee      	movs	r2, #238	; 0xee
 800616a:	32ff      	adds	r2, #255	; 0xff
 800616c:	5c8a      	ldrb	r2, [r1, r2]
 800616e:	0212      	lsls	r2, r2, #8
 8006170:	4313      	orrs	r3, r2
 8006172:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006174:	22f6      	movs	r2, #246	; 0xf6
 8006176:	0052      	lsls	r2, r2, #1
 8006178:	5c8a      	ldrb	r2, [r1, r2]
 800617a:	4313      	orrs	r3, r2
 800617c:	0019      	movs	r1, r3
 800617e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006180:	2383      	movs	r3, #131	; 0x83
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	50d1      	str	r1, [r2, r3]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006188:	2357      	movs	r3, #87	; 0x57
 800618a:	18f9      	adds	r1, r7, r3
 800618c:	2380      	movs	r3, #128	; 0x80
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	7809      	ldrb	r1, [r1, #0]
 8006192:	54d1      	strb	r1, [r2, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 8006194:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <find_volume+0x634>)
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	3301      	adds	r3, #1
 800619a:	b29a      	uxth	r2, r3
 800619c:	4b0e      	ldr	r3, [pc, #56]	; (80061d8 <find_volume+0x634>)
 800619e:	801a      	strh	r2, [r3, #0]
 80061a0:	4b0d      	ldr	r3, [pc, #52]	; (80061d8 <find_volume+0x634>)
 80061a2:	8819      	ldrh	r1, [r3, #0]
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	4a0d      	ldr	r2, [pc, #52]	; (80061dc <find_volume+0x638>)
 80061a8:	5299      	strh	r1, [r3, r2]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80061aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ac:	0018      	movs	r0, r3
 80061ae:	f7fe fa99 	bl	80046e4 <clear_lock>
#endif

	return FR_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	0018      	movs	r0, r3
 80061b6:	46bd      	mov	sp, r7
 80061b8:	b016      	add	sp, #88	; 0x58
 80061ba:	bdb0      	pop	{r4, r5, r7, pc}
 80061bc:	00000ff5 	.word	0x00000ff5
 80061c0:	0000fff5 	.word	0x0000fff5
 80061c4:	000001ff 	.word	0x000001ff
 80061c8:	00000205 	.word	0x00000205
 80061cc:	ffffaa55 	.word	0xffffaa55
 80061d0:	41615252 	.word	0x41615252
 80061d4:	61417272 	.word	0x61417272
 80061d8:	20000618 	.word	0x20000618
 80061dc:	00000206 	.word	0x00000206

080061e0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d028      	beq.n	8006244 <validate+0x64>
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	2380      	movs	r3, #128	; 0x80
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	58d3      	ldr	r3, [r2, r3]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d022      	beq.n	8006244 <validate+0x64>
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	2380      	movs	r3, #128	; 0x80
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	58d2      	ldr	r2, [r2, r3]
 8006206:	2380      	movs	r3, #128	; 0x80
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	5cd3      	ldrb	r3, [r2, r3]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d019      	beq.n	8006244 <validate+0x64>
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	2380      	movs	r3, #128	; 0x80
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	58d3      	ldr	r3, [r2, r3]
 8006218:	4a0e      	ldr	r2, [pc, #56]	; (8006254 <validate+0x74>)
 800621a:	5a9a      	ldrh	r2, [r3, r2]
 800621c:	68f9      	ldr	r1, [r7, #12]
 800621e:	2381      	movs	r3, #129	; 0x81
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	5acb      	ldrh	r3, [r1, r3]
 8006224:	429a      	cmp	r2, r3
 8006226:	d10d      	bne.n	8006244 <validate+0x64>
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	2380      	movs	r3, #128	; 0x80
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	58d3      	ldr	r3, [r2, r3]
 8006230:	4a09      	ldr	r2, [pc, #36]	; (8006258 <validate+0x78>)
 8006232:	5c9b      	ldrb	r3, [r3, r2]
 8006234:	0018      	movs	r0, r3
 8006236:	f7fd ff7d 	bl	8004134 <disk_status>
 800623a:	0003      	movs	r3, r0
 800623c:	001a      	movs	r2, r3
 800623e:	2301      	movs	r3, #1
 8006240:	4013      	ands	r3, r2
 8006242:	d001      	beq.n	8006248 <validate+0x68>
		return FR_INVALID_OBJECT;
 8006244:	2309      	movs	r3, #9
 8006246:	e000      	b.n	800624a <validate+0x6a>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	0018      	movs	r0, r3
 800624c:	46bd      	mov	sp, r7
 800624e:	b004      	add	sp, #16
 8006250:	bd80      	pop	{r7, pc}
 8006252:	46c0      	nop			; (mov r8, r8)
 8006254:	00000206 	.word	0x00000206
 8006258:	00000201 	.word	0x00000201

0800625c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800625c:	b5b0      	push	{r4, r5, r7, lr}
 800625e:	b088      	sub	sp, #32
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	1dfb      	adds	r3, r7, #7
 8006268:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800626e:	2310      	movs	r3, #16
 8006270:	18fb      	adds	r3, r7, r3
 8006272:	0018      	movs	r0, r3
 8006274:	f7ff fbe6 	bl	8005a44 <get_ldnumber>
 8006278:	0003      	movs	r3, r0
 800627a:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	2b00      	cmp	r3, #0
 8006280:	da01      	bge.n	8006286 <f_mount+0x2a>
 8006282:	230b      	movs	r3, #11
 8006284:	e034      	b.n	80062f0 <f_mount+0x94>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006286:	4b1c      	ldr	r3, [pc, #112]	; (80062f8 <f_mount+0x9c>)
 8006288:	69fa      	ldr	r2, [r7, #28]
 800628a:	0092      	lsls	r2, r2, #2
 800628c:	58d3      	ldr	r3, [r2, r3]
 800628e:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d008      	beq.n	80062a8 <f_mount+0x4c>
#if _FS_LOCK
		clear_lock(cfs);
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	0018      	movs	r0, r3
 800629a:	f7fe fa23 	bl	80046e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	2380      	movs	r3, #128	; 0x80
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	2100      	movs	r1, #0
 80062a6:	54d1      	strb	r1, [r2, r3]
	}

	if (fs) {
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d004      	beq.n	80062b8 <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	2380      	movs	r3, #128	; 0x80
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	2100      	movs	r1, #0
 80062b6:	54d1      	strb	r1, [r2, r3]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80062b8:	68f9      	ldr	r1, [r7, #12]
 80062ba:	4b0f      	ldr	r3, [pc, #60]	; (80062f8 <f_mount+0x9c>)
 80062bc:	69fa      	ldr	r2, [r7, #28]
 80062be:	0092      	lsls	r2, r2, #2
 80062c0:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <f_mount+0x74>
 80062c8:	1dfb      	adds	r3, r7, #7
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d001      	beq.n	80062d4 <f_mount+0x78>
 80062d0:	2300      	movs	r3, #0
 80062d2:	e00d      	b.n	80062f0 <f_mount+0x94>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80062d4:	2517      	movs	r5, #23
 80062d6:	197c      	adds	r4, r7, r5
 80062d8:	2308      	movs	r3, #8
 80062da:	18f9      	adds	r1, r7, r3
 80062dc:	230c      	movs	r3, #12
 80062de:	18fb      	adds	r3, r7, r3
 80062e0:	2200      	movs	r2, #0
 80062e2:	0018      	movs	r0, r3
 80062e4:	f7ff fc5e 	bl	8005ba4 <find_volume>
 80062e8:	0003      	movs	r3, r0
 80062ea:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 80062ec:	197b      	adds	r3, r7, r5
 80062ee:	781b      	ldrb	r3, [r3, #0]
}
 80062f0:	0018      	movs	r0, r3
 80062f2:	46bd      	mov	sp, r7
 80062f4:	b008      	add	sp, #32
 80062f6:	bdb0      	pop	{r4, r5, r7, pc}
 80062f8:	20000614 	.word	0x20000614

080062fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80062fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062fe:	4ccf      	ldr	r4, [pc, #828]	; (800663c <f_open+0x340>)
 8006300:	44a5      	add	sp, r4
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	4bcd      	ldr	r3, [pc, #820]	; (8006640 <f_open+0x344>)
 800630a:	2194      	movs	r1, #148	; 0x94
 800630c:	0089      	lsls	r1, r1, #2
 800630e:	185b      	adds	r3, r3, r1
 8006310:	19db      	adds	r3, r3, r7
 8006312:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <f_open+0x22>
 800631a:	2309      	movs	r3, #9
 800631c:	e262      	b.n	80067e4 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	2380      	movs	r3, #128	; 0x80
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	2100      	movs	r1, #0
 8006326:	50d1      	str	r1, [r2, r3]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006328:	4bc5      	ldr	r3, [pc, #788]	; (8006640 <f_open+0x344>)
 800632a:	2594      	movs	r5, #148	; 0x94
 800632c:	00ad      	lsls	r5, r5, #2
 800632e:	195b      	adds	r3, r3, r5
 8006330:	19db      	adds	r3, r3, r7
 8006332:	4ac3      	ldr	r2, [pc, #780]	; (8006640 <f_open+0x344>)
 8006334:	1952      	adds	r2, r2, r5
 8006336:	19d2      	adds	r2, r2, r7
 8006338:	7812      	ldrb	r2, [r2, #0]
 800633a:	211f      	movs	r1, #31
 800633c:	400a      	ands	r2, r1
 800633e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006340:	4bbf      	ldr	r3, [pc, #764]	; (8006640 <f_open+0x344>)
 8006342:	195b      	adds	r3, r3, r5
 8006344:	19db      	adds	r3, r3, r7
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2201      	movs	r2, #1
 800634a:	4393      	bics	r3, r2
 800634c:	b2da      	uxtb	r2, r3
 800634e:	4ebd      	ldr	r6, [pc, #756]	; (8006644 <f_open+0x348>)
 8006350:	19bc      	adds	r4, r7, r6
 8006352:	2308      	movs	r3, #8
 8006354:	18f9      	adds	r1, r7, r3
 8006356:	2320      	movs	r3, #32
 8006358:	18fb      	adds	r3, r7, r3
 800635a:	2080      	movs	r0, #128	; 0x80
 800635c:	0080      	lsls	r0, r0, #2
 800635e:	4684      	mov	ip, r0
 8006360:	4463      	add	r3, ip
 8006362:	0018      	movs	r0, r3
 8006364:	f7ff fc1e 	bl	8005ba4 <find_volume>
 8006368:	0003      	movs	r3, r0
 800636a:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800636c:	19bb      	adds	r3, r7, r6
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d000      	beq.n	8006376 <f_open+0x7a>
 8006374:	e233      	b.n	80067de <f_open+0x4e2>
		INIT_BUF(dj);
 8006376:	4bb4      	ldr	r3, [pc, #720]	; (8006648 <f_open+0x34c>)
 8006378:	195a      	adds	r2, r3, r5
 800637a:	19d2      	adds	r2, r2, r7
 800637c:	2386      	movs	r3, #134	; 0x86
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	2114      	movs	r1, #20
 8006382:	1879      	adds	r1, r7, r1
 8006384:	50d1      	str	r1, [r2, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	19bc      	adds	r4, r7, r6
 800638a:	2320      	movs	r3, #32
 800638c:	18fb      	adds	r3, r7, r3
 800638e:	0011      	movs	r1, r2
 8006390:	0018      	movs	r0, r3
 8006392:	f7ff facf 	bl	8005934 <follow_path>
 8006396:	0003      	movs	r3, r0
 8006398:	7023      	strb	r3, [r4, #0]
		dir = dj.dir;
 800639a:	4bab      	ldr	r3, [pc, #684]	; (8006648 <f_open+0x34c>)
 800639c:	195b      	adds	r3, r3, r5
 800639e:	19da      	adds	r2, r3, r7
 80063a0:	2385      	movs	r3, #133	; 0x85
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	58d3      	ldr	r3, [r2, r3]
 80063a6:	2292      	movs	r2, #146	; 0x92
 80063a8:	0092      	lsls	r2, r2, #2
 80063aa:	18b9      	adds	r1, r7, r2
 80063ac:	600b      	str	r3, [r1, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80063ae:	19bb      	adds	r3, r7, r6
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d11d      	bne.n	80063f2 <f_open+0xf6>
			if (!dir)	/* Default directory itself */
 80063b6:	18bb      	adds	r3, r7, r2
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d103      	bne.n	80063c6 <f_open+0xca>
				res = FR_INVALID_NAME;
 80063be:	19bb      	adds	r3, r7, r6
 80063c0:	2206      	movs	r2, #6
 80063c2:	701a      	strb	r2, [r3, #0]
 80063c4:	e015      	b.n	80063f2 <f_open+0xf6>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80063c6:	4b9e      	ldr	r3, [pc, #632]	; (8006640 <f_open+0x344>)
 80063c8:	2294      	movs	r2, #148	; 0x94
 80063ca:	0092      	lsls	r2, r2, #2
 80063cc:	189b      	adds	r3, r3, r2
 80063ce:	19db      	adds	r3, r3, r7
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	2201      	movs	r2, #1
 80063d4:	4393      	bics	r3, r2
 80063d6:	1e5a      	subs	r2, r3, #1
 80063d8:	4193      	sbcs	r3, r2
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	001a      	movs	r2, r3
 80063de:	4b99      	ldr	r3, [pc, #612]	; (8006644 <f_open+0x348>)
 80063e0:	18fc      	adds	r4, r7, r3
 80063e2:	2320      	movs	r3, #32
 80063e4:	18fb      	adds	r3, r7, r3
 80063e6:	0011      	movs	r1, r2
 80063e8:	0018      	movs	r0, r3
 80063ea:	f7fd ffe1 	bl	80043b0 <chk_lock>
 80063ee:	0003      	movs	r3, r0
 80063f0:	7023      	strb	r3, [r4, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80063f2:	4b93      	ldr	r3, [pc, #588]	; (8006640 <f_open+0x344>)
 80063f4:	2294      	movs	r2, #148	; 0x94
 80063f6:	0092      	lsls	r2, r2, #2
 80063f8:	189b      	adds	r3, r3, r2
 80063fa:	19db      	adds	r3, r3, r7
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	221c      	movs	r2, #28
 8006400:	4013      	ands	r3, r2
 8006402:	d100      	bne.n	8006406 <f_open+0x10a>
 8006404:	e106      	b.n	8006614 <f_open+0x318>
			if (res != FR_OK) {					/* No file, create new */
 8006406:	4a8f      	ldr	r2, [pc, #572]	; (8006644 <f_open+0x348>)
 8006408:	18bb      	adds	r3, r7, r2
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d02a      	beq.n	8006466 <f_open+0x16a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006410:	18bb      	adds	r3, r7, r2
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b04      	cmp	r3, #4
 8006416:	d10f      	bne.n	8006438 <f_open+0x13c>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006418:	f7fe f838 	bl	800448c <enq_lock>
 800641c:	1e03      	subs	r3, r0, #0
 800641e:	d007      	beq.n	8006430 <f_open+0x134>
 8006420:	2320      	movs	r3, #32
 8006422:	18fb      	adds	r3, r7, r3
 8006424:	0018      	movs	r0, r3
 8006426:	f7ff f93c 	bl	80056a2 <dir_register>
 800642a:	0003      	movs	r3, r0
 800642c:	001a      	movs	r2, r3
 800642e:	e000      	b.n	8006432 <f_open+0x136>
 8006430:	2212      	movs	r2, #18
 8006432:	4b84      	ldr	r3, [pc, #528]	; (8006644 <f_open+0x348>)
 8006434:	18fb      	adds	r3, r7, r3
 8006436:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006438:	4b81      	ldr	r3, [pc, #516]	; (8006640 <f_open+0x344>)
 800643a:	2094      	movs	r0, #148	; 0x94
 800643c:	0080      	lsls	r0, r0, #2
 800643e:	181b      	adds	r3, r3, r0
 8006440:	19db      	adds	r3, r3, r7
 8006442:	4a7f      	ldr	r2, [pc, #508]	; (8006640 <f_open+0x344>)
 8006444:	1812      	adds	r2, r2, r0
 8006446:	19d2      	adds	r2, r2, r7
 8006448:	7812      	ldrb	r2, [r2, #0]
 800644a:	2108      	movs	r1, #8
 800644c:	430a      	orrs	r2, r1
 800644e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8006450:	4b7d      	ldr	r3, [pc, #500]	; (8006648 <f_open+0x34c>)
 8006452:	181b      	adds	r3, r3, r0
 8006454:	19da      	adds	r2, r3, r7
 8006456:	2385      	movs	r3, #133	; 0x85
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	58d3      	ldr	r3, [r2, r3]
 800645c:	2292      	movs	r2, #146	; 0x92
 800645e:	0092      	lsls	r2, r2, #2
 8006460:	18ba      	adds	r2, r7, r2
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	e01b      	b.n	800649e <f_open+0x1a2>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006466:	2392      	movs	r3, #146	; 0x92
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	18fb      	adds	r3, r7, r3
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	330b      	adds	r3, #11
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	001a      	movs	r2, r3
 8006474:	2311      	movs	r3, #17
 8006476:	4013      	ands	r3, r2
 8006478:	d004      	beq.n	8006484 <f_open+0x188>
					res = FR_DENIED;
 800647a:	4b72      	ldr	r3, [pc, #456]	; (8006644 <f_open+0x348>)
 800647c:	18fb      	adds	r3, r7, r3
 800647e:	2207      	movs	r2, #7
 8006480:	701a      	strb	r2, [r3, #0]
 8006482:	e00c      	b.n	800649e <f_open+0x1a2>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006484:	4b6e      	ldr	r3, [pc, #440]	; (8006640 <f_open+0x344>)
 8006486:	2294      	movs	r2, #148	; 0x94
 8006488:	0092      	lsls	r2, r2, #2
 800648a:	189b      	adds	r3, r3, r2
 800648c:	19db      	adds	r3, r3, r7
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2204      	movs	r2, #4
 8006492:	4013      	ands	r3, r2
 8006494:	d003      	beq.n	800649e <f_open+0x1a2>
						res = FR_EXIST;
 8006496:	4b6b      	ldr	r3, [pc, #428]	; (8006644 <f_open+0x348>)
 8006498:	18fb      	adds	r3, r7, r3
 800649a:	2208      	movs	r2, #8
 800649c:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800649e:	4869      	ldr	r0, [pc, #420]	; (8006644 <f_open+0x348>)
 80064a0:	183b      	adds	r3, r7, r0
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d000      	beq.n	80064aa <f_open+0x1ae>
 80064a8:	e0e7      	b.n	800667a <f_open+0x37e>
 80064aa:	4b65      	ldr	r3, [pc, #404]	; (8006640 <f_open+0x344>)
 80064ac:	2494      	movs	r4, #148	; 0x94
 80064ae:	00a4      	lsls	r4, r4, #2
 80064b0:	191b      	adds	r3, r3, r4
 80064b2:	19db      	adds	r3, r3, r7
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2208      	movs	r2, #8
 80064b8:	4013      	ands	r3, r2
 80064ba:	d100      	bne.n	80064be <f_open+0x1c2>
 80064bc:	e0dd      	b.n	800667a <f_open+0x37e>
				dw = GET_FATTIME();				/* Created time */
 80064be:	f7fd f861 	bl	8003584 <get_fattime>
 80064c2:	0003      	movs	r3, r0
 80064c4:	2691      	movs	r6, #145	; 0x91
 80064c6:	00b6      	lsls	r6, r6, #2
 80064c8:	19ba      	adds	r2, r7, r6
 80064ca:	6013      	str	r3, [r2, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 80064cc:	2192      	movs	r1, #146	; 0x92
 80064ce:	0089      	lsls	r1, r1, #2
 80064d0:	187b      	adds	r3, r7, r1
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	330e      	adds	r3, #14
 80064d6:	19ba      	adds	r2, r7, r6
 80064d8:	6812      	ldr	r2, [r2, #0]
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	19bb      	adds	r3, r7, r6
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	0a1b      	lsrs	r3, r3, #8
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	187b      	adds	r3, r7, r1
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	330f      	adds	r3, #15
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	701a      	strb	r2, [r3, #0]
 80064f2:	19bb      	adds	r3, r7, r6
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	0c1a      	lsrs	r2, r3, #16
 80064f8:	187b      	adds	r3, r7, r1
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3310      	adds	r3, #16
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	701a      	strb	r2, [r3, #0]
 8006502:	19bb      	adds	r3, r7, r6
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	0e1a      	lsrs	r2, r3, #24
 8006508:	187b      	adds	r3, r7, r1
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3311      	adds	r3, #17
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006512:	187b      	adds	r3, r7, r1
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	330b      	adds	r3, #11
 8006518:	2200      	movs	r2, #0
 800651a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800651c:	187b      	adds	r3, r7, r1
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	331c      	adds	r3, #28
 8006522:	2200      	movs	r2, #0
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	187b      	adds	r3, r7, r1
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	331d      	adds	r3, #29
 800652c:	2200      	movs	r2, #0
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	187b      	adds	r3, r7, r1
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	331e      	adds	r3, #30
 8006536:	2200      	movs	r2, #0
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	187b      	adds	r3, r7, r1
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	331f      	adds	r3, #31
 8006540:	2200      	movs	r2, #0
 8006542:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006544:	4b40      	ldr	r3, [pc, #256]	; (8006648 <f_open+0x34c>)
 8006546:	0025      	movs	r5, r4
 8006548:	191b      	adds	r3, r3, r4
 800654a:	19da      	adds	r2, r3, r7
 800654c:	2380      	movs	r3, #128	; 0x80
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	58d3      	ldr	r3, [r2, r3]
 8006552:	000c      	movs	r4, r1
 8006554:	187a      	adds	r2, r7, r1
 8006556:	6812      	ldr	r2, [r2, #0]
 8006558:	0011      	movs	r1, r2
 800655a:	0018      	movs	r0, r3
 800655c:	f7fe ffeb 	bl	8005536 <ld_clust>
 8006560:	0003      	movs	r3, r0
 8006562:	2190      	movs	r1, #144	; 0x90
 8006564:	0089      	lsls	r1, r1, #2
 8006566:	187a      	adds	r2, r7, r1
 8006568:	6013      	str	r3, [r2, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800656a:	193b      	adds	r3, r7, r4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2100      	movs	r1, #0
 8006570:	0018      	movs	r0, r3
 8006572:	f7ff f80d 	bl	8005590 <st_clust>
				dj.fs->wflag = 1;
 8006576:	4b34      	ldr	r3, [pc, #208]	; (8006648 <f_open+0x34c>)
 8006578:	195b      	adds	r3, r3, r5
 800657a:	19da      	adds	r2, r3, r7
 800657c:	2380      	movs	r3, #128	; 0x80
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	58d2      	ldr	r2, [r2, r3]
 8006582:	2381      	movs	r3, #129	; 0x81
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	2101      	movs	r1, #1
 8006588:	54d1      	strb	r1, [r2, r3]
				if (cl) {						/* Remove the cluster chain if exist */
 800658a:	2190      	movs	r1, #144	; 0x90
 800658c:	0089      	lsls	r1, r1, #2
 800658e:	187b      	adds	r3, r7, r1
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d100      	bne.n	8006598 <f_open+0x29c>
 8006596:	e070      	b.n	800667a <f_open+0x37e>
					dw = dj.fs->winsect;
 8006598:	4b2b      	ldr	r3, [pc, #172]	; (8006648 <f_open+0x34c>)
 800659a:	195b      	adds	r3, r3, r5
 800659c:	19da      	adds	r2, r3, r7
 800659e:	2380      	movs	r3, #128	; 0x80
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	58d2      	ldr	r2, [r2, r3]
 80065a4:	238b      	movs	r3, #139	; 0x8b
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	58d3      	ldr	r3, [r2, r3]
 80065aa:	19ba      	adds	r2, r7, r6
 80065ac:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 80065ae:	4b26      	ldr	r3, [pc, #152]	; (8006648 <f_open+0x34c>)
 80065b0:	195b      	adds	r3, r3, r5
 80065b2:	19da      	adds	r2, r3, r7
 80065b4:	2380      	movs	r3, #128	; 0x80
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	58d3      	ldr	r3, [r2, r3]
 80065ba:	4822      	ldr	r0, [pc, #136]	; (8006644 <f_open+0x348>)
 80065bc:	183c      	adds	r4, r7, r0
 80065be:	187a      	adds	r2, r7, r1
 80065c0:	6812      	ldr	r2, [r2, #0]
 80065c2:	0011      	movs	r1, r2
 80065c4:	0018      	movs	r0, r3
 80065c6:	f7fe fc2f 	bl	8004e28 <remove_chain>
 80065ca:	0003      	movs	r3, r0
 80065cc:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
 80065ce:	481d      	ldr	r0, [pc, #116]	; (8006644 <f_open+0x348>)
 80065d0:	183b      	adds	r3, r7, r0
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d150      	bne.n	800667a <f_open+0x37e>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80065d8:	4b1b      	ldr	r3, [pc, #108]	; (8006648 <f_open+0x34c>)
 80065da:	195b      	adds	r3, r3, r5
 80065dc:	19da      	adds	r2, r3, r7
 80065de:	2380      	movs	r3, #128	; 0x80
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	58d2      	ldr	r2, [r2, r3]
 80065e4:	2190      	movs	r1, #144	; 0x90
 80065e6:	0089      	lsls	r1, r1, #2
 80065e8:	187b      	adds	r3, r7, r1
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	1e59      	subs	r1, r3, #1
 80065ee:	2383      	movs	r3, #131	; 0x83
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	50d1      	str	r1, [r2, r3]
						res = move_window(dj.fs, dw);
 80065f4:	4b14      	ldr	r3, [pc, #80]	; (8006648 <f_open+0x34c>)
 80065f6:	195b      	adds	r3, r3, r5
 80065f8:	19da      	adds	r2, r3, r7
 80065fa:	2380      	movs	r3, #128	; 0x80
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	58d3      	ldr	r3, [r2, r3]
 8006600:	183c      	adds	r4, r7, r0
 8006602:	19ba      	adds	r2, r7, r6
 8006604:	6812      	ldr	r2, [r2, #0]
 8006606:	0011      	movs	r1, r2
 8006608:	0018      	movs	r0, r3
 800660a:	f7fe f8e9 	bl	80047e0 <move_window>
 800660e:	0003      	movs	r3, r0
 8006610:	7023      	strb	r3, [r4, #0]
 8006612:	e032      	b.n	800667a <f_open+0x37e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006614:	490b      	ldr	r1, [pc, #44]	; (8006644 <f_open+0x348>)
 8006616:	187b      	adds	r3, r7, r1
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d12d      	bne.n	800667a <f_open+0x37e>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800661e:	2392      	movs	r3, #146	; 0x92
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	18fb      	adds	r3, r7, r3
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	330b      	adds	r3, #11
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	001a      	movs	r2, r3
 800662c:	2310      	movs	r3, #16
 800662e:	4013      	ands	r3, r2
 8006630:	d00c      	beq.n	800664c <f_open+0x350>
					res = FR_NO_FILE;
 8006632:	187b      	adds	r3, r7, r1
 8006634:	2204      	movs	r2, #4
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	e01f      	b.n	800667a <f_open+0x37e>
 800663a:	46c0      	nop			; (mov r8, r8)
 800663c:	fffffdac 	.word	0xfffffdac
 8006640:	fffffdb7 	.word	0xfffffdb7
 8006644:	0000024f 	.word	0x0000024f
 8006648:	fffffdd0 	.word	0xfffffdd0
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800664c:	4b68      	ldr	r3, [pc, #416]	; (80067f0 <f_open+0x4f4>)
 800664e:	2294      	movs	r2, #148	; 0x94
 8006650:	0092      	lsls	r2, r2, #2
 8006652:	189b      	adds	r3, r3, r2
 8006654:	19db      	adds	r3, r3, r7
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	2202      	movs	r2, #2
 800665a:	4013      	ands	r3, r2
 800665c:	d00d      	beq.n	800667a <f_open+0x37e>
 800665e:	2392      	movs	r3, #146	; 0x92
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	18fb      	adds	r3, r7, r3
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	330b      	adds	r3, #11
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	001a      	movs	r2, r3
 800666c:	2301      	movs	r3, #1
 800666e:	4013      	ands	r3, r2
 8006670:	d003      	beq.n	800667a <f_open+0x37e>
						res = FR_DENIED;
 8006672:	4b60      	ldr	r3, [pc, #384]	; (80067f4 <f_open+0x4f8>)
 8006674:	18fb      	adds	r3, r7, r3
 8006676:	2207      	movs	r2, #7
 8006678:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (res == FR_OK) {
 800667a:	4b5e      	ldr	r3, [pc, #376]	; (80067f4 <f_open+0x4f8>)
 800667c:	18fb      	adds	r3, r7, r3
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d148      	bne.n	8006716 <f_open+0x41a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006684:	4b5a      	ldr	r3, [pc, #360]	; (80067f0 <f_open+0x4f4>)
 8006686:	2194      	movs	r1, #148	; 0x94
 8006688:	0089      	lsls	r1, r1, #2
 800668a:	185b      	adds	r3, r3, r1
 800668c:	19db      	adds	r3, r3, r7
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2208      	movs	r2, #8
 8006692:	4013      	ands	r3, r2
 8006694:	d009      	beq.n	80066aa <f_open+0x3ae>
				mode |= FA__WRITTEN;
 8006696:	4b56      	ldr	r3, [pc, #344]	; (80067f0 <f_open+0x4f4>)
 8006698:	185b      	adds	r3, r3, r1
 800669a:	19db      	adds	r3, r3, r7
 800669c:	4a54      	ldr	r2, [pc, #336]	; (80067f0 <f_open+0x4f4>)
 800669e:	1852      	adds	r2, r2, r1
 80066a0:	19d2      	adds	r2, r2, r7
 80066a2:	7812      	ldrb	r2, [r2, #0]
 80066a4:	2120      	movs	r1, #32
 80066a6:	430a      	orrs	r2, r1
 80066a8:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80066aa:	4b53      	ldr	r3, [pc, #332]	; (80067f8 <f_open+0x4fc>)
 80066ac:	2094      	movs	r0, #148	; 0x94
 80066ae:	0080      	lsls	r0, r0, #2
 80066b0:	181b      	adds	r3, r3, r0
 80066b2:	19da      	adds	r2, r3, r7
 80066b4:	2380      	movs	r3, #128	; 0x80
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	58d2      	ldr	r2, [r2, r3]
 80066ba:	238b      	movs	r3, #139	; 0x8b
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	58d1      	ldr	r1, [r2, r3]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	2387      	movs	r3, #135	; 0x87
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	50d1      	str	r1, [r2, r3]
			fp->dir_ptr = dir;
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	2388      	movs	r3, #136	; 0x88
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	2192      	movs	r1, #146	; 0x92
 80066d0:	0089      	lsls	r1, r1, #2
 80066d2:	1879      	adds	r1, r7, r1
 80066d4:	6809      	ldr	r1, [r1, #0]
 80066d6:	50d1      	str	r1, [r2, r3]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80066d8:	4b45      	ldr	r3, [pc, #276]	; (80067f0 <f_open+0x4f4>)
 80066da:	181b      	adds	r3, r3, r0
 80066dc:	19db      	adds	r3, r3, r7
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	2201      	movs	r2, #1
 80066e2:	4393      	bics	r3, r2
 80066e4:	1e5a      	subs	r2, r3, #1
 80066e6:	4193      	sbcs	r3, r2
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	001a      	movs	r2, r3
 80066ec:	2320      	movs	r3, #32
 80066ee:	18fb      	adds	r3, r7, r3
 80066f0:	0011      	movs	r1, r2
 80066f2:	0018      	movs	r0, r3
 80066f4:	f7fd feea 	bl	80044cc <inc_lock>
 80066f8:	0001      	movs	r1, r0
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	238a      	movs	r3, #138	; 0x8a
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	50d1      	str	r1, [r2, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	238a      	movs	r3, #138	; 0x8a
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	58d3      	ldr	r3, [r2, r3]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d103      	bne.n	8006716 <f_open+0x41a>
 800670e:	4b39      	ldr	r3, [pc, #228]	; (80067f4 <f_open+0x4f8>)
 8006710:	18fb      	adds	r3, r7, r3
 8006712:	2202      	movs	r2, #2
 8006714:	701a      	strb	r2, [r3, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006716:	4b37      	ldr	r3, [pc, #220]	; (80067f4 <f_open+0x4f8>)
 8006718:	18fb      	adds	r3, r7, r3
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d15e      	bne.n	80067de <f_open+0x4e2>
			fp->flag = mode;					/* File access mode */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4a33      	ldr	r2, [pc, #204]	; (80067f0 <f_open+0x4f4>)
 8006724:	2594      	movs	r5, #148	; 0x94
 8006726:	00ad      	lsls	r5, r5, #2
 8006728:	1952      	adds	r2, r2, r5
 800672a:	19d2      	adds	r2, r2, r7
 800672c:	4933      	ldr	r1, [pc, #204]	; (80067fc <f_open+0x500>)
 800672e:	7812      	ldrb	r2, [r2, #0]
 8006730:	545a      	strb	r2, [r3, r1]
			fp->err = 0;						/* Clear error flag */
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4a32      	ldr	r2, [pc, #200]	; (8006800 <f_open+0x504>)
 8006736:	2100      	movs	r1, #0
 8006738:	5499      	strb	r1, [r3, r2]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800673a:	4b2f      	ldr	r3, [pc, #188]	; (80067f8 <f_open+0x4fc>)
 800673c:	195b      	adds	r3, r3, r5
 800673e:	19da      	adds	r2, r3, r7
 8006740:	2380      	movs	r3, #128	; 0x80
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	58d3      	ldr	r3, [r2, r3]
 8006746:	2492      	movs	r4, #146	; 0x92
 8006748:	00a4      	lsls	r4, r4, #2
 800674a:	193a      	adds	r2, r7, r4
 800674c:	6812      	ldr	r2, [r2, #0]
 800674e:	0011      	movs	r1, r2
 8006750:	0018      	movs	r0, r3
 8006752:	f7fe fef0 	bl	8005536 <ld_clust>
 8006756:	0001      	movs	r1, r0
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	2384      	movs	r3, #132	; 0x84
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	50d1      	str	r1, [r2, r3]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006760:	0021      	movs	r1, r4
 8006762:	187b      	adds	r3, r7, r1
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	331f      	adds	r3, #31
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	061a      	lsls	r2, r3, #24
 800676c:	187b      	adds	r3, r7, r1
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	331e      	adds	r3, #30
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	041b      	lsls	r3, r3, #16
 8006776:	4313      	orrs	r3, r2
 8006778:	187a      	adds	r2, r7, r1
 800677a:	6812      	ldr	r2, [r2, #0]
 800677c:	321d      	adds	r2, #29
 800677e:	7812      	ldrb	r2, [r2, #0]
 8006780:	0212      	lsls	r2, r2, #8
 8006782:	4313      	orrs	r3, r2
 8006784:	187a      	adds	r2, r7, r1
 8006786:	6812      	ldr	r2, [r2, #0]
 8006788:	321c      	adds	r2, #28
 800678a:	7812      	ldrb	r2, [r2, #0]
 800678c:	4313      	orrs	r3, r2
 800678e:	0019      	movs	r1, r3
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	2383      	movs	r3, #131	; 0x83
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	50d1      	str	r1, [r2, r3]
			fp->fptr = 0;						/* File pointer */
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	2382      	movs	r3, #130	; 0x82
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	2100      	movs	r1, #0
 80067a0:	50d1      	str	r1, [r2, r3]
			fp->dsect = 0;
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	2386      	movs	r3, #134	; 0x86
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	2100      	movs	r1, #0
 80067aa:	50d1      	str	r1, [r2, r3]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	2389      	movs	r3, #137	; 0x89
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	2100      	movs	r1, #0
 80067b4:	50d1      	str	r1, [r2, r3]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80067b6:	4b10      	ldr	r3, [pc, #64]	; (80067f8 <f_open+0x4fc>)
 80067b8:	195b      	adds	r3, r3, r5
 80067ba:	19da      	adds	r2, r3, r7
 80067bc:	2380      	movs	r3, #128	; 0x80
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	58d1      	ldr	r1, [r2, r3]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	2380      	movs	r3, #128	; 0x80
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	50d1      	str	r1, [r2, r3]
			fp->id = fp->fs->id;
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	2380      	movs	r3, #128	; 0x80
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	58d3      	ldr	r3, [r2, r3]
 80067d2:	4a0a      	ldr	r2, [pc, #40]	; (80067fc <f_open+0x500>)
 80067d4:	5a99      	ldrh	r1, [r3, r2]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	2381      	movs	r3, #129	; 0x81
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	52d1      	strh	r1, [r2, r3]
		}
	}

	LEAVE_FF(dj.fs, res);
 80067de:	4b05      	ldr	r3, [pc, #20]	; (80067f4 <f_open+0x4f8>)
 80067e0:	18fb      	adds	r3, r7, r3
 80067e2:	781b      	ldrb	r3, [r3, #0]
}
 80067e4:	0018      	movs	r0, r3
 80067e6:	46bd      	mov	sp, r7
 80067e8:	2395      	movs	r3, #149	; 0x95
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	449d      	add	sp, r3
 80067ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067f0:	fffffdb7 	.word	0xfffffdb7
 80067f4:	0000024f 	.word	0x0000024f
 80067f8:	fffffdd0 	.word	0xfffffdd0
 80067fc:	00000206 	.word	0x00000206
 8006800:	00000207 	.word	0x00000207

08006804 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8006804:	b5b0      	push	{r4, r5, r7, lr}
 8006806:	b08c      	sub	sp, #48	; 0x30
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2200      	movs	r2, #0
 800681a:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800681c:	251f      	movs	r5, #31
 800681e:	197c      	adds	r4, r7, r5
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	0018      	movs	r0, r3
 8006824:	f7ff fcdc 	bl	80061e0 <validate>
 8006828:	0003      	movs	r3, r0
 800682a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800682c:	197b      	adds	r3, r7, r5
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <f_read+0x36>
 8006834:	197b      	adds	r3, r7, r5
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	e171      	b.n	8006b1e <f_read+0x31a>
	if (fp->err)								/* Check error */
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4aba      	ldr	r2, [pc, #744]	; (8006b28 <f_read+0x324>)
 800683e:	5c9b      	ldrb	r3, [r3, r2]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <f_read+0x48>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4ab8      	ldr	r2, [pc, #736]	; (8006b28 <f_read+0x324>)
 8006848:	5c9b      	ldrb	r3, [r3, r2]
 800684a:	e168      	b.n	8006b1e <f_read+0x31a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4ab7      	ldr	r2, [pc, #732]	; (8006b2c <f_read+0x328>)
 8006850:	5c9b      	ldrb	r3, [r3, r2]
 8006852:	001a      	movs	r2, r3
 8006854:	2301      	movs	r3, #1
 8006856:	4013      	ands	r3, r2
 8006858:	d101      	bne.n	800685e <f_read+0x5a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800685a:	2307      	movs	r3, #7
 800685c:	e15f      	b.n	8006b1e <f_read+0x31a>
	remain = fp->fsize - fp->fptr;
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	2383      	movs	r3, #131	; 0x83
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	58d2      	ldr	r2, [r2, r3]
 8006866:	68f9      	ldr	r1, [r7, #12]
 8006868:	2382      	movs	r3, #130	; 0x82
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	58cb      	ldr	r3, [r1, r3]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	429a      	cmp	r2, r3
 8006878:	d800      	bhi.n	800687c <f_read+0x78>
 800687a:	e14b      	b.n	8006b14 <f_read+0x310>
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006880:	e148      	b.n	8006b14 <f_read+0x310>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	2382      	movs	r3, #130	; 0x82
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	58d3      	ldr	r3, [r2, r3]
 800688a:	05db      	lsls	r3, r3, #23
 800688c:	0ddb      	lsrs	r3, r3, #23
 800688e:	d000      	beq.n	8006892 <f_read+0x8e>
 8006890:	e10b      	b.n	8006aaa <f_read+0x2a6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	2382      	movs	r3, #130	; 0x82
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	58d3      	ldr	r3, [r2, r3]
 800689a:	0a5b      	lsrs	r3, r3, #9
 800689c:	b2da      	uxtb	r2, r3
 800689e:	68f9      	ldr	r1, [r7, #12]
 80068a0:	2380      	movs	r3, #128	; 0x80
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	58cb      	ldr	r3, [r1, r3]
 80068a6:	49a2      	ldr	r1, [pc, #648]	; (8006b30 <f_read+0x32c>)
 80068a8:	5c5b      	ldrb	r3, [r3, r1]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b2d9      	uxtb	r1, r3
 80068ae:	2017      	movs	r0, #23
 80068b0:	183b      	adds	r3, r7, r0
 80068b2:	400a      	ands	r2, r1
 80068b4:	701a      	strb	r2, [r3, #0]
			if (!csect) {						/* On the cluster boundary? */
 80068b6:	183b      	adds	r3, r7, r0
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d141      	bne.n	8006942 <f_read+0x13e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	2382      	movs	r3, #130	; 0x82
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	58d3      	ldr	r3, [r2, r3]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d105      	bne.n	80068d6 <f_read+0xd2>
					clst = fp->sclust;			/* Follow from the origin */
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	2384      	movs	r3, #132	; 0x84
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	58d3      	ldr	r3, [r2, r3]
 80068d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068d4:	e01e      	b.n	8006914 <f_read+0x110>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	2389      	movs	r3, #137	; 0x89
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	58d3      	ldr	r3, [r2, r3]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00b      	beq.n	80068fa <f_read+0xf6>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	2382      	movs	r3, #130	; 0x82
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	58d2      	ldr	r2, [r2, r3]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	0011      	movs	r1, r2
 80068ee:	0018      	movs	r0, r3
 80068f0:	f7fe fbc0 	bl	8005074 <clmt_clust>
 80068f4:	0003      	movs	r3, r0
 80068f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068f8:	e00c      	b.n	8006914 <f_read+0x110>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	2380      	movs	r3, #128	; 0x80
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	58d0      	ldr	r0, [r2, r3]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	2385      	movs	r3, #133	; 0x85
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	58d3      	ldr	r3, [r2, r3]
 800690a:	0019      	movs	r1, r3
 800690c:	f7fe f89c 	bl	8004a48 <get_fat>
 8006910:	0003      	movs	r3, r0
 8006912:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006916:	2b01      	cmp	r3, #1
 8006918:	d805      	bhi.n	8006926 <f_read+0x122>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4a82      	ldr	r2, [pc, #520]	; (8006b28 <f_read+0x324>)
 800691e:	2102      	movs	r1, #2
 8006920:	5499      	strb	r1, [r3, r2]
 8006922:	2302      	movs	r3, #2
 8006924:	e0fb      	b.n	8006b1e <f_read+0x31a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006928:	3301      	adds	r3, #1
 800692a:	d105      	bne.n	8006938 <f_read+0x134>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4a7e      	ldr	r2, [pc, #504]	; (8006b28 <f_read+0x324>)
 8006930:	2101      	movs	r1, #1
 8006932:	5499      	strb	r1, [r3, r2]
 8006934:	2301      	movs	r3, #1
 8006936:	e0f2      	b.n	8006b1e <f_read+0x31a>
				fp->clust = clst;				/* Update current cluster */
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	2385      	movs	r3, #133	; 0x85
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006940:	50d1      	str	r1, [r2, r3]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	2380      	movs	r3, #128	; 0x80
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	58d0      	ldr	r0, [r2, r3]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	2385      	movs	r3, #133	; 0x85
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	58d3      	ldr	r3, [r2, r3]
 8006952:	0019      	movs	r1, r3
 8006954:	f7fe f854 	bl	8004a00 <clust2sect>
 8006958:	0003      	movs	r3, r0
 800695a:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d105      	bne.n	800696e <f_read+0x16a>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	4a70      	ldr	r2, [pc, #448]	; (8006b28 <f_read+0x324>)
 8006966:	2102      	movs	r1, #2
 8006968:	5499      	strb	r1, [r3, r2]
 800696a:	2302      	movs	r3, #2
 800696c:	e0d7      	b.n	8006b1e <f_read+0x31a>
			sect += csect;
 800696e:	2017      	movs	r0, #23
 8006970:	183b      	adds	r3, r7, r0
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	18d3      	adds	r3, r2, r3
 8006978:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	0a5b      	lsrs	r3, r3, #9
 800697e:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	2b00      	cmp	r3, #0
 8006984:	d04c      	beq.n	8006a20 <f_read+0x21c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006986:	183b      	adds	r3, r7, r0
 8006988:	781a      	ldrb	r2, [r3, #0]
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	18d3      	adds	r3, r2, r3
 800698e:	68f9      	ldr	r1, [r7, #12]
 8006990:	2280      	movs	r2, #128	; 0x80
 8006992:	0092      	lsls	r2, r2, #2
 8006994:	588a      	ldr	r2, [r1, r2]
 8006996:	4966      	ldr	r1, [pc, #408]	; (8006b30 <f_read+0x32c>)
 8006998:	5c52      	ldrb	r2, [r2, r1]
 800699a:	4293      	cmp	r3, r2
 800699c:	d90a      	bls.n	80069b4 <f_read+0x1b0>
					cc = fp->fs->csize - csect;
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	2380      	movs	r3, #128	; 0x80
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	58d3      	ldr	r3, [r2, r3]
 80069a6:	4a62      	ldr	r2, [pc, #392]	; (8006b30 <f_read+0x32c>)
 80069a8:	5c9b      	ldrb	r3, [r3, r2]
 80069aa:	001a      	movs	r2, r3
 80069ac:	183b      	adds	r3, r7, r0
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	2380      	movs	r3, #128	; 0x80
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	58d3      	ldr	r3, [r2, r3]
 80069bc:	4a5d      	ldr	r2, [pc, #372]	; (8006b34 <f_read+0x330>)
 80069be:	5c98      	ldrb	r0, [r3, r2]
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	6a39      	ldr	r1, [r7, #32]
 80069c6:	f7fd fc07 	bl	80041d8 <disk_read>
 80069ca:	1e03      	subs	r3, r0, #0
 80069cc:	d005      	beq.n	80069da <f_read+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4a55      	ldr	r2, [pc, #340]	; (8006b28 <f_read+0x324>)
 80069d2:	2101      	movs	r1, #1
 80069d4:	5499      	strb	r1, [r3, r2]
 80069d6:	2301      	movs	r3, #1
 80069d8:	e0a1      	b.n	8006b1e <f_read+0x31a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4a53      	ldr	r2, [pc, #332]	; (8006b2c <f_read+0x328>)
 80069de:	5c9b      	ldrb	r3, [r3, r2]
 80069e0:	001a      	movs	r2, r3
 80069e2:	2340      	movs	r3, #64	; 0x40
 80069e4:	4013      	ands	r3, r2
 80069e6:	d017      	beq.n	8006a18 <f_read+0x214>
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	2386      	movs	r3, #134	; 0x86
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	58d2      	ldr	r2, [r2, r3]
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d90e      	bls.n	8006a18 <f_read+0x214>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	2386      	movs	r3, #134	; 0x86
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	58d2      	ldr	r2, [r2, r3]
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	025b      	lsls	r3, r3, #9
 8006a08:	6a3a      	ldr	r2, [r7, #32]
 8006a0a:	18d3      	adds	r3, r2, r3
 8006a0c:	68f9      	ldr	r1, [r7, #12]
 8006a0e:	2280      	movs	r2, #128	; 0x80
 8006a10:	0092      	lsls	r2, r2, #2
 8006a12:	0018      	movs	r0, r3
 8006a14:	f7fd fc58 	bl	80042c8 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	025b      	lsls	r3, r3, #9
 8006a1c:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8006a1e:	e061      	b.n	8006ae4 <f_read+0x2e0>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	2386      	movs	r3, #134	; 0x86
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	58d3      	ldr	r3, [r2, r3]
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d038      	beq.n	8006aa0 <f_read+0x29c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4a3e      	ldr	r2, [pc, #248]	; (8006b2c <f_read+0x328>)
 8006a32:	5c9b      	ldrb	r3, [r3, r2]
 8006a34:	001a      	movs	r2, r3
 8006a36:	2340      	movs	r3, #64	; 0x40
 8006a38:	4013      	ands	r3, r2
 8006a3a:	d01e      	beq.n	8006a7a <f_read+0x276>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	2380      	movs	r3, #128	; 0x80
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	58d3      	ldr	r3, [r2, r3]
 8006a44:	4a3b      	ldr	r2, [pc, #236]	; (8006b34 <f_read+0x330>)
 8006a46:	5c98      	ldrb	r0, [r3, r2]
 8006a48:	68f9      	ldr	r1, [r7, #12]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	2386      	movs	r3, #134	; 0x86
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	58d2      	ldr	r2, [r2, r3]
 8006a52:	2301      	movs	r3, #1
 8006a54:	f7fd fbe8 	bl	8004228 <disk_write>
 8006a58:	1e03      	subs	r3, r0, #0
 8006a5a:	d005      	beq.n	8006a68 <f_read+0x264>
						ABORT(fp->fs, FR_DISK_ERR);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4a32      	ldr	r2, [pc, #200]	; (8006b28 <f_read+0x324>)
 8006a60:	2101      	movs	r1, #1
 8006a62:	5499      	strb	r1, [r3, r2]
 8006a64:	2301      	movs	r3, #1
 8006a66:	e05a      	b.n	8006b1e <f_read+0x31a>
					fp->flag &= ~FA__DIRTY;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4a30      	ldr	r2, [pc, #192]	; (8006b2c <f_read+0x328>)
 8006a6c:	5c9b      	ldrb	r3, [r3, r2]
 8006a6e:	2240      	movs	r2, #64	; 0x40
 8006a70:	4393      	bics	r3, r2
 8006a72:	b2d9      	uxtb	r1, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4a2d      	ldr	r2, [pc, #180]	; (8006b2c <f_read+0x328>)
 8006a78:	5499      	strb	r1, [r3, r2]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	2380      	movs	r3, #128	; 0x80
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	58d3      	ldr	r3, [r2, r3]
 8006a82:	4a2c      	ldr	r2, [pc, #176]	; (8006b34 <f_read+0x330>)
 8006a84:	5c98      	ldrb	r0, [r3, r2]
 8006a86:	68f9      	ldr	r1, [r7, #12]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	f7fd fba4 	bl	80041d8 <disk_read>
 8006a90:	1e03      	subs	r3, r0, #0
 8006a92:	d005      	beq.n	8006aa0 <f_read+0x29c>
					ABORT(fp->fs, FR_DISK_ERR);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4a24      	ldr	r2, [pc, #144]	; (8006b28 <f_read+0x324>)
 8006a98:	2101      	movs	r1, #1
 8006a9a:	5499      	strb	r1, [r3, r2]
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e03e      	b.n	8006b1e <f_read+0x31a>
			}
#endif
			fp->dsect = sect;
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	2386      	movs	r3, #134	; 0x86
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	6939      	ldr	r1, [r7, #16]
 8006aa8:	50d1      	str	r1, [r2, r3]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	2382      	movs	r3, #130	; 0x82
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	58d3      	ldr	r3, [r2, r3]
 8006ab2:	05db      	lsls	r3, r3, #23
 8006ab4:	0ddb      	lsrs	r3, r3, #23
 8006ab6:	2280      	movs	r2, #128	; 0x80
 8006ab8:	0092      	lsls	r2, r2, #2
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8006abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d901      	bls.n	8006aca <f_read+0x2c6>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	2382      	movs	r3, #130	; 0x82
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	58d3      	ldr	r3, [r2, r3]
 8006ad2:	05db      	lsls	r3, r3, #23
 8006ad4:	0ddb      	lsrs	r3, r3, #23
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	18d1      	adds	r1, r2, r3
 8006ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	0018      	movs	r0, r3
 8006ae0:	f7fd fbf2 	bl	80042c8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006ae4:	6a3a      	ldr	r2, [r7, #32]
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	18d3      	adds	r3, r2, r3
 8006aea:	623b      	str	r3, [r7, #32]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	2382      	movs	r3, #130	; 0x82
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	58d2      	ldr	r2, [r2, r3]
 8006af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af6:	18d1      	adds	r1, r2, r3
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	2382      	movs	r3, #130	; 0x82
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	50d1      	str	r1, [r2, r3]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b06:	18d2      	adds	r2, r2, r3
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d000      	beq.n	8006b1c <f_read+0x318>
 8006b1a:	e6b2      	b.n	8006882 <f_read+0x7e>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	0018      	movs	r0, r3
 8006b20:	46bd      	mov	sp, r7
 8006b22:	b00c      	add	sp, #48	; 0x30
 8006b24:	bdb0      	pop	{r4, r5, r7, pc}
 8006b26:	46c0      	nop			; (mov r8, r8)
 8006b28:	00000207 	.word	0x00000207
 8006b2c:	00000206 	.word	0x00000206
 8006b30:	00000202 	.word	0x00000202
 8006b34:	00000201 	.word	0x00000201

08006b38 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006b38:	b5b0      	push	{r4, r5, r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006b40:	2517      	movs	r5, #23
 8006b42:	197c      	adds	r4, r7, r5
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	0018      	movs	r0, r3
 8006b48:	f7ff fb4a 	bl	80061e0 <validate>
 8006b4c:	0003      	movs	r3, r0
 8006b4e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8006b50:	197b      	adds	r3, r7, r5
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d000      	beq.n	8006b5a <f_sync+0x22>
 8006b58:	e0b9      	b.n	8006cce <f_sync+0x196>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a5f      	ldr	r2, [pc, #380]	; (8006cdc <f_sync+0x1a4>)
 8006b5e:	5c9b      	ldrb	r3, [r3, r2]
 8006b60:	001a      	movs	r2, r3
 8006b62:	2320      	movs	r3, #32
 8006b64:	4013      	ands	r3, r2
 8006b66:	d100      	bne.n	8006b6a <f_sync+0x32>
 8006b68:	e0b1      	b.n	8006cce <f_sync+0x196>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a5b      	ldr	r2, [pc, #364]	; (8006cdc <f_sync+0x1a4>)
 8006b6e:	5c9b      	ldrb	r3, [r3, r2]
 8006b70:	001a      	movs	r2, r3
 8006b72:	2340      	movs	r3, #64	; 0x40
 8006b74:	4013      	ands	r3, r2
 8006b76:	d01a      	beq.n	8006bae <f_sync+0x76>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	2380      	movs	r3, #128	; 0x80
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	58d3      	ldr	r3, [r2, r3]
 8006b80:	4a57      	ldr	r2, [pc, #348]	; (8006ce0 <f_sync+0x1a8>)
 8006b82:	5c98      	ldrb	r0, [r3, r2]
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	2386      	movs	r3, #134	; 0x86
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	58d2      	ldr	r2, [r2, r3]
 8006b8e:	2301      	movs	r3, #1
 8006b90:	f7fd fb4a 	bl	8004228 <disk_write>
 8006b94:	1e03      	subs	r3, r0, #0
 8006b96:	d001      	beq.n	8006b9c <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e09b      	b.n	8006cd4 <f_sync+0x19c>
				fp->flag &= ~FA__DIRTY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a4f      	ldr	r2, [pc, #316]	; (8006cdc <f_sync+0x1a4>)
 8006ba0:	5c9b      	ldrb	r3, [r3, r2]
 8006ba2:	2240      	movs	r2, #64	; 0x40
 8006ba4:	4393      	bics	r3, r2
 8006ba6:	b2d9      	uxtb	r1, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a4c      	ldr	r2, [pc, #304]	; (8006cdc <f_sync+0x1a4>)
 8006bac:	5499      	strb	r1, [r3, r2]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	2380      	movs	r3, #128	; 0x80
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	58d0      	ldr	r0, [r2, r3]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	2387      	movs	r3, #135	; 0x87
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	58d3      	ldr	r3, [r2, r3]
 8006bbe:	2517      	movs	r5, #23
 8006bc0:	197c      	adds	r4, r7, r5
 8006bc2:	0019      	movs	r1, r3
 8006bc4:	f7fd fe0c 	bl	80047e0 <move_window>
 8006bc8:	0003      	movs	r3, r0
 8006bca:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
 8006bcc:	002c      	movs	r4, r5
 8006bce:	193b      	adds	r3, r7, r4
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d17b      	bne.n	8006cce <f_sync+0x196>
				dir = fp->dir_ptr;
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	2388      	movs	r3, #136	; 0x88
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	58d3      	ldr	r3, [r2, r3]
 8006bde:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	330b      	adds	r3, #11
 8006be4:	781a      	ldrb	r2, [r3, #0]
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	330b      	adds	r3, #11
 8006bea:	2120      	movs	r1, #32
 8006bec:	430a      	orrs	r2, r1
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	2383      	movs	r3, #131	; 0x83
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	58d2      	ldr	r2, [r2, r3]
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	331c      	adds	r3, #28
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	2383      	movs	r3, #131	; 0x83
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	58d3      	ldr	r3, [r2, r3]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	0a1b      	lsrs	r3, r3, #8
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	331d      	adds	r3, #29
 8006c14:	b2d2      	uxtb	r2, r2
 8006c16:	701a      	strb	r2, [r3, #0]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	2383      	movs	r3, #131	; 0x83
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	58d3      	ldr	r3, [r2, r3]
 8006c20:	0c1a      	lsrs	r2, r3, #16
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	331e      	adds	r3, #30
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	2383      	movs	r3, #131	; 0x83
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	58d3      	ldr	r3, [r2, r3]
 8006c32:	0e1a      	lsrs	r2, r3, #24
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	331f      	adds	r3, #31
 8006c38:	b2d2      	uxtb	r2, r2
 8006c3a:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	2384      	movs	r3, #132	; 0x84
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	58d2      	ldr	r2, [r2, r3]
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	0011      	movs	r1, r2
 8006c48:	0018      	movs	r0, r3
 8006c4a:	f7fe fca1 	bl	8005590 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8006c4e:	f7fc fc99 	bl	8003584 <get_fattime>
 8006c52:	0003      	movs	r3, r0
 8006c54:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	3316      	adds	r3, #22
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	b2d2      	uxtb	r2, r2
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	0a1b      	lsrs	r3, r3, #8
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	3317      	adds	r3, #23
 8006c6c:	b2d2      	uxtb	r2, r2
 8006c6e:	701a      	strb	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	0c1a      	lsrs	r2, r3, #16
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	3318      	adds	r3, #24
 8006c78:	b2d2      	uxtb	r2, r2
 8006c7a:	701a      	strb	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	0e1a      	lsrs	r2, r3, #24
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	3319      	adds	r3, #25
 8006c84:	b2d2      	uxtb	r2, r2
 8006c86:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	3312      	adds	r3, #18
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	701a      	strb	r2, [r3, #0]
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	3313      	adds	r3, #19
 8006c94:	2200      	movs	r2, #0
 8006c96:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a10      	ldr	r2, [pc, #64]	; (8006cdc <f_sync+0x1a4>)
 8006c9c:	5c9b      	ldrb	r3, [r3, r2]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	4393      	bics	r3, r2
 8006ca2:	b2d9      	uxtb	r1, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a0d      	ldr	r2, [pc, #52]	; (8006cdc <f_sync+0x1a4>)
 8006ca8:	5499      	strb	r1, [r3, r2]
				fp->fs->wflag = 1;
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	2380      	movs	r3, #128	; 0x80
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	58d2      	ldr	r2, [r2, r3]
 8006cb2:	2381      	movs	r3, #129	; 0x81
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	54d1      	strb	r1, [r2, r3]
				res = sync_fs(fp->fs);
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	2380      	movs	r3, #128	; 0x80
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	58d3      	ldr	r3, [r2, r3]
 8006cc2:	193c      	adds	r4, r7, r4
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	f7fd fdc7 	bl	8004858 <sync_fs>
 8006cca:	0003      	movs	r3, r0
 8006ccc:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006cce:	2317      	movs	r3, #23
 8006cd0:	18fb      	adds	r3, r7, r3
 8006cd2:	781b      	ldrb	r3, [r3, #0]
}
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	b006      	add	sp, #24
 8006cda:	bdb0      	pop	{r4, r5, r7, pc}
 8006cdc:	00000206 	.word	0x00000206
 8006ce0:	00000201 	.word	0x00000201

08006ce4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006ce4:	b5b0      	push	{r4, r5, r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006cec:	250f      	movs	r5, #15
 8006cee:	197c      	adds	r4, r7, r5
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	0018      	movs	r0, r3
 8006cf4:	f7ff ff20 	bl	8006b38 <f_sync>
 8006cf8:	0003      	movs	r3, r0
 8006cfa:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8006cfc:	197b      	adds	r3, r7, r5
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d11f      	bne.n	8006d44 <f_close+0x60>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006d04:	197c      	adds	r4, r7, r5
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f7ff fa69 	bl	80061e0 <validate>
 8006d0e:	0003      	movs	r3, r0
 8006d10:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8006d12:	0029      	movs	r1, r5
 8006d14:	187b      	adds	r3, r7, r1
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d113      	bne.n	8006d44 <f_close+0x60>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	238a      	movs	r3, #138	; 0x8a
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	58d3      	ldr	r3, [r2, r3]
 8006d24:	000d      	movs	r5, r1
 8006d26:	187c      	adds	r4, r7, r1
 8006d28:	0018      	movs	r0, r3
 8006d2a:	f7fd fc87 	bl	800463c <dec_lock>
 8006d2e:	0003      	movs	r3, r0
 8006d30:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8006d32:	197b      	adds	r3, r7, r5
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d104      	bne.n	8006d44 <f_close+0x60>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	2380      	movs	r3, #128	; 0x80
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	2100      	movs	r1, #0
 8006d42:	50d1      	str	r1, [r2, r3]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006d44:	230f      	movs	r3, #15
 8006d46:	18fb      	adds	r3, r7, r3
 8006d48:	781b      	ldrb	r3, [r3, #0]
}
 8006d4a:	0018      	movs	r0, r3
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	b004      	add	sp, #16
 8006d50:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006d54 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8006d54:	b5b0      	push	{r4, r5, r7, lr}
 8006d56:	b090      	sub	sp, #64	; 0x40
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8006d5e:	253f      	movs	r5, #63	; 0x3f
 8006d60:	197c      	adds	r4, r7, r5
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	0018      	movs	r0, r3
 8006d66:	f7ff fa3b 	bl	80061e0 <validate>
 8006d6a:	0003      	movs	r3, r0
 8006d6c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006d6e:	197b      	adds	r3, r7, r5
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <f_lseek+0x28>
 8006d76:	197b      	adds	r3, r7, r5
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	e28c      	b.n	8007296 <f_lseek+0x542>
	if (fp->err)						/* Check error */
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4ada      	ldr	r2, [pc, #872]	; (80070e8 <f_lseek+0x394>)
 8006d80:	5c9b      	ldrb	r3, [r3, r2]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4ad7      	ldr	r2, [pc, #860]	; (80070e8 <f_lseek+0x394>)
 8006d8a:	5c9b      	ldrb	r3, [r3, r2]
 8006d8c:	e283      	b.n	8007296 <f_lseek+0x542>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	2389      	movs	r3, #137	; 0x89
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	58d3      	ldr	r3, [r2, r3]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d100      	bne.n	8006d9c <f_lseek+0x48>
 8006d9a:	e103      	b.n	8006fa4 <f_lseek+0x250>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	d16c      	bne.n	8006e7c <f_lseek+0x128>
			tbl = fp->cltbl;
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	2389      	movs	r3, #137	; 0x89
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	58d3      	ldr	r3, [r2, r3]
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	1d1a      	adds	r2, r3, #4
 8006db0:	627a      	str	r2, [r7, #36]	; 0x24
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	617b      	str	r3, [r7, #20]
 8006db6:	2302      	movs	r3, #2
 8006db8:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	2384      	movs	r3, #132	; 0x84
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	58d3      	ldr	r3, [r2, r3]
 8006dc2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d045      	beq.n	8006e56 <f_lseek+0x102>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	613b      	str	r3, [r7, #16]
 8006dce:	2300      	movs	r3, #0
 8006dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	3302      	adds	r3, #2
 8006dd6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dde:	3301      	adds	r3, #1
 8006de0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	2380      	movs	r3, #128	; 0x80
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	58d3      	ldr	r3, [r2, r3]
 8006dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dec:	0011      	movs	r1, r2
 8006dee:	0018      	movs	r0, r3
 8006df0:	f7fd fe2a 	bl	8004a48 <get_fat>
 8006df4:	0003      	movs	r3, r0
 8006df6:	633b      	str	r3, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d805      	bhi.n	8006e0a <f_lseek+0xb6>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4ab9      	ldr	r2, [pc, #740]	; (80070e8 <f_lseek+0x394>)
 8006e02:	2102      	movs	r1, #2
 8006e04:	5499      	strb	r1, [r3, r2]
 8006e06:	2302      	movs	r3, #2
 8006e08:	e245      	b.n	8007296 <f_lseek+0x542>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	d105      	bne.n	8006e1c <f_lseek+0xc8>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4ab5      	ldr	r2, [pc, #724]	; (80070e8 <f_lseek+0x394>)
 8006e14:	2101      	movs	r1, #1
 8006e16:	5499      	strb	r1, [r3, r2]
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e23c      	b.n	8007296 <f_lseek+0x542>
					} while (cl == pcl + 1);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d0d8      	beq.n	8006dd8 <f_lseek+0x84>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d809      	bhi.n	8006e42 <f_lseek+0xee>
						*tbl++ = ncl; *tbl++ = tcl;
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	1d1a      	adds	r2, r3, #4
 8006e32:	627a      	str	r2, [r7, #36]	; 0x24
 8006e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	1d1a      	adds	r2, r3, #4
 8006e3c:	627a      	str	r2, [r7, #36]	; 0x24
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	2380      	movs	r3, #128	; 0x80
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	58d2      	ldr	r2, [r2, r3]
 8006e4a:	2385      	movs	r3, #133	; 0x85
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	58d3      	ldr	r3, [r2, r3]
 8006e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d3b9      	bcc.n	8006dca <f_lseek+0x76>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	2389      	movs	r3, #137	; 0x89
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	58d3      	ldr	r3, [r2, r3]
 8006e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e60:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8006e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d803      	bhi.n	8006e72 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	e20e      	b.n	8007290 <f_lseek+0x53c>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006e72:	233f      	movs	r3, #63	; 0x3f
 8006e74:	18fb      	adds	r3, r7, r3
 8006e76:	2211      	movs	r2, #17
 8006e78:	701a      	strb	r2, [r3, #0]
 8006e7a:	e209      	b.n	8007290 <f_lseek+0x53c>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	2383      	movs	r3, #131	; 0x83
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	58d3      	ldr	r3, [r2, r3]
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d904      	bls.n	8006e94 <f_lseek+0x140>
				ofs = fp->fsize;
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	2383      	movs	r3, #131	; 0x83
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	58d3      	ldr	r3, [r2, r3]
 8006e92:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	2382      	movs	r3, #130	; 0x82
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	50d1      	str	r1, [r2, r3]
			if (ofs) {
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d100      	bne.n	8006ea6 <f_lseek+0x152>
 8006ea4:	e1f4      	b.n	8007290 <f_lseek+0x53c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	1e5a      	subs	r2, r3, #1
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	0011      	movs	r1, r2
 8006eae:	0018      	movs	r0, r3
 8006eb0:	f7fe f8e0 	bl	8005074 <clmt_clust>
 8006eb4:	0001      	movs	r1, r0
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	2385      	movs	r3, #133	; 0x85
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	50d1      	str	r1, [r2, r3]
				dsc = clust2sect(fp->fs, fp->clust);
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	2380      	movs	r3, #128	; 0x80
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	58d0      	ldr	r0, [r2, r3]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	2385      	movs	r3, #133	; 0x85
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	58d3      	ldr	r3, [r2, r3]
 8006ece:	0019      	movs	r1, r3
 8006ed0:	f7fd fd96 	bl	8004a00 <clust2sect>
 8006ed4:	0003      	movs	r3, r0
 8006ed6:	61bb      	str	r3, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d105      	bne.n	8006eea <f_lseek+0x196>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a81      	ldr	r2, [pc, #516]	; (80070e8 <f_lseek+0x394>)
 8006ee2:	2102      	movs	r1, #2
 8006ee4:	5499      	strb	r1, [r3, r2]
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	e1d5      	b.n	8007296 <f_lseek+0x542>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	3b01      	subs	r3, #1
 8006eee:	0a5b      	lsrs	r3, r3, #9
 8006ef0:	6879      	ldr	r1, [r7, #4]
 8006ef2:	2280      	movs	r2, #128	; 0x80
 8006ef4:	0092      	lsls	r2, r2, #2
 8006ef6:	588a      	ldr	r2, [r1, r2]
 8006ef8:	497c      	ldr	r1, [pc, #496]	; (80070ec <f_lseek+0x398>)
 8006efa:	5c52      	ldrb	r2, [r2, r1]
 8006efc:	3a01      	subs	r2, #1
 8006efe:	4013      	ands	r3, r2
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	18d3      	adds	r3, r2, r3
 8006f04:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	2382      	movs	r3, #130	; 0x82
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	58d3      	ldr	r3, [r2, r3]
 8006f0e:	05db      	lsls	r3, r3, #23
 8006f10:	0ddb      	lsrs	r3, r3, #23
 8006f12:	d100      	bne.n	8006f16 <f_lseek+0x1c2>
 8006f14:	e1bc      	b.n	8007290 <f_lseek+0x53c>
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	2386      	movs	r3, #134	; 0x86
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	58d3      	ldr	r3, [r2, r3]
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d100      	bne.n	8006f26 <f_lseek+0x1d2>
 8006f24:	e1b4      	b.n	8007290 <f_lseek+0x53c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a71      	ldr	r2, [pc, #452]	; (80070f0 <f_lseek+0x39c>)
 8006f2a:	5c9b      	ldrb	r3, [r3, r2]
 8006f2c:	001a      	movs	r2, r3
 8006f2e:	2340      	movs	r3, #64	; 0x40
 8006f30:	4013      	ands	r3, r2
 8006f32:	d01e      	beq.n	8006f72 <f_lseek+0x21e>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	2380      	movs	r3, #128	; 0x80
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	58d3      	ldr	r3, [r2, r3]
 8006f3c:	4a6d      	ldr	r2, [pc, #436]	; (80070f4 <f_lseek+0x3a0>)
 8006f3e:	5c98      	ldrb	r0, [r3, r2]
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	2386      	movs	r3, #134	; 0x86
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	58d2      	ldr	r2, [r2, r3]
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	f7fd f96c 	bl	8004228 <disk_write>
 8006f50:	1e03      	subs	r3, r0, #0
 8006f52:	d005      	beq.n	8006f60 <f_lseek+0x20c>
							ABORT(fp->fs, FR_DISK_ERR);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a64      	ldr	r2, [pc, #400]	; (80070e8 <f_lseek+0x394>)
 8006f58:	2101      	movs	r1, #1
 8006f5a:	5499      	strb	r1, [r3, r2]
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e19a      	b.n	8007296 <f_lseek+0x542>
						fp->flag &= ~FA__DIRTY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a63      	ldr	r2, [pc, #396]	; (80070f0 <f_lseek+0x39c>)
 8006f64:	5c9b      	ldrb	r3, [r3, r2]
 8006f66:	2240      	movs	r2, #64	; 0x40
 8006f68:	4393      	bics	r3, r2
 8006f6a:	b2d9      	uxtb	r1, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a60      	ldr	r2, [pc, #384]	; (80070f0 <f_lseek+0x39c>)
 8006f70:	5499      	strb	r1, [r3, r2]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	2380      	movs	r3, #128	; 0x80
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	58d3      	ldr	r3, [r2, r3]
 8006f7a:	4a5e      	ldr	r2, [pc, #376]	; (80070f4 <f_lseek+0x3a0>)
 8006f7c:	5c98      	ldrb	r0, [r3, r2]
 8006f7e:	6879      	ldr	r1, [r7, #4]
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	2301      	movs	r3, #1
 8006f84:	f7fd f928 	bl	80041d8 <disk_read>
 8006f88:	1e03      	subs	r3, r0, #0
 8006f8a:	d005      	beq.n	8006f98 <f_lseek+0x244>
						ABORT(fp->fs, FR_DISK_ERR);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a56      	ldr	r2, [pc, #344]	; (80070e8 <f_lseek+0x394>)
 8006f90:	2101      	movs	r1, #1
 8006f92:	5499      	strb	r1, [r3, r2]
 8006f94:	2301      	movs	r3, #1
 8006f96:	e17e      	b.n	8007296 <f_lseek+0x542>
#endif
					fp->dsect = dsc;
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	2386      	movs	r3, #134	; 0x86
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	69b9      	ldr	r1, [r7, #24]
 8006fa0:	50d1      	str	r1, [r2, r3]
 8006fa2:	e175      	b.n	8007290 <f_lseek+0x53c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	2383      	movs	r3, #131	; 0x83
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	58d3      	ldr	r3, [r2, r3]
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d90b      	bls.n	8006fca <f_lseek+0x276>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a4e      	ldr	r2, [pc, #312]	; (80070f0 <f_lseek+0x39c>)
 8006fb6:	5c9b      	ldrb	r3, [r3, r2]
 8006fb8:	001a      	movs	r2, r3
 8006fba:	2302      	movs	r3, #2
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	d104      	bne.n	8006fca <f_lseek+0x276>
#endif
			) ofs = fp->fsize;
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	2383      	movs	r3, #131	; 0x83
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	58d3      	ldr	r3, [r2, r3]
 8006fc8:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	2382      	movs	r3, #130	; 0x82
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	58d3      	ldr	r3, [r2, r3]
 8006fd2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	2382      	movs	r3, #130	; 0x82
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006fe0:	50d1      	str	r1, [r2, r3]
		if (ofs) {
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d100      	bne.n	8006fea <f_lseek+0x296>
 8006fe8:	e0eb      	b.n	80071c2 <f_lseek+0x46e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	2380      	movs	r3, #128	; 0x80
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	58d3      	ldr	r3, [r2, r3]
 8006ff2:	4a3e      	ldr	r2, [pc, #248]	; (80070ec <f_lseek+0x398>)
 8006ff4:	5c9b      	ldrb	r3, [r3, r2]
 8006ff6:	025b      	lsls	r3, r3, #9
 8006ff8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d027      	beq.n	8007050 <f_lseek+0x2fc>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	3b01      	subs	r3, #1
 8007004:	69f9      	ldr	r1, [r7, #28]
 8007006:	0018      	movs	r0, r3
 8007008:	f7f9 f87c 	bl	8000104 <__udivsi3>
 800700c:	0003      	movs	r3, r0
 800700e:	001c      	movs	r4, r3
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	3b01      	subs	r3, #1
 8007014:	69f9      	ldr	r1, [r7, #28]
 8007016:	0018      	movs	r0, r3
 8007018:	f7f9 f874 	bl	8000104 <__udivsi3>
 800701c:	0003      	movs	r3, r0
			if (ifptr > 0 &&
 800701e:	429c      	cmp	r4, r3
 8007020:	d316      	bcc.n	8007050 <f_lseek+0x2fc>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	3b01      	subs	r3, #1
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	4252      	negs	r2, r2
 800702a:	401a      	ands	r2, r3
 800702c:	0011      	movs	r1, r2
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	2382      	movs	r3, #130	; 0x82
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	50d1      	str	r1, [r2, r3]
				ofs -= fp->fptr;
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	2382      	movs	r3, #130	; 0x82
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	58d3      	ldr	r3, [r2, r3]
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	2385      	movs	r3, #133	; 0x85
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	58d3      	ldr	r3, [r2, r3]
 800704c:	63bb      	str	r3, [r7, #56]	; 0x38
 800704e:	e02d      	b.n	80070ac <f_lseek+0x358>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	2384      	movs	r3, #132	; 0x84
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	58d3      	ldr	r3, [r2, r3]
 8007058:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800705a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705c:	2b00      	cmp	r3, #0
 800705e:	d120      	bne.n	80070a2 <f_lseek+0x34e>
					clst = create_chain(fp->fs, 0);
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	2380      	movs	r3, #128	; 0x80
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	58d3      	ldr	r3, [r2, r3]
 8007068:	2100      	movs	r1, #0
 800706a:	0018      	movs	r0, r3
 800706c:	f7fd ff4c 	bl	8004f08 <create_chain>
 8007070:	0003      	movs	r3, r0
 8007072:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007076:	2b01      	cmp	r3, #1
 8007078:	d105      	bne.n	8007086 <f_lseek+0x332>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a1a      	ldr	r2, [pc, #104]	; (80070e8 <f_lseek+0x394>)
 800707e:	2102      	movs	r1, #2
 8007080:	5499      	strb	r1, [r3, r2]
 8007082:	2302      	movs	r3, #2
 8007084:	e107      	b.n	8007296 <f_lseek+0x542>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007088:	3301      	adds	r3, #1
 800708a:	d105      	bne.n	8007098 <f_lseek+0x344>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a16      	ldr	r2, [pc, #88]	; (80070e8 <f_lseek+0x394>)
 8007090:	2101      	movs	r1, #1
 8007092:	5499      	strb	r1, [r3, r2]
 8007094:	2301      	movs	r3, #1
 8007096:	e0fe      	b.n	8007296 <f_lseek+0x542>
					fp->sclust = clst;
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	2384      	movs	r3, #132	; 0x84
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070a0:	50d1      	str	r1, [r2, r3]
				}
#endif
				fp->clust = clst;
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	2385      	movs	r3, #133	; 0x85
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070aa:	50d1      	str	r1, [r2, r3]
			}
			if (clst != 0) {
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d100      	bne.n	80070b4 <f_lseek+0x360>
 80070b2:	e086      	b.n	80071c2 <f_lseek+0x46e>
				while (ofs > bcs) {						/* Cluster following loop */
 80070b4:	e05a      	b.n	800716c <f_lseek+0x418>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a0d      	ldr	r2, [pc, #52]	; (80070f0 <f_lseek+0x39c>)
 80070ba:	5c9b      	ldrb	r3, [r3, r2]
 80070bc:	001a      	movs	r2, r3
 80070be:	2302      	movs	r3, #2
 80070c0:	4013      	ands	r3, r2
 80070c2:	d019      	beq.n	80070f8 <f_lseek+0x3a4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	2380      	movs	r3, #128	; 0x80
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	58d3      	ldr	r3, [r2, r3]
 80070cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ce:	0011      	movs	r1, r2
 80070d0:	0018      	movs	r0, r3
 80070d2:	f7fd ff19 	bl	8004f08 <create_chain>
 80070d6:	0003      	movs	r3, r0
 80070d8:	63bb      	str	r3, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d116      	bne.n	800710e <f_lseek+0x3ba>
							ofs = bcs; break;
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	603b      	str	r3, [r7, #0]
 80070e4:	e046      	b.n	8007174 <f_lseek+0x420>
 80070e6:	46c0      	nop			; (mov r8, r8)
 80070e8:	00000207 	.word	0x00000207
 80070ec:	00000202 	.word	0x00000202
 80070f0:	00000206 	.word	0x00000206
 80070f4:	00000201 	.word	0x00000201
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	2380      	movs	r3, #128	; 0x80
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	58d3      	ldr	r3, [r2, r3]
 8007100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007102:	0011      	movs	r1, r2
 8007104:	0018      	movs	r0, r3
 8007106:	f7fd fc9f 	bl	8004a48 <get_fat>
 800710a:	0003      	movs	r3, r0
 800710c:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800710e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007110:	3301      	adds	r3, #1
 8007112:	d105      	bne.n	8007120 <f_lseek+0x3cc>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a62      	ldr	r2, [pc, #392]	; (80072a0 <f_lseek+0x54c>)
 8007118:	2101      	movs	r1, #1
 800711a:	5499      	strb	r1, [r3, r2]
 800711c:	2301      	movs	r3, #1
 800711e:	e0ba      	b.n	8007296 <f_lseek+0x542>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8007120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007122:	2b01      	cmp	r3, #1
 8007124:	d909      	bls.n	800713a <f_lseek+0x3e6>
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	2380      	movs	r3, #128	; 0x80
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	58d2      	ldr	r2, [r2, r3]
 800712e:	2385      	movs	r3, #133	; 0x85
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	58d3      	ldr	r3, [r2, r3]
 8007134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007136:	429a      	cmp	r2, r3
 8007138:	d305      	bcc.n	8007146 <f_lseek+0x3f2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a58      	ldr	r2, [pc, #352]	; (80072a0 <f_lseek+0x54c>)
 800713e:	2102      	movs	r1, #2
 8007140:	5499      	strb	r1, [r3, r2]
 8007142:	2302      	movs	r3, #2
 8007144:	e0a7      	b.n	8007296 <f_lseek+0x542>
					fp->clust = clst;
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	2385      	movs	r3, #133	; 0x85
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800714e:	50d1      	str	r1, [r2, r3]
					fp->fptr += bcs;
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	2382      	movs	r3, #130	; 0x82
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	58d2      	ldr	r2, [r2, r3]
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	18d1      	adds	r1, r2, r3
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	2382      	movs	r3, #130	; 0x82
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	50d1      	str	r1, [r2, r3]
					ofs -= bcs;
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	429a      	cmp	r2, r3
 8007172:	d8a0      	bhi.n	80070b6 <f_lseek+0x362>
				}
				fp->fptr += ofs;
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	2382      	movs	r3, #130	; 0x82
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	58d2      	ldr	r2, [r2, r3]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	18d1      	adds	r1, r2, r3
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	2382      	movs	r3, #130	; 0x82
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	50d1      	str	r1, [r2, r3]
				if (ofs % SS(fp->fs)) {
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	05db      	lsls	r3, r3, #23
 800718c:	0ddb      	lsrs	r3, r3, #23
 800718e:	d018      	beq.n	80071c2 <f_lseek+0x46e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	2380      	movs	r3, #128	; 0x80
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	58d3      	ldr	r3, [r2, r3]
 8007198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800719a:	0011      	movs	r1, r2
 800719c:	0018      	movs	r0, r3
 800719e:	f7fd fc2f 	bl	8004a00 <clust2sect>
 80071a2:	0003      	movs	r3, r0
 80071a4:	637b      	str	r3, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80071a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d105      	bne.n	80071b8 <f_lseek+0x464>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a3c      	ldr	r2, [pc, #240]	; (80072a0 <f_lseek+0x54c>)
 80071b0:	2102      	movs	r1, #2
 80071b2:	5499      	strb	r1, [r3, r2]
 80071b4:	2302      	movs	r3, #2
 80071b6:	e06e      	b.n	8007296 <f_lseek+0x542>
					nsect += ofs / SS(fp->fs);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	0a5b      	lsrs	r3, r3, #9
 80071bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071be:	18d3      	adds	r3, r2, r3
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	2382      	movs	r3, #130	; 0x82
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	58d3      	ldr	r3, [r2, r3]
 80071ca:	05db      	lsls	r3, r3, #23
 80071cc:	0ddb      	lsrs	r3, r3, #23
 80071ce:	d044      	beq.n	800725a <f_lseek+0x506>
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	2386      	movs	r3, #134	; 0x86
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	58d3      	ldr	r3, [r2, r3]
 80071d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071da:	429a      	cmp	r2, r3
 80071dc:	d03d      	beq.n	800725a <f_lseek+0x506>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a30      	ldr	r2, [pc, #192]	; (80072a4 <f_lseek+0x550>)
 80071e2:	5c9b      	ldrb	r3, [r3, r2]
 80071e4:	001a      	movs	r2, r3
 80071e6:	2340      	movs	r3, #64	; 0x40
 80071e8:	4013      	ands	r3, r2
 80071ea:	d01e      	beq.n	800722a <f_lseek+0x4d6>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	2380      	movs	r3, #128	; 0x80
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	58d3      	ldr	r3, [r2, r3]
 80071f4:	4a2c      	ldr	r2, [pc, #176]	; (80072a8 <f_lseek+0x554>)
 80071f6:	5c98      	ldrb	r0, [r3, r2]
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	2386      	movs	r3, #134	; 0x86
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	58d2      	ldr	r2, [r2, r3]
 8007202:	2301      	movs	r3, #1
 8007204:	f7fd f810 	bl	8004228 <disk_write>
 8007208:	1e03      	subs	r3, r0, #0
 800720a:	d005      	beq.n	8007218 <f_lseek+0x4c4>
					ABORT(fp->fs, FR_DISK_ERR);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a24      	ldr	r2, [pc, #144]	; (80072a0 <f_lseek+0x54c>)
 8007210:	2101      	movs	r1, #1
 8007212:	5499      	strb	r1, [r3, r2]
 8007214:	2301      	movs	r3, #1
 8007216:	e03e      	b.n	8007296 <f_lseek+0x542>
				fp->flag &= ~FA__DIRTY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a22      	ldr	r2, [pc, #136]	; (80072a4 <f_lseek+0x550>)
 800721c:	5c9b      	ldrb	r3, [r3, r2]
 800721e:	2240      	movs	r2, #64	; 0x40
 8007220:	4393      	bics	r3, r2
 8007222:	b2d9      	uxtb	r1, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a1f      	ldr	r2, [pc, #124]	; (80072a4 <f_lseek+0x550>)
 8007228:	5499      	strb	r1, [r3, r2]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	2380      	movs	r3, #128	; 0x80
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	58d3      	ldr	r3, [r2, r3]
 8007232:	4a1d      	ldr	r2, [pc, #116]	; (80072a8 <f_lseek+0x554>)
 8007234:	5c98      	ldrb	r0, [r3, r2]
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800723a:	2301      	movs	r3, #1
 800723c:	f7fc ffcc 	bl	80041d8 <disk_read>
 8007240:	1e03      	subs	r3, r0, #0
 8007242:	d005      	beq.n	8007250 <f_lseek+0x4fc>
				ABORT(fp->fs, FR_DISK_ERR);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a16      	ldr	r2, [pc, #88]	; (80072a0 <f_lseek+0x54c>)
 8007248:	2101      	movs	r1, #1
 800724a:	5499      	strb	r1, [r3, r2]
 800724c:	2301      	movs	r3, #1
 800724e:	e022      	b.n	8007296 <f_lseek+0x542>
#endif
			fp->dsect = nsect;
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	2386      	movs	r3, #134	; 0x86
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007258:	50d1      	str	r1, [r2, r3]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	2382      	movs	r3, #130	; 0x82
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	58d2      	ldr	r2, [r2, r3]
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	2383      	movs	r3, #131	; 0x83
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	58cb      	ldr	r3, [r1, r3]
 800726a:	429a      	cmp	r2, r3
 800726c:	d910      	bls.n	8007290 <f_lseek+0x53c>
			fp->fsize = fp->fptr;
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	2382      	movs	r3, #130	; 0x82
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	58d1      	ldr	r1, [r2, r3]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	2383      	movs	r3, #131	; 0x83
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	50d1      	str	r1, [r2, r3]
			fp->flag |= FA__WRITTEN;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a08      	ldr	r2, [pc, #32]	; (80072a4 <f_lseek+0x550>)
 8007282:	5c9b      	ldrb	r3, [r3, r2]
 8007284:	2220      	movs	r2, #32
 8007286:	4313      	orrs	r3, r2
 8007288:	b2d9      	uxtb	r1, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a05      	ldr	r2, [pc, #20]	; (80072a4 <f_lseek+0x550>)
 800728e:	5499      	strb	r1, [r3, r2]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8007290:	233f      	movs	r3, #63	; 0x3f
 8007292:	18fb      	adds	r3, r7, r3
 8007294:	781b      	ldrb	r3, [r3, #0]
}
 8007296:	0018      	movs	r0, r3
 8007298:	46bd      	mov	sp, r7
 800729a:	b010      	add	sp, #64	; 0x40
 800729c:	bdb0      	pop	{r4, r5, r7, pc}
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	00000207 	.word	0x00000207
 80072a4:	00000206 	.word	0x00000206
 80072a8:	00000201 	.word	0x00000201

080072ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80072ac:	b590      	push	{r4, r7, lr}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	1dfb      	adds	r3, r7, #7
 80072b8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 80072ba:	2417      	movs	r4, #23
 80072bc:	193b      	adds	r3, r7, r4
 80072be:	2201      	movs	r2, #1
 80072c0:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 80072c2:	2016      	movs	r0, #22
 80072c4:	183b      	adds	r3, r7, r0
 80072c6:	2200      	movs	r2, #0
 80072c8:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 80072ca:	4b21      	ldr	r3, [pc, #132]	; (8007350 <FATFS_LinkDriverEx+0xa4>)
 80072cc:	7a5b      	ldrb	r3, [r3, #9]
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d836      	bhi.n	8007342 <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 80072d4:	4b1e      	ldr	r3, [pc, #120]	; (8007350 <FATFS_LinkDriverEx+0xa4>)
 80072d6:	7a5b      	ldrb	r3, [r3, #9]
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	001a      	movs	r2, r3
 80072dc:	4b1c      	ldr	r3, [pc, #112]	; (8007350 <FATFS_LinkDriverEx+0xa4>)
 80072de:	2100      	movs	r1, #0
 80072e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80072e2:	4b1b      	ldr	r3, [pc, #108]	; (8007350 <FATFS_LinkDriverEx+0xa4>)
 80072e4:	7a5b      	ldrb	r3, [r3, #9]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	4a19      	ldr	r2, [pc, #100]	; (8007350 <FATFS_LinkDriverEx+0xa4>)
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	18d3      	adds	r3, r2, r3
 80072ee:	3304      	adds	r3, #4
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 80072f4:	4b16      	ldr	r3, [pc, #88]	; (8007350 <FATFS_LinkDriverEx+0xa4>)
 80072f6:	7a5b      	ldrb	r3, [r3, #9]
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	001a      	movs	r2, r3
 80072fc:	4b14      	ldr	r3, [pc, #80]	; (8007350 <FATFS_LinkDriverEx+0xa4>)
 80072fe:	189b      	adds	r3, r3, r2
 8007300:	1dfa      	adds	r2, r7, #7
 8007302:	7812      	ldrb	r2, [r2, #0]
 8007304:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007306:	4b12      	ldr	r3, [pc, #72]	; (8007350 <FATFS_LinkDriverEx+0xa4>)
 8007308:	7a5b      	ldrb	r3, [r3, #9]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	1c5a      	adds	r2, r3, #1
 800730e:	b2d1      	uxtb	r1, r2
 8007310:	4a0f      	ldr	r2, [pc, #60]	; (8007350 <FATFS_LinkDriverEx+0xa4>)
 8007312:	7251      	strb	r1, [r2, #9]
 8007314:	183a      	adds	r2, r7, r0
 8007316:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8007318:	183b      	adds	r3, r7, r0
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	3330      	adds	r3, #48	; 0x30
 800731e:	b2da      	uxtb	r2, r3
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	3301      	adds	r3, #1
 8007328:	223a      	movs	r2, #58	; 0x3a
 800732a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	3302      	adds	r3, #2
 8007330:	222f      	movs	r2, #47	; 0x2f
 8007332:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	3303      	adds	r3, #3
 8007338:	2200      	movs	r2, #0
 800733a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800733c:	193b      	adds	r3, r7, r4
 800733e:	2200      	movs	r2, #0
 8007340:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8007342:	2317      	movs	r3, #23
 8007344:	18fb      	adds	r3, r7, r3
 8007346:	781b      	ldrb	r3, [r3, #0]
}
 8007348:	0018      	movs	r0, r3
 800734a:	46bd      	mov	sp, r7
 800734c:	b007      	add	sp, #28
 800734e:	bd90      	pop	{r4, r7, pc}
 8007350:	20000634 	.word	0x20000634

08007354 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	0018      	movs	r0, r3
 8007366:	f7ff ffa1 	bl	80072ac <FATFS_LinkDriverEx>
 800736a:	0003      	movs	r3, r0
}
 800736c:	0018      	movs	r0, r3
 800736e:	46bd      	mov	sp, r7
 8007370:	b002      	add	sp, #8
 8007372:	bd80      	pop	{r7, pc}

08007374 <memset>:
 8007374:	0003      	movs	r3, r0
 8007376:	1882      	adds	r2, r0, r2
 8007378:	4293      	cmp	r3, r2
 800737a:	d100      	bne.n	800737e <memset+0xa>
 800737c:	4770      	bx	lr
 800737e:	7019      	strb	r1, [r3, #0]
 8007380:	3301      	adds	r3, #1
 8007382:	e7f9      	b.n	8007378 <memset+0x4>

08007384 <__libc_init_array>:
 8007384:	b570      	push	{r4, r5, r6, lr}
 8007386:	2600      	movs	r6, #0
 8007388:	4c0c      	ldr	r4, [pc, #48]	; (80073bc <__libc_init_array+0x38>)
 800738a:	4d0d      	ldr	r5, [pc, #52]	; (80073c0 <__libc_init_array+0x3c>)
 800738c:	1b64      	subs	r4, r4, r5
 800738e:	10a4      	asrs	r4, r4, #2
 8007390:	42a6      	cmp	r6, r4
 8007392:	d109      	bne.n	80073a8 <__libc_init_array+0x24>
 8007394:	2600      	movs	r6, #0
 8007396:	f000 f819 	bl	80073cc <_init>
 800739a:	4c0a      	ldr	r4, [pc, #40]	; (80073c4 <__libc_init_array+0x40>)
 800739c:	4d0a      	ldr	r5, [pc, #40]	; (80073c8 <__libc_init_array+0x44>)
 800739e:	1b64      	subs	r4, r4, r5
 80073a0:	10a4      	asrs	r4, r4, #2
 80073a2:	42a6      	cmp	r6, r4
 80073a4:	d105      	bne.n	80073b2 <__libc_init_array+0x2e>
 80073a6:	bd70      	pop	{r4, r5, r6, pc}
 80073a8:	00b3      	lsls	r3, r6, #2
 80073aa:	58eb      	ldr	r3, [r5, r3]
 80073ac:	4798      	blx	r3
 80073ae:	3601      	adds	r6, #1
 80073b0:	e7ee      	b.n	8007390 <__libc_init_array+0xc>
 80073b2:	00b3      	lsls	r3, r6, #2
 80073b4:	58eb      	ldr	r3, [r5, r3]
 80073b6:	4798      	blx	r3
 80073b8:	3601      	adds	r6, #1
 80073ba:	e7f2      	b.n	80073a2 <__libc_init_array+0x1e>
 80073bc:	08007564 	.word	0x08007564
 80073c0:	08007564 	.word	0x08007564
 80073c4:	08007568 	.word	0x08007568
 80073c8:	08007564 	.word	0x08007564

080073cc <_init>:
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	46c0      	nop			; (mov r8, r8)
 80073d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d2:	bc08      	pop	{r3}
 80073d4:	469e      	mov	lr, r3
 80073d6:	4770      	bx	lr

080073d8 <_fini>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	46c0      	nop			; (mov r8, r8)
 80073dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073de:	bc08      	pop	{r3}
 80073e0:	469e      	mov	lr, r3
 80073e2:	4770      	bx	lr
