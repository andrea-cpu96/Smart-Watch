DIGITAL-WATCH

Introduction

This project consists on the development of a digital-watch able to play a video of 12h.
The idea is inspired by the Marteen Baas' Real Time artwork.
We want to bring the concept into a wristwatch. 

Requirements

- space compatible with smart-watches 
- SD capability
- 12h video-play
- battery rechargeble 
- low consumptions 

Battery

- I need a battery able to supply enougth power for video applications. 
- At least it should last about 24h
- Rechargeble 
- Small 

-> 402035; 37x4 mm, 400 mAh, 3.7 V, 5C, rechargeble 
-> micro-USB 

Display

- Round
- Colours (TFT or OLED)
- 3.3 V supply
- At least 24 FPS
- Dimensions for normal wrist

Video

- Video has to be compressed in order to save memory space (2h video uncompressed are about 1000 GB of space at 8-bit 1080P, 24 FPS)

- There are differents CODEC formats for coding and decoding videos. I have to care about the decoding part because the coding should be already done while the microcontroller has to implement the decoding in Real time.

- H264 is one format used by moderm television it has good performances, but it requires lot of processing capabilities.

-> MJPEG is a standard which uses various complete frames in sequence. Lower quality then H264 and highr memory required, but less processing needed. 
-> I need a method to create this kind of file starting from an MP4.
   -> .RAW files are a format of non-compressed fiels 

Firmware

The microcontroller handles the data stream between the SD-card and the GC9A01 display. 
This is done by using a specific middleware packet, FATFS, which allows the microcontroller to read files from the SD-card file system.
A specific library, GC9A01 driver, allows the microcontroller to show the frames into the dispaly. The microcontroller must have a JPEG codec peripheral,
for the MJPEG convertion. User buttons are also managed by the firmware in order to set the time. The RTC peripheral keep the correct time also during
low power mode of the microcontroller. 

-> in order to implement the videoplayer function, the microcontroller should reach the max speed for the communication with the SD-car via SPI
-> Data are decoded by a JPEG hardware codec within the microcontroller 
-> The DMA2D completes the data convertion into a format RGB565 for the round display
-> skipping some frames also helps to elaborate the video with less delay (lag), this becasue we can compensate the processing time skipping frames
-> synchronizzation between video time and actual clock time must be established in order to always show the correct time.
   Internal timer should be enabled and it must be synchronized with frames corresponding to specific times. 
-> A power management must be implemented in order to save power and charge the battery

Hardware

- microcontroller with enougth performances in terms of speed and power consumptions and with internal JPEG codec. 
- micro-usb
- design of the circuit for battery charging 
- maybe PCB space for the battery
- round display 
- small space for debuger connector (touch debug)
- SDport
- SDRAM

Consumptions 

- SD-Card requires up to 100mA for write operations (I don't know how much requires for read operation)

How to convert video from mp4 to uncompressed avi

- Use ffJPEG tool

	ffmpeg -i input.mp4 -vf "fps=30,scale=240:240" -c:v mjpeg -q:v 1 -an -f segment -segment_time 60 -reset_timestamps 1 output_%03d.avi

The video is converted from mp4 into .avi in MJPEG format. The file is also splitted into 720 files of 1 minuts each one. 

NOTES

- A pull-up on the DO cannot be omited, or some cards will fail initialization process.
- SD card from 4GB to 32GB are of different types and are considered SDHC (High  Capacity), they work different.
- FAT is the File System used by SD-Cards. FATFS is a middleware packet for file system management.  
- MMC/SDC employs NAND Flash Memory.  Generally the flash memory requires to erase existing data prior to re-write a new data, and minimum unit of erase operation, called erase block, is larger than write block size.
- Larger memory cards happen to be slower than smaller ones. 
- Not all the SD-cards support the SPI mode. SD-Cards have their own native mode, SPI is an option. 

Useful links

How SD-cards work;    			       http://elm-chan.org/docs/mmc/mmc_e.html
Tutorial for SD-Cards on STM32; 	       https://01001000.xyz/2020-08-09-Tutorial-STM32CubeIDE-SD-card/
Code example for decondig video from SD;       https://github.com/cbm80amiga/ST7735_SDVideoPlayback/blob/master/ST7735_SDVideoPlayback.ino#L82
STM32F7 for mjpeg processing; 		       https://community.st.com/t5/stm32-mcus-products/how-to-play-video-on-the-stm32/td-p/346028
Depth from 24 to 16;			       https://online-converting.com/image/convert2bmp/#google_vignette
GifLib; 				       https://sourceforge.net/p/giflib/code/ci/master/tree/
gitHub gif; 				       https://github.com/triggery/STM32F4_GIF/tree/master/IMAGE_LIB