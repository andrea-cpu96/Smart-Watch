
digital_watch_v02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d078  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0800d328  0800d328  0000e328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d6a0  0800d6a0  0000e6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d6a8  0800d6a8  0000e6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d6ac  0800d6ac  0000e6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800d6b0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000bc19c  24000070  0800d71c  0000f070  2**3
                  ALLOC
  8 ._user_heap_stack 00000c04  240bc20c  0800d71c  0000f20c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003c00d  00000000  00000000  0000f09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000055d5  00000000  00000000  0004b0a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0002338e  00000000  00000000  0005067c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001498  00000000  00000000  00073a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00004c19  00000000  00000000  00074ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00035959  00000000  00000000  00079ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003765c  00000000  00000000  000af41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00146e68  00000000  00000000  000e6a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0022d8de  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000042a0  00000000  00000000  0022d924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006c  00000000  00000000  00231bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000070 	.word	0x24000070
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800d310 	.word	0x0800d310

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000074 	.word	0x24000074
 80002ec:	0800d310 	.word	0x0800d310

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT * pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 8000390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	461d      	mov	r5, r3
 8000398:	460e      	mov	r6, r1
 800039a:	4604      	mov	r4, r0
 800039c:	9b08      	ldr	r3, [sp, #32]
  uint32_t readSize= 0;
 800039e:	2100      	movs	r1, #0
  
  pavi->pVideoBuffer = pVideoBuffer;
 80003a0:	6342      	str	r2, [r0, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;

  pavi->pAudioBuffer = pAudioBuffer;
 80003a2:	63c3      	str	r3, [r0, #60]	@ 0x3c
{
 80003a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  pavi->VideoBufferSize = VideoBufferSize;
 80003a6:	6385      	str	r5, [r0, #56]	@ 0x38
  pavi->AudioBufferSize = AudioBufferSize;
 80003a8:	6403      	str	r3, [r0, #64]	@ 0x40
  
  f_lseek(file, 0 );
 80003aa:	4630      	mov	r0, r6
  uint32_t readSize= 0;
 80003ac:	9101      	str	r1, [sp, #4]
  f_lseek(file, 0 );
 80003ae:	f00c f91d 	bl	800c5ec <f_lseek>
  
  f_read(file, pavi->pVideoBuffer, VideoBufferSize,(UINT*) &readSize );
 80003b2:	ab01      	add	r3, sp, #4
 80003b4:	462a      	mov	r2, r5
 80003b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80003b8:	4630      	mov	r0, r6
 80003ba:	f00b ff5d 	bl	800c278 <f_read>
  if(readSize != VideoBufferSize)
 80003be:	9b01      	ldr	r3, [sp, #4]
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d104      	bne.n	80003ce <AVI_ParserInit+0x3e>
  {
    return 1;
  }
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 80003c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  if(aviheader->RiffID != AVI_RIFF_ID)
 80003c6:	4a86      	ldr	r2, [pc, #536]	@ (80005e0 <AVI_ParserInit+0x250>)
 80003c8:	6819      	ldr	r1, [r3, #0]
 80003ca:	4291      	cmp	r1, r2
 80003cc:	d003      	beq.n	80003d6 <AVI_ParserInit+0x46>
    return 1;
 80003ce:	2001      	movs	r0, #1

  pavi->FileSize= f_size(file);
  pavi->CurrentImage=0;
  
  return  0;
}
 80003d0:	b002      	add	sp, #8
 80003d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(aviheader->AviID != AVI_AVI_ID)
 80003d6:	4a83      	ldr	r2, [pc, #524]	@ (80005e4 <AVI_ParserInit+0x254>)
 80003d8:	6899      	ldr	r1, [r3, #8]
 80003da:	4291      	cmp	r1, r2
 80003dc:	d1f7      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(listheader->ListID != AVI_LIST_ID)
 80003de:	4982      	ldr	r1, [pc, #520]	@ (80005e8 <AVI_ParserInit+0x258>)
 80003e0:	68da      	ldr	r2, [r3, #12]
 80003e2:	428a      	cmp	r2, r1
 80003e4:	d1f3      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(listheader->ListType != AVI_HDRL_ID)
 80003e6:	4981      	ldr	r1, [pc, #516]	@ (80005ec <AVI_ParserInit+0x25c>)
 80003e8:	6958      	ldr	r0, [r3, #20]
 80003ea:	4288      	cmp	r0, r1
 80003ec:	d1ef      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(avihheader->BlockID != AVI_AVIH_ID)
 80003ee:	f1a1 6181 	sub.w	r1, r1, #67633152	@ 0x4080000
 80003f2:	6998      	ldr	r0, [r3, #24]
 80003f4:	f5a1 416e 	sub.w	r1, r1, #60928	@ 0xee00
 80003f8:	3907      	subs	r1, #7
 80003fa:	4288      	cmp	r0, r1
 80003fc:	d1e7      	bne.n	80003ce <AVI_ParserInit+0x3e>
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 80003fe:	6a18      	ldr	r0, [r3, #32]
 8000400:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000402:	e9c4 0100 	strd	r0, r1, [r4]
  buf+=avihheader->BlockSize+8;            
 8000406:	69d9      	ldr	r1, [r3, #28]
 8000408:	3120      	adds	r1, #32
  if(listheader->ListID != AVI_LIST_ID)
 800040a:	5858      	ldr	r0, [r3, r1]
  buf+=avihheader->BlockSize+8;            
 800040c:	4419      	add	r1, r3
  if(listheader->ListID != AVI_LIST_ID)
 800040e:	4290      	cmp	r0, r2
 8000410:	d1dd      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(listheader->ListType != AVI_STRL_ID)
 8000412:	4a77      	ldr	r2, [pc, #476]	@ (80005f0 <AVI_ParserInit+0x260>)
 8000414:	6888      	ldr	r0, [r1, #8]
 8000416:	4290      	cmp	r0, r2
 8000418:	d1d9      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(strhheader->BlockID != AVI_STRH_ID)
 800041a:	f102 427c 	add.w	r2, r2, #4227858432	@ 0xfc000000
 800041e:	68c8      	ldr	r0, [r1, #12]
 8000420:	4290      	cmp	r0, r2
 8000422:	d1d4      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 8000424:	694a      	ldr	r2, [r1, #20]
 8000426:	4873      	ldr	r0, [pc, #460]	@ (80005f4 <AVI_ParserInit+0x264>)
 8000428:	4282      	cmp	r2, r0
 800042a:	d02a      	beq.n	8000482 <AVI_ParserInit+0xf2>
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 800042c:	4872      	ldr	r0, [pc, #456]	@ (80005f8 <AVI_ParserInit+0x268>)
 800042e:	4282      	cmp	r2, r0
 8000430:	d047      	beq.n	80004c2 <AVI_ParserInit+0x132>
  for(i=0;i<size;i++)
 8000432:	3d04      	subs	r5, #4
 8000434:	d0cb      	beq.n	80003ce <AVI_ParserInit+0x3e>
 8000436:	2200      	movs	r2, #0
 8000438:	4611      	mov	r1, r2
 800043a:	e002      	b.n	8000442 <AVI_ParserInit+0xb2>
 800043c:	4295      	cmp	r5, r2
 800043e:	4611      	mov	r1, r2
 8000440:	d9c5      	bls.n	80003ce <AVI_ParserInit+0x3e>
    if(buf[i] == id[0])
 8000442:	5c58      	ldrb	r0, [r3, r1]
  for(i=0;i<size;i++)
 8000444:	3201      	adds	r2, #1
    if(buf[i] == id[0])
 8000446:	eb03 0c01 	add.w	ip, r3, r1
 800044a:	286d      	cmp	r0, #109	@ 0x6d
  for(i=0;i<size;i++)
 800044c:	b292      	uxth	r2, r2
    if(buf[i] == id[0])
 800044e:	d1f5      	bne.n	800043c <AVI_ParserInit+0xac>
      if(buf[i+1] == id[1])
 8000450:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8000454:	286f      	cmp	r0, #111	@ 0x6f
 8000456:	d1f1      	bne.n	800043c <AVI_ParserInit+0xac>
        if(buf[i+2] == id[2])  
 8000458:	f89c 0002 	ldrb.w	r0, [ip, #2]
 800045c:	2876      	cmp	r0, #118	@ 0x76
 800045e:	d1ed      	bne.n	800043c <AVI_ParserInit+0xac>
          if(buf[i+3] == id[3])
 8000460:	f89c 0003 	ldrb.w	r0, [ip, #3]
 8000464:	2869      	cmp	r0, #105	@ 0x69
 8000466:	d1e9      	bne.n	800043c <AVI_ParserInit+0xac>
  if(offset == 0)
 8000468:	2900      	cmp	r1, #0
 800046a:	d0b0      	beq.n	80003ce <AVI_ParserInit+0x3e>
  if(pavi->aviInfo.SampleRate)
 800046c:	6963      	ldr	r3, [r4, #20]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d169      	bne.n	8000546 <AVI_ParserInit+0x1b6>
  pavi->CurrentImage=0;
 8000472:	2300      	movs	r3, #0
  pavi->FileSize= f_size(file);
 8000474:	68f2      	ldr	r2, [r6, #12]
  return  0;
 8000476:	4618      	mov	r0, r3
  pavi->FileSize= f_size(file);
 8000478:	6462      	str	r2, [r4, #68]	@ 0x44
  pavi->CurrentImage=0;
 800047a:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 800047c:	b002      	add	sp, #8
 800047e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 8000482:	4a5e      	ldr	r2, [pc, #376]	@ (80005fc <AVI_ParserInit+0x26c>)
 8000484:	6988      	ldr	r0, [r1, #24]
 8000486:	4290      	cmp	r0, r2
 8000488:	d1a1      	bne.n	80003ce <AVI_ParserInit+0x3e>
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800048a:	690a      	ldr	r2, [r1, #16]
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 800048c:	485c      	ldr	r0, [pc, #368]	@ (8000600 <AVI_ParserInit+0x270>)
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800048e:	3214      	adds	r2, #20
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000490:	4f5c      	ldr	r7, [pc, #368]	@ (8000604 <AVI_ParserInit+0x274>)
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 8000492:	6260      	str	r0, [r4, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 8000494:	485c      	ldr	r0, [pc, #368]	@ (8000608 <AVI_ParserInit+0x278>)
 8000496:	62a0      	str	r0, [r4, #40]	@ 0x28
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000498:	5888      	ldr	r0, [r1, r2]
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800049a:	440a      	add	r2, r1
    if(bmpheader->BlockID != AVI_STRF_ID)
 800049c:	42b8      	cmp	r0, r7
 800049e:	d196      	bne.n	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 80004a0:	e9d2 7203 	ldrd	r7, r2, [r2, #12]
 80004a4:	e9c4 7203 	strd	r7, r2, [r4, #12]
    buf+=listheader->BlockSize+8;          
 80004a8:	684a      	ldr	r2, [r1, #4]
    if(listheader->ListID != AVI_LIST_ID)
 80004aa:	4f4f      	ldr	r7, [pc, #316]	@ (80005e8 <AVI_ParserInit+0x258>)
    buf+=listheader->BlockSize+8;          
 80004ac:	3208      	adds	r2, #8
    if(listheader->ListID != AVI_LIST_ID)
 80004ae:	f851 c002 	ldr.w	ip, [r1, r2]
    buf+=listheader->BlockSize+8;          
 80004b2:	440a      	add	r2, r1
    if(listheader->ListID != AVI_LIST_ID)
 80004b4:	45bc      	cmp	ip, r7
 80004b6:	d070      	beq.n	800059a <AVI_ParserInit+0x20a>
      pavi->aviInfo.SampleRate=0;          
 80004b8:	2200      	movs	r2, #0
 80004ba:	6162      	str	r2, [r4, #20]
      pavi->aviInfo.Channels=0;          
 80004bc:	8322      	strh	r2, [r4, #24]
      pavi->aviInfo.AudioType=0;          
 80004be:	83a2      	strh	r2, [r4, #28]
 80004c0:	e7b7      	b.n	8000432 <AVI_ParserInit+0xa2>
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80004c2:	690a      	ldr	r2, [r1, #16]
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 80004c4:	4851      	ldr	r0, [pc, #324]	@ (800060c <AVI_ParserInit+0x27c>)
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80004c6:	3214      	adds	r2, #20
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 80004c8:	6260      	str	r0, [r4, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 80004ca:	4851      	ldr	r0, [pc, #324]	@ (8000610 <AVI_ParserInit+0x280>)
    if(wavheader->BlockID != AVI_STRF_ID)
 80004cc:	f851 c002 	ldr.w	ip, [r1, r2]
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80004d0:	440a      	add	r2, r1
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 80004d2:	62a0      	str	r0, [r4, #40]	@ 0x28
    if(wavheader->BlockID != AVI_STRF_ID)
 80004d4:	484b      	ldr	r0, [pc, #300]	@ (8000604 <AVI_ParserInit+0x274>)
 80004d6:	4584      	cmp	ip, r0
 80004d8:	f47f af79 	bne.w	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 80004dc:	68d7      	ldr	r7, [r2, #12]
    buf+=listheader->BlockSize+8;          
 80004de:	6848      	ldr	r0, [r1, #4]
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 80004e0:	6167      	str	r7, [r4, #20]
    buf+=listheader->BlockSize+8;          
 80004e2:	3008      	adds	r0, #8
    pavi->aviInfo.Channels=wavheader->Channels;        
 80004e4:	8957      	ldrh	r7, [r2, #10]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 80004e6:	8912      	ldrh	r2, [r2, #8]
    if(listheader->ListID != AVI_LIST_ID)
 80004e8:	f851 e000 	ldr.w	lr, [r1, r0]
    pavi->aviInfo.Channels=wavheader->Channels;        
 80004ec:	8327      	strh	r7, [r4, #24]
    if(listheader->ListID != AVI_LIST_ID)
 80004ee:	4f3e      	ldr	r7, [pc, #248]	@ (80005e8 <AVI_ParserInit+0x258>)
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 80004f0:	83a2      	strh	r2, [r4, #28]
    buf+=listheader->BlockSize+8;          
 80004f2:	180a      	adds	r2, r1, r0
    if(listheader->ListID != AVI_LIST_ID)
 80004f4:	45be      	cmp	lr, r7
 80004f6:	f47f af6a 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(listheader->ListType != AVI_STRL_ID)
 80004fa:	493d      	ldr	r1, [pc, #244]	@ (80005f0 <AVI_ParserInit+0x260>)
 80004fc:	6890      	ldr	r0, [r2, #8]
 80004fe:	4288      	cmp	r0, r1
 8000500:	f47f af65 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(strhheader->BlockID != AVI_STRH_ID)
 8000504:	f101 417c 	add.w	r1, r1, #4227858432	@ 0xfc000000
 8000508:	68d0      	ldr	r0, [r2, #12]
 800050a:	4288      	cmp	r0, r1
 800050c:	f47f af5f 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 8000510:	f101 612f 	add.w	r1, r1, #183500800	@ 0xaf00000
 8000514:	6950      	ldr	r0, [r2, #20]
 8000516:	f501 31fa 	add.w	r1, r1, #128000	@ 0x1f400
 800051a:	f201 1103 	addw	r1, r1, #259	@ 0x103
 800051e:	4288      	cmp	r0, r1
 8000520:	f47f af55 	bne.w	80003ce <AVI_ParserInit+0x3e>
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 8000524:	6911      	ldr	r1, [r2, #16]
 8000526:	3114      	adds	r1, #20
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000528:	5850      	ldr	r0, [r2, r1]
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800052a:	440a      	add	r2, r1
    if(bmpheader->BlockID != AVI_STRF_ID)
 800052c:	4560      	cmp	r0, ip
 800052e:	f47f af4e 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 8000532:	4932      	ldr	r1, [pc, #200]	@ (80005fc <AVI_ParserInit+0x26c>)
 8000534:	6990      	ldr	r0, [r2, #24]
 8000536:	4288      	cmp	r0, r1
 8000538:	f47f af49 	bne.w	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800053c:	e9d2 1203 	ldrd	r1, r2, [r2, #12]
 8000540:	e9c4 1203 	strd	r1, r2, [r4, #12]
 8000544:	e775      	b.n	8000432 <AVI_ParserInit+0xa2>
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 8000546:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
  for(i=0;i<size;i++)
 800054a:	2300      	movs	r3, #0
    if(buf[i] == id[0])
 800054c:	f898 0000 	ldrb.w	r0, [r8]
  for(i=0;i<size;i++)
 8000550:	4619      	mov	r1, r3
 8000552:	e003      	b.n	800055c <AVI_ParserInit+0x1cc>
 8000554:	429d      	cmp	r5, r3
 8000556:	4619      	mov	r1, r3
 8000558:	f67f af39 	bls.w	80003ce <AVI_ParserInit+0x3e>
    if(buf[i] == id[0])
 800055c:	f81c 2001 	ldrb.w	r2, [ip, r1]
  for(i=0;i<size;i++)
 8000560:	3301      	adds	r3, #1
    if(buf[i] == id[0])
 8000562:	4282      	cmp	r2, r0
  for(i=0;i<size;i++)
 8000564:	b29b      	uxth	r3, r3
    if(buf[i] == id[0])
 8000566:	d1f5      	bne.n	8000554 <AVI_ParserInit+0x1c4>
      if(buf[i+1] == id[1])
 8000568:	eb0c 0201 	add.w	r2, ip, r1
 800056c:	f898 e001 	ldrb.w	lr, [r8, #1]
 8000570:	7857      	ldrb	r7, [r2, #1]
 8000572:	4577      	cmp	r7, lr
 8000574:	d1ee      	bne.n	8000554 <AVI_ParserInit+0x1c4>
        if(buf[i+2] == id[2])  
 8000576:	f892 e002 	ldrb.w	lr, [r2, #2]
 800057a:	f898 7002 	ldrb.w	r7, [r8, #2]
 800057e:	45be      	cmp	lr, r7
 8000580:	d1e8      	bne.n	8000554 <AVI_ParserInit+0x1c4>
          if(buf[i+3] == id[3])
 8000582:	f892 e003 	ldrb.w	lr, [r2, #3]
 8000586:	f898 7003 	ldrb.w	r7, [r8, #3]
 800058a:	45be      	cmp	lr, r7
 800058c:	d1e2      	bne.n	8000554 <AVI_ParserInit+0x1c4>
    if(offset == 0)
 800058e:	2900      	cmp	r1, #0
 8000590:	f43f af1d 	beq.w	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 8000594:	8893      	ldrh	r3, [r2, #4]
 8000596:	8363      	strh	r3, [r4, #26]
 8000598:	e76b      	b.n	8000472 <AVI_ParserInit+0xe2>
      if(listheader->ListType != AVI_STRL_ID)
 800059a:	4915      	ldr	r1, [pc, #84]	@ (80005f0 <AVI_ParserInit+0x260>)
 800059c:	6897      	ldr	r7, [r2, #8]
 800059e:	428f      	cmp	r7, r1
 80005a0:	f47f af15 	bne.w	80003ce <AVI_ParserInit+0x3e>
      if(strhheader->BlockID != AVI_STRH_ID)
 80005a4:	f101 417c 	add.w	r1, r1, #4227858432	@ 0xfc000000
 80005a8:	68d7      	ldr	r7, [r2, #12]
 80005aa:	428f      	cmp	r7, r1
 80005ac:	f47f af0f 	bne.w	80003ce <AVI_ParserInit+0x3e>
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 80005b0:	f101 612f 	add.w	r1, r1, #183500800	@ 0xaf00000
 80005b4:	6957      	ldr	r7, [r2, #20]
 80005b6:	f501 3100 	add.w	r1, r1, #131072	@ 0x20000
 80005ba:	31ee      	adds	r1, #238	@ 0xee
 80005bc:	428f      	cmp	r7, r1
 80005be:	f47f af06 	bne.w	80003ce <AVI_ParserInit+0x3e>
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80005c2:	6911      	ldr	r1, [r2, #16]
 80005c4:	3114      	adds	r1, #20
      if(wavheader->BlockID != AVI_STRF_ID)
 80005c6:	5857      	ldr	r7, [r2, r1]
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80005c8:	440a      	add	r2, r1
      if(wavheader->BlockID != AVI_STRF_ID)
 80005ca:	4287      	cmp	r7, r0
 80005cc:	f47f aeff 	bne.w	80003ce <AVI_ParserInit+0x3e>
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 80005d0:	68d1      	ldr	r1, [r2, #12]
 80005d2:	6161      	str	r1, [r4, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 80005d4:	8951      	ldrh	r1, [r2, #10]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 80005d6:	8912      	ldrh	r2, [r2, #8]
      pavi->aviInfo.Channels=wavheader->Channels;  
 80005d8:	8321      	strh	r1, [r4, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 80005da:	83a2      	strh	r2, [r4, #28]
 80005dc:	e729      	b.n	8000432 <AVI_ParserInit+0xa2>
 80005de:	bf00      	nop
 80005e0:	46464952 	.word	0x46464952
 80005e4:	20495641 	.word	0x20495641
 80005e8:	5453494c 	.word	0x5453494c
 80005ec:	6c726468 	.word	0x6c726468
 80005f0:	6c727473 	.word	0x6c727473
 80005f4:	73646976 	.word	0x73646976
 80005f8:	73647561 	.word	0x73647561
 80005fc:	47504a4d 	.word	0x47504a4d
 8000600:	0800d328 	.word	0x0800d328
 8000604:	66727473 	.word	0x66727473
 8000608:	0800d330 	.word	0x0800d330
 800060c:	0800d338 	.word	0x0800d338
 8000610:	0800d340 	.word	0x0800d340

08000614 <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT * pavi, FIL *file, uint8_t skipFlag)
{
 8000614:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t  offset ;
  uint32_t readSize = 0;
 8000616:	2300      	movs	r3, #0
{
 8000618:	b083      	sub	sp, #12
  
  if(pavi->CurrentImage== 0 )
 800061a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
{
 800061c:	4605      	mov	r5, r0
 800061e:	460e      	mov	r6, r1
 8000620:	4617      	mov	r7, r2
  uint32_t readSize = 0;
 8000622:	9301      	str	r3, [sp, #4]
  if(pavi->CurrentImage== 0 )
 8000624:	b164      	cbz	r4, 8000640 <AVI_GetFrame+0x2c>
    f_lseek(file, offset + 12 );
    
  }

  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 8000626:	8beb      	ldrh	r3, [r5, #30]
 8000628:	f246 4263 	movw	r2, #25699	@ 0x6463
 800062c:	4293      	cmp	r3, r2
 800062e:	d046      	beq.n	80006be <AVI_GetFrame+0xaa>

	}
    
    return AVI_VIDEO_FRAME;
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 8000630:	f247 7262 	movw	r2, #30562	@ 0x7762
 8000634:	4293      	cmp	r3, r2
 8000636:	f000 808c 	beq.w	8000752 <AVI_GetFrame+0x13e>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
    
  }
  
  return 0;
 800063a:	2000      	movs	r0, #0
}
 800063c:	b003      	add	sp, #12
 800063e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f_lseek(file, 0 ); /* Go to the file start */
 8000640:	4621      	mov	r1, r4
 8000642:	4630      	mov	r0, r6
 8000644:	f00b ffd2 	bl	800c5ec <f_lseek>
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize);
 8000648:	ab01      	add	r3, sp, #4
 800064a:	4630      	mov	r0, r6
 800064c:	e9d5 120d 	ldrd	r1, r2, [r5, #52]	@ 0x34
 8000650:	f00b fe12 	bl	800c278 <f_read>
  size-=4;
 8000654:	e9d5 210d 	ldrd	r2, r1, [r5, #52]	@ 0x34
  for(i=0;i<size;i++)
 8000658:	3904      	subs	r1, #4
 800065a:	d01d      	beq.n	8000698 <AVI_GetFrame+0x84>
 800065c:	4623      	mov	r3, r4
 800065e:	e002      	b.n	8000666 <AVI_GetFrame+0x52>
 8000660:	4299      	cmp	r1, r3
 8000662:	461c      	mov	r4, r3
 8000664:	d918      	bls.n	8000698 <AVI_GetFrame+0x84>
    if(buf[i] == id[0])
 8000666:	f812 c004 	ldrb.w	ip, [r2, r4]
  for(i=0;i<size;i++)
 800066a:	3301      	adds	r3, #1
    if(buf[i] == id[0])
 800066c:	f1bc 0f6d 	cmp.w	ip, #109	@ 0x6d
  for(i=0;i<size;i++)
 8000670:	b29b      	uxth	r3, r3
    if(buf[i] == id[0])
 8000672:	d1f5      	bne.n	8000660 <AVI_GetFrame+0x4c>
      if(buf[i+1] == id[1])
 8000674:	1910      	adds	r0, r2, r4
 8000676:	f890 c001 	ldrb.w	ip, [r0, #1]
 800067a:	f1bc 0f6f 	cmp.w	ip, #111	@ 0x6f
 800067e:	d1ef      	bne.n	8000660 <AVI_GetFrame+0x4c>
        if(buf[i+2] == id[2])  
 8000680:	f890 c002 	ldrb.w	ip, [r0, #2]
 8000684:	f1bc 0f76 	cmp.w	ip, #118	@ 0x76
 8000688:	d1ea      	bne.n	8000660 <AVI_GetFrame+0x4c>
          if(buf[i+3] == id[3])
 800068a:	78c0      	ldrb	r0, [r0, #3]
 800068c:	2869      	cmp	r0, #105	@ 0x69
 800068e:	d1e7      	bne.n	8000660 <AVI_GetFrame+0x4c>
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 8000690:	1d23      	adds	r3, r4, #4
    f_lseek(file, offset + 12 );
 8000692:	f104 010c 	add.w	r1, r4, #12
 8000696:	e001      	b.n	800069c <AVI_GetFrame+0x88>
  for(i=0;i<size;i++)
 8000698:	210c      	movs	r1, #12
 800069a:	2304      	movs	r3, #4
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 800069c:	441a      	add	r2, r3
    f_lseek(file, offset + 12 );
 800069e:	4630      	mov	r0, r6
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 80006a0:	8853      	ldrh	r3, [r2, #2]
 80006a2:	ba5b      	rev16	r3, r3
 80006a4:	83eb      	strh	r3, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 80006a6:	6853      	ldr	r3, [r2, #4]
  if(pavi->aviInfo.StreamSize%2)
 80006a8:	07da      	lsls	r2, r3, #31
    pavi->aviInfo.StreamSize++;
 80006aa:	bf48      	it	mi
 80006ac:	3301      	addmi	r3, #1
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 80006ae:	622b      	str	r3, [r5, #32]
    f_lseek(file, offset + 12 );
 80006b0:	f00b ff9c 	bl	800c5ec <f_lseek>
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 80006b4:	8beb      	ldrh	r3, [r5, #30]
 80006b6:	f246 4263 	movw	r2, #25699	@ 0x6463
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d1b8      	bne.n	8000630 <AVI_GetFrame+0x1c>
	if(skipFlag == 1)
 80006be:	2f01      	cmp	r7, #1
 80006c0:	d018      	beq.n	80006f4 <AVI_GetFrame+0xe0>
	else if(skipFlag == 2)
 80006c2:	2f02      	cmp	r7, #2
 80006c4:	d02d      	beq.n	8000722 <AVI_GetFrame+0x10e>
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006c6:	6a29      	ldr	r1, [r5, #32]
		f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 80006c8:	ab01      	add	r3, sp, #4
 80006ca:	4630      	mov	r0, r6
 80006cc:	f101 0208 	add.w	r2, r1, #8
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006d0:	6329      	str	r1, [r5, #48]	@ 0x30
		f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 80006d2:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80006d4:	f00b fdd0 	bl	800c278 <f_read>
		__AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 80006d8:	6a2a      	ldr	r2, [r5, #32]
 80006da:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80006dc:	4413      	add	r3, r2
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 80006de:	885a      	ldrh	r2, [r3, #2]
 80006e0:	ba52      	rev16	r2, r2
 80006e2:	83ea      	strh	r2, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 80006e4:	685b      	ldr	r3, [r3, #4]
  if(pavi->aviInfo.StreamSize%2)
 80006e6:	07d9      	lsls	r1, r3, #31
 80006e8:	461a      	mov	r2, r3
 80006ea:	d518      	bpl.n	800071e <AVI_GetFrame+0x10a>
    pavi->aviInfo.StreamSize++;
 80006ec:	3301      	adds	r3, #1
 80006ee:	622b      	str	r3, [r5, #32]
    return AVI_VIDEO_FRAME;
 80006f0:	2001      	movs	r0, #1
 80006f2:	e7a3      	b.n	800063c <AVI_GetFrame+0x28>
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006f4:	6a2b      	ldr	r3, [r5, #32]
		f_lseek(file, f_tell(file) + pavi->FrameSize);
 80006f6:	4630      	mov	r0, r6
 80006f8:	69b1      	ldr	r1, [r6, #24]
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006fa:	632b      	str	r3, [r5, #48]	@ 0x30
		f_lseek(file, f_tell(file) + pavi->FrameSize);
 80006fc:	4419      	add	r1, r3
 80006fe:	f00b ff75 	bl	800c5ec <f_lseek>
	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 8000702:	ab01      	add	r3, sp, #4
 8000704:	2208      	movs	r2, #8
 8000706:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8000708:	4630      	mov	r0, r6
 800070a:	f00b fdb5 	bl	800c278 <f_read>
	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 800070e:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 8000710:	8853      	ldrh	r3, [r2, #2]
 8000712:	ba5b      	rev16	r3, r3
 8000714:	83eb      	strh	r3, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 8000716:	6853      	ldr	r3, [r2, #4]
  if(pavi->aviInfo.StreamSize%2)
 8000718:	07dc      	lsls	r4, r3, #31
 800071a:	461a      	mov	r2, r3
 800071c:	d4e6      	bmi.n	80006ec <AVI_GetFrame+0xd8>
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800071e:	622a      	str	r2, [r5, #32]
 8000720:	e7e6      	b.n	80006f0 <AVI_GetFrame+0xdc>
		f_lseek(file, f_tell(file) - pavi->FrameSize - 8 - 8);
 8000722:	69b3      	ldr	r3, [r6, #24]
 8000724:	4630      	mov	r0, r6
 8000726:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8000728:	3b10      	subs	r3, #16
 800072a:	1a59      	subs	r1, r3, r1
 800072c:	f00b ff5e 	bl	800c5ec <f_lseek>
	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 8000730:	ab01      	add	r3, sp, #4
 8000732:	2208      	movs	r2, #8
 8000734:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8000736:	4630      	mov	r0, r6
 8000738:	f00b fd9e 	bl	800c278 <f_read>
	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 800073c:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 800073e:	8853      	ldrh	r3, [r2, #2]
 8000740:	ba5b      	rev16	r3, r3
 8000742:	83eb      	strh	r3, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 8000744:	6853      	ldr	r3, [r2, #4]
  if(pavi->aviInfo.StreamSize%2)
 8000746:	07d8      	lsls	r0, r3, #31
    pavi->aviInfo.StreamSize++;
 8000748:	bf48      	it	mi
 800074a:	3301      	addmi	r3, #1
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800074c:	622b      	str	r3, [r5, #32]
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800074e:	632b      	str	r3, [r5, #48]	@ 0x30
 8000750:	e7ce      	b.n	80006f0 <AVI_GetFrame+0xdc>
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 8000752:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8000754:	ab01      	add	r3, sp, #4
 8000756:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
 8000758:	4630      	mov	r0, r6
 800075a:	3208      	adds	r2, #8
 800075c:	f00b fd8c 	bl	800c278 <f_read>
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 8000760:	6a2a      	ldr	r2, [r5, #32]
 8000762:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    return AVI_AUDIO_FRAME;
 8000764:	2002      	movs	r0, #2
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 8000766:	4413      	add	r3, r2
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 8000768:	885a      	ldrh	r2, [r3, #2]
 800076a:	ba52      	rev16	r2, r2
 800076c:	83ea      	strh	r2, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800076e:	685b      	ldr	r3, [r3, #4]
  if(pavi->aviInfo.StreamSize%2)
 8000770:	07da      	lsls	r2, r3, #31
    pavi->aviInfo.StreamSize++;
 8000772:	bf48      	it	mi
 8000774:	3301      	addmi	r3, #1
 8000776:	622b      	str	r3, [r5, #32]
 8000778:	e760      	b.n	800063c <AVI_GetFrame+0x28>
 800077a:	bf00      	nop

0800077c <GC9A01_write_data.constprop.0>:
    GC9A01_set_chip_select(OFF);
    GC9A01_spi_tx(&cmd, sizeof(cmd));
    GC9A01_set_chip_select(ON);
}

void GC9A01_write_data(uint8_t *data, size_t len) {
 800077c:	b538      	push	{r3, r4, r5, lr}
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800077e:	4c0e      	ldr	r4, [pc, #56]	@ (80007b8 <GC9A01_write_data.constprop.0+0x3c>)
void GC9A01_write_data(uint8_t *data, size_t len) {
 8000780:	4605      	mov	r5, r0
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2102      	movs	r1, #2
 8000786:	4620      	mov	r0, r4
 8000788:	f003 fe68 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800078c:	4620      	mov	r0, r4
 800078e:	2200      	movs	r2, #0
 8000790:	2101      	movs	r1, #1
 8000792:	f003 fe63 	bl	800445c <HAL_GPIO_WritePin>
HAL_StatusTypeDef ret;
int GC9A01_spi_tx(uint8_t *data, uint16_t size)
{


	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000796:	4629      	mov	r1, r5
 8000798:	2201      	movs	r2, #1
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	4807      	ldr	r0, [pc, #28]	@ (80007bc <GC9A01_write_data.constprop.0+0x40>)
 80007a0:	f008 fe28 	bl	80093f4 <HAL_SPI_Transmit>
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <GC9A01_write_data.constprop.0+0x44>)
 80007a6:	4605      	mov	r5, r0
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	4620      	mov	r0, r4
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80007ac:	701d      	strb	r5, [r3, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80007ae:	4611      	mov	r1, r2
}
 80007b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80007b4:	f003 be52 	b.w	800445c <HAL_GPIO_WritePin>
 80007b8:	58020400 	.word	0x58020400
 80007bc:	240001a0 	.word	0x240001a0
 80007c0:	2400008c 	.word	0x2400008c

080007c4 <GC9A01_set_data_command>:
    if (val==0) {
 80007c4:	4602      	mov	r2, r0
 80007c6:	b100      	cbz	r0, 80007ca <GC9A01_set_data_command+0x6>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2102      	movs	r1, #2
 80007cc:	4801      	ldr	r0, [pc, #4]	@ (80007d4 <GC9A01_set_data_command+0x10>)
 80007ce:	f003 be45 	b.w	800445c <HAL_GPIO_WritePin>
 80007d2:	bf00      	nop
 80007d4:	58020400 	.word	0x58020400

080007d8 <GC9A01_set_chip_select>:
    if (val==0) {
 80007d8:	4602      	mov	r2, r0
 80007da:	b918      	cbnz	r0, 80007e4 <GC9A01_set_chip_select+0xc>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80007dc:	2101      	movs	r1, #1
 80007de:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <GC9A01_set_chip_select+0x18>)
 80007e0:	f003 be3c 	b.w	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	4802      	ldr	r0, [pc, #8]	@ (80007f0 <GC9A01_set_chip_select+0x18>)
 80007e8:	4611      	mov	r1, r2
 80007ea:	f003 be37 	b.w	800445c <HAL_GPIO_WritePin>
 80007ee:	bf00      	nop
 80007f0:	58020400 	.word	0x58020400

080007f4 <GC9A01_write_command>:
void GC9A01_write_command(uint8_t cmd) {
 80007f4:	b510      	push	{r4, lr}
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 80007f6:	4c11      	ldr	r4, [pc, #68]	@ (800083c <GC9A01_write_command+0x48>)
void GC9A01_write_command(uint8_t cmd) {
 80007f8:	b082      	sub	sp, #8
 80007fa:	4603      	mov	r3, r0
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	4620      	mov	r0, r4
 8000800:	2102      	movs	r1, #2
void GC9A01_write_command(uint8_t cmd) {
 8000802:	f88d 3007 	strb.w	r3, [sp, #7]
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000806:	f003 fe29 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800080a:	4620      	mov	r0, r4
 800080c:	2200      	movs	r2, #0
 800080e:	2101      	movs	r1, #1
 8000810:	f003 fe24 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000814:	f10d 0107 	add.w	r1, sp, #7
 8000818:	2201      	movs	r2, #1
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	4808      	ldr	r0, [pc, #32]	@ (8000840 <GC9A01_write_command+0x4c>)
 8000820:	f008 fde8 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000824:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000826:	4684      	mov	ip, r0
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <GC9A01_write_command+0x50>)
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800082a:	4620      	mov	r0, r4
 800082c:	4611      	mov	r1, r2
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800082e:	f883 c000 	strb.w	ip, [r3]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000832:	f003 fe13 	bl	800445c <HAL_GPIO_WritePin>
}
 8000836:	b002      	add	sp, #8
 8000838:	bd10      	pop	{r4, pc}
 800083a:	bf00      	nop
 800083c:	58020400 	.word	0x58020400
 8000840:	240001a0 	.word	0x240001a0
 8000844:	2400008c 	.word	0x2400008c

08000848 <GC9A01_init>:
void GC9A01_init(void) {
 8000848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800084c:	2201      	movs	r2, #1
 800084e:	4cfc      	ldr	r4, [pc, #1008]	@ (8000c40 <GC9A01_init+0x3f8>)
void GC9A01_init(void) {
 8000850:	b083      	sub	sp, #12
 8000852:	2514      	movs	r5, #20
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000854:	4611      	mov	r1, r2
 8000856:	4620      	mov	r0, r4
 8000858:	f003 fe00 	bl	800445c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800085c:	2005      	movs	r0, #5
 800085e:	f003 fa63 	bl	8003d28 <HAL_Delay>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2104      	movs	r1, #4
 8000866:	4620      	mov	r0, r4
 8000868:	f003 fdf8 	bl	800445c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800086c:	200a      	movs	r0, #10
 800086e:	f003 fa5b 	bl	8003d28 <HAL_Delay>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2104      	movs	r1, #4
 8000876:	4620      	mov	r0, r4
 8000878:	f003 fdf0 	bl	800445c <HAL_GPIO_WritePin>
    HAL_Delay(120);
 800087c:	2078      	movs	r0, #120	@ 0x78
 800087e:	f003 fa53 	bl	8003d28 <HAL_Delay>
    GC9A01_write_command(0xEF);
 8000882:	20ef      	movs	r0, #239	@ 0xef
 8000884:	f7ff ffb6 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_command(0xEB);
 8000888:	20eb      	movs	r0, #235	@ 0xeb
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800088a:	4eee      	ldr	r6, [pc, #952]	@ (8000c44 <GC9A01_init+0x3fc>)
    GC9A01_write_command(0xEB);
 800088c:	f7ff ffb2 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000890:	4620      	mov	r0, r4
 8000892:	2201      	movs	r2, #1
 8000894:	2102      	movs	r1, #2
 8000896:	f88d 5007 	strb.w	r5, [sp, #7]
 800089a:	f003 fddf 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800089e:	4620      	mov	r0, r4
 80008a0:	2200      	movs	r2, #0
 80008a2:	2101      	movs	r1, #1
 80008a4:	f003 fdda 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	f10d 0107 	add.w	r1, sp, #7
 80008b0:	2201      	movs	r2, #1
 80008b2:	4630      	mov	r0, r6
 80008b4:	4fe4      	ldr	r7, [pc, #912]	@ (8000c48 <GC9A01_init+0x400>)
 80008b6:	f008 fd9d 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80008ba:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80008bc:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80008be:	4620      	mov	r0, r4
 80008c0:	4611      	mov	r1, r2
 80008c2:	f04f 0bff 	mov.w	fp, #255	@ 0xff
 80008c6:	f003 fdc9 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xFE);
 80008ca:	20fe      	movs	r0, #254	@ 0xfe
 80008cc:	f7ff ff92 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 80008d0:	20ef      	movs	r0, #239	@ 0xef
 80008d2:	f7ff ff8f 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_command(0xEB);
 80008d6:	20eb      	movs	r0, #235	@ 0xeb
 80008d8:	f7ff ff8c 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80008dc:	4620      	mov	r0, r4
 80008de:	2201      	movs	r2, #1
 80008e0:	2102      	movs	r1, #2
 80008e2:	f88d 5007 	strb.w	r5, [sp, #7]
 80008e6:	f003 fdb9 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80008ea:	4620      	mov	r0, r4
 80008ec:	2200      	movs	r2, #0
 80008ee:	2101      	movs	r1, #1
 80008f0:	f04f 0900 	mov.w	r9, #0
 80008f4:	f003 fdb2 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80008f8:	f04f 33ff 	mov.w	r3, #4294967295
 80008fc:	f10d 0107 	add.w	r1, sp, #7
 8000900:	2201      	movs	r2, #1
 8000902:	4630      	mov	r0, r6
 8000904:	f04f 0802 	mov.w	r8, #2
 8000908:	f008 fd74 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800090c:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800090e:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000910:	4620      	mov	r0, r4
 8000912:	4611      	mov	r1, r2
 8000914:	f04f 0a08 	mov.w	sl, #8
 8000918:	f003 fda0 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x84);
 800091c:	2084      	movs	r0, #132	@ 0x84
 800091e:	f7ff ff69 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 8000922:	2340      	movs	r3, #64	@ 0x40
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000924:	4620      	mov	r0, r4
 8000926:	2201      	movs	r2, #1
 8000928:	2102      	movs	r1, #2
 800092a:	f88d 3007 	strb.w	r3, [sp, #7]
 800092e:	f003 fd95 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000932:	4620      	mov	r0, r4
 8000934:	2200      	movs	r2, #0
 8000936:	2101      	movs	r1, #1
 8000938:	f003 fd90 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
 8000940:	f10d 0107 	add.w	r1, sp, #7
 8000944:	2201      	movs	r2, #1
 8000946:	4630      	mov	r0, r6
 8000948:	f008 fd54 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800094c:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800094e:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000950:	4620      	mov	r0, r4
 8000952:	4611      	mov	r1, r2
 8000954:	f003 fd82 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x85);
 8000958:	2085      	movs	r0, #133	@ 0x85
 800095a:	f7ff ff4b 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800095e:	4620      	mov	r0, r4
 8000960:	2201      	movs	r2, #1
 8000962:	2102      	movs	r1, #2
 8000964:	f88d b007 	strb.w	fp, [sp, #7]
 8000968:	f003 fd78 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800096c:	4620      	mov	r0, r4
 800096e:	2200      	movs	r2, #0
 8000970:	2101      	movs	r1, #1
 8000972:	f003 fd73 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	f10d 0107 	add.w	r1, sp, #7
 800097e:	2201      	movs	r2, #1
 8000980:	4630      	mov	r0, r6
 8000982:	f008 fd37 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000986:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000988:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800098a:	4620      	mov	r0, r4
 800098c:	4611      	mov	r1, r2
 800098e:	f003 fd65 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x86);
 8000992:	2086      	movs	r0, #134	@ 0x86
 8000994:	f7ff ff2e 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000998:	4620      	mov	r0, r4
 800099a:	2201      	movs	r2, #1
 800099c:	2102      	movs	r1, #2
 800099e:	f88d b007 	strb.w	fp, [sp, #7]
 80009a2:	f003 fd5b 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80009a6:	464a      	mov	r2, r9
 80009a8:	4620      	mov	r0, r4
 80009aa:	2101      	movs	r1, #1
 80009ac:	f003 fd56 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80009b0:	f04f 33ff 	mov.w	r3, #4294967295
 80009b4:	f10d 0107 	add.w	r1, sp, #7
 80009b8:	2201      	movs	r2, #1
 80009ba:	4630      	mov	r0, r6
 80009bc:	f008 fd1a 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80009c0:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80009c2:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80009c4:	4620      	mov	r0, r4
 80009c6:	4615      	mov	r5, r2
 80009c8:	4611      	mov	r1, r2
 80009ca:	f003 fd47 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x87);
 80009ce:	2087      	movs	r0, #135	@ 0x87
 80009d0:	f7ff ff10 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80009d4:	462a      	mov	r2, r5
 80009d6:	4620      	mov	r0, r4
 80009d8:	2102      	movs	r1, #2
 80009da:	f88d b007 	strb.w	fp, [sp, #7]
 80009de:	f003 fd3d 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80009e2:	464a      	mov	r2, r9
 80009e4:	4629      	mov	r1, r5
 80009e6:	4620      	mov	r0, r4
 80009e8:	f003 fd38 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
 80009f0:	462a      	mov	r2, r5
 80009f2:	f10d 0107 	add.w	r1, sp, #7
 80009f6:	4630      	mov	r0, r6
 80009f8:	f008 fcfc 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80009fc:	462a      	mov	r2, r5
 80009fe:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000a00:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000a02:	4620      	mov	r0, r4
 8000a04:	f003 fd2a 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x88);
 8000a08:	2088      	movs	r0, #136	@ 0x88
 8000a0a:	f7ff fef3 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 8000a0e:	230a      	movs	r3, #10
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000a10:	462a      	mov	r2, r5
 8000a12:	4620      	mov	r0, r4
 8000a14:	2102      	movs	r1, #2
 8000a16:	f88d 3007 	strb.w	r3, [sp, #7]
 8000a1a:	f003 fd1f 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000a1e:	464a      	mov	r2, r9
 8000a20:	4629      	mov	r1, r5
 8000a22:	4620      	mov	r0, r4
 8000a24:	f003 fd1a 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2c:	462a      	mov	r2, r5
 8000a2e:	f10d 0107 	add.w	r1, sp, #7
 8000a32:	4630      	mov	r0, r6
 8000a34:	f008 fcde 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000a38:	462a      	mov	r2, r5
 8000a3a:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000a3c:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000a3e:	4620      	mov	r0, r4
 8000a40:	f003 fd0c 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x89);
 8000a44:	2089      	movs	r0, #137	@ 0x89
 8000a46:	f7ff fed5 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000a4a:	f04f 0321 	mov.w	r3, #33	@ 0x21
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000a4e:	462a      	mov	r2, r5
 8000a50:	4620      	mov	r0, r4
 8000a52:	2102      	movs	r1, #2
 8000a54:	f88d 3007 	strb.w	r3, [sp, #7]
 8000a58:	f003 fd00 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000a5c:	464a      	mov	r2, r9
 8000a5e:	4629      	mov	r1, r5
 8000a60:	4620      	mov	r0, r4
 8000a62:	f003 fcfb 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	462a      	mov	r2, r5
 8000a6c:	f10d 0107 	add.w	r1, sp, #7
 8000a70:	4630      	mov	r0, r6
 8000a72:	f008 fcbf 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000a76:	462a      	mov	r2, r5
 8000a78:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000a7a:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000a7c:	4620      	mov	r0, r4
 8000a7e:	f003 fced 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x8A);
 8000a82:	208a      	movs	r0, #138	@ 0x8a
 8000a84:	f7ff feb6 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000a88:	4641      	mov	r1, r8
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	462a      	mov	r2, r5
 8000a8e:	f88d 9007 	strb.w	r9, [sp, #7]
 8000a92:	f003 fce3 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000a96:	464a      	mov	r2, r9
 8000a98:	4629      	mov	r1, r5
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	f003 fcde 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa4:	462a      	mov	r2, r5
 8000aa6:	f10d 0107 	add.w	r1, sp, #7
 8000aaa:	4630      	mov	r0, r6
 8000aac:	f008 fca2 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000ab0:	462a      	mov	r2, r5
 8000ab2:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000ab4:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000ab6:	4620      	mov	r0, r4
 8000ab8:	f003 fcd0 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x8B);
 8000abc:	208b      	movs	r0, #139	@ 0x8b
 8000abe:	f7ff fe99 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000ac2:	2380      	movs	r3, #128	@ 0x80
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000ac4:	4641      	mov	r1, r8
 8000ac6:	4620      	mov	r0, r4
 8000ac8:	462a      	mov	r2, r5
 8000aca:	f88d 3007 	strb.w	r3, [sp, #7]
 8000ace:	f003 fcc5 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000ad2:	464a      	mov	r2, r9
 8000ad4:	4629      	mov	r1, r5
 8000ad6:	4620      	mov	r0, r4
 8000ad8:	f003 fcc0 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae0:	462a      	mov	r2, r5
 8000ae2:	f10d 0107 	add.w	r1, sp, #7
 8000ae6:	4630      	mov	r0, r6
 8000ae8:	f008 fc84 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000aec:	462a      	mov	r2, r5
 8000aee:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000af0:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000af2:	4620      	mov	r0, r4
 8000af4:	f003 fcb2 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x8C);
 8000af8:	208c      	movs	r0, #140	@ 0x8c
 8000afa:	f7ff fe7b 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000afe:	462a      	mov	r2, r5
 8000b00:	4641      	mov	r1, r8
 8000b02:	4620      	mov	r0, r4
 8000b04:	f88d 5007 	strb.w	r5, [sp, #7]
 8000b08:	f003 fca8 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	4629      	mov	r1, r5
 8000b10:	4620      	mov	r0, r4
 8000b12:	f003 fca3 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	462a      	mov	r2, r5
 8000b1c:	f10d 0107 	add.w	r1, sp, #7
 8000b20:	4630      	mov	r0, r6
 8000b22:	f008 fc67 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000b26:	462a      	mov	r2, r5
 8000b28:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000b2a:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	f003 fc95 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x8D);
 8000b32:	208d      	movs	r0, #141	@ 0x8d
 8000b34:	f7ff fe5e 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000b38:	462a      	mov	r2, r5
 8000b3a:	4641      	mov	r1, r8
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	f88d 5007 	strb.w	r5, [sp, #7]
 8000b42:	f003 fc8b 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000b46:	464a      	mov	r2, r9
 8000b48:	4629      	mov	r1, r5
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	f003 fc86 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	462a      	mov	r2, r5
 8000b56:	f10d 0107 	add.w	r1, sp, #7
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	f008 fc4a 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000b60:	462a      	mov	r2, r5
 8000b62:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000b64:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000b66:	4620      	mov	r0, r4
 8000b68:	f003 fc78 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x8E);
 8000b6c:	208e      	movs	r0, #142	@ 0x8e
 8000b6e:	f7ff fe41 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000b72:	462a      	mov	r2, r5
 8000b74:	4641      	mov	r1, r8
 8000b76:	4620      	mov	r0, r4
 8000b78:	f88d b007 	strb.w	fp, [sp, #7]
 8000b7c:	f003 fc6e 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000b80:	464a      	mov	r2, r9
 8000b82:	4629      	mov	r1, r5
 8000b84:	4620      	mov	r0, r4
 8000b86:	f003 fc69 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	462a      	mov	r2, r5
 8000b90:	f10d 0107 	add.w	r1, sp, #7
 8000b94:	4630      	mov	r0, r6
 8000b96:	f008 fc2d 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000b9a:	462a      	mov	r2, r5
 8000b9c:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000b9e:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	f003 fc5b 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x8F);
 8000ba6:	208f      	movs	r0, #143	@ 0x8f
 8000ba8:	f7ff fe24 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000bac:	462a      	mov	r2, r5
 8000bae:	4641      	mov	r1, r8
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f88d b007 	strb.w	fp, [sp, #7]
 8000bb6:	f003 fc51 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000bba:	464a      	mov	r2, r9
 8000bbc:	4629      	mov	r1, r5
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	f003 fc4c 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc8:	462a      	mov	r2, r5
 8000bca:	f10d 0107 	add.w	r1, sp, #7
 8000bce:	4630      	mov	r0, r6
 8000bd0:	f008 fc10 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000bd4:	462a      	mov	r2, r5
 8000bd6:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000bd8:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000bda:	4620      	mov	r0, r4
 8000bdc:	f003 fc3e 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xB6);
 8000be0:	20b6      	movs	r0, #182	@ 0xb6
 8000be2:	f7ff fe07 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000be6:	462a      	mov	r2, r5
 8000be8:	4641      	mov	r1, r8
 8000bea:	4620      	mov	r0, r4
 8000bec:	f88d 9007 	strb.w	r9, [sp, #7]
 8000bf0:	f003 fc34 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000bf4:	464a      	mov	r2, r9
 8000bf6:	4629      	mov	r1, r5
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f003 fc2f 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	462a      	mov	r2, r5
 8000c04:	f10d 0107 	add.w	r1, sp, #7
 8000c08:	4630      	mov	r0, r6
 8000c0a:	f008 fbf3 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000c0e:	462a      	mov	r2, r5
 8000c10:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000c12:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000c14:	4620      	mov	r0, r4
 8000c16:	f003 fc21 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000c1a:	462a      	mov	r2, r5
 8000c1c:	4641      	mov	r1, r8
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f88d 9007 	strb.w	r9, [sp, #7]
 8000c24:	f003 fc1a 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000c28:	464a      	mov	r2, r9
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	f003 fc15 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	462a      	mov	r2, r5
 8000c38:	f10d 0107 	add.w	r1, sp, #7
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	e005      	b.n	8000c4c <GC9A01_init+0x404>
 8000c40:	58020400 	.word	0x58020400
 8000c44:	240001a0 	.word	0x240001a0
 8000c48:	2400008c 	.word	0x2400008c
 8000c4c:	f008 fbd2 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000c50:	462a      	mov	r2, r5
 8000c52:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000c54:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000c56:	4620      	mov	r0, r4
 8000c58:	f003 fc00 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x36);
 8000c5c:	2036      	movs	r0, #54	@ 0x36
 8000c5e:	f7ff fdc9 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000c62:	2318      	movs	r3, #24
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000c64:	462a      	mov	r2, r5
 8000c66:	4641      	mov	r1, r8
 8000c68:	4620      	mov	r0, r4
 8000c6a:	f88d 3007 	strb.w	r3, [sp, #7]
 8000c6e:	f003 fbf5 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000c72:	464a      	mov	r2, r9
 8000c74:	4629      	mov	r1, r5
 8000c76:	4620      	mov	r0, r4
 8000c78:	f003 fbf0 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c80:	462a      	mov	r2, r5
 8000c82:	f10d 0107 	add.w	r1, sp, #7
 8000c86:	4630      	mov	r0, r6
 8000c88:	f008 fbb4 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000c8c:	462a      	mov	r2, r5
 8000c8e:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000c90:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000c92:	4620      	mov	r0, r4
 8000c94:	f003 fbe2 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(COLOR_MODE);
 8000c98:	203a      	movs	r0, #58	@ 0x3a
 8000c9a:	f7ff fdab 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000c9e:	2305      	movs	r3, #5
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000ca0:	462a      	mov	r2, r5
 8000ca2:	4641      	mov	r1, r8
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f88d 3007 	strb.w	r3, [sp, #7]
 8000caa:	f003 fbd7 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000cae:	464a      	mov	r2, r9
 8000cb0:	4629      	mov	r1, r5
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f003 fbd2 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbc:	462a      	mov	r2, r5
 8000cbe:	f10d 0107 	add.w	r1, sp, #7
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	f008 fb96 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000cc8:	462a      	mov	r2, r5
 8000cca:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000ccc:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000cce:	4620      	mov	r0, r4
 8000cd0:	f003 fbc4 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x90);
 8000cd4:	2090      	movs	r0, #144	@ 0x90
 8000cd6:	f7ff fd8d 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000cda:	462a      	mov	r2, r5
 8000cdc:	4641      	mov	r1, r8
 8000cde:	4620      	mov	r0, r4
 8000ce0:	f88d a007 	strb.w	sl, [sp, #7]
 8000ce4:	f003 fbba 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000ce8:	464a      	mov	r2, r9
 8000cea:	4629      	mov	r1, r5
 8000cec:	4620      	mov	r0, r4
 8000cee:	f003 fbb5 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	462a      	mov	r2, r5
 8000cf8:	f10d 0107 	add.w	r1, sp, #7
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	f008 fb79 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d02:	462a      	mov	r2, r5
 8000d04:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000d06:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f003 fba7 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000d0e:	462a      	mov	r2, r5
 8000d10:	4641      	mov	r1, r8
 8000d12:	4620      	mov	r0, r4
 8000d14:	f88d a007 	strb.w	sl, [sp, #7]
 8000d18:	f003 fba0 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000d1c:	464a      	mov	r2, r9
 8000d1e:	4629      	mov	r1, r5
 8000d20:	4620      	mov	r0, r4
 8000d22:	f003 fb9b 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	462a      	mov	r2, r5
 8000d2c:	f10d 0107 	add.w	r1, sp, #7
 8000d30:	4630      	mov	r0, r6
 8000d32:	f008 fb5f 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d36:	462a      	mov	r2, r5
 8000d38:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000d3a:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	f003 fb8d 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000d42:	462a      	mov	r2, r5
 8000d44:	4641      	mov	r1, r8
 8000d46:	4620      	mov	r0, r4
 8000d48:	f88d a007 	strb.w	sl, [sp, #7]
 8000d4c:	f003 fb86 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000d50:	464a      	mov	r2, r9
 8000d52:	4629      	mov	r1, r5
 8000d54:	4620      	mov	r0, r4
 8000d56:	f003 fb81 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	462a      	mov	r2, r5
 8000d60:	f10d 0107 	add.w	r1, sp, #7
 8000d64:	4630      	mov	r0, r6
 8000d66:	f008 fb45 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d6a:	462a      	mov	r2, r5
 8000d6c:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000d6e:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d70:	4620      	mov	r0, r4
 8000d72:	f003 fb73 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000d76:	462a      	mov	r2, r5
 8000d78:	4641      	mov	r1, r8
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f88d a007 	strb.w	sl, [sp, #7]
 8000d80:	f003 fb6c 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000d84:	464a      	mov	r2, r9
 8000d86:	4629      	mov	r1, r5
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f003 fb67 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	462a      	mov	r2, r5
 8000d94:	f10d 0107 	add.w	r1, sp, #7
 8000d98:	4630      	mov	r0, r6
 8000d9a:	f008 fb2b 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d9e:	462a      	mov	r2, r5
 8000da0:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000da2:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000da4:	4620      	mov	r0, r4
 8000da6:	f003 fb59 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xBD);
 8000daa:	20bd      	movs	r0, #189	@ 0xbd
 8000dac:	f7ff fd22 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 8000db0:	2306      	movs	r3, #6
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000db2:	462a      	mov	r2, r5
 8000db4:	4641      	mov	r1, r8
 8000db6:	4620      	mov	r0, r4
 8000db8:	f88d 3007 	strb.w	r3, [sp, #7]
 8000dbc:	f003 fb4e 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000dc0:	464a      	mov	r2, r9
 8000dc2:	4629      	mov	r1, r5
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f003 fb49 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	462a      	mov	r2, r5
 8000dd0:	f10d 0107 	add.w	r1, sp, #7
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	f008 fb0d 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000dda:	462a      	mov	r2, r5
 8000ddc:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000dde:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000de0:	4620      	mov	r0, r4
 8000de2:	f003 fb3b 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xBC);
 8000de6:	20bc      	movs	r0, #188	@ 0xbc
 8000de8:	f7ff fd04 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000dec:	462a      	mov	r2, r5
 8000dee:	4641      	mov	r1, r8
 8000df0:	4620      	mov	r0, r4
 8000df2:	f88d 9007 	strb.w	r9, [sp, #7]
 8000df6:	f003 fb31 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000dfa:	464a      	mov	r2, r9
 8000dfc:	4629      	mov	r1, r5
 8000dfe:	4620      	mov	r0, r4
 8000e00:	f003 fb2c 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295
 8000e08:	462a      	mov	r2, r5
 8000e0a:	f10d 0107 	add.w	r1, sp, #7
 8000e0e:	4630      	mov	r0, r6
 8000e10:	f008 faf0 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000e14:	462a      	mov	r2, r5
 8000e16:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000e18:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f003 fb1e 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xFF);
 8000e20:	4658      	mov	r0, fp
 8000e22:	f7ff fce7 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000e26:	2360      	movs	r3, #96	@ 0x60
    GC9A01_write_data(&val, sizeof(val));
 8000e28:	f10d 0007 	add.w	r0, sp, #7
 8000e2c:	f04f 0b13 	mov.w	fp, #19
 8000e30:	f88d 3007 	strb.w	r3, [sp, #7]
 8000e34:	f7ff fca2 	bl	800077c <GC9A01_write_data.constprop.0>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000e38:	462a      	mov	r2, r5
 8000e3a:	4641      	mov	r1, r8
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f88d 5007 	strb.w	r5, [sp, #7]
 8000e42:	f003 fb0b 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000e46:	464a      	mov	r2, r9
 8000e48:	4629      	mov	r1, r5
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f003 fb06 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	462a      	mov	r2, r5
 8000e56:	f10d 0107 	add.w	r1, sp, #7
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	f008 faca 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000e60:	462a      	mov	r2, r5
 8000e62:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000e64:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000e66:	4620      	mov	r0, r4
 8000e68:	f003 faf8 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x04);
 8000e6c:	2304      	movs	r3, #4
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000e6e:	462a      	mov	r2, r5
 8000e70:	4641      	mov	r1, r8
 8000e72:	4620      	mov	r0, r4
 8000e74:	f88d 3007 	strb.w	r3, [sp, #7]
 8000e78:	f003 faf0 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000e7c:	464a      	mov	r2, r9
 8000e7e:	4629      	mov	r1, r5
 8000e80:	4620      	mov	r0, r4
 8000e82:	f003 faeb 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8a:	462a      	mov	r2, r5
 8000e8c:	f10d 0107 	add.w	r1, sp, #7
 8000e90:	4630      	mov	r0, r6
 8000e92:	f008 faaf 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000e96:	462a      	mov	r2, r5
 8000e98:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000e9a:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	f003 fadd 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xC3);
 8000ea2:	20c3      	movs	r0, #195	@ 0xc3
 8000ea4:	f7ff fca6 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000ea8:	462a      	mov	r2, r5
 8000eaa:	4641      	mov	r1, r8
 8000eac:	4620      	mov	r0, r4
 8000eae:	f88d b007 	strb.w	fp, [sp, #7]
 8000eb2:	f003 fad3 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000eb6:	464a      	mov	r2, r9
 8000eb8:	4629      	mov	r1, r5
 8000eba:	4620      	mov	r0, r4
 8000ebc:	f003 face 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	462a      	mov	r2, r5
 8000ec6:	f10d 0107 	add.w	r1, sp, #7
 8000eca:	4630      	mov	r0, r6
 8000ecc:	f008 fa92 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000ed0:	462a      	mov	r2, r5
 8000ed2:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000ed4:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	f003 fac0 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xC4);
 8000edc:	20c4      	movs	r0, #196	@ 0xc4
 8000ede:	f7ff fc89 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000ee2:	462a      	mov	r2, r5
 8000ee4:	4641      	mov	r1, r8
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	f88d b007 	strb.w	fp, [sp, #7]
 8000eec:	f003 fab6 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000ef0:	464a      	mov	r2, r9
 8000ef2:	4629      	mov	r1, r5
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f04f 0b26 	mov.w	fp, #38	@ 0x26
 8000efa:	f003 faaf 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	462a      	mov	r2, r5
 8000f04:	f10d 0107 	add.w	r1, sp, #7
 8000f08:	4630      	mov	r0, r6
 8000f0a:	f008 fa73 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000f0e:	462a      	mov	r2, r5
 8000f10:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000f12:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000f14:	4620      	mov	r0, r4
 8000f16:	f003 faa1 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xC9);
 8000f1a:	20c9      	movs	r0, #201	@ 0xc9
 8000f1c:	f7ff fc6a 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 8000f20:	2322      	movs	r3, #34	@ 0x22
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000f22:	462a      	mov	r2, r5
 8000f24:	4641      	mov	r1, r8
 8000f26:	4620      	mov	r0, r4
 8000f28:	f88d 3007 	strb.w	r3, [sp, #7]
 8000f2c:	f003 fa96 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000f30:	464a      	mov	r2, r9
 8000f32:	4629      	mov	r1, r5
 8000f34:	4620      	mov	r0, r4
 8000f36:	f003 fa91 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	462a      	mov	r2, r5
 8000f40:	f10d 0107 	add.w	r1, sp, #7
 8000f44:	4630      	mov	r0, r6
 8000f46:	f008 fa55 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000f4a:	462a      	mov	r2, r5
 8000f4c:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000f4e:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000f50:	4620      	mov	r0, r4
 8000f52:	f003 fa83 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xBE);
 8000f56:	20be      	movs	r0, #190	@ 0xbe
 8000f58:	f7ff fc4c 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 8000f5c:	2311      	movs	r3, #17
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000f5e:	462a      	mov	r2, r5
 8000f60:	4641      	mov	r1, r8
 8000f62:	4620      	mov	r0, r4
 8000f64:	f88d 3007 	strb.w	r3, [sp, #7]
 8000f68:	f003 fa78 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000f6c:	464a      	mov	r2, r9
 8000f6e:	4629      	mov	r1, r5
 8000f70:	4620      	mov	r0, r4
 8000f72:	f003 fa73 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	462a      	mov	r2, r5
 8000f7c:	f10d 0107 	add.w	r1, sp, #7
 8000f80:	4630      	mov	r0, r6
 8000f82:	f008 fa37 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000f86:	462a      	mov	r2, r5
 8000f88:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000f8a:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f003 fa65 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xE1);
 8000f92:	20e1      	movs	r0, #225	@ 0xe1
 8000f94:	f7ff fc2e 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000f98:	2310      	movs	r3, #16
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000f9a:	462a      	mov	r2, r5
 8000f9c:	4641      	mov	r1, r8
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	f88d 3007 	strb.w	r3, [sp, #7]
 8000fa4:	f003 fa5a 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000fa8:	464a      	mov	r2, r9
 8000faa:	4629      	mov	r1, r5
 8000fac:	4620      	mov	r0, r4
 8000fae:	f003 fa55 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	462a      	mov	r2, r5
 8000fb8:	f10d 0107 	add.w	r1, sp, #7
 8000fbc:	4630      	mov	r0, r6
 8000fbe:	f008 fa19 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000fc2:	462a      	mov	r2, r5
 8000fc4:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000fc6:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000fc8:	4620      	mov	r0, r4
 8000fca:	f003 fa47 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x0E);
 8000fce:	230e      	movs	r3, #14
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000fd0:	462a      	mov	r2, r5
 8000fd2:	4641      	mov	r1, r8
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	f88d 3007 	strb.w	r3, [sp, #7]
 8000fda:	f003 fa3f 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000fde:	464a      	mov	r2, r9
 8000fe0:	4629      	mov	r1, r5
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	f003 fa3a 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fec:	462a      	mov	r2, r5
 8000fee:	f10d 0107 	add.w	r1, sp, #7
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	f008 f9fe 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000ff8:	462a      	mov	r2, r5
 8000ffa:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000ffc:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000ffe:	4620      	mov	r0, r4
 8001000:	f003 fa2c 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xDF);
 8001004:	20df      	movs	r0, #223	@ 0xdf
 8001006:	f7ff fbf5 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 800100a:	f04f 0321 	mov.w	r3, #33	@ 0x21
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800100e:	462a      	mov	r2, r5
 8001010:	4641      	mov	r1, r8
 8001012:	4620      	mov	r0, r4
 8001014:	f88d 3007 	strb.w	r3, [sp, #7]
 8001018:	f003 fa20 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800101c:	464a      	mov	r2, r9
 800101e:	4629      	mov	r1, r5
 8001020:	4620      	mov	r0, r4
 8001022:	f003 fa1b 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	462a      	mov	r2, r5
 800102c:	f10d 0107 	add.w	r1, sp, #7
 8001030:	4630      	mov	r0, r6
 8001032:	f008 f9df 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001036:	462a      	mov	r2, r5
 8001038:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800103a:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800103c:	4620      	mov	r0, r4
 800103e:	f003 fa0d 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x0c);
 8001042:	230c      	movs	r3, #12
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001044:	462a      	mov	r2, r5
 8001046:	4641      	mov	r1, r8
 8001048:	4620      	mov	r0, r4
 800104a:	f88d 3007 	strb.w	r3, [sp, #7]
 800104e:	f003 fa05 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001052:	464a      	mov	r2, r9
 8001054:	4629      	mov	r1, r5
 8001056:	4620      	mov	r0, r4
 8001058:	f003 fa00 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	462a      	mov	r2, r5
 8001062:	f10d 0107 	add.w	r1, sp, #7
 8001066:	4630      	mov	r0, r6
 8001068:	f008 f9c4 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800106c:	462a      	mov	r2, r5
 800106e:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001070:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001072:	4620      	mov	r0, r4
 8001074:	f003 f9f2 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001078:	462a      	mov	r2, r5
 800107a:	4641      	mov	r1, r8
 800107c:	4620      	mov	r0, r4
 800107e:	f88d 8007 	strb.w	r8, [sp, #7]
 8001082:	f003 f9eb 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001086:	464a      	mov	r2, r9
 8001088:	4629      	mov	r1, r5
 800108a:	4620      	mov	r0, r4
 800108c:	f003 f9e6 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	462a      	mov	r2, r5
 8001096:	f10d 0107 	add.w	r1, sp, #7
 800109a:	4630      	mov	r0, r6
 800109c:	f008 f9aa 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80010a0:	462a      	mov	r2, r5
 80010a2:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80010a4:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80010a6:	4620      	mov	r0, r4
 80010a8:	f003 f9d8 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xF0);
 80010ac:	20f0      	movs	r0, #240	@ 0xf0
 80010ae:	f7ff fba1 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 80010b2:	f04f 0345 	mov.w	r3, #69	@ 0x45
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80010b6:	462a      	mov	r2, r5
 80010b8:	4641      	mov	r1, r8
 80010ba:	4620      	mov	r0, r4
 80010bc:	f88d 3007 	strb.w	r3, [sp, #7]
 80010c0:	f003 f9cc 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80010c4:	464a      	mov	r2, r9
 80010c6:	4629      	mov	r1, r5
 80010c8:	4620      	mov	r0, r4
 80010ca:	f003 f9c7 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	462a      	mov	r2, r5
 80010d4:	f10d 0107 	add.w	r1, sp, #7
 80010d8:	4630      	mov	r0, r6
 80010da:	f008 f98b 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80010de:	462a      	mov	r2, r5
 80010e0:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80010e2:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80010e4:	4620      	mov	r0, r4
 80010e6:	f003 f9b9 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x09);
 80010ea:	f04f 0109 	mov.w	r1, #9
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80010ee:	462a      	mov	r2, r5
 80010f0:	4620      	mov	r0, r4
 80010f2:	f88d 1007 	strb.w	r1, [sp, #7]
 80010f6:	4641      	mov	r1, r8
 80010f8:	f003 f9b0 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80010fc:	464a      	mov	r2, r9
 80010fe:	4629      	mov	r1, r5
 8001100:	4620      	mov	r0, r4
 8001102:	f003 f9ab 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001106:	f10d 0007 	add.w	r0, sp, #7
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	462a      	mov	r2, r5
 8001110:	4601      	mov	r1, r0
 8001112:	4630      	mov	r0, r6
 8001114:	f008 f96e 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001118:	462a      	mov	r2, r5
 800111a:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800111c:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800111e:	4620      	mov	r0, r4
 8001120:	f003 f99c 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001124:	462a      	mov	r2, r5
 8001126:	4641      	mov	r1, r8
 8001128:	4620      	mov	r0, r4
 800112a:	f88d a007 	strb.w	sl, [sp, #7]
 800112e:	f003 f995 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001132:	464a      	mov	r2, r9
 8001134:	4629      	mov	r1, r5
 8001136:	4620      	mov	r0, r4
 8001138:	f003 f990 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800113c:	f10d 0007 	add.w	r0, sp, #7
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
 8001144:	462a      	mov	r2, r5
 8001146:	4601      	mov	r1, r0
 8001148:	4630      	mov	r0, r6
 800114a:	f008 f953 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800114e:	462a      	mov	r2, r5
 8001150:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001152:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001154:	4620      	mov	r0, r4
 8001156:	f003 f981 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800115a:	462a      	mov	r2, r5
 800115c:	4641      	mov	r1, r8
 800115e:	4620      	mov	r0, r4
 8001160:	f88d a007 	strb.w	sl, [sp, #7]
 8001164:	f003 f97a 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001168:	464a      	mov	r2, r9
 800116a:	4629      	mov	r1, r5
 800116c:	4620      	mov	r0, r4
 800116e:	f003 f975 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001172:	f10d 0007 	add.w	r0, sp, #7
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	462a      	mov	r2, r5
 800117c:	4601      	mov	r1, r0
 800117e:	4630      	mov	r0, r6
 8001180:	f008 f938 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001184:	462a      	mov	r2, r5
 8001186:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001188:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800118a:	4620      	mov	r0, r4
 800118c:	f003 f966 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001190:	462a      	mov	r2, r5
 8001192:	4641      	mov	r1, r8
 8001194:	4620      	mov	r0, r4
 8001196:	f88d b007 	strb.w	fp, [sp, #7]
 800119a:	f003 f95f 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800119e:	464a      	mov	r2, r9
 80011a0:	4629      	mov	r1, r5
 80011a2:	4620      	mov	r0, r4
 80011a4:	f003 f95a 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80011a8:	f10d 0007 	add.w	r0, sp, #7
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	462a      	mov	r2, r5
 80011b2:	4601      	mov	r1, r0
 80011b4:	4630      	mov	r0, r6
 80011b6:	f008 f91d 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80011ba:	462a      	mov	r2, r5
 80011bc:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80011be:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80011c0:	4620      	mov	r0, r4
 80011c2:	f003 f94b 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x2A);
 80011c6:	f04f 002a 	mov.w	r0, #42	@ 0x2a
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80011ca:	462a      	mov	r2, r5
 80011cc:	4641      	mov	r1, r8
 80011ce:	f88d 0007 	strb.w	r0, [sp, #7]
 80011d2:	4620      	mov	r0, r4
 80011d4:	f003 f942 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80011d8:	464a      	mov	r2, r9
 80011da:	4629      	mov	r1, r5
 80011dc:	4620      	mov	r0, r4
 80011de:	f003 f93d 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80011e2:	f10d 0c07 	add.w	ip, sp, #7
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	462a      	mov	r2, r5
 80011ec:	4661      	mov	r1, ip
 80011ee:	4630      	mov	r0, r6
 80011f0:	f008 f900 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80011f4:	462a      	mov	r2, r5
 80011f6:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80011f8:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80011fa:	4620      	mov	r0, r4
 80011fc:	f003 f92e 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xF1);
 8001200:	20f1      	movs	r0, #241	@ 0xf1
 8001202:	f7ff faf7 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8001206:	f04f 0c43 	mov.w	ip, #67	@ 0x43
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800120a:	462a      	mov	r2, r5
 800120c:	4641      	mov	r1, r8
 800120e:	4620      	mov	r0, r4
 8001210:	f88d c007 	strb.w	ip, [sp, #7]
 8001214:	f003 f922 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001218:	464a      	mov	r2, r9
 800121a:	4629      	mov	r1, r5
 800121c:	4620      	mov	r0, r4
 800121e:	f003 f91d 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001222:	f10d 0e07 	add.w	lr, sp, #7
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	462a      	mov	r2, r5
 800122c:	4671      	mov	r1, lr
 800122e:	4630      	mov	r0, r6
 8001230:	f008 f8e0 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001234:	462a      	mov	r2, r5
 8001236:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001238:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800123a:	4620      	mov	r0, r4
 800123c:	f003 f90e 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x70);
 8001240:	f04f 0370 	mov.w	r3, #112	@ 0x70
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001244:	462a      	mov	r2, r5
 8001246:	4641      	mov	r1, r8
 8001248:	4620      	mov	r0, r4
 800124a:	f88d 3007 	strb.w	r3, [sp, #7]
 800124e:	f003 f905 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001252:	464a      	mov	r2, r9
 8001254:	4629      	mov	r1, r5
 8001256:	4620      	mov	r0, r4
 8001258:	f003 f900 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800125c:	f10d 0e07 	add.w	lr, sp, #7
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
 8001264:	462a      	mov	r2, r5
 8001266:	4671      	mov	r1, lr
 8001268:	4630      	mov	r0, r6
 800126a:	f008 f8c3 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800126e:	462a      	mov	r2, r5
 8001270:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001272:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001274:	4620      	mov	r0, r4
 8001276:	f003 f8f1 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x72);
 800127a:	f04f 0e72 	mov.w	lr, #114	@ 0x72
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800127e:	462a      	mov	r2, r5
 8001280:	4641      	mov	r1, r8
 8001282:	4620      	mov	r0, r4
 8001284:	f88d e007 	strb.w	lr, [sp, #7]
 8001288:	f003 f8e8 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800128c:	464a      	mov	r2, r9
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800128e:	f10d 0907 	add.w	r9, sp, #7
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001292:	4629      	mov	r1, r5
 8001294:	4620      	mov	r0, r4
 8001296:	f003 f8e1 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	462a      	mov	r2, r5
 80012a0:	4649      	mov	r1, r9
 80012a2:	4630      	mov	r0, r6
 80012a4:	f04f 0936 	mov.w	r9, #54	@ 0x36
 80012a8:	f008 f8a4 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80012ac:	462a      	mov	r2, r5
 80012ae:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80012b0:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80012b2:	4620      	mov	r0, r4
 80012b4:	f003 f8d2 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80012b8:	462a      	mov	r2, r5
 80012ba:	4641      	mov	r1, r8
 80012bc:	4620      	mov	r0, r4
 80012be:	f88d 9007 	strb.w	r9, [sp, #7]
 80012c2:	f003 f8cb 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80012c6:	4629      	mov	r1, r5
 80012c8:	4620      	mov	r0, r4
 80012ca:	2200      	movs	r2, #0
 80012cc:	f003 f8c6 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80012d0:	462a      	mov	r2, r5
 80012d2:	f10d 0507 	add.w	r5, sp, #7
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	4630      	mov	r0, r6
 80012dc:	4629      	mov	r1, r5
 80012de:	f04f 0537 	mov.w	r5, #55	@ 0x37
 80012e2:	f008 f887 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80012e6:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80012e8:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80012ea:	4620      	mov	r0, r4
 80012ec:	4611      	mov	r1, r2
 80012ee:	f003 f8b5 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80012f2:	4641      	mov	r1, r8
 80012f4:	4620      	mov	r0, r4
 80012f6:	f88d 5007 	strb.w	r5, [sp, #7]
 80012fa:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80012fc:	f10d 0507 	add.w	r5, sp, #7
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001300:	f003 f8ac 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001304:	4620      	mov	r0, r4
 8001306:	2200      	movs	r2, #0
 8001308:	2101      	movs	r1, #1
 800130a:	f003 f8a7 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	4629      	mov	r1, r5
 8001314:	2201      	movs	r2, #1
 8001316:	4630      	mov	r0, r6
 8001318:	f008 f86c 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800131c:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800131e:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001320:	4620      	mov	r0, r4
 8001322:	4611      	mov	r1, r2
 8001324:	f003 f89a 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x6F);
 8001328:	f04f 026f 	mov.w	r2, #111	@ 0x6f
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800132c:	4641      	mov	r1, r8
 800132e:	4620      	mov	r0, r4
 8001330:	f88d 2007 	strb.w	r2, [sp, #7]
 8001334:	2201      	movs	r2, #1
 8001336:	f003 f891 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800133a:	4620      	mov	r0, r4
 800133c:	2200      	movs	r2, #0
 800133e:	2101      	movs	r1, #1
 8001340:	f003 f88c 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	4629      	mov	r1, r5
 800134a:	2201      	movs	r2, #1
 800134c:	4630      	mov	r0, r6
 800134e:	f008 f851 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001352:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001354:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001356:	4620      	mov	r0, r4
 8001358:	4611      	mov	r1, r2
 800135a:	f003 f87f 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xF2);
 800135e:	20f2      	movs	r0, #242	@ 0xf2
 8001360:	f7ff fa48 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8001364:	f04f 0245 	mov.w	r2, #69	@ 0x45
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001368:	4641      	mov	r1, r8
 800136a:	4620      	mov	r0, r4
 800136c:	f88d 2007 	strb.w	r2, [sp, #7]
 8001370:	2201      	movs	r2, #1
 8001372:	f003 f873 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001376:	4620      	mov	r0, r4
 8001378:	2200      	movs	r2, #0
 800137a:	2101      	movs	r1, #1
 800137c:	f003 f86e 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
 8001384:	4629      	mov	r1, r5
 8001386:	2201      	movs	r2, #1
 8001388:	4630      	mov	r0, r6
 800138a:	f008 f833 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800138e:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001390:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001392:	4620      	mov	r0, r4
 8001394:	4611      	mov	r1, r2
 8001396:	f003 f861 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x09);
 800139a:	f04f 0109 	mov.w	r1, #9
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800139e:	4620      	mov	r0, r4
 80013a0:	2201      	movs	r2, #1
 80013a2:	f88d 1007 	strb.w	r1, [sp, #7]
 80013a6:	4641      	mov	r1, r8
 80013a8:	f003 f858 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80013ac:	4620      	mov	r0, r4
 80013ae:	2200      	movs	r2, #0
 80013b0:	2101      	movs	r1, #1
 80013b2:	f003 f853 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	4629      	mov	r1, r5
 80013bc:	2201      	movs	r2, #1
 80013be:	4630      	mov	r0, r6
 80013c0:	463d      	mov	r5, r7
 80013c2:	f008 f817 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80013c6:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80013c8:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80013ca:	4620      	mov	r0, r4
 80013cc:	4611      	mov	r1, r2
 80013ce:	f003 f845 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80013d2:	4641      	mov	r1, r8
 80013d4:	4620      	mov	r0, r4
 80013d6:	2201      	movs	r2, #1
 80013d8:	f88d a007 	strb.w	sl, [sp, #7]
 80013dc:	f003 f83e 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80013e0:	4620      	mov	r0, r4
 80013e2:	2200      	movs	r2, #0
 80013e4:	2101      	movs	r1, #1
 80013e6:	f003 f839 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	f10d 0107 	add.w	r1, sp, #7
 80013f2:	2201      	movs	r2, #1
 80013f4:	4630      	mov	r0, r6
 80013f6:	f007 fffd 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80013fa:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80013fc:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80013fe:	4620      	mov	r0, r4
 8001400:	4611      	mov	r1, r2
 8001402:	f003 f82b 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001406:	4641      	mov	r1, r8
 8001408:	4620      	mov	r0, r4
 800140a:	f88d a007 	strb.w	sl, [sp, #7]
 800140e:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001410:	f10d 0a07 	add.w	sl, sp, #7
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001414:	f003 f822 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001418:	4620      	mov	r0, r4
 800141a:	2200      	movs	r2, #0
 800141c:	2101      	movs	r1, #1
 800141e:	f003 f81d 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	4651      	mov	r1, sl
 8001428:	2201      	movs	r2, #1
 800142a:	4630      	mov	r0, r6
 800142c:	f007 ffe2 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001430:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001432:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001434:	4620      	mov	r0, r4
 8001436:	4611      	mov	r1, r2
 8001438:	f003 f810 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800143c:	4641      	mov	r1, r8
 800143e:	4620      	mov	r0, r4
 8001440:	2201      	movs	r2, #1
 8001442:	f88d b007 	strb.w	fp, [sp, #7]
 8001446:	f003 f809 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800144a:	4620      	mov	r0, r4
 800144c:	2200      	movs	r2, #0
 800144e:	2101      	movs	r1, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001450:	46bb      	mov	fp, r7
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001452:	f003 f803 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	4651      	mov	r1, sl
 800145c:	2201      	movs	r2, #1
 800145e:	4630      	mov	r0, r6
 8001460:	f007 ffc8 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001464:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001466:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001468:	4620      	mov	r0, r4
 800146a:	4611      	mov	r1, r2
 800146c:	f002 fff6 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x2A);
 8001470:	f04f 002a 	mov.w	r0, #42	@ 0x2a
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001474:	4641      	mov	r1, r8
 8001476:	2201      	movs	r2, #1
 8001478:	f88d 0007 	strb.w	r0, [sp, #7]
 800147c:	4620      	mov	r0, r4
 800147e:	f002 ffed 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001482:	4620      	mov	r0, r4
 8001484:	2200      	movs	r2, #0
 8001486:	2101      	movs	r1, #1
 8001488:	f002 ffe8 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	4651      	mov	r1, sl
 8001492:	2201      	movs	r2, #1
 8001494:	4630      	mov	r0, r6
 8001496:	f007 ffad 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800149a:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800149c:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800149e:	4620      	mov	r0, r4
 80014a0:	4611      	mov	r1, r2
 80014a2:	f002 ffdb 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xF3);
 80014a6:	20f3      	movs	r0, #243	@ 0xf3
 80014a8:	f7ff f9a4 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 80014ac:	f04f 0c43 	mov.w	ip, #67	@ 0x43
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80014b0:	4641      	mov	r1, r8
 80014b2:	4620      	mov	r0, r4
 80014b4:	2201      	movs	r2, #1
 80014b6:	f88d c007 	strb.w	ip, [sp, #7]
 80014ba:	f002 ffcf 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80014be:	4620      	mov	r0, r4
 80014c0:	2200      	movs	r2, #0
 80014c2:	2101      	movs	r1, #1
 80014c4:	f002 ffca 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295
 80014cc:	4651      	mov	r1, sl
 80014ce:	2201      	movs	r2, #1
 80014d0:	4630      	mov	r0, r6
 80014d2:	f007 ff8f 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80014d6:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80014d8:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80014da:	4620      	mov	r0, r4
 80014dc:	4611      	mov	r1, r2
 80014de:	f002 ffbd 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x70);
 80014e2:	f04f 0370 	mov.w	r3, #112	@ 0x70
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80014e6:	4641      	mov	r1, r8
 80014e8:	4620      	mov	r0, r4
 80014ea:	2201      	movs	r2, #1
 80014ec:	f88d 3007 	strb.w	r3, [sp, #7]
 80014f0:	f002 ffb4 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80014f4:	4620      	mov	r0, r4
 80014f6:	2200      	movs	r2, #0
 80014f8:	2101      	movs	r1, #1
 80014fa:	f002 ffaf 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	4651      	mov	r1, sl
 8001504:	2201      	movs	r2, #1
 8001506:	4630      	mov	r0, r6
 8001508:	f007 ff74 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800150c:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800150e:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001510:	4620      	mov	r0, r4
 8001512:	4692      	mov	sl, r2
 8001514:	4611      	mov	r1, r2
 8001516:	f002 ffa1 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x72);
 800151a:	f04f 0e72 	mov.w	lr, #114	@ 0x72
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800151e:	4652      	mov	r2, sl
 8001520:	4641      	mov	r1, r8
 8001522:	4620      	mov	r0, r4
 8001524:	f88d e007 	strb.w	lr, [sp, #7]
 8001528:	f002 ff98 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800152c:	4651      	mov	r1, sl
 800152e:	4620      	mov	r0, r4
 8001530:	2200      	movs	r2, #0
 8001532:	f002 ff93 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001536:	f10d 0007 	add.w	r0, sp, #7
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
 800153e:	4652      	mov	r2, sl
 8001540:	4601      	mov	r1, r0
 8001542:	4630      	mov	r0, r6
 8001544:	f007 ff56 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001548:	4652      	mov	r2, sl
 800154a:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800154c:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800154e:	4620      	mov	r0, r4
 8001550:	f002 ff84 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001554:	4652      	mov	r2, sl
 8001556:	4641      	mov	r1, r8
 8001558:	4620      	mov	r0, r4
 800155a:	f88d 9007 	strb.w	r9, [sp, #7]
 800155e:	f002 ff7d 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001562:	4651      	mov	r1, sl
 8001564:	4620      	mov	r0, r4
 8001566:	2200      	movs	r2, #0
 8001568:	f04f 0900 	mov.w	r9, #0
 800156c:	f002 ff76 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001570:	f10d 0007 	add.w	r0, sp, #7
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	4652      	mov	r2, sl
 800157a:	4601      	mov	r1, r0
 800157c:	4630      	mov	r0, r6
 800157e:	f007 ff39 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001582:	4652      	mov	r2, sl
 8001584:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001586:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001588:	4620      	mov	r0, r4
 800158a:	f002 ff67 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x37);
 800158e:	f04f 0137 	mov.w	r1, #55	@ 0x37
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001592:	4652      	mov	r2, sl
 8001594:	4620      	mov	r0, r4
 8001596:	f88d 1007 	strb.w	r1, [sp, #7]
 800159a:	4641      	mov	r1, r8
 800159c:	f002 ff5e 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80015a0:	464a      	mov	r2, r9
 80015a2:	4651      	mov	r1, sl
 80015a4:	4620      	mov	r0, r4
 80015a6:	f002 ff59 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	4652      	mov	r2, sl
 80015b0:	f10d 0107 	add.w	r1, sp, #7
 80015b4:	4630      	mov	r0, r6
 80015b6:	f007 ff1d 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80015ba:	4652      	mov	r2, sl
 80015bc:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80015be:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80015c0:	4620      	mov	r0, r4
 80015c2:	f002 ff4b 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x6F);
 80015c6:	f04f 016f 	mov.w	r1, #111	@ 0x6f
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80015ca:	4652      	mov	r2, sl
 80015cc:	4620      	mov	r0, r4
 80015ce:	f88d 1007 	strb.w	r1, [sp, #7]
 80015d2:	4641      	mov	r1, r8
 80015d4:	f002 ff42 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80015d8:	464a      	mov	r2, r9
 80015da:	4651      	mov	r1, sl
 80015dc:	4620      	mov	r0, r4
 80015de:	f002 ff3d 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	4652      	mov	r2, sl
 80015e8:	f10d 0107 	add.w	r1, sp, #7
 80015ec:	4630      	mov	r0, r6
 80015ee:	f007 ff01 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80015f2:	4652      	mov	r2, sl
 80015f4:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80015f6:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80015f8:	4620      	mov	r0, r4
 80015fa:	f002 ff2f 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xED);
 80015fe:	20ed      	movs	r0, #237	@ 0xed
 8001600:	f7ff f8f8 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 8001604:	231b      	movs	r3, #27
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001606:	4652      	mov	r2, sl
 8001608:	4641      	mov	r1, r8
 800160a:	4620      	mov	r0, r4
 800160c:	f88d 3007 	strb.w	r3, [sp, #7]
 8001610:	f002 ff24 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001614:	464a      	mov	r2, r9
 8001616:	4651      	mov	r1, sl
 8001618:	4620      	mov	r0, r4
 800161a:	f002 ff1f 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
 8001622:	4652      	mov	r2, sl
 8001624:	f10d 0107 	add.w	r1, sp, #7
 8001628:	4630      	mov	r0, r6
 800162a:	f007 fee3 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800162e:	4652      	mov	r2, sl
 8001630:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001632:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001634:	4620      	mov	r0, r4
 8001636:	f002 ff11 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x0B);
 800163a:	230b      	movs	r3, #11
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800163c:	4652      	mov	r2, sl
 800163e:	4641      	mov	r1, r8
 8001640:	4620      	mov	r0, r4
 8001642:	f88d 3007 	strb.w	r3, [sp, #7]
 8001646:	f002 ff09 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800164a:	464a      	mov	r2, r9
 800164c:	4651      	mov	r1, sl
 800164e:	4620      	mov	r0, r4
 8001650:	f002 ff04 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001654:	f04f 33ff 	mov.w	r3, #4294967295
 8001658:	4652      	mov	r2, sl
 800165a:	f10d 0107 	add.w	r1, sp, #7
 800165e:	4630      	mov	r0, r6
 8001660:	f007 fec8 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001664:	4652      	mov	r2, sl
 8001666:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001668:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800166a:	4620      	mov	r0, r4
 800166c:	f002 fef6 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xAE);
 8001670:	20ae      	movs	r0, #174	@ 0xae
 8001672:	f7ff f8bf 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 8001676:	2377      	movs	r3, #119	@ 0x77
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001678:	4652      	mov	r2, sl
 800167a:	4641      	mov	r1, r8
 800167c:	4620      	mov	r0, r4
 800167e:	f88d 3007 	strb.w	r3, [sp, #7]
 8001682:	f002 feeb 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001686:	464a      	mov	r2, r9
 8001688:	4651      	mov	r1, sl
 800168a:	4620      	mov	r0, r4
 800168c:	f002 fee6 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
 8001694:	4652      	mov	r2, sl
 8001696:	f10d 0107 	add.w	r1, sp, #7
 800169a:	4630      	mov	r0, r6
 800169c:	f007 feaa 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80016a0:	4652      	mov	r2, sl
 80016a2:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80016a4:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80016a6:	4620      	mov	r0, r4
 80016a8:	f002 fed8 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xCD);
 80016ac:	20cd      	movs	r0, #205	@ 0xcd
 80016ae:	f7ff f8a1 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 80016b2:	f04f 0163 	mov.w	r1, #99	@ 0x63
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80016b6:	4652      	mov	r2, sl
 80016b8:	4620      	mov	r0, r4
 80016ba:	f88d 1007 	strb.w	r1, [sp, #7]
 80016be:	4641      	mov	r1, r8
 80016c0:	f002 fecc 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80016c4:	464a      	mov	r2, r9
 80016c6:	4651      	mov	r1, sl
 80016c8:	4620      	mov	r0, r4
 80016ca:	f002 fec7 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	4652      	mov	r2, sl
 80016d4:	f10d 0107 	add.w	r1, sp, #7
 80016d8:	4630      	mov	r0, r6
 80016da:	f007 fe8b 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80016de:	4652      	mov	r2, sl
 80016e0:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80016e2:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80016e4:	4620      	mov	r0, r4
 80016e6:	2798      	movs	r7, #152	@ 0x98
 80016e8:	f002 feb8 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x70);
 80016ec:	2070      	movs	r0, #112	@ 0x70
 80016ee:	f7ff f881 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 80016f2:	f04f 0207 	mov.w	r2, #7
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80016f6:	4641      	mov	r1, r8
 80016f8:	4620      	mov	r0, r4
 80016fa:	f88d 2007 	strb.w	r2, [sp, #7]
 80016fe:	4652      	mov	r2, sl
 8001700:	f002 feac 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001704:	464a      	mov	r2, r9
 8001706:	4651      	mov	r1, sl
 8001708:	4620      	mov	r0, r4
 800170a:	f002 fea7 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
 8001712:	4652      	mov	r2, sl
 8001714:	f10d 0107 	add.w	r1, sp, #7
 8001718:	4630      	mov	r0, r6
 800171a:	f007 fe6b 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800171e:	4652      	mov	r2, sl
 8001720:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001722:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001724:	4620      	mov	r0, r4
 8001726:	f002 fe99 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x07);
 800172a:	f04f 0207 	mov.w	r2, #7
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800172e:	4641      	mov	r1, r8
 8001730:	4620      	mov	r0, r4
 8001732:	f88d 2007 	strb.w	r2, [sp, #7]
 8001736:	4652      	mov	r2, sl
 8001738:	f002 fe90 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800173c:	464a      	mov	r2, r9
 800173e:	4651      	mov	r1, sl
 8001740:	4620      	mov	r0, r4
 8001742:	f002 fe8b 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	4652      	mov	r2, sl
 800174c:	f10d 0107 	add.w	r1, sp, #7
 8001750:	4630      	mov	r0, r6
 8001752:	f007 fe4f 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001756:	4652      	mov	r2, sl
 8001758:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800175a:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800175c:	4620      	mov	r0, r4
 800175e:	f002 fe7d 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x04);
 8001762:	2304      	movs	r3, #4
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001764:	4652      	mov	r2, sl
 8001766:	4641      	mov	r1, r8
 8001768:	4620      	mov	r0, r4
 800176a:	f88d 3007 	strb.w	r3, [sp, #7]
 800176e:	f002 fe75 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001772:	464a      	mov	r2, r9
 8001774:	4651      	mov	r1, sl
 8001776:	4620      	mov	r0, r4
 8001778:	f002 fe70 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
 8001780:	4652      	mov	r2, sl
 8001782:	f10d 0107 	add.w	r1, sp, #7
 8001786:	4630      	mov	r0, r6
 8001788:	f007 fe34 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800178c:	4652      	mov	r2, sl
 800178e:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001790:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001792:	4620      	mov	r0, r4
 8001794:	f002 fe62 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x0E);
 8001798:	230e      	movs	r3, #14
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800179a:	4652      	mov	r2, sl
 800179c:	4641      	mov	r1, r8
 800179e:	4620      	mov	r0, r4
 80017a0:	f88d 3007 	strb.w	r3, [sp, #7]
 80017a4:	f002 fe5a 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80017a8:	464a      	mov	r2, r9
 80017aa:	4651      	mov	r1, sl
 80017ac:	4620      	mov	r0, r4
 80017ae:	f002 fe55 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	4652      	mov	r2, sl
 80017b8:	f10d 0107 	add.w	r1, sp, #7
 80017bc:	4630      	mov	r0, r6
 80017be:	f007 fe19 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80017c2:	4652      	mov	r2, sl
 80017c4:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80017c6:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80017c8:	4620      	mov	r0, r4
 80017ca:	f002 fe47 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x0F);
 80017ce:	f04f 010f 	mov.w	r1, #15
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80017d2:	4652      	mov	r2, sl
 80017d4:	4620      	mov	r0, r4
 80017d6:	f88d 1007 	strb.w	r1, [sp, #7]
 80017da:	4641      	mov	r1, r8
 80017dc:	f002 fe3e 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80017e0:	464a      	mov	r2, r9
 80017e2:	4651      	mov	r1, sl
 80017e4:	4620      	mov	r0, r4
 80017e6:	f002 fe39 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	4652      	mov	r2, sl
 80017f0:	f10d 0107 	add.w	r1, sp, #7
 80017f4:	4630      	mov	r0, r6
 80017f6:	f007 fdfd 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80017fa:	4652      	mov	r2, sl
 80017fc:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80017fe:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001800:	4620      	mov	r0, r4
 8001802:	f002 fe2b 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x09);
 8001806:	2309      	movs	r3, #9
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001808:	4652      	mov	r2, sl
 800180a:	4641      	mov	r1, r8
 800180c:	4620      	mov	r0, r4
 800180e:	f88d 3007 	strb.w	r3, [sp, #7]
 8001812:	f002 fe23 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001816:	464a      	mov	r2, r9
 8001818:	4651      	mov	r1, sl
 800181a:	4620      	mov	r0, r4
 800181c:	f002 fe1e 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	4652      	mov	r2, sl
 8001826:	f10d 0107 	add.w	r1, sp, #7
 800182a:	4630      	mov	r0, r6
 800182c:	f007 fde2 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001830:	4652      	mov	r2, sl
 8001832:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001834:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001836:	4620      	mov	r0, r4
 8001838:	f002 fe10 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x07);
 800183c:	f04f 0207 	mov.w	r2, #7
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001840:	4641      	mov	r1, r8
 8001842:	4620      	mov	r0, r4
 8001844:	f88d 2007 	strb.w	r2, [sp, #7]
 8001848:	4652      	mov	r2, sl
 800184a:	f002 fe07 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800184e:	464a      	mov	r2, r9
 8001850:	4651      	mov	r1, sl
 8001852:	4620      	mov	r0, r4
 8001854:	f002 fe02 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001858:	f04f 33ff 	mov.w	r3, #4294967295
 800185c:	4652      	mov	r2, sl
 800185e:	f10d 0107 	add.w	r1, sp, #7
 8001862:	4630      	mov	r0, r6
 8001864:	f007 fdc6 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001868:	4652      	mov	r2, sl
 800186a:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800186c:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800186e:	4620      	mov	r0, r4
 8001870:	f002 fdf4 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x08);
 8001874:	2308      	movs	r3, #8
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001876:	4652      	mov	r2, sl
 8001878:	4641      	mov	r1, r8
 800187a:	4620      	mov	r0, r4
 800187c:	f88d 3007 	strb.w	r3, [sp, #7]
 8001880:	f002 fdec 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001884:	464a      	mov	r2, r9
 8001886:	4651      	mov	r1, sl
 8001888:	4620      	mov	r0, r4
 800188a:	f002 fde7 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	4652      	mov	r2, sl
 8001894:	f10d 0107 	add.w	r1, sp, #7
 8001898:	4630      	mov	r0, r6
 800189a:	f007 fdab 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800189e:	4652      	mov	r2, sl
 80018a0:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80018a2:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80018a4:	4620      	mov	r0, r4
 80018a6:	f002 fdd9 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x03);
 80018aa:	2303      	movs	r3, #3
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80018ac:	4652      	mov	r2, sl
 80018ae:	4641      	mov	r1, r8
 80018b0:	4620      	mov	r0, r4
 80018b2:	f88d 3007 	strb.w	r3, [sp, #7]
 80018b6:	f002 fdd1 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80018ba:	464a      	mov	r2, r9
 80018bc:	4651      	mov	r1, sl
 80018be:	4620      	mov	r0, r4
 80018c0:	f002 fdcc 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295
 80018c8:	4652      	mov	r2, sl
 80018ca:	f10d 0107 	add.w	r1, sp, #7
 80018ce:	4630      	mov	r0, r6
 80018d0:	f007 fd90 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80018d4:	4652      	mov	r2, sl
 80018d6:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80018d8:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80018da:	4620      	mov	r0, r4
 80018dc:	f002 fdbe 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xE8);
 80018e0:	20e8      	movs	r0, #232	@ 0xe8
 80018e2:	f7fe ff87 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 80018e6:	2334      	movs	r3, #52	@ 0x34
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80018e8:	4652      	mov	r2, sl
 80018ea:	4641      	mov	r1, r8
 80018ec:	4620      	mov	r0, r4
 80018ee:	f88d 3007 	strb.w	r3, [sp, #7]
 80018f2:	f002 fdb3 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80018f6:	464a      	mov	r2, r9
 80018f8:	4651      	mov	r1, sl
 80018fa:	4620      	mov	r0, r4
 80018fc:	f002 fdae 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001900:	f04f 33ff 	mov.w	r3, #4294967295
 8001904:	4652      	mov	r2, sl
 8001906:	f10d 0107 	add.w	r1, sp, #7
 800190a:	4630      	mov	r0, r6
 800190c:	f007 fd72 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001910:	4652      	mov	r2, sl
 8001912:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001914:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001916:	4620      	mov	r0, r4
 8001918:	f002 fda0 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x62);
 800191c:	2062      	movs	r0, #98	@ 0x62
 800191e:	f7fe ff69 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8001922:	f04f 0118 	mov.w	r1, #24
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001926:	4652      	mov	r2, sl
 8001928:	4620      	mov	r0, r4
 800192a:	f88d 1007 	strb.w	r1, [sp, #7]
 800192e:	4641      	mov	r1, r8
 8001930:	f002 fd94 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001934:	464a      	mov	r2, r9
 8001936:	4651      	mov	r1, sl
 8001938:	4620      	mov	r0, r4
 800193a:	f002 fd8f 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800193e:	f10d 0007 	add.w	r0, sp, #7
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	4652      	mov	r2, sl
 8001948:	4601      	mov	r1, r0
 800194a:	4630      	mov	r0, r6
 800194c:	f007 fd52 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001950:	4652      	mov	r2, sl
 8001952:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001954:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001956:	4620      	mov	r0, r4
 8001958:	f002 fd80 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x0D);
 800195c:	230d      	movs	r3, #13
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800195e:	4652      	mov	r2, sl
 8001960:	4641      	mov	r1, r8
 8001962:	4620      	mov	r0, r4
 8001964:	f88d 3007 	strb.w	r3, [sp, #7]
 8001968:	f002 fd78 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800196c:	464a      	mov	r2, r9
 800196e:	4651      	mov	r1, sl
 8001970:	4620      	mov	r0, r4
 8001972:	f002 fd73 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001976:	f10d 0007 	add.w	r0, sp, #7
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	4652      	mov	r2, sl
 8001980:	4601      	mov	r1, r0
 8001982:	4630      	mov	r0, r6
 8001984:	f007 fd36 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001988:	4652      	mov	r2, sl
 800198a:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800198c:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800198e:	4620      	mov	r0, r4
 8001990:	f002 fd64 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x71);
 8001994:	f04f 0071 	mov.w	r0, #113	@ 0x71
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001998:	4652      	mov	r2, sl
 800199a:	4641      	mov	r1, r8
 800199c:	f88d 0007 	strb.w	r0, [sp, #7]
 80019a0:	4620      	mov	r0, r4
 80019a2:	f002 fd5b 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80019a6:	464a      	mov	r2, r9
 80019a8:	4651      	mov	r1, sl
 80019aa:	4620      	mov	r0, r4
 80019ac:	f002 fd56 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80019b0:	f10d 0e07 	add.w	lr, sp, #7
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295
 80019b8:	4652      	mov	r2, sl
 80019ba:	4671      	mov	r1, lr
 80019bc:	4630      	mov	r0, r6
 80019be:	f007 fd19 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80019c2:	4652      	mov	r2, sl
 80019c4:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80019c6:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80019c8:	4620      	mov	r0, r4
 80019ca:	f002 fd47 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0xED);
 80019ce:	23ed      	movs	r3, #237	@ 0xed
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80019d0:	4652      	mov	r2, sl
 80019d2:	4641      	mov	r1, r8
 80019d4:	4620      	mov	r0, r4
 80019d6:	f88d 3007 	strb.w	r3, [sp, #7]
 80019da:	f002 fd3f 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80019de:	464a      	mov	r2, r9
 80019e0:	4651      	mov	r1, sl
 80019e2:	4620      	mov	r0, r4
 80019e4:	f002 fd3a 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80019e8:	f10d 0e07 	add.w	lr, sp, #7
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
 80019f0:	4652      	mov	r2, sl
 80019f2:	4671      	mov	r1, lr
 80019f4:	4630      	mov	r0, r6
 80019f6:	f007 fcfd 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80019fa:	4652      	mov	r2, sl
 80019fc:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80019fe:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001a00:	4620      	mov	r0, r4
 8001a02:	f002 fd2b 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x70);
 8001a06:	f04f 0370 	mov.w	r3, #112	@ 0x70
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001a0a:	4652      	mov	r2, sl
 8001a0c:	4641      	mov	r1, r8
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f88d 3007 	strb.w	r3, [sp, #7]
 8001a14:	f002 fd22 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001a18:	464a      	mov	r2, r9
 8001a1a:	4651      	mov	r1, sl
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f002 fd1d 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001a22:	f10d 0e07 	add.w	lr, sp, #7
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2a:	4652      	mov	r2, sl
 8001a2c:	4671      	mov	r1, lr
 8001a2e:	4630      	mov	r0, r6
 8001a30:	f007 fce0 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001a34:	4652      	mov	r2, sl
 8001a36:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001a38:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f002 fd0e 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x70);
 8001a40:	f04f 0370 	mov.w	r3, #112	@ 0x70
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001a44:	4652      	mov	r2, sl
 8001a46:	4641      	mov	r1, r8
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f88d 3007 	strb.w	r3, [sp, #7]
 8001a4e:	f002 fd05 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001a52:	464a      	mov	r2, r9
 8001a54:	4651      	mov	r1, sl
 8001a56:	4620      	mov	r0, r4
 8001a58:	f002 fd00 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001a5c:	f10d 0e07 	add.w	lr, sp, #7
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
 8001a64:	4652      	mov	r2, sl
 8001a66:	4671      	mov	r1, lr
 8001a68:	4630      	mov	r0, r6
 8001a6a:	f007 fcc3 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001a6e:	4652      	mov	r2, sl
 8001a70:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001a72:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001a74:	4620      	mov	r0, r4
 8001a76:	f002 fcf1 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x18);
 8001a7a:	f04f 0118 	mov.w	r1, #24
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001a7e:	4652      	mov	r2, sl
 8001a80:	4620      	mov	r0, r4
 8001a82:	f88d 1007 	strb.w	r1, [sp, #7]
 8001a86:	4641      	mov	r1, r8
 8001a88:	f002 fce8 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001a8c:	464a      	mov	r2, r9
 8001a8e:	4651      	mov	r1, sl
 8001a90:	4620      	mov	r0, r4
 8001a92:	f002 fce3 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001a96:	f10d 0e07 	add.w	lr, sp, #7
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	4652      	mov	r2, sl
 8001aa0:	4671      	mov	r1, lr
 8001aa2:	4630      	mov	r0, r6
 8001aa4:	f007 fca6 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001aa8:	4652      	mov	r2, sl
 8001aaa:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001aac:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f002 fcd4 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x0F);
 8001ab4:	f04f 0c0f 	mov.w	ip, #15
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001ab8:	4652      	mov	r2, sl
 8001aba:	4641      	mov	r1, r8
 8001abc:	4620      	mov	r0, r4
 8001abe:	f88d c007 	strb.w	ip, [sp, #7]
 8001ac2:	f002 fccb 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001ac6:	464a      	mov	r2, r9
 8001ac8:	4651      	mov	r1, sl
 8001aca:	4620      	mov	r0, r4
 8001acc:	f002 fcc6 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001ad0:	f10d 0c07 	add.w	ip, sp, #7
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad8:	4652      	mov	r2, sl
 8001ada:	4661      	mov	r1, ip
 8001adc:	4630      	mov	r0, r6
 8001ade:	f007 fc89 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001ae2:	4652      	mov	r2, sl
 8001ae4:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001ae6:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f002 fcb7 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x71);
 8001aee:	f04f 0071 	mov.w	r0, #113	@ 0x71
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001af2:	4652      	mov	r2, sl
 8001af4:	4641      	mov	r1, r8
 8001af6:	f88d 0007 	strb.w	r0, [sp, #7]
 8001afa:	4620      	mov	r0, r4
 8001afc:	f002 fcae 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001b00:	464a      	mov	r2, r9
 8001b02:	4651      	mov	r1, sl
 8001b04:	4620      	mov	r0, r4
 8001b06:	f002 fca9 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001b0a:	f10d 0c07 	add.w	ip, sp, #7
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	4652      	mov	r2, sl
 8001b14:	4661      	mov	r1, ip
 8001b16:	4630      	mov	r0, r6
 8001b18:	f007 fc6c 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001b1c:	4652      	mov	r2, sl
 8001b1e:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001b20:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001b22:	4620      	mov	r0, r4
 8001b24:	f002 fc9a 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0xEF);
 8001b28:	23ef      	movs	r3, #239	@ 0xef
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001b2a:	4652      	mov	r2, sl
 8001b2c:	4641      	mov	r1, r8
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f88d 3007 	strb.w	r3, [sp, #7]
 8001b34:	f002 fc92 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001b38:	464a      	mov	r2, r9
 8001b3a:	4651      	mov	r1, sl
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f002 fc8d 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001b42:	f10d 0c07 	add.w	ip, sp, #7
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	4652      	mov	r2, sl
 8001b4c:	4661      	mov	r1, ip
 8001b4e:	4630      	mov	r0, r6
 8001b50:	f007 fc50 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001b54:	4652      	mov	r2, sl
 8001b56:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001b58:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f002 fc7e 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x70);
 8001b60:	f04f 0370 	mov.w	r3, #112	@ 0x70
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001b64:	4652      	mov	r2, sl
 8001b66:	4641      	mov	r1, r8
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f88d 3007 	strb.w	r3, [sp, #7]
 8001b6e:	f002 fc75 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001b72:	464a      	mov	r2, r9
 8001b74:	4651      	mov	r1, sl
 8001b76:	4620      	mov	r0, r4
 8001b78:	f002 fc70 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001b7c:	f10d 0c07 	add.w	ip, sp, #7
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
 8001b84:	4652      	mov	r2, sl
 8001b86:	4661      	mov	r1, ip
 8001b88:	4630      	mov	r0, r6
 8001b8a:	f007 fc33 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001b8e:	4652      	mov	r2, sl
 8001b90:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001b92:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001b94:	4620      	mov	r0, r4
 8001b96:	f002 fc61 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x70);
 8001b9a:	f04f 0370 	mov.w	r3, #112	@ 0x70
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001b9e:	4652      	mov	r2, sl
 8001ba0:	4641      	mov	r1, r8
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	f88d 3007 	strb.w	r3, [sp, #7]
 8001ba8:	f002 fc58 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001bac:	464a      	mov	r2, r9
 8001bae:	4651      	mov	r1, sl
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f002 fc53 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001bb6:	f10d 0c07 	add.w	ip, sp, #7
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbe:	4652      	mov	r2, sl
 8001bc0:	4661      	mov	r1, ip
 8001bc2:	4630      	mov	r0, r6
 8001bc4:	f007 fc16 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001bc8:	4652      	mov	r2, sl
 8001bca:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001bcc:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f002 fc44 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x63);
 8001bd4:	2063      	movs	r0, #99	@ 0x63
 8001bd6:	f7fe fe0d 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8001bda:	f04f 0118 	mov.w	r1, #24
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001bde:	4652      	mov	r2, sl
 8001be0:	4620      	mov	r0, r4
 8001be2:	f88d 1007 	strb.w	r1, [sp, #7]
 8001be6:	4641      	mov	r1, r8
 8001be8:	f002 fc38 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001bec:	464a      	mov	r2, r9
 8001bee:	4651      	mov	r1, sl
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f002 fc33 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001bf6:	f10d 0c07 	add.w	ip, sp, #7
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	4652      	mov	r2, sl
 8001c00:	4661      	mov	r1, ip
 8001c02:	4630      	mov	r0, r6
 8001c04:	f007 fbf6 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001c08:	4652      	mov	r2, sl
 8001c0a:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001c0c:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001c0e:	4620      	mov	r0, r4
 8001c10:	f002 fc24 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x11);
 8001c14:	2311      	movs	r3, #17
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001c16:	4652      	mov	r2, sl
 8001c18:	4641      	mov	r1, r8
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f88d 3007 	strb.w	r3, [sp, #7]
 8001c20:	f002 fc1c 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001c24:	464a      	mov	r2, r9
 8001c26:	4651      	mov	r1, sl
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f002 fc17 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001c2e:	f10d 0c07 	add.w	ip, sp, #7
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
 8001c36:	4652      	mov	r2, sl
 8001c38:	4661      	mov	r1, ip
 8001c3a:	4630      	mov	r0, r6
 8001c3c:	f007 fbda 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001c40:	4652      	mov	r2, sl
 8001c42:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001c44:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001c46:	4620      	mov	r0, r4
 8001c48:	f002 fc08 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x71);
 8001c4c:	f04f 0071 	mov.w	r0, #113	@ 0x71
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001c50:	4652      	mov	r2, sl
 8001c52:	4641      	mov	r1, r8
 8001c54:	f88d 0007 	strb.w	r0, [sp, #7]
 8001c58:	4620      	mov	r0, r4
 8001c5a:	f002 fbff 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001c5e:	464a      	mov	r2, r9
 8001c60:	4651      	mov	r1, sl
 8001c62:	4620      	mov	r0, r4
 8001c64:	f002 fbfa 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001c68:	f10d 0c07 	add.w	ip, sp, #7
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c70:	4652      	mov	r2, sl
 8001c72:	4661      	mov	r1, ip
 8001c74:	4630      	mov	r0, r6
 8001c76:	f007 fbbd 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001c7a:	4652      	mov	r2, sl
 8001c7c:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001c7e:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001c80:	4620      	mov	r0, r4
 8001c82:	f002 fbeb 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_data(&val, sizeof(val));
 8001c86:	f10d 0c07 	add.w	ip, sp, #7
 8001c8a:	23f1      	movs	r3, #241	@ 0xf1
 8001c8c:	4660      	mov	r0, ip
 8001c8e:	f88d 3007 	strb.w	r3, [sp, #7]
 8001c92:	f7fe fd73 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x70);
 8001c96:	f04f 0370 	mov.w	r3, #112	@ 0x70
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001c9a:	4652      	mov	r2, sl
 8001c9c:	4641      	mov	r1, r8
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f88d 3007 	strb.w	r3, [sp, #7]
 8001ca4:	f002 fbda 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001ca8:	464a      	mov	r2, r9
 8001caa:	4651      	mov	r1, sl
 8001cac:	4620      	mov	r0, r4
 8001cae:	f002 fbd5 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001cb2:	f10d 0c07 	add.w	ip, sp, #7
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cba:	4652      	mov	r2, sl
 8001cbc:	4661      	mov	r1, ip
 8001cbe:	4630      	mov	r0, r6
 8001cc0:	f007 fb98 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001cc4:	4652      	mov	r2, sl
 8001cc6:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001cc8:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f002 fbc6 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_data(&val, sizeof(val));
 8001cd0:	f10d 0c07 	add.w	ip, sp, #7
 8001cd4:	f04f 0370 	mov.w	r3, #112	@ 0x70
 8001cd8:	4660      	mov	r0, ip
 8001cda:	f88d 3007 	strb.w	r3, [sp, #7]
 8001cde:	f7fe fd4d 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x18);
 8001ce2:	f04f 0118 	mov.w	r1, #24
 8001ce6:	f88d 1007 	strb.w	r1, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8001cea:	f10d 0107 	add.w	r1, sp, #7
 8001cee:	4608      	mov	r0, r1
 8001cf0:	f7fe fd44 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x13);
 8001cf4:	2313      	movs	r3, #19
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001cf6:	4652      	mov	r2, sl
 8001cf8:	4641      	mov	r1, r8
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f88d 3007 	strb.w	r3, [sp, #7]
 8001d00:	f002 fbac 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001d04:	464a      	mov	r2, r9
 8001d06:	4651      	mov	r1, sl
 8001d08:	4620      	mov	r0, r4
 8001d0a:	f002 fba7 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	4652      	mov	r2, sl
 8001d14:	f10d 0107 	add.w	r1, sp, #7
 8001d18:	4630      	mov	r0, r6
 8001d1a:	f007 fb6b 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001d1e:	4652      	mov	r2, sl
 8001d20:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001d22:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001d24:	4620      	mov	r0, r4
 8001d26:	f002 fb99 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x71);
 8001d2a:	f04f 0071 	mov.w	r0, #113	@ 0x71
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001d2e:	4652      	mov	r2, sl
 8001d30:	4641      	mov	r1, r8
 8001d32:	f88d 0007 	strb.w	r0, [sp, #7]
 8001d36:	4620      	mov	r0, r4
 8001d38:	f002 fb90 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001d3c:	464a      	mov	r2, r9
 8001d3e:	4651      	mov	r1, sl
 8001d40:	4620      	mov	r0, r4
 8001d42:	f002 fb8b 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	4652      	mov	r2, sl
 8001d4c:	f10d 0107 	add.w	r1, sp, #7
 8001d50:	4630      	mov	r0, r6
 8001d52:	f007 fb4f 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001d56:	4652      	mov	r2, sl
 8001d58:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001d5a:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f002 fb7d 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0xF3);
 8001d62:	23f3      	movs	r3, #243	@ 0xf3
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001d64:	4641      	mov	r1, r8
 8001d66:	4652      	mov	r2, sl
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f88d 3007 	strb.w	r3, [sp, #7]
 8001d6e:	f002 fb75 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001d72:	464a      	mov	r2, r9
 8001d74:	4651      	mov	r1, sl
 8001d76:	4620      	mov	r0, r4
 8001d78:	f002 fb70 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d80:	4652      	mov	r2, sl
 8001d82:	f10d 0107 	add.w	r1, sp, #7
 8001d86:	4630      	mov	r0, r6
 8001d88:	f04f 0870 	mov.w	r8, #112	@ 0x70
 8001d8c:	f007 fb32 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001d90:	4652      	mov	r2, sl
 8001d92:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001d94:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001d96:	4620      	mov	r0, r4
 8001d98:	f002 fb60 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001d9c:	4652      	mov	r2, sl
 8001d9e:	4620      	mov	r0, r4
 8001da0:	2102      	movs	r1, #2
 8001da2:	f88d 8007 	strb.w	r8, [sp, #7]
 8001da6:	f002 fb59 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001daa:	464a      	mov	r2, r9
 8001dac:	4651      	mov	r1, sl
 8001dae:	4620      	mov	r0, r4
 8001db0:	f002 fb54 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
 8001db8:	4652      	mov	r2, sl
 8001dba:	f10d 0107 	add.w	r1, sp, #7
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	f007 fb18 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001dc4:	4652      	mov	r2, sl
 8001dc6:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001dc8:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001dca:	4620      	mov	r0, r4
 8001dcc:	f002 fb46 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001dd0:	4652      	mov	r2, sl
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	f88d 8007 	strb.w	r8, [sp, #7]
 8001dda:	f002 fb3f 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001dde:	464a      	mov	r2, r9
 8001de0:	4651      	mov	r1, sl
 8001de2:	4620      	mov	r0, r4
 8001de4:	f04f 0845 	mov.w	r8, #69	@ 0x45
 8001de8:	f002 fb38 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
 8001df0:	4652      	mov	r2, sl
 8001df2:	f10d 0107 	add.w	r1, sp, #7
 8001df6:	4630      	mov	r0, r6
 8001df8:	f007 fafc 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001dfc:	4652      	mov	r2, sl
 8001dfe:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001e00:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001e02:	4620      	mov	r0, r4
 8001e04:	f002 fb2a 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x64);
 8001e08:	2064      	movs	r0, #100	@ 0x64
 8001e0a:	f7fe fcf3 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 8001e0e:	2328      	movs	r3, #40	@ 0x28
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001e10:	4652      	mov	r2, sl
 8001e12:	4620      	mov	r0, r4
 8001e14:	2102      	movs	r1, #2
 8001e16:	f88d 3007 	strb.w	r3, [sp, #7]
 8001e1a:	f002 fb1f 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001e1e:	464a      	mov	r2, r9
 8001e20:	4651      	mov	r1, sl
 8001e22:	4620      	mov	r0, r4
 8001e24:	f002 fb1a 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2c:	4652      	mov	r2, sl
 8001e2e:	f10d 0107 	add.w	r1, sp, #7
 8001e32:	4630      	mov	r0, r6
 8001e34:	f007 fade 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001e38:	4652      	mov	r2, sl
 8001e3a:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001e3c:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001e3e:	4620      	mov	r0, r4
 8001e40:	f002 fb0c 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x29);
 8001e44:	f04f 0329 	mov.w	r3, #41	@ 0x29
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001e48:	4652      	mov	r2, sl
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	f88d 3007 	strb.w	r3, [sp, #7]
 8001e52:	f002 fb03 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001e56:	464a      	mov	r2, r9
 8001e58:	4651      	mov	r1, sl
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f002 fafe 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
 8001e64:	4652      	mov	r2, sl
 8001e66:	f10d 0107 	add.w	r1, sp, #7
 8001e6a:	4630      	mov	r0, r6
 8001e6c:	f007 fac2 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001e70:	4652      	mov	r2, sl
 8001e72:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001e74:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001e76:	4620      	mov	r0, r4
 8001e78:	f002 faf0 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0xF1);
 8001e7c:	f06f 030e 	mvn.w	r3, #14
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001e80:	4652      	mov	r2, sl
 8001e82:	4620      	mov	r0, r4
 8001e84:	2102      	movs	r1, #2
 8001e86:	461d      	mov	r5, r3
 8001e88:	f88d 3007 	strb.w	r3, [sp, #7]
 8001e8c:	f002 fae6 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001e90:	464a      	mov	r2, r9
 8001e92:	4651      	mov	r1, sl
 8001e94:	4620      	mov	r0, r4
 8001e96:	f002 fae1 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9e:	4652      	mov	r2, sl
 8001ea0:	f10d 0107 	add.w	r1, sp, #7
 8001ea4:	4630      	mov	r0, r6
 8001ea6:	f007 faa5 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001eaa:	4652      	mov	r2, sl
 8001eac:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001eae:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f002 fad2 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001eb8:	4652      	mov	r2, sl
 8001eba:	4620      	mov	r0, r4
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	f88d a007 	strb.w	sl, [sp, #7]
 8001ec2:	f002 facb 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001ec6:	464a      	mov	r2, r9
 8001ec8:	4651      	mov	r1, sl
 8001eca:	4620      	mov	r0, r4
 8001ecc:	f002 fac6 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed4:	4652      	mov	r2, sl
 8001ed6:	f10d 0107 	add.w	r1, sp, #7
 8001eda:	4630      	mov	r0, r6
 8001edc:	f007 fa8a 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001ee0:	4652      	mov	r2, sl
 8001ee2:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001ee4:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f002 fab7 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001eee:	4652      	mov	r2, sl
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	2102      	movs	r1, #2
 8001ef4:	f88d 5007 	strb.w	r5, [sp, #7]
 8001ef8:	f002 fab0 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001efc:	464a      	mov	r2, r9
 8001efe:	4651      	mov	r1, sl
 8001f00:	4620      	mov	r0, r4
 8001f02:	f04f 0507 	mov.w	r5, #7
 8001f06:	f002 faa9 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0e:	4652      	mov	r2, sl
 8001f10:	f10d 0107 	add.w	r1, sp, #7
 8001f14:	4630      	mov	r0, r6
 8001f16:	f007 fa6d 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001f1a:	4652      	mov	r2, sl
 8001f1c:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001f1e:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001f22:	4620      	mov	r0, r4
 8001f24:	f002 fa9a 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001f28:	4652      	mov	r2, sl
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	f88d 9007 	strb.w	r9, [sp, #7]
 8001f32:	f002 fa93 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001f36:	464a      	mov	r2, r9
 8001f38:	4651      	mov	r1, sl
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f002 fa8e 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
 8001f44:	4652      	mov	r2, sl
 8001f46:	f10d 0107 	add.w	r1, sp, #7
 8001f4a:	4630      	mov	r0, r6
 8001f4c:	f007 fa52 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001f50:	4652      	mov	r2, sl
 8001f52:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001f54:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f002 fa7f 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001f5e:	4652      	mov	r2, sl
 8001f60:	4620      	mov	r0, r4
 8001f62:	2102      	movs	r1, #2
 8001f64:	f88d 5007 	strb.w	r5, [sp, #7]
 8001f68:	f002 fa78 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001f6c:	464a      	mov	r2, r9
 8001f6e:	4651      	mov	r1, sl
 8001f70:	4620      	mov	r0, r4
 8001f72:	f002 fa73 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	4652      	mov	r2, sl
 8001f7c:	f10d 0107 	add.w	r1, sp, #7
 8001f80:	4630      	mov	r0, r6
 8001f82:	f007 fa37 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001f86:	4652      	mov	r2, sl
 8001f88:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001f8a:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001f8e:	4620      	mov	r0, r4
 8001f90:	f002 fa64 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x66);
 8001f94:	2066      	movs	r0, #102	@ 0x66
 8001f96:	f7fe fc2d 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 8001f9a:	f04f 033c 	mov.w	r3, #60	@ 0x3c
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001f9e:	4652      	mov	r2, sl
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	f88d 3007 	strb.w	r3, [sp, #7]
 8001fa8:	f002 fa58 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001fac:	464a      	mov	r2, r9
 8001fae:	4651      	mov	r1, sl
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f002 fa53 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fba:	4652      	mov	r2, sl
 8001fbc:	f10d 0107 	add.w	r1, sp, #7
 8001fc0:	4630      	mov	r0, r6
 8001fc2:	f007 fa17 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001fc6:	4652      	mov	r2, sl
 8001fc8:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001fca:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001fce:	4620      	mov	r0, r4
 8001fd0:	f002 fa44 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_data(&val, sizeof(val));
 8001fd4:	f10d 0007 	add.w	r0, sp, #7
 8001fd8:	f88d 9007 	strb.w	r9, [sp, #7]
 8001fdc:	f7fe fbce 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0xCD);
 8001fe0:	23cd      	movs	r3, #205	@ 0xcd
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001fe2:	4652      	mov	r2, sl
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	f88d 3007 	strb.w	r3, [sp, #7]
 8001fec:	f002 fa36 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001ff0:	464a      	mov	r2, r9
 8001ff2:	4651      	mov	r1, sl
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f002 fa31 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffe:	4652      	mov	r2, sl
 8002000:	f10d 0107 	add.w	r1, sp, #7
 8002004:	4630      	mov	r0, r6
 8002006:	f007 f9f5 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800200a:	4652      	mov	r2, sl
 800200c:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800200e:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002012:	4620      	mov	r0, r4
 8002014:	f002 fa22 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x67);
 8002018:	f04f 0167 	mov.w	r1, #103	@ 0x67
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800201c:	4652      	mov	r2, sl
 800201e:	4620      	mov	r0, r4
 8002020:	f88d 1007 	strb.w	r1, [sp, #7]
 8002024:	2102      	movs	r1, #2
 8002026:	f002 fa19 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800202a:	464a      	mov	r2, r9
 800202c:	4651      	mov	r1, sl
 800202e:	4620      	mov	r0, r4
 8002030:	f002 fa14 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002034:	f04f 33ff 	mov.w	r3, #4294967295
 8002038:	4652      	mov	r2, sl
 800203a:	f10d 0107 	add.w	r1, sp, #7
 800203e:	4630      	mov	r0, r6
 8002040:	f007 f9d8 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002044:	4652      	mov	r2, sl
 8002046:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002048:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800204c:	4620      	mov	r0, r4
 800204e:	f002 fa05 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002052:	4652      	mov	r2, sl
 8002054:	4620      	mov	r0, r4
 8002056:	2102      	movs	r1, #2
 8002058:	f88d 8007 	strb.w	r8, [sp, #7]
 800205c:	f002 f9fe 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002060:	464a      	mov	r2, r9
 8002062:	4651      	mov	r1, sl
 8002064:	4620      	mov	r0, r4
 8002066:	f002 f9f9 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	4652      	mov	r2, sl
 8002070:	f10d 0107 	add.w	r1, sp, #7
 8002074:	4630      	mov	r0, r6
 8002076:	f007 f9bd 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800207a:	4652      	mov	r2, sl
 800207c:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800207e:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002082:	4620      	mov	r0, r4
 8002084:	f002 f9ea 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002088:	4652      	mov	r2, sl
 800208a:	4620      	mov	r0, r4
 800208c:	2102      	movs	r1, #2
 800208e:	f88d 8007 	strb.w	r8, [sp, #7]
 8002092:	f002 f9e3 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002096:	464a      	mov	r2, r9
 8002098:	4651      	mov	r1, sl
 800209a:	4620      	mov	r0, r4
 800209c:	f04f 0810 	mov.w	r8, #16
 80020a0:	f002 f9dc 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
 80020a8:	4652      	mov	r2, sl
 80020aa:	f10d 0107 	add.w	r1, sp, #7
 80020ae:	4630      	mov	r0, r6
 80020b0:	f007 f9a0 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80020b4:	4652      	mov	r2, sl
 80020b6:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80020b8:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80020bc:	4620      	mov	r0, r4
 80020be:	f002 f9cd 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80020c2:	4652      	mov	r2, sl
 80020c4:	4620      	mov	r0, r4
 80020c6:	2102      	movs	r1, #2
 80020c8:	f88d 8007 	strb.w	r8, [sp, #7]
 80020cc:	f002 f9c6 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80020d0:	464a      	mov	r2, r9
 80020d2:	4651      	mov	r1, sl
 80020d4:	4620      	mov	r0, r4
 80020d6:	f002 f9c1 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
 80020de:	4652      	mov	r2, sl
 80020e0:	f10d 0107 	add.w	r1, sp, #7
 80020e4:	4630      	mov	r0, r6
 80020e6:	f007 f985 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80020ea:	4652      	mov	r2, sl
 80020ec:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80020ee:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80020f2:	4620      	mov	r0, r4
 80020f4:	f002 f9b2 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80020f8:	4652      	mov	r2, sl
 80020fa:	4620      	mov	r0, r4
 80020fc:	2102      	movs	r1, #2
 80020fe:	f88d 9007 	strb.w	r9, [sp, #7]
 8002102:	f002 f9ab 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002106:	464a      	mov	r2, r9
 8002108:	4651      	mov	r1, sl
 800210a:	4620      	mov	r0, r4
 800210c:	f002 f9a6 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002110:	f04f 33ff 	mov.w	r3, #4294967295
 8002114:	4652      	mov	r2, sl
 8002116:	f10d 0107 	add.w	r1, sp, #7
 800211a:	4630      	mov	r0, r6
 800211c:	f007 f96a 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002120:	4652      	mov	r2, sl
 8002122:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002124:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002128:	4620      	mov	r0, r4
 800212a:	f002 f997 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800212e:	4652      	mov	r2, sl
 8002130:	4620      	mov	r0, r4
 8002132:	2102      	movs	r1, #2
 8002134:	f88d 9007 	strb.w	r9, [sp, #7]
 8002138:	f002 f990 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800213c:	464a      	mov	r2, r9
 800213e:	4651      	mov	r1, sl
 8002140:	4620      	mov	r0, r4
 8002142:	f002 f98b 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002146:	f04f 33ff 	mov.w	r3, #4294967295
 800214a:	4652      	mov	r2, sl
 800214c:	f10d 0107 	add.w	r1, sp, #7
 8002150:	4630      	mov	r0, r6
 8002152:	f007 f94f 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002156:	4652      	mov	r2, sl
 8002158:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800215a:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800215e:	4620      	mov	r0, r4
 8002160:	f002 f97c 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002164:	4652      	mov	r2, sl
 8002166:	4620      	mov	r0, r4
 8002168:	2102      	movs	r1, #2
 800216a:	f88d 9007 	strb.w	r9, [sp, #7]
 800216e:	f002 f975 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002172:	464a      	mov	r2, r9
 8002174:	4651      	mov	r1, sl
 8002176:	4620      	mov	r0, r4
 8002178:	f002 f970 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800217c:	f04f 33ff 	mov.w	r3, #4294967295
 8002180:	4652      	mov	r2, sl
 8002182:	f10d 0107 	add.w	r1, sp, #7
 8002186:	4630      	mov	r0, r6
 8002188:	f007 f934 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800218c:	4652      	mov	r2, sl
 800218e:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002190:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002194:	4620      	mov	r0, r4
 8002196:	f002 f961 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x67);
 800219a:	2067      	movs	r0, #103	@ 0x67
 800219c:	f7fe fb2a 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80021a0:	4652      	mov	r2, sl
 80021a2:	4620      	mov	r0, r4
 80021a4:	2102      	movs	r1, #2
 80021a6:	f88d 9007 	strb.w	r9, [sp, #7]
 80021aa:	f002 f957 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80021ae:	464a      	mov	r2, r9
 80021b0:	4651      	mov	r1, sl
 80021b2:	4620      	mov	r0, r4
 80021b4:	f002 f952 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80021b8:	f04f 33ff 	mov.w	r3, #4294967295
 80021bc:	4652      	mov	r2, sl
 80021be:	f10d 0107 	add.w	r1, sp, #7
 80021c2:	4630      	mov	r0, r6
 80021c4:	f007 f916 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80021c8:	4652      	mov	r2, sl
 80021ca:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80021cc:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80021d0:	4620      	mov	r0, r4
 80021d2:	f002 f943 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x3C);
 80021d6:	f04f 033c 	mov.w	r3, #60	@ 0x3c
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80021da:	4652      	mov	r2, sl
 80021dc:	4620      	mov	r0, r4
 80021de:	2102      	movs	r1, #2
 80021e0:	f88d 3007 	strb.w	r3, [sp, #7]
 80021e4:	f002 f93a 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80021e8:	464a      	mov	r2, r9
 80021ea:	4651      	mov	r1, sl
 80021ec:	4620      	mov	r0, r4
 80021ee:	f002 f935 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	4652      	mov	r2, sl
 80021f8:	f10d 0107 	add.w	r1, sp, #7
 80021fc:	4630      	mov	r0, r6
 80021fe:	f007 f8f9 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002202:	4652      	mov	r2, sl
 8002204:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002206:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800220a:	4620      	mov	r0, r4
 800220c:	f002 f926 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002210:	4652      	mov	r2, sl
 8002212:	4620      	mov	r0, r4
 8002214:	2102      	movs	r1, #2
 8002216:	f88d 9007 	strb.w	r9, [sp, #7]
 800221a:	f002 f91f 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800221e:	464a      	mov	r2, r9
 8002220:	4651      	mov	r1, sl
 8002222:	4620      	mov	r0, r4
 8002224:	f002 f91a 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002228:	f04f 33ff 	mov.w	r3, #4294967295
 800222c:	4652      	mov	r2, sl
 800222e:	f10d 0107 	add.w	r1, sp, #7
 8002232:	4630      	mov	r0, r6
 8002234:	f007 f8de 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002238:	4652      	mov	r2, sl
 800223a:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800223c:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002240:	4620      	mov	r0, r4
 8002242:	f002 f90b 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002246:	4652      	mov	r2, sl
 8002248:	4620      	mov	r0, r4
 800224a:	2102      	movs	r1, #2
 800224c:	f88d 9007 	strb.w	r9, [sp, #7]
 8002250:	f002 f904 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002254:	464a      	mov	r2, r9
 8002256:	4651      	mov	r1, sl
 8002258:	4620      	mov	r0, r4
 800225a:	f002 f8ff 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800225e:	f04f 33ff 	mov.w	r3, #4294967295
 8002262:	4652      	mov	r2, sl
 8002264:	f10d 0107 	add.w	r1, sp, #7
 8002268:	4630      	mov	r0, r6
 800226a:	f007 f8c3 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800226e:	4652      	mov	r2, sl
 8002270:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002272:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002276:	4620      	mov	r0, r4
 8002278:	f002 f8f0 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800227c:	4652      	mov	r2, sl
 800227e:	4620      	mov	r0, r4
 8002280:	2102      	movs	r1, #2
 8002282:	f88d 9007 	strb.w	r9, [sp, #7]
 8002286:	f002 f8e9 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800228a:	464a      	mov	r2, r9
 800228c:	4651      	mov	r1, sl
 800228e:	4620      	mov	r0, r4
 8002290:	f002 f8e4 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002294:	f04f 33ff 	mov.w	r3, #4294967295
 8002298:	4652      	mov	r2, sl
 800229a:	f10d 0107 	add.w	r1, sp, #7
 800229e:	4630      	mov	r0, r6
 80022a0:	f007 f8a8 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80022a4:	4652      	mov	r2, sl
 80022a6:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80022a8:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80022ac:	4620      	mov	r0, r4
 80022ae:	f002 f8d5 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80022b2:	4652      	mov	r2, sl
 80022b4:	4620      	mov	r0, r4
 80022b6:	2102      	movs	r1, #2
 80022b8:	f88d a007 	strb.w	sl, [sp, #7]
 80022bc:	f002 f8ce 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80022c0:	464a      	mov	r2, r9
 80022c2:	4651      	mov	r1, sl
 80022c4:	4620      	mov	r0, r4
 80022c6:	f002 f8c9 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
 80022ce:	4652      	mov	r2, sl
 80022d0:	f10d 0107 	add.w	r1, sp, #7
 80022d4:	4630      	mov	r0, r6
 80022d6:	f007 f88d 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80022da:	4652      	mov	r2, sl
 80022dc:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80022de:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80022e2:	4620      	mov	r0, r4
 80022e4:	f002 f8ba 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x54);
 80022e8:	2354      	movs	r3, #84	@ 0x54
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80022ea:	4652      	mov	r2, sl
 80022ec:	4620      	mov	r0, r4
 80022ee:	2102      	movs	r1, #2
 80022f0:	f88d 3007 	strb.w	r3, [sp, #7]
 80022f4:	f002 f8b2 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80022f8:	464a      	mov	r2, r9
 80022fa:	4651      	mov	r1, sl
 80022fc:	4620      	mov	r0, r4
 80022fe:	f002 f8ad 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002302:	f04f 33ff 	mov.w	r3, #4294967295
 8002306:	4652      	mov	r2, sl
 8002308:	f10d 0107 	add.w	r1, sp, #7
 800230c:	4630      	mov	r0, r6
 800230e:	f007 f871 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002312:	4652      	mov	r2, sl
 8002314:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002316:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800231a:	4620      	mov	r0, r4
 800231c:	f002 f89e 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002320:	4652      	mov	r2, sl
 8002322:	4620      	mov	r0, r4
 8002324:	2102      	movs	r1, #2
 8002326:	f88d 8007 	strb.w	r8, [sp, #7]
 800232a:	f002 f897 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800232e:	464a      	mov	r2, r9
 8002330:	4651      	mov	r1, sl
 8002332:	4620      	mov	r0, r4
 8002334:	f002 f892 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002338:	f04f 33ff 	mov.w	r3, #4294967295
 800233c:	4652      	mov	r2, sl
 800233e:	f10d 0107 	add.w	r1, sp, #7
 8002342:	4630      	mov	r0, r6
 8002344:	f007 f856 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002348:	4652      	mov	r2, sl
 800234a:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800234c:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002350:	4620      	mov	r0, r4
 8002352:	f002 f883 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x32);
 8002356:	2332      	movs	r3, #50	@ 0x32
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002358:	4652      	mov	r2, sl
 800235a:	4620      	mov	r0, r4
 800235c:	2102      	movs	r1, #2
 800235e:	f88d 3007 	strb.w	r3, [sp, #7]
 8002362:	f002 f87b 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002366:	464a      	mov	r2, r9
 8002368:	4651      	mov	r1, sl
 800236a:	4620      	mov	r0, r4
 800236c:	f002 f876 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002370:	f04f 33ff 	mov.w	r3, #4294967295
 8002374:	4652      	mov	r2, sl
 8002376:	f10d 0107 	add.w	r1, sp, #7
 800237a:	4630      	mov	r0, r6
 800237c:	f007 f83a 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002380:	4652      	mov	r2, sl
 8002382:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002384:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002388:	4620      	mov	r0, r4
 800238a:	f002 f867 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800238e:	4652      	mov	r2, sl
 8002390:	4620      	mov	r0, r4
 8002392:	2102      	movs	r1, #2
 8002394:	f88d 7007 	strb.w	r7, [sp, #7]
 8002398:	f002 f860 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800239c:	464a      	mov	r2, r9
 800239e:	4651      	mov	r1, sl
 80023a0:	4620      	mov	r0, r4
 80023a2:	f002 f85b 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	4652      	mov	r2, sl
 80023ac:	f10d 0107 	add.w	r1, sp, #7
 80023b0:	4630      	mov	r0, r6
 80023b2:	f007 f81f 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80023b6:	4652      	mov	r2, sl
 80023b8:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80023ba:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80023be:	4620      	mov	r0, r4
 80023c0:	f002 f84c 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x74);
 80023c4:	2074      	movs	r0, #116	@ 0x74
 80023c6:	f7fe fa15 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_data(&val, sizeof(val));
 80023ca:	f10d 0007 	add.w	r0, sp, #7
 80023ce:	f88d 8007 	strb.w	r8, [sp, #7]
 80023d2:	f7fe f9d3 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x85);
 80023d6:	2385      	movs	r3, #133	@ 0x85
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80023d8:	4652      	mov	r2, sl
 80023da:	4620      	mov	r0, r4
 80023dc:	2102      	movs	r1, #2
 80023de:	f88d 3007 	strb.w	r3, [sp, #7]
 80023e2:	f002 f83b 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80023e6:	464a      	mov	r2, r9
 80023e8:	4651      	mov	r1, sl
 80023ea:	4620      	mov	r0, r4
 80023ec:	f002 f836 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80023f0:	f04f 33ff 	mov.w	r3, #4294967295
 80023f4:	4652      	mov	r2, sl
 80023f6:	f10d 0107 	add.w	r1, sp, #7
 80023fa:	4630      	mov	r0, r6
 80023fc:	f006 fffa 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002400:	4652      	mov	r2, sl
 8002402:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002404:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002408:	4620      	mov	r0, r4
 800240a:	f002 f827 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x80);
 800240e:	2380      	movs	r3, #128	@ 0x80
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002410:	4652      	mov	r2, sl
 8002412:	4620      	mov	r0, r4
 8002414:	2102      	movs	r1, #2
 8002416:	f88d 3007 	strb.w	r3, [sp, #7]
 800241a:	f002 f81f 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800241e:	464a      	mov	r2, r9
 8002420:	4651      	mov	r1, sl
 8002422:	4620      	mov	r0, r4
 8002424:	f002 f81a 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002428:	f04f 33ff 	mov.w	r3, #4294967295
 800242c:	4652      	mov	r2, sl
 800242e:	f10d 0107 	add.w	r1, sp, #7
 8002432:	4630      	mov	r0, r6
 8002434:	f006 ffde 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002438:	4652      	mov	r2, sl
 800243a:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800243c:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002440:	4620      	mov	r0, r4
 8002442:	f002 f80b 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002446:	4652      	mov	r2, sl
 8002448:	4620      	mov	r0, r4
 800244a:	2102      	movs	r1, #2
 800244c:	f88d 9007 	strb.w	r9, [sp, #7]
 8002450:	f002 f804 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002454:	464a      	mov	r2, r9
 8002456:	4651      	mov	r1, sl
 8002458:	4620      	mov	r0, r4
 800245a:	f001 ffff 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800245e:	f04f 33ff 	mov.w	r3, #4294967295
 8002462:	4652      	mov	r2, sl
 8002464:	f10d 0107 	add.w	r1, sp, #7
 8002468:	4630      	mov	r0, r6
 800246a:	f006 ffc3 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800246e:	4652      	mov	r2, sl
 8002470:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002472:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002476:	4620      	mov	r0, r4
 8002478:	f001 fff0 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800247c:	4652      	mov	r2, sl
 800247e:	4620      	mov	r0, r4
 8002480:	2102      	movs	r1, #2
 8002482:	f88d 9007 	strb.w	r9, [sp, #7]
 8002486:	f001 ffe9 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800248a:	464a      	mov	r2, r9
 800248c:	4651      	mov	r1, sl
 800248e:	4620      	mov	r0, r4
 8002490:	f001 ffe4 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002494:	f04f 33ff 	mov.w	r3, #4294967295
 8002498:	4652      	mov	r2, sl
 800249a:	f10d 0107 	add.w	r1, sp, #7
 800249e:	4630      	mov	r0, r6
 80024a0:	f006 ffa8 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80024a4:	4652      	mov	r2, sl
 80024a6:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80024a8:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80024ac:	4620      	mov	r0, r4
 80024ae:	f001 ffd5 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x4E);
 80024b2:	234e      	movs	r3, #78	@ 0x4e
    GC9A01_write_data(&val, sizeof(val));
 80024b4:	f10d 0007 	add.w	r0, sp, #7
 80024b8:	f88d 3007 	strb.w	r3, [sp, #7]
 80024bc:	f7fe f95e 	bl	800077c <GC9A01_write_data.constprop.0>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80024c0:	4652      	mov	r2, sl
 80024c2:	4620      	mov	r0, r4
 80024c4:	2102      	movs	r1, #2
 80024c6:	f88d 9007 	strb.w	r9, [sp, #7]
 80024ca:	f001 ffc7 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80024ce:	464a      	mov	r2, r9
 80024d0:	4651      	mov	r1, sl
 80024d2:	4620      	mov	r0, r4
 80024d4:	f001 ffc2 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80024d8:	f04f 33ff 	mov.w	r3, #4294967295
 80024dc:	4652      	mov	r2, sl
 80024de:	f10d 0107 	add.w	r1, sp, #7
 80024e2:	4630      	mov	r0, r6
 80024e4:	f006 ff86 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80024e8:	4652      	mov	r2, sl
 80024ea:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80024ec:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80024f0:	4620      	mov	r0, r4
 80024f2:	f001 ffb3 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x98);
 80024f6:	4638      	mov	r0, r7
 80024f8:	f7fe f97c 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 80024fc:	233e      	movs	r3, #62	@ 0x3e
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80024fe:	4652      	mov	r2, sl
 8002500:	4620      	mov	r0, r4
 8002502:	2102      	movs	r1, #2
 8002504:	f88d 3007 	strb.w	r3, [sp, #7]
 8002508:	f001 ffa8 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800250c:	464a      	mov	r2, r9
 800250e:	4651      	mov	r1, sl
 8002510:	4620      	mov	r0, r4
 8002512:	f001 ffa3 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002516:	f04f 33ff 	mov.w	r3, #4294967295
 800251a:	4652      	mov	r2, sl
 800251c:	f10d 0107 	add.w	r1, sp, #7
 8002520:	4630      	mov	r0, r6
 8002522:	f006 ff67 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002526:	4652      	mov	r2, sl
 8002528:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800252a:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800252e:	4620      	mov	r0, r4
 8002530:	f001 ff94 	bl	800445c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002534:	4652      	mov	r2, sl
 8002536:	4620      	mov	r0, r4
 8002538:	2102      	movs	r1, #2
 800253a:	f88d 5007 	strb.w	r5, [sp, #7]
 800253e:	f001 ff8d 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002542:	464a      	mov	r2, r9
 8002544:	4651      	mov	r1, sl
 8002546:	4620      	mov	r0, r4
 8002548:	f001 ff88 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800254c:	f10d 0107 	add.w	r1, sp, #7
 8002550:	4652      	mov	r2, sl
 8002552:	4630      	mov	r0, r6
 8002554:	f04f 33ff 	mov.w	r3, #4294967295
 8002558:	f006 ff4c 	bl	80093f4 <HAL_SPI_Transmit>
 800255c:	4603      	mov	r3, r0
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800255e:	4652      	mov	r2, sl
 8002560:	4651      	mov	r1, sl
 8002562:	4620      	mov	r0, r4
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002564:	f88b 3000 	strb.w	r3, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002568:	f001 ff78 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x35);
 800256c:	2035      	movs	r0, #53	@ 0x35
 800256e:	f7fe f941 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8002572:	2021      	movs	r0, #33	@ 0x21
 8002574:	f7fe f93e 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_command(0x11);
 8002578:	2011      	movs	r0, #17
 800257a:	f7fe f93b 	bl	80007f4 <GC9A01_write_command>
    HAL_Delay(120);
 800257e:	2078      	movs	r0, #120	@ 0x78
 8002580:	f001 fbd2 	bl	8003d28 <HAL_Delay>
    GC9A01_write_command(0x29);
 8002584:	2029      	movs	r0, #41	@ 0x29
 8002586:	f7fe f935 	bl	80007f4 <GC9A01_write_command>
    HAL_Delay(20);
 800258a:	2014      	movs	r0, #20
}
 800258c:	b003      	add	sp, #12
 800258e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_Delay(20);
 8002592:	f001 bbc9 	b.w	8003d28 <HAL_Delay>
 8002596:	bf00      	nop

08002598 <GC9A01_set_frame>:
void GC9A01_set_frame(struct GC9A01_frame frame) {
 8002598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800259c:	b084      	sub	sp, #16
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 800259e:	4c48      	ldr	r4, [pc, #288]	@ (80026c0 <GC9A01_set_frame+0x128>)
 80025a0:	222a      	movs	r2, #42	@ 0x2a
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80025a2:	4e48      	ldr	r6, [pc, #288]	@ (80026c4 <GC9A01_set_frame+0x12c>)
void GC9A01_set_frame(struct GC9A01_frame frame) {
 80025a4:	466b      	mov	r3, sp
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80025a6:	4d48      	ldr	r5, [pc, #288]	@ (80026c8 <GC9A01_set_frame+0x130>)
 80025a8:	f88d 200c 	strb.w	r2, [sp, #12]
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 80025ac:	2200      	movs	r2, #0
void GC9A01_set_frame(struct GC9A01_frame frame) {
 80025ae:	e883 0003 	stmia.w	r3, {r0, r1}
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 80025b2:	4620      	mov	r0, r4
 80025b4:	2102      	movs	r1, #2
 80025b6:	f8bd a000 	ldrh.w	sl, [sp]
 80025ba:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80025be:	f8bd 9004 	ldrh.w	r9, [sp, #4]
 80025c2:	f8bd 7006 	ldrh.w	r7, [sp, #6]
 80025c6:	f001 ff49 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80025ca:	4620      	mov	r0, r4
 80025cc:	2200      	movs	r2, #0
 80025ce:	2101      	movs	r1, #1
 80025d0:	f001 ff44 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
 80025d8:	a903      	add	r1, sp, #12
 80025da:	2201      	movs	r2, #1
 80025dc:	4630      	mov	r0, r6
 80025de:	f006 ff09 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80025e2:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80025e4:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80025e6:	4620      	mov	r0, r4
 80025e8:	4611      	mov	r1, r2
 80025ea:	f001 ff37 	bl	800445c <HAL_GPIO_WritePin>
    data[0] = (frame.start.X >> 8) & 0xFF;
 80025ee:	2300      	movs	r3, #0
 80025f0:	ea4f 221a 	mov.w	r2, sl, lsr #8
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80025f4:	4620      	mov	r0, r4
 80025f6:	2102      	movs	r1, #2
    data[0] = (frame.start.X >> 8) & 0xFF;
 80025f8:	f362 0307 	bfi	r3, r2, #0, #8
    data[2] = (frame.end.X >> 8) & 0xFF;
 80025fc:	ea4f 2219 	mov.w	r2, r9, lsr #8
    data[0] = (frame.start.X >> 8) & 0xFF;
 8002600:	f36a 230f 	bfi	r3, sl, #8, #8
 8002604:	f362 4317 	bfi	r3, r2, #16, #8
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002608:	2201      	movs	r2, #1
    data[0] = (frame.start.X >> 8) & 0xFF;
 800260a:	f369 631f 	bfi	r3, r9, #24, #8
 800260e:	9303      	str	r3, [sp, #12]
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002610:	f001 ff24 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002614:	4620      	mov	r0, r4
 8002616:	2200      	movs	r2, #0
 8002618:	2101      	movs	r1, #1
 800261a:	f001 ff1f 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800261e:	f04f 33ff 	mov.w	r3, #4294967295
 8002622:	a903      	add	r1, sp, #12
 8002624:	2204      	movs	r2, #4
 8002626:	4630      	mov	r0, r6
 8002628:	f006 fee4 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800262c:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800262e:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002630:	4620      	mov	r0, r4
 8002632:	4611      	mov	r1, r2
 8002634:	f001 ff12 	bl	800445c <HAL_GPIO_WritePin>
    GC9A01_write_command(ROW_ADDR_SET);
 8002638:	232b      	movs	r3, #43	@ 0x2b
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 800263a:	4620      	mov	r0, r4
 800263c:	2200      	movs	r2, #0
 800263e:	2102      	movs	r1, #2
 8002640:	f88d 300b 	strb.w	r3, [sp, #11]
 8002644:	f001 ff0a 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002648:	4620      	mov	r0, r4
 800264a:	2200      	movs	r2, #0
 800264c:	2101      	movs	r1, #1
 800264e:	f001 ff05 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002652:	f04f 33ff 	mov.w	r3, #4294967295
 8002656:	f10d 010b 	add.w	r1, sp, #11
 800265a:	2201      	movs	r2, #1
 800265c:	4630      	mov	r0, r6
 800265e:	f006 fec9 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002662:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002664:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002666:	4620      	mov	r0, r4
 8002668:	4611      	mov	r1, r2
 800266a:	f001 fef7 	bl	800445c <HAL_GPIO_WritePin>
    data[0] = (frame.start.Y >> 8) & 0xFF;
 800266e:	2300      	movs	r3, #0
 8002670:	ea4f 2218 	mov.w	r2, r8, lsr #8
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002674:	4620      	mov	r0, r4
 8002676:	2102      	movs	r1, #2
    data[0] = (frame.start.Y >> 8) & 0xFF;
 8002678:	f362 0307 	bfi	r3, r2, #0, #8
    data[2] = (frame.end.Y >> 8) & 0xFF;
 800267c:	0a3a      	lsrs	r2, r7, #8
    data[0] = (frame.start.Y >> 8) & 0xFF;
 800267e:	f368 230f 	bfi	r3, r8, #8, #8
 8002682:	f362 4317 	bfi	r3, r2, #16, #8
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002686:	2201      	movs	r2, #1
    data[0] = (frame.start.Y >> 8) & 0xFF;
 8002688:	f367 631f 	bfi	r3, r7, #24, #8
 800268c:	9303      	str	r3, [sp, #12]
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800268e:	f001 fee5 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002692:	4620      	mov	r0, r4
 8002694:	2200      	movs	r2, #0
 8002696:	2101      	movs	r1, #1
 8002698:	f001 fee0 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800269c:	a903      	add	r1, sp, #12
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
 80026a2:	4630      	mov	r0, r6
 80026a4:	2204      	movs	r2, #4
 80026a6:	f006 fea5 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80026aa:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80026ac:	4603      	mov	r3, r0
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80026ae:	4620      	mov	r0, r4
 80026b0:	4611      	mov	r1, r2
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80026b2:	702b      	strb	r3, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80026b4:	f001 fed2 	bl	800445c <HAL_GPIO_WritePin>
}
 80026b8:	b004      	add	sp, #16
 80026ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026be:	bf00      	nop
 80026c0:	58020400 	.word	0x58020400
 80026c4:	240001a0 	.word	0x240001a0
 80026c8:	2400008c 	.word	0x2400008c

080026cc <GC9A01_sleep_mode>:
{
 80026cc:	b510      	push	{r4, lr}
 80026ce:	b082      	sub	sp, #8
	if(command)
 80026d0:	b310      	cbz	r0, 8002718 <GC9A01_sleep_mode+0x4c>
		GC9A01_write_command(SLEEP_MODE_ON);
 80026d2:	2310      	movs	r3, #16
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 80026d4:	2200      	movs	r2, #0
 80026d6:	2102      	movs	r1, #2
 80026d8:	4819      	ldr	r0, [pc, #100]	@ (8002740 <GC9A01_sleep_mode+0x74>)
 80026da:	f88d 3007 	strb.w	r3, [sp, #7]
 80026de:	f001 febd 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80026e2:	2200      	movs	r2, #0
 80026e4:	2101      	movs	r1, #1
 80026e6:	4816      	ldr	r0, [pc, #88]	@ (8002740 <GC9A01_sleep_mode+0x74>)
 80026e8:	f001 feb8 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80026ec:	f10d 0107 	add.w	r1, sp, #7
 80026f0:	f04f 33ff 	mov.w	r3, #4294967295
 80026f4:	2201      	movs	r2, #1
 80026f6:	4813      	ldr	r0, [pc, #76]	@ (8002744 <GC9A01_sleep_mode+0x78>)
 80026f8:	f006 fe7c 	bl	80093f4 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80026fc:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80026fe:	4604      	mov	r4, r0
 8002700:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <GC9A01_sleep_mode+0x7c>)
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002702:	480f      	ldr	r0, [pc, #60]	@ (8002740 <GC9A01_sleep_mode+0x74>)
 8002704:	4611      	mov	r1, r2
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002706:	701c      	strb	r4, [r3, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002708:	f001 fea8 	bl	800445c <HAL_GPIO_WritePin>
	HAL_Delay(120);
 800270c:	2078      	movs	r0, #120	@ 0x78
}
 800270e:	b002      	add	sp, #8
 8002710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(120);
 8002714:	f001 bb08 	b.w	8003d28 <HAL_Delay>
		GC9A01_write_command(SLEEP_MODE_OFF);
 8002718:	4604      	mov	r4, r0
 800271a:	2311      	movs	r3, #17
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 800271c:	2102      	movs	r1, #2
 800271e:	4808      	ldr	r0, [pc, #32]	@ (8002740 <GC9A01_sleep_mode+0x74>)
 8002720:	4622      	mov	r2, r4
 8002722:	f88d 3007 	strb.w	r3, [sp, #7]
 8002726:	f001 fe99 	bl	800445c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800272a:	4622      	mov	r2, r4
 800272c:	2101      	movs	r1, #1
 800272e:	4804      	ldr	r0, [pc, #16]	@ (8002740 <GC9A01_sleep_mode+0x74>)
 8002730:	f001 fe94 	bl	800445c <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002734:	2201      	movs	r2, #1
 8002736:	f10d 0107 	add.w	r1, sp, #7
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
 800273e:	e7da      	b.n	80026f6 <GC9A01_sleep_mode+0x2a>
 8002740:	58020400 	.word	0x58020400
 8002744:	240001a0 	.word	0x240001a0
 8002748:	2400008c 	.word	0x2400008c

0800274c <GC9A01_spi_tx>:
{
 800274c:	4684      	mov	ip, r0
 800274e:	460a      	mov	r2, r1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002750:	4807      	ldr	r0, [pc, #28]	@ (8002770 <GC9A01_spi_tx+0x24>)
 8002752:	4661      	mov	r1, ip
{
 8002754:	b508      	push	{r3, lr}
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002756:	f04f 33ff 	mov.w	r3, #4294967295
 800275a:	f006 fe4b 	bl	80093f4 <HAL_SPI_Transmit>
 800275e:	4b05      	ldr	r3, [pc, #20]	@ (8002774 <GC9A01_spi_tx+0x28>)

	if(ret != HAL_OK)
		return -1;

	return 1;
 8002760:	2800      	cmp	r0, #0
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002762:	7018      	strb	r0, [r3, #0]

}
 8002764:	bf14      	ite	ne
 8002766:	f04f 30ff 	movne.w	r0, #4294967295
 800276a:	2001      	moveq	r0, #1
 800276c:	bd08      	pop	{r3, pc}
 800276e:	bf00      	nop
 8002770:	240001a0 	.word	0x240001a0
 8002774:	2400008c 	.word	0x2400008c

08002778 <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
int JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 8002778:	b570      	push	{r4, r5, r6, lr}
 800277a:	4616      	mov	r6, r2
 800277c:	b082      	sub	sp, #8
  Input_frameSize = FrameSize;

  Jpeg_HWDecodingEnd = 0;
  
  /* Start JPEG decoding with DMA method */
  if(HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT) != HAL_OK)
 800277e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  JPEGSourceAddress =  FrameSourceAddress ;
 8002782:	4d0a      	ldr	r5, [pc, #40]	@ (80027ac <JPEG_Decode_DMA+0x34>)
  Input_frameIndex=0;
 8002784:	2400      	movs	r4, #0
  if(HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT) != HAL_OK)
 8002786:	9200      	str	r2, [sp, #0]
  JPEGSourceAddress =  FrameSourceAddress ;
 8002788:	6029      	str	r1, [r5, #0]
  FrameBufferAddress = DestAddress;
 800278a:	4d09      	ldr	r5, [pc, #36]	@ (80027b0 <JPEG_Decode_DMA+0x38>)
 800278c:	602b      	str	r3, [r5, #0]
  Input_frameIndex=0;
 800278e:	4d09      	ldr	r5, [pc, #36]	@ (80027b4 <JPEG_Decode_DMA+0x3c>)
 8002790:	602c      	str	r4, [r5, #0]
  Input_frameSize = FrameSize;
 8002792:	4d09      	ldr	r5, [pc, #36]	@ (80027b8 <JPEG_Decode_DMA+0x40>)
 8002794:	602e      	str	r6, [r5, #0]
  Jpeg_HWDecodingEnd = 0;
 8002796:	4d09      	ldr	r5, [pc, #36]	@ (80027bc <JPEG_Decode_DMA+0x44>)
 8002798:	602c      	str	r4, [r5, #0]
  if(HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT) != HAL_OK)
 800279a:	f002 faad 	bl	8004cf8 <HAL_JPEG_Decode_DMA>
	  return -1;
  
  
  return 1;
 800279e:	42a0      	cmp	r0, r4
  
}
 80027a0:	bf14      	ite	ne
 80027a2:	f04f 30ff 	movne.w	r0, #4294967295
 80027a6:	2001      	moveq	r0, #1
 80027a8:	b002      	add	sp, #8
 80027aa:	bd70      	pop	{r4, r5, r6, pc}
 80027ac:	24000098 	.word	0x24000098
 80027b0:	2400009c 	.word	0x2400009c
 80027b4:	24000090 	.word	0x24000090
 80027b8:	24000094 	.word	0x24000094
 80027bc:	240000a0 	.word	0x240000a0

080027c0 <HAL_JPEG_InfoReadyCallback>:
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop

080027c4 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 80027c4:	b410      	push	{r4}
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 80027c6:	4c0e      	ldr	r4, [pc, #56]	@ (8002800 <HAL_JPEG_GetDataCallback+0x3c>)
{
 80027c8:	468c      	mov	ip, r1
  if( Input_frameIndex < Input_frameSize)
 80027ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002804 <HAL_JPEG_GetDataCallback+0x40>)
  Input_frameIndex += NbDecodedData;
 80027cc:	6823      	ldr	r3, [r4, #0]
  if( Input_frameIndex < Input_frameSize)
 80027ce:	6812      	ldr	r2, [r2, #0]
  Input_frameIndex += NbDecodedData;
 80027d0:	440b      	add	r3, r1
 80027d2:	6023      	str	r3, [r4, #0]
  if( Input_frameIndex < Input_frameSize)
 80027d4:	4293      	cmp	r3, r2
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 80027d6:	4c0c      	ldr	r4, [pc, #48]	@ (8002808 <HAL_JPEG_GetDataCallback+0x44>)
 80027d8:	6821      	ldr	r1, [r4, #0]
  if( Input_frameIndex < Input_frameSize)
 80027da:	d20b      	bcs.n	80027f4 <HAL_JPEG_GetDataCallback+0x30>
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 80027dc:	1ad2      	subs	r2, r2, r3
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 80027de:	4461      	add	r1, ip
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 80027e0:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 80027e4:	6021      	str	r1, [r4, #0]
  {
    inDataLength = 0; 
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
  
}
 80027e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 80027ea:	bf28      	it	cs
 80027ec:	f44f 3280 	movcs.w	r2, #65536	@ 0x10000
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 80027f0:	f002 bac0 	b.w	8004d74 <HAL_JPEG_ConfigInputBuffer>
    inDataLength = 0; 
 80027f4:	2200      	movs	r2, #0
}
 80027f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 80027fa:	f002 babb 	b.w	8004d74 <HAL_JPEG_ConfigInputBuffer>
 80027fe:	bf00      	nop
 8002800:	24000090 	.word	0x24000090
 8002804:	24000094 	.word	0x24000094
 8002808:	24000098 	.word	0x24000098

0800280c <HAL_JPEG_DataReadyCallback>:
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 800280c:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <HAL_JPEG_DataReadyCallback+0x18>)
{
 800280e:	4611      	mov	r1, r2

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 8002810:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
{
 8002814:	b410      	push	{r4}
  FrameBufferAddress += OutDataLength;
 8002816:	681c      	ldr	r4, [r3, #0]
 8002818:	4421      	add	r1, r4
}
 800281a:	f85d 4b04 	ldr.w	r4, [sp], #4
  FrameBufferAddress += OutDataLength;
 800281e:	6019      	str	r1, [r3, #0]
  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 8002820:	f002 baac 	b.w	8004d7c <HAL_JPEG_ConfigOutputBuffer>
 8002824:	2400009c 	.word	0x2400009c

08002828 <HAL_JPEG_ErrorCallback>:
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
  Error_Handler();
 8002828:	f000 b9ca 	b.w	8002bc0 <Error_Handler>

0800282c <HAL_JPEG_DecodeCpltCallback>:
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
  Jpeg_HWDecodingEnd = 1; 
 800282c:	4b01      	ldr	r3, [pc, #4]	@ (8002834 <HAL_JPEG_DecodeCpltCallback+0x8>)
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]
}
 8002832:	4770      	bx	lr
 8002834:	240000a0 	.word	0x240000a0

08002838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002838:	b530      	push	{r4, r5, lr}
 800283a:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800283c:	224c      	movs	r2, #76	@ 0x4c
 800283e:	2100      	movs	r1, #0
 8002840:	a80a      	add	r0, sp, #40	@ 0x28
 8002842:	f00a f8e5 	bl	800ca10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002846:	2220      	movs	r2, #32
 8002848:	2100      	movs	r1, #0
 800284a:	a802      	add	r0, sp, #8
 800284c:	f00a f8e0 	bl	800ca10 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002850:	4b25      	ldr	r3, [pc, #148]	@ (80028e8 <SystemClock_Config+0xb0>)
 8002852:	f04f 32ff 	mov.w	r2, #4294967295

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002856:	2002      	movs	r0, #2
  RCC->CKGAENR = 0xFFFFFFFF;
 8002858:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800285c:	f003 faa8 	bl	8005db0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002860:	4a22      	ldr	r2, [pc, #136]	@ (80028ec <SystemClock_Config+0xb4>)
 8002862:	2300      	movs	r3, #0
 8002864:	9301      	str	r3, [sp, #4]
 8002866:	6993      	ldr	r3, [r2, #24]
 8002868:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800286c:	6193      	str	r3, [r2, #24]
 800286e:	6993      	ldr	r3, [r2, #24]
 8002870:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002878:	6993      	ldr	r3, [r2, #24]
 800287a:	0499      	lsls	r1, r3, #18
 800287c:	d5fc      	bpl.n	8002878 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800287e:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = 64;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002880:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002882:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 8002884:	2106      	movs	r1, #6
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002886:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8002888:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
 800288a:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 6;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800288c:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800288e:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 23;
 8002890:	2204      	movs	r2, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 8002892:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002894:	9118      	str	r1, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002896:	9417      	str	r4, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8002898:	950e      	str	r5, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLR = 2;
 800289a:	9419      	str	r4, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800289c:	e9cd 4313 	strd	r4, r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80028a0:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLN = 23;
 80028a4:	2317      	movs	r3, #23
 80028a6:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80028aa:	230c      	movs	r3, #12
 80028ac:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ae:	f003 fb15 	bl	8005edc <HAL_RCC_OscConfig>
 80028b2:	4603      	mov	r3, r0
 80028b4:	b108      	cbz	r0, 80028ba <SystemClock_Config+0x82>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028b6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <SystemClock_Config+0x80>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ba:	223f      	movs	r2, #63	@ 0x3f
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80028bc:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80028be:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028c0:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028c2:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028c4:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028c6:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80028c8:	9509      	str	r5, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ca:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80028cc:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80028d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028d4:	e9cd 5307 	strd	r5, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028d8:	f003 fe72 	bl	80065c0 <HAL_RCC_ClockConfig>
 80028dc:	b108      	cbz	r0, 80028e2 <SystemClock_Config+0xaa>
 80028de:	b672      	cpsid	i
  while (1)
 80028e0:	e7fe      	b.n	80028e0 <SystemClock_Config+0xa8>
}
 80028e2:	b01f      	add	sp, #124	@ 0x7c
 80028e4:	bd30      	pop	{r4, r5, pc}
 80028e6:	bf00      	nop
 80028e8:	58024400 	.word	0x58024400
 80028ec:	58024800 	.word	0x58024800

080028f0 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80028f0:	4aa3      	ldr	r2, [pc, #652]	@ (8002b80 <main+0x290>)
 80028f2:	6953      	ldr	r3, [r2, #20]
 80028f4:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08c      	sub	sp, #48	@ 0x30
 80028fc:	d111      	bne.n	8002922 <main+0x32>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80028fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002902:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002906:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800290a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800290e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002912:	6953      	ldr	r3, [r2, #20]
 8002914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002918:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800291a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800291e:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8002922:	f001 f9bf 	bl	8003ca4 <HAL_Init>
  HAL_Delay(500);
 8002926:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800292a:	f001 f9fd 	bl	8003d28 <HAL_Delay>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292e:	2400      	movs	r4, #0
  SystemClock_Config();
 8002930:	f7ff ff82 	bl	8002838 <SystemClock_Config>
  HAL_Delay(500);
 8002934:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002938:	f001 f9f6 	bl	8003d28 <HAL_Delay>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800293c:	4b91      	ldr	r3, [pc, #580]	@ (8002b84 <main+0x294>)
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800293e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002942:	4891      	ldr	r0, [pc, #580]	@ (8002b88 <main+0x298>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002944:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = PLUS_BTN_Pin|SET_BTN_Pin|MINUS_BTN_Pin;
 8002946:	2607      	movs	r6, #7
  DMA2D_Handle.Instance = DMA2D;
 8002948:	4d90      	ldr	r5, [pc, #576]	@ (8002b8c <main+0x29c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294a:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800294e:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002952:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002956:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800295a:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 800295e:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002962:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8002966:	9202      	str	r2, [sp, #8]
 8002968:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8002976:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800297a:	f002 0201 	and.w	r2, r2, #1
 800297e:	9203      	str	r2, [sp, #12]
 8002980:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002982:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002986:	f042 0202 	orr.w	r2, r2, #2
 800298a:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 800298e:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002992:	f002 0202 	and.w	r2, r2, #2
 8002996:	9204      	str	r2, [sp, #16]
 8002998:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800299a:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800299e:	f042 0204 	orr.w	r2, r2, #4
 80029a2:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 80029a6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80029aa:	f002 0204 	and.w	r2, r2, #4
 80029ae:	9205      	str	r2, [sp, #20]
 80029b0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b2:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80029b6:	f042 0208 	orr.w	r2, r2, #8
 80029ba:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 80029be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80029c2:	9107      	str	r1, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c4:	a907      	add	r1, sp, #28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	9306      	str	r3, [sp, #24]
 80029cc:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ce:	f001 fbfd 	bl	80041cc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GC9A01_CS_Pin|GC9A01_DC_Pin, GPIO_PIN_RESET);
 80029d2:	4622      	mov	r2, r4
 80029d4:	2103      	movs	r1, #3
 80029d6:	486e      	ldr	r0, [pc, #440]	@ (8002b90 <main+0x2a0>)
 80029d8:	f001 fd40 	bl	800445c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GC9A01_RST_Pin|GC9A01_BL_Pin, GPIO_PIN_SET);
 80029dc:	2201      	movs	r2, #1
 80029de:	f240 4104 	movw	r1, #1028	@ 0x404
 80029e2:	486b      	ldr	r0, [pc, #428]	@ (8002b90 <main+0x2a0>)
 80029e4:	f001 fd3a 	bl	800445c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, PLUS_BTN_Pin|SET_BTN_Pin|MINUS_BTN_Pin, GPIO_PIN_SET);
 80029e8:	2201      	movs	r2, #1
 80029ea:	2107      	movs	r1, #7
 80029ec:	4869      	ldr	r0, [pc, #420]	@ (8002b94 <main+0x2a4>)
 80029ee:	f001 fd35 	bl	800445c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GC9A01_CS_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin|GC9A01_BL_Pin;
 80029f2:	f240 4307 	movw	r3, #1031	@ 0x407
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f6:	a907      	add	r1, sp, #28
 80029f8:	4865      	ldr	r0, [pc, #404]	@ (8002b90 <main+0x2a0>)
  GPIO_InitStruct.Pin = GC9A01_CS_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin|GC9A01_BL_Pin;
 80029fa:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fe:	e9cd 7408 	strd	r7, r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a02:	f001 fbe3 	bl	80041cc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a06:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0a:	4862      	ldr	r0, [pc, #392]	@ (8002b94 <main+0x2a4>)
 8002a0c:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a0e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a10:	9709      	str	r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin = PLUS_BTN_Pin|SET_BTN_Pin|MINUS_BTN_Pin;
 8002a12:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a14:	f001 fbda 	bl	80041cc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002a18:	4622      	mov	r2, r4
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	2006      	movs	r0, #6
 8002a1e:	f001 f9b7 	bl	8003d90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a22:	2006      	movs	r0, #6
 8002a24:	f001 f9f0 	bl	8003e08 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002a28:	4622      	mov	r2, r4
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	f001 f9af 	bl	8003d90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002a32:	4630      	mov	r0, r6
 8002a34:	f001 f9e8 	bl	8003e08 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002a38:	4622      	mov	r2, r4
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	2008      	movs	r0, #8
 8002a3e:	f001 f9a7 	bl	8003d90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002a42:	2008      	movs	r0, #8
 8002a44:	f001 f9e0 	bl	8003e08 <HAL_NVIC_EnableIRQ>
  DMA2D_Handle.Instance = DMA2D;
 8002a48:	4b53      	ldr	r3, [pc, #332]	@ (8002b98 <main+0x2a8>)
  if (HAL_DMA2D_Init(&DMA2D_Handle) != HAL_OK)
 8002a4a:	4628      	mov	r0, r5
  DMA2D_Handle.Init.OutputOffset = 0;
 8002a4c:	60ec      	str	r4, [r5, #12]
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8002a4e:	65ec      	str	r4, [r5, #92]	@ 0x5c
  DMA2D_Handle.Instance = DMA2D;
 8002a50:	602b      	str	r3, [r5, #0]
  DMA2D_Handle.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8002a52:	e9c5 4401 	strd	r4, r4, [r5, #4]
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8002a56:	e9c5 4411 	strd	r4, r4, [r5, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0;
 8002a5a:	e9c5 4413 	strd	r4, r4, [r5, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8002a5e:	e9c5 4415 	strd	r4, r4, [r5, #84]	@ 0x54
  if (HAL_DMA2D_Init(&DMA2D_Handle) != HAL_OK)
 8002a62:	f001 fa15 	bl	8003e90 <HAL_DMA2D_Init>
 8002a66:	b108      	cbz	r0, 8002a6c <main+0x17c>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a68:	b672      	cpsid	i
  while (1)
 8002a6a:	e7fe      	b.n	8002a6a <main+0x17a>
  if (HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1) != HAL_OK)
 8002a6c:	4639      	mov	r1, r7
 8002a6e:	4628      	mov	r0, r5
 8002a70:	f001 fb42 	bl	80040f8 <HAL_DMA2D_ConfigLayer>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d131      	bne.n	8002ade <main+0x1ee>
  hsd1.Instance = SDMMC1;
 8002a7a:	4a48      	ldr	r2, [pc, #288]	@ (8002b9c <main+0x2ac>)
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a7c:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
  hsd1.Instance = SDMMC1;
 8002a80:	4947      	ldr	r1, [pc, #284]	@ (8002ba0 <main+0x2b0>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002a82:	6090      	str	r0, [r2, #8]
  hsd1.Init.ClockDiv = 0;
 8002a84:	6150      	str	r0, [r2, #20]
  hsd1.Instance = SDMMC1;
 8002a86:	e9c2 1000 	strd	r1, r0, [r2]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002a8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  hspi1.Instance = SPI1;
 8002a8e:	4845      	ldr	r0, [pc, #276]	@ (8002ba4 <main+0x2b4>)
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002a90:	60d1      	str	r1, [r2, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8002a92:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
  hspi1.Init.CRCPolynomial = 0x0;
 8002a96:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8002a98:	6111      	str	r1, [r2, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a9a:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
  hspi1.Instance = SPI1;
 8002a9e:	4a42      	ldr	r2, [pc, #264]	@ (8002ba8 <main+0x2b8>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002aa0:	60c6      	str	r6, [r0, #12]
  hspi1.Instance = SPI1;
 8002aa2:	6002      	str	r2, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002aa4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002aa8:	6181      	str	r1, [r0, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002aaa:	6042      	str	r2, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002aac:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ab0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ab4:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab8:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002abc:	e9c0 530d 	strd	r5, r3, [r0, #52]	@ 0x34
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ac0:	e9c0 330f 	strd	r3, r3, [r0, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002ac4:	e9c0 3311 	strd	r3, r3, [r0, #68]	@ 0x44
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002ac8:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002acc:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002ad0:	6082      	str	r2, [r0, #8]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ad2:	f006 fbb7 	bl	8009244 <HAL_SPI_Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	b118      	cbz	r0, 8002ae2 <main+0x1f2>
 8002ada:	b672      	cpsid	i
  while (1)
 8002adc:	e7fe      	b.n	8002adc <main+0x1ec>
 8002ade:	b672      	cpsid	i
 8002ae0:	e7fe      	b.n	8002ae0 <main+0x1f0>
  hrtc.Instance = RTC;
 8002ae2:	4c32      	ldr	r4, [pc, #200]	@ (8002bac <main+0x2bc>)
 8002ae4:	4a32      	ldr	r2, [pc, #200]	@ (8002bb0 <main+0x2c0>)
  RTC_TimeTypeDef sTime = {0};
 8002ae6:	900b      	str	r0, [sp, #44]	@ 0x2c
  hrtc.Instance = RTC;
 8002ae8:	6022      	str	r2, [r4, #0]
  hrtc.Init.AsynchPrediv = 127;
 8002aea:	227f      	movs	r2, #127	@ 0x7f
  RTC_DateTypeDef sDate = {0};
 8002aec:	9001      	str	r0, [sp, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002aee:	60a2      	str	r2, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
 8002af0:	22ff      	movs	r2, #255	@ 0xff
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002af2:	6060      	str	r0, [r4, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002af4:	6120      	str	r0, [r4, #16]
  hrtc.Init.SynchPrediv = 255;
 8002af6:	60e2      	str	r2, [r4, #12]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002af8:	6163      	str	r3, [r4, #20]
  RTC_TimeTypeDef sTime = {0};
 8002afa:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8002afe:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b02:	e9c4 0506 	strd	r0, r5, [r4, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b06:	4620      	mov	r0, r4
 8002b08:	f005 fb3c 	bl	8008184 <HAL_RTC_Init>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	b108      	cbz	r0, 8002b14 <main+0x224>
 8002b10:	b672      	cpsid	i
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <main+0x222>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002b14:	a907      	add	r1, sp, #28
 8002b16:	4620      	mov	r0, r4
  sTime.Hours = 0;
 8002b18:	f8ad 201c 	strh.w	r2, [sp, #28]
  sTime.Seconds = 0;
 8002b1c:	f88d 201e 	strb.w	r2, [sp, #30]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b20:	e9cd 220a 	strd	r2, r2, [sp, #40]	@ 0x28
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002b24:	f005 fba2 	bl	800826c <HAL_RTC_SetTime>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	b108      	cbz	r0, 8002b30 <main+0x240>
 8002b2c:	b672      	cpsid	i
  while (1)
 8002b2e:	e7fe      	b.n	8002b2e <main+0x23e>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002b30:	4b20      	ldr	r3, [pc, #128]	@ (8002bb4 <main+0x2c4>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002b32:	a901      	add	r1, sp, #4
 8002b34:	4620      	mov	r0, r4
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002b36:	9301      	str	r3, [sp, #4]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002b38:	f005 fc3a 	bl	80083b0 <HAL_RTC_SetDate>
 8002b3c:	b108      	cbz	r0, 8002b42 <main+0x252>
 8002b3e:	b672      	cpsid	i
  while (1)
 8002b40:	e7fe      	b.n	8002b40 <main+0x250>
  HAL_Delay(500);
 8002b42:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b46:	f001 f8ef 	bl	8003d28 <HAL_Delay>
  JPEG_Handle.Instance = JPEG;
 8002b4a:	481b      	ldr	r0, [pc, #108]	@ (8002bb8 <main+0x2c8>)
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bbc <main+0x2cc>)
 8002b4e:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&JPEG_Handle) != HAL_OK)
 8002b50:	f001 ff9a 	bl	8004a88 <HAL_JPEG_Init>
 8002b54:	b108      	cbz	r0, 8002b5a <main+0x26a>
 8002b56:	b672      	cpsid	i
  while (1)
 8002b58:	e7fe      	b.n	8002b58 <main+0x268>
  HAL_Delay(500);
 8002b5a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b5e:	f001 f8e3 	bl	8003d28 <HAL_Delay>
  GC9A01_init();
 8002b62:	f7fd fe71 	bl	8000848 <GC9A01_init>
  HAL_Delay(500);
 8002b66:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b6a:	f001 f8dd 	bl	8003d28 <HAL_Delay>
  smart_watch_init();
 8002b6e:	f000 fa3d 	bl	8002fec <smart_watch_init>
  HAL_Delay(500);
 8002b72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b76:	f001 f8d7 	bl	8003d28 <HAL_Delay>
	  smart_watch_process();
 8002b7a:	f000 fb09 	bl	8003190 <smart_watch_process>
  while (1)
 8002b7e:	e7fe      	b.n	8002b7e <main+0x28e>
 8002b80:	e000ed00 	.word	0xe000ed00
 8002b84:	58024400 	.word	0x58024400
 8002b88:	58020000 	.word	0x58020000
 8002b8c:	240000e0 	.word	0x240000e0
 8002b90:	58020400 	.word	0x58020400
 8002b94:	58020800 	.word	0x58020800
 8002b98:	52001000 	.word	0x52001000
 8002b9c:	24000228 	.word	0x24000228
 8002ba0:	52007000 	.word	0x52007000
 8002ba4:	240001a0 	.word	0x240001a0
 8002ba8:	40013000 	.word	0x40013000
 8002bac:	240000a4 	.word	0x240000a4
 8002bb0:	58004000 	.word	0x58004000
 8002bb4:	00010101 	.word	0x00010101
 8002bb8:	24000148 	.word	0x24000148
 8002bbc:	52003000 	.word	0x52003000

08002bc0 <Error_Handler>:
 8002bc0:	b672      	cpsid	i
  while (1)
 8002bc2:	e7fe      	b.n	8002bc2 <Error_Handler+0x2>

08002bc4 <file_handler>:
	enable_btn_int();

}

static void file_handler(uint8_t openFile)
{
 8002bc4:	b530      	push	{r4, r5, lr}
   // Each file takes 1m

   static uint8_t  new_file_flag = 1;


   if(new_file_flag || openFile)
 8002bc6:	4c27      	ldr	r4, [pc, #156]	@ (8002c64 <file_handler+0xa0>)
{
 8002bc8:	b085      	sub	sp, #20
   if(new_file_flag || openFile)
 8002bca:	7823      	ldrb	r3, [r4, #0]
 8002bcc:	b9cb      	cbnz	r3, 8002c02 <file_handler+0x3e>
 8002bce:	b340      	cbz	r0, 8002c22 <file_handler+0x5e>
   {

  	 if(openFile)
  		 f_close(&MJPEG_File);
 8002bd0:	4825      	ldr	r0, [pc, #148]	@ (8002c68 <file_handler+0xa4>)
 8002bd2:	f009 fc89 	bl	800c4e8 <f_close>

  	 new_file_flag = 0;
 8002bd6:	2100      	movs	r1, #0

  	 char file_idx_str[4];
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8002bd8:	4d24      	ldr	r5, [pc, #144]	@ (8002c6c <file_handler+0xa8>)
 8002bda:	4a25      	ldr	r2, [pc, #148]	@ (8002c70 <file_handler+0xac>)
 8002bdc:	a803      	add	r0, sp, #12
 8002bde:	8aab      	ldrh	r3, [r5, #20]
  	 new_file_flag = 0;
 8002be0:	7021      	strb	r1, [r4, #0]
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8002be2:	2104      	movs	r1, #4
 8002be4:	f009 fee0 	bl	800c9a8 <sniprintf>
  	 snprintf(name, sizeof(name), "a%s.avi", file_idx_str);
 8002be8:	4a22      	ldr	r2, [pc, #136]	@ (8002c74 <file_handler+0xb0>)
 8002bea:	210e      	movs	r1, #14
 8002bec:	ab03      	add	r3, sp, #12
 8002bee:	4822      	ldr	r0, [pc, #136]	@ (8002c78 <file_handler+0xb4>)
 8002bf0:	f009 feda 	bl	800c9a8 <sniprintf>

  	 // Open the MJPEG avi file with read access
  	 if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	4920      	ldr	r1, [pc, #128]	@ (8002c78 <file_handler+0xb4>)
 8002bf8:	481b      	ldr	r0, [pc, #108]	@ (8002c68 <file_handler+0xa4>)
 8002bfa:	f009 f9c5 	bl	800bf88 <f_open>
 8002bfe:	b118      	cbz	r0, 8002c08 <file_handler+0x44>

  	 }
  	 else
  	 {

  		 while(1);
 8002c00:	e7fe      	b.n	8002c00 <file_handler+0x3c>
  	 if(openFile)
 8002c02:	2800      	cmp	r0, #0
 8002c04:	d0e7      	beq.n	8002bd6 <file_handler+0x12>
 8002c06:	e7e3      	b.n	8002bd0 <file_handler+0xc>
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8002c08:	491c      	ldr	r1, [pc, #112]	@ (8002c7c <file_handler+0xb8>)
  		 video.isfirstFrame = 1;
 8002c0a:	2201      	movs	r2, #1
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8002c0c:	9001      	str	r0, [sp, #4]
 8002c0e:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8002c12:	9100      	str	r1, [sp, #0]
 8002c14:	481a      	ldr	r0, [pc, #104]	@ (8002c80 <file_handler+0xbc>)
  		 video.isfirstFrame = 1;
 8002c16:	75aa      	strb	r2, [r5, #22]
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8002c18:	4913      	ldr	r1, [pc, #76]	@ (8002c68 <file_handler+0xa4>)
 8002c1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002c84 <file_handler+0xc0>)
 8002c1c:	f7fd fbb8 	bl	8000390 <AVI_ParserInit>
 8002c20:	b930      	cbnz	r0, 8002c30 <file_handler+0x6c>
  	 }

   }

   // Check for the end of the video
   if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 8002c22:	4b17      	ldr	r3, [pc, #92]	@ (8002c80 <file_handler+0xbc>)
 8002c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d202      	bcs.n	8002c32 <file_handler+0x6e>

		 new_file_flag = 1;

   }

}
 8002c2c:	b005      	add	sp, #20
 8002c2e:	bd30      	pop	{r4, r5, pc}
  			 while(1);
 8002c30:	e7fe      	b.n	8002c30 <file_handler+0x6c>
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8002c32:	4d0e      	ldr	r5, [pc, #56]	@ (8002c6c <file_handler+0xa8>)
 8002c34:	4914      	ldr	r1, [pc, #80]	@ (8002c88 <file_handler+0xc4>)
  	 video.file_idx++;
 8002c36:	8aab      	ldrh	r3, [r5, #20]
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8002c38:	4814      	ldr	r0, [pc, #80]	@ (8002c8c <file_handler+0xc8>)
  	 video.file_idx++;
 8002c3a:	3301      	adds	r3, #1
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8002c3c:	f3c3 120b 	ubfx	r2, r3, #4, #12
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	fba1 1202 	umull	r1, r2, r1, r2
 8002c46:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8002c4a:	fb01 3312 	mls	r3, r1, r2, r3
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8002c4e:	2132      	movs	r1, #50	@ 0x32
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8002c50:	82ab      	strh	r3, [r5, #20]
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8002c52:	f001 f9b9 	bl	8003fc8 <HAL_DMA2D_PollForTransfer>
		 f_close(&MJPEG_File);
 8002c56:	4804      	ldr	r0, [pc, #16]	@ (8002c68 <file_handler+0xa4>)
 8002c58:	f009 fc46 	bl	800c4e8 <f_close>
		 new_file_flag = 1;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	7023      	strb	r3, [r4, #0]
}
 8002c60:	b005      	add	sp, #20
 8002c62:	bd30      	pop	{r4, r5, pc}
 8002c64:	24000000 	.word	0x24000000
 8002c68:	240bbb34 	.word	0x240bbb34
 8002c6c:	240af2a8 	.word	0x240af2a8
 8002c70:	0800d348 	.word	0x0800d348
 8002c74:	0800d350 	.word	0x0800d350
 8002c78:	240bbf94 	.word	0x240bbf94
 8002c7c:	240af2ec 	.word	0x240af2ec
 8002c80:	240bbaec 	.word	0x240bbaec
 8002c84:	240af2ec 	.word	0x240af2ec
 8002c88:	05b05b06 	.word	0x05b05b06
 8002c8c:	240000e0 	.word	0x240000e0

08002c90 <DMA2D_Init.constprop.0>:
	//video.video_mode = NORMAL_MODE;
	video.set = SET_IDLE;

}

static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
 8002c90:	b570      	push	{r4, r5, r6, lr}
 8002c92:	460e      	mov	r6, r1
 8002c94:	4605      	mov	r5, r0
{

	uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;


	HAL_DMA2D_MspInit(&DMA2D_Handle);
 8002c96:	4822      	ldr	r0, [pc, #136]	@ (8002d20 <DMA2D_Init.constprop.0+0x90>)
 8002c98:	f000 fd5a 	bl	8003750 <HAL_DMA2D_MspInit>

	if(ChromaSampling == JPEG_420_SUBSAMPLING)
 8002c9c:	2e01      	cmp	r6, #1
 8002c9e:	d02b      	beq.n	8002cf8 <DMA2D_Init.constprop.0+0x68>
			inputLineOffset = 16 - inputLineOffset;

		}

	}
	else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 8002ca0:	b326      	cbz	r6, 8002cec <DMA2D_Init.constprop.0+0x5c>
			inputLineOffset = 8 - inputLineOffset;

		}

	}
	else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 8002ca2:	2e02      	cmp	r6, #2
 8002ca4:	d033      	beq.n	8002d0e <DMA2D_Init.constprop.0+0x7e>
	uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2601      	movs	r6, #1
		}

	}

  	// Configure the DMA2D Mode, Color Mode and output offset
  	DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 8002caa:	4c1d      	ldr	r4, [pc, #116]	@ (8002d20 <DMA2D_Init.constprop.0+0x90>)
 8002cac:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  	DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
  	DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
  	DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  // No Output Alpha Inversion
 8002cb0:	2300      	movs	r3, #0
  	DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 8002cb2:	f1c5 05f0 	rsb	r5, r5, #240	@ 0xf0
  	// Foreground Configuration
  	DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
  	DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
  	DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
  	DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
  	DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 8002cb6:	6462      	str	r2, [r4, #68]	@ 0x44
  	DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion

  	DMA2D_Handle.Instance = DMA2D;

  	// DMA2D Initialization
  	HAL_DMA2D_Init(&DMA2D_Handle);
 8002cb8:	4620      	mov	r0, r4
  	DMA2D_Handle.Instance = DMA2D;
 8002cba:	4a1a      	ldr	r2, [pc, #104]	@ (8002d24 <DMA2D_Init.constprop.0+0x94>)
  	DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 8002cbc:	65e6      	str	r6, [r4, #92]	@ 0x5c
  	DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 8002cbe:	2601      	movs	r6, #1
  	DMA2D_Handle.XferCpltCallback  = NULL;
 8002cc0:	6223      	str	r3, [r4, #32]
  	DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 8002cc2:	e9c4 2100 	strd	r2, r1, [r4]
  	DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 8002cc6:	21ff      	movs	r1, #255	@ 0xff
  	DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 8002cc8:	220b      	movs	r2, #11
  	DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 8002cca:	e9c4 6113 	strd	r6, r1, [r4, #76]	@ 0x4c
  	DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 8002cce:	e9c4 6502 	strd	r6, r5, [r4, #8]
  	DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     // No Output Red & Blue swap
 8002cd2:	e9c4 3304 	strd	r3, r3, [r4, #16]
  	DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 8002cd6:	64a2      	str	r2, [r4, #72]	@ 0x48
  	DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion
 8002cd8:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
  	HAL_DMA2D_Init(&DMA2D_Handle);
 8002cdc:	f001 f8d8 	bl	8003e90 <HAL_DMA2D_Init>
  	HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 8002ce0:	4631      	mov	r1, r6
 8002ce2:	4620      	mov	r0, r4

}
 8002ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  	HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 8002ce8:	f001 ba06 	b.w	80040f8 <HAL_DMA2D_ConfigLayer>
		if(inputLineOffset != 0)
 8002cec:	f015 0207 	ands.w	r2, r5, #7
 8002cf0:	d00b      	beq.n	8002d0a <DMA2D_Init.constprop.0+0x7a>
			inputLineOffset = 8 - inputLineOffset;
 8002cf2:	f1c2 0208 	rsb	r2, r2, #8
 8002cf6:	e7d8      	b.n	8002caa <DMA2D_Init.constprop.0+0x1a>
		if(inputLineOffset != 0)
 8002cf8:	f015 020f 	ands.w	r2, r5, #15
 8002cfc:	d003      	beq.n	8002d06 <DMA2D_Init.constprop.0+0x76>
			inputLineOffset = 16 - inputLineOffset;
 8002cfe:	f1c2 0210 	rsb	r2, r2, #16
		cssMode = DMA2D_CSS_420;
 8002d02:	2602      	movs	r6, #2
 8002d04:	e7d1      	b.n	8002caa <DMA2D_Init.constprop.0+0x1a>
 8002d06:	2602      	movs	r6, #2
 8002d08:	e7cf      	b.n	8002caa <DMA2D_Init.constprop.0+0x1a>
 8002d0a:	4632      	mov	r2, r6
 8002d0c:	e7cd      	b.n	8002caa <DMA2D_Init.constprop.0+0x1a>
		if(inputLineOffset != 0)
 8002d0e:	f015 020f 	ands.w	r2, r5, #15
 8002d12:	d003      	beq.n	8002d1c <DMA2D_Init.constprop.0+0x8c>
			inputLineOffset = 16 - inputLineOffset;
 8002d14:	f1c2 0210 	rsb	r2, r2, #16
		cssMode = DMA2D_CSS_422;
 8002d18:	2601      	movs	r6, #1
 8002d1a:	e7c6      	b.n	8002caa <DMA2D_Init.constprop.0+0x1a>
	uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 8002d1c:	2601      	movs	r6, #1
 8002d1e:	e7c4      	b.n	8002caa <DMA2D_Init.constprop.0+0x1a>
 8002d20:	240000e0 	.word	0x240000e0
 8002d24:	52001000 	.word	0x52001000

08002d28 <show_frame.constprop.0>:
static void show_frame(uint32_t frame_num)
 8002d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d2c:	2502      	movs	r5, #2
 8002d2e:	b087      	sub	sp, #28
 8002d30:	4e71      	ldr	r6, [pc, #452]	@ (8002ef8 <show_frame.constprop.0+0x1d0>)
 8002d32:	4c72      	ldr	r4, [pc, #456]	@ (8002efc <show_frame.constprop.0+0x1d4>)
		video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002d34:	4f72      	ldr	r7, [pc, #456]	@ (8002f00 <show_frame.constprop.0+0x1d8>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	4639      	mov	r1, r7
 8002d3a:	4630      	mov	r0, r6
 8002d3c:	f7fd fc6a 	bl	8000614 <AVI_GetFrame>
 8002d40:	b2c0      	uxtb	r0, r0
		if(video.FrameType == AVI_VIDEO_FRAME)
 8002d42:	2801      	cmp	r0, #1
		video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002d44:	75e0      	strb	r0, [r4, #23]
		if(video.FrameType == AVI_VIDEO_FRAME)
 8002d46:	d006      	beq.n	8002d56 <show_frame.constprop.0+0x2e>
	for(int i = 0 ; i < 2 ; i++)
 8002d48:	2d01      	cmp	r5, #1
 8002d4a:	d001      	beq.n	8002d50 <show_frame.constprop.0+0x28>
 8002d4c:	2501      	movs	r5, #1
 8002d4e:	e7f2      	b.n	8002d36 <show_frame.constprop.0+0xe>
}
 8002d50:	b007      	add	sp, #28
 8002d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			AVI_Handel.CurrentImage++;
 8002d56:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
			JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8002d58:	6b32      	ldr	r2, [r6, #48]	@ 0x30
			AVI_Handel.CurrentImage++;
 8002d5a:	3301      	adds	r3, #1
			JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8002d5c:	4969      	ldr	r1, [pc, #420]	@ (8002f04 <show_frame.constprop.0+0x1dc>)
 8002d5e:	486a      	ldr	r0, [pc, #424]	@ (8002f08 <show_frame.constprop.0+0x1e0>)
			AVI_Handel.CurrentImage++;
 8002d60:	62f3      	str	r3, [r6, #44]	@ 0x2c
			video.frameCount++;
 8002d62:	6a23      	ldr	r3, [r4, #32]
 8002d64:	3301      	adds	r3, #1
 8002d66:	6223      	str	r3, [r4, #32]
			JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8002d68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002d6a:	f7ff fd05 	bl	8002778 <JPEG_Decode_DMA>
			while(Jpeg_HWDecodingEnd == 0);
 8002d6e:	4a67      	ldr	r2, [pc, #412]	@ (8002f0c <show_frame.constprop.0+0x1e4>)
 8002d70:	6813      	ldr	r3, [r2, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0fc      	beq.n	8002d70 <show_frame.constprop.0+0x48>
			if(video.isfirstFrame == 1)
 8002d76:	7da3      	ldrb	r3, [r4, #22]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	f000 808f 	beq.w	8002e9c <show_frame.constprop.0+0x174>
			DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8002d7e:	4a64      	ldr	r2, [pc, #400]	@ (8002f10 <show_frame.constprop.0+0x1e8>)
 8002d80:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 8002d84:	fa1f f983 	uxth.w	r9, r3
 8002d88:	fa1f fa82 	uxth.w	sl, r2
	uint32_t xPos, yPos, destination;


	// calculate the destination transfer address
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 8002d8c:	f1c2 02f0 	rsb	r2, r2, #240	@ 0xf0
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 8002d90:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
			DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8002d94:	f8df 8188 	ldr.w	r8, [pc, #392]	@ 8002f20 <show_frame.constprop.0+0x1f8>

	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;

	// wait for the DMA2D transfer to ends
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8002d98:	f04f 31ff 	mov.w	r1, #4294967295
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 8002d9c:	0852      	lsrs	r2, r2, #1
			DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8002d9e:	f8d4 b034 	ldr.w	fp, [r4, #52]	@ 0x34
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 8002da2:	085b      	lsrs	r3, r3, #1
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8002da4:	485b      	ldr	r0, [pc, #364]	@ (8002f14 <show_frame.constprop.0+0x1ec>)
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 8002da6:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8002daa:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002dae:	f8d8 2000 	ldr.w	r2, [r8]
 8002db2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8002db6:	9203      	str	r2, [sp, #12]
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8002db8:	f001 f906 	bl	8003fc8 <HAL_DMA2D_PollForTransfer>
	// copy the new decoded frame to the LCD Frame buffer
	HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 8002dbc:	464b      	mov	r3, r9
 8002dbe:	f8cd a000 	str.w	sl, [sp]
 8002dc2:	9a03      	ldr	r2, [sp, #12]
 8002dc4:	4659      	mov	r1, fp
 8002dc6:	4853      	ldr	r0, [pc, #332]	@ (8002f14 <show_frame.constprop.0+0x1ec>)
 8002dc8:	f001 f8a2 	bl	8003f10 <HAL_DMA2D_Start>
			depth24To16(&pOut, ( video.width * video.height ), 3);
 8002dcc:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8002dd0:	8b63      	ldrh	r3, [r4, #26]
			pOut.u8Arr = (uint8_t *)outputData;
 8002dd2:	f8d8 9000 	ldr.w	r9, [r8]
			depth24To16(&pOut, ( video.width * video.height ), 3);
 8002dd6:	fb1a f003 	smulbb	r0, sl, r3
 8002dda:	b280      	uxth	r0, r0
	for( ; i < length ; i++)
 8002ddc:	b1e0      	cbz	r0, 8002e18 <show_frame.constprop.0+0xf0>
 8002dde:	eb09 0040 	add.w	r0, r9, r0, lsl #1
 8002de2:	4649      	mov	r1, r9
 8002de4:	464a      	mov	r2, r9
		pxArr->u16Arr[i] = color565(r, g, b);
 8002de6:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 8002f24 <show_frame.constprop.0+0x1fc>
 8002dea:	f892 e001 	ldrb.w	lr, [r2, #1]
 8002dee:	7893      	ldrb	r3, [r2, #2]
 8002df0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8002df4:	ea0c 2303 	and.w	r3, ip, r3, lsl #8
 8002df8:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8002dfc:	ea43 030e 	orr.w	r3, r3, lr
 8002e00:	f812 eb03 	ldrb.w	lr, [r2], #3
 8002e04:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 8002e08:	ba5b      	rev16	r3, r3
 8002e0a:	f821 3b02 	strh.w	r3, [r1], #2
	for( ; i < length ; i++)
 8002e0e:	4281      	cmp	r1, r0
 8002e10:	d1eb      	bne.n	8002dea <show_frame.constprop.0+0xc2>
			lcd_draw(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr, swap);
 8002e12:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8002e16:	8b63      	ldrh	r3, [r4, #26]
 8002e18:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8002f28 <show_frame.constprop.0+0x200>
	   if(swap)
 8002e1c:	f89b 2000 	ldrb.w	r2, [fp]
 8002e20:	2a00      	cmp	r2, #0
 8002e22:	d138      	bne.n	8002e96 <show_frame.constprop.0+0x16e>
		   data += ( 240 * 240 ) ;
 8002e24:	f509 4961 	add.w	r9, r9, #57600	@ 0xe100
 8002e28:	2178      	movs	r1, #120	@ 0x78
 8002e2a:	22ef      	movs	r2, #239	@ 0xef
	       frame.start.Y = 0;
 8002e2c:	f8ad 1012 	strh.w	r1, [sp, #18]
	       frame.end.X = 239;
 8002e30:	21ef      	movs	r1, #239	@ 0xef
	       frame.end.Y = 119;
 8002e32:	f8ad 2016 	strh.w	r2, [sp, #22]
	       frame.start.X = 0;
 8002e36:	2200      	movs	r2, #0
 8002e38:	9303      	str	r3, [sp, #12]
	   GC9A01_set_frame(frame);
 8002e3a:	ab06      	add	r3, sp, #24
	       frame.start.X = 0;
 8002e3c:	f8ad 2010 	strh.w	r2, [sp, #16]
	       frame.end.X = 239;
 8002e40:	f8ad 1014 	strh.w	r1, [sp, #20]
	   GC9A01_set_frame(frame);
 8002e44:	e913 0003 	ldmdb	r3, {r0, r1}
 8002e48:	f7ff fba6 	bl	8002598 <GC9A01_set_frame>
	   GC9A01_write_command(MEM_WR);
 8002e4c:	202c      	movs	r0, #44	@ 0x2c
 8002e4e:	f7fd fcd1 	bl	80007f4 <GC9A01_write_command>
	   GC9A01_set_data_command(ON);
 8002e52:	2001      	movs	r0, #1
 8002e54:	f7fd fcb6 	bl	80007c4 <GC9A01_set_data_command>
	   GC9A01_set_chip_select(OFF);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f7fd fcbc 	bl	80007d8 <GC9A01_set_chip_select>
	   uint32_t total_bytes = wd * ht;		// 2 byte per pixel
 8002e60:	9b03      	ldr	r3, [sp, #12]
	   ret = GC9A01_spi_tx(data, total_bytes);
 8002e62:	4648      	mov	r0, r9
	   uint32_t total_bytes = wd * ht;		// 2 byte per pixel
 8002e64:	fb03 f10a 	mul.w	r1, r3, sl
	   ret = GC9A01_spi_tx(data, total_bytes);
 8002e68:	b289      	uxth	r1, r1
 8002e6a:	f7ff fc6f 	bl	800274c <GC9A01_spi_tx>
	   GC9A01_set_chip_select(ON);
 8002e6e:	2001      	movs	r0, #1
 8002e70:	f7fd fcb2 	bl	80007d8 <GC9A01_set_chip_select>
			swap = ( ( swap ) ? 0 : 1 );
 8002e74:	f89b 3000 	ldrb.w	r3, [fp]
			outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 8002e78:	f8d8 1000 	ldr.w	r1, [r8]
			swap = ( ( swap ) ? 0 : 1 );
 8002e7c:	fab3 f383 	clz	r3, r3
			outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 8002e80:	4a25      	ldr	r2, [pc, #148]	@ (8002f18 <show_frame.constprop.0+0x1f0>)
			swap = ( ( swap ) ? 0 : 1 );
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	f88b 3000 	strb.w	r3, [fp]
			outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 8002e88:	4b24      	ldr	r3, [pc, #144]	@ (8002f1c <show_frame.constprop.0+0x1f4>)
 8002e8a:	4291      	cmp	r1, r2
 8002e8c:	bf18      	it	ne
 8002e8e:	4613      	movne	r3, r2
 8002e90:	f8c8 3000 	str.w	r3, [r8]
 8002e94:	e758      	b.n	8002d48 <show_frame.constprop.0+0x20>
 8002e96:	2100      	movs	r1, #0
 8002e98:	2277      	movs	r2, #119	@ 0x77
 8002e9a:	e7c7      	b.n	8002e2c <show_frame.constprop.0+0x104>
				HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8002e9c:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 8002f10 <show_frame.constprop.0+0x1e8>
				video.isfirstFrame = 0;
 8002ea0:	f04f 0800 	mov.w	r8, #0
				HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8002ea4:	4818      	ldr	r0, [pc, #96]	@ (8002f08 <show_frame.constprop.0+0x1e0>)
 8002ea6:	4649      	mov	r1, r9
				video.isfirstFrame = 0;
 8002ea8:	f884 8016 	strb.w	r8, [r4, #22]
				HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8002eac:	f001 ff1e 	bl	8004cec <HAL_JPEG_GetInfo>
				DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 8002eb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8002eb4:	f8b9 000c 	ldrh.w	r0, [r9, #12]
 8002eb8:	f7ff feea 	bl	8002c90 <DMA2D_Init.constprop.0>
				video.width = JPEG_Info.ImageWidth;
 8002ebc:	46c4      	mov	ip, r8
 8002ebe:	4641      	mov	r1, r8
				video.height = JPEG_Info.ImageHeight;
 8002ec0:	e9d9 2302 	ldrd	r2, r3, [r9, #8]
				video.xPos = ( ( LCD_X_SIZE - video.width ) / 2 );					// Center the image in x
 8002ec4:	fa1f f983 	uxth.w	r9, r3
				video.width = JPEG_Info.ImageWidth;
 8002ec8:	f363 010f 	bfi	r1, r3, #0, #16
 8002ecc:	fa1f fa82 	uxth.w	sl, r2
				video.xPos = ( ( LCD_X_SIZE - video.width ) / 2 );					// Center the image in x
 8002ed0:	f1d9 00f0 	rsbs	r0, r9, #240	@ 0xf0
				video.width = JPEG_Info.ImageWidth;
 8002ed4:	f362 411f 	bfi	r1, r2, #16, #16
				video.xPos = ( ( LCD_X_SIZE - video.width ) / 2 );					// Center the image in x
 8002ed8:	bf48      	it	mi
 8002eda:	3001      	addmi	r0, #1
				video.width = JPEG_Info.ImageWidth;
 8002edc:	61a1      	str	r1, [r4, #24]
				video.xPos = ( ( LCD_X_SIZE - video.width ) / 2 );					// Center the image in x
 8002ede:	1040      	asrs	r0, r0, #1
				video.width = JPEG_Info.ImageWidth;
 8002ee0:	f360 0c0f 	bfi	ip, r0, #0, #16
				video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 8002ee4:	f1da 00f0 	rsbs	r0, sl, #240	@ 0xf0
 8002ee8:	bf48      	it	mi
 8002eea:	3001      	addmi	r0, #1
 8002eec:	1040      	asrs	r0, r0, #1
				video.width = JPEG_Info.ImageWidth;
 8002eee:	f360 4c1f 	bfi	ip, r0, #16, #16
 8002ef2:	f8c4 c01c 	str.w	ip, [r4, #28]
 8002ef6:	e749      	b.n	8002d8c <show_frame.constprop.0+0x64>
 8002ef8:	240bbaec 	.word	0x240bbaec
 8002efc:	240af2a8 	.word	0x240af2a8
 8002f00:	240bbb34 	.word	0x240bbb34
 8002f04:	240af2ec 	.word	0x240af2ec
 8002f08:	24000148 	.word	0x24000148
 8002f0c:	240000a0 	.word	0x240000a0
 8002f10:	240000cc 	.word	0x240000cc
 8002f14:	240000e0 	.word	0x240000e0
 8002f18:	240322a8 	.word	0x240322a8
 8002f1c:	240002a8 	.word	0x240002a8
 8002f20:	24000004 	.word	0x24000004
 8002f24:	fffff800 	.word	0xfffff800
 8002f28:	240002a4 	.word	0x240002a4

08002f2c <file_handler.constprop.0>:
static void file_handler(uint8_t openFile)
 8002f2c:	b530      	push	{r4, r5, lr}
   if(new_file_flag || openFile)
 8002f2e:	4c24      	ldr	r4, [pc, #144]	@ (8002fc0 <file_handler.constprop.0+0x94>)
static void file_handler(uint8_t openFile)
 8002f30:	b085      	sub	sp, #20
   if(new_file_flag || openFile)
 8002f32:	7823      	ldrb	r3, [r4, #0]
 8002f34:	b933      	cbnz	r3, 8002f44 <file_handler.constprop.0+0x18>
   if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 8002f36:	4b23      	ldr	r3, [pc, #140]	@ (8002fc4 <file_handler.constprop.0+0x98>)
 8002f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d226      	bcs.n	8002f8e <file_handler.constprop.0+0x62>
}
 8002f40:	b005      	add	sp, #20
 8002f42:	bd30      	pop	{r4, r5, pc}
  	 new_file_flag = 0;
 8002f44:	2100      	movs	r1, #0
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8002f46:	4d20      	ldr	r5, [pc, #128]	@ (8002fc8 <file_handler.constprop.0+0x9c>)
 8002f48:	4a20      	ldr	r2, [pc, #128]	@ (8002fcc <file_handler.constprop.0+0xa0>)
 8002f4a:	a803      	add	r0, sp, #12
 8002f4c:	8aab      	ldrh	r3, [r5, #20]
  	 new_file_flag = 0;
 8002f4e:	7021      	strb	r1, [r4, #0]
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8002f50:	2104      	movs	r1, #4
 8002f52:	f009 fd29 	bl	800c9a8 <sniprintf>
  	 snprintf(name, sizeof(name), "a%s.avi", file_idx_str);
 8002f56:	4a1e      	ldr	r2, [pc, #120]	@ (8002fd0 <file_handler.constprop.0+0xa4>)
 8002f58:	210e      	movs	r1, #14
 8002f5a:	ab03      	add	r3, sp, #12
 8002f5c:	481d      	ldr	r0, [pc, #116]	@ (8002fd4 <file_handler.constprop.0+0xa8>)
 8002f5e:	f009 fd23 	bl	800c9a8 <sniprintf>
  	 if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 8002f62:	2201      	movs	r2, #1
 8002f64:	491b      	ldr	r1, [pc, #108]	@ (8002fd4 <file_handler.constprop.0+0xa8>)
 8002f66:	481c      	ldr	r0, [pc, #112]	@ (8002fd8 <file_handler.constprop.0+0xac>)
 8002f68:	f009 f80e 	bl	800bf88 <f_open>
 8002f6c:	b100      	cbz	r0, 8002f70 <file_handler.constprop.0+0x44>
  		 while(1);
 8002f6e:	e7fe      	b.n	8002f6e <file_handler.constprop.0+0x42>
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8002f70:	491a      	ldr	r1, [pc, #104]	@ (8002fdc <file_handler.constprop.0+0xb0>)
  		 video.isfirstFrame = 1;
 8002f72:	2201      	movs	r2, #1
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8002f74:	9001      	str	r0, [sp, #4]
 8002f76:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8002f7a:	9100      	str	r1, [sp, #0]
 8002f7c:	4811      	ldr	r0, [pc, #68]	@ (8002fc4 <file_handler.constprop.0+0x98>)
  		 video.isfirstFrame = 1;
 8002f7e:	75aa      	strb	r2, [r5, #22]
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8002f80:	4915      	ldr	r1, [pc, #84]	@ (8002fd8 <file_handler.constprop.0+0xac>)
 8002f82:	4a17      	ldr	r2, [pc, #92]	@ (8002fe0 <file_handler.constprop.0+0xb4>)
 8002f84:	f7fd fa04 	bl	8000390 <AVI_ParserInit>
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	d0d4      	beq.n	8002f36 <file_handler.constprop.0+0xa>
  			 while(1);
 8002f8c:	e7fe      	b.n	8002f8c <file_handler.constprop.0+0x60>
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8002f8e:	4d0e      	ldr	r5, [pc, #56]	@ (8002fc8 <file_handler.constprop.0+0x9c>)
 8002f90:	4914      	ldr	r1, [pc, #80]	@ (8002fe4 <file_handler.constprop.0+0xb8>)
  	 video.file_idx++;
 8002f92:	8aab      	ldrh	r3, [r5, #20]
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8002f94:	4814      	ldr	r0, [pc, #80]	@ (8002fe8 <file_handler.constprop.0+0xbc>)
  	 video.file_idx++;
 8002f96:	3301      	adds	r3, #1
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8002f98:	f3c3 120b 	ubfx	r2, r3, #4, #12
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	fba1 1202 	umull	r1, r2, r1, r2
 8002fa2:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8002fa6:	fb01 3312 	mls	r3, r1, r2, r3
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8002faa:	2132      	movs	r1, #50	@ 0x32
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8002fac:	82ab      	strh	r3, [r5, #20]
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8002fae:	f001 f80b 	bl	8003fc8 <HAL_DMA2D_PollForTransfer>
		 f_close(&MJPEG_File);
 8002fb2:	4809      	ldr	r0, [pc, #36]	@ (8002fd8 <file_handler.constprop.0+0xac>)
 8002fb4:	f009 fa98 	bl	800c4e8 <f_close>
		 new_file_flag = 1;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	7023      	strb	r3, [r4, #0]
}
 8002fbc:	b005      	add	sp, #20
 8002fbe:	bd30      	pop	{r4, r5, pc}
 8002fc0:	24000000 	.word	0x24000000
 8002fc4:	240bbaec 	.word	0x240bbaec
 8002fc8:	240af2a8 	.word	0x240af2a8
 8002fcc:	0800d348 	.word	0x0800d348
 8002fd0:	0800d350 	.word	0x0800d350
 8002fd4:	240bbf94 	.word	0x240bbf94
 8002fd8:	240bbb34 	.word	0x240bbb34
 8002fdc:	240af2ec 	.word	0x240af2ec
 8002fe0:	240af2ec 	.word	0x240af2ec
 8002fe4:	05b05b06 	.word	0x05b05b06
 8002fe8:	240000e0 	.word	0x240000e0

08002fec <smart_watch_init>:
{
 8002fec:	b538      	push	{r3, r4, r5, lr}
	video.frame_time = 0.0;
 8002fee:	2100      	movs	r1, #0
	video.width = 0;
 8002ff0:	4c18      	ldr	r4, [pc, #96]	@ (8003054 <smart_watch_init+0x68>)
 8002ff2:	2500      	movs	r5, #0
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 8002ff4:	4a18      	ldr	r2, [pc, #96]	@ (8003058 <smart_watch_init+0x6c>)
	video.display_status = DISPLAY_ON;
 8002ff6:	2301      	movs	r3, #1
	video.frame_time = 0.0;
 8002ff8:	62a1      	str	r1, [r4, #40]	@ 0x28
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 8002ffa:	6362      	str	r2, [r4, #52]	@ 0x34
		output_data1[i] = 0x00;
 8002ffc:	4629      	mov	r1, r5
 8002ffe:	f44f 3248 	mov.w	r2, #204800	@ 0x32000
 8003002:	4816      	ldr	r0, [pc, #88]	@ (800305c <smart_watch_init+0x70>)
	video.display_status = DISPLAY_ON;
 8003004:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
	video.time.Hours = 0;
 8003008:	8025      	strh	r5, [r4, #0]
	video.time.Seconds = 0;
 800300a:	70a5      	strb	r5, [r4, #2]
	video.file_idx = 0;
 800300c:	82a5      	strh	r5, [r4, #20]
	video.FrameType = 0;
 800300e:	75e5      	strb	r5, [r4, #23]
	video.frameToSkip = 0;
 8003010:	6265      	str	r5, [r4, #36]	@ 0x24
	video.display_ts = video.time.Seconds;
 8003012:	63e5      	str	r5, [r4, #60]	@ 0x3c
	video.frameCount = 0;
 8003014:	6225      	str	r5, [r4, #32]
	video.width = 0;
 8003016:	e9c4 5506 	strd	r5, r5, [r4, #24]
	video.tick_offset = 0;
 800301a:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
		output_data1[i] = 0x00;
 800301e:	f009 fcf7 	bl	800ca10 <memset>
		output_data2[i] = 0xff;
 8003022:	21ff      	movs	r1, #255	@ 0xff
 8003024:	f44f 3248 	mov.w	r2, #204800	@ 0x32000
 8003028:	480d      	ldr	r0, [pc, #52]	@ (8003060 <smart_watch_init+0x74>)
 800302a:	f009 fcf1 	bl	800ca10 <memset>
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800302e:	490d      	ldr	r1, [pc, #52]	@ (8003064 <smart_watch_init+0x78>)
 8003030:	480d      	ldr	r0, [pc, #52]	@ (8003068 <smart_watch_init+0x7c>)
	video.video_mode = SETTING_MODE;
 8003032:	8725      	strh	r5, [r4, #56]	@ 0x38
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8003034:	f009 fc94 	bl	800c960 <FATFS_LinkDriver>
 8003038:	b100      	cbz	r0, 800303c <smart_watch_init+0x50>
		while(1);
 800303a:	e7fe      	b.n	800303a <smart_watch_init+0x4e>
}

static void SD_Initialize(void)
{

	BSP_SD_Init();
 800303c:	4604      	mov	r4, r0
 800303e:	f007 fd87 	bl	800ab50 <BSP_SD_Init>
	    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8003042:	4908      	ldr	r1, [pc, #32]	@ (8003064 <smart_watch_init+0x78>)
 8003044:	4622      	mov	r2, r4
 8003046:	4809      	ldr	r0, [pc, #36]	@ (800306c <smart_watch_init+0x80>)
 8003048:	f008 ff52 	bl	800bef0 <f_mount>
 800304c:	b100      	cbz	r0, 8003050 <smart_watch_init+0x64>
	    	while(1);
 800304e:	e7fe      	b.n	800304e <smart_watch_init+0x62>
}
 8003050:	bd38      	pop	{r3, r4, r5, pc}
 8003052:	bf00      	nop
 8003054:	240af2a8 	.word	0x240af2a8
 8003058:	240642a8 	.word	0x240642a8
 800305c:	240322a8 	.word	0x240322a8
 8003060:	240002a8 	.word	0x240002a8
 8003064:	240bc08c 	.word	0x240bc08c
 8003068:	0800d5c8 	.word	0x0800d5c8
 800306c:	240bbd64 	.word	0x240bbd64

08003070 <lcd_draw_opt2>:
{
 8003070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003074:	4a44      	ldr	r2, [pc, #272]	@ (8003188 <lcd_draw_opt2+0x118>)
	   for(int i = 0 ; i < LCD_SIDE_SIZE ; i++)
 8003076:	f04f 0a00 	mov.w	sl, #0
 800307a:	f8df b110 	ldr.w	fp, [pc, #272]	@ 800318c <lcd_draw_opt2+0x11c>
{
 800307e:	b083      	sub	sp, #12
 8003080:	4690      	mov	r8, r2
	   int ret = 0;
 8003082:	4655      	mov	r5, sl
 8003084:	465f      	mov	r7, fp
		   while(( CIRCLE_MASK(frame.start.X, frame.start.Y) ) || ( buff16o1[i*240+frame.start.X] == buff16o2[i*240+frame.start.X] ))
 8003086:	f243 7650 	movw	r6, #14160	@ 0x3750
	       frame.start.Y = i;
 800308a:	f1ca 0377 	rsb	r3, sl, #119	@ 0x77
 800308e:	f1aa 0177 	sub.w	r1, sl, #119	@ 0x77
 8003092:	fa1f fe8a 	uxth.w	lr, sl
		   while(( CIRCLE_MASK(frame.start.X, frame.start.Y) ) || ( buff16o1[i*240+frame.start.X] == buff16o2[i*240+frame.start.X] ))
 8003096:	2400      	movs	r4, #0
 8003098:	f1ba 0f76 	cmp.w	sl, #118	@ 0x76
 800309c:	bfc8      	it	gt
 800309e:	460b      	movgt	r3, r1
	       frame.end.Y = frame.start.Y;
 80030a0:	f8ad e006 	strh.w	lr, [sp, #6]
		   while(( CIRCLE_MASK(frame.start.X, frame.start.Y) ) || ( buff16o1[i*240+frame.start.X] == buff16o2[i*240+frame.start.X] ))
 80030a4:	fb03 f303 	mul.w	r3, r3, r3
 80030a8:	f1c4 0177 	rsb	r1, r4, #119	@ 0x77
 80030ac:	2c76      	cmp	r4, #118	@ 0x76
 80030ae:	fb01 3101 	mla	r1, r1, r1, r3
 80030b2:	d808      	bhi.n	80030c6 <lcd_draw_opt2+0x56>
 80030b4:	42b1      	cmp	r1, r6
 80030b6:	dd0e      	ble.n	80030d6 <lcd_draw_opt2+0x66>
			   if(frame.start.X > frame.end.X)
 80030b8:	3401      	adds	r4, #1
		   while(( CIRCLE_MASK(frame.start.X, frame.start.Y) ) || ( buff16o1[i*240+frame.start.X] == buff16o2[i*240+frame.start.X] ))
 80030ba:	f1c4 0177 	rsb	r1, r4, #119	@ 0x77
 80030be:	2c76      	cmp	r4, #118	@ 0x76
 80030c0:	fb01 3101 	mla	r1, r1, r1, r3
 80030c4:	d9f6      	bls.n	80030b4 <lcd_draw_opt2+0x44>
 80030c6:	f1a4 0177 	sub.w	r1, r4, #119	@ 0x77
 80030ca:	f243 7050 	movw	r0, #14160	@ 0x3750
 80030ce:	fb01 3101 	mla	r1, r1, r1, r3
 80030d2:	4281      	cmp	r1, r0
 80030d4:	dc05      	bgt.n	80030e2 <lcd_draw_opt2+0x72>
 80030d6:	f838 0014 	ldrh.w	r0, [r8, r4, lsl #1]
 80030da:	f837 1014 	ldrh.w	r1, [r7, r4, lsl #1]
 80030de:	4288      	cmp	r0, r1
 80030e0:	d10f      	bne.n	8003102 <lcd_draw_opt2+0x92>
			   if(frame.start.X > frame.end.X)
 80030e2:	3401      	adds	r4, #1
 80030e4:	2cf0      	cmp	r4, #240	@ 0xf0
 80030e6:	d1df      	bne.n	80030a8 <lcd_draw_opt2+0x38>
	   for(int i = 0 ; i < LCD_SIDE_SIZE ; i++)
 80030e8:	f10a 0a01 	add.w	sl, sl, #1
 80030ec:	f508 78f0 	add.w	r8, r8, #480	@ 0x1e0
 80030f0:	f507 77f0 	add.w	r7, r7, #480	@ 0x1e0
 80030f4:	f1ba 0ff0 	cmp.w	sl, #240	@ 0xf0
 80030f8:	d1c7      	bne.n	800308a <lcd_draw_opt2+0x1a>
}
 80030fa:	4628      	mov	r0, r5
 80030fc:	b003      	add	sp, #12
 80030fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003102:	ebca 190a 	rsb	r9, sl, sl, lsl #4
		   while(( CIRCLE_MASK(frame.start.X, frame.start.Y) ) || ( buff16o1[i*240+frame.start.X] == buff16o2[i*240+frame.start.X] ))
 8003106:	25ef      	movs	r5, #239	@ 0xef
 8003108:	ea4f 1909 	mov.w	r9, r9, lsl #4
		   if(out_the_circle_flag)
 800310c:	e001      	b.n	8003112 <lcd_draw_opt2+0xa2>
 800310e:	fa1f f58c 	uxth.w	r5, ip
		   while(CIRCLE_MASK(frame.end.X, frame.start.Y)|| ( buff16o1[i*240+frame.end.X] == buff16o2[i*240+frame.end.X] ))
 8003112:	2d76      	cmp	r5, #118	@ 0x76
 8003114:	f1c5 0177 	rsb	r1, r5, #119	@ 0x77
 8003118:	eb09 0005 	add.w	r0, r9, r5
 800311c:	f105 3cff 	add.w	ip, r5, #4294967295
 8003120:	bf88      	it	hi
 8003122:	f1a5 0177 	subhi.w	r1, r5, #119	@ 0x77
 8003126:	fb01 3101 	mla	r1, r1, r1, r3
 800312a:	42b1      	cmp	r1, r6
 800312c:	dcef      	bgt.n	800310e <lcd_draw_opt2+0x9e>
 800312e:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8003132:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
 8003136:	4281      	cmp	r1, r0
 8003138:	d0e9      	beq.n	800310e <lcd_draw_opt2+0x9e>
		   GC9A01_set_frame(frame);
 800313a:	ab02      	add	r3, sp, #8
 800313c:	f8ad e002 	strh.w	lr, [sp, #2]
 8003140:	f8ad 5004 	strh.w	r5, [sp, #4]
 8003144:	f8ad 4000 	strh.w	r4, [sp]
 8003148:	e913 0003 	ldmdb	r3, {r0, r1}
 800314c:	f7ff fa24 	bl	8002598 <GC9A01_set_frame>
		   GC9A01_write_command(MEM_WR);
 8003150:	202c      	movs	r0, #44	@ 0x2c
 8003152:	f7fd fb4f 	bl	80007f4 <GC9A01_write_command>
		   GC9A01_set_data_command(ON);
 8003156:	2001      	movs	r0, #1
 8003158:	f7fd fb34 	bl	80007c4 <GC9A01_set_data_command>
		   GC9A01_set_chip_select(OFF);
 800315c:	2000      	movs	r0, #0
 800315e:	f7fd fb3b 	bl	80007d8 <GC9A01_set_chip_select>
		   uint32_t total_bytes = ( ( frame.end.X - frame.start.X ) * 2 );
 8003162:	1b29      	subs	r1, r5, r4
		   ret = GC9A01_spi_tx(&data[start_idx], total_bytes);
 8003164:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
		   uint32_t start_idx = ( ( i * 240 + frame.start.X ) * 2 );
 8003166:	eb09 0004 	add.w	r0, r9, r4
		   uint32_t total_bytes = ( ( frame.end.X - frame.start.X ) * 2 );
 800316a:	0049      	lsls	r1, r1, #1
		   ret = GC9A01_spi_tx(&data[start_idx], total_bytes);
 800316c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003170:	b289      	uxth	r1, r1
 8003172:	f7ff faeb 	bl	800274c <GC9A01_spi_tx>
 8003176:	4605      	mov	r5, r0
		   GC9A01_set_chip_select(ON);
 8003178:	2001      	movs	r0, #1
 800317a:	f7fd fb2d 	bl	80007d8 <GC9A01_set_chip_select>
		   if(ret == 0)
 800317e:	2d00      	cmp	r5, #0
 8003180:	d0bb      	beq.n	80030fa <lcd_draw_opt2+0x8a>
 8003182:	4a01      	ldr	r2, [pc, #4]	@ (8003188 <lcd_draw_opt2+0x118>)
 8003184:	e7b0      	b.n	80030e8 <lcd_draw_opt2+0x78>
 8003186:	bf00      	nop
 8003188:	240322a8 	.word	0x240322a8
 800318c:	240002a8 	.word	0x240002a8

08003190 <smart_watch_process>:
{
 8003190:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003194:	4cc7      	ldr	r4, [pc, #796]	@ (80034b4 <smart_watch_process+0x324>)
 8003196:	b087      	sub	sp, #28
 8003198:	4ec7      	ldr	r6, [pc, #796]	@ (80034b8 <smart_watch_process+0x328>)
 800319a:	4dc8      	ldr	r5, [pc, #800]	@ (80034bc <smart_watch_process+0x32c>)
 800319c:	f8df 834c 	ldr.w	r8, [pc, #844]	@ 80034ec <smart_watch_process+0x35c>
 80031a0:	f8df a34c 	ldr.w	sl, [pc, #844]	@ 80034f0 <smart_watch_process+0x360>
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 80031a4:	4fc6      	ldr	r7, [pc, #792]	@ (80034c0 <smart_watch_process+0x330>)
	video.frame_time = 0.0;
 80031a6:	ed9f 8ac7 	vldr	s16, [pc, #796]	@ 80034c4 <smart_watch_process+0x334>
		file_handler(0);
 80031aa:	f7ff febf 	bl	8002f2c <file_handler.constprop.0>
	switch(video.video_mode)
 80031ae:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d07e      	beq.n	80032b4 <smart_watch_process+0x124>
	switch(video.set)
 80031b6:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	f000 808d 	beq.w	80032da <smart_watch_process+0x14a>
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	f000 80d5 	beq.w	8003370 <smart_watch_process+0x1e0>
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	f000 80b0 	beq.w	800332c <smart_watch_process+0x19c>
			while(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin));
 80031cc:	f8df 9324 	ldr.w	r9, [pc, #804]	@ 80034f4 <smart_watch_process+0x364>
 80031d0:	2102      	movs	r1, #2
 80031d2:	4648      	mov	r0, r9
 80031d4:	f001 f93c 	bl	8004450 <HAL_GPIO_ReadPin>
 80031d8:	2800      	cmp	r0, #0
 80031da:	d0f9      	beq.n	80031d0 <smart_watch_process+0x40>
			video.set = SET_HOURS;
 80031dc:	2301      	movs	r3, #1
 80031de:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
}

static void enable_btn_int(void)
{

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80031e2:	2006      	movs	r0, #6
 80031e4:	f000 fe10 	bl	8003e08 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80031e8:	2007      	movs	r0, #7
 80031ea:	f000 fe0d 	bl	8003e08 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80031ee:	2008      	movs	r0, #8
 80031f0:	f000 fe0a 	bl	8003e08 <HAL_NVIC_EnableIRQ>
	if(video.display_status == DISPLAY_ON)
 80031f4:	f894 9040 	ldrb.w	r9, [r4, #64]	@ 0x40
 80031f8:	f1b9 0f01 	cmp.w	r9, #1
 80031fc:	d1d5      	bne.n	80031aa <smart_watch_process+0x1a>
		if(video.time.Seconds >= DISPLAY_STANDBY_TIMER)
 80031fe:	78a3      	ldrb	r3, [r4, #2]
 8003200:	2b3a      	cmp	r3, #58	@ 0x3a
 8003202:	d9d2      	bls.n	80031aa <smart_watch_process+0x1a>
	video.width = 0;
 8003204:	f04f 0b00 	mov.w	fp, #0
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 8003208:	4baf      	ldr	r3, [pc, #700]	@ (80034c8 <smart_watch_process+0x338>)
			GC9A01_sleep_mode(ON);
 800320a:	4648      	mov	r0, r9
	video.frame_time = 0.0;
 800320c:	ed84 8a0a 	vstr	s16, [r4, #40]	@ 0x28
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 8003210:	6363      	str	r3, [r4, #52]	@ 0x34
	video.display_status = DISPLAY_ON;
 8003212:	f884 9040 	strb.w	r9, [r4, #64]	@ 0x40
	video.time.Hours = 0;
 8003216:	f8a4 b000 	strh.w	fp, [r4]
	video.time.Seconds = 0;
 800321a:	f884 b002 	strb.w	fp, [r4, #2]
	video.file_idx = 0;
 800321e:	f8a4 b014 	strh.w	fp, [r4, #20]
	video.FrameType = 0;
 8003222:	f884 b017 	strb.w	fp, [r4, #23]
	video.frameToSkip = 0;
 8003226:	f8c4 b024 	str.w	fp, [r4, #36]	@ 0x24
	video.display_ts = video.time.Seconds;
 800322a:	f8c4 b03c 	str.w	fp, [r4, #60]	@ 0x3c
	video.frameCount = 0;
 800322e:	f8c4 b020 	str.w	fp, [r4, #32]
	video.set = SET_IDLE;
 8003232:	f884 b039 	strb.w	fp, [r4, #57]	@ 0x39
	video.width = 0;
 8003236:	e9c4 bb06 	strd	fp, fp, [r4, #24]
	video.tick_offset = 0;
 800323a:	e9c4 bb0b 	strd	fp, fp, [r4, #44]	@ 0x2c
			GC9A01_sleep_mode(ON);
 800323e:	f7ff fa45 	bl	80026cc <GC9A01_sleep_mode>
			video.display_status = DISPLAY_OFF;
 8003242:	f884 b040 	strb.w	fp, [r4, #64]	@ 0x40
			HAL_SuspendTick();
 8003246:	f000 fd81 	bl	8003d4c <HAL_SuspendTick>
 800324a:	b672      	cpsid	i
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800324c:	4649      	mov	r1, r9
 800324e:	4648      	mov	r0, r9
 8003250:	f002 fd88 	bl	8005d64 <HAL_PWR_EnterSTOPMode>
  __ASM volatile ("cpsie i" : : : "memory");
 8003254:	b662      	cpsie	i
			HAL_ResumeTick();
 8003256:	f000 fd81 	bl	8003d5c <HAL_ResumeTick>
			SystemClock_Config();
 800325a:	f7ff faed 	bl	8002838 <SystemClock_Config>
			GC9A01_init();
 800325e:	f7fd faf3 	bl	8000848 <GC9A01_init>
			HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8003262:	465a      	mov	r2, fp
 8003264:	4993      	ldr	r1, [pc, #588]	@ (80034b4 <smart_watch_process+0x324>)
 8003266:	4899      	ldr	r0, [pc, #612]	@ (80034cc <smart_watch_process+0x33c>)
			video.display_status = DISPLAY_ON;
 8003268:	f884 9040 	strb.w	r9, [r4, #64]	@ 0x40
			RTC_DateTypeDef sDate = {0};
 800326c:	f8cd b014 	str.w	fp, [sp, #20]
			HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8003270:	f004 fed0 	bl	8008014 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003274:	a905      	add	r1, sp, #20
 8003276:	465a      	mov	r2, fp
 8003278:	4894      	ldr	r0, [pc, #592]	@ (80034cc <smart_watch_process+0x33c>)
 800327a:	f004 ff07 	bl	800808c <HAL_RTC_GetDate>
			video.file_idx = ( ( video.time.Hours % 12 ) * 60 );
 800327e:	7823      	ldrb	r3, [r4, #0]
 8003280:	4a93      	ldr	r2, [pc, #588]	@ (80034d0 <smart_watch_process+0x340>)
			file_handler(1);
 8003282:	4648      	mov	r0, r9
			video.file_idx = ( ( video.time.Hours % 12 ) * 60 );
 8003284:	fba2 1203 	umull	r1, r2, r2, r3
 8003288:	08d2      	lsrs	r2, r2, #3
 800328a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800328e:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
			video.file_idx += video.time.Minutes;
 8003292:	7862      	ldrb	r2, [r4, #1]
			video.file_idx = ( ( video.time.Hours % 12 ) * 60 );
 8003294:	b2db      	uxtb	r3, r3
 8003296:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
			video.file_idx += video.time.Minutes;
 800329a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800329e:	82a3      	strh	r3, [r4, #20]
			file_handler(1);
 80032a0:	f7ff fc90 	bl	8002bc4 <file_handler>
			video.display_ts = video.time.Seconds;
 80032a4:	78a3      	ldrb	r3, [r4, #2]
 80032a6:	63e3      	str	r3, [r4, #60]	@ 0x3c
		file_handler(0);
 80032a8:	f7ff fe40 	bl	8002f2c <file_handler.constprop.0>
	switch(video.video_mode)
 80032ac:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d180      	bne.n	80031b6 <smart_watch_process+0x26>
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 80032b4:	2200      	movs	r2, #0
 80032b6:	4639      	mov	r1, r7
 80032b8:	4628      	mov	r0, r5
 80032ba:	f7fd f9ab 	bl	8000614 <AVI_GetFrame>
	if(video.frameToSkip > 0)
 80032be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 80032c0:	b2c0      	uxtb	r0, r0
	if(video.frameToSkip > 0)
 80032c2:	2b00      	cmp	r3, #0
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 80032c4:	75e0      	strb	r0, [r4, #23]
	if(video.frameToSkip > 0)
 80032c6:	dd59      	ble.n	800337c <smart_watch_process+0x1ec>
		video.frameToSkip--;
 80032c8:	3b01      	subs	r3, #1
		AVI_Handel.CurrentImage++;
 80032ca:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
		video.frameToSkip--;
 80032cc:	6263      	str	r3, [r4, #36]	@ 0x24
		AVI_Handel.CurrentImage++;
 80032ce:	3201      	adds	r2, #1
		video.frameCount++;
 80032d0:	6a23      	ldr	r3, [r4, #32]
		AVI_Handel.CurrentImage++;
 80032d2:	62ea      	str	r2, [r5, #44]	@ 0x2c
		video.frameCount++;
 80032d4:	3301      	adds	r3, #1
 80032d6:	6223      	str	r3, [r4, #32]
 80032d8:	e78c      	b.n	80031f4 <smart_watch_process+0x64>
			show_frame(0);
 80032da:	f7ff fd25 	bl	8002d28 <show_frame.constprop.0>
			if(btn_status == BTN_PLUS)
 80032de:	f896 9000 	ldrb.w	r9, [r6]
 80032e2:	f1b9 0f01 	cmp.w	r9, #1
 80032e6:	f000 814c 	beq.w	8003582 <smart_watch_process+0x3f2>
			if(btn_status == BTN_MINUS)
 80032ea:	f1b9 0f03 	cmp.w	r9, #3
 80032ee:	f000 8105 	beq.w	80034fc <smart_watch_process+0x36c>
			if(btn_status == BTN_SET)
 80032f2:	f1b9 0f02 	cmp.w	r9, #2
 80032f6:	f47f af74 	bne.w	80031e2 <smart_watch_process+0x52>
				btn_status = BTN_NONE;
 80032fa:	2300      	movs	r3, #0
				HAL_Delay(300);
 80032fc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 8003300:	7033      	strb	r3, [r6, #0]
				HAL_Delay(300);
 8003302:	f000 fd11 	bl	8003d28 <HAL_Delay>
}

static void clear_btn_int(void)
{

	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8003306:	2006      	movs	r0, #6
 8003308:	f000 fdb4 	bl	8003e74 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 800330c:	2007      	movs	r0, #7
 800330e:	f000 fdb1 	bl	8003e74 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8003312:	2008      	movs	r0, #8
 8003314:	f000 fdae 	bl	8003e74 <HAL_NVIC_ClearPendingIRQ>
				video.file_idx += video.time.Minutes;
 8003318:	8aa2      	ldrh	r2, [r4, #20]
 800331a:	7863      	ldrb	r3, [r4, #1]
 800331c:	4413      	add	r3, r2
 800331e:	82a3      	strh	r3, [r4, #20]
				video.isfirstFrame = 1;
 8003320:	2301      	movs	r3, #1
 8003322:	75a3      	strb	r3, [r4, #22]
				video.set = SET_START;
 8003324:	2303      	movs	r3, #3
 8003326:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800332a:	e75a      	b.n	80031e2 <smart_watch_process+0x52>
			show_frame(0);
 800332c:	f7ff fcfc 	bl	8002d28 <show_frame.constprop.0>
			if(btn_status == BTN_PLUS)
 8003330:	f896 9000 	ldrb.w	r9, [r6]
 8003334:	f1b9 0f01 	cmp.w	r9, #1
 8003338:	f000 814c 	beq.w	80035d4 <smart_watch_process+0x444>
			if(btn_status == BTN_MINUS)
 800333c:	f1b9 0f03 	cmp.w	r9, #3
 8003340:	f000 80ff 	beq.w	8003542 <smart_watch_process+0x3b2>
			if(btn_status == BTN_SET)
 8003344:	f1b9 0f02 	cmp.w	r9, #2
 8003348:	f47f af4b 	bne.w	80031e2 <smart_watch_process+0x52>
				btn_status = BTN_NONE;
 800334c:	2300      	movs	r3, #0
				HAL_Delay(300);
 800334e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 8003352:	7033      	strb	r3, [r6, #0]
				HAL_Delay(300);
 8003354:	f000 fce8 	bl	8003d28 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8003358:	2006      	movs	r0, #6
 800335a:	f000 fd8b 	bl	8003e74 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 800335e:	2007      	movs	r0, #7
 8003360:	f000 fd88 	bl	8003e74 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8003364:	2008      	movs	r0, #8
 8003366:	f000 fd85 	bl	8003e74 <HAL_NVIC_ClearPendingIRQ>
				video.set = SET_MINUTES;
 800336a:	f884 9039 	strb.w	r9, [r4, #57]	@ 0x39
 800336e:	e738      	b.n	80031e2 <smart_watch_process+0x52>
			file_handler(1);							// Start froma the first frame
 8003370:	2001      	movs	r0, #1
 8003372:	f7ff fc27 	bl	8002bc4 <file_handler>
			video.video_mode = NORMAL_MODE;
 8003376:	2301      	movs	r3, #1
 8003378:	8723      	strh	r3, [r4, #56]	@ 0x38
			break;
 800337a:	e732      	b.n	80031e2 <smart_watch_process+0x52>
	else if(video.FrameType == AVI_VIDEO_FRAME)
 800337c:	2801      	cmp	r0, #1
 800337e:	f47f af39 	bne.w	80031f4 <smart_watch_process+0x64>
		AVI_Handel.CurrentImage++;
 8003382:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8003384:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
		AVI_Handel.CurrentImage++;
 8003386:	3301      	adds	r3, #1
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8003388:	4952      	ldr	r1, [pc, #328]	@ (80034d4 <smart_watch_process+0x344>)
 800338a:	4853      	ldr	r0, [pc, #332]	@ (80034d8 <smart_watch_process+0x348>)
		AVI_Handel.CurrentImage++;
 800338c:	62eb      	str	r3, [r5, #44]	@ 0x2c
		video.frameCount++;
 800338e:	6a23      	ldr	r3, [r4, #32]
 8003390:	3301      	adds	r3, #1
 8003392:	6223      	str	r3, [r4, #32]
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8003394:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003396:	f7ff f9ef 	bl	8002778 <JPEG_Decode_DMA>
		while(Jpeg_HWDecodingEnd == 0);
 800339a:	f8d8 3000 	ldr.w	r3, [r8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0fb      	beq.n	800339a <smart_watch_process+0x20a>
		if(video.isfirstFrame == 1)
 80033a2:	f894 9016 	ldrb.w	r9, [r4, #22]
 80033a6:	f1b9 0f01 	cmp.w	r9, #1
 80033aa:	f000 8146 	beq.w	800363a <smart_watch_process+0x4aa>
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 80033ae:	4b4b      	ldr	r3, [pc, #300]	@ (80034dc <smart_watch_process+0x34c>)
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 80033b0:	f04f 31ff 	mov.w	r1, #4294967295
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 80033b4:	f8da 2000 	ldr.w	r2, [sl]
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 80033b8:	e9d3 9b02 	ldrd	r9, fp, [r3, #8]
 80033bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 80033be:	f1c9 00f0 	rsb	r0, r9, #240	@ 0xf0
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 80033c2:	f1cb 0cf0 	rsb	ip, fp, #240	@ 0xf0
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 80033c6:	9302      	str	r3, [sp, #8]
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 80033c8:	0840      	lsrs	r0, r0, #1
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 80033ca:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 80033ce:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80033d2:	eb0c 1000 	add.w	r0, ip, r0, lsl #4
 80033d6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 80033da:	4841      	ldr	r0, [pc, #260]	@ (80034e0 <smart_watch_process+0x350>)
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 80033dc:	9203      	str	r2, [sp, #12]
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 80033de:	f000 fdf3 	bl	8003fc8 <HAL_DMA2D_PollForTransfer>
	HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 80033e2:	fa1f f189 	uxth.w	r1, r9
 80033e6:	483e      	ldr	r0, [pc, #248]	@ (80034e0 <smart_watch_process+0x350>)
 80033e8:	fa1f f38b 	uxth.w	r3, fp
 80033ec:	9100      	str	r1, [sp, #0]
 80033ee:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80033f2:	f000 fd8d 	bl	8003f10 <HAL_DMA2D_Start>
		depth24To16(&pOut, ( video.width * video.height ), 3);
 80033f6:	8b20      	ldrh	r0, [r4, #24]
 80033f8:	8b63      	ldrh	r3, [r4, #26]
		pOut.u8Arr = (uint8_t *)outputData;
 80033fa:	f8da e000 	ldr.w	lr, [sl]
		depth24To16(&pOut, ( video.width * video.height ), 3);
 80033fe:	fb10 f003 	smulbb	r0, r0, r3
 8003402:	b280      	uxth	r0, r0
	for( ; i < length ; i++)
 8003404:	b1c8      	cbz	r0, 800343a <smart_watch_process+0x2aa>
 8003406:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
 800340a:	4671      	mov	r1, lr
 800340c:	4672      	mov	r2, lr
		pxArr->u16Arr[i] = color565(r, g, b);
 800340e:	f8df c0e8 	ldr.w	ip, [pc, #232]	@ 80034f8 <smart_watch_process+0x368>
 8003412:	f892 9001 	ldrb.w	r9, [r2, #1]
 8003416:	7893      	ldrb	r3, [r2, #2]
 8003418:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800341c:	ea0c 2303 	and.w	r3, ip, r3, lsl #8
 8003420:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8003424:	ea43 0309 	orr.w	r3, r3, r9
 8003428:	f812 9b03 	ldrb.w	r9, [r2], #3
 800342c:	ea43 03d9 	orr.w	r3, r3, r9, lsr #3
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 8003430:	ba5b      	rev16	r3, r3
 8003432:	f821 3b02 	strh.w	r3, [r1], #2
	for( ; i < length ; i++)
 8003436:	4288      	cmp	r0, r1
 8003438:	d1eb      	bne.n	8003412 <smart_watch_process+0x282>
		lcd_draw_opt2(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr);
 800343a:	8b63      	ldrh	r3, [r4, #26]
 800343c:	8b22      	ldrh	r2, [r4, #24]
 800343e:	8be1      	ldrh	r1, [r4, #30]
 8003440:	f8cd e000 	str.w	lr, [sp]
 8003444:	8ba0      	ldrh	r0, [r4, #28]
 8003446:	f7ff fe13 	bl	8003070 <lcd_draw_opt2>
		outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 800344a:	f8da 1000 	ldr.w	r1, [sl]
 800344e:	4a25      	ldr	r2, [pc, #148]	@ (80034e4 <smart_watch_process+0x354>)
 8003450:	4b25      	ldr	r3, [pc, #148]	@ (80034e8 <smart_watch_process+0x358>)
 8003452:	4299      	cmp	r1, r3
 8003454:	bf08      	it	eq
 8003456:	4613      	moveq	r3, r2
 8003458:	f8ca 3000 	str.w	r3, [sl]
		video.actual_time = ( HAL_GetTick() - video.tick_offset );
 800345c:	f000 fc5e 	bl	8003d1c <HAL_GetTick>
 8003460:	6b23      	ldr	r3, [r4, #48]	@ 0x30
		float watch_time = ( video.frameCount * video.frame_time );
 8003462:	edd4 6a0a 	vldr	s13, [r4, #40]	@ 0x28
		video.actual_time = ( HAL_GetTick() - video.tick_offset );
 8003466:	1ac0      	subs	r0, r0, r3
		video.frameToSkip = ( ( video.actual_time - watch_time ) / video.frame_time );
 8003468:	ee07 0a90 	vmov	s15, r0
		video.actual_time = ( HAL_GetTick() - video.tick_offset );
 800346c:	62e0      	str	r0, [r4, #44]	@ 0x2c
		video.frameToSkip = ( ( video.actual_time - watch_time ) / video.frame_time );
 800346e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
		float watch_time = ( video.frameCount * video.frame_time );
 8003472:	edd4 7a08 	vldr	s15, [r4, #32]
 8003476:	eef8 7a67 	vcvt.f32.u32	s15, s15
		video.frameToSkip = ( ( video.actual_time - watch_time ) / video.frame_time );
 800347a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800347e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003482:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003486:	ee17 0a90 	vmov	r0, s15
 800348a:	edc4 7a09 	vstr	s15, [r4, #36]	@ 0x24
		if(video.frameToSkip < 0)
 800348e:	2800      	cmp	r0, #0
 8003490:	f2c0 80cd 	blt.w	800362e <smart_watch_process+0x49e>
		RTC_DateTypeDef sDate = {0};
 8003494:	f04f 0900 	mov.w	r9, #0
		HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8003498:	4906      	ldr	r1, [pc, #24]	@ (80034b4 <smart_watch_process+0x324>)
 800349a:	480c      	ldr	r0, [pc, #48]	@ (80034cc <smart_watch_process+0x33c>)
 800349c:	464a      	mov	r2, r9
		RTC_DateTypeDef sDate = {0};
 800349e:	f8cd 9014 	str.w	r9, [sp, #20]
		HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 80034a2:	f004 fdb7 	bl	8008014 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80034a6:	464a      	mov	r2, r9
 80034a8:	a905      	add	r1, sp, #20
 80034aa:	4808      	ldr	r0, [pc, #32]	@ (80034cc <smart_watch_process+0x33c>)
 80034ac:	f004 fdee 	bl	800808c <HAL_RTC_GetDate>
 80034b0:	e6a0      	b.n	80031f4 <smart_watch_process+0x64>
 80034b2:	bf00      	nop
 80034b4:	240af2a8 	.word	0x240af2a8
 80034b8:	240bbfa2 	.word	0x240bbfa2
 80034bc:	240bbaec 	.word	0x240bbaec
 80034c0:	240bbb34 	.word	0x240bbb34
 80034c4:	00000000 	.word	0x00000000
 80034c8:	240642a8 	.word	0x240642a8
 80034cc:	240000a4 	.word	0x240000a4
 80034d0:	aaaaaaab 	.word	0xaaaaaaab
 80034d4:	240af2ec 	.word	0x240af2ec
 80034d8:	24000148 	.word	0x24000148
 80034dc:	240000cc 	.word	0x240000cc
 80034e0:	240000e0 	.word	0x240000e0
 80034e4:	240002a8 	.word	0x240002a8
 80034e8:	240322a8 	.word	0x240322a8
 80034ec:	240000a0 	.word	0x240000a0
 80034f0:	24000004 	.word	0x24000004
 80034f4:	58020800 	.word	0x58020800
 80034f8:	fffff800 	.word	0xfffff800
				btn_status = BTN_NONE;
 80034fc:	2300      	movs	r3, #0
				HAL_Delay(300);
 80034fe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 8003502:	7033      	strb	r3, [r6, #0]
				HAL_Delay(300);
 8003504:	f000 fc10 	bl	8003d28 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8003508:	2006      	movs	r0, #6
 800350a:	f000 fcb3 	bl	8003e74 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 800350e:	2007      	movs	r0, #7
 8003510:	f000 fcb0 	bl	8003e74 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8003514:	2008      	movs	r0, #8
 8003516:	f000 fcad 	bl	8003e74 <HAL_NVIC_ClearPendingIRQ>
				if(video.time.Minutes > 0)
 800351a:	7863      	ldrb	r3, [r4, #1]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d07f      	beq.n	8003620 <smart_watch_process+0x490>
					video.time.Minutes--;
 8003520:	3b01      	subs	r3, #1
 8003522:	b2db      	uxtb	r3, r3
				video.file_idx += video.time.Minutes;
 8003524:	461a      	mov	r2, r3
 8003526:	7063      	strb	r3, [r4, #1]
				file_handler(1);
 8003528:	2001      	movs	r0, #1
				video.file_idx += video.time.Minutes;
 800352a:	8aa3      	ldrh	r3, [r4, #20]
 800352c:	441a      	add	r2, r3
 800352e:	82a2      	strh	r2, [r4, #20]
				file_handler(1);
 8003530:	f7ff fb48 	bl	8002bc4 <file_handler>
				video.file_idx -= video.time.Minutes;
 8003534:	8aa3      	ldrh	r3, [r4, #20]
 8003536:	7862      	ldrb	r2, [r4, #1]
			if(btn_status == BTN_SET)
 8003538:	f896 9000 	ldrb.w	r9, [r6]
				video.file_idx -= video.time.Minutes;
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	82a3      	strh	r3, [r4, #20]
 8003540:	e6d7      	b.n	80032f2 <smart_watch_process+0x162>
				btn_status = BTN_NONE;
 8003542:	2300      	movs	r3, #0
				HAL_Delay(300);
 8003544:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 8003548:	7033      	strb	r3, [r6, #0]
				HAL_Delay(300);
 800354a:	f000 fbed 	bl	8003d28 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 800354e:	2006      	movs	r0, #6
 8003550:	f000 fc90 	bl	8003e74 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8003554:	2007      	movs	r0, #7
 8003556:	f000 fc8d 	bl	8003e74 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 800355a:	2008      	movs	r0, #8
 800355c:	f000 fc8a 	bl	8003e74 <HAL_NVIC_ClearPendingIRQ>
				if(video.time.Hours > 0)
 8003560:	7823      	ldrb	r3, [r4, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d05f      	beq.n	8003626 <smart_watch_process+0x496>
					video.time.Hours--;
 8003566:	3b01      	subs	r3, #1
 8003568:	b2db      	uxtb	r3, r3
				video.file_idx = ( video.time.Hours * 60 );
 800356a:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 800356e:	0092      	lsls	r2, r2, #2
 8003570:	b292      	uxth	r2, r2
				file_handler(1);
 8003572:	2001      	movs	r0, #1
 8003574:	7023      	strb	r3, [r4, #0]
				video.file_idx = ( video.time.Hours * 60 );
 8003576:	82a2      	strh	r2, [r4, #20]
				file_handler(1);
 8003578:	f7ff fb24 	bl	8002bc4 <file_handler>
			if(btn_status == BTN_SET)
 800357c:	f896 9000 	ldrb.w	r9, [r6]
 8003580:	e6e0      	b.n	8003344 <smart_watch_process+0x1b4>
				btn_status = BTN_NONE;
 8003582:	2300      	movs	r3, #0
				HAL_Delay(300);
 8003584:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 8003588:	7033      	strb	r3, [r6, #0]
				HAL_Delay(300);
 800358a:	f000 fbcd 	bl	8003d28 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 800358e:	2006      	movs	r0, #6
 8003590:	f000 fc70 	bl	8003e74 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8003594:	2007      	movs	r0, #7
 8003596:	f000 fc6d 	bl	8003e74 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 800359a:	2008      	movs	r0, #8
 800359c:	f000 fc6a 	bl	8003e74 <HAL_NVIC_ClearPendingIRQ>
				video.time.Minutes++;
 80035a0:	7863      	ldrb	r3, [r4, #1]
				video.time.Minutes %= 60;
 80035a2:	4a43      	ldr	r2, [pc, #268]	@ (80036b0 <smart_watch_process+0x520>)
				file_handler(1);
 80035a4:	4648      	mov	r0, r9
				video.time.Minutes++;
 80035a6:	3301      	adds	r3, #1
				video.time.Minutes %= 60;
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	fba2 1203 	umull	r1, r2, r2, r3
 80035ae:	0952      	lsrs	r2, r2, #5
 80035b0:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80035b4:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
				video.file_idx += video.time.Minutes;
 80035b8:	8aa2      	ldrh	r2, [r4, #20]
				video.time.Minutes %= 60;
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	7063      	strb	r3, [r4, #1]
				video.file_idx += video.time.Minutes;
 80035be:	4413      	add	r3, r2
 80035c0:	82a3      	strh	r3, [r4, #20]
				file_handler(1);
 80035c2:	f7ff faff 	bl	8002bc4 <file_handler>
				video.file_idx -= video.time.Minutes;
 80035c6:	8aa3      	ldrh	r3, [r4, #20]
 80035c8:	7862      	ldrb	r2, [r4, #1]
			if(btn_status == BTN_MINUS)
 80035ca:	f896 9000 	ldrb.w	r9, [r6]
				video.file_idx -= video.time.Minutes;
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	82a3      	strh	r3, [r4, #20]
 80035d2:	e68a      	b.n	80032ea <smart_watch_process+0x15a>
				btn_status = BTN_NONE;
 80035d4:	2300      	movs	r3, #0
				HAL_Delay(300);
 80035d6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 80035da:	7033      	strb	r3, [r6, #0]
				HAL_Delay(300);
 80035dc:	f000 fba4 	bl	8003d28 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80035e0:	2006      	movs	r0, #6
 80035e2:	f000 fc47 	bl	8003e74 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 80035e6:	2007      	movs	r0, #7
 80035e8:	f000 fc44 	bl	8003e74 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 80035ec:	2008      	movs	r0, #8
 80035ee:	f000 fc41 	bl	8003e74 <HAL_NVIC_ClearPendingIRQ>
				video.time.Hours++;
 80035f2:	7823      	ldrb	r3, [r4, #0]
				video.time.Hours %= 12;
 80035f4:	4a2f      	ldr	r2, [pc, #188]	@ (80036b4 <smart_watch_process+0x524>)
				file_handler(1);
 80035f6:	4648      	mov	r0, r9
				video.time.Hours++;
 80035f8:	3301      	adds	r3, #1
				video.time.Hours %= 12;
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	fba2 1203 	umull	r1, r2, r2, r3
 8003600:	08d2      	lsrs	r2, r2, #3
 8003602:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003606:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 800360a:	b2db      	uxtb	r3, r3
 800360c:	7023      	strb	r3, [r4, #0]
				video.file_idx = ( video.time.Hours * 60 );
 800360e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	82a3      	strh	r3, [r4, #20]
				file_handler(1);
 8003616:	f7ff fad5 	bl	8002bc4 <file_handler>
			if(btn_status == BTN_MINUS)
 800361a:	f896 9000 	ldrb.w	r9, [r6]
 800361e:	e68d      	b.n	800333c <smart_watch_process+0x1ac>
 8003620:	223b      	movs	r2, #59	@ 0x3b
					video.time.Minutes = 59;
 8003622:	4613      	mov	r3, r2
 8003624:	e77f      	b.n	8003526 <smart_watch_process+0x396>
 8003626:	f44f 7225 	mov.w	r2, #660	@ 0x294
					video.time.Hours = 11;
 800362a:	230b      	movs	r3, #11
 800362c:	e7a1      	b.n	8003572 <smart_watch_process+0x3e2>
			HAL_Delay(-video.frameToSkip);
 800362e:	4240      	negs	r0, r0
 8003630:	f000 fb7a 	bl	8003d28 <HAL_Delay>
			video.frameToSkip = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	6263      	str	r3, [r4, #36]	@ 0x24
 8003638:	e72c      	b.n	8003494 <smart_watch_process+0x304>
			video.isfirstFrame = 0;
 800363a:	f04f 0b00 	mov.w	fp, #0
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 800363e:	491e      	ldr	r1, [pc, #120]	@ (80036b8 <smart_watch_process+0x528>)
 8003640:	481e      	ldr	r0, [pc, #120]	@ (80036bc <smart_watch_process+0x52c>)
			video.isfirstFrame = 0;
 8003642:	f884 b016 	strb.w	fp, [r4, #22]
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8003646:	f001 fb51 	bl	8004cec <HAL_JPEG_GetInfo>
			DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 800364a:	4a1b      	ldr	r2, [pc, #108]	@ (80036b8 <smart_watch_process+0x528>)
 800364c:	6851      	ldr	r1, [r2, #4]
 800364e:	8990      	ldrh	r0, [r2, #12]
 8003650:	f7ff fb1e 	bl	8002c90 <DMA2D_Init.constprop.0>
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 8003654:	edd5 7a00 	vldr	s15, [r5]
			video.width = JPEG_Info.ImageWidth;
 8003658:	4a17      	ldr	r2, [pc, #92]	@ (80036b8 <smart_watch_process+0x528>)
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 800365a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
			video.width = JPEG_Info.ImageWidth;
 800365e:	68d3      	ldr	r3, [r2, #12]
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 8003660:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 80036a8 <smart_watch_process+0x518>
			video.width = JPEG_Info.ImageWidth;
 8003664:	8323      	strh	r3, [r4, #24]
			video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 8003666:	b29b      	uxth	r3, r3
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 8003668:	ee86 7b05 	vdiv.f64	d7, d6, d5
			video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 800366c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8003670:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8003674:	105b      	asrs	r3, r3, #1
 8003676:	83a3      	strh	r3, [r4, #28]
			video.height = JPEG_Info.ImageHeight;
 8003678:	6893      	ldr	r3, [r2, #8]
 800367a:	8363      	strh	r3, [r4, #26]
			video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 800367c:	b29b      	uxth	r3, r3
 800367e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8003682:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8003686:	105b      	asrs	r3, r3, #1
 8003688:	83e3      	strh	r3, [r4, #30]
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 800368a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800368e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
			video.tick_offset = HAL_GetTick();									// Tick offset from 0
 8003692:	f000 fb43 	bl	8003d1c <HAL_GetTick>
			HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8003696:	465a      	mov	r2, fp
			video.tick_offset = HAL_GetTick();									// Tick offset from 0
 8003698:	6320      	str	r0, [r4, #48]	@ 0x30
			HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 800369a:	4909      	ldr	r1, [pc, #36]	@ (80036c0 <smart_watch_process+0x530>)
 800369c:	4809      	ldr	r0, [pc, #36]	@ (80036c4 <smart_watch_process+0x534>)
			video.frameCount = 1;												// Reset the count here for every first frame of the minute chunk
 800369e:	f8c4 9020 	str.w	r9, [r4, #32]
			HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 80036a2:	f004 fde3 	bl	800826c <HAL_RTC_SetTime>
 80036a6:	e682      	b.n	80033ae <smart_watch_process+0x21e>
 80036a8:	00000000 	.word	0x00000000
 80036ac:	408f4000 	.word	0x408f4000
 80036b0:	88888889 	.word	0x88888889
 80036b4:	aaaaaaab 	.word	0xaaaaaaab
 80036b8:	240000cc 	.word	0x240000cc
 80036bc:	24000148 	.word	0x24000148
 80036c0:	240af2a8 	.word	0x240af2a8
 80036c4:	240000a4 	.word	0x240000a4

080036c8 <HAL_GPIO_EXTI_Callback>:
}

/************************** CALLBACK FUNCTIONS **************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80036c8:	b508      	push	{r3, lr}

	if(video.video_mode == SETTING_MODE)
 80036ca:	4b15      	ldr	r3, [pc, #84]	@ (8003720 <HAL_GPIO_EXTI_Callback+0x58>)
 80036cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80036d0:	b103      	cbz	r3, 80036d4 <HAL_GPIO_EXTI_Callback+0xc>

		disable_btn_int();

	}

}
 80036d2:	bd08      	pop	{r3, pc}
		if(!HAL_GPIO_ReadPin(PLUS_BTN_GPIO_Port, PLUS_BTN_Pin))
 80036d4:	2104      	movs	r1, #4
 80036d6:	4813      	ldr	r0, [pc, #76]	@ (8003724 <HAL_GPIO_EXTI_Callback+0x5c>)
 80036d8:	f000 feba 	bl	8004450 <HAL_GPIO_ReadPin>
 80036dc:	b968      	cbnz	r0, 80036fa <HAL_GPIO_EXTI_Callback+0x32>
			btn_status = BTN_PLUS;
 80036de:	4b12      	ldr	r3, [pc, #72]	@ (8003728 <HAL_GPIO_EXTI_Callback+0x60>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80036e4:	2006      	movs	r0, #6
 80036e6:	f000 fb9d 	bl	8003e24 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80036ea:	2007      	movs	r0, #7
 80036ec:	f000 fb9a 	bl	8003e24 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80036f0:	2008      	movs	r0, #8
}
 80036f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80036f6:	f000 bb95 	b.w	8003e24 <HAL_NVIC_DisableIRQ>
		else if(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin))
 80036fa:	2102      	movs	r1, #2
 80036fc:	4809      	ldr	r0, [pc, #36]	@ (8003724 <HAL_GPIO_EXTI_Callback+0x5c>)
 80036fe:	f000 fea7 	bl	8004450 <HAL_GPIO_ReadPin>
 8003702:	b918      	cbnz	r0, 800370c <HAL_GPIO_EXTI_Callback+0x44>
			btn_status = BTN_SET;
 8003704:	4b08      	ldr	r3, [pc, #32]	@ (8003728 <HAL_GPIO_EXTI_Callback+0x60>)
 8003706:	2202      	movs	r2, #2
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	e7eb      	b.n	80036e4 <HAL_GPIO_EXTI_Callback+0x1c>
		else if(!HAL_GPIO_ReadPin(MINUS_BTN_GPIO_Port, MINUS_BTN_Pin))
 800370c:	2101      	movs	r1, #1
 800370e:	4805      	ldr	r0, [pc, #20]	@ (8003724 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003710:	f000 fe9e 	bl	8004450 <HAL_GPIO_ReadPin>
 8003714:	2800      	cmp	r0, #0
 8003716:	d1e5      	bne.n	80036e4 <HAL_GPIO_EXTI_Callback+0x1c>
			btn_status = BTN_MINUS;
 8003718:	4b03      	ldr	r3, [pc, #12]	@ (8003728 <HAL_GPIO_EXTI_Callback+0x60>)
 800371a:	2203      	movs	r2, #3
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e7e1      	b.n	80036e4 <HAL_GPIO_EXTI_Callback+0x1c>
 8003720:	240af2a8 	.word	0x240af2a8
 8003724:	58020800 	.word	0x58020800
 8003728:	240bbfa2 	.word	0x240bbfa2

0800372c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800372c:	4b07      	ldr	r3, [pc, #28]	@ (800374c <HAL_MspInit+0x20>)
{
 800372e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003730:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8003734:	f042 0202 	orr.w	r2, r2, #2
 8003738:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 800373c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003748:	b002      	add	sp, #8
 800374a:	4770      	bx	lr
 800374c:	58024400 	.word	0x58024400

08003750 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8003750:	4b0a      	ldr	r3, [pc, #40]	@ (800377c <HAL_DMA2D_MspInit+0x2c>)
 8003752:	6802      	ldr	r2, [r0, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d000      	beq.n	800375a <HAL_DMA2D_MspInit+0xa>
 8003758:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800375a:	4b09      	ldr	r3, [pc, #36]	@ (8003780 <HAL_DMA2D_MspInit+0x30>)
{
 800375c:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800375e:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8003762:	f042 0210 	orr.w	r2, r2, #16
 8003766:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 800376a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800376e:	f003 0310 	and.w	r3, r3, #16
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003776:	b002      	add	sp, #8
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	52001000 	.word	0x52001000
 8003780:	58024400 	.word	0x58024400

08003784 <HAL_JPEG_MspInit>:
{
	  static MDMA_HandleTypeDef   hmdmaIn;
	  static MDMA_HandleTypeDef   hmdmaOut;


	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8003784:	4b3a      	ldr	r3, [pc, #232]	@ (8003870 <HAL_JPEG_MspInit+0xec>)

	  __HAL_RCC_MDMA_CLK_ENABLE();

	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 8003786:	2107      	movs	r1, #7
 8003788:	220f      	movs	r2, #15
{
 800378a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 800378e:	f8d3 4134 	ldr.w	r4, [r3, #308]	@ 0x134
{
 8003792:	4606      	mov	r6, r0
 8003794:	b083      	sub	sp, #12
	  HAL_NVIC_EnableIRQ(JPEG_IRQn);

	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
	  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8003796:	2500      	movs	r5, #0
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8003798:	f044 0420 	orr.w	r4, r4, #32
	  hmdmaIn.Init.SourceBlockAddressOffset = 0;
	  hmdmaIn.Init.DestBlockAddressOffset  = 0;

	  hmdmaIn.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
	  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
	  hmdmaIn.Init.BufferTransferLength = 32;
 800379c:	2720      	movs	r7, #32
	  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;
 800379e:	f04f 7900 	mov.w	r9, #33554432	@ 0x2000000
	  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 80037a2:	f44f 48a0 	mov.w	r8, #20480	@ 0x5000
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 80037a6:	f8c3 4134 	str.w	r4, [r3, #308]	@ 0x134
 80037aa:	f8d3 0134 	ldr.w	r0, [r3, #308]	@ 0x134
	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 80037ae:	4c31      	ldr	r4, [pc, #196]	@ (8003874 <HAL_JPEG_MspInit+0xf0>)
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 80037b0:	f000 0020 	and.w	r0, r0, #32
 80037b4:	9000      	str	r0, [sp, #0]
 80037b6:	9800      	ldr	r0, [sp, #0]
	  __HAL_RCC_MDMA_CLK_ENABLE();
 80037b8:	f8d3 0134 	ldr.w	r0, [r3, #308]	@ 0x134
 80037bc:	f040 0001 	orr.w	r0, r0, #1
 80037c0:	f8c3 0134 	str.w	r0, [r3, #308]	@ 0x134
	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 80037c4:	2079      	movs	r0, #121	@ 0x79
	  __HAL_RCC_MDMA_CLK_ENABLE();
 80037c6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	9301      	str	r3, [sp, #4]
 80037d0:	9b01      	ldr	r3, [sp, #4]
	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 80037d2:	f000 fadd 	bl	8003d90 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80037d6:	2079      	movs	r0, #121	@ 0x79
 80037d8:	f000 fb16 	bl	8003e08 <HAL_NVIC_EnableIRQ>
	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 80037dc:	2380      	movs	r3, #128	@ 0x80
	  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 80037de:	2202      	movs	r2, #2

	  hmdmaIn.Instance = MDMA_Channel1;

	  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);

	  HAL_MDMA_DeInit(&hmdmaIn);
 80037e0:	4620      	mov	r0, r4
	  hmdmaIn.Init.DestDataSize       = MDMA_DEST_DATASIZE_WORD;
 80037e2:	6223      	str	r3, [r4, #32]
	  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 80037e4:	6162      	str	r2, [r4, #20]
	  hmdmaIn.Instance = MDMA_Channel1;
 80037e6:	2211      	movs	r2, #17
	  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;
 80037e8:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
	  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80037ec:	60a5      	str	r5, [r4, #8]
	  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 80037ee:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
	  hmdmaIn.Init.BufferTransferLength = 32;
 80037f2:	62a7      	str	r7, [r4, #40]	@ 0x28
	  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80037f4:	e9c4 3503 	strd	r3, r5, [r4, #12]
	  hmdmaIn.Init.DestBurst          = MDMA_DEST_BURST_16BEATS;
 80037f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037fc:	6323      	str	r3, [r4, #48]	@ 0x30
	  hmdmaIn.Instance = MDMA_Channel1;
 80037fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003878 <HAL_JPEG_MspInit+0xf4>)
	  hmdmaIn.Init.SourceBlockAddressOffset = 0;
 8003800:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
	  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);
 8003804:	6334      	str	r4, [r6, #48]	@ 0x30
 8003806:	6426      	str	r6, [r4, #64]	@ 0x40
	  hmdmaIn.Instance = MDMA_Channel1;
 8003808:	e9c4 3200 	strd	r3, r2, [r4]
	  hmdmaIn.Init.SourceDataSize     = MDMA_SRC_DATASIZE_BYTE;
 800380c:	e9c4 5506 	strd	r5, r5, [r4, #24]
	  HAL_MDMA_DeInit(&hmdmaIn);
 8003810:	f002 f940 	bl	8005a94 <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaIn);
 8003814:	4620      	mov	r0, r4
 8003816:	f002 f8c3 	bl	80059a0 <HAL_MDMA_Init>

	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 800381a:	4c18      	ldr	r4, [pc, #96]	@ (800387c <HAL_JPEG_MspInit+0xf8>)
	  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
	  hmdmaOut.Init.SourceDataSize  = MDMA_SRC_DATASIZE_WORD;
	  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
	  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
	  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
	  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;
 800381c:	f44f 3320 	mov.w	r3, #163840	@ 0x28000

	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
	  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;
	  hmdmaOut.Init.BufferTransferLength = 32;

	  hmdmaOut.Instance = MDMA_Channel0;
 8003820:	4a17      	ldr	r2, [pc, #92]	@ (8003880 <HAL_JPEG_MspInit+0xfc>)
	  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;
 8003822:	60a5      	str	r5, [r4, #8]

	  HAL_MDMA_DeInit(&hmdmaOut);
 8003824:	4620      	mov	r0, r4
	  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;
 8003826:	6323      	str	r3, [r4, #48]	@ 0x30
	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8003828:	2313      	movs	r3, #19
	  hmdmaOut.Instance = MDMA_Channel0;
 800382a:	6022      	str	r2, [r4, #0]
	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800382c:	6063      	str	r3, [r4, #4]
	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 800382e:	23c0      	movs	r3, #192	@ 0xc0
	  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
 8003830:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 8003834:	60e3      	str	r3, [r4, #12]
	  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
 8003836:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
	  hmdmaOut.Init.BufferTransferLength = 32;
 800383a:	62a7      	str	r7, [r4, #40]	@ 0x28
	  hmdmaOut.Init.SourceInc       = MDMA_SRC_INC_DISABLE;
 800383c:	e9c4 5504 	strd	r5, r5, [r4, #16]
	  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
 8003840:	e9c4 7507 	strd	r7, r5, [r4, #28]
	  hmdmaOut.Init.SourceBlockAddressOffset = 0;
 8003844:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
	  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
 8003848:	2508      	movs	r5, #8
 800384a:	61a5      	str	r5, [r4, #24]
	  HAL_MDMA_DeInit(&hmdmaOut);
 800384c:	f002 f922 	bl	8005a94 <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaOut);
 8003850:	4620      	mov	r0, r4
 8003852:	f002 f8a5 	bl	80059a0 <HAL_MDMA_Init>

	  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 8003856:	6374      	str	r4, [r6, #52]	@ 0x34


	  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 8003858:	220f      	movs	r2, #15
 800385a:	4629      	mov	r1, r5
 800385c:	207a      	movs	r0, #122	@ 0x7a
	  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 800385e:	6426      	str	r6, [r4, #64]	@ 0x40
	  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 8003860:	f000 fa96 	bl	8003d90 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8003864:	207a      	movs	r0, #122	@ 0x7a
}
 8003866:	b003      	add	sp, #12
 8003868:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800386c:	f000 bacc 	b.w	8003e08 <HAL_NVIC_EnableIRQ>
 8003870:	58024400 	.word	0x58024400
 8003874:	240bc018 	.word	0x240bc018
 8003878:	52000080 	.word	0x52000080
 800387c:	240bbfa8 	.word	0x240bbfa8
 8003880:	52000040 	.word	0x52000040

08003884 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003884:	b5d0      	push	{r4, r6, r7, lr}
 8003886:	b0ba      	sub	sp, #232	@ 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003888:	2100      	movs	r1, #0
{
 800388a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800388c:	22c0      	movs	r2, #192	@ 0xc0
 800388e:	a80a      	add	r0, sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003890:	9108      	str	r1, [sp, #32]
 8003892:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003896:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800389a:	f009 f8b9 	bl	800ca10 <memset>
  if(hsd->Instance==SDMMC1)
 800389e:	4b3d      	ldr	r3, [pc, #244]	@ (8003994 <HAL_SD_MspInit+0x110>)
 80038a0:	6822      	ldr	r2, [r4, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d001      	beq.n	80038aa <HAL_SD_MspInit+0x26>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80038a6:	b03a      	add	sp, #232	@ 0xe8
 80038a8:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80038aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80038ae:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038b0:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80038b2:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038b6:	f003 f919 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 80038ba:	2800      	cmp	r0, #0
 80038bc:	d166      	bne.n	800398c <HAL_SD_MspInit+0x108>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80038be:	4b36      	ldr	r3, [pc, #216]	@ (8003998 <HAL_SD_MspInit+0x114>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80038c0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80038c4:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80038c6:	240c      	movs	r4, #12
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80038c8:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80038cc:	2601      	movs	r6, #1
 80038ce:	2703      	movs	r7, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80038d0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80038d4:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 80038d8:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 80038dc:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 80038e0:	9200      	str	r2, [sp, #0]
 80038e2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038e4:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80038e8:	f042 0202 	orr.w	r2, r2, #2
 80038ec:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 80038f0:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80038f4:	f002 0202 	and.w	r2, r2, #2
 80038f8:	9201      	str	r2, [sp, #4]
 80038fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038fc:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8003900:	f042 0204 	orr.w	r2, r2, #4
 8003904:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8003908:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800390c:	f002 0204 	and.w	r2, r2, #4
 8003910:	9202      	str	r2, [sp, #8]
 8003912:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003914:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8003918:	f042 0208 	orr.w	r2, r2, #8
 800391c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8003920:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003924:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003926:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800392a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800392e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003930:	a904      	add	r1, sp, #16
 8003932:	481a      	ldr	r0, [pc, #104]	@ (800399c <HAL_SD_MspInit+0x118>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003934:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003936:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800393a:	f000 fc47 	bl	80041cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800393e:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 8003942:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003944:	a904      	add	r1, sp, #16
 8003946:	4816      	ldr	r0, [pc, #88]	@ (80039a0 <HAL_SD_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003948:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800394a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800394e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003952:	f000 fc3b 	bl	80041cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003956:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800395a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800395c:	a904      	add	r1, sp, #16
 800395e:	4810      	ldr	r0, [pc, #64]	@ (80039a0 <HAL_SD_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003960:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003962:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003966:	2200      	movs	r2, #0
 8003968:	2303      	movs	r3, #3
 800396a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800396e:	f000 fc2d 	bl	80041cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003972:	2204      	movs	r2, #4
 8003974:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003976:	a904      	add	r1, sp, #16
 8003978:	480a      	ldr	r0, [pc, #40]	@ (80039a4 <HAL_SD_MspInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800397a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800397c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8003980:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003984:	f000 fc22 	bl	80041cc <HAL_GPIO_Init>
}
 8003988:	b03a      	add	sp, #232	@ 0xe8
 800398a:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 800398c:	f7ff f918 	bl	8002bc0 <Error_Handler>
 8003990:	e795      	b.n	80038be <HAL_SD_MspInit+0x3a>
 8003992:	bf00      	nop
 8003994:	52007000 	.word	0x52007000
 8003998:	58024400 	.word	0x58024400
 800399c:	58020400 	.word	0x58020400
 80039a0:	58020800 	.word	0x58020800
 80039a4:	58020c00 	.word	0x58020c00

080039a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80039a8:	b510      	push	{r4, lr}
 80039aa:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ac:	2100      	movs	r1, #0
{
 80039ae:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039b0:	22c0      	movs	r2, #192	@ 0xc0
 80039b2:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b4:	9106      	str	r1, [sp, #24]
 80039b6:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80039ba:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039be:	f009 f827 	bl	800ca10 <memset>
  if(hspi->Instance==SPI1)
 80039c2:	4b21      	ldr	r3, [pc, #132]	@ (8003a48 <HAL_SPI_MspInit+0xa0>)
 80039c4:	6822      	ldr	r2, [r4, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d001      	beq.n	80039ce <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80039ca:	b038      	add	sp, #224	@ 0xe0
 80039cc:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80039ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80039d2:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039d4:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80039d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039da:	f003 f887 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 80039de:	bb40      	cbnz	r0, 8003a32 <HAL_SPI_MspInit+0x8a>
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039e0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a4c <HAL_SPI_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039e2:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e4:	a902      	add	r1, sp, #8
 80039e6:	481a      	ldr	r0, [pc, #104]	@ (8003a50 <HAL_SPI_MspInit+0xa8>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039e8:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80039ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039f0:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
 80039f4:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80039f8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80039fc:	9200      	str	r2, [sp, #0]
 80039fe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a00:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8003a04:	f042 0201 	orr.w	r2, r2, #1
 8003a08:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8003a0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a10:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a12:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003a16:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8003a38 <HAL_SPI_MspInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a1a:	9301      	str	r3, [sp, #4]
 8003a1c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003a1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003a22:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8003a40 <HAL_SPI_MspInit+0x98>
 8003a26:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2a:	f000 fbcf 	bl	80041cc <HAL_GPIO_Init>
}
 8003a2e:	b038      	add	sp, #224	@ 0xe0
 8003a30:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003a32:	f7ff f8c5 	bl	8002bc0 <Error_Handler>
 8003a36:	e7d3      	b.n	80039e0 <HAL_SPI_MspInit+0x38>
 8003a38:	000000a0 	.word	0x000000a0
 8003a3c:	00000002 	.word	0x00000002
	...
 8003a48:	40013000 	.word	0x40013000
 8003a4c:	58024400 	.word	0x58024400
 8003a50:	58020000 	.word	0x58020000
 8003a54:	00000000 	.word	0x00000000

08003a58 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003a58:	b510      	push	{r4, lr}
 8003a5a:	b0b0      	sub	sp, #192	@ 0xc0
 8003a5c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a5e:	22c0      	movs	r2, #192	@ 0xc0
 8003a60:	2100      	movs	r1, #0
 8003a62:	4668      	mov	r0, sp
 8003a64:	f008 ffd4 	bl	800ca10 <memset>
  if(hrtc->Instance==RTC)
 8003a68:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa8 <HAL_RTC_MspInit+0x50>)
 8003a6a:	6822      	ldr	r2, [r4, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <HAL_RTC_MspInit+0x1c>

    __HAL_RCC_RTC_ENABLE();

  }

}
 8003a70:	b030      	add	sp, #192	@ 0xc0
 8003a72:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a74:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8003aa0 <HAL_RTC_MspInit+0x48>
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003a78:	f44f 7380 	mov.w	r3, #256	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a7c:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a7e:	ed8d 7b00 	vstr	d7, [sp]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003a82:	932d      	str	r3, [sp, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a84:	f003 f832 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 8003a88:	b930      	cbnz	r0, 8003a98 <HAL_RTC_MspInit+0x40>
    __HAL_RCC_RTC_ENABLE();
 8003a8a:	4a08      	ldr	r2, [pc, #32]	@ (8003aac <HAL_RTC_MspInit+0x54>)
 8003a8c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003a8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a92:	6713      	str	r3, [r2, #112]	@ 0x70
}
 8003a94:	b030      	add	sp, #192	@ 0xc0
 8003a96:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003a98:	f7ff f892 	bl	8002bc0 <Error_Handler>
 8003a9c:	e7f5      	b.n	8003a8a <HAL_RTC_MspInit+0x32>
 8003a9e:	bf00      	nop
 8003aa0:	00400000 	.word	0x00400000
 8003aa4:	00000000 	.word	0x00000000
 8003aa8:	58004000 	.word	0x58004000
 8003aac:	58024400 	.word	0x58024400

08003ab0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ab0:	e7fe      	b.n	8003ab0 <NMI_Handler>
 8003ab2:	bf00      	nop

08003ab4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ab4:	e7fe      	b.n	8003ab4 <HardFault_Handler>
 8003ab6:	bf00      	nop

08003ab8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ab8:	e7fe      	b.n	8003ab8 <MemManage_Handler>
 8003aba:	bf00      	nop

08003abc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003abc:	e7fe      	b.n	8003abc <BusFault_Handler>
 8003abe:	bf00      	nop

08003ac0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ac0:	e7fe      	b.n	8003ac0 <UsageFault_Handler>
 8003ac2:	bf00      	nop

08003ac4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop

08003ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop

08003acc <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop

08003ad0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ad0:	f000 b918 	b.w	8003d04 <HAL_IncTick>

08003ad4 <JPEG_IRQHandler>:
/******************************************************************************/

/* USER CODE BEGIN 1 */
void JPEG_IRQHandler(void)
{
  HAL_JPEG_IRQHandler(&JPEG_Handle);
 8003ad4:	4801      	ldr	r0, [pc, #4]	@ (8003adc <JPEG_IRQHandler+0x8>)
 8003ad6:	f001 bec7 	b.w	8005868 <HAL_JPEG_IRQHandler>
 8003ada:	bf00      	nop
 8003adc:	24000148 	.word	0x24000148

08003ae0 <MDMA_IRQHandler>:
}


void MDMA_IRQHandler()
{
 8003ae0:	b510      	push	{r4, lr}
  /* Check the interrupt and clear flag */
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmain);
 8003ae2:	4c04      	ldr	r4, [pc, #16]	@ (8003af4 <MDMA_IRQHandler+0x14>)
 8003ae4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003ae6:	f002 f87f 	bl	8005be8 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);
 8003aea:	6b60      	ldr	r0, [r4, #52]	@ 0x34
}
 8003aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);
 8003af0:	f002 b87a 	b.w	8005be8 <HAL_MDMA_IRQHandler>
 8003af4:	24000148 	.word	0x24000148

08003af8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(MINUS_BTN_Pin);
 8003af8:	2001      	movs	r0, #1
 8003afa:	f000 bcb3 	b.w	8004464 <HAL_GPIO_EXTI_IRQHandler>
 8003afe:	bf00      	nop

08003b00 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(SET_BTN_Pin);
 8003b00:	2002      	movs	r0, #2
 8003b02:	f000 bcaf 	b.w	8004464 <HAL_GPIO_EXTI_IRQHandler>
 8003b06:	bf00      	nop

08003b08 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(PLUS_BTN_Pin);
 8003b08:	2004      	movs	r0, #4
 8003b0a:	f000 bcab 	b.w	8004464 <HAL_GPIO_EXTI_IRQHandler>
 8003b0e:	bf00      	nop

08003b10 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b10:	490d      	ldr	r1, [pc, #52]	@ (8003b48 <_sbrk+0x38>)
{
 8003b12:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b14:	4a0d      	ldr	r2, [pc, #52]	@ (8003b4c <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8003b16:	6808      	ldr	r0, [r1, #0]
{
 8003b18:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b1a:	4c0d      	ldr	r4, [pc, #52]	@ (8003b50 <_sbrk+0x40>)
 8003b1c:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8003b1e:	b120      	cbz	r0, 8003b2a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b20:	4403      	add	r3, r0
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d807      	bhi.n	8003b36 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003b26:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8003b28:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003b2a:	4c0a      	ldr	r4, [pc, #40]	@ (8003b54 <_sbrk+0x44>)
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003b30:	4403      	add	r3, r0
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d9f7      	bls.n	8003b26 <_sbrk+0x16>
    errno = ENOMEM;
 8003b36:	f008 ff73 	bl	800ca20 <__errno>
 8003b3a:	220c      	movs	r2, #12
 8003b3c:	4603      	mov	r3, r0
    return (void *)-1;
 8003b3e:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8003b42:	601a      	str	r2, [r3, #0]
}
 8003b44:	bd10      	pop	{r4, pc}
 8003b46:	bf00      	nop
 8003b48:	240bc084 	.word	0x240bc084
 8003b4c:	24100000 	.word	0x24100000
 8003b50:	00000800 	.word	0x00000800
 8003b54:	240bc210 	.word	0x240bc210

08003b58 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003b58:	4922      	ldr	r1, [pc, #136]	@ (8003be4 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b5a:	4a23      	ldr	r2, [pc, #140]	@ (8003be8 <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003b5c:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8003b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8003b64:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b6a:	6813      	ldr	r3, [r2, #0]
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d805      	bhi.n	8003b80 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003b74:	6813      	ldr	r3, [r2, #0]
 8003b76:	f023 030f 	bic.w	r3, r3, #15
 8003b7a:	f043 0303 	orr.w	r3, r3, #3
 8003b7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003b80:	4b1a      	ldr	r3, [pc, #104]	@ (8003bec <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b82:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003b84:	4a1a      	ldr	r2, [pc, #104]	@ (8003bf0 <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 8003b86:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b88:	4817      	ldr	r0, [pc, #92]	@ (8003be8 <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 8003b8a:	f041 0101 	orr.w	r1, r1, #1
 8003b8e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003b90:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8003b92:	6819      	ldr	r1, [r3, #0]
 8003b94:	400a      	ands	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b98:	6803      	ldr	r3, [r0, #0]
 8003b9a:	f013 0f0c 	tst.w	r3, #12
 8003b9e:	d005      	beq.n	8003bac <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ba0:	6803      	ldr	r3, [r0, #0]
 8003ba2:	f023 030f 	bic.w	r3, r3, #15
 8003ba6:	f043 0303 	orr.w	r3, r3, #3
 8003baa:	6003      	str	r3, [r0, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003bac:	4b0f      	ldr	r3, [pc, #60]	@ (8003bec <SystemInit+0x94>)
 8003bae:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003bb0:	4910      	ldr	r1, [pc, #64]	@ (8003bf4 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 8003bb2:	4c11      	ldr	r4, [pc, #68]	@ (8003bf8 <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 8003bb4:	4811      	ldr	r0, [pc, #68]	@ (8003bfc <SystemInit+0xa4>)
  RCC->CDCFGR1 = 0x00000000;
 8003bb6:	619a      	str	r2, [r3, #24]
  RCC->CDCFGR2 = 0x00000000;
 8003bb8:	61da      	str	r2, [r3, #28]
  RCC->SRDCFGR = 0x00000000;
 8003bba:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8003bbc:	629c      	str	r4, [r3, #40]	@ 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003bbe:	f243 04d2 	movw	r4, #12498	@ 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 8003bc2:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8003bc4:	6319      	str	r1, [r3, #48]	@ 0x30
  RCC->PLL1FRACR = 0x00000000;
 8003bc6:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC->PLL2DIVR = 0x01010280;
 8003bc8:	6399      	str	r1, [r3, #56]	@ 0x38
  RCC->PLL2FRACR = 0x00000000;
 8003bca:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8003bcc:	6419      	str	r1, [r3, #64]	@ 0x40
  RCC->PLL3FRACR = 0x00000000;
 8003bce:	645a      	str	r2, [r3, #68]	@ 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8003bd0:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003bd2:	480b      	ldr	r0, [pc, #44]	@ (8003c00 <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 8003bd4:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8003bd8:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8003bda:	661a      	str	r2, [r3, #96]	@ 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003bdc:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	e000ed00 	.word	0xe000ed00
 8003be8:	52002000 	.word	0x52002000
 8003bec:	58024400 	.word	0x58024400
 8003bf0:	eaf6ed7f 	.word	0xeaf6ed7f
 8003bf4:	01010280 	.word	0x01010280
 8003bf8:	02020200 	.word	0x02020200
 8003bfc:	01ff0000 	.word	0x01ff0000
 8003c00:	52004000 	.word	0x52004000

08003c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003c08:	f7ff ffa6 	bl	8003b58 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c0c:	480c      	ldr	r0, [pc, #48]	@ (8003c40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c0e:	490d      	ldr	r1, [pc, #52]	@ (8003c44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c10:	4a0d      	ldr	r2, [pc, #52]	@ (8003c48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c14:	e002      	b.n	8003c1c <LoopCopyDataInit>

08003c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c1a:	3304      	adds	r3, #4

08003c1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8003c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c20:	d3f9      	bcc.n	8003c16 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c22:	4a0a      	ldr	r2, [pc, #40]	@ (8003c4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c24:	4c0a      	ldr	r4, [pc, #40]	@ (8003c50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c28:	e001      	b.n	8003c2e <LoopFillZerobss>

08003c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c2c:	3204      	adds	r2, #4

08003c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c30:	d3fb      	bcc.n	8003c2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003c32:	f008 fefb 	bl	800ca2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c36:	f7fe fe5b 	bl	80028f0 <main>
  bx  lr
 8003c3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c3c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003c40:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003c44:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8003c48:	0800d6b0 	.word	0x0800d6b0
  ldr r2, =_sbss
 8003c4c:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8003c50:	240bc20c 	.word	0x240bc20c

08003c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c54:	e7fe      	b.n	8003c54 <ADC_IRQHandler>
	...

08003c58 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003c58:	4b0f      	ldr	r3, [pc, #60]	@ (8003c98 <HAL_InitTick+0x40>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b90b      	cbnz	r3, 8003c62 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8003c5e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003c60:	4770      	bx	lr
{
 8003c62:	b510      	push	{r4, lr}
 8003c64:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003c66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8003c9c <HAL_InitTick+0x44>)
 8003c6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c70:	6810      	ldr	r0, [r2, #0]
 8003c72:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c76:	f000 f8e7 	bl	8003e48 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c7a:	b908      	cbnz	r0, 8003c80 <HAL_InitTick+0x28>
 8003c7c:	2c0f      	cmp	r4, #15
 8003c7e:	d901      	bls.n	8003c84 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8003c80:	2001      	movs	r0, #1
}
 8003c82:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c84:	2200      	movs	r2, #0
 8003c86:	4621      	mov	r1, r4
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8c:	f000 f880 	bl	8003d90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c90:	4b03      	ldr	r3, [pc, #12]	@ (8003ca0 <HAL_InitTick+0x48>)
 8003c92:	2000      	movs	r0, #0
 8003c94:	601c      	str	r4, [r3, #0]
}
 8003c96:	bd10      	pop	{r4, pc}
 8003c98:	24000010 	.word	0x24000010
 8003c9c:	2400000c 	.word	0x2400000c
 8003ca0:	24000014 	.word	0x24000014

08003ca4 <HAL_Init>:
{
 8003ca4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ca6:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003ca8:	4c12      	ldr	r4, [pc, #72]	@ (8003cf4 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003caa:	f000 f85f 	bl	8003d6c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003cae:	f002 fbf9 	bl	80064a4 <HAL_RCC_GetSysClockFreq>
 8003cb2:	4b11      	ldr	r3, [pc, #68]	@ (8003cf8 <HAL_Init+0x54>)
 8003cb4:	4911      	ldr	r1, [pc, #68]	@ (8003cfc <HAL_Init+0x58>)
 8003cb6:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003cb8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003cba:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003cbe:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003cc2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003cc4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003cc6:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8003cca:	490d      	ldr	r1, [pc, #52]	@ (8003d00 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003ccc:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003cd0:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003cd2:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8003cd6:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cd8:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003cda:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cdc:	f7ff ffbc 	bl	8003c58 <HAL_InitTick>
 8003ce0:	b110      	cbz	r0, 8003ce8 <HAL_Init+0x44>
    return HAL_ERROR;
 8003ce2:	2401      	movs	r4, #1
}
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	bd10      	pop	{r4, pc}
 8003ce8:	4604      	mov	r4, r0
  HAL_MspInit();
 8003cea:	f7ff fd1f 	bl	800372c <HAL_MspInit>
}
 8003cee:	4620      	mov	r0, r4
 8003cf0:	bd10      	pop	{r4, pc}
 8003cf2:	bf00      	nop
 8003cf4:	24000008 	.word	0x24000008
 8003cf8:	58024400 	.word	0x58024400
 8003cfc:	0800d358 	.word	0x0800d358
 8003d00:	2400000c 	.word	0x2400000c

08003d04 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003d04:	4a03      	ldr	r2, [pc, #12]	@ (8003d14 <HAL_IncTick+0x10>)
 8003d06:	4b04      	ldr	r3, [pc, #16]	@ (8003d18 <HAL_IncTick+0x14>)
 8003d08:	6811      	ldr	r1, [r2, #0]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	440b      	add	r3, r1
 8003d0e:	6013      	str	r3, [r2, #0]
}
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	240bc088 	.word	0x240bc088
 8003d18:	24000010 	.word	0x24000010

08003d1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003d1c:	4b01      	ldr	r3, [pc, #4]	@ (8003d24 <HAL_GetTick+0x8>)
 8003d1e:	6818      	ldr	r0, [r3, #0]
}
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	240bc088 	.word	0x240bc088

08003d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d28:	b538      	push	{r3, r4, r5, lr}
 8003d2a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003d2c:	f7ff fff6 	bl	8003d1c <HAL_GetTick>
 8003d30:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d32:	1c63      	adds	r3, r4, #1
 8003d34:	d002      	beq.n	8003d3c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d36:	4b04      	ldr	r3, [pc, #16]	@ (8003d48 <HAL_Delay+0x20>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d3c:	f7ff ffee 	bl	8003d1c <HAL_GetTick>
 8003d40:	1b40      	subs	r0, r0, r5
 8003d42:	42a0      	cmp	r0, r4
 8003d44:	d3fa      	bcc.n	8003d3c <HAL_Delay+0x14>
  {
  }
}
 8003d46:	bd38      	pop	{r3, r4, r5, pc}
 8003d48:	24000010 	.word	0x24000010

08003d4c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003d4c:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003d50:	6913      	ldr	r3, [r2, #16]
 8003d52:	f023 0302 	bic.w	r3, r3, #2
 8003d56:	6113      	str	r3, [r2, #16]
}
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop

08003d5c <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003d5c:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003d60:	6913      	ldr	r3, [r2, #16]
 8003d62:	f043 0302 	orr.w	r3, r3, #2
 8003d66:	6113      	str	r3, [r2, #16]
}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop

08003d6c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d6c:	4906      	ldr	r1, [pc, #24]	@ (8003d88 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d6e:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d72:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8003d74:	4b05      	ldr	r3, [pc, #20]	@ (8003d8c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d76:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d78:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d7c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d80:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8003d82:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003d84:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003d86:	4770      	bx	lr
 8003d88:	e000ed00 	.word	0xe000ed00
 8003d8c:	05fa0000 	.word	0x05fa0000

08003d90 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <HAL_NVIC_SetPriority+0x6c>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d98:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d9a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d9e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003da2:	f1be 0f04 	cmp.w	lr, #4
 8003da6:	bf28      	it	cs
 8003da8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dac:	f1bc 0f06 	cmp.w	ip, #6
 8003db0:	d91a      	bls.n	8003de8 <HAL_NVIC_SetPriority+0x58>
 8003db2:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003db6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dba:	fa03 f30c 	lsl.w	r3, r3, ip
 8003dbe:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8003dc6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc8:	fa03 f30e 	lsl.w	r3, r3, lr
 8003dcc:	ea21 0303 	bic.w	r3, r1, r3
 8003dd0:	fa03 f30c 	lsl.w	r3, r3, ip
 8003dd4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003ddc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8003dde:	db06      	blt.n	8003dee <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de0:	4a07      	ldr	r2, [pc, #28]	@ (8003e00 <HAL_NVIC_SetPriority+0x70>)
 8003de2:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003de4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003de8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dea:	4694      	mov	ip, r2
 8003dec:	e7e9      	b.n	8003dc2 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dee:	f000 000f 	and.w	r0, r0, #15
 8003df2:	4a04      	ldr	r2, [pc, #16]	@ (8003e04 <HAL_NVIC_SetPriority+0x74>)
 8003df4:	5413      	strb	r3, [r2, r0]
 8003df6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dfa:	bf00      	nop
 8003dfc:	e000ed00 	.word	0xe000ed00
 8003e00:	e000e400 	.word	0xe000e400
 8003e04:	e000ed14 	.word	0xe000ed14

08003e08 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	db07      	blt.n	8003e1c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f000 011f 	and.w	r1, r0, #31
 8003e12:	4a03      	ldr	r2, [pc, #12]	@ (8003e20 <HAL_NVIC_EnableIRQ+0x18>)
 8003e14:	0940      	lsrs	r0, r0, #5
 8003e16:	408b      	lsls	r3, r1
 8003e18:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	e000e100 	.word	0xe000e100

08003e24 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e24:	2800      	cmp	r0, #0
 8003e26:	db0c      	blt.n	8003e42 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e28:	0943      	lsrs	r3, r0, #5
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f000 001f 	and.w	r0, r0, #31
 8003e30:	4904      	ldr	r1, [pc, #16]	@ (8003e44 <HAL_NVIC_DisableIRQ+0x20>)
 8003e32:	3320      	adds	r3, #32
 8003e34:	4082      	lsls	r2, r0
 8003e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e3e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003e42:	4770      	bx	lr
 8003e44:	e000e100 	.word	0xe000e100

08003e48 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e48:	1e43      	subs	r3, r0, #1
 8003e4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e4e:	d301      	bcc.n	8003e54 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e50:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003e52:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e54:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e58:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5a:	4905      	ldr	r1, [pc, #20]	@ (8003e70 <HAL_SYSTICK_Config+0x28>)
 8003e5c:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e60:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e62:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e64:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e68:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e6a:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	e000ed00 	.word	0xe000ed00

08003e74 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e74:	2800      	cmp	r0, #0
 8003e76:	db08      	blt.n	8003e8a <HAL_NVIC_ClearPendingIRQ+0x16>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e78:	0943      	lsrs	r3, r0, #5
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f000 001f 	and.w	r0, r0, #31
 8003e80:	4902      	ldr	r1, [pc, #8]	@ (8003e8c <HAL_NVIC_ClearPendingIRQ+0x18>)
 8003e82:	3360      	adds	r3, #96	@ 0x60
 8003e84:	4082      	lsls	r2, r0
 8003e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8003e8a:	4770      	bx	lr
 8003e8c:	e000e100 	.word	0xe000e100

08003e90 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d035      	beq.n	8003f00 <HAL_DMA2D_Init+0x70>
{
 8003e94:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003e96:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003ea0:	b34b      	cbz	r3, 8003ef6 <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003ea2:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ea4:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003ea6:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ea8:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003eac:	69e1      	ldr	r1, [r4, #28]
 8003eae:	681d      	ldr	r5, [r3, #0]
 8003eb0:	4814      	ldr	r0, [pc, #80]	@ (8003f04 <HAL_DMA2D_Init+0x74>)
 8003eb2:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003eb4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003eb6:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003eb8:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003eba:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003ebc:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003ebe:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003ec0:	4302      	orrs	r2, r0
 8003ec2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ec4:	4810      	ldr	r0, [pc, #64]	@ (8003f08 <HAL_DMA2D_Init+0x78>)
 8003ec6:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003ec8:	4910      	ldr	r1, [pc, #64]	@ (8003f0c <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003eca:	4302      	orrs	r2, r0
 8003ecc:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003ece:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ed0:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003ed2:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003ed6:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003ed8:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003eda:	6419      	str	r1, [r3, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003edc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ede:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003ee2:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003ee4:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003eec:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003eee:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003ef0:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8003ef4:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8003ef6:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8003efa:	f7ff fc29 	bl	8003750 <HAL_DMA2D_MspInit>
 8003efe:	e7d0      	b.n	8003ea2 <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 8003f00:	2001      	movs	r0, #1
}
 8003f02:	4770      	bx	lr
 8003f04:	fff8ffbf 	.word	0xfff8ffbf
 8003f08:	fffffef8 	.word	0xfffffef8
 8003f0c:	ffff0000 	.word	0xffff0000

08003f10 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003f10:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003f12:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 8003f16:	2c01      	cmp	r4, #1
 8003f18:	d03a      	beq.n	8003f90 <HAL_DMA2D_Start+0x80>
 8003f1a:	2401      	movs	r4, #1
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003f1c:	9d03      	ldr	r5, [sp, #12]
  __HAL_LOCK(hdma2d);
 8003f1e:	f880 4060 	strb.w	r4, [r0, #96]	@ 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003f22:	2402      	movs	r4, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003f24:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003f28:	f880 4061 	strb.w	r4, [r0, #97]	@ 0x61

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003f2c:	e9d0 4600 	ldrd	r4, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003f30:	6c65      	ldr	r5, [r4, #68]	@ 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003f32:	f5b6 3f40 	cmp.w	r6, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003f36:	f005 4c40 	and.w	ip, r5, #3221225472	@ 0xc0000000
 8003f3a:	ea43 030c 	orr.w	r3, r3, ip
 8003f3e:	6463      	str	r3, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003f40:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003f42:	d00a      	beq.n	8003f5a <HAL_DMA2D_Start+0x4a>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8003f44:	f5b6 2f80 	cmp.w	r6, #262144	@ 0x40000
 8003f48:	d025      	beq.n	8003f96 <HAL_DMA2D_Start+0x86>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003f4a:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 8003f4c:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8003f4e:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	6023      	str	r3, [r4, #0]
}
 8003f56:	bc70      	pop	{r4, r5, r6}
 8003f58:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003f5a:	6883      	ldr	r3, [r0, #8]
 8003f5c:	b1b3      	cbz	r3, 8003f8c <HAL_DMA2D_Start+0x7c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d026      	beq.n	8003fb0 <HAL_DMA2D_Start+0xa0>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003f62:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003f64:	f401 027f 	and.w	r2, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003f68:	f401 457f 	and.w	r5, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003f6c:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003f6e:	d022      	beq.n	8003fb6 <HAL_DMA2D_Start+0xa6>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003f70:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003f72:	f001 417f 	and.w	r1, r1, #4278190080	@ 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003f76:	d010      	beq.n	8003f9a <HAL_DMA2D_Start+0x8a>
      tmp2 = (tmp2 >> 20U);
 8003f78:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 8003f7a:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003f7c:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 8003f7e:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003f80:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8003f84:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8003f88:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003f8c:	63a1      	str	r1, [r4, #56]	@ 0x38
 8003f8e:	e7dd      	b.n	8003f4c <HAL_DMA2D_Start+0x3c>
  __HAL_LOCK(hdma2d);
 8003f90:	2002      	movs	r0, #2
}
 8003f92:	bc70      	pop	{r4, r5, r6}
 8003f94:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8003f96:	6161      	str	r1, [r4, #20]
 8003f98:	e7d8      	b.n	8003f4c <HAL_DMA2D_Start+0x3c>
      tmp2 = (tmp2 >> 19U);
 8003f9a:	0cd3      	lsrs	r3, r2, #19
      tmp3 = (tmp3 >> 11U);
 8003f9c:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003f9e:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8003fa0:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003fa2:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8003fa6:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8003faa:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8003fae:	e7ed      	b.n	8003f8c <HAL_DMA2D_Start+0x7c>
      tmp = (tmp3 | tmp2 | tmp4);
 8003fb0:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8003fb4:	e7ea      	b.n	8003f8c <HAL_DMA2D_Start+0x7c>
      tmp2 = (tmp2 >> 19U);
 8003fb6:	0cd3      	lsrs	r3, r2, #19
      tmp3 = (tmp3 >> 10U);
 8003fb8:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003fba:	02db      	lsls	r3, r3, #11
 8003fbc:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8003fc0:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 8003fc4:	e7e2      	b.n	8003f8c <HAL_DMA2D_Start+0x7c>
 8003fc6:	bf00      	nop

08003fc8 <HAL_DMA2D_PollForTransfer>:
{
 8003fc8:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8003fca:	2300      	movs	r3, #0
{
 8003fcc:	b082      	sub	sp, #8
 8003fce:	4604      	mov	r4, r0
 8003fd0:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8003fd2:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003fd4:	6803      	ldr	r3, [r0, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	07d6      	lsls	r6, r2, #31
 8003fda:	d40f      	bmi.n	8003ffc <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003fdc:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003fde:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003fe0:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 8003fe2:	0691      	lsls	r1, r2, #26
 8003fe4:	d432      	bmi.n	800404c <HAL_DMA2D_PollForTransfer+0x84>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003fe6:	2112      	movs	r1, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003fe8:	2201      	movs	r2, #1
  return HAL_OK;
 8003fea:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003fec:	6099      	str	r1, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003fee:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        __HAL_UNLOCK(hdma2d);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 8003ff8:	b002      	add	sp, #8
 8003ffa:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8003ffc:	f7ff fe8e 	bl	8003d1c <HAL_GetTick>
 8004000:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004002:	1c68      	adds	r0, r5, #1
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	d152      	bne.n	80040ae <HAL_DMA2D_PollForTransfer+0xe6>
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	0796      	lsls	r6, r2, #30
 800400c:	d4e6      	bmi.n	8003fdc <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004012:	9a01      	ldr	r2, [sp, #4]
 8004014:	f012 0f21 	tst.w	r2, #33	@ 0x21
 8004018:	d0f6      	beq.n	8004008 <HAL_DMA2D_PollForTransfer+0x40>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800401a:	9a01      	ldr	r2, [sp, #4]
 800401c:	0691      	lsls	r1, r2, #26
 800401e:	d503      	bpl.n	8004028 <HAL_DMA2D_PollForTransfer+0x60>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004020:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004022:	f042 0202 	orr.w	r2, r2, #2
 8004026:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004028:	9a01      	ldr	r2, [sp, #4]
 800402a:	07d2      	lsls	r2, r2, #31
 800402c:	d503      	bpl.n	8004036 <HAL_DMA2D_PollForTransfer+0x6e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800402e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004030:	f042 0201 	orr.w	r2, r2, #1
 8004034:	6662      	str	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004036:	2121      	movs	r1, #33	@ 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004038:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800403a:	6099      	str	r1, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800403c:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        return HAL_ERROR;
 8004040:	2001      	movs	r0, #1
        __HAL_UNLOCK(hdma2d);
 8004042:	2300      	movs	r3, #0
 8004044:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 8004048:	b002      	add	sp, #8
 800404a:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800404c:	f7ff fe66 	bl	8003d1c <HAL_GetTick>
 8004050:	1c6a      	adds	r2, r5, #1
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004052:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004054:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004056:	d13b      	bne.n	80040d0 <HAL_DMA2D_PollForTransfer+0x108>
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	06d1      	lsls	r1, r2, #27
 800405c:	d4c3      	bmi.n	8003fe6 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004062:	9a01      	ldr	r2, [sp, #4]
 8004064:	f012 0f29 	tst.w	r2, #41	@ 0x29
 8004068:	d0f6      	beq.n	8004058 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800406a:	9a01      	ldr	r2, [sp, #4]
 800406c:	0716      	lsls	r6, r2, #28
 800406e:	d503      	bpl.n	8004078 <HAL_DMA2D_PollForTransfer+0xb0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004070:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004072:	f042 0204 	orr.w	r2, r2, #4
 8004076:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004078:	9a01      	ldr	r2, [sp, #4]
 800407a:	0695      	lsls	r5, r2, #26
 800407c:	d503      	bpl.n	8004086 <HAL_DMA2D_PollForTransfer+0xbe>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800407e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004080:	f042 0202 	orr.w	r2, r2, #2
 8004084:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004086:	9a01      	ldr	r2, [sp, #4]
 8004088:	07d0      	lsls	r0, r2, #31
 800408a:	d503      	bpl.n	8004094 <HAL_DMA2D_PollForTransfer+0xcc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800408c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	6662      	str	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004094:	2129      	movs	r1, #41	@ 0x29
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004096:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004098:	6099      	str	r1, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800409a:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        return HAL_ERROR;
 800409e:	e7cf      	b.n	8004040 <HAL_DMA2D_PollForTransfer+0x78>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040a0:	f7ff fe3c 	bl	8003d1c <HAL_GetTick>
 80040a4:	1b80      	subs	r0, r0, r6
 80040a6:	42a8      	cmp	r0, r5
 80040a8:	d81c      	bhi.n	80040e4 <HAL_DMA2D_PollForTransfer+0x11c>
 80040aa:	b1dd      	cbz	r5, 80040e4 <HAL_DMA2D_PollForTransfer+0x11c>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	0790      	lsls	r0, r2, #30
 80040b2:	d493      	bmi.n	8003fdc <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80040b8:	9a01      	ldr	r2, [sp, #4]
 80040ba:	f012 0f21 	tst.w	r2, #33	@ 0x21
 80040be:	d0ef      	beq.n	80040a0 <HAL_DMA2D_PollForTransfer+0xd8>
 80040c0:	e7ab      	b.n	800401a <HAL_DMA2D_PollForTransfer+0x52>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040c2:	f7ff fe2b 	bl	8003d1c <HAL_GetTick>
 80040c6:	1b80      	subs	r0, r0, r6
 80040c8:	42a8      	cmp	r0, r5
 80040ca:	d80b      	bhi.n	80040e4 <HAL_DMA2D_PollForTransfer+0x11c>
 80040cc:	b155      	cbz	r5, 80040e4 <HAL_DMA2D_PollForTransfer+0x11c>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	06d2      	lsls	r2, r2, #27
 80040d4:	d487      	bmi.n	8003fe6 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80040da:	9a01      	ldr	r2, [sp, #4]
 80040dc:	f012 0f29 	tst.w	r2, #41	@ 0x29
 80040e0:	d0ef      	beq.n	80040c2 <HAL_DMA2D_PollForTransfer+0xfa>
 80040e2:	e7c2      	b.n	800406a <HAL_DMA2D_PollForTransfer+0xa2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80040e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80040e6:	2203      	movs	r2, #3
          return HAL_TIMEOUT;
 80040e8:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80040ea:	f043 0320 	orr.w	r3, r3, #32
 80040ee:	6663      	str	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80040f0:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
          return HAL_TIMEOUT;
 80040f4:	e77d      	b.n	8003ff2 <HAL_DMA2D_PollForTransfer+0x2a>
 80040f6:	bf00      	nop

080040f8 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 80040f8:	f890 2060 	ldrb.w	r2, [r0, #96]	@ 0x60
 80040fc:	2a01      	cmp	r2, #1
 80040fe:	d05f      	beq.n	80041c0 <HAL_DMA2D_ConfigLayer+0xc8>
 8004100:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004102:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004106:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004108:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 800410c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 8004110:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8004112:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004114:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  __HAL_LOCK(hdma2d);
 8004118:	f883 4060 	strb.w	r4, [r3, #96]	@ 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800411c:	6b82      	ldr	r2, [r0, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800411e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8004120:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004122:	0512      	lsls	r2, r2, #20
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004124:	6b46      	ldr	r6, [r0, #52]	@ 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004126:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800412a:	f1a5 0e09 	sub.w	lr, r5, #9
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800412e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004130:	432a      	orrs	r2, r5
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004132:	f1be 0f01 	cmp.w	lr, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004136:	ea42 5244 	orr.w	r2, r2, r4, lsl #21
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800413a:	681c      	ldr	r4, [r3, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800413c:	d923      	bls.n	8004186 <HAL_DMA2D_ConfigLayer+0x8e>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800413e:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004142:	b971      	cbnz	r1, 8004162 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004144:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004146:	491f      	ldr	r1, [pc, #124]	@ (80041c4 <HAL_DMA2D_ConfigLayer+0xcc>)
 8004148:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800414a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800414c:	4311      	orrs	r1, r2
 800414e:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004150:	61a0      	str	r0, [r4, #24]
  __HAL_UNLOCK(hdma2d);
 8004152:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004154:	2101      	movs	r1, #1
  return HAL_OK;
 8004156:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004158:	f883 1061 	strb.w	r1, [r3, #97]	@ 0x61
  __HAL_UNLOCK(hdma2d);
 800415c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 8004160:	bd70      	pop	{r4, r5, r6, pc}
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8004162:	2d0b      	cmp	r5, #11
 8004164:	d12a      	bne.n	80041bc <HAL_DMA2D_ConfigLayer+0xc4>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8004166:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8004168:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 800416c:	4816      	ldr	r0, [pc, #88]	@ (80041c8 <HAL_DMA2D_ConfigLayer+0xd0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800416e:	ebac 0c01 	sub.w	ip, ip, r1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004172:	69e1      	ldr	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004174:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004178:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800417a:	f8dc 5028 	ldr.w	r5, [ip, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800417e:	430a      	orrs	r2, r1
 8004180:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004182:	6125      	str	r5, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004184:	e7e5      	b.n	8004152 <HAL_DMA2D_ConfigLayer+0x5a>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004186:	f006 457f 	and.w	r5, r6, #4278190080	@ 0xff000000
 800418a:	432a      	orrs	r2, r5
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800418c:	b959      	cbnz	r1, 80041a6 <HAL_DMA2D_ConfigLayer+0xae>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800418e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004190:	490c      	ldr	r1, [pc, #48]	@ (80041c4 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004192:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004194:	4001      	ands	r1, r0
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004196:	6b58      	ldr	r0, [r3, #52]	@ 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004198:	4311      	orrs	r1, r2
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800419a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800419e:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80041a0:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80041a2:	62a0      	str	r0, [r4, #40]	@ 0x28
 80041a4:	e7d5      	b.n	8004152 <HAL_DMA2D_ConfigLayer+0x5a>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80041a6:	69e5      	ldr	r5, [r4, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80041a8:	f026 467f 	bic.w	r6, r6, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80041ac:	4905      	ldr	r1, [pc, #20]	@ (80041c4 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80041ae:	6a80      	ldr	r0, [r0, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80041b0:	4029      	ands	r1, r5
 80041b2:	4311      	orrs	r1, r2
 80041b4:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80041b6:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80041b8:	6226      	str	r6, [r4, #32]
 80041ba:	e7ca      	b.n	8004152 <HAL_DMA2D_ConfigLayer+0x5a>
 80041bc:	4801      	ldr	r0, [pc, #4]	@ (80041c4 <HAL_DMA2D_ConfigLayer+0xcc>)
 80041be:	e7d6      	b.n	800416e <HAL_DMA2D_ConfigLayer+0x76>
  __HAL_LOCK(hdma2d);
 80041c0:	2002      	movs	r0, #2
}
 80041c2:	4770      	bx	lr
 80041c4:	00ccfff0 	.word	0x00ccfff0
 80041c8:	00c0fff0 	.word	0x00c0fff0

080041cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041d0:	680c      	ldr	r4, [r1, #0]
{
 80041d2:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041d4:	2c00      	cmp	r4, #0
 80041d6:	f000 80a5 	beq.w	8004324 <HAL_GPIO_Init+0x158>
  uint32_t position = 0x00U;
 80041da:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041dc:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041e0:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041e4:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041e6:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 80041ea:	ea1c 0a04 	ands.w	sl, ip, r4
 80041ee:	f000 8094 	beq.w	800431a <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041f2:	9900      	ldr	r1, [sp, #0]
 80041f4:	005f      	lsls	r7, r3, #1
 80041f6:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041f8:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041fa:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041fe:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004202:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004206:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004208:	f1b8 0f01 	cmp.w	r8, #1
 800420c:	f240 808d 	bls.w	800432a <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004210:	2a03      	cmp	r2, #3
 8004212:	f040 80cb 	bne.w	80043ac <HAL_GPIO_Init+0x1e0>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004216:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8004218:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800421a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800421e:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004222:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8004226:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004228:	d077      	beq.n	800431a <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800422a:	4e7f      	ldr	r6, [pc, #508]	@ (8004428 <HAL_GPIO_Init+0x25c>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800422c:	f003 0703 	and.w	r7, r3, #3
 8004230:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004232:	f8d6 2154 	ldr.w	r2, [r6, #340]	@ 0x154
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004236:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004238:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800423c:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004240:	497a      	ldr	r1, [pc, #488]	@ (800442c <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004242:	f8c6 2154 	str.w	r2, [r6, #340]	@ 0x154
 8004246:	f8d6 2154 	ldr.w	r2, [r6, #340]	@ 0x154
 800424a:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800424e:	4288      	cmp	r0, r1
 8004250:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004254:	f002 0202 	and.w	r2, r2, #2
 8004258:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800425c:	9203      	str	r2, [sp, #12]
 800425e:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004260:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004262:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004266:	d031      	beq.n	80042cc <HAL_GPIO_Init+0x100>
 8004268:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800426c:	4288      	cmp	r0, r1
 800426e:	f000 80b0 	beq.w	80043d2 <HAL_GPIO_Init+0x206>
 8004272:	496f      	ldr	r1, [pc, #444]	@ (8004430 <HAL_GPIO_Init+0x264>)
 8004274:	4288      	cmp	r0, r1
 8004276:	f000 80b2 	beq.w	80043de <HAL_GPIO_Init+0x212>
 800427a:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8004434 <HAL_GPIO_Init+0x268>
 800427e:	4560      	cmp	r0, ip
 8004280:	f000 80a1 	beq.w	80043c6 <HAL_GPIO_Init+0x1fa>
 8004284:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 8004438 <HAL_GPIO_Init+0x26c>
 8004288:	4560      	cmp	r0, ip
 800428a:	f000 80b4 	beq.w	80043f6 <HAL_GPIO_Init+0x22a>
 800428e:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 800443c <HAL_GPIO_Init+0x270>
 8004292:	4560      	cmp	r0, ip
 8004294:	f000 80b5 	beq.w	8004402 <HAL_GPIO_Init+0x236>
 8004298:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 8004440 <HAL_GPIO_Init+0x274>
 800429c:	4560      	cmp	r0, ip
 800429e:	f000 80a4 	beq.w	80043ea <HAL_GPIO_Init+0x21e>
 80042a2:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8004444 <HAL_GPIO_Init+0x278>
 80042a6:	4560      	cmp	r0, ip
 80042a8:	f000 80b1 	beq.w	800440e <HAL_GPIO_Init+0x242>
 80042ac:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8004448 <HAL_GPIO_Init+0x27c>
 80042b0:	4560      	cmp	r0, ip
 80042b2:	f000 80b2 	beq.w	800441a <HAL_GPIO_Init+0x24e>
 80042b6:	f8df c194 	ldr.w	ip, [pc, #404]	@ 800444c <HAL_GPIO_Init+0x280>
 80042ba:	4560      	cmp	r0, ip
 80042bc:	bf0c      	ite	eq
 80042be:	f04f 0c09 	moveq.w	ip, #9
 80042c2:	f04f 0c0a 	movne.w	ip, #10
 80042c6:	fa0c f707 	lsl.w	r7, ip, r7
 80042ca:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042cc:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042ce:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 80042d0:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 80042d4:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 80042d8:	bf4c      	ite	mi
 80042da:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 80042de:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042e0:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 80042e2:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 80042e6:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 80042ea:	bf54      	ite	pl
 80042ec:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80042ee:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042f2:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 80042f4:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80042f8:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 80042fc:	bf54      	ite	pl
 80042fe:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8004300:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004304:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8004306:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800430a:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 800430e:	bf54      	ite	pl
 8004310:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8004312:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004316:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 800431a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800431c:	fa34 f203 	lsrs.w	r2, r4, r3
 8004320:	f47f af61 	bne.w	80041e6 <HAL_GPIO_Init+0x1a>
  }
}
 8004324:	b005      	add	sp, #20
 8004326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 800432a:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800432c:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 800432e:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004332:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004334:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004338:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800433c:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800433e:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004342:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 8004344:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004348:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 800434c:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004350:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004354:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004358:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 800435c:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004360:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 8004364:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004368:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800436c:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8004370:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004374:	f47f af4f 	bne.w	8004216 <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004378:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800437c:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 800437e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004382:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004386:	6909      	ldr	r1, [r1, #16]
 8004388:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800438c:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 8004390:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004394:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004396:	210f      	movs	r1, #15
 8004398:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800439c:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800439e:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043a2:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 80043a6:	f8c8 c020 	str.w	ip, [r8, #32]
 80043aa:	e734      	b.n	8004216 <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043ac:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 80043ae:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043b2:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043b4:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043b8:	fa01 fc07 	lsl.w	ip, r1, r7
 80043bc:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 80043c0:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043c4:	e727      	b.n	8004216 <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043c6:	f04f 0c03 	mov.w	ip, #3
 80043ca:	fa0c f707 	lsl.w	r7, ip, r7
 80043ce:	433a      	orrs	r2, r7
 80043d0:	e77c      	b.n	80042cc <HAL_GPIO_Init+0x100>
 80043d2:	f04f 0c01 	mov.w	ip, #1
 80043d6:	fa0c f707 	lsl.w	r7, ip, r7
 80043da:	433a      	orrs	r2, r7
 80043dc:	e776      	b.n	80042cc <HAL_GPIO_Init+0x100>
 80043de:	f04f 0c02 	mov.w	ip, #2
 80043e2:	fa0c f707 	lsl.w	r7, ip, r7
 80043e6:	433a      	orrs	r2, r7
 80043e8:	e770      	b.n	80042cc <HAL_GPIO_Init+0x100>
 80043ea:	f04f 0c06 	mov.w	ip, #6
 80043ee:	fa0c f707 	lsl.w	r7, ip, r7
 80043f2:	433a      	orrs	r2, r7
 80043f4:	e76a      	b.n	80042cc <HAL_GPIO_Init+0x100>
 80043f6:	f04f 0c04 	mov.w	ip, #4
 80043fa:	fa0c f707 	lsl.w	r7, ip, r7
 80043fe:	433a      	orrs	r2, r7
 8004400:	e764      	b.n	80042cc <HAL_GPIO_Init+0x100>
 8004402:	f04f 0c05 	mov.w	ip, #5
 8004406:	fa0c f707 	lsl.w	r7, ip, r7
 800440a:	433a      	orrs	r2, r7
 800440c:	e75e      	b.n	80042cc <HAL_GPIO_Init+0x100>
 800440e:	f04f 0c07 	mov.w	ip, #7
 8004412:	fa0c f707 	lsl.w	r7, ip, r7
 8004416:	433a      	orrs	r2, r7
 8004418:	e758      	b.n	80042cc <HAL_GPIO_Init+0x100>
 800441a:	f04f 0c08 	mov.w	ip, #8
 800441e:	fa0c f707 	lsl.w	r7, ip, r7
 8004422:	433a      	orrs	r2, r7
 8004424:	e752      	b.n	80042cc <HAL_GPIO_Init+0x100>
 8004426:	bf00      	nop
 8004428:	58024400 	.word	0x58024400
 800442c:	58020000 	.word	0x58020000
 8004430:	58020800 	.word	0x58020800
 8004434:	58020c00 	.word	0x58020c00
 8004438:	58021000 	.word	0x58021000
 800443c:	58021400 	.word	0x58021400
 8004440:	58021800 	.word	0x58021800
 8004444:	58021c00 	.word	0x58021c00
 8004448:	58022000 	.word	0x58022000
 800444c:	58022400 	.word	0x58022400

08004450 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004450:	6903      	ldr	r3, [r0, #16]
 8004452:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004454:	bf14      	ite	ne
 8004456:	2001      	movne	r0, #1
 8004458:	2000      	moveq	r0, #0
 800445a:	4770      	bx	lr

0800445c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800445c:	b902      	cbnz	r2, 8004460 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800445e:	0409      	lsls	r1, r1, #16
 8004460:	6181      	str	r1, [r0, #24]
  }
}
 8004462:	4770      	bx	lr

08004464 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004464:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004468:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 800446c:	4201      	tst	r1, r0
 800446e:	d100      	bne.n	8004472 <HAL_GPIO_EXTI_IRQHandler+0xe>
 8004470:	4770      	bx	lr
{
 8004472:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004474:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004478:	f7ff f926 	bl	80036c8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800447c:	bd08      	pop	{r3, pc}
 800447e:	bf00      	nop

08004480 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8004480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004484:	4699      	mov	r9, r3
 8004486:	4680      	mov	r8, r0
 8004488:	460d      	mov	r5, r1
 800448a:	4614      	mov	r4, r2

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800448c:	7803      	ldrb	r3, [r0, #0]
 800448e:	2601      	movs	r6, #1
  p = 0;
 8004490:	2700      	movs	r7, #0
 8004492:	e005      	b.n	80044a0 <JPEG_Bits_To_SizeCodes+0x20>
    i = (uint32_t)Bits[l];
 8004494:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    if ((p + i) > 256UL)
 8004498:	19da      	adds	r2, r3, r7
 800449a:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800449e:	d83a      	bhi.n	8004516 <JPEG_Bits_To_SizeCodes+0x96>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 80044a0:	19e8      	adds	r0, r5, r7
 80044a2:	461a      	mov	r2, r3
 80044a4:	4631      	mov	r1, r6
    while (i != 0UL)
 80044a6:	b113      	cbz	r3, 80044ae <JPEG_Bits_To_SizeCodes+0x2e>
      p++;
 80044a8:	441f      	add	r7, r3
      Huffsize[p] = (uint8_t) l + 1U;
 80044aa:	f008 fab1 	bl	800ca10 <memset>
  for (l = 0; l < 16UL; l++)
 80044ae:	2e10      	cmp	r6, #16
    if ((p + i) > 256UL)
 80044b0:	f106 0601 	add.w	r6, r6, #1
  for (l = 0; l < 16UL; l++)
 80044b4:	d1ee      	bne.n	8004494 <JPEG_Bits_To_SizeCodes+0x14>
      i--;
    }
  }
  Huffsize[p] = 0;
 80044b6:	2300      	movs	r3, #0
 80044b8:	55eb      	strb	r3, [r5, r7]
  *LastK = p;
 80044ba:	f8c9 7000 	str.w	r7, [r9]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
  si = Huffsize[0];
 80044be:	7829      	ldrb	r1, [r5, #0]
 80044c0:	460a      	mov	r2, r1
  p = 0;
  while (Huffsize[p] != 0U)
 80044c2:	b329      	cbz	r1, 8004510 <JPEG_Bits_To_SizeCodes+0x90>
  code = 0;
 80044c4:	4699      	mov	r9, r3
 80044c6:	f06f 4840 	mvn.w	r8, #3221225472	@ 0xc0000000
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80044ca:	2701      	movs	r7, #1
  p = 0;
 80044cc:	461e      	mov	r6, r3
    while (((uint32_t) Huffsize[p]) == si)
 80044ce:	4291      	cmp	r1, r2
 80044d0:	d124      	bne.n	800451c <JPEG_Bits_To_SizeCodes+0x9c>
 80044d2:	eb06 0008 	add.w	r0, r6, r8
 80044d6:	eb05 0c06 	add.w	ip, r5, r6
 80044da:	464b      	mov	r3, r9
 80044dc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
      Huffcode[p] = code;
 80044e0:	f840 3f04 	str.w	r3, [r0, #4]!
      code++;
 80044e4:	4619      	mov	r1, r3
    while (((uint32_t) Huffsize[p]) == si)
 80044e6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
      code++;
 80044ea:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 80044ec:	4596      	cmp	lr, r2
 80044ee:	d0f7      	beq.n	80044e0 <JPEG_Bits_To_SizeCodes+0x60>
 80044f0:	3601      	adds	r6, #1
 80044f2:	eba6 0609 	sub.w	r6, r6, r9
      p++;
 80044f6:	440e      	add	r6, r1
    if(si > 31UL)
 80044f8:	2a1f      	cmp	r2, #31
 80044fa:	d80c      	bhi.n	8004516 <JPEG_Bits_To_SizeCodes+0x96>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80044fc:	fa07 f102 	lsl.w	r1, r7, r2
 8004500:	4299      	cmp	r1, r3
 8004502:	d908      	bls.n	8004516 <JPEG_Bits_To_SizeCodes+0x96>
  while (Huffsize[p] != 0U)
 8004504:	5da9      	ldrb	r1, [r5, r6]
    {
      return HAL_ERROR;
    }
    code <<= 1;
 8004506:	ea4f 0943 	mov.w	r9, r3, lsl #1
    si++;
 800450a:	3201      	adds	r2, #1
  while (Huffsize[p] != 0U)
 800450c:	2900      	cmp	r1, #0
 800450e:	d1de      	bne.n	80044ce <JPEG_Bits_To_SizeCodes+0x4e>
  }
  /* Return function status */
  return HAL_OK;
 8004510:	2000      	movs	r0, #0
}
 8004512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 8004516:	2001      	movs	r0, #1
}
 8004518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while (((uint32_t) Huffsize[p]) == si)
 800451c:	464b      	mov	r3, r9
 800451e:	e7eb      	b.n	80044f8 <JPEG_Bits_To_SizeCodes+0x78>

08004520 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8004520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004522:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 8004526:	460d      	mov	r5, r1
 8004528:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800452a:	ab01      	add	r3, sp, #4
 800452c:	aa43      	add	r2, sp, #268	@ 0x10c
 800452e:	a902      	add	r1, sp, #8
 8004530:	f7ff ffa6 	bl	8004480 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8004534:	b9d0      	cbnz	r0, 800456c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8004536:	9f01      	ldr	r7, [sp, #4]
 8004538:	b1c7      	cbz	r7, 800456c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
 800453a:	370f      	adds	r7, #15
 800453c:	f50d 7e86 	add.w	lr, sp, #268	@ 0x10c
 8004540:	a902      	add	r1, sp, #8
 8004542:	f104 0c0f 	add.w	ip, r4, #15
 8004546:	4427      	add	r7, r4
 8004548:	e009      	b.n	800455e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x3e>
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800454a:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (k < lastK)
 800454e:	45bc      	cmp	ip, r7
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004550:	f85e 6b04 	ldr.w	r6, [lr], #4
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004554:	f102 32ff 	add.w	r2, r2, #4294967295
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004558:	60e6      	str	r6, [r4, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800455a:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
 800455c:	d006      	beq.n	800456c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    l = DC_BitsValsTable->HuffVal[k];
 800455e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8004562:	2b0b      	cmp	r3, #11
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004564:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8004568:	d9ef      	bls.n	800454a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800456a:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800456c:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 8004570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004572:	bf00      	nop

08004574 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8004574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8004578:	6804      	ldr	r4, [r0, #0]
{
 800457a:	b093      	sub	sp, #76	@ 0x4c
 800457c:	4608      	mov	r0, r1
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800457e:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 8004582:	429a      	cmp	r2, r3
 8004584:	f000 809d 	beq.w	80046c2 <JPEG_Set_HuffDC_Mem+0x14e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8004588:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 800458c:	429a      	cmp	r2, r3
 800458e:	d003      	beq.n	8004598 <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 8004590:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8004592:	b013      	add	sp, #76	@ 0x4c
 8004594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004598:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800459c:	a903      	add	r1, sp, #12
 800459e:	f7ff ffbf 	bl	8004520 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 80045a2:	2800      	cmp	r0, #0
 80045a4:	d1f5      	bne.n	8004592 <JPEG_Set_HuffDC_Mem+0x1e>
    *addressDef = 0x0FFF0FFF;
 80045a6:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80045aa:	f89d a017 	ldrb.w	sl, [sp, #23]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80045ae:	f89d e016 	ldrb.w	lr, [sp, #22]
    *addressDef = 0x0FFF0FFF;
 80045b2:	6023      	str	r3, [r4, #0]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80045b4:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    *addressDef = 0x0FFF0FFF;
 80045b8:	6063      	str	r3, [r4, #4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80045ba:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80045be:	f89d 300e 	ldrb.w	r3, [sp, #14]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80045c2:	f40a 6a70 	and.w	sl, sl, #3840	@ 0xf00
 80045c6:	f89d 2044 	ldrb.w	r2, [sp, #68]	@ 0x44
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80045ca:	f40e 6e70 	and.w	lr, lr, #3840	@ 0xf00
 80045ce:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80045d0:	f89d 9015 	ldrb.w	r9, [sp, #21]
 80045d4:	ea4a 0a02 	orr.w	sl, sl, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80045d8:	f89d c014 	ldrb.w	ip, [sp, #20]
 80045dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80045e0:	ea4f 2909 	mov.w	r9, r9, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80045e4:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80045e8:	f89d 8013 	ldrb.w	r8, [sp, #19]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80045ec:	9301      	str	r3, [sp, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80045ee:	f409 6970 	and.w	r9, r9, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80045f2:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 80045f6:	f40c 6c70 	and.w	ip, ip, #3840	@ 0xf00
 80045fa:	f89d 1012 	ldrb.w	r1, [sp, #18]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80045fe:	ea4f 2808 	mov.w	r8, r8, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004602:	ea4e 0e03 	orr.w	lr, lr, r3
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004606:	f89d 7011 	ldrb.w	r7, [sp, #17]
 800460a:	f408 6870 	and.w	r8, r8, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800460e:	0209      	lsls	r1, r1, #8
      *address = lsb | (msb << 16);
 8004610:	ea4e 4e0a 	orr.w	lr, lr, sl, lsl #16
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004614:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8004618:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800461c:	023f      	lsls	r7, r7, #8
      *address = lsb | (msb << 16);
 800461e:	f844 ec04 	str.w	lr, [r4, #-4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004622:	0212      	lsls	r2, r2, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004624:	f89d e03c 	ldrb.w	lr, [sp, #60]	@ 0x3c
 8004628:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800462c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004630:	f89d 600f 	ldrb.w	r6, [sp, #15]
 8004634:	ea49 090e 	orr.w	r9, r9, lr
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004638:	f89d e038 	ldrb.w	lr, [sp, #56]	@ 0x38
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800463c:	0236      	lsls	r6, r6, #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800463e:	9b01      	ldr	r3, [sp, #4]
 8004640:	ea4c 0c0e 	orr.w	ip, ip, lr
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004644:	f89d 500d 	ldrb.w	r5, [sp, #13]
 8004648:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800464c:	f89d b00c 	ldrb.w	fp, [sp, #12]
      *address = lsb | (msb << 16);
 8004650:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004654:	022d      	lsls	r5, r5, #8
      *address = lsb | (msb << 16);
 8004656:	f844 cc08 	str.w	ip, [r4, #-8]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800465a:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800465e:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8004662:	f405 6570 	and.w	r5, r5, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004666:	f40b 6b70 	and.w	fp, fp, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800466a:	ea48 080c 	orr.w	r8, r8, ip
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800466e:	f89d c030 	ldrb.w	ip, [sp, #48]	@ 0x30
 8004672:	ea41 010c 	orr.w	r1, r1, ip
      *address = lsb | (msb << 16);
 8004676:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800467a:	f844 1c0c 	str.w	r1, [r4, #-12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800467e:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
 8004682:	430f      	orrs	r7, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004684:	f89d 1028 	ldrb.w	r1, [sp, #40]	@ 0x28
 8004688:	430a      	orrs	r2, r1
      *address = lsb | (msb << 16);
 800468a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800468e:	f844 2c10 	str.w	r2, [r4, #-16]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004692:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8004696:	4316      	orrs	r6, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004698:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800469c:	4313      	orrs	r3, r2
      *address = lsb | (msb << 16);
 800469e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80046a2:	f844 3c14 	str.w	r3, [r4, #-20]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80046a6:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80046aa:	431d      	orrs	r5, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80046ac:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80046b0:	ea4b 0303 	orr.w	r3, fp, r3
      *address = lsb | (msb << 16);
 80046b4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80046b8:	f844 3c18 	str.w	r3, [r4, #-24]
}
 80046bc:	b013      	add	sp, #76	@ 0x4c
 80046be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80046c2:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
  if (HuffTableDC != NULL)
 80046c6:	e769      	b.n	800459c <JPEG_Set_HuffDC_Mem+0x28>

080046c8 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80046c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80046cc:	6804      	ldr	r4, [r0, #0]
{
 80046ce:	f6ad 0d3c 	subw	sp, sp, #2108	@ 0x83c
 80046d2:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80046d4:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 80046d8:	429a      	cmp	r2, r3
 80046da:	d041      	beq.n	8004760 <JPEG_Set_HuffAC_Mem+0x98>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80046dc:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d004      	beq.n	80046ee <JPEG_Set_HuffAC_Mem+0x26>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 80046e4:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80046e6:	f60d 0d3c 	addw	sp, sp, #2108	@ 0x83c
 80046ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80046ee:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80046f2:	4628      	mov	r0, r5
 80046f4:	466b      	mov	r3, sp
 80046f6:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 80046fa:	a901      	add	r1, sp, #4
 80046fc:	f7ff fec0 	bl	8004480 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8004700:	2800      	cmp	r0, #0
 8004702:	d1f0      	bne.n	80046e6 <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
 8004704:	9b00      	ldr	r3, [sp, #0]
 8004706:	b373      	cbz	r3, 8004766 <JPEG_Set_HuffAC_Mem+0x9e>
 8004708:	330f      	adds	r3, #15
 800470a:	f20d 4c34 	addw	ip, sp, #1076	@ 0x434
 800470e:	af01      	add	r7, sp, #4
 8004710:	f105 020f 	add.w	r2, r5, #15
 8004714:	eb05 0e03 	add.w	lr, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004718:	ae42      	add	r6, sp, #264	@ 0x108
 800471a:	e011      	b.n	8004740 <JPEG_Set_HuffAC_Mem+0x78>
      l = (msb * 10UL) + lsb - 1UL;
 800471c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8004720:	2ba1      	cmp	r3, #161	@ 0xa1
 8004722:	d8df      	bhi.n	80046e4 <JPEG_Set_HuffAC_Mem+0x1c>
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004724:	f817 5b01 	ldrb.w	r5, [r7], #1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004728:	eb06 0883 	add.w	r8, r6, r3, lsl #2
 800472c:	f85c 1b04 	ldr.w	r1, [ip], #4
  while (k < lastK)
 8004730:	4572      	cmp	r2, lr
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004732:	f105 35ff 	add.w	r5, r5, #4294967295
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004736:	46b1      	mov	r9, r6
 8004738:	f8c8 10a4 	str.w	r1, [r8, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800473c:	54f5      	strb	r5, [r6, r3]
  while (k < lastK)
 800473e:	d014      	beq.n	800476a <JPEG_Set_HuffAC_Mem+0xa2>
    l = AC_BitsValsTable->HuffVal[k];
 8004740:	f812 1f01 	ldrb.w	r1, [r2, #1]!
      l = 160; /*l = 0x00 EOB code*/
 8004744:	23a0      	movs	r3, #160	@ 0xa0
    if (l == 0UL)
 8004746:	2900      	cmp	r1, #0
 8004748:	d0ec      	beq.n	8004724 <JPEG_Set_HuffAC_Mem+0x5c>
      msb = (l & 0xF0UL) >> 4;
 800474a:	090d      	lsrs	r5, r1, #4
      lsb = (l & 0x0FUL);
 800474c:	f001 030f 	and.w	r3, r1, #15
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8004750:	29f0      	cmp	r1, #240	@ 0xf0
      l = (msb * 10UL) + lsb - 1UL;
 8004752:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004756:	f103 33ff 	add.w	r3, r3, #4294967295
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800475a:	d1df      	bne.n	800471c <JPEG_Set_HuffAC_Mem+0x54>
      l = 161;
 800475c:	23a1      	movs	r3, #161	@ 0xa1
 800475e:	e7e1      	b.n	8004724 <JPEG_Set_HuffAC_Mem+0x5c>
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004760:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  if (HuffTableAC != NULL)
 8004764:	e7c5      	b.n	80046f2 <JPEG_Set_HuffAC_Mem+0x2a>
 8004766:	f50d 7984 	add.w	r9, sp, #264	@ 0x108
      *addressDef = 0x0FFF0FFF;
 800476a:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
    *addressDef = 0x0FD10FD0;
 800476e:	4a1a      	ldr	r2, [pc, #104]	@ (80047d8 <JPEG_Set_HuffAC_Mem+0x110>)
 8004770:	eba9 0c89 	sub.w	ip, r9, r9, lsl #2
 8004774:	4649      	mov	r1, r9
      *addressDef = 0x0FFF0FFF;
 8004776:	6023      	str	r3, [r4, #0]
 8004778:	f10d 0566 	add.w	r5, sp, #102	@ 0x66
 800477c:	6063      	str	r3, [r4, #4]
 800477e:	f50c 7e4a 	add.w	lr, ip, #808	@ 0x328
 8004782:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD30FD2;
 8004784:	f103 33d3 	add.w	r3, r3, #3553874899	@ 0xd3d3d3d3
    *addressDef = 0x0FD10FD0;
 8004788:	60e2      	str	r2, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800478a:	f50c 7c49 	add.w	ip, ip, #804	@ 0x324
 800478e:	f103 232c 	add.w	r3, r3, #738208768	@ 0x2c002c00
 8004792:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8004794:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8004798:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800479a:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800479e:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80047a0:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80047a4:	f891 30a0 	ldrb.w	r3, [r1, #160]	@ 0xa0
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80047a8:	0212      	lsls	r2, r2, #8
 80047aa:	f81e 7021 	ldrb.w	r7, [lr, r1, lsl #2]
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80047ae:	021b      	lsls	r3, r3, #8
 80047b0:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80047b4:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    while (i > 1UL)
 80047b8:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80047ba:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80047be:	433a      	orrs	r2, r7
    while (i > 1UL)
 80047c0:	42a9      	cmp	r1, r5
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80047c2:	ea43 0306 	orr.w	r3, r3, r6
      *address = lsb | (msb << 16);
 80047c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047ca:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 80047ce:	d1e7      	bne.n	80047a0 <JPEG_Set_HuffAC_Mem+0xd8>
}
 80047d0:	f60d 0d3c 	addw	sp, sp, #2108	@ 0x83c
 80047d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047d8:	0fd10fd0 	.word	0x0fd10fd0

080047dc <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 80047dc:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80047de:	6803      	ldr	r3, [r0, #0]
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 80047e0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80047e4:	6542      	str	r2, [r0, #84]	@ 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80047e6:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80047e8:	f002 0203 	and.w	r2, r2, #3
 80047ec:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	bf0c      	ite	eq
 80047f2:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 80047f6:	f022 0208 	bicne.w	r2, r2, #8
 80047fa:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004804:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004806:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800480a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800480c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800480e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004812:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8004814:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004816:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800481a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800481c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800481e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004822:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800482c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800482e:	f002 020c 	and.w	r2, r2, #12
 8004832:	2a08      	cmp	r2, #8
 8004834:	d00a      	beq.n	800484c <JPEG_Init_Process+0x70>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8004836:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8004838:	f002 020c 	and.w	r2, r2, #12
 800483c:	2a0c      	cmp	r2, #12
 800483e:	d000      	beq.n	8004842 <JPEG_Init_Process+0x66>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004840:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8004842:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004844:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004848:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800484a:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800484c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800484e:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8004852:	631a      	str	r2, [r3, #48]	@ 0x30
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop

08004858 <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8004858:	6b01      	ldr	r1, [r0, #48]	@ 0x30
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800485a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800485c:	b5f0      	push	{r4, r5, r6, r7, lr}
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800485e:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
{
 8004860:	b083      	sub	sp, #12
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8004862:	42aa      	cmp	r2, r5
 8004864:	d32a      	bcc.n	80048bc <JPEG_DMA_StartProcess+0x64>
 8004866:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8004868:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800486a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800486c:	6a86      	ldr	r6, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800486e:	42b3      	cmp	r3, r6
 8004870:	d324      	bcc.n	80048bc <JPEG_DMA_StartProcess+0x64>
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8004872:	4f19      	ldr	r7, [pc, #100]	@ (80048d8 <JPEG_DMA_StartProcess+0x80>)
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8004874:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 80048e4 <JPEG_DMA_StartProcess+0x8c>
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8004878:	654f      	str	r7, [r1, #84]	@ 0x54
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800487a:	f8c1 c044 	str.w	ip, [r1, #68]	@ 0x44

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800487e:	4917      	ldr	r1, [pc, #92]	@ (80048dc <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8004880:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8004882:	6441      	str	r1, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8004884:	4916      	ldr	r1, [pc, #88]	@ (80048e0 <JPEG_DMA_StartProcess+0x88>)
 8004886:	6581      	str	r1, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8004888:	b1a5      	cbz	r5, 80048b4 <JPEG_DMA_StartProcess+0x5c>
 800488a:	b19e      	cbz	r6, 80048b4 <JPEG_DMA_StartProcess+0x5c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800488c:	fbb2 f1f5 	udiv	r1, r2, r5
 8004890:	fb05 2111 	mls	r1, r5, r1, r2
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8004894:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8004896:	1a52      	subs	r2, r2, r1
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8004898:	6821      	ldr	r1, [r4, #0]
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800489a:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800489c:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800489e:	fbb3 f2f6 	udiv	r2, r3, r6
 80048a2:	fb06 3212 	mls	r2, r6, r2, r3
 80048a6:	1a9b      	subs	r3, r3, r2
 80048a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80048aa:	9500      	str	r5, [sp, #0]
 80048ac:	69e2      	ldr	r2, [r4, #28]
 80048ae:	f001 f915 	bl	8005adc <HAL_MDMA_Start_IT>
 80048b2:	b130      	cbz	r0, 80048c2 <JPEG_DMA_StartProcess+0x6a>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80048b4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80048b6:	f043 0304 	orr.w	r3, r3, #4
 80048ba:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80048bc:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80048be:	b003      	add	sp, #12
 80048c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80048c2:	6822      	ldr	r2, [r4, #0]
 80048c4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80048c6:	69a1      	ldr	r1, [r4, #24]
 80048c8:	3240      	adds	r2, #64	@ 0x40
 80048ca:	9500      	str	r5, [sp, #0]
 80048cc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80048ce:	f001 f905 	bl	8005adc <HAL_MDMA_Start_IT>
 80048d2:	2800      	cmp	r0, #0
 80048d4:	d0f3      	beq.n	80048be <JPEG_DMA_StartProcess+0x66>
 80048d6:	e7ed      	b.n	80048b4 <JPEG_DMA_StartProcess+0x5c>
 80048d8:	08004d89 	.word	0x08004d89
 80048dc:	08004f11 	.word	0x08004f11
 80048e0:	08004f91 	.word	0x08004f91
 80048e4:	08004db5 	.word	0x08004db5

080048e8 <HAL_JPEG_GetInfo.part.0>:
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80048e8:	6803      	ldr	r3, [r0, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	f002 0203 	and.w	r2, r2, #3
 80048f0:	2a02      	cmp	r2, #2
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
 80048f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048f6:	4689      	mov	r9, r1
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80048f8:	d018      	beq.n	800492c <HAL_JPEG_GetInfo.part.0+0x44>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	f012 0203 	ands.w	r2, r2, #3
 8004900:	d10b      	bne.n	800491a <HAL_JPEG_GetInfo.part.0+0x32>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8004902:	6859      	ldr	r1, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8004904:	f8c9 2000 	str.w	r2, [r9]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8004908:	68da      	ldr	r2, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800490a:	0c09      	lsrs	r1, r1, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800490c:	0c12      	lsrs	r2, r2, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800490e:	f8c9 1008 	str.w	r1, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8004912:	f8c9 200c 	str.w	r2, [r9, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8004916:	2100      	movs	r1, #0
 8004918:	e02f      	b.n	800497a <HAL_JPEG_GetInfo.part.0+0x92>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	f002 0203 	and.w	r2, r2, #3
 8004920:	2a03      	cmp	r2, #3
 8004922:	f000 8097 	beq.w	8004a54 <HAL_JPEG_GetInfo.part.0+0x16c>
    return HAL_ERROR;
 8004926:	2001      	movs	r0, #1
}
 8004928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800492c:	2110      	movs	r1, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800492e:	685a      	ldr	r2, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8004930:	f8c9 1000 	str.w	r1, [r9]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8004934:	0c12      	lsrs	r2, r2, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8004936:	68d9      	ldr	r1, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8004938:	f8c9 2008 	str.w	r2, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800493c:	0c09      	lsrs	r1, r1, #16
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800493e:	691a      	ldr	r2, [r3, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8004940:	695c      	ldr	r4, [r3, #20]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8004942:	f8c9 100c 	str.w	r1, [r9, #12]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8004946:	0916      	lsrs	r6, r2, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8004948:	6999      	ldr	r1, [r3, #24]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800494a:	f014 0ff0 	tst.w	r4, #240	@ 0xf0
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800494e:	f3c2 1203 	ubfx	r2, r2, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8004952:	ea4f 1714 	mov.w	r7, r4, lsr #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8004956:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800495a:	d105      	bne.n	8004968 <HAL_JPEG_GetInfo.part.0+0x80>
 800495c:	2a01      	cmp	r2, #1
 800495e:	d103      	bne.n	8004968 <HAL_JPEG_GetInfo.part.0+0x80>
 8004960:	070d      	lsls	r5, r1, #28
 8004962:	d1d8      	bne.n	8004916 <HAL_JPEG_GetInfo.part.0+0x2e>
 8004964:	2102      	movs	r1, #2
 8004966:	e008      	b.n	800497a <HAL_JPEG_GetInfo.part.0+0x92>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8004968:	433e      	orrs	r6, r7
 800496a:	0734      	lsls	r4, r6, #28
 800496c:	d0d3      	beq.n	8004916 <HAL_JPEG_GetInfo.part.0+0x2e>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800496e:	430f      	orrs	r7, r1
 8004970:	0739      	lsls	r1, r7, #28
 8004972:	d1d0      	bne.n	8004916 <HAL_JPEG_GetInfo.part.0+0x2e>
 8004974:	2a03      	cmp	r2, #3
 8004976:	d1ce      	bne.n	8004916 <HAL_JPEG_GetInfo.part.0+0x2e>
 8004978:	2101      	movs	r1, #1
 800497a:	4a42      	ldr	r2, [pc, #264]	@ (8004a84 <HAL_JPEG_GetInfo.part.0+0x19c>)
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800497c:	f103 0c50 	add.w	ip, r3, #80	@ 0x50
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8004980:	f8c9 1004 	str.w	r1, [r9, #4]
  uint32_t quality = 0;
 8004984:	2600      	movs	r6, #0
 8004986:	f102 0440 	add.w	r4, r2, #64	@ 0x40
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800498a:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800498e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004992:	e033      	b.n	80049fc <HAL_JPEG_GetInfo.part.0+0x114>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8004994:	f892 8001 	ldrb.w	r8, [r2, #1]
 8004998:	fb0e f707 	mul.w	r7, lr, r7
 800499c:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800499e:	f815 8008 	ldrb.w	r8, [r5, r8]
 80049a2:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
 80049a6:	2f64      	cmp	r7, #100	@ 0x64
 80049a8:	d958      	bls.n	8004a5c <HAL_JPEG_GetInfo.part.0+0x174>
          quality += 5000UL / scale;
 80049aa:	fbb1 f7f7 	udiv	r7, r1, r7
 80049ae:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80049b0:	f3c3 4707 	ubfx	r7, r3, #16, #8
      if (quantVal == 1UL)
 80049b4:	2f01      	cmp	r7, #1
 80049b6:	d03d      	beq.n	8004a34 <HAL_JPEG_GetInfo.part.0+0x14c>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80049b8:	f892 8002 	ldrb.w	r8, [r2, #2]
 80049bc:	fb0e f707 	mul.w	r7, lr, r7
 80049c0:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 80049c2:	f815 8008 	ldrb.w	r8, [r5, r8]
 80049c6:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
 80049ca:	2f64      	cmp	r7, #100	@ 0x64
 80049cc:	d955      	bls.n	8004a7a <HAL_JPEG_GetInfo.part.0+0x192>
          quality += 5000UL / scale;
 80049ce:	fbb1 f7f7 	udiv	r7, r1, r7
 80049d2:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80049d4:	0e1b      	lsrs	r3, r3, #24
      if (quantVal == 1UL)
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d030      	beq.n	8004a3c <HAL_JPEG_GetInfo.part.0+0x154>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80049da:	78d7      	ldrb	r7, [r2, #3]
 80049dc:	fb0e f303 	mul.w	r3, lr, r3
 80049e0:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 80049e2:	5def      	ldrb	r7, [r5, r7]
 80049e4:	fbb3 f3f7 	udiv	r3, r3, r7
        if (scale <= 100UL)
 80049e8:	2b64      	cmp	r3, #100	@ 0x64
 80049ea:	d93c      	bls.n	8004a66 <HAL_JPEG_GetInfo.part.0+0x17e>
          quality += 5000UL / scale;
 80049ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80049f0:	441e      	add	r6, r3
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80049f2:	3204      	adds	r2, #4
        }
      }
    }

    i += 4UL;
    tableAddress ++;
 80049f4:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80049f8:	4294      	cmp	r4, r2
 80049fa:	d025      	beq.n	8004a48 <HAL_JPEG_GetInfo.part.0+0x160>
    quantRow = *tableAddress;
 80049fc:	f8dc 3000 	ldr.w	r3, [ip]
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004a00:	b2df      	uxtb	r7, r3
      if (quantVal == 1UL)
 8004a02:	2f01      	cmp	r7, #1
 8004a04:	d028      	beq.n	8004a58 <HAL_JPEG_GetInfo.part.0+0x170>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8004a06:	f892 8000 	ldrb.w	r8, [r2]
 8004a0a:	fb0e f707 	mul.w	r7, lr, r7
 8004a0e:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8004a10:	f815 8008 	ldrb.w	r8, [r5, r8]
 8004a14:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
 8004a18:	2f64      	cmp	r7, #100	@ 0x64
 8004a1a:	d929      	bls.n	8004a70 <HAL_JPEG_GetInfo.part.0+0x188>
          quality += 5000UL / scale;
 8004a1c:	fbb1 f7f7 	udiv	r7, r1, r7
 8004a20:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004a22:	f3c3 2707 	ubfx	r7, r3, #8, #8
      if (quantVal == 1UL)
 8004a26:	2f01      	cmp	r7, #1
 8004a28:	d1b4      	bne.n	8004994 <HAL_JPEG_GetInfo.part.0+0xac>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004a2a:	f3c3 4707 	ubfx	r7, r3, #16, #8
        quality += 100UL;
 8004a2e:	3664      	adds	r6, #100	@ 0x64
      if (quantVal == 1UL)
 8004a30:	2f01      	cmp	r7, #1
 8004a32:	d1c1      	bne.n	80049b8 <HAL_JPEG_GetInfo.part.0+0xd0>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004a34:	0e1b      	lsrs	r3, r3, #24
        quality += 100UL;
 8004a36:	3664      	adds	r6, #100	@ 0x64
      if (quantVal == 1UL)
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d1ce      	bne.n	80049da <HAL_JPEG_GetInfo.part.0+0xf2>
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004a3c:	3204      	adds	r2, #4
        quality += 100UL;
 8004a3e:	3664      	adds	r6, #100	@ 0x64
    tableAddress ++;
 8004a40:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004a44:	4294      	cmp	r4, r2
 8004a46:	d1d9      	bne.n	80049fc <HAL_JPEG_GetInfo.part.0+0x114>
  }

  return (quality / 64UL);
 8004a48:	09b6      	lsrs	r6, r6, #6
  return HAL_OK;
 8004a4a:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8004a4c:	f8c9 6010 	str.w	r6, [r9, #16]
}
 8004a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a54:	2130      	movs	r1, #48	@ 0x30
 8004a56:	e76a      	b.n	800492e <HAL_JPEG_GetInfo.part.0+0x46>
        quality += 100UL;
 8004a58:	3664      	adds	r6, #100	@ 0x64
 8004a5a:	e7e2      	b.n	8004a22 <HAL_JPEG_GetInfo.part.0+0x13a>
          quality += (200UL - scale) / 2UL;
 8004a5c:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
 8004a60:	eb06 0657 	add.w	r6, r6, r7, lsr #1
 8004a64:	e7a4      	b.n	80049b0 <HAL_JPEG_GetInfo.part.0+0xc8>
 8004a66:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8004a6a:	eb06 0653 	add.w	r6, r6, r3, lsr #1
 8004a6e:	e7c0      	b.n	80049f2 <HAL_JPEG_GetInfo.part.0+0x10a>
 8004a70:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
 8004a74:	eb06 0657 	add.w	r6, r6, r7, lsr #1
 8004a78:	e7d3      	b.n	8004a22 <HAL_JPEG_GetInfo.part.0+0x13a>
 8004a7a:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
 8004a7e:	eb06 0657 	add.w	r6, r6, r7, lsr #1
 8004a82:	e7a7      	b.n	80049d4 <HAL_JPEG_GetInfo.part.0+0xec>
 8004a84:	0800d3e8 	.word	0x0800d3e8

08004a88 <HAL_JPEG_Init>:
  if (hjpeg == NULL)
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	f000 8107 	beq.w	8004c9c <HAL_JPEG_Init+0x214>
{
 8004a8e:	b570      	push	{r4, r5, r6, lr}
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8004a90:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8004a94:	4605      	mov	r5, r0
 8004a96:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 80f9 	beq.w	8004c92 <HAL_JPEG_Init+0x20a>
  __HAL_JPEG_ENABLE(hjpeg);
 8004aa0:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8004aa2:	2202      	movs	r2, #2
  hjpeg->QuantTable2 = NULL;
 8004aa4:	2300      	movs	r3, #0
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8004aa6:	497e      	ldr	r1, [pc, #504]	@ (8004ca0 <HAL_JPEG_Init+0x218>)
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8004aa8:	f885 204d 	strb.w	r2, [r5, #77]	@ 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
 8004aac:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004ab4:	6822      	ldr	r2, [r4, #0]
 8004ab6:	f022 0201 	bic.w	r2, r2, #1
 8004aba:	6022      	str	r2, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004abc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004abe:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004ac2:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8004ac4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004ac6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004aca:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8004acc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004ace:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ad2:	6322      	str	r2, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004ad4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004ad6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004ada:	63a2      	str	r2, [r4, #56]	@ 0x38
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8004adc:	4a71      	ldr	r2, [pc, #452]	@ (8004ca4 <HAL_JPEG_Init+0x21c>)
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8004ade:	63e9      	str	r1, [r5, #60]	@ 0x3c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004ae0:	2101      	movs	r1, #1
  hjpeg->QuantTable2 = NULL;
 8004ae2:	64ab      	str	r3, [r5, #72]	@ 0x48
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8004ae4:	e9c5 2310 	strd	r2, r3, [r5, #64]	@ 0x40
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004ae8:	f8c4 336c 	str.w	r3, [r4, #876]	@ 0x36c
 8004aec:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8004af0:	4b6d      	ldr	r3, [pc, #436]	@ (8004ca8 <HAL_JPEG_Init+0x220>)
 8004af2:	f8c4 1368 	str.w	r1, [r4, #872]	@ 0x368
 8004af6:	f8c4 2364 	str.w	r2, [r4, #868]	@ 0x364
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004afa:	496c      	ldr	r1, [pc, #432]	@ (8004cac <HAL_JPEG_Init+0x224>)
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004afc:	f8c4 3360 	str.w	r3, [r4, #864]	@ 0x360
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004b00:	4b6b      	ldr	r3, [pc, #428]	@ (8004cb0 <HAL_JPEG_Init+0x228>)
 8004b02:	f8c4 1378 	str.w	r1, [r4, #888]	@ 0x378
 8004b06:	4a6b      	ldr	r2, [pc, #428]	@ (8004cb4 <HAL_JPEG_Init+0x22c>)
 8004b08:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004b0c:	4b6a      	ldr	r3, [pc, #424]	@ (8004cb8 <HAL_JPEG_Init+0x230>)
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004b0e:	f8c4 2370 	str.w	r2, [r4, #880]	@ 0x370
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004b12:	496a      	ldr	r1, [pc, #424]	@ (8004cbc <HAL_JPEG_Init+0x234>)
 8004b14:	f8c4 3388 	str.w	r3, [r4, #904]	@ 0x388
 8004b18:	4a69      	ldr	r2, [pc, #420]	@ (8004cc0 <HAL_JPEG_Init+0x238>)
 8004b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8004cc4 <HAL_JPEG_Init+0x23c>)
 8004b1c:	f8c4 1384 	str.w	r1, [r4, #900]	@ 0x384
 8004b20:	f8c4 2380 	str.w	r2, [r4, #896]	@ 0x380
 8004b24:	f8c4 337c 	str.w	r3, [r4, #892]	@ 0x37c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8004b28:	f64f 23f9 	movw	r3, #64249	@ 0xfaf9
  value = *address & 0xFFFF0000U;
 8004b2c:	f8d4 142c 	ldr.w	r1, [r4, #1068]	@ 0x42c
 8004b30:	4a65      	ldr	r2, [pc, #404]	@ (8004cc8 <HAL_JPEG_Init+0x240>)
 8004b32:	400a      	ands	r2, r1
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8004b34:	f504 6185 	add.w	r1, r4, #1064	@ 0x428
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8004b38:	4313      	orrs	r3, r2
  *address = value;
 8004b3a:	4a64      	ldr	r2, [pc, #400]	@ (8004ccc <HAL_JPEG_Init+0x244>)
 8004b3c:	f1a2 06a0 	sub.w	r6, r2, #160	@ 0xa0
 8004b40:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004b44:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8004b48:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004b4a:	f892 e0b3 	ldrb.w	lr, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004b4e:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8004b50:	f892 c0b0 	ldrb.w	ip, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004b54:	f892 00b1 	ldrb.w	r0, [r2, #177]	@ 0xb1
  while (index > 3UL)
 8004b58:	4296      	cmp	r6, r2
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004b5a:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004b5e:	ea43 030c 	orr.w	r3, r3, ip
 8004b62:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004b66:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8004b6a:	d1eb      	bne.n	8004b44 <HAL_JPEG_Init+0xbc>
  value = *address & 0x0000FFFFU;
 8004b6c:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004b70:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
  value = *address & 0xFFFF0000U;
 8004b74:	4954      	ldr	r1, [pc, #336]	@ (8004cc8 <HAL_JPEG_Init+0x240>)
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004b76:	2001      	movs	r0, #1
  value = *address & 0x0000FFFFU;
 8004b78:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8004b7a:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 8004b7e:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 8004b82:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8004b86:	400b      	ands	r3, r1
  *address = value;
 8004b88:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004b8c:	f8c4 0438 	str.w	r0, [r4, #1080]	@ 0x438
 8004b90:	f8c4 2434 	str.w	r2, [r4, #1076]	@ 0x434
 8004b94:	f8c4 2430 	str.w	r2, [r4, #1072]	@ 0x430
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8004b98:	f640 320a 	movw	r2, #2826	@ 0xb0a
  value = *address & 0x0000FFFFUL;
 8004b9c:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8004ba0:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8004ba2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8004ba6:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8004baa:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8004bae:	400b      	ands	r3, r1
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8004bb0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004bb2:	4b47      	ldr	r3, [pc, #284]	@ (8004cd0 <HAL_JPEG_Init+0x248>)
  *address = value;
 8004bb4:	f8c4 2448 	str.w	r2, [r4, #1096]	@ 0x448
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8004bb8:	f247 7202 	movw	r2, #30466	@ 0x7702
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004bbc:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8004bc0:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8004bc4:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 8004bc8:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8004bcc:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8004bce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 8004bd2:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 8004bd6:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8004bda:	400b      	ands	r3, r1
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004bdc:	493d      	ldr	r1, [pc, #244]	@ (8004cd4 <HAL_JPEG_Init+0x24c>)
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8004bde:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004be0:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd8 <HAL_JPEG_Init+0x250>)
  *address = value;
 8004be2:	f8c4 2458 	str.w	r2, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004be6:	4a3d      	ldr	r2, [pc, #244]	@ (8004cdc <HAL_JPEG_Init+0x254>)
 8004be8:	f8c4 1454 	str.w	r1, [r4, #1108]	@ 0x454
  address = (hjpeg->Instance->DHTMEM + 102);
 8004bec:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004bf0:	f8c4 2450 	str.w	r2, [r4, #1104]	@ 0x450
 8004bf4:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 8004bf8:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8004bfc:	4a38      	ldr	r2, [pc, #224]	@ (8004ce0 <HAL_JPEG_Init+0x258>)
  value = *address & 0x0000FFFFUL;
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	f1a2 06a0 	sub.w	r6, r2, #160	@ 0xa0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8004c04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8004c08:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004c0c:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 8004c10:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004c12:	f892 e0b5 	ldrb.w	lr, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004c16:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8004c18:	f892 c0b2 	ldrb.w	ip, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004c1c:	f892 00b3 	ldrb.w	r0, [r2, #179]	@ 0xb3
  while (index > 3UL)
 8004c20:	4296      	cmp	r6, r2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004c22:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8004c26:	ea43 030c 	orr.w	r3, r3, ip
 8004c2a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004c2e:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8004c32:	d1eb      	bne.n	8004c0c <HAL_JPEG_Init+0x184>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8004c34:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8004c38:	4924      	ldr	r1, [pc, #144]	@ (8004ccc <HAL_JPEG_Init+0x244>)
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	f7ff fd44 	bl	80046c8 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8004c40:	b118      	cbz	r0, 8004c4a <HAL_JPEG_Init+0x1c2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8004c42:	2301      	movs	r3, #1
    return HAL_ERROR;
 8004c44:	2001      	movs	r0, #1
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8004c46:	652b      	str	r3, [r5, #80]	@ 0x50
}
 8004c48:	bd70      	pop	{r4, r5, r6, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8004c4a:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 8004c4e:	4924      	ldr	r1, [pc, #144]	@ (8004ce0 <HAL_JPEG_Init+0x258>)
 8004c50:	4628      	mov	r0, r5
 8004c52:	f7ff fd39 	bl	80046c8 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8004c56:	2800      	cmp	r0, #0
 8004c58:	d1f3      	bne.n	8004c42 <HAL_JPEG_Init+0x1ba>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8004c5a:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 8004c5e:	4921      	ldr	r1, [pc, #132]	@ (8004ce4 <HAL_JPEG_Init+0x25c>)
 8004c60:	4628      	mov	r0, r5
 8004c62:	f7ff fc87 	bl	8004574 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d1eb      	bne.n	8004c42 <HAL_JPEG_Init+0x1ba>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8004c6a:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 8004c6e:	491e      	ldr	r1, [pc, #120]	@ (8004ce8 <HAL_JPEG_Init+0x260>)
 8004c70:	4628      	mov	r0, r5
 8004c72:	f7ff fc7f 	bl	8004574 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8004c76:	2800      	cmp	r0, #0
 8004c78:	d1e3      	bne.n	8004c42 <HAL_JPEG_Init+0x1ba>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8004c7a:	6863      	ldr	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8004c7c:	2201      	movs	r2, #1
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8004c7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c82:	6063      	str	r3, [r4, #4]
  hjpeg->JpegInCount = 0;
 8004c84:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 8004c86:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8004c88:	f885 204d 	strb.w	r2, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8004c8c:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 8004c8e:	6568      	str	r0, [r5, #84]	@ 0x54
}
 8004c90:	bd70      	pop	{r4, r5, r6, pc}
    hjpeg->Lock = HAL_UNLOCKED;
 8004c92:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8004c96:	f7fe fd75 	bl	8003784 <HAL_JPEG_MspInit>
 8004c9a:	e701      	b.n	8004aa0 <HAL_JPEG_Init+0x18>
    return HAL_ERROR;
 8004c9c:	2001      	movs	r0, #1
}
 8004c9e:	4770      	bx	lr
 8004ca0:	0800d3a8 	.word	0x0800d3a8
 8004ca4:	0800d368 	.word	0x0800d368
 8004ca8:	01050100 	.word	0x01050100
 8004cac:	0b0a0908 	.word	0x0b0a0908
 8004cb0:	07060504 	.word	0x07060504
 8004cb4:	03020100 	.word	0x03020100
 8004cb8:	7d010000 	.word	0x7d010000
 8004cbc:	04040505 	.word	0x04040505
 8004cc0:	03040203 	.word	0x03040203
 8004cc4:	03010200 	.word	0x03010200
 8004cc8:	ffff0000 	.word	0xffff0000
 8004ccc:	0800d4dc 	.word	0x0800d4dc
 8004cd0:	09080706 	.word	0x09080706
 8004cd4:	01000404 	.word	0x01000404
 8004cd8:	04040201 	.word	0x04040201
 8004cdc:	05070403 	.word	0x05070403
 8004ce0:	0800d428 	.word	0x0800d428
 8004ce4:	0800d5ac 	.word	0x0800d5ac
 8004ce8:	0800d590 	.word	0x0800d590

08004cec <HAL_JPEG_GetInfo>:
  if ((hjpeg == NULL) || (pInfo == NULL))
 8004cec:	b110      	cbz	r0, 8004cf4 <HAL_JPEG_GetInfo+0x8>
 8004cee:	b109      	cbz	r1, 8004cf4 <HAL_JPEG_GetInfo+0x8>
 8004cf0:	f7ff bdfa 	b.w	80048e8 <HAL_JPEG_GetInfo.part.0>
}
 8004cf4:	2001      	movs	r0, #1
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bf18      	it	ne
 8004cfc:	2900      	cmpne	r1, #0
 8004cfe:	d036      	beq.n	8004d6e <HAL_JPEG_Decode_DMA+0x76>
{
 8004d00:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8004d02:	fab0 f580 	clz	r5, r0
 8004d06:	4604      	mov	r4, r0
 8004d08:	096d      	lsrs	r5, r5, #5
 8004d0a:	b370      	cbz	r0, 8004d6a <HAL_JPEG_Decode_DMA+0x72>
  __HAL_LOCK(hjpeg);
 8004d0c:	f890 c04c 	ldrb.w	ip, [r0, #76]	@ 0x4c
 8004d10:	f1bc 0f01 	cmp.w	ip, #1
 8004d14:	d022      	beq.n	8004d5c <HAL_JPEG_Decode_DMA+0x64>
 8004d16:	f04f 0c01 	mov.w	ip, #1
 8004d1a:	f880 c04c 	strb.w	ip, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8004d1e:	f890 c04d 	ldrb.w	ip, [r0, #77]	@ 0x4d
 8004d22:	f1bc 0f01 	cmp.w	ip, #1
 8004d26:	d117      	bne.n	8004d58 <HAL_JPEG_Decode_DMA+0x60>
    hjpeg->InDataLength = InDataLength;
 8004d28:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8004d2a:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->OutDataLength = OutDataLength;
 8004d2e:	9b04      	ldr	r3, [sp, #16]
 8004d30:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8004d32:	2304      	movs	r3, #4
 8004d34:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8004d38:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8004d3a:	f023 030f 	bic.w	r3, r3, #15
 8004d3e:	6543      	str	r3, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8004d40:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8004d42:	f043 030e 	orr.w	r3, r3, #14
 8004d46:	6543      	str	r3, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 8004d48:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
 8004d4a:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 8004d4c:	f7ff fd46 	bl	80047dc <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8004d50:	f7ff fd82 	bl	8004858 <JPEG_DMA_StartProcess>
 8004d54:	b920      	cbnz	r0, 8004d60 <HAL_JPEG_Decode_DMA+0x68>
}
 8004d56:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 8004d58:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 8004d5c:	2002      	movs	r0, #2
}
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8004d60:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 8004d62:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8004d66:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8004d6a:	2001      	movs	r0, #1
}
 8004d6c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004d6e:	2001      	movs	r0, #1
}
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop

08004d74 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8004d74:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8004d76:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop

08004d7c <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8004d7c:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8004d7e:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop

08004d84 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop

08004d88 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8004d88:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  hjpeg->State = HAL_JPEG_STATE_READY;
 8004d8a:	2101      	movs	r1, #1
{
 8004d8c:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004d8e:	6803      	ldr	r3, [r0, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	f022 0201 	bic.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004d98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d9a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8004da0:	f880 104d 	strb.w	r1, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8004da4:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8004da6:	f043 0304 	orr.w	r3, r3, #4
 8004daa:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 8004dac:	f7fd fd3c 	bl	8002828 <HAL_JPEG_ErrorCallback>
}
 8004db0:	bd08      	pop	{r3, pc}
 8004db2:	bf00      	nop

08004db4 <JPEG_MDMAInCpltCallback>:
{
 8004db4:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8004db6:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8004db8:	f248 010c 	movw	r1, #32780	@ 0x800c
{
 8004dbc:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004dbe:	6822      	ldr	r2, [r4, #0]
 8004dc0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004dc2:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8004dc6:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8004dc8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004dca:	400b      	ands	r3, r1
 8004dcc:	2b0c      	cmp	r3, #12
 8004dce:	d001      	beq.n	8004dd4 <JPEG_MDMAInCpltCallback+0x20>
}
 8004dd0:	b003      	add	sp, #12
 8004dd2:	bd30      	pop	{r4, r5, pc}
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8004dd4:	6802      	ldr	r2, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8004dd6:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8004dd8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004dda:	6952      	ldr	r2, [r2, #20]
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8004ddc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8004dde:	f3c2 0210 	ubfx	r2, r2, #0, #17
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8004de2:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8004de4:	1a9b      	subs	r3, r3, r2
 8004de6:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8004de8:	6a21      	ldr	r1, [r4, #32]
 8004dea:	f7fd fceb 	bl	80027c4 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 8004dee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004df0:	42ab      	cmp	r3, r5
 8004df2:	d311      	bcc.n	8004e18 <JPEG_MDMAInCpltCallback+0x64>
      if (inXfrSize == 0UL)
 8004df4:	b305      	cbz	r5, 8004e38 <JPEG_MDMAInCpltCallback+0x84>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8004df6:	fbb3 f2f5 	udiv	r2, r3, r5
 8004dfa:	fb05 3212 	mls	r2, r5, r2, r3
 8004dfe:	1a9b      	subs	r3, r3, r2
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8004e00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8004e02:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8004e04:	04d1      	lsls	r1, r2, #19
 8004e06:	d400      	bmi.n	8004e0a <JPEG_MDMAInCpltCallback+0x56>
 8004e08:	b963      	cbnz	r3, 8004e24 <JPEG_MDMAInCpltCallback+0x70>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8004e0a:	6822      	ldr	r2, [r4, #0]
 8004e0c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004e0e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004e12:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8004e14:	b003      	add	sp, #12
 8004e16:	bd30      	pop	{r4, r5, pc}
    else if (hjpeg->InDataLength > 0UL)
 8004e18:	b1cb      	cbz	r3, 8004e4e <JPEG_MDMAInCpltCallback+0x9a>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8004e1a:	0798      	lsls	r0, r3, #30
 8004e1c:	d119      	bne.n	8004e52 <JPEG_MDMAInCpltCallback+0x9e>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8004e1e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e20:	04d2      	lsls	r2, r2, #19
 8004e22:	d4f2      	bmi.n	8004e0a <JPEG_MDMAInCpltCallback+0x56>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8004e24:	6822      	ldr	r2, [r4, #0]
 8004e26:	2501      	movs	r5, #1
 8004e28:	69a1      	ldr	r1, [r4, #24]
 8004e2a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004e2c:	3240      	adds	r2, #64	@ 0x40
 8004e2e:	9500      	str	r5, [sp, #0]
 8004e30:	f000 fe54 	bl	8005adc <HAL_MDMA_Start_IT>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d0e8      	beq.n	8004e0a <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8004e38:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8004e3a:	2206      	movs	r2, #6
        HAL_JPEG_ErrorCallback(hjpeg);
 8004e3c:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8004e3e:	f043 0304 	orr.w	r3, r3, #4
 8004e42:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8004e44:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8004e48:	f7fd fcee 	bl	8002828 <HAL_JPEG_ErrorCallback>
        return;
 8004e4c:	e7c0      	b.n	8004dd0 <JPEG_MDMAInCpltCallback+0x1c>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8004e4e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004e50:	e7db      	b.n	8004e0a <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8004e52:	f023 0303 	bic.w	r3, r3, #3
 8004e56:	3304      	adds	r3, #4
 8004e58:	e7d2      	b.n	8004e00 <JPEG_MDMAInCpltCallback+0x4c>
 8004e5a:	bf00      	nop

08004e5c <JPEG_DMA_PollResidualData>:
{
 8004e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8004e5e:	6802      	ldr	r2, [r0, #0]
 8004e60:	2610      	movs	r6, #16
{
 8004e62:	4604      	mov	r4, r0
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004e64:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 8004e66:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 8004e6a:	d11d      	bne.n	8004ea8 <JPEG_DMA_PollResidualData+0x4c>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8004e6c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8004e6e:	06df      	lsls	r7, r3, #27
 8004e70:	d51a      	bpl.n	8004ea8 <JPEG_DMA_PollResidualData+0x4c>
        dataOut = hjpeg->Instance->DOR;
 8004e72:	6c53      	ldr	r3, [r2, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8004e74:	69e7      	ldr	r7, [r4, #28]
 8004e76:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8004e78:	0a18      	lsrs	r0, r3, #8
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8004e7a:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8004e7c:	54bb      	strb	r3, [r7, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8004e7e:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8004e80:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 8004e82:	69e2      	ldr	r2, [r4, #28]
 8004e84:	443a      	add	r2, r7
 8004e86:	7050      	strb	r0, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8004e88:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004e8a:	69e2      	ldr	r2, [r4, #28]
 8004e8c:	4402      	add	r2, r0
 8004e8e:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8004e90:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004e92:	69e2      	ldr	r2, [r4, #28]
 8004e94:	440a      	add	r2, r1
 8004e96:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 8004e98:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8004e9a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        hjpeg->JpegOutCount += 4UL;
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8004ea0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d021      	beq.n	8004eea <JPEG_DMA_PollResidualData+0x8e>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8004ea6:	6822      	ldr	r2, [r4, #0]
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8004ea8:	3e01      	subs	r6, #1
 8004eaa:	d1db      	bne.n	8004e64 <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
 8004eac:	6d61      	ldr	r1, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8004eae:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8004eb0:	06d8      	lsls	r0, r3, #27
 8004eb2:	d501      	bpl.n	8004eb8 <JPEG_DMA_PollResidualData+0x5c>
 8004eb4:	048b      	lsls	r3, r1, #18
 8004eb6:	d417      	bmi.n	8004ee8 <JPEG_DMA_PollResidualData+0x8c>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004eb8:	6813      	ldr	r3, [r2, #0]
 8004eba:	f023 0301 	bic.w	r3, r3, #1
 8004ebe:	6013      	str	r3, [r2, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8004ec0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004ec2:	b9eb      	cbnz	r3, 8004f00 <JPEG_DMA_PollResidualData+0xa4>
    tmpContext = hjpeg->Context;
 8004ec4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8004ec6:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004ec8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004eca:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004ecc:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 8004ed0:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004ed4:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8004ed8:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004eda:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004edc:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004ede:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004ee2:	d00a      	beq.n	8004efa <JPEG_DMA_PollResidualData+0x9e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8004ee4:	f7ff ff4e 	bl	8004d84 <HAL_JPEG_EncodeCpltCallback>
}
 8004ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004eea:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004eec:	4620      	mov	r0, r4
 8004eee:	69e1      	ldr	r1, [r4, #28]
 8004ef0:	f7fd fc8c 	bl	800280c <HAL_JPEG_DataReadyCallback>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8004ef4:	6822      	ldr	r2, [r4, #0]
          hjpeg->JpegOutCount = 0;
 8004ef6:	6265      	str	r5, [r4, #36]	@ 0x24
 8004ef8:	e7d6      	b.n	8004ea8 <JPEG_DMA_PollResidualData+0x4c>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8004efa:	f7fd fc97 	bl	800282c <HAL_JPEG_DecodeCpltCallback>
}
 8004efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004f00:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004f02:	4620      	mov	r0, r4
 8004f04:	69e1      	ldr	r1, [r4, #28]
 8004f06:	f7fd fc81 	bl	800280c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f0e:	e7d9      	b.n	8004ec4 <JPEG_DMA_PollResidualData+0x68>

08004f10 <JPEG_MDMAOutCpltCallback>:
{
 8004f10:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8004f12:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8004f14:	f248 010c 	movw	r1, #32780	@ 0x800c
{
 8004f18:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f1e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004f22:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8004f24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f26:	400a      	ands	r2, r1
 8004f28:	2a0c      	cmp	r2, #12
 8004f2a:	d001      	beq.n	8004f30 <JPEG_MDMAOutCpltCallback+0x20>
}
 8004f2c:	b003      	add	sp, #12
 8004f2e:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8004f30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f32:	0692      	lsls	r2, r2, #26
 8004f34:	d505      	bpl.n	8004f42 <JPEG_MDMAOutCpltCallback+0x32>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8004f36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f38:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004f3c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f3e:	b003      	add	sp, #12
 8004f40:	bd30      	pop	{r4, r5, pc}
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8004f42:	6802      	ldr	r2, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004f44:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8004f46:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004f48:	6952      	ldr	r2, [r2, #20]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004f4a:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8004f4c:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8004f50:	1a9b      	subs	r3, r3, r2
 8004f52:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004f54:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004f56:	f7fd fc59 	bl	800280c <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004f5a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004f5c:	049b      	lsls	r3, r3, #18
 8004f5e:	d501      	bpl.n	8004f64 <JPEG_MDMAOutCpltCallback+0x54>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	e7e8      	b.n	8004f36 <JPEG_MDMAOutCpltCallback+0x26>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8004f64:	6821      	ldr	r1, [r4, #0]
 8004f66:	2501      	movs	r5, #1
 8004f68:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004f6a:	69e2      	ldr	r2, [r4, #28]
 8004f6c:	3144      	adds	r1, #68	@ 0x44
 8004f6e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8004f70:	9500      	str	r5, [sp, #0]
 8004f72:	f000 fdb3 	bl	8005adc <HAL_MDMA_Start_IT>
 8004f76:	2800      	cmp	r0, #0
 8004f78:	d0f2      	beq.n	8004f60 <JPEG_MDMAOutCpltCallback+0x50>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8004f7a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8004f7c:	2206      	movs	r2, #6
          HAL_JPEG_ErrorCallback(hjpeg);
 8004f7e:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8004f80:	f043 0304 	orr.w	r3, r3, #4
 8004f84:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8004f86:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 8004f8a:	f7fd fc4d 	bl	8002828 <HAL_JPEG_ErrorCallback>
          return;
 8004f8e:	e7cd      	b.n	8004f2c <JPEG_MDMAOutCpltCallback+0x1c>

08004f90 <JPEG_MDMAOutAbortCallback>:
{
 8004f90:	b538      	push	{r3, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8004f92:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8004f94:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004f96:	041a      	lsls	r2, r3, #16
 8004f98:	d400      	bmi.n	8004f9c <JPEG_MDMAOutAbortCallback+0xc>
}
 8004f9a:	bd38      	pop	{r3, r4, r5, pc}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8004f9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004f9e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	6263      	str	r3, [r4, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8004fac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d025      	beq.n	8004ffe <JPEG_MDMAOutAbortCallback+0x6e>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8004fb6:	f015 0510 	ands.w	r5, r5, #16
 8004fba:	d118      	bne.n	8004fee <JPEG_MDMAOutAbortCallback+0x5e>
    if (hjpeg->JpegOutCount > 0UL)
 8004fbc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004fbe:	bb4b      	cbnz	r3, 8005014 <JPEG_MDMAOutAbortCallback+0x84>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004fc0:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
 8004fc2:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004fc4:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004fc6:	f023 0301 	bic.w	r3, r3, #1
 8004fca:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8004fcc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004fce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004fd0:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 8004fd4:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004fd8:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8004fdc:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004fde:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8004fe0:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004fe2:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004fe6:	d012      	beq.n	800500e <JPEG_MDMAOutAbortCallback+0x7e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8004fe8:	f7ff fecc 	bl	8004d84 <HAL_JPEG_EncodeCpltCallback>
}
 8004fec:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004fee:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004ff0:	049b      	lsls	r3, r3, #18
 8004ff2:	d4d2      	bmi.n	8004f9a <JPEG_MDMAOutAbortCallback+0xa>
    JPEG_DMA_PollResidualData(hjpeg);
 8004ff4:	4620      	mov	r0, r4
}
 8004ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 8004ffa:	f7ff bf2f 	b.w	8004e5c <JPEG_DMA_PollResidualData>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004ffe:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005000:	4620      	mov	r0, r4
 8005002:	69e1      	ldr	r1, [r4, #28]
 8005004:	f7fd fc02 	bl	800280c <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	6263      	str	r3, [r4, #36]	@ 0x24
 800500c:	e7d1      	b.n	8004fb2 <JPEG_MDMAOutAbortCallback+0x22>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800500e:	f7fd fc0d 	bl	800282c <HAL_JPEG_DecodeCpltCallback>
}
 8005012:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005014:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005016:	4620      	mov	r0, r4
 8005018:	69e1      	ldr	r1, [r4, #28]
 800501a:	f7fd fbf7 	bl	800280c <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800501e:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
 8005020:	6265      	str	r5, [r4, #36]	@ 0x24
 8005022:	e7cd      	b.n	8004fc0 <JPEG_MDMAOutAbortCallback+0x30>

08005024 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005024:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8005026:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005028:	f002 0203 	and.w	r2, r2, #3
 800502c:	2a02      	cmp	r2, #2
{
 800502e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005032:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005034:	d01e      	beq.n	8005074 <JPEG_Process+0x50>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8005036:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005038:	04d7      	lsls	r7, r2, #19
 800503a:	d407      	bmi.n	800504c <JPEG_Process+0x28>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800503c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800503e:	0796      	lsls	r6, r2, #30
 8005040:	f100 811b 	bmi.w	800527a <JPEG_Process+0x256>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8005044:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005046:	0750      	lsls	r0, r2, #29
 8005048:	f100 81cc 	bmi.w	80053e4 <JPEG_Process+0x3c0>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800504c:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 800504e:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 8005052:	d107      	bne.n	8005064 <JPEG_Process+0x40>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8005054:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8005056:	f016 0608 	ands.w	r6, r6, #8
 800505a:	d14a      	bne.n	80050f2 <JPEG_Process+0xce>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800505c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800505e:	06d2      	lsls	r2, r2, #27
 8005060:	f100 81fe 	bmi.w	8005460 <JPEG_Process+0x43c>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8005064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005066:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800506a:	2a20      	cmp	r2, #32
 800506c:	d019      	beq.n	80050a2 <JPEG_Process+0x7e>
  return JPEG_PROCESS_ONGOING;
 800506e:	2000      	movs	r0, #0
}
 8005070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8005074:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005076:	0652      	lsls	r2, r2, #25
 8005078:	d5dd      	bpl.n	8005036 <JPEG_Process+0x12>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800507a:	1d05      	adds	r5, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
 800507c:	4629      	mov	r1, r5
 800507e:	f7ff fc33 	bl	80048e8 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
 8005082:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8005084:	4629      	mov	r1, r5
 8005086:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8005088:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800508a:	f7fd fb99 	bl	80027c0 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005092:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005096:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8005098:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800509a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800509e:	639a      	str	r2, [r3, #56]	@ 0x38
 80050a0:	e7c9      	b.n	8005036 <JPEG_Process+0x12>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	f022 0201 	bic.w	r2, r2, #1
 80050a8:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80050aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80050ac:	f002 020c 	and.w	r2, r2, #12
 80050b0:	2a08      	cmp	r2, #8
 80050b2:	f000 8201 	beq.w	80054b8 <JPEG_Process+0x494>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80050b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050b8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80050bc:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 80050be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f040 81fe 	bne.w	80054c2 <JPEG_Process+0x49e>
    tmpContext = hjpeg->Context;
 80050c6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 80050c8:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80050ca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 80050cc:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80050ce:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 80050d2:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80050d6:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80050da:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80050dc:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80050de:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 80050e0:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80050e4:	f000 81e5 	beq.w	80054b2 <JPEG_Process+0x48e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80050e8:	f7ff fe4c 	bl	8004d84 <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
 80050ec:	2001      	movs	r0, #1
}
 80050ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80050f2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80050f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050f6:	3220      	adds	r2, #32
 80050f8:	4296      	cmp	r6, r2
 80050fa:	f0c0 8200 	bcc.w	80054fe <JPEG_Process+0x4da>
      dataword = hjpeg->Instance->DOR;
 80050fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005100:	69e1      	ldr	r1, [r4, #28]
 8005102:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005104:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8005106:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005108:	69e2      	ldr	r2, [r4, #28]
 800510a:	440a      	add	r2, r1
 800510c:	0a19      	lsrs	r1, r3, #8
 800510e:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005110:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005112:	69e2      	ldr	r2, [r4, #28]
 8005114:	440a      	add	r2, r1
 8005116:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005118:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800511a:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800511c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800511e:	69e2      	ldr	r2, [r4, #28]
 8005120:	440a      	add	r2, r1
 8005122:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8005124:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8005126:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8005128:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800512a:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 800512c:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 800512e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005130:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005132:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8005134:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005136:	69e2      	ldr	r2, [r4, #28]
 8005138:	440a      	add	r2, r1
 800513a:	0a19      	lsrs	r1, r3, #8
 800513c:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800513e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005140:	69e2      	ldr	r2, [r4, #28]
 8005142:	440a      	add	r2, r1
 8005144:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005146:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005148:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800514a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800514c:	69e2      	ldr	r2, [r4, #28]
 800514e:	440a      	add	r2, r1
 8005150:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8005152:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8005154:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8005156:	3304      	adds	r3, #4
 8005158:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 800515a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800515c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800515e:	69e1      	ldr	r1, [r4, #28]
 8005160:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8005162:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005164:	69e2      	ldr	r2, [r4, #28]
 8005166:	440a      	add	r2, r1
 8005168:	0a19      	lsrs	r1, r3, #8
 800516a:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800516c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800516e:	69e2      	ldr	r2, [r4, #28]
 8005170:	440a      	add	r2, r1
 8005172:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005174:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005176:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005178:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800517a:	69e2      	ldr	r2, [r4, #28]
 800517c:	440a      	add	r2, r1
 800517e:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8005180:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8005182:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8005184:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005186:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 8005188:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 800518a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800518c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800518e:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8005190:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005192:	69e2      	ldr	r2, [r4, #28]
 8005194:	440a      	add	r2, r1
 8005196:	0a19      	lsrs	r1, r3, #8
 8005198:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800519a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800519c:	69e2      	ldr	r2, [r4, #28]
 800519e:	440a      	add	r2, r1
 80051a0:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80051a2:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80051a4:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80051a6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80051a8:	69e2      	ldr	r2, [r4, #28]
 80051aa:	440a      	add	r2, r1
 80051ac:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80051ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80051b0:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 80051b2:	3304      	adds	r3, #4
 80051b4:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 80051b6:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80051b8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80051ba:	69e1      	ldr	r1, [r4, #28]
 80051bc:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80051be:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80051c0:	69e2      	ldr	r2, [r4, #28]
 80051c2:	440a      	add	r2, r1
 80051c4:	0a19      	lsrs	r1, r3, #8
 80051c6:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80051c8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80051ca:	69e2      	ldr	r2, [r4, #28]
 80051cc:	440a      	add	r2, r1
 80051ce:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80051d0:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80051d2:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80051d4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80051d6:	69e2      	ldr	r2, [r4, #28]
 80051d8:	440a      	add	r2, r1
 80051da:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80051dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80051de:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 80051e0:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80051e2:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 80051e4:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 80051e6:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80051e8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80051ea:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80051ec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80051ee:	69e2      	ldr	r2, [r4, #28]
 80051f0:	440a      	add	r2, r1
 80051f2:	0a19      	lsrs	r1, r3, #8
 80051f4:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80051f6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80051f8:	69e2      	ldr	r2, [r4, #28]
 80051fa:	440a      	add	r2, r1
 80051fc:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80051fe:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005200:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005202:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005204:	69e2      	ldr	r2, [r4, #28]
 8005206:	440a      	add	r2, r1
 8005208:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 800520a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800520c:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 800520e:	3304      	adds	r3, #4
 8005210:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8005212:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005214:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005216:	69e1      	ldr	r1, [r4, #28]
 8005218:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800521a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800521c:	69e2      	ldr	r2, [r4, #28]
 800521e:	440a      	add	r2, r1
 8005220:	0a19      	lsrs	r1, r3, #8
 8005222:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005224:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005226:	69e2      	ldr	r2, [r4, #28]
 8005228:	440a      	add	r2, r1
 800522a:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800522c:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800522e:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005230:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005232:	69e2      	ldr	r2, [r4, #28]
 8005234:	440a      	add	r2, r1
 8005236:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8005238:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800523a:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 800523c:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800523e:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 8005240:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8005242:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005244:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005246:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8005248:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800524a:	69e2      	ldr	r2, [r4, #28]
 800524c:	440a      	add	r2, r1
 800524e:	0a19      	lsrs	r1, r3, #8
 8005250:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005252:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005254:	69e2      	ldr	r2, [r4, #28]
 8005256:	440a      	add	r2, r1
 8005258:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800525a:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800525c:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800525e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005260:	69e2      	ldr	r2, [r4, #28]
 8005262:	440a      	add	r2, r1
 8005264:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8005266:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005268:	3304      	adds	r3, #4
 800526a:	6263      	str	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800526c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800526e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005270:	429a      	cmp	r2, r3
 8005272:	f000 8258 	beq.w	8005726 <JPEG_Process+0x702>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	e6f4      	b.n	8005064 <JPEG_Process+0x40>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800527a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800527c:	2a00      	cmp	r2, #0
 800527e:	f000 8128 	beq.w	80054d2 <JPEG_Process+0x4ae>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8005282:	6a21      	ldr	r1, [r4, #32]
 8005284:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8005286:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8005288:	f240 81b9 	bls.w	80055fe <JPEG_Process+0x5da>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800528c:	1a52      	subs	r2, r2, r1
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800528e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8005290:	04cd      	lsls	r5, r1, #19
 8005292:	f53f aedb 	bmi.w	800504c <JPEG_Process+0x28>
 8005296:	2a00      	cmp	r2, #0
 8005298:	f43f aed8 	beq.w	800504c <JPEG_Process+0x28>
    if (nb_words >= nbRequestWords)
 800529c:	2a1f      	cmp	r2, #31
    nb_words = nb_bytes / 4UL;
 800529e:	ea4f 0092 	mov.w	r0, r2, lsr #2
    if (nb_words >= nbRequestWords)
 80052a2:	f200 8248 	bhi.w	8005736 <JPEG_Process+0x712>
      if (nb_words > 0UL)
 80052a6:	2a03      	cmp	r2, #3
 80052a8:	f240 82c0 	bls.w	800582c <JPEG_Process+0x808>
          input_count = hjpeg->JpegInCount;
 80052ac:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80052ae:	2801      	cmp	r0, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80052b0:	69a2      	ldr	r2, [r4, #24]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80052b2:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80052b6:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80052b8:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80052ba:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80052bc:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80052c0:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80052c2:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80052c6:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80052ca:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80052ce:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80052d0:	6a21      	ldr	r1, [r4, #32]
 80052d2:	f101 0104 	add.w	r1, r1, #4
 80052d6:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80052d8:	f43f aeb8 	beq.w	800504c <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 80052dc:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80052de:	2802      	cmp	r0, #2
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80052e0:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80052e4:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80052e6:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80052e8:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80052ea:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80052ee:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80052f0:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80052f4:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80052f8:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80052fc:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80052fe:	6a21      	ldr	r1, [r4, #32]
 8005300:	f101 0104 	add.w	r1, r1, #4
 8005304:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8005306:	f43f aea1 	beq.w	800504c <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 800530a:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800530c:	2803      	cmp	r0, #3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800530e:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005312:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005314:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005316:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005318:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800531c:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800531e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8005322:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005326:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800532a:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800532c:	6a21      	ldr	r1, [r4, #32]
 800532e:	f101 0104 	add.w	r1, r1, #4
 8005332:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8005334:	f43f ae8a 	beq.w	800504c <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8005338:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800533a:	2804      	cmp	r0, #4
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800533c:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005340:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005342:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005344:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005346:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800534a:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800534c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8005350:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005354:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005358:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800535a:	6a21      	ldr	r1, [r4, #32]
 800535c:	f101 0104 	add.w	r1, r1, #4
 8005360:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8005362:	f43f ae73 	beq.w	800504c <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8005366:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8005368:	2805      	cmp	r0, #5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800536a:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800536e:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005370:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005372:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005374:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8005378:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800537a:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800537e:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005382:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005386:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8005388:	6a21      	ldr	r1, [r4, #32]
 800538a:	f101 0104 	add.w	r1, r1, #4
 800538e:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8005390:	f43f ae5c 	beq.w	800504c <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8005394:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8005396:	2807      	cmp	r0, #7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005398:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800539c:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800539e:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80053a0:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80053a2:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80053a6:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80053a8:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80053ac:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80053b0:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80053b4:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80053b6:	6a21      	ldr	r1, [r4, #32]
 80053b8:	f101 0104 	add.w	r1, r1, #4
 80053bc:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80053be:	f47f ae45 	bne.w	800504c <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 80053c2:	6a20      	ldr	r0, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80053c4:	1881      	adds	r1, r0, r2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80053c6:	5c85      	ldrb	r5, [r0, r2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80053c8:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80053ca:	78c8      	ldrb	r0, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80053cc:	0412      	lsls	r2, r2, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80053ce:	7849      	ldrb	r1, [r1, #1]
 80053d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80053d4:	432a      	orrs	r2, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80053d6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80053da:	641a      	str	r2, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80053dc:	6a22      	ldr	r2, [r4, #32]
 80053de:	3204      	adds	r2, #4
 80053e0:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80053e2:	e633      	b.n	800504c <JPEG_Process+0x28>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80053e4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80053e6:	2a00      	cmp	r2, #0
 80053e8:	d073      	beq.n	80054d2 <JPEG_Process+0x4ae>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80053ea:	6a21      	ldr	r1, [r4, #32]
 80053ec:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80053ee:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80053f0:	f200 8182 	bhi.w	80056f8 <JPEG_Process+0x6d4>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80053f4:	428a      	cmp	r2, r1
 80053f6:	f040 8104 	bne.w	8005602 <JPEG_Process+0x5de>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80053fa:	6a21      	ldr	r1, [r4, #32]
 80053fc:	4620      	mov	r0, r4
 80053fe:	f7fd f9e1 	bl	80027c4 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8005402:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005404:	2a04      	cmp	r2, #4
 8005406:	d902      	bls.n	800540e <JPEG_Process+0x3ea>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8005408:	f022 0203 	bic.w	r2, r2, #3
 800540c:	62a2      	str	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800540e:	2100      	movs	r1, #0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005410:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
 8005412:	6221      	str	r1, [r4, #32]
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8005414:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8005416:	04c9      	lsls	r1, r1, #19
 8005418:	f53f ae18 	bmi.w	800504c <JPEG_Process+0x28>
 800541c:	2a00      	cmp	r2, #0
 800541e:	f43f ae15 	beq.w	800504c <JPEG_Process+0x28>
    if (nb_words >= nbRequestWords)
 8005422:	0891      	lsrs	r1, r2, #2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005424:	69a0      	ldr	r0, [r4, #24]
    if (nb_words >= nbRequestWords)
 8005426:	f040 8177 	bne.w	8005718 <JPEG_Process+0x6f4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800542a:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800542c:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
 800542e:	6a25      	ldr	r5, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8005430:	5c41      	ldrb	r1, [r0, r1]
          hjpeg->JpegInCount++;
 8005432:	f105 0501 	add.w	r5, r5, #1
 8005436:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8005438:	d010      	beq.n	800545c <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800543a:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800543c:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800543e:	5d45      	ldrb	r5, [r0, r5]
 8005440:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
          hjpeg->JpegInCount++;
 8005444:	6a25      	ldr	r5, [r4, #32]
 8005446:	f105 0501 	add.w	r5, r5, #1
 800544a:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800544c:	d106      	bne.n	800545c <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800544e:	6a22      	ldr	r2, [r4, #32]
 8005450:	5c80      	ldrb	r0, [r0, r2]
          hjpeg->JpegInCount++;
 8005452:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8005454:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
 8005458:	3201      	adds	r2, #1
 800545a:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
 800545c:	6419      	str	r1, [r3, #64]	@ 0x40
 800545e:	e5f5      	b.n	800504c <JPEG_Process+0x28>
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8005460:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005462:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8005464:	3204      	adds	r2, #4
 8005466:	4295      	cmp	r5, r2
 8005468:	f0c0 80cd 	bcc.w	8005606 <JPEG_Process+0x5e2>
      dataword = hjpeg->Instance->DOR;
 800546c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800546e:	69e1      	ldr	r1, [r4, #28]
 8005470:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005472:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8005474:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005476:	69e2      	ldr	r2, [r4, #28]
 8005478:	440a      	add	r2, r1
 800547a:	0a19      	lsrs	r1, r3, #8
 800547c:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800547e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005480:	69e2      	ldr	r2, [r4, #28]
 8005482:	440a      	add	r2, r1
 8005484:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005486:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005488:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800548a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800548c:	69e2      	ldr	r2, [r4, #28]
 800548e:	440a      	add	r2, r1
 8005490:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8005492:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8005494:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      hjpeg->JpegOutCount += 4UL;
 8005496:	3304      	adds	r3, #4
 8005498:	6263      	str	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800549a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800549c:	429a      	cmp	r2, r3
 800549e:	f47f aeea 	bne.w	8005276 <JPEG_Process+0x252>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80054a2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80054a4:	4620      	mov	r0, r4
 80054a6:	69e1      	ldr	r1, [r4, #28]
 80054a8:	f7fd f9b0 	bl	800280c <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80054ac:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
 80054ae:	6266      	str	r6, [r4, #36]	@ 0x24
 80054b0:	e5d8      	b.n	8005064 <JPEG_Process+0x40>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80054b2:	f7fd f9bb 	bl	800282c <HAL_JPEG_DecodeCpltCallback>
 80054b6:	e619      	b.n	80050ec <JPEG_Process+0xc8>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80054b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054ba:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80054be:	631a      	str	r2, [r3, #48]	@ 0x30
 80054c0:	e5f9      	b.n	80050b6 <JPEG_Process+0x92>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80054c2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80054c4:	4620      	mov	r0, r4
 80054c6:	69e1      	ldr	r1, [r4, #28]
 80054c8:	f7fd f9a0 	bl	800280c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80054cc:	2300      	movs	r3, #0
 80054ce:	6263      	str	r3, [r4, #36]	@ 0x24
 80054d0:	e5f9      	b.n	80050c6 <JPEG_Process+0xa2>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80054d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80054d4:	f002 020c 	and.w	r2, r2, #12
 80054d8:	2a0c      	cmp	r2, #12
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80054da:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80054dc:	f000 811e 	beq.w	800571c <JPEG_Process+0x6f8>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80054e0:	f002 020c 	and.w	r2, r2, #12
 80054e4:	2a08      	cmp	r2, #8
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80054e6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80054e8:	f47f adb0 	bne.w	800504c <JPEG_Process+0x28>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80054ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80054f0:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80054f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054f4:	f022 0206 	bic.w	r2, r2, #6
 80054f8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80054fa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80054fc:	e5a6      	b.n	800504c <JPEG_Process+0x28>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80054fe:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005500:	4296      	cmp	r6, r2
 8005502:	f67f adaf 	bls.w	8005064 <JPEG_Process+0x40>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8005506:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005508:	1a30      	subs	r0, r6, r0
    for (index = 0; index < nb_words; index++)
 800550a:	0880      	lsrs	r0, r0, #2
 800550c:	d020      	beq.n	8005550 <JPEG_Process+0x52c>
 800550e:	4629      	mov	r1, r5
 8005510:	e000      	b.n	8005514 <JPEG_Process+0x4f0>
      dataword = hjpeg->Instance->DOR;
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nb_words; index++)
 8005516:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005518:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800551a:	69e6      	ldr	r6, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800551c:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800551e:	54b3      	strb	r3, [r6, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8005520:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8005522:	69e2      	ldr	r2, [r4, #28]
 8005524:	4432      	add	r2, r6
 8005526:	ea4f 2613 	mov.w	r6, r3, lsr #8
 800552a:	7056      	strb	r6, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800552c:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800552e:	69e2      	ldr	r2, [r4, #28]
 8005530:	4432      	add	r2, r6
 8005532:	ea4f 4613 	mov.w	r6, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005536:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800553a:	7096      	strb	r6, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800553c:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800553e:	69e2      	ldr	r2, [r4, #28]
 8005540:	4432      	add	r2, r6
 8005542:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8005544:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005546:	f103 0304 	add.w	r3, r3, #4
 800554a:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800554c:	d1e1      	bne.n	8005512 <JPEG_Process+0x4ee>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800554e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005550:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005552:	69e1      	ldr	r1, [r4, #28]
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8005554:	429e      	cmp	r6, r3
 8005556:	f000 8161 	beq.w	800581c <JPEG_Process+0x7f8>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800555a:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 800555e:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
 8005560:	ebb6 0008 	subs.w	r0, r6, r8
      dataword = hjpeg->Instance->DOR;
 8005564:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 8005566:	d00e      	beq.n	8005586 <JPEG_Process+0x562>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8005568:	f005 0303 	and.w	r3, r5, #3
 800556c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800556e:	3501      	adds	r5, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8005570:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
 8005572:	42a8      	cmp	r0, r5
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8005574:	fa27 f303 	lsr.w	r3, r7, r3
 8005578:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
 800557a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800557c:	69e1      	ldr	r1, [r4, #28]
 800557e:	f103 0301 	add.w	r3, r3, #1
 8005582:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8005584:	d1f0      	bne.n	8005568 <JPEG_Process+0x544>
      nb_bytes = 4UL - nb_bytes;
 8005586:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800558a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800558c:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
 800558e:	eba8 0606 	sub.w	r6, r8, r6
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005592:	f7fd f93b 	bl	800280c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8005596:	2200      	movs	r2, #0
      for (index = nb_bytes; index < 4UL; index++)
 8005598:	2e03      	cmp	r6, #3
      hjpeg->JpegOutCount = 0;
 800559a:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800559c:	f63f ae6b 	bhi.w	8005276 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80055a0:	ea4f 02c6 	mov.w	r2, r6, lsl #3
 80055a4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80055a6:	69e0      	ldr	r0, [r4, #28]
 80055a8:	fa27 f502 	lsr.w	r5, r7, r2
 80055ac:	5445      	strb	r5, [r0, r1]
        hjpeg->JpegOutCount++;
 80055ae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80055b0:	f101 0101 	add.w	r1, r1, #1
 80055b4:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80055b6:	f43f ae5e 	beq.w	8005276 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80055ba:	f102 0108 	add.w	r1, r2, #8
 80055be:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80055c0:	69e5      	ldr	r5, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 80055c2:	2e02      	cmp	r6, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80055c4:	fa27 f101 	lsr.w	r1, r7, r1
 80055c8:	5429      	strb	r1, [r5, r0]
        hjpeg->JpegOutCount++;
 80055ca:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80055cc:	f101 0101 	add.w	r1, r1, #1
 80055d0:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80055d2:	f43f ae50 	beq.w	8005276 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80055d6:	3210      	adds	r2, #16
 80055d8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80055da:	69e0      	ldr	r0, [r4, #28]
 80055dc:	fa27 f202 	lsr.w	r2, r7, r2
 80055e0:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 80055e2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80055e4:	3201      	adds	r2, #1
 80055e6:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80055e8:	2e00      	cmp	r6, #0
 80055ea:	f47f ae44 	bne.w	8005276 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80055ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80055f0:	0e3f      	lsrs	r7, r7, #24
 80055f2:	69e2      	ldr	r2, [r4, #28]
 80055f4:	54d7      	strb	r7, [r2, r3]
        hjpeg->JpegOutCount++;
 80055f6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80055f8:	3301      	adds	r3, #1
 80055fa:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80055fc:	e63b      	b.n	8005276 <JPEG_Process+0x252>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80055fe:	428a      	cmp	r2, r1
 8005600:	d07c      	beq.n	80056fc <JPEG_Process+0x6d8>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8005602:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005604:	e522      	b.n	800504c <JPEG_Process+0x28>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8005606:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005608:	4295      	cmp	r5, r2
 800560a:	f67f ad2b 	bls.w	8005064 <JPEG_Process+0x40>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800560e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005610:	1a28      	subs	r0, r5, r0
    for (index = 0; index < nb_words; index++)
 8005612:	0880      	lsrs	r0, r0, #2
 8005614:	d020      	beq.n	8005658 <JPEG_Process+0x634>
 8005616:	4631      	mov	r1, r6
 8005618:	e000      	b.n	800561c <JPEG_Process+0x5f8>
      dataword = hjpeg->Instance->DOR;
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nb_words; index++)
 800561e:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005620:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005622:	69e5      	ldr	r5, [r4, #28]
    for (index = 0; index < nb_words; index++)
 8005624:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005626:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8005628:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800562a:	69e2      	ldr	r2, [r4, #28]
 800562c:	442a      	add	r2, r5
 800562e:	ea4f 2513 	mov.w	r5, r3, lsr #8
 8005632:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005634:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8005636:	69e2      	ldr	r2, [r4, #28]
 8005638:	442a      	add	r2, r5
 800563a:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800563e:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005642:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005644:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8005646:	69e2      	ldr	r2, [r4, #28]
 8005648:	442a      	add	r2, r5
 800564a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 800564c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800564e:	f103 0304 	add.w	r3, r3, #4
 8005652:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8005654:	d1e1      	bne.n	800561a <JPEG_Process+0x5f6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8005656:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8005658:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800565a:	69e1      	ldr	r1, [r4, #28]
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800565c:	429d      	cmp	r5, r3
 800565e:	f000 80dd 	beq.w	800581c <JPEG_Process+0x7f8>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8005662:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8005666:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
 8005668:	ebb5 0008 	subs.w	r0, r5, r8
      dataword = hjpeg->Instance->DOR;
 800566c:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 800566e:	d00e      	beq.n	800568e <JPEG_Process+0x66a>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8005670:	f006 0303 	and.w	r3, r6, #3
 8005674:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8005676:	3601      	adds	r6, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8005678:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
 800567a:	42b0      	cmp	r0, r6
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800567c:	fa27 f303 	lsr.w	r3, r7, r3
 8005680:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
 8005682:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005684:	69e1      	ldr	r1, [r4, #28]
 8005686:	f103 0301 	add.w	r3, r3, #1
 800568a:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800568c:	d1f0      	bne.n	8005670 <JPEG_Process+0x64c>
      nb_bytes = 4UL - nb_bytes;
 800568e:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005692:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005694:	4620      	mov	r0, r4
 8005696:	f7fd f8b9 	bl	800280c <HAL_JPEG_DataReadyCallback>
      nb_bytes = 4UL - nb_bytes;
 800569a:	eba8 0305 	sub.w	r3, r8, r5
      hjpeg->JpegOutCount = 0;
 800569e:	2200      	movs	r2, #0
      for (index = nb_bytes; index < 4UL; index++)
 80056a0:	2b03      	cmp	r3, #3
      hjpeg->JpegOutCount = 0;
 80056a2:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80056a4:	f63f ade7 	bhi.w	8005276 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80056a8:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 80056ac:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80056ae:	69e0      	ldr	r0, [r4, #28]
 80056b0:	fa27 f502 	lsr.w	r5, r7, r2
 80056b4:	5445      	strb	r5, [r0, r1]
        hjpeg->JpegOutCount++;
 80056b6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80056b8:	f101 0101 	add.w	r1, r1, #1
 80056bc:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80056be:	f43f adda 	beq.w	8005276 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80056c2:	f102 0108 	add.w	r1, r2, #8
 80056c6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80056c8:	69e5      	ldr	r5, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 80056ca:	2b02      	cmp	r3, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80056cc:	fa27 f101 	lsr.w	r1, r7, r1
 80056d0:	5429      	strb	r1, [r5, r0]
        hjpeg->JpegOutCount++;
 80056d2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80056d4:	f101 0101 	add.w	r1, r1, #1
 80056d8:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80056da:	f43f adcc 	beq.w	8005276 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80056de:	3210      	adds	r2, #16
 80056e0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80056e2:	69e0      	ldr	r0, [r4, #28]
 80056e4:	fa27 f202 	lsr.w	r2, r7, r2
 80056e8:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 80056ea:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80056ec:	3201      	adds	r2, #1
 80056ee:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f43f af7c 	beq.w	80055ee <JPEG_Process+0x5ca>
 80056f6:	e5be      	b.n	8005276 <JPEG_Process+0x252>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80056f8:	1a52      	subs	r2, r2, r1
 80056fa:	e68b      	b.n	8005414 <JPEG_Process+0x3f0>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80056fc:	6a21      	ldr	r1, [r4, #32]
 80056fe:	4620      	mov	r0, r4
 8005700:	f7fd f860 	bl	80027c4 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8005704:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005706:	2a04      	cmp	r2, #4
 8005708:	d902      	bls.n	8005710 <JPEG_Process+0x6ec>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800570a:	f022 0203 	bic.w	r2, r2, #3
 800570e:	62a2      	str	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8005710:	2100      	movs	r1, #0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005712:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
 8005714:	6221      	str	r1, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 8005716:	e5ba      	b.n	800528e <JPEG_Process+0x26a>
        input_count = hjpeg->JpegInCount;
 8005718:	6a22      	ldr	r2, [r4, #32]
 800571a:	e653      	b.n	80053c4 <JPEG_Process+0x3a0>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800571c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005720:	6562      	str	r2, [r4, #84]	@ 0x54
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8005722:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005724:	e492      	b.n	800504c <JPEG_Process+0x28>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005726:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005728:	4620      	mov	r0, r4
 800572a:	69e1      	ldr	r1, [r4, #28]
 800572c:	f7fd f86e 	bl	800280c <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8005730:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
 8005732:	6265      	str	r5, [r4, #36]	@ 0x24
 8005734:	e496      	b.n	8005064 <JPEG_Process+0x40>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005736:	69a2      	ldr	r2, [r4, #24]
        input_count = hjpeg->JpegInCount;
 8005738:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800573a:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800573c:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800573e:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005740:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005742:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8005744:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005746:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800574a:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800574c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005750:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8005752:	6a21      	ldr	r1, [r4, #32]
 8005754:	3104      	adds	r1, #4
 8005756:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8005758:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800575a:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800575c:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800575e:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005760:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005762:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8005764:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005766:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800576a:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800576c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005770:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8005772:	6a21      	ldr	r1, [r4, #32]
 8005774:	3104      	adds	r1, #4
 8005776:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8005778:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800577a:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800577c:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800577e:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005780:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005782:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8005784:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005786:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800578a:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800578c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005790:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8005792:	6a21      	ldr	r1, [r4, #32]
 8005794:	3104      	adds	r1, #4
 8005796:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8005798:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800579a:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800579c:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800579e:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80057a0:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057a2:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80057a4:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80057a6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 80057aa:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057ac:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80057b0:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80057b2:	6a21      	ldr	r1, [r4, #32]
 80057b4:	3104      	adds	r1, #4
 80057b6:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 80057b8:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80057ba:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80057bc:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057be:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80057c0:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057c2:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80057c4:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80057c6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 80057ca:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057cc:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80057d0:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80057d2:	6a21      	ldr	r1, [r4, #32]
 80057d4:	3104      	adds	r1, #4
 80057d6:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 80057d8:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80057da:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80057dc:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057de:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80057e0:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057e2:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80057e4:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80057e6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 80057ea:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057ec:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80057f0:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80057f2:	6a21      	ldr	r1, [r4, #32]
 80057f4:	3104      	adds	r1, #4
 80057f6:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 80057f8:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80057fa:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80057fc:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057fe:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005800:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005802:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8005804:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005806:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800580a:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800580c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005810:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8005812:	6a21      	ldr	r1, [r4, #32]
 8005814:	3104      	adds	r1, #4
 8005816:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8005818:	6a20      	ldr	r0, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800581a:	e5d3      	b.n	80053c4 <JPEG_Process+0x3a0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800581c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800581e:	4620      	mov	r0, r4
 8005820:	f7fc fff4 	bl	800280c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8005824:	2200      	movs	r2, #0
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8005826:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
 8005828:	6262      	str	r2, [r4, #36]	@ 0x24
 800582a:	e41b      	b.n	8005064 <JPEG_Process+0x40>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800582c:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800582e:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
 8005830:	6a20      	ldr	r0, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8005832:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
 8005834:	f100 0001 	add.w	r0, r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8005838:	5c69      	ldrb	r1, [r5, r1]
          hjpeg->JpegInCount++;
 800583a:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800583c:	f43f ae0e 	beq.w	800545c <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8005840:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8005842:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8005844:	5c28      	ldrb	r0, [r5, r0]
 8005846:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          hjpeg->JpegInCount++;
 800584a:	6a20      	ldr	r0, [r4, #32]
 800584c:	f100 0001 	add.w	r0, r0, #1
 8005850:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8005852:	f47f ae03 	bne.w	800545c <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8005856:	6a22      	ldr	r2, [r4, #32]
 8005858:	5ca8      	ldrb	r0, [r5, r2]
          hjpeg->JpegInCount++;
 800585a:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800585c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
 8005860:	3201      	adds	r2, #1
 8005862:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
 8005864:	e5fa      	b.n	800545c <JPEG_Process+0x438>
 8005866:	bf00      	nop

08005868 <HAL_JPEG_IRQHandler>:
{
 8005868:	b538      	push	{r3, r4, r5, lr}
  switch (hjpeg->State)
 800586a:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 800586e:	3b03      	subs	r3, #3
 8005870:	2b01      	cmp	r3, #1
 8005872:	d900      	bls.n	8005876 <HAL_JPEG_IRQHandler+0xe>
}
 8005874:	bd38      	pop	{r3, r4, r5, pc}
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8005876:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005878:	4604      	mov	r4, r0
 800587a:	f003 030c 	and.w	r3, r3, #12
 800587e:	2b08      	cmp	r3, #8
 8005880:	d050      	beq.n	8005924 <HAL_JPEG_IRQHandler+0xbc>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8005882:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005884:	f003 030c 	and.w	r3, r3, #12
 8005888:	2b0c      	cmp	r3, #12
 800588a:	d1f3      	bne.n	8005874 <HAL_JPEG_IRQHandler+0xc>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800588c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800588e:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005890:	f002 0203 	and.w	r2, r2, #3
 8005894:	2a02      	cmp	r2, #2
 8005896:	d049      	beq.n	800592c <HAL_JPEG_IRQHandler+0xc4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8005898:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800589a:	0692      	lsls	r2, r2, #26
 800589c:	d5ea      	bpl.n	8005874 <HAL_JPEG_IRQHandler+0xc>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800589e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80058a0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80058a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058a6:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	f022 0201 	bic.w	r2, r2, #1
 80058ae:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80058b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058b2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80058b6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80058b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058ba:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80058be:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80058c0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d054      	beq.n	8005972 <HAL_JPEG_IRQHandler+0x10a>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 80058c8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80058ca:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d043      	beq.n	800595a <HAL_JPEG_IRQHandler+0xf2>
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80058d2:	6803      	ldr	r3, [r0, #0]
 80058d4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	6263      	str	r3, [r4, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80058e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d048      	beq.n	8005978 <HAL_JPEG_IRQHandler+0x110>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 80058e6:	6822      	ldr	r2, [r4, #0]
 80058e8:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 80058ea:	f015 0510 	ands.w	r5, r5, #16
 80058ee:	d138      	bne.n	8005962 <HAL_JPEG_IRQHandler+0xfa>
    if (hjpeg->JpegOutCount > 0UL)
 80058f0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d14b      	bne.n	800598e <HAL_JPEG_IRQHandler+0x126>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80058f6:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
 80058f8:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
 80058fa:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80058fc:	f023 0301 	bic.w	r3, r3, #1
 8005900:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8005902:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005904:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005906:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 800590a:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800590e:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8005912:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005914:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005916:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005918:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800591c:	d034      	beq.n	8005988 <HAL_JPEG_IRQHandler+0x120>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800591e:	f7ff fa31 	bl	8004d84 <HAL_JPEG_EncodeCpltCallback>
}
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (void) JPEG_Process(hjpeg);
 8005928:	f7ff bb7c 	b.w	8005024 <JPEG_Process>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800592c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800592e:	0651      	lsls	r1, r2, #25
 8005930:	d5b2      	bpl.n	8005898 <HAL_JPEG_IRQHandler+0x30>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8005932:	1d05      	adds	r5, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
 8005934:	4629      	mov	r1, r5
 8005936:	f7fe ffd7 	bl	80048e8 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
 800593a:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800593c:	4629      	mov	r1, r5
 800593e:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8005940:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8005942:	f7fc ff3d 	bl	80027c0 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800594a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800594e:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8005950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005952:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005956:	639a      	str	r2, [r3, #56]	@ 0x38
 8005958:	e79e      	b.n	8005898 <HAL_JPEG_IRQHandler+0x30>
}
 800595a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800595e:	f000 b92f 	b.w	8005bc0 <HAL_MDMA_Abort_IT>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8005962:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005964:	049b      	lsls	r3, r3, #18
 8005966:	d485      	bmi.n	8005874 <HAL_JPEG_IRQHandler+0xc>
    JPEG_DMA_PollResidualData(hjpeg);
 8005968:	4620      	mov	r0, r4
}
 800596a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800596e:	f7ff ba75 	b.w	8004e5c <JPEG_DMA_PollResidualData>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8005972:	f000 f925 	bl	8005bc0 <HAL_MDMA_Abort_IT>
 8005976:	e7a7      	b.n	80058c8 <HAL_JPEG_IRQHandler+0x60>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005978:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800597a:	4620      	mov	r0, r4
 800597c:	69e1      	ldr	r1, [r4, #28]
 800597e:	f7fc ff45 	bl	800280c <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8005982:	2300      	movs	r3, #0
 8005984:	6263      	str	r3, [r4, #36]	@ 0x24
 8005986:	e7ae      	b.n	80058e6 <HAL_JPEG_IRQHandler+0x7e>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8005988:	f7fc ff50 	bl	800282c <HAL_JPEG_DecodeCpltCallback>
}
 800598c:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800598e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005990:	4620      	mov	r0, r4
 8005992:	69e1      	ldr	r1, [r4, #28]
 8005994:	f7fc ff3a 	bl	800280c <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005998:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
 800599a:	6265      	str	r5, [r4, #36]	@ 0x24
 800599c:	e7ab      	b.n	80058f6 <HAL_JPEG_IRQHandler+0x8e>
 800599e:	bf00      	nop

080059a0 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80059a0:	b538      	push	{r3, r4, r5, lr}
 80059a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80059a4:	f7fe f9ba 	bl	8003d1c <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80059a8:	2c00      	cmp	r4, #0
 80059aa:	d058      	beq.n	8005a5e <HAL_MDMA_Init+0xbe>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80059ac:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80059ae:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
 80059b0:	2100      	movs	r1, #0
 80059b2:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80059b4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 80059b8:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	f022 0201 	bic.w	r2, r2, #1
 80059c2:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80059c4:	e005      	b.n	80059d2 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80059c6:	f7fe f9a9 	bl	8003d1c <HAL_GetTick>
 80059ca:	1b43      	subs	r3, r0, r5
 80059cc:	2b05      	cmp	r3, #5
 80059ce:	d841      	bhi.n	8005a54 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	07d2      	lsls	r2, r2, #31
 80059d6:	d4f6      	bmi.n	80059c6 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80059d8:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 80059dc:	69e0      	ldr	r0, [r4, #28]
 80059de:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80059e0:	68e1      	ldr	r1, [r4, #12]
 80059e2:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80059e4:	4302      	orrs	r2, r0
 80059e6:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80059e8:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80059ea:	4302      	orrs	r2, r0
 80059ec:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80059ee:	4302      	orrs	r2, r0
 80059f0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80059f2:	4302      	orrs	r2, r0
 80059f4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80059f6:	4302      	orrs	r2, r0
 80059f8:	68a0      	ldr	r0, [r4, #8]
 80059fa:	4302      	orrs	r2, r0
 80059fc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80059fe:	3801      	subs	r0, #1
 8005a00:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8005a04:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8005a06:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8005a08:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8005a0c:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8005a0e:	d103      	bne.n	8005a18 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8005a10:	691a      	ldr	r2, [r3, #16]
 8005a12:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8005a16:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8005a18:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8005a1a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005a1c:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
 8005a1e:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8005a20:	db1f      	blt.n	8005a62 <HAL_MDMA_Init+0xc2>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8005a22:	b292      	uxth	r2, r2
 8005a24:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8005a26:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005a28:	2a00      	cmp	r2, #0
 8005a2a:	db24      	blt.n	8005a76 <HAL_MDMA_Init+0xd6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8005a2c:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8005a2e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8005a32:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8005a36:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8005a38:	d029      	beq.n	8005a8e <HAL_MDMA_Init+0xee>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8005a3a:	b2c0      	uxtb	r0, r0
 8005a3c:	6298      	str	r0, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8005a3e:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8005a40:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 8005a42:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_OK;
 8005a44:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8005a46:	66a2      	str	r2, [r4, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8005a48:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8005a4a:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  hmdma->FirstLinkedListNodeAddress  = 0;
 8005a4e:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
}
 8005a52:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8005a54:	2240      	movs	r2, #64	@ 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8005a56:	2303      	movs	r3, #3
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8005a58:	66a2      	str	r2, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8005a5a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 8005a5e:	2001      	movs	r0, #1
}
 8005a60:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8005a62:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8005a64:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8005a66:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8005a6a:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8005a6c:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8005a6e:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8005a70:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005a72:	2a00      	cmp	r2, #0
 8005a74:	dada      	bge.n	8005a2c <HAL_MDMA_Init+0x8c>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8005a76:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8005a78:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8005a7a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8005a7e:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 8005a82:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8005a84:	6a19      	ldr	r1, [r3, #32]
 8005a86:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8005a8a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8005a8c:	d1d5      	bne.n	8005a3a <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 8005a8e:	2200      	movs	r2, #0
 8005a90:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a92:	e7d4      	b.n	8005a3e <HAL_MDMA_Init+0x9e>

08005a94 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8005a94:	b1f8      	cbz	r0, 8005ad6 <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
 8005a96:	6802      	ldr	r2, [r0, #0]
 8005a98:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
 8005a9a:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 8005a9c:	68d0      	ldr	r0, [r2, #12]
{
 8005a9e:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
 8005aa0:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8005aa4:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
 8005aa6:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
 8005aa8:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
 8005aaa:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8005aac:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8005aae:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8005ab0:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8005ab2:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8005ab4:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8005ab6:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8005ab8:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8005aba:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8005abc:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8005abe:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8005ac0:	668b      	str	r3, [r1, #104]	@ 0x68
  __HAL_UNLOCK(hmdma);
 8005ac2:	f881 303c 	strb.w	r3, [r1, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 8005ac6:	f881 303d 	strb.w	r3, [r1, #61]	@ 0x3d
}
 8005aca:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
 8005ace:	664b      	str	r3, [r1, #100]	@ 0x64
  hmdma->FirstLinkedListNodeAddress  = 0;
 8005ad0:	e9c1 3317 	strd	r3, r3, [r1, #92]	@ 0x5c
}
 8005ad4:	4770      	bx	lr
    return HAL_ERROR;
 8005ad6:	2001      	movs	r0, #1
}
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop

08005adc <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
 8005adc:	2800      	cmp	r0, #0
 8005ade:	d06b      	beq.n	8005bb8 <HAL_MDMA_Start_IT+0xdc>
{
 8005ae0:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hmdma);
 8005ae2:	f890 403c 	ldrb.w	r4, [r0, #60]	@ 0x3c
 8005ae6:	2c01      	cmp	r4, #1
 8005ae8:	d009      	beq.n	8005afe <HAL_MDMA_Start_IT+0x22>
 8005aea:	2401      	movs	r4, #1
 8005aec:	f880 403c 	strb.w	r4, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8005af0:	f890 403d 	ldrb.w	r4, [r0, #61]	@ 0x3d
 8005af4:	2c01      	cmp	r4, #1
 8005af6:	d005      	beq.n	8005b04 <HAL_MDMA_Start_IT+0x28>
    __HAL_UNLOCK(hmdma);
 8005af8:	2300      	movs	r3, #0
 8005afa:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 8005afe:	2002      	movs	r0, #2
}
 8005b00:	bc70      	pop	{r4, r5, r6}
 8005b02:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8005b04:	2402      	movs	r4, #2
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8005b06:	9e03      	ldr	r6, [sp, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8005b08:	4d2c      	ldr	r5, [pc, #176]	@ (8005bbc <HAL_MDMA_Start_IT+0xe0>)
 8005b0a:	f3c3 0310 	ubfx	r3, r3, #0, #17
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8005b0e:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8005b12:	2400      	movs	r4, #0
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8005b14:	f106 3cff 	add.w	ip, r6, #4294967295
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8005b18:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8005b1c:	6684      	str	r4, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 8005b1e:	6804      	ldr	r4, [r0, #0]
 8005b20:	68e6      	ldr	r6, [r4, #12]
 8005b22:	f026 0601 	bic.w	r6, r6, #1
 8005b26:	60e6      	str	r6, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8005b28:	6966      	ldr	r6, [r4, #20]
 8005b2a:	ea05 0506 	and.w	r5, r5, r6
 8005b2e:	ea45 0503 	orr.w	r5, r5, r3
 8005b32:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8005b34:	6963      	ldr	r3, [r4, #20]
 8005b36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b3a:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8005b3e:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8005b40:	f04f 031f 	mov.w	r3, #31
 8005b44:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 8005b46:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 8005b48:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8005b4a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005b4c:	bf0c      	ite	eq
 8005b4e:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8005b52:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8005b56:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
 8005b5a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8005b5c:	62a3      	str	r3, [r4, #40]	@ 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8005b5e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005b60:	bf0c      	ite	eq
 8005b62:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8005b66:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 8005b6a:	62a3      	str	r3, [r4, #40]	@ 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8005b6c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8005b6e:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8005b70:	68e3      	ldr	r3, [r4, #12]
 8005b72:	f043 0306 	orr.w	r3, r3, #6
 8005b76:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 8005b78:	b11a      	cbz	r2, 8005b82 <HAL_MDMA_Start_IT+0xa6>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8005b7a:	68e3      	ldr	r3, [r4, #12]
 8005b7c:	f043 0310 	orr.w	r3, r3, #16
 8005b80:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8005b82:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8005b84:	b11b      	cbz	r3, 8005b8e <HAL_MDMA_Start_IT+0xb2>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8005b86:	68e3      	ldr	r3, [r4, #12]
 8005b88:	f043 0308 	orr.w	r3, r3, #8
 8005b8c:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 8005b8e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8005b90:	b11b      	cbz	r3, 8005b9a <HAL_MDMA_Start_IT+0xbe>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8005b92:	68e3      	ldr	r3, [r4, #12]
 8005b94:	f043 0320 	orr.w	r3, r3, #32
 8005b98:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
 8005b9a:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8005b9c:	6842      	ldr	r2, [r0, #4]
    __HAL_MDMA_ENABLE(hmdma);
 8005b9e:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8005ba2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
 8005ba6:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8005ba8:	d103      	bne.n	8005bb2 <HAL_MDMA_Start_IT+0xd6>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8005baa:	68e3      	ldr	r3, [r4, #12]
 8005bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bb0:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 8005bb2:	2000      	movs	r0, #0
}
 8005bb4:	bc70      	pop	{r4, r5, r6}
 8005bb6:	4770      	bx	lr
    return HAL_ERROR;
 8005bb8:	2001      	movs	r0, #1
}
 8005bba:	4770      	bx	lr
 8005bbc:	fffe0000 	.word	0xfffe0000

08005bc0 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	b128      	cbz	r0, 8005bd0 <HAL_MDMA_Abort_IT+0x10>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8005bc4:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
 8005bc8:	2a02      	cmp	r2, #2
 8005bca:	d003      	beq.n	8005bd4 <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8005bcc:	2280      	movs	r2, #128	@ 0x80
 8005bce:	6682      	str	r2, [r0, #104]	@ 0x68
    return HAL_ERROR;
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 8005bd4:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8005bd6:	2104      	movs	r1, #4
  return HAL_OK;
 8005bd8:	2000      	movs	r0, #0
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8005bda:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 8005bde:	68d3      	ldr	r3, [r2, #12]
 8005be0:	f023 0301 	bic.w	r3, r3, #1
 8005be4:	60d3      	str	r3, [r2, #12]
}
 8005be6:	4770      	bx	lr

08005be8 <HAL_MDMA_IRQHandler>:
{
 8005be8:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
 8005bea:	2300      	movs	r3, #0
{
 8005bec:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8005bee:	f04f 45a4 	mov.w	r5, #1375731712	@ 0x52000000
{
 8005bf2:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8005bf4:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8005bf6:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8005bf8:	4b57      	ldr	r3, [pc, #348]	@ (8005d58 <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8005bfa:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8005bfc:	4a57      	ldr	r2, [pc, #348]	@ (8005d5c <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8005bfe:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	441a      	add	r2, r3
 8005c04:	f3c2 1284 	ubfx	r2, r2, #6, #5
 8005c08:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8005c0c:	4202      	tst	r2, r0
 8005c0e:	f000 80a0 	beq.w	8005d52 <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	07d1      	lsls	r1, r2, #31
 8005c16:	d529      	bpl.n	8005c6c <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	0792      	lsls	r2, r2, #30
 8005c1c:	d526      	bpl.n	8005c6c <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8005c1e:	68da      	ldr	r2, [r3, #12]
 8005c20:	f022 0202 	bic.w	r2, r2, #2
 8005c24:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 8005c26:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8005c28:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 8005c2a:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8005c2c:	bf54      	ite	pl
 8005c2e:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8005c32:	f041 0102 	orrmi.w	r1, r1, #2
 8005c36:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8005c38:	0591      	lsls	r1, r2, #22
 8005c3a:	d503      	bpl.n	8005c44 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8005c3c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8005c3e:	f041 0104 	orr.w	r1, r1, #4
 8005c42:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8005c44:	05d0      	lsls	r0, r2, #23
 8005c46:	d503      	bpl.n	8005c50 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8005c48:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8005c4a:	f041 0108 	orr.w	r1, r1, #8
 8005c4e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8005c50:	0551      	lsls	r1, r2, #21
 8005c52:	d503      	bpl.n	8005c5c <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8005c54:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8005c56:	f041 0110 	orr.w	r1, r1, #16
 8005c5a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8005c5c:	0510      	lsls	r0, r2, #20
 8005c5e:	d503      	bpl.n	8005c68 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8005c60:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8005c62:	f042 0220 	orr.w	r2, r2, #32
 8005c66:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8005c68:	2201      	movs	r2, #1
 8005c6a:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	06d1      	lsls	r1, r2, #27
 8005c70:	d509      	bpl.n	8005c86 <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	0692      	lsls	r2, r2, #26
 8005c76:	d506      	bpl.n	8005c86 <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8005c78:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
 8005c7a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8005c7c:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 8005c7e:	b112      	cbz	r2, 8005c86 <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
 8005c80:	4620      	mov	r0, r4
 8005c82:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	0710      	lsls	r0, r2, #28
 8005c8a:	d509      	bpl.n	8005ca0 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	06d1      	lsls	r1, r2, #27
 8005c90:	d506      	bpl.n	8005ca0 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8005c92:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
 8005c94:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8005c96:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 8005c98:	b112      	cbz	r2, 8005ca0 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	0752      	lsls	r2, r2, #29
 8005ca4:	d509      	bpl.n	8005cba <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	0710      	lsls	r0, r2, #28
 8005caa:	d506      	bpl.n	8005cba <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8005cac:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8005cae:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8005cb0:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8005cb2:	b112      	cbz	r2, 8005cba <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	0791      	lsls	r1, r2, #30
 8005cbe:	d516      	bpl.n	8005cee <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	0752      	lsls	r2, r2, #29
 8005cc4:	d513      	bpl.n	8005cee <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8005ccc:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8005cce:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8005cd2:	2a04      	cmp	r2, #4
 8005cd4:	d034      	beq.n	8005d40 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8005cd6:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
 8005cd8:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8005cda:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 8005cdc:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
 8005cde:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hmdma);
 8005ce0:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 8005ce4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 8005ce8:	b10b      	cbz	r3, 8005cee <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
 8005cea:	4620      	mov	r0, r4
 8005cec:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8005cee:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d02e      	beq.n	8005d52 <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
 8005cf4:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8005cf6:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 8005cf8:	4b19      	ldr	r3, [pc, #100]	@ (8005d60 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8005cfa:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
 8005cfe:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
 8005d02:	68cb      	ldr	r3, [r1, #12]
 8005d04:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d08:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
 8005d0a:	60cb      	str	r3, [r1, #12]
 8005d0c:	e002      	b.n	8005d14 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8005d0e:	68cb      	ldr	r3, [r1, #12]
 8005d10:	07d8      	lsls	r0, r3, #31
 8005d12:	d504      	bpl.n	8005d1e <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
 8005d14:	9b01      	ldr	r3, [sp, #4]
 8005d16:	3301      	adds	r3, #1
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	9301      	str	r3, [sp, #4]
 8005d1c:	d9f7      	bls.n	8005d0e <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005d24:	68cb      	ldr	r3, [r1, #12]
 8005d26:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8005d28:	bf4c      	ite	mi
 8005d2a:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 8005d2c:	2301      	movpl	r3, #1
 8005d2e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 8005d32:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005d34:	b16b      	cbz	r3, 8005d52 <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
 8005d36:	4620      	mov	r0, r4
}
 8005d38:	b003      	add	sp, #12
 8005d3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 8005d3e:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
 8005d40:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
 8005d42:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
 8005d44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hmdma);
 8005d46:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 8005d4a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1f1      	bne.n	8005d36 <HAL_MDMA_IRQHandler+0x14e>
}
 8005d52:	b003      	add	sp, #12
 8005d54:	bd30      	pop	{r4, r5, pc}
 8005d56:	bf00      	nop
 8005d58:	2400000c 	.word	0x2400000c
 8005d5c:	adffffc0 	.word	0xadffffc0
 8005d60:	1b4e81b5 	.word	0x1b4e81b5

08005d64 <HAL_PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8005d64:	4a10      	ldr	r2, [pc, #64]	@ (8005da8 <HAL_PWR_EnterSTOPMode+0x44>)
 8005d66:	6813      	ldr	r3, [r2, #0]
 8005d68:	f023 0301 	bic.w	r3, r3, #1
 8005d6c:	4303      	orrs	r3, r0
{
 8005d6e:	b410      	push	{r4}
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8005d70:	6013      	str	r3, [r2, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8005d72:	6913      	ldr	r3, [r2, #16]
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005d74:	4c0d      	ldr	r4, [pc, #52]	@ (8005dac <HAL_PWR_EnterSTOPMode+0x48>)
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8005d76:	f023 0305 	bic.w	r3, r3, #5
 8005d7a:	6113      	str	r3, [r2, #16]
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005d7c:	6923      	ldr	r3, [r4, #16]
 8005d7e:	f043 0304 	orr.w	r3, r3, #4
 8005d82:	6123      	str	r3, [r4, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005d88:	f3bf 8f6f 	isb	sy
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005d8c:	2901      	cmp	r1, #1
 8005d8e:	d008      	beq.n	8005da2 <HAL_PWR_EnterSTOPMode+0x3e>
    __WFI ();
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8005d90:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005d92:	4a06      	ldr	r2, [pc, #24]	@ (8005dac <HAL_PWR_EnterSTOPMode+0x48>)
}
 8005d94:	f85d 4b04 	ldr.w	r4, [sp], #4
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005d98:	6913      	ldr	r3, [r2, #16]
 8005d9a:	f023 0304 	bic.w	r3, r3, #4
 8005d9e:	6113      	str	r3, [r2, #16]
}
 8005da0:	4770      	bx	lr
    __WFI ();
 8005da2:	bf30      	wfi
 8005da4:	e7f5      	b.n	8005d92 <HAL_PWR_EnterSTOPMode+0x2e>
 8005da6:	bf00      	nop
 8005da8:	58024800 	.word	0x58024800
 8005dac:	e000ed00 	.word	0xe000ed00

08005db0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005db0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005db2:	4c10      	ldr	r4, [pc, #64]	@ (8005df4 <HAL_PWREx_ConfigSupply+0x44>)
 8005db4:	68e3      	ldr	r3, [r4, #12]
 8005db6:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005dba:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005dbc:	d105      	bne.n	8005dca <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	1a18      	subs	r0, r3, r0
 8005dc4:	bf18      	it	ne
 8005dc6:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8005dc8:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005dca:	f023 0307 	bic.w	r3, r3, #7
 8005dce:	4303      	orrs	r3, r0
 8005dd0:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8005dd2:	f7fd ffa3 	bl	8003d1c <HAL_GetTick>
 8005dd6:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005dd8:	e005      	b.n	8005de6 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005dda:	f7fd ff9f 	bl	8003d1c <HAL_GetTick>
 8005dde:	1b40      	subs	r0, r0, r5
 8005de0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8005de4:	d804      	bhi.n	8005df0 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005de6:	6863      	ldr	r3, [r4, #4]
 8005de8:	049b      	lsls	r3, r3, #18
 8005dea:	d5f6      	bpl.n	8005dda <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 8005dec:	2000      	movs	r0, #0
}
 8005dee:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8005df0:	2001      	movs	r0, #1
}
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	58024800 	.word	0x58024800

08005df8 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005df8:	4b33      	ldr	r3, [pc, #204]	@ (8005ec8 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8005dfa:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dfc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005dfe:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e00:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8005e02:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005e08:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8005e0c:	d036      	beq.n	8005e7c <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e0e:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e12:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e16:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e1a:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e1e:	fb05 f202 	mul.w	r2, r5, r2
 8005e22:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e28:	ee06 2a90 	vmov	s13, r2
 8005e2c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8005e30:	d002      	beq.n	8005e38 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8005e32:	2902      	cmp	r1, #2
 8005e34:	d042      	beq.n	8005ebc <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 8005e36:	b319      	cbz	r1, 8005e80 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e38:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8005ecc <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8005e3c:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e46:	ee07 3a90 	vmov	s15, r3
 8005e4a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e56:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005e5a:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ec8 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8005e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e62:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005e66:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005e68:	ee07 3a10 	vmov	s14, r3
 8005e6c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005e70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005e74:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005e78:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8005e7c:	bc30      	pop	{r4, r5}
 8005e7e:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	0692      	lsls	r2, r2, #26
 8005e84:	d51d      	bpl.n	8005ec2 <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e86:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e88:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e8c:	4a10      	ldr	r2, [pc, #64]	@ (8005ed0 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e90:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e98:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	ee06 2a10 	vmov	s12, r2
 8005ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ea6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005eaa:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8005eae:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8005eb2:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8005eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005eba:	e7d0      	b.n	8005e5e <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ebc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005ed4 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8005ec0:	e7bc      	b.n	8005e3c <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ec2:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005ed8 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 8005ec6:	e7b9      	b.n	8005e3c <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8005ec8:	58024400 	.word	0x58024400
 8005ecc:	4a742400 	.word	0x4a742400
 8005ed0:	03d09000 	.word	0x03d09000
 8005ed4:	4bbebc20 	.word	0x4bbebc20
 8005ed8:	4c742400 	.word	0x4c742400

08005edc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8005edc:	2800      	cmp	r0, #0
 8005ede:	f000 82dc 	beq.w	800649a <HAL_RCC_OscConfig+0x5be>
{
 8005ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ee4:	6803      	ldr	r3, [r0, #0]
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	07d9      	lsls	r1, r3, #31
 8005eea:	d53b      	bpl.n	8005f64 <HAL_RCC_OscConfig+0x88>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eec:	499e      	ldr	r1, [pc, #632]	@ (8006168 <HAL_RCC_OscConfig+0x28c>)
 8005eee:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ef0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ef2:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005ef6:	2a10      	cmp	r2, #16
 8005ef8:	f000 80e4 	beq.w	80060c4 <HAL_RCC_OscConfig+0x1e8>
 8005efc:	2a18      	cmp	r2, #24
 8005efe:	f000 80dc 	beq.w	80060ba <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f02:	6863      	ldr	r3, [r4, #4]
 8005f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f08:	d018      	beq.n	8005f3c <HAL_RCC_OscConfig+0x60>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 8154 	beq.w	80061b8 <HAL_RCC_OscConfig+0x2dc>
 8005f10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f14:	f000 8270 	beq.w	80063f8 <HAL_RCC_OscConfig+0x51c>
 8005f18:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005f1c:	4b92      	ldr	r3, [pc, #584]	@ (8006168 <HAL_RCC_OscConfig+0x28c>)
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	f000 8211 	beq.w	8006346 <HAL_RCC_OscConfig+0x46a>
 8005f24:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8005f38:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f3a:	e004      	b.n	8005f46 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f3c:	4a8a      	ldr	r2, [pc, #552]	@ (8006168 <HAL_RCC_OscConfig+0x28c>)
 8005f3e:	6813      	ldr	r3, [r2, #0]
 8005f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f44:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005f46:	f7fd fee9 	bl	8003d1c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f4a:	4e87      	ldr	r6, [pc, #540]	@ (8006168 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8005f4c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f4e:	e005      	b.n	8005f5c <HAL_RCC_OscConfig+0x80>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f50:	f7fd fee4 	bl	8003d1c <HAL_GetTick>
 8005f54:	1b40      	subs	r0, r0, r5
 8005f56:	2864      	cmp	r0, #100	@ 0x64
 8005f58:	f200 812c 	bhi.w	80061b4 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f5c:	6833      	ldr	r3, [r6, #0]
 8005f5e:	039b      	lsls	r3, r3, #14
 8005f60:	d5f6      	bpl.n	8005f50 <HAL_RCC_OscConfig+0x74>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	079d      	lsls	r5, r3, #30
 8005f66:	d464      	bmi.n	8006032 <HAL_RCC_OscConfig+0x156>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005f68:	06d9      	lsls	r1, r3, #27
 8005f6a:	d528      	bpl.n	8005fbe <HAL_RCC_OscConfig+0xe2>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f6c:	497e      	ldr	r1, [pc, #504]	@ (8006168 <HAL_RCC_OscConfig+0x28c>)
 8005f6e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f70:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f72:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f76:	2a08      	cmp	r2, #8
 8005f78:	f000 80b4 	beq.w	80060e4 <HAL_RCC_OscConfig+0x208>
 8005f7c:	2a18      	cmp	r2, #24
 8005f7e:	f000 80ac 	beq.w	80060da <HAL_RCC_OscConfig+0x1fe>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005f82:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8005f84:	4d78      	ldr	r5, [pc, #480]	@ (8006168 <HAL_RCC_OscConfig+0x28c>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 8152 	beq.w	8006230 <HAL_RCC_OscConfig+0x354>
        __HAL_RCC_CSI_ENABLE();
 8005f8c:	682b      	ldr	r3, [r5, #0]
 8005f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f92:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005f94:	f7fd fec2 	bl	8003d1c <HAL_GetTick>
 8005f98:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f9a:	e005      	b.n	8005fa8 <HAL_RCC_OscConfig+0xcc>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005f9c:	f7fd febe 	bl	8003d1c <HAL_GetTick>
 8005fa0:	1b80      	subs	r0, r0, r6
 8005fa2:	2802      	cmp	r0, #2
 8005fa4:	f200 8106 	bhi.w	80061b4 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fa8:	682b      	ldr	r3, [r5, #0]
 8005faa:	05db      	lsls	r3, r3, #23
 8005fac:	d5f6      	bpl.n	8005f9c <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fae:	68eb      	ldr	r3, [r5, #12]
 8005fb0:	6a22      	ldr	r2, [r4, #32]
 8005fb2:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8005fb6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005fba:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	071d      	lsls	r5, r3, #28
 8005fc0:	d516      	bpl.n	8005ff0 <HAL_RCC_OscConfig+0x114>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005fc2:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8005fc4:	4d68      	ldr	r5, [pc, #416]	@ (8006168 <HAL_RCC_OscConfig+0x28c>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 8110 	beq.w	80061ec <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_LSI_ENABLE();
 8005fcc:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8005fce:	f043 0301 	orr.w	r3, r3, #1
 8005fd2:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8005fd4:	f7fd fea2 	bl	8003d1c <HAL_GetTick>
 8005fd8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005fda:	e005      	b.n	8005fe8 <HAL_RCC_OscConfig+0x10c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fdc:	f7fd fe9e 	bl	8003d1c <HAL_GetTick>
 8005fe0:	1b80      	subs	r0, r0, r6
 8005fe2:	2802      	cmp	r0, #2
 8005fe4:	f200 80e6 	bhi.w	80061b4 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005fe8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8005fea:	0798      	lsls	r0, r3, #30
 8005fec:	d5f6      	bpl.n	8005fdc <HAL_RCC_OscConfig+0x100>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	069a      	lsls	r2, r3, #26
 8005ff2:	d516      	bpl.n	8006022 <HAL_RCC_OscConfig+0x146>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005ff4:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8005ff6:	4d5c      	ldr	r5, [pc, #368]	@ (8006168 <HAL_RCC_OscConfig+0x28c>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 8108 	beq.w	800620e <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_HSI48_ENABLE();
 8005ffe:	682b      	ldr	r3, [r5, #0]
 8006000:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006004:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006006:	f7fd fe89 	bl	8003d1c <HAL_GetTick>
 800600a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800600c:	e005      	b.n	800601a <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800600e:	f7fd fe85 	bl	8003d1c <HAL_GetTick>
 8006012:	1b80      	subs	r0, r0, r6
 8006014:	2802      	cmp	r0, #2
 8006016:	f200 80cd 	bhi.w	80061b4 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800601a:	682b      	ldr	r3, [r5, #0]
 800601c:	049f      	lsls	r7, r3, #18
 800601e:	d5f6      	bpl.n	800600e <HAL_RCC_OscConfig+0x132>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	0759      	lsls	r1, r3, #29
 8006024:	d46e      	bmi.n	8006104 <HAL_RCC_OscConfig+0x228>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006026:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006028:	2b00      	cmp	r3, #0
 800602a:	f040 80aa 	bne.w	8006182 <HAL_RCC_OscConfig+0x2a6>
  return HAL_OK;
 800602e:	2000      	movs	r0, #0
}
 8006030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006032:	4a4d      	ldr	r2, [pc, #308]	@ (8006168 <HAL_RCC_OscConfig+0x28c>)
 8006034:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006036:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006038:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800603c:	d122      	bne.n	8006084 <HAL_RCC_OscConfig+0x1a8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800603e:	4b4a      	ldr	r3, [pc, #296]	@ (8006168 <HAL_RCC_OscConfig+0x28c>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006040:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	0759      	lsls	r1, r3, #29
 8006046:	d501      	bpl.n	800604c <HAL_RCC_OscConfig+0x170>
 8006048:	2a00      	cmp	r2, #0
 800604a:	d044      	beq.n	80060d6 <HAL_RCC_OscConfig+0x1fa>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800604c:	4d46      	ldr	r5, [pc, #280]	@ (8006168 <HAL_RCC_OscConfig+0x28c>)
 800604e:	682b      	ldr	r3, [r5, #0]
 8006050:	f023 0319 	bic.w	r3, r3, #25
 8006054:	4313      	orrs	r3, r2
 8006056:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006058:	f7fd fe60 	bl	8003d1c <HAL_GetTick>
 800605c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800605e:	e005      	b.n	800606c <HAL_RCC_OscConfig+0x190>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006060:	f7fd fe5c 	bl	8003d1c <HAL_GetTick>
 8006064:	1b80      	subs	r0, r0, r6
 8006066:	2802      	cmp	r0, #2
 8006068:	f200 80a4 	bhi.w	80061b4 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800606c:	682b      	ldr	r3, [r5, #0]
 800606e:	075b      	lsls	r3, r3, #29
 8006070:	d5f6      	bpl.n	8006060 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006072:	686b      	ldr	r3, [r5, #4]
 8006074:	6922      	ldr	r2, [r4, #16]
 8006076:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800607a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800607e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	e771      	b.n	8005f68 <HAL_RCC_OscConfig+0x8c>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006084:	2b18      	cmp	r3, #24
 8006086:	f000 80f6 	beq.w	8006276 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800608a:	4d37      	ldr	r5, [pc, #220]	@ (8006168 <HAL_RCC_OscConfig+0x28c>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800608c:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800608e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006090:	2a00      	cmp	r2, #0
 8006092:	f000 80df 	beq.w	8006254 <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006096:	f023 0319 	bic.w	r3, r3, #25
 800609a:	4313      	orrs	r3, r2
 800609c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800609e:	f7fd fe3d 	bl	8003d1c <HAL_GetTick>
 80060a2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060a4:	e005      	b.n	80060b2 <HAL_RCC_OscConfig+0x1d6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060a6:	f7fd fe39 	bl	8003d1c <HAL_GetTick>
 80060aa:	1b80      	subs	r0, r0, r6
 80060ac:	2802      	cmp	r0, #2
 80060ae:	f200 8081 	bhi.w	80061b4 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060b2:	682b      	ldr	r3, [r5, #0]
 80060b4:	075f      	lsls	r7, r3, #29
 80060b6:	d5f6      	bpl.n	80060a6 <HAL_RCC_OscConfig+0x1ca>
 80060b8:	e7db      	b.n	8006072 <HAL_RCC_OscConfig+0x196>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80060ba:	f001 0103 	and.w	r1, r1, #3
 80060be:	2902      	cmp	r1, #2
 80060c0:	f47f af1f 	bne.w	8005f02 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060c4:	4a28      	ldr	r2, [pc, #160]	@ (8006168 <HAL_RCC_OscConfig+0x28c>)
 80060c6:	6812      	ldr	r2, [r2, #0]
 80060c8:	0392      	lsls	r2, r2, #14
 80060ca:	f57f af4b 	bpl.w	8005f64 <HAL_RCC_OscConfig+0x88>
 80060ce:	6862      	ldr	r2, [r4, #4]
 80060d0:	2a00      	cmp	r2, #0
 80060d2:	f47f af47 	bne.w	8005f64 <HAL_RCC_OscConfig+0x88>
    return HAL_ERROR;
 80060d6:	2001      	movs	r0, #1
}
 80060d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80060da:	f001 0103 	and.w	r1, r1, #3
 80060de:	2901      	cmp	r1, #1
 80060e0:	f47f af4f 	bne.w	8005f82 <HAL_RCC_OscConfig+0xa6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060e4:	4a20      	ldr	r2, [pc, #128]	@ (8006168 <HAL_RCC_OscConfig+0x28c>)
 80060e6:	6812      	ldr	r2, [r2, #0]
 80060e8:	05d2      	lsls	r2, r2, #23
 80060ea:	d502      	bpl.n	80060f2 <HAL_RCC_OscConfig+0x216>
 80060ec:	69e2      	ldr	r2, [r4, #28]
 80060ee:	2a80      	cmp	r2, #128	@ 0x80
 80060f0:	d1f1      	bne.n	80060d6 <HAL_RCC_OscConfig+0x1fa>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060f2:	491d      	ldr	r1, [pc, #116]	@ (8006168 <HAL_RCC_OscConfig+0x28c>)
 80060f4:	6a20      	ldr	r0, [r4, #32]
 80060f6:	68ca      	ldr	r2, [r1, #12]
 80060f8:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 80060fc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8006100:	60ca      	str	r2, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006102:	e75c      	b.n	8005fbe <HAL_RCC_OscConfig+0xe2>
    PWR->CR1 |= PWR_CR1_DBP;
 8006104:	4d19      	ldr	r5, [pc, #100]	@ (800616c <HAL_RCC_OscConfig+0x290>)
 8006106:	682b      	ldr	r3, [r5, #0]
 8006108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800610c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800610e:	f7fd fe05 	bl	8003d1c <HAL_GetTick>
 8006112:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006114:	e004      	b.n	8006120 <HAL_RCC_OscConfig+0x244>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006116:	f7fd fe01 	bl	8003d1c <HAL_GetTick>
 800611a:	1b80      	subs	r0, r0, r6
 800611c:	2864      	cmp	r0, #100	@ 0x64
 800611e:	d849      	bhi.n	80061b4 <HAL_RCC_OscConfig+0x2d8>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	05da      	lsls	r2, r3, #23
 8006124:	d5f7      	bpl.n	8006116 <HAL_RCC_OscConfig+0x23a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006126:	68a3      	ldr	r3, [r4, #8]
 8006128:	2b01      	cmp	r3, #1
 800612a:	f000 8196 	beq.w	800645a <HAL_RCC_OscConfig+0x57e>
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 8176 	beq.w	8006420 <HAL_RCC_OscConfig+0x544>
 8006134:	2b05      	cmp	r3, #5
 8006136:	f000 8196 	beq.w	8006466 <HAL_RCC_OscConfig+0x58a>
 800613a:	2b85      	cmp	r3, #133	@ 0x85
 800613c:	4b0a      	ldr	r3, [pc, #40]	@ (8006168 <HAL_RCC_OscConfig+0x28c>)
 800613e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006140:	f000 819f 	beq.w	8006482 <HAL_RCC_OscConfig+0x5a6>
 8006144:	f022 0201 	bic.w	r2, r2, #1
 8006148:	671a      	str	r2, [r3, #112]	@ 0x70
 800614a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800614c:	f022 0204 	bic.w	r2, r2, #4
 8006150:	671a      	str	r2, [r3, #112]	@ 0x70
 8006152:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006154:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006158:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800615a:	f7fd fddf 	bl	8003d1c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800615e:	4e02      	ldr	r6, [pc, #8]	@ (8006168 <HAL_RCC_OscConfig+0x28c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006160:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8006164:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0x29e>
 8006168:	58024400 	.word	0x58024400
 800616c:	58024800 	.word	0x58024800
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006170:	f7fd fdd4 	bl	8003d1c <HAL_GetTick>
 8006174:	1b40      	subs	r0, r0, r5
 8006176:	42b8      	cmp	r0, r7
 8006178:	d81c      	bhi.n	80061b4 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800617a:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800617c:	079b      	lsls	r3, r3, #30
 800617e:	d5f7      	bpl.n	8006170 <HAL_RCC_OscConfig+0x294>
 8006180:	e751      	b.n	8006026 <HAL_RCC_OscConfig+0x14a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006182:	4da4      	ldr	r5, [pc, #656]	@ (8006414 <HAL_RCC_OscConfig+0x538>)
 8006184:	692a      	ldr	r2, [r5, #16]
 8006186:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800618a:	2a18      	cmp	r2, #24
 800618c:	f000 80e7 	beq.w	800635e <HAL_RCC_OscConfig+0x482>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006190:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8006192:	682b      	ldr	r3, [r5, #0]
 8006194:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006198:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800619a:	d070      	beq.n	800627e <HAL_RCC_OscConfig+0x3a2>
        tickstart = HAL_GetTick();
 800619c:	f7fd fdbe 	bl	8003d1c <HAL_GetTick>
 80061a0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061a2:	682b      	ldr	r3, [r5, #0]
 80061a4:	019b      	lsls	r3, r3, #6
 80061a6:	f57f af42 	bpl.w	800602e <HAL_RCC_OscConfig+0x152>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061aa:	f7fd fdb7 	bl	8003d1c <HAL_GetTick>
 80061ae:	1b00      	subs	r0, r0, r4
 80061b0:	2802      	cmp	r0, #2
 80061b2:	d9f6      	bls.n	80061a2 <HAL_RCC_OscConfig+0x2c6>
            return HAL_TIMEOUT;
 80061b4:	2003      	movs	r0, #3
}
 80061b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061b8:	4d96      	ldr	r5, [pc, #600]	@ (8006414 <HAL_RCC_OscConfig+0x538>)
 80061ba:	682b      	ldr	r3, [r5, #0]
 80061bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061c0:	602b      	str	r3, [r5, #0]
 80061c2:	682b      	ldr	r3, [r5, #0]
 80061c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80061c8:	602b      	str	r3, [r5, #0]
 80061ca:	682b      	ldr	r3, [r5, #0]
 80061cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80061d2:	f7fd fda3 	bl	8003d1c <HAL_GetTick>
 80061d6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061d8:	e004      	b.n	80061e4 <HAL_RCC_OscConfig+0x308>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061da:	f7fd fd9f 	bl	8003d1c <HAL_GetTick>
 80061de:	1b80      	subs	r0, r0, r6
 80061e0:	2864      	cmp	r0, #100	@ 0x64
 80061e2:	d8e7      	bhi.n	80061b4 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	039f      	lsls	r7, r3, #14
 80061e8:	d4f7      	bmi.n	80061da <HAL_RCC_OscConfig+0x2fe>
 80061ea:	e6ba      	b.n	8005f62 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80061ec:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80061ee:	f023 0301 	bic.w	r3, r3, #1
 80061f2:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80061f4:	f7fd fd92 	bl	8003d1c <HAL_GetTick>
 80061f8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061fa:	e004      	b.n	8006206 <HAL_RCC_OscConfig+0x32a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061fc:	f7fd fd8e 	bl	8003d1c <HAL_GetTick>
 8006200:	1b80      	subs	r0, r0, r6
 8006202:	2802      	cmp	r0, #2
 8006204:	d8d6      	bhi.n	80061b4 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006206:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8006208:	0799      	lsls	r1, r3, #30
 800620a:	d4f7      	bmi.n	80061fc <HAL_RCC_OscConfig+0x320>
 800620c:	e6ef      	b.n	8005fee <HAL_RCC_OscConfig+0x112>
      __HAL_RCC_HSI48_DISABLE();
 800620e:	682b      	ldr	r3, [r5, #0]
 8006210:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006214:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006216:	f7fd fd81 	bl	8003d1c <HAL_GetTick>
 800621a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800621c:	e004      	b.n	8006228 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800621e:	f7fd fd7d 	bl	8003d1c <HAL_GetTick>
 8006222:	1b80      	subs	r0, r0, r6
 8006224:	2802      	cmp	r0, #2
 8006226:	d8c5      	bhi.n	80061b4 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006228:	682b      	ldr	r3, [r5, #0]
 800622a:	0498      	lsls	r0, r3, #18
 800622c:	d4f7      	bmi.n	800621e <HAL_RCC_OscConfig+0x342>
 800622e:	e6f7      	b.n	8006020 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_CSI_DISABLE();
 8006230:	682b      	ldr	r3, [r5, #0]
 8006232:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006236:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006238:	f7fd fd70 	bl	8003d1c <HAL_GetTick>
 800623c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800623e:	e004      	b.n	800624a <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006240:	f7fd fd6c 	bl	8003d1c <HAL_GetTick>
 8006244:	1b80      	subs	r0, r0, r6
 8006246:	2802      	cmp	r0, #2
 8006248:	d8b4      	bhi.n	80061b4 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800624a:	682b      	ldr	r3, [r5, #0]
 800624c:	05df      	lsls	r7, r3, #23
 800624e:	d4f7      	bmi.n	8006240 <HAL_RCC_OscConfig+0x364>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	e6b4      	b.n	8005fbe <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 8006254:	f023 0301 	bic.w	r3, r3, #1
 8006258:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800625a:	f7fd fd5f 	bl	8003d1c <HAL_GetTick>
 800625e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006260:	e004      	b.n	800626c <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006262:	f7fd fd5b 	bl	8003d1c <HAL_GetTick>
 8006266:	1b80      	subs	r0, r0, r6
 8006268:	2802      	cmp	r0, #2
 800626a:	d8a3      	bhi.n	80061b4 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	0758      	lsls	r0, r3, #29
 8006270:	d4f7      	bmi.n	8006262 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	e678      	b.n	8005f68 <HAL_RCC_OscConfig+0x8c>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006276:	0790      	lsls	r0, r2, #30
 8006278:	f47f af07 	bne.w	800608a <HAL_RCC_OscConfig+0x1ae>
 800627c:	e6df      	b.n	800603e <HAL_RCC_OscConfig+0x162>
        tickstart = HAL_GetTick();
 800627e:	f7fd fd4d 	bl	8003d1c <HAL_GetTick>
 8006282:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006284:	e004      	b.n	8006290 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006286:	f7fd fd49 	bl	8003d1c <HAL_GetTick>
 800628a:	1b80      	subs	r0, r0, r6
 800628c:	2802      	cmp	r0, #2
 800628e:	d891      	bhi.n	80061b4 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	0199      	lsls	r1, r3, #6
 8006294:	d4f7      	bmi.n	8006286 <HAL_RCC_OscConfig+0x3aa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006296:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8006298:	4b5f      	ldr	r3, [pc, #380]	@ (8006418 <HAL_RCC_OscConfig+0x53c>)
 800629a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800629c:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800629e:	495f      	ldr	r1, [pc, #380]	@ (800641c <HAL_RCC_OscConfig+0x540>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062a0:	4e5c      	ldr	r6, [pc, #368]	@ (8006414 <HAL_RCC_OscConfig+0x538>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062a2:	4313      	orrs	r3, r2
 80062a4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80062a6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80062aa:	62ab      	str	r3, [r5, #40]	@ 0x28
 80062ac:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 80062b0:	3b01      	subs	r3, #1
 80062b2:	3a01      	subs	r2, #1
 80062b4:	025b      	lsls	r3, r3, #9
 80062b6:	0412      	lsls	r2, r2, #16
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80062be:	4313      	orrs	r3, r2
 80062c0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80062c2:	3a01      	subs	r2, #1
 80062c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062c8:	4313      	orrs	r3, r2
 80062ca:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80062cc:	3a01      	subs	r2, #1
 80062ce:	0612      	lsls	r2, r2, #24
 80062d0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80062d4:	4313      	orrs	r3, r2
 80062d6:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80062d8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80062da:	f023 0301 	bic.w	r3, r3, #1
 80062de:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80062e0:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80062e2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80062e4:	4011      	ands	r1, r2
 80062e6:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80062ea:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80062ec:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80062ee:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80062f0:	f023 030c 	bic.w	r3, r3, #12
 80062f4:	4313      	orrs	r3, r2
 80062f6:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80062f8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80062fa:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80062fc:	f023 0302 	bic.w	r3, r3, #2
 8006300:	4313      	orrs	r3, r2
 8006302:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006304:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800630a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800630c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800630e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006312:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006314:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006316:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800631a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800631c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800631e:	f043 0301 	orr.w	r3, r3, #1
 8006322:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800632a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800632c:	f7fd fcf6 	bl	8003d1c <HAL_GetTick>
 8006330:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006332:	6833      	ldr	r3, [r6, #0]
 8006334:	019a      	lsls	r2, r3, #6
 8006336:	f53f ae7a 	bmi.w	800602e <HAL_RCC_OscConfig+0x152>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800633a:	f7fd fcef 	bl	8003d1c <HAL_GetTick>
 800633e:	1b00      	subs	r0, r0, r4
 8006340:	2802      	cmp	r0, #2
 8006342:	d9f6      	bls.n	8006332 <HAL_RCC_OscConfig+0x456>
 8006344:	e736      	b.n	80061b4 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006346:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800635a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800635c:	e5f3      	b.n	8005f46 <HAL_RCC_OscConfig+0x6a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800635e:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006360:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006362:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006364:	f43f aeb7 	beq.w	80060d6 <HAL_RCC_OscConfig+0x1fa>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006368:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800636c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800636e:	428b      	cmp	r3, r1
 8006370:	f47f aeb1 	bne.w	80060d6 <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006374:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006378:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800637a:	429a      	cmp	r2, r3
 800637c:	f47f aeab 	bne.w	80060d6 <HAL_RCC_OscConfig+0x1fa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006380:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006382:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8006386:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006388:	429a      	cmp	r2, r3
 800638a:	f47f aea4 	bne.w	80060d6 <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800638e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006390:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8006394:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006396:	429a      	cmp	r2, r3
 8006398:	f47f ae9d 	bne.w	80060d6 <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800639c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800639e:	f3c0 4206 	ubfx	r2, r0, #16, #7
 80063a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80063a4:	429a      	cmp	r2, r3
 80063a6:	f47f ae96 	bne.w	80060d6 <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80063aa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80063ac:	f3c0 6006 	ubfx	r0, r0, #24, #7
 80063b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80063b2:	4298      	cmp	r0, r3
 80063b4:	f47f ae8f 	bne.w	80060d6 <HAL_RCC_OscConfig+0x1fa>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80063b8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80063ba:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80063bc:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80063c0:	429a      	cmp	r2, r3
 80063c2:	f43f ae34 	beq.w	800602e <HAL_RCC_OscConfig+0x152>
          __HAL_RCC_PLLFRACN_DISABLE();
 80063c6:	4a13      	ldr	r2, [pc, #76]	@ (8006414 <HAL_RCC_OscConfig+0x538>)
 80063c8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80063ca:	f023 0301 	bic.w	r3, r3, #1
 80063ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 80063d0:	f7fd fca4 	bl	8003d1c <HAL_GetTick>
 80063d4:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80063d6:	f7fd fca1 	bl	8003d1c <HAL_GetTick>
 80063da:	42a8      	cmp	r0, r5
 80063dc:	d0fb      	beq.n	80063d6 <HAL_RCC_OscConfig+0x4fa>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063de:	4a0d      	ldr	r2, [pc, #52]	@ (8006414 <HAL_RCC_OscConfig+0x538>)
 80063e0:	4b0e      	ldr	r3, [pc, #56]	@ (800641c <HAL_RCC_OscConfig+0x540>)
 80063e2:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 80063e4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80063e6:	4003      	ands	r3, r0
 80063e8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80063ec:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 80063ee:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80063f0:	f043 0301 	orr.w	r3, r3, #1
 80063f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063f6:	e61a      	b.n	800602e <HAL_RCC_OscConfig+0x152>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063f8:	4b06      	ldr	r3, [pc, #24]	@ (8006414 <HAL_RCC_OscConfig+0x538>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006410:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006412:	e598      	b.n	8005f46 <HAL_RCC_OscConfig+0x6a>
 8006414:	58024400 	.word	0x58024400
 8006418:	fffffc0c 	.word	0xfffffc0c
 800641c:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006420:	4d1f      	ldr	r5, [pc, #124]	@ (80064a0 <HAL_RCC_OscConfig+0x5c4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006422:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006426:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006428:	f023 0301 	bic.w	r3, r3, #1
 800642c:	672b      	str	r3, [r5, #112]	@ 0x70
 800642e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006430:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006434:	672b      	str	r3, [r5, #112]	@ 0x70
 8006436:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006438:	f023 0304 	bic.w	r3, r3, #4
 800643c:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800643e:	f7fd fc6d 	bl	8003d1c <HAL_GetTick>
 8006442:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006444:	e005      	b.n	8006452 <HAL_RCC_OscConfig+0x576>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006446:	f7fd fc69 	bl	8003d1c <HAL_GetTick>
 800644a:	1b80      	subs	r0, r0, r6
 800644c:	42b8      	cmp	r0, r7
 800644e:	f63f aeb1 	bhi.w	80061b4 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006452:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006454:	0798      	lsls	r0, r3, #30
 8006456:	d4f6      	bmi.n	8006446 <HAL_RCC_OscConfig+0x56a>
 8006458:	e5e5      	b.n	8006026 <HAL_RCC_OscConfig+0x14a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800645a:	4a11      	ldr	r2, [pc, #68]	@ (80064a0 <HAL_RCC_OscConfig+0x5c4>)
 800645c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800645e:	f043 0301 	orr.w	r3, r3, #1
 8006462:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006464:	e679      	b.n	800615a <HAL_RCC_OscConfig+0x27e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006466:	4b0e      	ldr	r3, [pc, #56]	@ (80064a0 <HAL_RCC_OscConfig+0x5c4>)
 8006468:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800646a:	f042 0204 	orr.w	r2, r2, #4
 800646e:	671a      	str	r2, [r3, #112]	@ 0x70
 8006470:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006472:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006476:	671a      	str	r2, [r3, #112]	@ 0x70
 8006478:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800647a:	f042 0201 	orr.w	r2, r2, #1
 800647e:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006480:	e66b      	b.n	800615a <HAL_RCC_OscConfig+0x27e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006482:	f042 0204 	orr.w	r2, r2, #4
 8006486:	671a      	str	r2, [r3, #112]	@ 0x70
 8006488:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800648a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800648e:	671a      	str	r2, [r3, #112]	@ 0x70
 8006490:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006498:	e65f      	b.n	800615a <HAL_RCC_OscConfig+0x27e>
    return HAL_ERROR;
 800649a:	2001      	movs	r0, #1
}
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	58024400 	.word	0x58024400

080064a4 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064a4:	4a3f      	ldr	r2, [pc, #252]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0x100>)
 80064a6:	6913      	ldr	r3, [r2, #16]
 80064a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064ac:	2b10      	cmp	r3, #16
 80064ae:	d004      	beq.n	80064ba <HAL_RCC_GetSysClockFreq+0x16>
 80064b0:	2b18      	cmp	r3, #24
 80064b2:	d00d      	beq.n	80064d0 <HAL_RCC_GetSysClockFreq+0x2c>
 80064b4:	b11b      	cbz	r3, 80064be <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 80064b6:	483c      	ldr	r0, [pc, #240]	@ (80065a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80064b8:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064ba:	483c      	ldr	r0, [pc, #240]	@ (80065ac <HAL_RCC_GetSysClockFreq+0x108>)
 80064bc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064be:	6813      	ldr	r3, [r2, #0]
 80064c0:	0699      	lsls	r1, r3, #26
 80064c2:	d548      	bpl.n	8006556 <HAL_RCC_GetSysClockFreq+0xb2>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064c4:	6813      	ldr	r3, [r2, #0]
 80064c6:	483a      	ldr	r0, [pc, #232]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80064c8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80064cc:	40d8      	lsrs	r0, r3
 80064ce:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064d0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 80064d2:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80064d4:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80064d6:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 80064d8:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80064dc:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80064de:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80064e2:	d036      	beq.n	8006552 <HAL_RCC_GetSysClockFreq+0xae>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80064e4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80064e8:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064ec:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064f0:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80064f4:	fb05 f303 	mul.w	r3, r5, r3
 80064f8:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064fe:	ee06 3a90 	vmov	s13, r3
 8006502:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8006506:	d002      	beq.n	800650e <HAL_RCC_GetSysClockFreq+0x6a>
 8006508:	2902      	cmp	r1, #2
 800650a:	d026      	beq.n	800655a <HAL_RCC_GetSysClockFreq+0xb6>
 800650c:	b341      	cbz	r1, 8006560 <HAL_RCC_GetSysClockFreq+0xbc>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800650e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80065b4 <HAL_RCC_GetSysClockFreq+0x110>
 8006512:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8006516:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8006518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800651c:	ee07 3a10 	vmov	s14, r3
 8006520:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8006524:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006528:	ee37 7a26 	vadd.f32	s14, s14, s13
 800652c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8006530:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006534:	4b1b      	ldr	r3, [pc, #108]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0x100>)
 8006536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006538:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800653c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006546:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800654a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800654e:	ee17 0a90 	vmov	r0, s15
}
 8006552:	bc30      	pop	{r4, r5}
 8006554:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006556:	4816      	ldr	r0, [pc, #88]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0x10c>)
}
 8006558:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800655a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80065b8 <HAL_RCC_GetSysClockFreq+0x114>
 800655e:	e7d8      	b.n	8006512 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006560:	6813      	ldr	r3, [r2, #0]
 8006562:	069b      	lsls	r3, r3, #26
 8006564:	d51a      	bpl.n	800659c <HAL_RCC_GetSysClockFreq+0xf8>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006566:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006568:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800656c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800656e:	4910      	ldr	r1, [pc, #64]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006570:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006574:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006578:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800657a:	ee07 3a10 	vmov	s14, r3
 800657e:	ee06 1a10 	vmov	s12, r1
 8006582:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006586:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800658a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800658e:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8006592:	ee76 7aa5 	vadd.f32	s15, s13, s11
 8006596:	ee27 7a27 	vmul.f32	s14, s14, s15
 800659a:	e7cb      	b.n	8006534 <HAL_RCC_GetSysClockFreq+0x90>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800659c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80065bc <HAL_RCC_GetSysClockFreq+0x118>
 80065a0:	e7b7      	b.n	8006512 <HAL_RCC_GetSysClockFreq+0x6e>
 80065a2:	bf00      	nop
 80065a4:	58024400 	.word	0x58024400
 80065a8:	003d0900 	.word	0x003d0900
 80065ac:	017d7840 	.word	0x017d7840
 80065b0:	03d09000 	.word	0x03d09000
 80065b4:	4a742400 	.word	0x4a742400
 80065b8:	4bbebc20 	.word	0x4bbebc20
 80065bc:	4c742400 	.word	0x4c742400

080065c0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80065c0:	2800      	cmp	r0, #0
 80065c2:	f000 810e 	beq.w	80067e2 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065c6:	4a8d      	ldr	r2, [pc, #564]	@ (80067fc <HAL_RCC_ClockConfig+0x23c>)
 80065c8:	6813      	ldr	r3, [r2, #0]
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	428b      	cmp	r3, r1
{
 80065d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d4:	4604      	mov	r4, r0
 80065d6:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065d8:	d20c      	bcs.n	80065f4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065da:	6813      	ldr	r3, [r2, #0]
 80065dc:	f023 030f 	bic.w	r3, r3, #15
 80065e0:	430b      	orrs	r3, r1
 80065e2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065e4:	6813      	ldr	r3, [r2, #0]
 80065e6:	f003 030f 	and.w	r3, r3, #15
 80065ea:	428b      	cmp	r3, r1
 80065ec:	d002      	beq.n	80065f4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80065ee:	2001      	movs	r0, #1
}
 80065f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	0758      	lsls	r0, r3, #29
 80065f8:	d50b      	bpl.n	8006612 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80065fa:	4981      	ldr	r1, [pc, #516]	@ (8006800 <HAL_RCC_ClockConfig+0x240>)
 80065fc:	6920      	ldr	r0, [r4, #16]
 80065fe:	698a      	ldr	r2, [r1, #24]
 8006600:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006604:	4290      	cmp	r0, r2
 8006606:	d904      	bls.n	8006612 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006608:	698a      	ldr	r2, [r1, #24]
 800660a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800660e:	4302      	orrs	r2, r0
 8006610:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006612:	0719      	lsls	r1, r3, #28
 8006614:	d50b      	bpl.n	800662e <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006616:	497a      	ldr	r1, [pc, #488]	@ (8006800 <HAL_RCC_ClockConfig+0x240>)
 8006618:	6960      	ldr	r0, [r4, #20]
 800661a:	69ca      	ldr	r2, [r1, #28]
 800661c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006620:	4290      	cmp	r0, r2
 8006622:	d904      	bls.n	800662e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006624:	69ca      	ldr	r2, [r1, #28]
 8006626:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800662a:	4302      	orrs	r2, r0
 800662c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800662e:	06da      	lsls	r2, r3, #27
 8006630:	d50b      	bpl.n	800664a <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006632:	4973      	ldr	r1, [pc, #460]	@ (8006800 <HAL_RCC_ClockConfig+0x240>)
 8006634:	69a0      	ldr	r0, [r4, #24]
 8006636:	69ca      	ldr	r2, [r1, #28]
 8006638:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800663c:	4290      	cmp	r0, r2
 800663e:	d904      	bls.n	800664a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006640:	69ca      	ldr	r2, [r1, #28]
 8006642:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006646:	4302      	orrs	r2, r0
 8006648:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800664a:	069f      	lsls	r7, r3, #26
 800664c:	d50b      	bpl.n	8006666 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800664e:	496c      	ldr	r1, [pc, #432]	@ (8006800 <HAL_RCC_ClockConfig+0x240>)
 8006650:	69e0      	ldr	r0, [r4, #28]
 8006652:	6a0a      	ldr	r2, [r1, #32]
 8006654:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006658:	4290      	cmp	r0, r2
 800665a:	d904      	bls.n	8006666 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800665c:	6a0a      	ldr	r2, [r1, #32]
 800665e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006662:	4302      	orrs	r2, r0
 8006664:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006666:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006668:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800666c:	f140 80ab 	bpl.w	80067c6 <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006670:	4e63      	ldr	r6, [pc, #396]	@ (8006800 <HAL_RCC_ClockConfig+0x240>)
 8006672:	68e0      	ldr	r0, [r4, #12]
 8006674:	69b1      	ldr	r1, [r6, #24]
 8006676:	f001 010f 	and.w	r1, r1, #15
 800667a:	4288      	cmp	r0, r1
 800667c:	d904      	bls.n	8006688 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800667e:	69b1      	ldr	r1, [r6, #24]
 8006680:	f021 010f 	bic.w	r1, r1, #15
 8006684:	4301      	orrs	r1, r0
 8006686:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006688:	2a00      	cmp	r2, #0
 800668a:	d030      	beq.n	80066ee <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800668c:	4a5c      	ldr	r2, [pc, #368]	@ (8006800 <HAL_RCC_ClockConfig+0x240>)
 800668e:	68a1      	ldr	r1, [r4, #8]
 8006690:	6993      	ldr	r3, [r2, #24]
 8006692:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006696:	430b      	orrs	r3, r1
 8006698:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800669a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800669c:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800669e:	2902      	cmp	r1, #2
 80066a0:	f000 80a1 	beq.w	80067e6 <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066a4:	2903      	cmp	r1, #3
 80066a6:	f000 8098 	beq.w	80067da <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80066aa:	2901      	cmp	r1, #1
 80066ac:	f000 80a1 	beq.w	80067f2 <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066b0:	075f      	lsls	r7, r3, #29
 80066b2:	d59c      	bpl.n	80065ee <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066b4:	4e52      	ldr	r6, [pc, #328]	@ (8006800 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066b6:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066ba:	6933      	ldr	r3, [r6, #16]
 80066bc:	f023 0307 	bic.w	r3, r3, #7
 80066c0:	430b      	orrs	r3, r1
 80066c2:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 80066c4:	f7fd fb2a 	bl	8003d1c <HAL_GetTick>
 80066c8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ca:	e005      	b.n	80066d8 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066cc:	f7fd fb26 	bl	8003d1c <HAL_GetTick>
 80066d0:	1bc0      	subs	r0, r0, r7
 80066d2:	4540      	cmp	r0, r8
 80066d4:	f200 808b 	bhi.w	80067ee <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066d8:	6933      	ldr	r3, [r6, #16]
 80066da:	6862      	ldr	r2, [r4, #4]
 80066dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066e0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80066e4:	d1f2      	bne.n	80066cc <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	079e      	lsls	r6, r3, #30
 80066ea:	d506      	bpl.n	80066fa <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80066ec:	68e0      	ldr	r0, [r4, #12]
 80066ee:	4944      	ldr	r1, [pc, #272]	@ (8006800 <HAL_RCC_ClockConfig+0x240>)
 80066f0:	698a      	ldr	r2, [r1, #24]
 80066f2:	f002 020f 	and.w	r2, r2, #15
 80066f6:	4282      	cmp	r2, r0
 80066f8:	d869      	bhi.n	80067ce <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066fa:	4940      	ldr	r1, [pc, #256]	@ (80067fc <HAL_RCC_ClockConfig+0x23c>)
 80066fc:	680a      	ldr	r2, [r1, #0]
 80066fe:	f002 020f 	and.w	r2, r2, #15
 8006702:	42aa      	cmp	r2, r5
 8006704:	d90a      	bls.n	800671c <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006706:	680a      	ldr	r2, [r1, #0]
 8006708:	f022 020f 	bic.w	r2, r2, #15
 800670c:	432a      	orrs	r2, r5
 800670e:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006710:	680a      	ldr	r2, [r1, #0]
 8006712:	f002 020f 	and.w	r2, r2, #15
 8006716:	42aa      	cmp	r2, r5
 8006718:	f47f af69 	bne.w	80065ee <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800671c:	0758      	lsls	r0, r3, #29
 800671e:	d50b      	bpl.n	8006738 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006720:	4937      	ldr	r1, [pc, #220]	@ (8006800 <HAL_RCC_ClockConfig+0x240>)
 8006722:	6920      	ldr	r0, [r4, #16]
 8006724:	698a      	ldr	r2, [r1, #24]
 8006726:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800672a:	4290      	cmp	r0, r2
 800672c:	d204      	bcs.n	8006738 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800672e:	698a      	ldr	r2, [r1, #24]
 8006730:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006734:	4302      	orrs	r2, r0
 8006736:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006738:	0719      	lsls	r1, r3, #28
 800673a:	d50b      	bpl.n	8006754 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800673c:	4930      	ldr	r1, [pc, #192]	@ (8006800 <HAL_RCC_ClockConfig+0x240>)
 800673e:	6960      	ldr	r0, [r4, #20]
 8006740:	69ca      	ldr	r2, [r1, #28]
 8006742:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006746:	4290      	cmp	r0, r2
 8006748:	d204      	bcs.n	8006754 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800674a:	69ca      	ldr	r2, [r1, #28]
 800674c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006750:	4302      	orrs	r2, r0
 8006752:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006754:	06da      	lsls	r2, r3, #27
 8006756:	d50b      	bpl.n	8006770 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006758:	4929      	ldr	r1, [pc, #164]	@ (8006800 <HAL_RCC_ClockConfig+0x240>)
 800675a:	69a0      	ldr	r0, [r4, #24]
 800675c:	69ca      	ldr	r2, [r1, #28]
 800675e:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8006762:	4290      	cmp	r0, r2
 8006764:	d204      	bcs.n	8006770 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006766:	69ca      	ldr	r2, [r1, #28]
 8006768:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800676c:	4302      	orrs	r2, r0
 800676e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006770:	069b      	lsls	r3, r3, #26
 8006772:	d50b      	bpl.n	800678c <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006774:	4a22      	ldr	r2, [pc, #136]	@ (8006800 <HAL_RCC_ClockConfig+0x240>)
 8006776:	69e1      	ldr	r1, [r4, #28]
 8006778:	6a13      	ldr	r3, [r2, #32]
 800677a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800677e:	4299      	cmp	r1, r3
 8006780:	d204      	bcs.n	800678c <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006782:	6a13      	ldr	r3, [r2, #32]
 8006784:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006788:	430b      	orrs	r3, r1
 800678a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800678c:	f7ff fe8a 	bl	80064a4 <HAL_RCC_GetSysClockFreq>
 8006790:	4a1b      	ldr	r2, [pc, #108]	@ (8006800 <HAL_RCC_ClockConfig+0x240>)
 8006792:	4603      	mov	r3, r0
 8006794:	481b      	ldr	r0, [pc, #108]	@ (8006804 <HAL_RCC_ClockConfig+0x244>)
 8006796:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006798:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800679a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800679e:	4d1a      	ldr	r5, [pc, #104]	@ (8006808 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80067a0:	f002 020f 	and.w	r2, r2, #15
 80067a4:	4c19      	ldr	r4, [pc, #100]	@ (800680c <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80067a6:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80067a8:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80067aa:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 80067ae:	4818      	ldr	r0, [pc, #96]	@ (8006810 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80067b0:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80067b4:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 80067b6:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80067b8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80067ba:	40d3      	lsrs	r3, r2
 80067bc:	6023      	str	r3, [r4, #0]
}
 80067be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80067c2:	f7fd ba49 	b.w	8003c58 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067c6:	2a00      	cmp	r2, #0
 80067c8:	f47f af60 	bne.w	800668c <HAL_RCC_ClockConfig+0xcc>
 80067cc:	e795      	b.n	80066fa <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067ce:	698a      	ldr	r2, [r1, #24]
 80067d0:	f022 020f 	bic.w	r2, r2, #15
 80067d4:	4302      	orrs	r2, r0
 80067d6:	618a      	str	r2, [r1, #24]
 80067d8:	e78f      	b.n	80066fa <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067da:	019a      	lsls	r2, r3, #6
 80067dc:	f53f af6a 	bmi.w	80066b4 <HAL_RCC_ClockConfig+0xf4>
 80067e0:	e705      	b.n	80065ee <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80067e2:	2001      	movs	r0, #1
}
 80067e4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067e6:	0398      	lsls	r0, r3, #14
 80067e8:	f53f af64 	bmi.w	80066b4 <HAL_RCC_ClockConfig+0xf4>
 80067ec:	e6ff      	b.n	80065ee <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80067ee:	2003      	movs	r0, #3
 80067f0:	e6fe      	b.n	80065f0 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067f2:	05db      	lsls	r3, r3, #23
 80067f4:	f53f af5e 	bmi.w	80066b4 <HAL_RCC_ClockConfig+0xf4>
 80067f8:	e6f9      	b.n	80065ee <HAL_RCC_ClockConfig+0x2e>
 80067fa:	bf00      	nop
 80067fc:	52002000 	.word	0x52002000
 8006800:	58024400 	.word	0x58024400
 8006804:	0800d358 	.word	0x0800d358
 8006808:	2400000c 	.word	0x2400000c
 800680c:	24000008 	.word	0x24000008
 8006810:	24000014 	.word	0x24000014

08006814 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006814:	4a18      	ldr	r2, [pc, #96]	@ (8006878 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006816:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006818:	6913      	ldr	r3, [r2, #16]
 800681a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800681e:	2b10      	cmp	r3, #16
 8006820:	d019      	beq.n	8006856 <HAL_RCC_GetHCLKFreq+0x42>
 8006822:	2b18      	cmp	r3, #24
 8006824:	d022      	beq.n	800686c <HAL_RCC_GetHCLKFreq+0x58>
 8006826:	b1c3      	cbz	r3, 800685a <HAL_RCC_GetHCLKFreq+0x46>
      sysclockfreq = CSI_VALUE;
 8006828:	4b14      	ldr	r3, [pc, #80]	@ (800687c <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800682a:	4913      	ldr	r1, [pc, #76]	@ (8006878 <HAL_RCC_GetHCLKFreq+0x64>)
 800682c:	4814      	ldr	r0, [pc, #80]	@ (8006880 <HAL_RCC_GetHCLKFreq+0x6c>)
 800682e:	698a      	ldr	r2, [r1, #24]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006830:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006832:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006836:	4c13      	ldr	r4, [pc, #76]	@ (8006884 <HAL_RCC_GetHCLKFreq+0x70>)
 8006838:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800683c:	4d12      	ldr	r5, [pc, #72]	@ (8006888 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800683e:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006840:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006842:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006846:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800684a:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800684c:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8006850:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006852:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8006854:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006856:	4b0d      	ldr	r3, [pc, #52]	@ (800688c <HAL_RCC_GetHCLKFreq+0x78>)
 8006858:	e7e7      	b.n	800682a <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800685a:	6813      	ldr	r3, [r2, #0]
 800685c:	069b      	lsls	r3, r3, #26
 800685e:	d509      	bpl.n	8006874 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006860:	6812      	ldr	r2, [r2, #0]
 8006862:	4b0b      	ldr	r3, [pc, #44]	@ (8006890 <HAL_RCC_GetHCLKFreq+0x7c>)
 8006864:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8006868:	40d3      	lsrs	r3, r2
 800686a:	e7de      	b.n	800682a <HAL_RCC_GetHCLKFreq+0x16>
 800686c:	f7ff fac4 	bl	8005df8 <HAL_RCC_GetSysClockFreq.part.0>
 8006870:	4603      	mov	r3, r0
 8006872:	e7da      	b.n	800682a <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006874:	4b06      	ldr	r3, [pc, #24]	@ (8006890 <HAL_RCC_GetHCLKFreq+0x7c>)
 8006876:	e7d8      	b.n	800682a <HAL_RCC_GetHCLKFreq+0x16>
 8006878:	58024400 	.word	0x58024400
 800687c:	003d0900 	.word	0x003d0900
 8006880:	0800d358 	.word	0x0800d358
 8006884:	24000008 	.word	0x24000008
 8006888:	2400000c 	.word	0x2400000c
 800688c:	017d7840 	.word	0x017d7840
 8006890:	03d09000 	.word	0x03d09000

08006894 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006894:	4a1c      	ldr	r2, [pc, #112]	@ (8006908 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006896:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006898:	6913      	ldr	r3, [r2, #16]
 800689a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800689e:	2b10      	cmp	r3, #16
 80068a0:	d020      	beq.n	80068e4 <HAL_RCC_GetPCLK1Freq+0x50>
 80068a2:	2b18      	cmp	r3, #24
 80068a4:	d029      	beq.n	80068fa <HAL_RCC_GetPCLK1Freq+0x66>
 80068a6:	b1fb      	cbz	r3, 80068e8 <HAL_RCC_GetPCLK1Freq+0x54>
      sysclockfreq = CSI_VALUE;
 80068a8:	4b18      	ldr	r3, [pc, #96]	@ (800690c <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80068aa:	4a17      	ldr	r2, [pc, #92]	@ (8006908 <HAL_RCC_GetPCLK1Freq+0x74>)
 80068ac:	4918      	ldr	r1, [pc, #96]	@ (8006910 <HAL_RCC_GetPCLK1Freq+0x7c>)
 80068ae:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 80068b0:	4d18      	ldr	r5, [pc, #96]	@ (8006914 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80068b2:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80068b6:	4c18      	ldr	r4, [pc, #96]	@ (8006918 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80068b8:	5c08      	ldrb	r0, [r1, r0]
 80068ba:	f000 001f 	and.w	r0, r0, #31
 80068be:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80068c0:	6990      	ldr	r0, [r2, #24]
 80068c2:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 80068c6:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80068c8:	5c08      	ldrb	r0, [r1, r0]
 80068ca:	f000 001f 	and.w	r0, r0, #31
 80068ce:	40c3      	lsrs	r3, r0
 80068d0:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80068d2:	69d2      	ldr	r2, [r2, #28]
 80068d4:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80068d8:	5c88      	ldrb	r0, [r1, r2]
 80068da:	f000 001f 	and.w	r0, r0, #31
#endif
}
 80068de:	fa23 f000 	lsr.w	r0, r3, r0
 80068e2:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068e4:	4b0d      	ldr	r3, [pc, #52]	@ (800691c <HAL_RCC_GetPCLK1Freq+0x88>)
 80068e6:	e7e0      	b.n	80068aa <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068e8:	6813      	ldr	r3, [r2, #0]
 80068ea:	069b      	lsls	r3, r3, #26
 80068ec:	d509      	bpl.n	8006902 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006920 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80068f2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80068f6:	40d3      	lsrs	r3, r2
 80068f8:	e7d7      	b.n	80068aa <HAL_RCC_GetPCLK1Freq+0x16>
 80068fa:	f7ff fa7d 	bl	8005df8 <HAL_RCC_GetSysClockFreq.part.0>
 80068fe:	4603      	mov	r3, r0
 8006900:	e7d3      	b.n	80068aa <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006902:	4b07      	ldr	r3, [pc, #28]	@ (8006920 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8006904:	e7d1      	b.n	80068aa <HAL_RCC_GetPCLK1Freq+0x16>
 8006906:	bf00      	nop
 8006908:	58024400 	.word	0x58024400
 800690c:	003d0900 	.word	0x003d0900
 8006910:	0800d358 	.word	0x0800d358
 8006914:	2400000c 	.word	0x2400000c
 8006918:	24000008 	.word	0x24000008
 800691c:	017d7840 	.word	0x017d7840
 8006920:	03d09000 	.word	0x03d09000

08006924 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8006924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006926:	4c36      	ldr	r4, [pc, #216]	@ (8006a00 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8006928:	4606      	mov	r6, r0
 800692a:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006932:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006934:	f7fd f9f2 	bl	8003d1c <HAL_GetTick>
 8006938:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800693a:	e004      	b.n	8006946 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800693c:	f7fd f9ee 	bl	8003d1c <HAL_GetTick>
 8006940:	1b40      	subs	r0, r0, r5
 8006942:	2802      	cmp	r0, #2
 8006944:	d856      	bhi.n	80069f4 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	011a      	lsls	r2, r3, #4
 800694a:	d4f7      	bmi.n	800693c <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800694c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800694e:	6832      	ldr	r2, [r6, #0]
 8006950:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006954:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006958:	62a3      	str	r3, [r4, #40]	@ 0x28
 800695a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800695e:	3b01      	subs	r3, #1
 8006960:	3a01      	subs	r2, #1
 8006962:	025b      	lsls	r3, r3, #9
 8006964:	0412      	lsls	r2, r2, #16
 8006966:	b29b      	uxth	r3, r3
 8006968:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800696c:	4313      	orrs	r3, r2
 800696e:	6872      	ldr	r2, [r6, #4]
 8006970:	3a01      	subs	r2, #1
 8006972:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006976:	4313      	orrs	r3, r2
 8006978:	6932      	ldr	r2, [r6, #16]
 800697a:	3a01      	subs	r2, #1
 800697c:	0612      	lsls	r2, r2, #24
 800697e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006982:	4313      	orrs	r3, r2
 8006984:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006986:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006988:	6972      	ldr	r2, [r6, #20]
 800698a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800698e:	4313      	orrs	r3, r2
 8006990:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006992:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006994:	69b3      	ldr	r3, [r6, #24]
 8006996:	f022 0220 	bic.w	r2, r2, #32
 800699a:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800699c:	4b19      	ldr	r3, [pc, #100]	@ (8006a04 <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800699e:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80069a0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80069a2:	f022 0210 	bic.w	r2, r2, #16
 80069a6:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80069a8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80069aa:	69f2      	ldr	r2, [r6, #28]
 80069ac:	400b      	ands	r3, r1
 80069ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80069b2:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80069b4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80069b6:	f043 0310 	orr.w	r3, r3, #16
 80069ba:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80069bc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80069be:	b1df      	cbz	r7, 80069f8 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80069c0:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80069c2:	bf0c      	ite	eq
 80069c4:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80069c8:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 80069cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80069ce:	4c0c      	ldr	r4, [pc, #48]	@ (8006a00 <RCCEx_PLL2_Config.part.0+0xdc>)
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069d6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069d8:	f7fd f9a0 	bl	8003d1c <HAL_GetTick>
 80069dc:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069de:	e004      	b.n	80069ea <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80069e0:	f7fd f99c 	bl	8003d1c <HAL_GetTick>
 80069e4:	1b40      	subs	r0, r0, r5
 80069e6:	2802      	cmp	r0, #2
 80069e8:	d804      	bhi.n	80069f4 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	011b      	lsls	r3, r3, #4
 80069ee:	d5f7      	bpl.n	80069e0 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 80069f0:	2000      	movs	r0, #0
}
 80069f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80069f4:	2003      	movs	r0, #3
}
 80069f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80069f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80069fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80069fe:	e7e6      	b.n	80069ce <RCCEx_PLL2_Config.part.0+0xaa>
 8006a00:	58024400 	.word	0x58024400
 8006a04:	ffff0007 	.word	0xffff0007

08006a08 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006a0a:	4c36      	ldr	r4, [pc, #216]	@ (8006ae4 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8006a0c:	4606      	mov	r6, r0
 8006a0e:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a16:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a18:	f7fd f980 	bl	8003d1c <HAL_GetTick>
 8006a1c:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a1e:	e004      	b.n	8006a2a <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a20:	f7fd f97c 	bl	8003d1c <HAL_GetTick>
 8006a24:	1b40      	subs	r0, r0, r5
 8006a26:	2802      	cmp	r0, #2
 8006a28:	d856      	bhi.n	8006ad8 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	009a      	lsls	r2, r3, #2
 8006a2e:	d4f7      	bmi.n	8006a20 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006a30:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006a32:	6832      	ldr	r2, [r6, #0]
 8006a34:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8006a38:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8006a3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a3e:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	3a01      	subs	r2, #1
 8006a46:	025b      	lsls	r3, r3, #9
 8006a48:	0412      	lsls	r2, r2, #16
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006a50:	4313      	orrs	r3, r2
 8006a52:	6872      	ldr	r2, [r6, #4]
 8006a54:	3a01      	subs	r2, #1
 8006a56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	6932      	ldr	r2, [r6, #16]
 8006a5e:	3a01      	subs	r2, #1
 8006a60:	0612      	lsls	r2, r2, #24
 8006a62:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006a66:	4313      	orrs	r3, r2
 8006a68:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006a6a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006a6c:	6972      	ldr	r2, [r6, #20]
 8006a6e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006a72:	4313      	orrs	r3, r2
 8006a74:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006a76:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006a78:	69b3      	ldr	r3, [r6, #24]
 8006a7a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006a7e:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006a80:	4b19      	ldr	r3, [pc, #100]	@ (8006ae8 <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006a82:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006a84:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006a86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a8a:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006a8c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006a8e:	69f2      	ldr	r2, [r6, #28]
 8006a90:	400b      	ands	r3, r1
 8006a92:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006a96:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006a98:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006a9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a9e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006aa0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8006aa2:	b1df      	cbz	r7, 8006adc <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006aa4:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006aa6:	bf0c      	ite	eq
 8006aa8:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006aac:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8006ab0:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006ab2:	4c0c      	ldr	r4, [pc, #48]	@ (8006ae4 <RCCEx_PLL3_Config.part.0+0xdc>)
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006aba:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006abc:	f7fd f92e 	bl	8003d1c <HAL_GetTick>
 8006ac0:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ac2:	e004      	b.n	8006ace <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ac4:	f7fd f92a 	bl	8003d1c <HAL_GetTick>
 8006ac8:	1b40      	subs	r0, r0, r5
 8006aca:	2802      	cmp	r0, #2
 8006acc:	d804      	bhi.n	8006ad8 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	d5f7      	bpl.n	8006ac4 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8006ad4:	2000      	movs	r0, #0
}
 8006ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006ad8:	2003      	movs	r0, #3
}
 8006ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006adc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006ae0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ae2:	e7e6      	b.n	8006ab2 <RCCEx_PLL3_Config.part.0+0xaa>
 8006ae4:	58024400 	.word	0x58024400
 8006ae8:	ffff0007 	.word	0xffff0007

08006aec <HAL_RCCEx_PeriphCLKConfig>:
{
 8006aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006af0:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8006af4:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006af6:	0118      	lsls	r0, r3, #4
 8006af8:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 8006afc:	d526      	bpl.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x60>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8006afe:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8006b00:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8006b04:	f000 8671 	beq.w	80077ea <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006b08:	d815      	bhi.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8006b0a:	2900      	cmp	r1, #0
 8006b0c:	f000 8490 	beq.w	8007430 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8006b10:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8006b14:	f040 846b 	bne.w	80073ee <HAL_RCCEx_PeriphCLKConfig+0x902>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b18:	49a4      	ldr	r1, [pc, #656]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006b1a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006b1c:	f001 0103 	and.w	r1, r1, #3
 8006b20:	2903      	cmp	r1, #3
 8006b22:	f000 8464 	beq.w	80073ee <HAL_RCCEx_PeriphCLKConfig+0x902>
 8006b26:	2102      	movs	r1, #2
 8006b28:	f104 0008 	add.w	r0, r4, #8
 8006b2c:	f7ff fefa 	bl	8006924 <RCCEx_PLL2_Config.part.0>
 8006b30:	4606      	mov	r6, r0
        break;
 8006b32:	f000 be67 	b.w	8007804 <HAL_RCCEx_PeriphCLKConfig+0xd18>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8006b36:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8006b3a:	f040 8458 	bne.w	80073ee <HAL_RCCEx_PeriphCLKConfig+0x902>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006b3e:	4d9b      	ldr	r5, [pc, #620]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b40:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006b42:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8006b44:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 8006b48:	4301      	orrs	r1, r0
 8006b4a:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b4c:	05d9      	lsls	r1, r3, #23
 8006b4e:	d50a      	bpl.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch (PeriphClkInit->Sai1ClockSelection)
 8006b50:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8006b52:	2904      	cmp	r1, #4
 8006b54:	d806      	bhi.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006b56:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006b5a:	0495      	.short	0x0495
 8006b5c:	06380623 	.word	0x06380623
 8006b60:	049a049a 	.word	0x049a049a
 8006b64:	2601      	movs	r6, #1
 8006b66:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006b68:	059f      	lsls	r7, r3, #22
 8006b6a:	d524      	bpl.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai2AClockSelection)
 8006b6c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8006b6e:	2980      	cmp	r1, #128	@ 0x80
 8006b70:	f000 85d7 	beq.w	8007722 <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8006b74:	f200 80e4 	bhi.w	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006b78:	2900      	cmp	r1, #0
 8006b7a:	f000 8460 	beq.w	800743e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006b7e:	2940      	cmp	r1, #64	@ 0x40
 8006b80:	f040 80e7 	bne.w	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x266>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b84:	4989      	ldr	r1, [pc, #548]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006b86:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006b88:	f001 0103 	and.w	r1, r1, #3
 8006b8c:	2903      	cmp	r1, #3
 8006b8e:	f000 80e0 	beq.w	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8006b92:	2100      	movs	r1, #0
 8006b94:	f104 0008 	add.w	r0, r4, #8
 8006b98:	f7ff fec4 	bl	8006924 <RCCEx_PLL2_Config.part.0>
 8006b9c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006b9e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006ba2:	2d00      	cmp	r5, #0
 8006ba4:	f040 84f7 	bne.w	8007596 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006ba8:	4f80      	ldr	r7, [pc, #512]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006baa:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8006bac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006bae:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8006bb2:	4301      	orrs	r1, r0
 8006bb4:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006bb6:	0558      	lsls	r0, r3, #21
 8006bb8:	d526      	bpl.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai2BClockSelection)
 8006bba:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8006bbc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006bc0:	f000 85da 	beq.w	8007778 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
 8006bc4:	f200 80c8 	bhi.w	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006bc8:	2900      	cmp	r1, #0
 8006bca:	f000 8442 	beq.w	8007452 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006bce:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006bd2:	f040 80cb 	bne.w	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bd6:	4975      	ldr	r1, [pc, #468]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006bd8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006bda:	f001 0103 	and.w	r1, r1, #3
 8006bde:	2903      	cmp	r1, #3
 8006be0:	f000 80c4 	beq.w	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8006be4:	2100      	movs	r1, #0
 8006be6:	f104 0008 	add.w	r0, r4, #8
 8006bea:	f7ff fe9b 	bl	8006924 <RCCEx_PLL2_Config.part.0>
 8006bee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006bf0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006bf4:	2d00      	cmp	r5, #0
 8006bf6:	f040 84d1 	bne.w	800759c <HAL_RCCEx_PeriphCLKConfig+0xab0>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006bfa:	4f6c      	ldr	r7, [pc, #432]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006bfc:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8006bfe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c00:	f421 6160 	bic.w	r1, r1, #3584	@ 0xe00
 8006c04:	4301      	orrs	r1, r0
 8006c06:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006c08:	0199      	lsls	r1, r3, #6
 8006c0a:	d518      	bpl.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->OspiClockSelection)
 8006c0c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8006c0e:	2920      	cmp	r1, #32
 8006c10:	f000 8527 	beq.w	8007662 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8006c14:	f200 80ad 	bhi.w	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006c18:	b139      	cbz	r1, 8006c2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8006c1a:	2910      	cmp	r1, #16
 8006c1c:	f040 80ac 	bne.w	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c20:	4862      	ldr	r0, [pc, #392]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006c22:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006c24:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006c28:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006c2a:	2d00      	cmp	r5, #0
 8006c2c:	f040 84ab 	bne.w	8007586 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006c30:	4f5e      	ldr	r7, [pc, #376]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006c32:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8006c34:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006c36:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8006c3a:	4301      	orrs	r1, r0
 8006c3c:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c3e:	04df      	lsls	r7, r3, #19
 8006c40:	d526      	bpl.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    switch (PeriphClkInit->Spi123ClockSelection)
 8006c42:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8006c44:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8006c48:	f000 857f 	beq.w	800774a <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 8006c4c:	f200 8097 	bhi.w	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006c50:	2900      	cmp	r1, #0
 8006c52:	f000 840d 	beq.w	8007470 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006c56:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006c5a:	f040 8098 	bne.w	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c5e:	4953      	ldr	r1, [pc, #332]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006c60:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006c62:	f001 0103 	and.w	r1, r1, #3
 8006c66:	2903      	cmp	r1, #3
 8006c68:	f000 8091 	beq.w	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	f104 0008 	add.w	r0, r4, #8
 8006c72:	f7ff fe57 	bl	8006924 <RCCEx_PLL2_Config.part.0>
 8006c76:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c78:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006c7c:	2d00      	cmp	r5, #0
 8006c7e:	f040 8487 	bne.w	8007590 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006c82:	4f4a      	ldr	r7, [pc, #296]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006c84:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8006c86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c88:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8006c8c:	4301      	orrs	r1, r0
 8006c8e:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c90:	0498      	lsls	r0, r3, #18
 8006c92:	d521      	bpl.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch (PeriphClkInit->Spi45ClockSelection)
 8006c94:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8006c96:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8006c9a:	f000 852e 	beq.w	80076fa <HAL_RCCEx_PeriphCLKConfig+0xc0e>
 8006c9e:	d879      	bhi.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006ca0:	b181      	cbz	r1, 8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006ca2:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8006ca6:	d17d      	bne.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ca8:	4940      	ldr	r1, [pc, #256]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006caa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006cac:	f001 0103 	and.w	r1, r1, #3
 8006cb0:	2903      	cmp	r1, #3
 8006cb2:	d077      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	f104 0008 	add.w	r0, r4, #8
 8006cba:	f7ff fe33 	bl	8006924 <RCCEx_PLL2_Config.part.0>
 8006cbe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006cc0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006cc4:	2d00      	cmp	r5, #0
 8006cc6:	f040 847a 	bne.w	80075be <HAL_RCCEx_PeriphCLKConfig+0xad2>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006cca:	4f38      	ldr	r7, [pc, #224]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006ccc:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8006cce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006cd0:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8006cd4:	4301      	orrs	r1, r0
 8006cd6:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006cd8:	0459      	lsls	r1, r3, #17
 8006cda:	d572      	bpl.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    switch (PeriphClkInit->Spi6ClockSelection)
 8006cdc:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8006ce0:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8006ce4:	f000 84d0 	beq.w	8007688 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006ce8:	d862      	bhi.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8006cea:	b181      	cbz	r1, 8006d0e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006cec:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8006cf0:	d165      	bne.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cf2:	492e      	ldr	r1, [pc, #184]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006cf4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006cf6:	f001 0103 	and.w	r1, r1, #3
 8006cfa:	2903      	cmp	r1, #3
 8006cfc:	d05f      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006cfe:	2101      	movs	r1, #1
 8006d00:	f104 0008 	add.w	r0, r4, #8
 8006d04:	f7ff fe0e 	bl	8006924 <RCCEx_PLL2_Config.part.0>
 8006d08:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d0a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006d0e:	2d00      	cmp	r5, #0
 8006d10:	f040 8463 	bne.w	80075da <HAL_RCCEx_PeriphCLKConfig+0xaee>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006d14:	4f25      	ldr	r7, [pc, #148]	@ (8006dac <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006d16:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8006d1a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006d1c:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8006d20:	4301      	orrs	r1, r0
 8006d22:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d24:	041f      	lsls	r7, r3, #16
 8006d26:	d44e      	bmi.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006d28:	01d8      	lsls	r0, r3, #7
 8006d2a:	d55c      	bpl.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    switch (PeriphClkInit->FmcClockSelection)
 8006d2c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006d2e:	2903      	cmp	r1, #3
 8006d30:	f200 85c8 	bhi.w	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8006d34:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006d38:	02c802cd 	.word	0x02c802cd
 8006d3c:	02cd04ce 	.word	0x02cd04ce
    switch (PeriphClkInit->Sai2AClockSelection)
 8006d40:	f021 0040 	bic.w	r0, r1, #64	@ 0x40
 8006d44:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8006d48:	f43f af2b 	beq.w	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8006d4c:	29c0      	cmp	r1, #192	@ 0xc0
 8006d4e:	f43f af28 	beq.w	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8006d52:	2601      	movs	r6, #1
 8006d54:	4635      	mov	r5, r6
 8006d56:	e72e      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai2BClockSelection)
 8006d58:	f421 7000 	bic.w	r0, r1, #512	@ 0x200
 8006d5c:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8006d60:	f43f af48 	beq.w	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8006d64:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 8006d68:	f43f af44 	beq.w	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8006d6c:	2601      	movs	r6, #1
 8006d6e:	4635      	mov	r5, r6
 8006d70:	e74a      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->OspiClockSelection)
 8006d72:	2930      	cmp	r1, #48	@ 0x30
 8006d74:	f43f af59 	beq.w	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8006d78:	2601      	movs	r6, #1
 8006d7a:	4635      	mov	r5, r6
 8006d7c:	e75f      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Spi123ClockSelection)
 8006d7e:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8006d82:	f43f af7b 	beq.w	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006d86:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8006d8a:	f43f af77 	beq.w	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006d8e:	2601      	movs	r6, #1
 8006d90:	4635      	mov	r5, r6
 8006d92:	e77d      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    switch (PeriphClkInit->Spi45ClockSelection)
 8006d94:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8006d98:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8006d9c:	d092      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006d9e:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8006da2:	d08f      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006da4:	2601      	movs	r6, #1
 8006da6:	4635      	mov	r5, r6
 8006da8:	e796      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8006daa:	bf00      	nop
 8006dac:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi6ClockSelection)
 8006db0:	f1b1 4fa0 	cmp.w	r1, #1342177280	@ 0x50000000
 8006db4:	d0ab      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006db6:	d94a      	bls.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006db8:	f1b1 4fc0 	cmp.w	r1, #1610612736	@ 0x60000000
 8006dbc:	d0a7      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006dbe:	2601      	movs	r6, #1
 8006dc0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006dc2:	041f      	lsls	r7, r3, #16
 8006dc4:	d5b0      	bpl.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    switch (PeriphClkInit->FdcanClockSelection)
 8006dc6:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8006dc8:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8006dcc:	f000 82e4 	beq.w	8007398 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8006dd0:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8006dd4:	f000 83c0 	beq.w	8007558 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8006dd8:	2900      	cmp	r1, #0
 8006dda:	f000 82e2 	beq.w	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 8006dde:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006de0:	01d8      	lsls	r0, r3, #7
 8006de2:	4635      	mov	r5, r6
 8006de4:	d4a2      	bmi.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x240>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006de6:	0259      	lsls	r1, r3, #9
 8006de8:	f100 8280 	bmi.w	80072ec <HAL_RCCEx_PeriphCLKConfig+0x800>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006dec:	07df      	lsls	r7, r3, #31
 8006dee:	d53b      	bpl.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    switch (PeriphClkInit->Usart16ClockSelection)
 8006df0:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8006df4:	2928      	cmp	r1, #40	@ 0x28
 8006df6:	d835      	bhi.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006df8:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006dfc:	0034030e 	.word	0x0034030e
 8006e00:	00340034 	.word	0x00340034
 8006e04:	00340034 	.word	0x00340034
 8006e08:	00340034 	.word	0x00340034
 8006e0c:	003402ff 	.word	0x003402ff
 8006e10:	00340034 	.word	0x00340034
 8006e14:	00340034 	.word	0x00340034
 8006e18:	00340034 	.word	0x00340034
 8006e1c:	00340530 	.word	0x00340530
 8006e20:	00340034 	.word	0x00340034
 8006e24:	00340034 	.word	0x00340034
 8006e28:	00340034 	.word	0x00340034
 8006e2c:	0034030e 	.word	0x0034030e
 8006e30:	00340034 	.word	0x00340034
 8006e34:	00340034 	.word	0x00340034
 8006e38:	00340034 	.word	0x00340034
 8006e3c:	0034030e 	.word	0x0034030e
 8006e40:	00340034 	.word	0x00340034
 8006e44:	00340034 	.word	0x00340034
 8006e48:	00340034 	.word	0x00340034
 8006e4c:	030e      	.short	0x030e
    switch (PeriphClkInit->Spi6ClockSelection)
 8006e4e:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8006e52:	f43f af5c 	beq.w	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006e56:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8006e5a:	d1b0      	bne.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    if (ret == HAL_OK)
 8006e5c:	2d00      	cmp	r5, #0
 8006e5e:	f040 83bc 	bne.w	80075da <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006e62:	e757      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006e64:	2601      	movs	r6, #1
 8006e66:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006e68:	0798      	lsls	r0, r3, #30
 8006e6a:	d51f      	bpl.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006e6c:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8006e70:	2905      	cmp	r1, #5
 8006e72:	f200 850c 	bhi.w	800788e <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8006e76:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006e7a:	0015      	.short	0x0015
 8006e7c:	04df0006 	.word	0x04df0006
 8006e80:	00150015 	.word	0x00150015
 8006e84:	0015      	.short	0x0015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e86:	4911      	ldr	r1, [pc, #68]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e88:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006e8a:	f001 0103 	and.w	r1, r1, #3
 8006e8e:	2903      	cmp	r1, #3
 8006e90:	f000 84fd 	beq.w	800788e <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8006e94:	2101      	movs	r1, #1
 8006e96:	f104 0008 	add.w	r0, r4, #8
 8006e9a:	f7ff fd43 	bl	8006924 <RCCEx_PLL2_Config.part.0>
 8006e9e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ea0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006ea4:	2d00      	cmp	r5, #0
 8006ea6:	f000 839b 	beq.w	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
 8006eaa:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006eac:	0759      	lsls	r1, r3, #29
 8006eae:	d522      	bpl.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006eb0:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8006eb4:	2905      	cmp	r1, #5
 8006eb6:	f200 84ee 	bhi.w	8007896 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8006eba:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006ebe:	0018      	.short	0x0018
 8006ec0:	04ab0009 	.word	0x04ab0009
 8006ec4:	00180018 	.word	0x00180018
 8006ec8:	0018      	.short	0x0018
 8006eca:	bf00      	nop
 8006ecc:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ed0:	49af      	ldr	r1, [pc, #700]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006ed2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006ed4:	f001 0103 	and.w	r1, r1, #3
 8006ed8:	2903      	cmp	r1, #3
 8006eda:	f000 84dc 	beq.w	8007896 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8006ede:	2101      	movs	r1, #1
 8006ee0:	f104 0008 	add.w	r0, r4, #8
 8006ee4:	f7ff fd1e 	bl	8006924 <RCCEx_PLL2_Config.part.0>
 8006ee8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006eea:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006eee:	2d00      	cmp	r5, #0
 8006ef0:	f000 8368 	beq.w	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006ef4:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ef6:	069f      	lsls	r7, r3, #26
 8006ef8:	d526      	bpl.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006efa:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8006efe:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8006f02:	f000 8378 	beq.w	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006f06:	f200 8192 	bhi.w	800722e <HAL_RCCEx_PeriphCLKConfig+0x742>
 8006f0a:	b191      	cbz	r1, 8006f32 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006f0c:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8006f10:	f040 8197 	bne.w	8007242 <HAL_RCCEx_PeriphCLKConfig+0x756>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f14:	499e      	ldr	r1, [pc, #632]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006f16:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006f18:	f001 0103 	and.w	r1, r1, #3
 8006f1c:	2903      	cmp	r1, #3
 8006f1e:	f000 8190 	beq.w	8007242 <HAL_RCCEx_PeriphCLKConfig+0x756>
 8006f22:	2100      	movs	r1, #0
 8006f24:	f104 0008 	add.w	r0, r4, #8
 8006f28:	f7ff fcfc 	bl	8006924 <RCCEx_PLL2_Config.part.0>
 8006f2c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006f2e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006f32:	2d00      	cmp	r5, #0
 8006f34:	f040 834f 	bne.w	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xaea>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f38:	4f95      	ldr	r7, [pc, #596]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006f3a:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8006f3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f40:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8006f44:	4301      	orrs	r1, r0
 8006f46:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006f48:	0658      	lsls	r0, r3, #25
 8006f4a:	d526      	bpl.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006f4c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8006f50:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006f54:	f000 8373 	beq.w	800763e <HAL_RCCEx_PeriphCLKConfig+0xb52>
 8006f58:	f200 8176 	bhi.w	8007248 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8006f5c:	b191      	cbz	r1, 8006f84 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006f5e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006f62:	f040 817b 	bne.w	800725c <HAL_RCCEx_PeriphCLKConfig+0x770>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f66:	498a      	ldr	r1, [pc, #552]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006f68:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006f6a:	f001 0103 	and.w	r1, r1, #3
 8006f6e:	2903      	cmp	r1, #3
 8006f70:	f000 8174 	beq.w	800725c <HAL_RCCEx_PeriphCLKConfig+0x770>
 8006f74:	2100      	movs	r1, #0
 8006f76:	f104 0008 	add.w	r0, r4, #8
 8006f7a:	f7ff fcd3 	bl	8006924 <RCCEx_PLL2_Config.part.0>
 8006f7e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006f80:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006f84:	2d00      	cmp	r5, #0
 8006f86:	f040 8314 	bne.w	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xac6>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f8a:	4f81      	ldr	r7, [pc, #516]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006f8c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8006f90:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006f92:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 8006f96:	4301      	orrs	r1, r0
 8006f98:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006f9a:	0619      	lsls	r1, r3, #24
 8006f9c:	d526      	bpl.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006f9e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8006fa2:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8006fa6:	f000 8338 	beq.w	800761a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006faa:	f200 815a 	bhi.w	8007262 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8006fae:	b191      	cbz	r1, 8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8006fb0:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8006fb4:	f040 815f 	bne.w	8007276 <HAL_RCCEx_PeriphCLKConfig+0x78a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fb8:	4975      	ldr	r1, [pc, #468]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006fba:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006fbc:	f001 0103 	and.w	r1, r1, #3
 8006fc0:	2903      	cmp	r1, #3
 8006fc2:	f000 8158 	beq.w	8007276 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	f104 0008 	add.w	r0, r4, #8
 8006fcc:	f7ff fcaa 	bl	8006924 <RCCEx_PLL2_Config.part.0>
 8006fd0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006fd2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006fd6:	2d00      	cmp	r5, #0
 8006fd8:	f040 82ef 	bne.w	80075ba <HAL_RCCEx_PeriphCLKConfig+0xace>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006fdc:	4f6c      	ldr	r7, [pc, #432]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006fde:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8006fe2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006fe4:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8006fe8:	4301      	orrs	r1, r0
 8006fea:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006fec:	071f      	lsls	r7, r3, #28
 8006fee:	d50b      	bpl.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006ff0:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8006ff4:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8006ff8:	f000 8262 	beq.w	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006ffc:	4f64      	ldr	r7, [pc, #400]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006ffe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007000:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8007004:	4301      	orrs	r1, r0
 8007006:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007008:	06d8      	lsls	r0, r3, #27
 800700a:	d50b      	bpl.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x538>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800700c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8007010:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8007014:	f000 8268 	beq.w	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007018:	4f5d      	ldr	r7, [pc, #372]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800701a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800701c:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8007020:	4301      	orrs	r1, r0
 8007022:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007024:	0319      	lsls	r1, r3, #12
 8007026:	d50e      	bpl.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->AdcClockSelection)
 8007028:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 800702c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8007030:	f000 81c2 	beq.w	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8007034:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8007038:	f000 81cd 	beq.w	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800703c:	2900      	cmp	r1, #0
 800703e:	f000 827b 	beq.w	8007538 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8007042:	2601      	movs	r6, #1
 8007044:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007046:	035f      	lsls	r7, r3, #13
 8007048:	d50f      	bpl.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->UsbClockSelection)
 800704a:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800704e:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8007052:	f000 832c 	beq.w	80076ae <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8007056:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800705a:	f000 8191 	beq.w	8007380 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800705e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8007062:	f000 8188 	beq.w	8007376 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 8007066:	2601      	movs	r6, #1
 8007068:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800706a:	03d8      	lsls	r0, r3, #15
 800706c:	d520      	bpl.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->SdmmcClockSelection)
 800706e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8007070:	2900      	cmp	r1, #0
 8007072:	f000 824e 	beq.w	8007512 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8007076:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800707a:	f040 8179 	bne.w	8007370 <HAL_RCCEx_PeriphCLKConfig+0x884>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800707e:	4944      	ldr	r1, [pc, #272]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8007080:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007082:	f001 0103 	and.w	r1, r1, #3
 8007086:	2903      	cmp	r1, #3
 8007088:	f000 8172 	beq.w	8007370 <HAL_RCCEx_PeriphCLKConfig+0x884>
 800708c:	2102      	movs	r1, #2
 800708e:	f104 0008 	add.w	r0, r4, #8
 8007092:	f7ff fc47 	bl	8006924 <RCCEx_PLL2_Config.part.0>
 8007096:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007098:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800709c:	2d00      	cmp	r5, #0
 800709e:	f040 8240 	bne.w	8007522 <HAL_RCCEx_PeriphCLKConfig+0xa36>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80070a2:	4f3b      	ldr	r7, [pc, #236]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80070a4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80070a6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80070a8:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80070ac:	4301      	orrs	r1, r0
 80070ae:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80070b0:	0099      	lsls	r1, r3, #2
 80070b2:	d50e      	bpl.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070b4:	4936      	ldr	r1, [pc, #216]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80070b6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80070b8:	f001 0103 	and.w	r1, r1, #3
 80070bc:	2903      	cmp	r1, #3
 80070be:	d007      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 80070c0:	2102      	movs	r1, #2
 80070c2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80070c6:	f7ff fc9f 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80070ca:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80070ce:	b100      	cbz	r0, 80070d2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      status = HAL_ERROR;
 80070d0:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80070d2:	039f      	lsls	r7, r3, #14
 80070d4:	f140 80de 	bpl.w	8007294 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
    switch (PeriphClkInit->RngClockSelection)
 80070d8:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 80070dc:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80070e0:	f000 8221 	beq.w	8007526 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 80070e4:	f240 80ca 	bls.w	800727c <HAL_RCCEx_PeriphCLKConfig+0x790>
 80070e8:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 80070ec:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80070f0:	f000 80c7 	beq.w	8007282 <HAL_RCCEx_PeriphCLKConfig+0x796>
 80070f4:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80070f6:	02d8      	lsls	r0, r3, #11
 80070f8:	d506      	bpl.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80070fa:	4825      	ldr	r0, [pc, #148]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80070fc:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
 80070fe:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8007100:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8007104:	4331      	orrs	r1, r6
 8007106:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007108:	0299      	lsls	r1, r3, #10
 800710a:	d506      	bpl.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800710c:	4820      	ldr	r0, [pc, #128]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800710e:	6f26      	ldr	r6, [r4, #112]	@ 0x70
 8007110:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8007112:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8007116:	4331      	orrs	r1, r6
 8007118:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800711a:	051f      	lsls	r7, r3, #20
 800711c:	d506      	bpl.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x640>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800711e:	481c      	ldr	r0, [pc, #112]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8007120:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 8007122:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8007124:	f021 6100 	bic.w	r1, r1, #134217728	@ 0x8000000
 8007128:	4331      	orrs	r1, r6
 800712a:	6581      	str	r1, [r0, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800712c:	005e      	lsls	r6, r3, #1
 800712e:	d509      	bpl.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x658>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007130:	4917      	ldr	r1, [pc, #92]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8007132:	6908      	ldr	r0, [r1, #16]
 8007134:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8007138:	6108      	str	r0, [r1, #16]
 800713a:	6908      	ldr	r0, [r1, #16]
 800713c:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 8007140:	4330      	orrs	r0, r6
 8007142:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007144:	2b00      	cmp	r3, #0
 8007146:	da06      	bge.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007148:	4811      	ldr	r0, [pc, #68]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800714a:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 800714c:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800714e:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8007152:	4331      	orrs	r1, r6
 8007154:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007156:	0218      	lsls	r0, r3, #8
 8007158:	d507      	bpl.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800715a:	490d      	ldr	r1, [pc, #52]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800715c:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8007160:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8007162:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8007166:	4303      	orrs	r3, r0
 8007168:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800716a:	07d1      	lsls	r1, r2, #31
 800716c:	d512      	bpl.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800716e:	4b08      	ldr	r3, [pc, #32]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8007170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007172:	f003 0303 	and.w	r3, r3, #3
 8007176:	2b03      	cmp	r3, #3
 8007178:	f000 8198 	beq.w	80074ac <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 800717c:	2100      	movs	r1, #0
 800717e:	f104 0008 	add.w	r0, r4, #8
 8007182:	f7ff fbcf 	bl	8006924 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007186:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007188:	2800      	cmp	r0, #0
 800718a:	f040 820e 	bne.w	80075aa <HAL_RCCEx_PeriphCLKConfig+0xabe>
 800718e:	e001      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8007190:	58024400 	.word	0x58024400
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007194:	0793      	lsls	r3, r2, #30
 8007196:	d50f      	bpl.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007198:	4bb3      	ldr	r3, [pc, #716]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800719a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719c:	f003 0303 	and.w	r3, r3, #3
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	f000 8185 	beq.w	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
 80071a6:	2101      	movs	r1, #1
 80071a8:	f104 0008 	add.w	r0, r4, #8
 80071ac:	f7ff fbba 	bl	8006924 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80071b0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80071b2:	2800      	cmp	r0, #0
 80071b4:	f040 81f5 	bne.w	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80071b8:	0757      	lsls	r7, r2, #29
 80071ba:	d50f      	bpl.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071bc:	4baa      	ldr	r3, [pc, #680]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80071be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c0:	f003 0303 	and.w	r3, r3, #3
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	f000 816f 	beq.w	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 80071ca:	2102      	movs	r1, #2
 80071cc:	f104 0008 	add.w	r0, r4, #8
 80071d0:	f7ff fba8 	bl	8006924 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80071d4:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80071d6:	2800      	cmp	r0, #0
 80071d8:	f040 81e5 	bne.w	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80071dc:	0716      	lsls	r6, r2, #28
 80071de:	d50f      	bpl.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x714>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071e0:	4ba1      	ldr	r3, [pc, #644]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80071e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e4:	f003 0303 	and.w	r3, r3, #3
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	f000 8167 	beq.w	80074bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80071ee:	2100      	movs	r1, #0
 80071f0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80071f4:	f7ff fc08 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80071f8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80071fa:	2800      	cmp	r0, #0
 80071fc:	f040 81d7 	bne.w	80075ae <HAL_RCCEx_PeriphCLKConfig+0xac2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007200:	06d0      	lsls	r0, r2, #27
 8007202:	d54a      	bpl.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007204:	4b98      	ldr	r3, [pc, #608]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007206:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800720a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720c:	f003 0303 	and.w	r3, r3, #3
 8007210:	2b03      	cmp	r3, #3
 8007212:	f000 814f 	beq.w	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
 8007216:	2101      	movs	r1, #1
 8007218:	4630      	mov	r0, r6
 800721a:	f7ff fbf5 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 800721e:	2800      	cmp	r0, #0
 8007220:	d03a      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007222:	6863      	ldr	r3, [r4, #4]
 8007224:	069a      	lsls	r2, r3, #26
 8007226:	f140 80e5 	bpl.w	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800722a:	4605      	mov	r5, r0
 800722c:	e039      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800722e:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8007232:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007236:	f43f ae7c 	beq.w	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800723a:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 800723e:	f43f ae78 	beq.w	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007242:	2601      	movs	r6, #1
 8007244:	4635      	mov	r5, r6
 8007246:	e67f      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007248:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 800724c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8007250:	f43f ae98 	beq.w	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007254:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 8007258:	f43f ae94 	beq.w	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800725c:	2601      	movs	r6, #1
 800725e:	4635      	mov	r5, r6
 8007260:	e69b      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007262:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 8007266:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800726a:	f43f aeb4 	beq.w	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800726e:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 8007272:	f43f aeb0 	beq.w	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8007276:	2601      	movs	r6, #1
 8007278:	4635      	mov	r5, r6
 800727a:	e6b7      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch (PeriphClkInit->RngClockSelection)
 800727c:	2900      	cmp	r1, #0
 800727e:	f47f af39 	bne.w	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    if (ret == HAL_OK)
 8007282:	2d00      	cmp	r5, #0
 8007284:	f47f af37 	bne.w	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007288:	4d77      	ldr	r5, [pc, #476]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800728a:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 800728c:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8007290:	4301      	orrs	r1, r0
 8007292:	6569      	str	r1, [r5, #84]	@ 0x54
      status = HAL_ERROR;
 8007294:	4635      	mov	r5, r6
 8007296:	e72e      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007298:	6862      	ldr	r2, [r4, #4]
 800729a:	0693      	lsls	r3, r2, #26
 800729c:	d50f      	bpl.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800729e:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072a2:	4b71      	ldr	r3, [pc, #452]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80072a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	f000 80a2 	beq.w	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x908>
 80072b0:	2102      	movs	r1, #2
 80072b2:	4630      	mov	r0, r6
 80072b4:	f7ff fba8 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 80072b8:	2800      	cmp	r0, #0
 80072ba:	f040 809b 	bne.w	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x908>
  if (status == HAL_OK)
 80072be:	1e28      	subs	r0, r5, #0
 80072c0:	bf18      	it	ne
 80072c2:	2001      	movne	r0, #1
}
 80072c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c8:	4867      	ldr	r0, [pc, #412]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80072ca:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80072cc:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80072d0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80072d2:	2d00      	cmp	r5, #0
 80072d4:	f040 815a 	bne.w	800758c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80072d8:	4f63      	ldr	r7, [pc, #396]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80072da:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80072dc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80072de:	f021 0103 	bic.w	r1, r1, #3
 80072e2:	4301      	orrs	r1, r0
 80072e4:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072e6:	0259      	lsls	r1, r3, #9
 80072e8:	f57f ad80 	bpl.w	8006dec <HAL_RCCEx_PeriphCLKConfig+0x300>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072ec:	4f5f      	ldr	r7, [pc, #380]	@ (800746c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072f4:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80072f6:	f7fc fd11 	bl	8003d1c <HAL_GetTick>
 80072fa:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072fc:	e006      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x820>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072fe:	f7fc fd0d 	bl	8003d1c <HAL_GetTick>
 8007302:	eba0 0008 	sub.w	r0, r0, r8
 8007306:	2864      	cmp	r0, #100	@ 0x64
 8007308:	f200 82bb 	bhi.w	8007882 <HAL_RCCEx_PeriphCLKConfig+0xd96>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	05da      	lsls	r2, r3, #23
 8007310:	d5f5      	bpl.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x812>
    if (ret == HAL_OK)
 8007312:	2d00      	cmp	r5, #0
 8007314:	f040 82b6 	bne.w	8007884 <HAL_RCCEx_PeriphCLKConfig+0xd98>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007318:	4a53      	ldr	r2, [pc, #332]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800731a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800731e:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8007320:	4059      	eors	r1, r3
 8007322:	f411 7f40 	tst.w	r1, #768	@ 0x300
 8007326:	d00b      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x854>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007328:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800732a:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800732c:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007330:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8007334:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007336:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8007338:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 800733c:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800733e:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007344:	f000 82c2 	beq.w	80078cc <HAL_RCCEx_PeriphCLKConfig+0xde0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007348:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800734c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8007350:	f000 82d0 	beq.w	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8007354:	4944      	ldr	r1, [pc, #272]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007356:	690a      	ldr	r2, [r1, #16]
 8007358:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800735c:	610a      	str	r2, [r1, #16]
 800735e:	4842      	ldr	r0, [pc, #264]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007360:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8007364:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8007366:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007368:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800736c:	6701      	str	r1, [r0, #112]	@ 0x70
 800736e:	e53d      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007370:	2601      	movs	r6, #1
 8007372:	4635      	mov	r5, r6
 8007374:	e69c      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007376:	483c      	ldr	r0, [pc, #240]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007378:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800737a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800737e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007380:	2d00      	cmp	r5, #0
 8007382:	f040 80fe 	bne.w	8007582 <HAL_RCCEx_PeriphCLKConfig+0xa96>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007386:	4f38      	ldr	r7, [pc, #224]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007388:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800738c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800738e:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8007392:	4301      	orrs	r1, r0
 8007394:	6579      	str	r1, [r7, #84]	@ 0x54
 8007396:	e668      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x57e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007398:	4833      	ldr	r0, [pc, #204]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800739a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800739c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80073a0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80073a2:	2d00      	cmp	r5, #0
 80073a4:	f040 80ea 	bne.w	800757c <HAL_RCCEx_PeriphCLKConfig+0xa90>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80073a8:	4f2f      	ldr	r7, [pc, #188]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80073aa:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 80073ac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80073ae:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 80073b2:	4301      	orrs	r1, r0
 80073b4:	6539      	str	r1, [r7, #80]	@ 0x50
 80073b6:	e4b7      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073b8:	492b      	ldr	r1, [pc, #172]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80073ba:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80073bc:	f001 0103 	and.w	r1, r1, #3
 80073c0:	2903      	cmp	r1, #3
 80073c2:	f43f ae3e 	beq.w	8007042 <HAL_RCCEx_PeriphCLKConfig+0x556>
 80073c6:	2102      	movs	r1, #2
 80073c8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80073cc:	f7ff fb1c 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
 80073d0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80073d2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80073d6:	2d00      	cmp	r5, #0
 80073d8:	f040 80ed 	bne.w	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xaca>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80073dc:	4f22      	ldr	r7, [pc, #136]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80073de:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 80073e2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80073e4:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80073e8:	4301      	orrs	r1, r0
 80073ea:	65b9      	str	r1, [r7, #88]	@ 0x58
 80073ec:	e62b      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 80073ee:	2601      	movs	r6, #1
 80073f0:	f7ff bbac 	b.w	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x60>
  return HAL_ERROR;
 80073f4:	2001      	movs	r0, #1
}
 80073f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073fa:	491b      	ldr	r1, [pc, #108]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80073fc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80073fe:	f001 0103 	and.w	r1, r1, #3
 8007402:	2903      	cmp	r1, #3
 8007404:	f43f ad2e 	beq.w	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007408:	2101      	movs	r1, #1
 800740a:	f104 0008 	add.w	r0, r4, #8
 800740e:	f7ff fa89 	bl	8006924 <RCCEx_PLL2_Config.part.0>
 8007412:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007414:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007418:	2d00      	cmp	r5, #0
 800741a:	f040 80ea 	bne.w	80075f2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800741e:	4f12      	ldr	r7, [pc, #72]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007420:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8007424:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007426:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 800742a:	4301      	orrs	r1, r0
 800742c:	6579      	str	r1, [r7, #84]	@ 0x54
 800742e:	e51b      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007430:	4d0d      	ldr	r5, [pc, #52]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007432:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8007434:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8007438:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 800743a:	f7ff bb80 	b.w	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800743e:	480a      	ldr	r0, [pc, #40]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007440:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007442:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007446:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007448:	2d00      	cmp	r5, #0
 800744a:	f040 80a4 	bne.w	8007596 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800744e:	f7ff bbab 	b.w	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007452:	4805      	ldr	r0, [pc, #20]	@ (8007468 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007454:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007456:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800745a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800745c:	2d00      	cmp	r5, #0
 800745e:	f040 809d 	bne.w	800759c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007462:	f7ff bbca 	b.w	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8007466:	bf00      	nop
 8007468:	58024400 	.word	0x58024400
 800746c:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007470:	48c0      	ldr	r0, [pc, #768]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007472:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007474:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007478:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800747a:	2d00      	cmp	r5, #0
 800747c:	f040 8088 	bne.w	8007590 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007480:	f7ff bbff 	b.w	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x196>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007484:	48bb      	ldr	r0, [pc, #748]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007486:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007488:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800748c:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 800748e:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8007490:	2d00      	cmp	r5, #0
 8007492:	f040 8197 	bne.w	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xcd8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007496:	4fb7      	ldr	r7, [pc, #732]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800749a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800749c:	f021 0107 	bic.w	r1, r1, #7
 80074a0:	4301      	orrs	r1, r0
 80074a2:	6539      	str	r1, [r7, #80]	@ 0x50
 80074a4:	f7ff bb60 	b.w	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    return HAL_ERROR;
 80074a8:	2501      	movs	r5, #1
 80074aa:	e697      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 80074ac:	2501      	movs	r5, #1
 80074ae:	e671      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80074b0:	2501      	movs	r5, #1
 80074b2:	e681      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80074b4:	0691      	lsls	r1, r2, #26
 80074b6:	d59d      	bpl.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x908>
    return HAL_ERROR;
 80074b8:	2501      	movs	r5, #1
 80074ba:	e6f2      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
 80074bc:	2501      	movs	r5, #1
 80074be:	e69f      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x714>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074c0:	49ac      	ldr	r1, [pc, #688]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80074c2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80074c4:	f001 0103 	and.w	r1, r1, #3
 80074c8:	2903      	cmp	r1, #3
 80074ca:	f000 81e8 	beq.w	800789e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
 80074ce:	2102      	movs	r1, #2
 80074d0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80074d4:	f7ff fa98 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80074d8:	2800      	cmp	r0, #0
 80074da:	f040 81ec 	bne.w	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80074de:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074e2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80074e6:	e589      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x510>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074e8:	49a2      	ldr	r1, [pc, #648]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80074ea:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80074ec:	f001 0103 	and.w	r1, r1, #3
 80074f0:	2903      	cmp	r1, #3
 80074f2:	f000 81d7 	beq.w	80078a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 80074f6:	2102      	movs	r1, #2
 80074f8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80074fc:	f7ff fa84 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007500:	2800      	cmp	r0, #0
 8007502:	f000 81d2 	beq.w	80078aa <HAL_RCCEx_PeriphCLKConfig+0xdbe>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007506:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
        status = HAL_ERROR;
 800750a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800750c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007510:	e582      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007512:	4898      	ldr	r0, [pc, #608]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007514:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007516:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800751a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800751c:	2d00      	cmp	r5, #0
 800751e:	f43f adc0 	beq.w	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 8007522:	462e      	mov	r6, r5
 8007524:	e5c4      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007526:	4f93      	ldr	r7, [pc, #588]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007528:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800752a:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800752e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007530:	2d00      	cmp	r5, #0
 8007532:	f47f ade0 	bne.w	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 8007536:	e6a7      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007538:	488e      	ldr	r0, [pc, #568]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800753a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800753c:	f000 0003 	and.w	r0, r0, #3
 8007540:	2803      	cmp	r0, #3
 8007542:	f43f ad7e 	beq.w	8007042 <HAL_RCCEx_PeriphCLKConfig+0x556>
 8007546:	f104 0008 	add.w	r0, r4, #8
 800754a:	f7ff f9eb 	bl	8006924 <RCCEx_PLL2_Config.part.0>
 800754e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007550:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007554:	bb7d      	cbnz	r5, 80075b6 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8007556:	e741      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007558:	4986      	ldr	r1, [pc, #536]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800755a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800755c:	f001 0103 	and.w	r1, r1, #3
 8007560:	2903      	cmp	r1, #3
 8007562:	f43f ac3c 	beq.w	8006dde <HAL_RCCEx_PeriphCLKConfig+0x2f2>
 8007566:	2101      	movs	r1, #1
 8007568:	f104 0008 	add.w	r0, r4, #8
 800756c:	f7ff f9da 	bl	8006924 <RCCEx_PLL2_Config.part.0>
 8007570:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007572:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007576:	2d00      	cmp	r5, #0
 8007578:	f43f af16 	beq.w	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800757c:	462e      	mov	r6, r5
 800757e:	f7ff bbd3 	b.w	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8007582:	462e      	mov	r6, r5
 8007584:	e571      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8007586:	462e      	mov	r6, r5
 8007588:	f7ff bb59 	b.w	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800758c:	462e      	mov	r6, r5
 800758e:	e42a      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8007590:	462e      	mov	r6, r5
 8007592:	f7ff bb7d 	b.w	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007596:	462e      	mov	r6, r5
 8007598:	f7ff bb0d 	b.w	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xca>
 800759c:	462e      	mov	r6, r5
 800759e:	f7ff bb33 	b.w	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80075a2:	4605      	mov	r5, r0
 80075a4:	e608      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80075a6:	4605      	mov	r5, r0
 80075a8:	e618      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80075aa:	4605      	mov	r5, r0
 80075ac:	e5f2      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80075ae:	4605      	mov	r5, r0
 80075b0:	e626      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x714>
 80075b2:	462e      	mov	r6, r5
 80075b4:	e4f1      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80075b6:	462e      	mov	r6, r5
 80075b8:	e545      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 80075ba:	462e      	mov	r6, r5
 80075bc:	e516      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x500>
 80075be:	462e      	mov	r6, r5
 80075c0:	f7ff bb8a 	b.w	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075c4:	4f6b      	ldr	r7, [pc, #428]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80075c6:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80075ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80075cc:	f021 0107 	bic.w	r1, r1, #7
 80075d0:	4301      	orrs	r1, r0
 80075d2:	65b9      	str	r1, [r7, #88]	@ 0x58
 80075d4:	e48f      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80075d6:	462e      	mov	r6, r5
 80075d8:	e4b6      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 80075da:	462e      	mov	r6, r5
 80075dc:	f7ff bbf1 	b.w	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80075e0:	4f64      	ldr	r7, [pc, #400]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80075e2:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80075e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075e8:	f021 0107 	bic.w	r1, r1, #7
 80075ec:	4301      	orrs	r1, r0
 80075ee:	6579      	str	r1, [r7, #84]	@ 0x54
 80075f0:	e45c      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80075f2:	462e      	mov	r6, r5
 80075f4:	e438      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075f6:	495f      	ldr	r1, [pc, #380]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80075f8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80075fa:	f001 0103 	and.w	r1, r1, #3
 80075fe:	2903      	cmp	r1, #3
 8007600:	f43f ae1f 	beq.w	8007242 <HAL_RCCEx_PeriphCLKConfig+0x756>
 8007604:	2102      	movs	r1, #2
 8007606:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800760a:	f7ff f9fd 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
 800760e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007610:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007614:	2d00      	cmp	r5, #0
 8007616:	d1de      	bne.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8007618:	e48e      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800761a:	4956      	ldr	r1, [pc, #344]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800761c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800761e:	f001 0103 	and.w	r1, r1, #3
 8007622:	2903      	cmp	r1, #3
 8007624:	f43f ae27 	beq.w	8007276 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8007628:	2102      	movs	r1, #2
 800762a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800762e:	f7ff f9eb 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
 8007632:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007634:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007638:	2d00      	cmp	r5, #0
 800763a:	d1be      	bne.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xace>
 800763c:	e4ce      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800763e:	494d      	ldr	r1, [pc, #308]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007640:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007642:	f001 0103 	and.w	r1, r1, #3
 8007646:	2903      	cmp	r1, #3
 8007648:	f43f ae08 	beq.w	800725c <HAL_RCCEx_PeriphCLKConfig+0x770>
 800764c:	2102      	movs	r1, #2
 800764e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007652:	f7ff f9d9 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
 8007656:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007658:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800765c:	2d00      	cmp	r5, #0
 800765e:	d1a8      	bne.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xac6>
 8007660:	e493      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x49e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007662:	4944      	ldr	r1, [pc, #272]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007664:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007666:	f001 0103 	and.w	r1, r1, #3
 800766a:	2903      	cmp	r1, #3
 800766c:	f43f ab84 	beq.w	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007670:	2102      	movs	r1, #2
 8007672:	f104 0008 	add.w	r0, r4, #8
 8007676:	f7ff f955 	bl	8006924 <RCCEx_PLL2_Config.part.0>
 800767a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800767c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007680:	2d00      	cmp	r5, #0
 8007682:	d180      	bne.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 8007684:	f7ff bad4 	b.w	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x144>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007688:	493a      	ldr	r1, [pc, #232]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800768a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800768c:	f001 0103 	and.w	r1, r1, #3
 8007690:	2903      	cmp	r1, #3
 8007692:	f43f ab94 	beq.w	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007696:	2101      	movs	r1, #1
 8007698:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800769c:	f7ff f9b4 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
 80076a0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80076a2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80076a6:	2d00      	cmp	r5, #0
 80076a8:	d197      	bne.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80076aa:	f7ff bb33 	b.w	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x228>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076ae:	4931      	ldr	r1, [pc, #196]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80076b0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80076b2:	f001 0103 	and.w	r1, r1, #3
 80076b6:	2903      	cmp	r1, #3
 80076b8:	f43f acd5 	beq.w	8007066 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80076bc:	2101      	movs	r1, #1
 80076be:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80076c2:	f7ff f9a1 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
 80076c6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80076c8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80076cc:	2d00      	cmp	r5, #0
 80076ce:	f47f af58 	bne.w	8007582 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80076d2:	e658      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x89a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076d4:	4927      	ldr	r1, [pc, #156]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80076d6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80076d8:	f001 0103 	and.w	r1, r1, #3
 80076dc:	2903      	cmp	r1, #3
 80076de:	f000 80f1 	beq.w	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 80076e2:	2102      	movs	r1, #2
 80076e4:	f104 0008 	add.w	r0, r4, #8
 80076e8:	f7ff f91c 	bl	8006924 <RCCEx_PLL2_Config.part.0>
 80076ec:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076ee:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80076f2:	2d00      	cmp	r5, #0
 80076f4:	f47f af4a 	bne.w	800758c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 80076f8:	e5ee      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076fa:	491e      	ldr	r1, [pc, #120]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80076fc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80076fe:	f001 0103 	and.w	r1, r1, #3
 8007702:	2903      	cmp	r1, #3
 8007704:	f43f ab4e 	beq.w	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007708:	2101      	movs	r1, #1
 800770a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800770e:	f7ff f97b 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
 8007712:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007714:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007718:	2d00      	cmp	r5, #0
 800771a:	f47f af50 	bne.w	80075be <HAL_RCCEx_PeriphCLKConfig+0xad2>
 800771e:	f7ff bad4 	b.w	8006cca <HAL_RCCEx_PeriphCLKConfig+0x1de>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007722:	4914      	ldr	r1, [pc, #80]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007724:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007726:	f001 0103 	and.w	r1, r1, #3
 800772a:	2903      	cmp	r1, #3
 800772c:	f43f ab11 	beq.w	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8007730:	2100      	movs	r1, #0
 8007732:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007736:	f7ff f967 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
 800773a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800773c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007740:	2d00      	cmp	r5, #0
 8007742:	f47f af28 	bne.w	8007596 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8007746:	f7ff ba2f 	b.w	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800774a:	490a      	ldr	r1, [pc, #40]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800774c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800774e:	f001 0103 	and.w	r1, r1, #3
 8007752:	2903      	cmp	r1, #3
 8007754:	f43f ab1b 	beq.w	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8007758:	2100      	movs	r1, #0
 800775a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800775e:	f7ff f953 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
 8007762:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007764:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007768:	2d00      	cmp	r5, #0
 800776a:	f47f af11 	bne.w	8007590 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800776e:	f7ff ba88 	b.w	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007772:	bf00      	nop
 8007774:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007778:	4966      	ldr	r1, [pc, #408]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800777a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800777c:	f001 0103 	and.w	r1, r1, #3
 8007780:	2903      	cmp	r1, #3
 8007782:	f43f aaf3 	beq.w	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8007786:	2100      	movs	r1, #0
 8007788:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800778c:	f7ff f93c 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
 8007790:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007792:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007796:	2d00      	cmp	r5, #0
 8007798:	f47f af00 	bne.w	800759c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800779c:	f7ff ba2d 	b.w	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077a0:	495c      	ldr	r1, [pc, #368]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 80077a2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80077a4:	f001 0103 	and.w	r1, r1, #3
 80077a8:	2903      	cmp	r1, #3
 80077aa:	f43f a9db 	beq.w	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80077ae:	2100      	movs	r1, #0
 80077b0:	f104 0008 	add.w	r0, r4, #8
 80077b4:	f7ff f8b6 	bl	8006924 <RCCEx_PLL2_Config.part.0>
 80077b8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80077ba:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80077be:	2d00      	cmp	r5, #0
 80077c0:	f43f ae69 	beq.w	8007496 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 80077c4:	462e      	mov	r6, r5
 80077c6:	f7ff b9cf 	b.w	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077ca:	4952      	ldr	r1, [pc, #328]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 80077cc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80077ce:	f001 0103 	and.w	r1, r1, #3
 80077d2:	2903      	cmp	r1, #3
 80077d4:	f43f a9c6 	beq.w	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80077d8:	2100      	movs	r1, #0
 80077da:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80077de:	f7ff f913 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
 80077e2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80077e4:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80077e8:	e652      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077ea:	494a      	ldr	r1, [pc, #296]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 80077ec:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80077ee:	f001 0103 	and.w	r1, r1, #3
 80077f2:	2903      	cmp	r1, #3
 80077f4:	f43f adfb 	beq.w	80073ee <HAL_RCCEx_PeriphCLKConfig+0x902>
 80077f8:	2102      	movs	r1, #2
 80077fa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80077fe:	f7ff f903 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
 8007802:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007804:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007808:	2e00      	cmp	r6, #0
 800780a:	f47f a99f 	bne.w	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x60>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800780e:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8007810:	f7ff b995 	b.w	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x52>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007814:	493f      	ldr	r1, [pc, #252]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 8007816:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007818:	f001 0103 	and.w	r1, r1, #3
 800781c:	2903      	cmp	r1, #3
 800781e:	d03a      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8007820:	2101      	movs	r1, #1
 8007822:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007826:	f7ff f8ef 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
 800782a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800782c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007830:	2d00      	cmp	r5, #0
 8007832:	f47f ab5f 	bne.w	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007836:	e6c5      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007838:	4936      	ldr	r1, [pc, #216]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800783a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800783c:	f001 0103 	and.w	r1, r1, #3
 8007840:	2903      	cmp	r1, #3
 8007842:	d024      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8007844:	2101      	movs	r1, #1
 8007846:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800784a:	f7ff f8dd 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
 800784e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007850:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007854:	2d00      	cmp	r5, #0
 8007856:	f47f ab28 	bne.w	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x3be>
 800785a:	e6c1      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800785c:	492d      	ldr	r1, [pc, #180]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800785e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007860:	f001 0103 	and.w	r1, r1, #3
 8007864:	2903      	cmp	r1, #3
 8007866:	f43f aafd 	beq.w	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800786a:	2101      	movs	r1, #1
 800786c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007870:	f7ff f8ca 	bl	8006a08 <RCCEx_PLL3_Config.part.0>
 8007874:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007876:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800787a:	2d00      	cmp	r5, #0
 800787c:	f47f aeb9 	bne.w	80075f2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
 8007880:	e5cd      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x932>
        ret = HAL_TIMEOUT;
 8007882:	2503      	movs	r5, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007884:	462e      	mov	r6, r5
 8007886:	e9d4 3200 	ldrd	r3, r2, [r4]
 800788a:	f7ff baaf 	b.w	8006dec <HAL_RCCEx_PeriphCLKConfig+0x300>
 800788e:	2601      	movs	r6, #1
 8007890:	4635      	mov	r5, r6
 8007892:	f7ff bb0b 	b.w	8006eac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007896:	2601      	movs	r6, #1
 8007898:	4635      	mov	r5, r6
 800789a:	f7ff bb2c 	b.w	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
        status = HAL_ERROR;
 800789e:	2601      	movs	r6, #1
 80078a0:	f7ff bbac 	b.w	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x510>
        status = HAL_ERROR;
 80078a4:	2601      	movs	r6, #1
 80078a6:	f7ff bbb7 	b.w	8007018 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078aa:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078ae:	e9d4 3200 	ldrd	r3, r2, [r4]
 80078b2:	f7ff bbb1 	b.w	8007018 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80078b6:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
        status = HAL_ERROR;
 80078ba:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078bc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80078c0:	f7ff bb9c 	b.w	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x510>
 80078c4:	2601      	movs	r6, #1
 80078c6:	4635      	mov	r5, r6
 80078c8:	f7ff ba8d 	b.w	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
        tickstart = HAL_GetTick();
 80078cc:	f7fc fa26 	bl	8003d1c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078d0:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8007914 <HAL_RCCEx_PeriphCLKConfig+0xe28>
        tickstart = HAL_GetTick();
 80078d4:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078d6:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078da:	e004      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xdfa>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078dc:	f7fc fa1e 	bl	8003d1c <HAL_GetTick>
 80078e0:	1bc0      	subs	r0, r0, r7
 80078e2:	4548      	cmp	r0, r9
 80078e4:	d810      	bhi.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xe1c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078e6:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80078ea:	079b      	lsls	r3, r3, #30
 80078ec:	d5f6      	bpl.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xdf0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078ee:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80078f2:	e529      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 80078f4:	4807      	ldr	r0, [pc, #28]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 80078f6:	4a08      	ldr	r2, [pc, #32]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0xe2c>)
 80078f8:	6901      	ldr	r1, [r0, #16]
 80078fa:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80078fe:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8007902:	430a      	orrs	r2, r1
 8007904:	6102      	str	r2, [r0, #16]
 8007906:	e52a      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x872>
        status = ret;
 8007908:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800790a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800790e:	4635      	mov	r5, r6
 8007910:	f7ff ba6c 	b.w	8006dec <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007914:	58024400 	.word	0x58024400
 8007918:	00ffffcf 	.word	0x00ffffcf

0800791c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800791c:	4a47      	ldr	r2, [pc, #284]	@ (8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 800791e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007920:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007922:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007924:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 8007926:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800792a:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800792e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8007930:	d05b      	beq.n	80079ea <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007932:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007936:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800793a:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800793e:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007942:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8007946:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800794c:	ee06 1a90 	vmov	s13, r1
 8007950:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8007954:	d003      	beq.n	800795e <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8007956:	2c02      	cmp	r4, #2
 8007958:	d06a      	beq.n	8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 800795a:	2c00      	cmp	r4, #0
 800795c:	d04a      	beq.n	80079f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800795e:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8007962:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8007966:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8007968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796c:	ee07 3a90 	vmov	s15, r3
 8007970:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800797c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007980:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007984:	4a2d      	ldr	r2, [pc, #180]	@ (8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 8007986:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800798a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800798c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007990:	ee07 3a10 	vmov	s14, r3
 8007994:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8007998:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800799a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800799e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80079a2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80079a6:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80079aa:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80079ac:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80079b0:	ee07 3a10 	vmov	s14, r3
 80079b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80079b8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80079bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80079c0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80079c4:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80079c8:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80079ca:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80079ce:	ee06 3a90 	vmov	s13, r3
 80079d2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80079d6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80079da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80079de:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80079e2:	ee17 3a90 	vmov	r3, s15
 80079e6:	6083      	str	r3, [r0, #8]
}
 80079e8:	4770      	bx	lr
 80079ea:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80079ec:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80079f0:	6083      	str	r3, [r0, #8]
}
 80079f2:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079f4:	6813      	ldr	r3, [r2, #0]
 80079f6:	069b      	lsls	r3, r3, #26
 80079f8:	d51d      	bpl.n	8007a36 <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079fa:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079fc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007a00:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a02:	4910      	ldr	r1, [pc, #64]	@ (8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8007a04:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a0c:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a0e:	ee07 3a90 	vmov	s15, r3
 8007a12:	ee06 1a10 	vmov	s12, r1
 8007a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a1a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007a1e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007a22:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8007a26:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8007a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a2e:	e7a9      	b.n	8007984 <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a30:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007a48 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8007a34:	e795      	b.n	8007962 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a36:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007a4c <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8007a3a:	e792      	b.n	8007962 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8007a3c:	58024400 	.word	0x58024400
 8007a40:	4a742400 	.word	0x4a742400
 8007a44:	03d09000 	.word	0x03d09000
 8007a48:	4bbebc20 	.word	0x4bbebc20
 8007a4c:	4c742400 	.word	0x4c742400

08007a50 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a50:	4a47      	ldr	r2, [pc, #284]	@ (8007b70 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 8007a52:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a54:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007a56:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007a58:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 8007a5a:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007a5e:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007a62:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 8007a64:	d05b      	beq.n	8007b1e <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007a66:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007a6a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a6e:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a72:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007a76:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8007a7a:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a80:	ee06 1a90 	vmov	s13, r1
 8007a84:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8007a88:	d003      	beq.n	8007a92 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8007a8a:	2c02      	cmp	r4, #2
 8007a8c:	d06a      	beq.n	8007b64 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 8007a8e:	2c00      	cmp	r4, #0
 8007a90:	d04a      	beq.n	8007b28 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a92:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8007b74 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8007a96:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8007a9a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa0:	ee07 3a90 	vmov	s15, r3
 8007aa4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007aac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ab0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007ab4:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007ab8:	4a2d      	ldr	r2, [pc, #180]	@ (8007b70 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 8007aba:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8007abe:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007ac0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007ac4:	ee07 3a10 	vmov	s14, r3
 8007ac8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8007acc:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007ace:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007ad2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007ad6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007ada:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007ade:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007ae0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007ae4:	ee07 3a10 	vmov	s14, r3
 8007ae8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007aec:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007af0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007af4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007af8:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007afc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007afe:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007b02:	ee06 3a90 	vmov	s13, r3
 8007b06:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007b0a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007b0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007b12:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8007b16:	ee17 3a90 	vmov	r3, s15
 8007b1a:	6083      	str	r3, [r0, #8]
}
 8007b1c:	4770      	bx	lr
 8007b1e:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007b20:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007b24:	6083      	str	r3, [r0, #8]
}
 8007b26:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b28:	6813      	ldr	r3, [r2, #0]
 8007b2a:	069b      	lsls	r3, r3, #26
 8007b2c:	d51d      	bpl.n	8007b6a <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b2e:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b30:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007b34:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b36:	4910      	ldr	r1, [pc, #64]	@ (8007b78 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8007b38:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b40:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b42:	ee07 3a90 	vmov	s15, r3
 8007b46:	ee06 1a10 	vmov	s12, r1
 8007b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b4e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007b52:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007b56:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8007b5a:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8007b5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b62:	e7a9      	b.n	8007ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b64:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007b7c <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8007b68:	e795      	b.n	8007a96 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b6a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007b80 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8007b6e:	e792      	b.n	8007a96 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8007b70:	58024400 	.word	0x58024400
 8007b74:	4a742400 	.word	0x4a742400
 8007b78:	03d09000 	.word	0x03d09000
 8007b7c:	4bbebc20 	.word	0x4bbebc20
 8007b80:	4c742400 	.word	0x4c742400

08007b84 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b84:	4a47      	ldr	r2, [pc, #284]	@ (8007ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 8007b86:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b88:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007b8a:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007b8c:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 8007b8e:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007b92:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007b96:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 8007b98:	d05b      	beq.n	8007c52 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007b9a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007b9e:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ba2:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ba6:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007baa:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8007bae:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007bb4:	ee06 1a90 	vmov	s13, r1
 8007bb8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8007bbc:	d06f      	beq.n	8007c9e <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 8007bbe:	2c02      	cmp	r4, #2
 8007bc0:	d06a      	beq.n	8007c98 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
 8007bc2:	2c00      	cmp	r4, #0
 8007bc4:	d04a      	beq.n	8007c5c <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bc6:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8007ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8007bca:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8007bce:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bd4:	ee07 3a90 	vmov	s15, r3
 8007bd8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007be8:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007bec:	4a2d      	ldr	r2, [pc, #180]	@ (8007ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 8007bee:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8007bf2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007bf4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007bf8:	ee07 3a10 	vmov	s14, r3
 8007bfc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8007c00:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007c02:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007c06:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007c0a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007c0e:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007c12:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007c14:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007c18:	ee07 3a10 	vmov	s14, r3
 8007c1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007c20:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007c24:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007c28:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007c2c:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007c30:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007c32:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007c36:	ee06 3a90 	vmov	s13, r3
 8007c3a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007c3e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007c42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007c46:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8007c4a:	ee17 3a90 	vmov	r3, s15
 8007c4e:	6083      	str	r3, [r0, #8]
}
 8007c50:	4770      	bx	lr
 8007c52:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007c54:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007c58:	6083      	str	r3, [r0, #8]
}
 8007c5a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c5c:	6813      	ldr	r3, [r2, #0]
 8007c5e:	069b      	lsls	r3, r3, #26
 8007c60:	d5b1      	bpl.n	8007bc6 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c62:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c64:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007c68:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c6a:	4910      	ldr	r1, [pc, #64]	@ (8007cac <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8007c6c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c74:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c76:	ee07 3a90 	vmov	s15, r3
 8007c7a:	ee06 1a10 	vmov	s12, r1
 8007c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c82:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007c86:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007c8a:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8007c8e:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8007c92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007c96:	e7a9      	b.n	8007bec <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c98:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8007c9c:	e795      	b.n	8007bca <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c9e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8007ca2:	e792      	b.n	8007bca <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8007ca4:	58024400 	.word	0x58024400
 8007ca8:	4c742400 	.word	0x4c742400
 8007cac:	03d09000 	.word	0x03d09000
 8007cb0:	4bbebc20 	.word	0x4bbebc20
 8007cb4:	4a742400 	.word	0x4a742400

08007cb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007cb8:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8007cbc:	430b      	orrs	r3, r1
{
 8007cbe:	b500      	push	{lr}
 8007cc0:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007cc2:	d071      	beq.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007cc4:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8007cc8:	430b      	orrs	r3, r1
 8007cca:	d033      	beq.n	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8007ccc:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 8007cd0:	430b      	orrs	r3, r1
 8007cd2:	f000 80c6 	beq.w	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007cd6:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 8007cda:	430b      	orrs	r3, r1
 8007cdc:	d078      	beq.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007cde:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8007ce2:	430b      	orrs	r3, r1
 8007ce4:	f000 80d3 	beq.w	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007ce8:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 8007cec:	430b      	orrs	r3, r1
 8007cee:	f000 812c 	beq.w	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007cf2:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8007cf6:	430b      	orrs	r3, r1
 8007cf8:	f000 8140 	beq.w	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007cfc:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8007d00:	430b      	orrs	r3, r1
 8007d02:	f000 8103 	beq.w	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007d06:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 8007d0a:	4308      	orrs	r0, r1
 8007d0c:	d137      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007d0e:	4b96      	ldr	r3, [pc, #600]	@ (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8007d16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d1a:	d07f      	beq.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 8007d1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d20:	f000 8167 	beq.w	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8007d24:	bb5b      	cbnz	r3, 8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007d26:	4b90      	ldr	r3, [pc, #576]	@ (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007d28:	6818      	ldr	r0, [r3, #0]
 8007d2a:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8007d2e:	d038      	beq.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          frequency = HSE_VALUE;
 8007d30:	488e      	ldr	r0, [pc, #568]	@ (8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007d32:	e036      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8007d34:	4a8c      	ldr	r2, [pc, #560]	@ (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007d36:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007d38:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 8007d3c:	2b80      	cmp	r3, #128	@ 0x80
 8007d3e:	f000 808b 	beq.w	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8007d42:	d920      	bls.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8007d44:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d46:	d02b      	beq.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007d48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d4c:	d117      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d4e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d50:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d56:	0749      	lsls	r1, r1, #29
 8007d58:	d502      	bpl.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 80c9 	beq.w	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d60:	4a81      	ldr	r2, [pc, #516]	@ (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007d62:	6812      	ldr	r2, [r2, #0]
 8007d64:	05d0      	lsls	r0, r2, #23
 8007d66:	d503      	bpl.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007d68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d6c:	f000 80cc 	beq.w	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d70:	4a7d      	ldr	r2, [pc, #500]	@ (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007d72:	6812      	ldr	r2, [r2, #0]
 8007d74:	0391      	lsls	r1, r2, #14
 8007d76:	d502      	bpl.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8007d78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d7c:	d0d8      	beq.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = 0;
 8007d7e:	2000      	movs	r0, #0
}
 8007d80:	b005      	add	sp, #20
 8007d82:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d03f      	beq.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007d8a:	2b40      	cmp	r3, #64	@ 0x40
 8007d8c:	d1f7      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d8e:	6810      	ldr	r0, [r2, #0]
 8007d90:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8007d94:	d005      	beq.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d96:	a801      	add	r0, sp, #4
 8007d98:	f7ff fdc0 	bl	800791c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d9c:	9801      	ldr	r0, [sp, #4]
 8007d9e:	e000      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007da0:	4873      	ldr	r0, [pc, #460]	@ (8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
}
 8007da2:	b005      	add	sp, #20
 8007da4:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007da8:	4b6f      	ldr	r3, [pc, #444]	@ (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dac:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8007db0:	2b04      	cmp	r3, #4
 8007db2:	d8e4      	bhi.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8007db4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8007db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dba:	bf00      	nop
 8007dbc:	08007e1d 	.word	0x08007e1d
 8007dc0:	08007e29 	.word	0x08007e29
 8007dc4:	08007e39 	.word	0x08007e39
 8007dc8:	08007da1 	.word	0x08007da1
 8007dcc:	08007e35 	.word	0x08007e35
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007dd0:	4a65      	ldr	r2, [pc, #404]	@ (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007dd2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007dd4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 8007dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ddc:	d03c      	beq.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8007dde:	d935      	bls.n	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007de0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007de4:	d0dc      	beq.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007de6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007dea:	d1c8      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007dec:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007dee:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007df0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007df4:	0752      	lsls	r2, r2, #29
 8007df6:	d5b3      	bpl.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1b1      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dfc:	4b5a      	ldr	r3, [pc, #360]	@ (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007dfe:	485d      	ldr	r0, [pc, #372]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007e06:	40d8      	lsrs	r0, r3
 8007e08:	e7cb      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e0a:	6810      	ldr	r0, [r2, #0]
 8007e0c:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8007e10:	d0c7      	beq.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e12:	a801      	add	r0, sp, #4
 8007e14:	f7ff feb6 	bl	8007b84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e18:	9802      	ldr	r0, [sp, #8]
 8007e1a:	e7c2      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e1c:	4b52      	ldr	r3, [pc, #328]	@ (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007e1e:	6818      	ldr	r0, [r3, #0]
 8007e20:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8007e24:	d0bd      	beq.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8007e26:	e7f4      	b.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e28:	4b4f      	ldr	r3, [pc, #316]	@ (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007e2a:	6818      	ldr	r0, [r3, #0]
 8007e2c:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8007e30:	d0b7      	beq.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8007e32:	e7b0      	b.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e34:	4a4c      	ldr	r2, [pc, #304]	@ (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007e36:	e78a      	b.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e38:	4b4b      	ldr	r3, [pc, #300]	@ (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007e3a:	6818      	ldr	r0, [r3, #0]
 8007e3c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8007e40:	d0af      	beq.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e42:	a801      	add	r0, sp, #4
 8007e44:	f7ff fe04 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e48:	9801      	ldr	r0, [sp, #4]
 8007e4a:	e7aa      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    switch (srcclk)
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d0dc      	beq.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e54:	d09b      	beq.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8007e56:	e792      	b.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e58:	6810      	ldr	r0, [r2, #0]
 8007e5a:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8007e5e:	d0a0      	beq.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8007e60:	e7ef      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8007e62:	4a41      	ldr	r2, [pc, #260]	@ (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007e64:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007e66:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
    switch (saiclocksource)
 8007e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e6e:	d0f3      	beq.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8007e70:	d805      	bhi.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d0c9      	beq.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007e76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e7a:	d088      	beq.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8007e7c:	e77f      	b.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8007e7e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e82:	d08d      	beq.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e88:	f43f af61 	beq.w	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 8007e8c:	e777      	b.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007e8e:	4a36      	ldr	r2, [pc, #216]	@ (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007e90:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007e92:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 8007e96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e9a:	d025      	beq.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8007e9c:	d80f      	bhi.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8007e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ea2:	d048      	beq.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 8007ea4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ea8:	d116      	bne.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007eaa:	6810      	ldr	r0, [r2, #0]
 8007eac:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8007eb0:	f43f af77 	beq.w	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eb4:	a801      	add	r0, sp, #4
 8007eb6:	f7ff fdcb 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007eba:	9802      	ldr	r0, [sp, #8]
 8007ebc:	e771      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    switch (srcclk)
 8007ebe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ec2:	d01c      	beq.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 8007ec4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ec8:	f47f af59 	bne.w	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ecc:	6810      	ldr	r0, [r2, #0]
 8007ece:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8007ed2:	f43f af66 	beq.w	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8007ed6:	e72b      	b.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    switch (srcclk)
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f47f af50 	bne.w	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
}
 8007ede:	b005      	add	sp, #20
 8007ee0:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8007ee4:	f7fe bcd6 	b.w	8006894 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ee8:	6810      	ldr	r0, [r2, #0]
 8007eea:	f010 0004 	ands.w	r0, r0, #4
 8007eee:	f43f af58 	beq.w	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ef2:	6813      	ldr	r3, [r2, #0]
 8007ef4:	481f      	ldr	r0, [pc, #124]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007ef6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007efa:	40d8      	lsrs	r0, r3
 8007efc:	e751      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007efe:	6810      	ldr	r0, [r2, #0]
 8007f00:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8007f04:	f43f af4d 	beq.w	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          frequency = CSI_VALUE;
 8007f08:	481b      	ldr	r0, [pc, #108]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007f0a:	e74a      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007f0c:	4a16      	ldr	r2, [pc, #88]	@ (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007f0e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007f10:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 8007f14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f18:	d072      	beq.n	8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 8007f1a:	d83e      	bhi.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 8007f1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f20:	d067      	beq.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8007f22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f26:	d14b      	bne.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f28:	4b0f      	ldr	r3, [pc, #60]	@ (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007f2a:	6818      	ldr	r0, [r3, #0]
 8007f2c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8007f30:	f43f af37 	beq.w	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8007f34:	e7be      	b.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f36:	6810      	ldr	r0, [r2, #0]
 8007f38:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8007f3c:	f43f af31 	beq.w	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f40:	a801      	add	r0, sp, #4
 8007f42:	f7ff fceb 	bl	800791c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f46:	9802      	ldr	r0, [sp, #8]
 8007f48:	e72b      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007f4a:	4a07      	ldr	r2, [pc, #28]	@ (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007f4c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007f4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 8007f52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f56:	d042      	beq.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8007f58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f5c:	f43f af46 	beq.w	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f47f af0c 	bne.w	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8007f66:	e712      	b.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8007f68:	58024400 	.word	0x58024400
 8007f6c:	017d7840 	.word	0x017d7840
 8007f70:	00bb8000 	.word	0x00bb8000
 8007f74:	03d09000 	.word	0x03d09000
 8007f78:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007f7c:	4b23      	ldr	r3, [pc, #140]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8007f7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 8007f80:	03d2      	lsls	r2, r2, #15
 8007f82:	f57f af4c 	bpl.w	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f86:	6818      	ldr	r0, [r3, #0]
 8007f88:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8007f8c:	f43f af09 	beq.w	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f90:	a801      	add	r0, sp, #4
 8007f92:	f7ff fcc3 	bl	800791c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007f96:	9803      	ldr	r0, [sp, #12]
 8007f98:	e703      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    switch (srcclk)
 8007f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f9e:	f43f aec2 	beq.w	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8007fa2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007fa6:	f43f aefb 	beq.w	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fae:	f47f aee6 	bne.w	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007fb2:	4b16      	ldr	r3, [pc, #88]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8007fb4:	6818      	ldr	r0, [r3, #0]
 8007fb6:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8007fba:	f43f aef2 	beq.w	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8007fbe:	e7a3      	b.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
    switch (srcclk)
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f47f aedc 	bne.w	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007fc6:	f7fe fc25 	bl	8006814 <HAL_RCC_GetHCLKFreq>
 8007fca:	4b10      	ldr	r3, [pc, #64]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8007fcc:	4a10      	ldr	r2, [pc, #64]	@ (8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007fd4:	5cd3      	ldrb	r3, [r2, r3]
 8007fd6:	f003 031f 	and.w	r3, r3, #31
 8007fda:	40d8      	lsrs	r0, r3
        break;
 8007fdc:	e6e1      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fde:	6810      	ldr	r0, [r2, #0]
 8007fe0:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8007fe4:	f43f aedd 	beq.w	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fe8:	a801      	add	r0, sp, #4
 8007fea:	f7ff fd31 	bl	8007a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007fee:	9803      	ldr	r0, [sp, #12]
 8007ff0:	e6d7      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ff2:	4b06      	ldr	r3, [pc, #24]	@ (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8007ff4:	6818      	ldr	r0, [r3, #0]
 8007ff6:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8007ffa:	f43f aed2 	beq.w	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8007ffe:	e79f      	b.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008000:	6810      	ldr	r0, [r2, #0]
 8008002:	f010 0004 	ands.w	r0, r0, #4
 8008006:	f43f aecc 	beq.w	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800800a:	e6f7      	b.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800800c:	58024400 	.word	0x58024400
 8008010:	0800d358 	.word	0x0800d358

08008014 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008014:	6803      	ldr	r3, [r0, #0]
{
 8008016:	b530      	push	{r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008018:	689c      	ldr	r4, [r3, #8]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800801a:	6918      	ldr	r0, [r3, #16]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800801c:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800801e:	f3c0 000e 	ubfx	r0, r0, #0, #15

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008022:	f3c3 2e06 	ubfx	lr, r3, #8, #7
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8008026:	f003 0c7f 	and.w	ip, r3, #127	@ 0x7f
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800802a:	f3c3 4506 	ubfx	r5, r3, #16, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800802e:	e9c1 4001 	strd	r4, r0, [r1, #4]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008032:	f3c3 4405 	ubfx	r4, r3, #16, #6
 8008036:	2000      	movs	r0, #0
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008038:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800803c:	f364 0007 	bfi	r0, r4, #0, #8
 8008040:	f36e 200f 	bfi	r0, lr, #8, #8
 8008044:	f36c 4017 	bfi	r0, ip, #16, #8
 8008048:	f363 601f 	bfi	r0, r3, #24, #8
 800804c:	6008      	str	r0, [r1, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800804e:	b9da      	cbnz	r2, 8008088 <HAL_RTC_GetTime+0x74>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008050:	ea4f 131e 	mov.w	r3, lr, lsr #4
  return (tmp + (Value & 0x0FU));
 8008054:	f00e 0e0f 	and.w	lr, lr, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008058:	0924      	lsrs	r4, r4, #4
  return (tmp + (Value & 0x0FU));
 800805a:	f005 050f 	and.w	r5, r5, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800805e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008062:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  return (tmp + (Value & 0x0FU));
 8008066:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800806a:	ea4f 131c 	mov.w	r3, ip, lsr #4
  return (tmp + (Value & 0x0FU));
 800806e:	f00c 0c0f 	and.w	ip, ip, #15
 8008072:	eb05 0544 	add.w	r5, r5, r4, lsl #1
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008076:	f881 e001 	strb.w	lr, [r1, #1]
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800807a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800807e:	700d      	strb	r5, [r1, #0]
  return (tmp + (Value & 0x0FU));
 8008080:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008084:	f881 c002 	strb.w	ip, [r1, #2]
}
 8008088:	2000      	movs	r0, #0
 800808a:	bd30      	pop	{r4, r5, pc}

0800808c <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800808c:	6803      	ldr	r3, [r0, #0]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800808e:	2000      	movs	r0, #0
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008090:	685b      	ldr	r3, [r3, #4]
{
 8008092:	b510      	push	{r4, lr}
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008094:	f3c3 3e42 	ubfx	lr, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008098:	f3c3 4c07 	ubfx	ip, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800809c:	f3c3 2407 	ubfx	r4, r3, #8, #8
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80080a0:	f36e 0007 	bfi	r0, lr, #0, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80080a4:	f3c3 2e04 	ubfx	lr, r3, #8, #5
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80080a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80080ac:	f36e 200f 	bfi	r0, lr, #8, #8
 80080b0:	f363 4017 	bfi	r0, r3, #16, #8
 80080b4:	f36c 601f 	bfi	r0, ip, #24, #8
 80080b8:	6008      	str	r0, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80080ba:	b9d2      	cbnz	r2, 80080f2 <HAL_RTC_GetDate+0x66>
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80080bc:	091a      	lsrs	r2, r3, #4
  return (tmp + (Value & 0x0FU));
 80080be:	f003 030f 	and.w	r3, r3, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80080c2:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  return (tmp + (Value & 0x0FU));
 80080c6:	f004 040f 	and.w	r4, r4, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80080ca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80080ce:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  return (tmp + (Value & 0x0FU));
 80080d2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80080d6:	eb04 044e 	add.w	r4, r4, lr, lsl #1
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80080da:	708b      	strb	r3, [r1, #2]
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80080dc:	ea4f 131c 	mov.w	r3, ip, lsr #4
  return (tmp + (Value & 0x0FU));
 80080e0:	f00c 0c0f 	and.w	ip, ip, #15
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80080e4:	704c      	strb	r4, [r1, #1]
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80080e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & 0x0FU));
 80080ea:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80080ee:	f881 c003 	strb.w	ip, [r1, #3]
}
 80080f2:	2000      	movs	r0, #0
 80080f4:	bd10      	pop	{r4, pc}
 80080f6:	bf00      	nop

080080f8 <RTC_ExitInitMode>:
{
 80080f8:	b538      	push	{r3, r4, r5, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80080fa:	4b20      	ldr	r3, [pc, #128]	@ (800817c <RTC_ExitInitMode+0x84>)
{
 80080fc:	4604      	mov	r4, r0
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80080fe:	6801      	ldr	r1, [r0, #0]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008100:	68da      	ldr	r2, [r3, #12]
 8008102:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008106:	60da      	str	r2, [r3, #12]
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008108:	699a      	ldr	r2, [r3, #24]
 800810a:	0690      	lsls	r0, r2, #26
 800810c:	d411      	bmi.n	8008132 <RTC_ExitInitMode+0x3a>
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800810e:	4b1c      	ldr	r3, [pc, #112]	@ (8008180 <RTC_ExitInitMode+0x88>)
 8008110:	60cb      	str	r3, [r1, #12]
  tickstart = HAL_GetTick();
 8008112:	f7fb fe03 	bl	8003d1c <HAL_GetTick>
 8008116:	4605      	mov	r5, r0
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8008118:	e005      	b.n	8008126 <RTC_ExitInitMode+0x2e>
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800811a:	f7fb fdff 	bl	8003d1c <HAL_GetTick>
 800811e:	1b43      	subs	r3, r0, r5
 8008120:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008124:	d825      	bhi.n	8008172 <RTC_ExitInitMode+0x7a>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	069a      	lsls	r2, r3, #26
 800812c:	d5f5      	bpl.n	800811a <RTC_ExitInitMode+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800812e:	2000      	movs	r0, #0
}
 8008130:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008132:	699a      	ldr	r2, [r3, #24]
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8008134:	4812      	ldr	r0, [pc, #72]	@ (8008180 <RTC_ExitInitMode+0x88>)
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008136:	f022 0220 	bic.w	r2, r2, #32
 800813a:	619a      	str	r2, [r3, #24]
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800813c:	60c8      	str	r0, [r1, #12]
  tickstart = HAL_GetTick();
 800813e:	f7fb fded 	bl	8003d1c <HAL_GetTick>
 8008142:	4605      	mov	r5, r0
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8008144:	e005      	b.n	8008152 <RTC_ExitInitMode+0x5a>
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008146:	f7fb fde9 	bl	8003d1c <HAL_GetTick>
 800814a:	1b43      	subs	r3, r0, r5
 800814c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008150:	d80a      	bhi.n	8008168 <RTC_ExitInitMode+0x70>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8008152:	6823      	ldr	r3, [r4, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	069b      	lsls	r3, r3, #26
 8008158:	d5f5      	bpl.n	8008146 <RTC_ExitInitMode+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 800815a:	2000      	movs	r0, #0
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800815c:	4a07      	ldr	r2, [pc, #28]	@ (800817c <RTC_ExitInitMode+0x84>)
 800815e:	6993      	ldr	r3, [r2, #24]
 8008160:	f043 0320 	orr.w	r3, r3, #32
 8008164:	6193      	str	r3, [r2, #24]
}
 8008166:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008168:	2303      	movs	r3, #3
      status = HAL_TIMEOUT;
 800816a:	4618      	mov	r0, r3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800816c:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8008170:	e7f4      	b.n	800815c <RTC_ExitInitMode+0x64>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008172:	2303      	movs	r3, #3
      status = HAL_TIMEOUT;
 8008174:	4618      	mov	r0, r3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008176:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
}
 800817a:	bd38      	pop	{r3, r4, r5, pc}
 800817c:	58004000 	.word	0x58004000
 8008180:	0001005f 	.word	0x0001005f

08008184 <HAL_RTC_Init>:
  if(hrtc != NULL)
 8008184:	2800      	cmp	r0, #0
 8008186:	d046      	beq.n	8008216 <HAL_RTC_Init+0x92>
{
 8008188:	b570      	push	{r4, r5, r6, lr}
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800818a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800818e:	4604      	mov	r4, r0
 8008190:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008194:	2b00      	cmp	r3, #0
 8008196:	d039      	beq.n	800820c <HAL_RTC_Init+0x88>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008198:	2302      	movs	r3, #2
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800819a:	6822      	ldr	r2, [r4, #0]
    hrtc->State = HAL_RTC_STATE_BUSY;
 800819c:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80081a0:	68d3      	ldr	r3, [r2, #12]
 80081a2:	06db      	lsls	r3, r3, #27
 80081a4:	d504      	bpl.n	80081b0 <HAL_RTC_Init+0x2c>
      hrtc->State = HAL_RTC_STATE_READY;
 80081a6:	2301      	movs	r3, #1
 80081a8:	2000      	movs	r0, #0
 80081aa:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
}
 80081ae:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80081b0:	21ca      	movs	r1, #202	@ 0xca
 80081b2:	2353      	movs	r3, #83	@ 0x53
 80081b4:	6251      	str	r1, [r2, #36]	@ 0x24
 80081b6:	6253      	str	r3, [r2, #36]	@ 0x24
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80081b8:	68d5      	ldr	r5, [r2, #12]
 80081ba:	f015 0540 	ands.w	r5, r5, #64	@ 0x40
 80081be:	d02c      	beq.n	800821a <HAL_RTC_Init+0x96>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80081c0:	6990      	ldr	r0, [r2, #24]
 80081c2:	4929      	ldr	r1, [pc, #164]	@ (8008268 <HAL_RTC_Init+0xe4>)
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80081c4:	6863      	ldr	r3, [r4, #4]
 80081c6:	6925      	ldr	r5, [r4, #16]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80081c8:	4001      	ands	r1, r0
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80081ca:	432b      	orrs	r3, r5
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80081cc:	6191      	str	r1, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80081ce:	69a1      	ldr	r1, [r4, #24]
 80081d0:	6990      	ldr	r0, [r2, #24]
 80081d2:	430b      	orrs	r3, r1
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80081d4:	68a1      	ldr	r1, [r4, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80081d6:	4303      	orrs	r3, r0
        status = RTC_ExitInitMode(hrtc);
 80081d8:	4620      	mov	r0, r4
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80081da:	6193      	str	r3, [r2, #24]
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80081dc:	68e3      	ldr	r3, [r4, #12]
 80081de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80081e2:	6113      	str	r3, [r2, #16]
        status = RTC_ExitInitMode(hrtc);
 80081e4:	f7ff ff88 	bl	80080f8 <RTC_ExitInitMode>
      if(status == HAL_OK)
 80081e8:	2800      	cmp	r0, #0
 80081ea:	d133      	bne.n	8008254 <HAL_RTC_Init+0xd0>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80081ec:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80081ee:	6960      	ldr	r0, [r4, #20]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80081f0:	6991      	ldr	r1, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80081f2:	e9d4 5307 	ldrd	r5, r3, [r4, #28]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80081f6:	f021 4160 	bic.w	r1, r1, #3758096384	@ 0xe0000000
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80081fa:	432b      	orrs	r3, r5
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80081fc:	6191      	str	r1, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081fe:	21ff      	movs	r1, #255	@ 0xff
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008200:	4303      	orrs	r3, r0
 8008202:	6990      	ldr	r0, [r2, #24]
 8008204:	4303      	orrs	r3, r0
 8008206:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008208:	6251      	str	r1, [r2, #36]	@ 0x24
    if (status == HAL_OK)
 800820a:	e7cc      	b.n	80081a6 <HAL_RTC_Init+0x22>
      hrtc->Lock = HAL_UNLOCKED;
 800820c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
      HAL_RTC_MspInit(hrtc);
 8008210:	f7fb fc22 	bl	8003a58 <HAL_RTC_MspInit>
 8008214:	e7c0      	b.n	8008198 <HAL_RTC_Init+0x14>
  HAL_StatusTypeDef status = HAL_ERROR;
 8008216:	2001      	movs	r0, #1
}
 8008218:	4770      	bx	lr
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800821a:	68d3      	ldr	r3, [r2, #12]
 800821c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008220:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8008222:	f7fb fd7b 	bl	8003d1c <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 8008226:	4629      	mov	r1, r5
    tickstart = HAL_GetTick();
 8008228:	4606      	mov	r6, r0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800822a:	e008      	b.n	800823e <HAL_RTC_Init+0xba>
 800822c:	2903      	cmp	r1, #3
 800822e:	d00d      	beq.n	800824c <HAL_RTC_Init+0xc8>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008230:	f7fb fd74 	bl	8003d1c <HAL_GetTick>
 8008234:	1b80      	subs	r0, r0, r6
 8008236:	4629      	mov	r1, r5
 8008238:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800823c:	d80e      	bhi.n	800825c <HAL_RTC_Init+0xd8>
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800823e:	6822      	ldr	r2, [r4, #0]
 8008240:	68d5      	ldr	r5, [r2, #12]
 8008242:	f015 0540 	ands.w	r5, r5, #64	@ 0x40
 8008246:	d0f1      	beq.n	800822c <HAL_RTC_Init+0xa8>
      if (status == HAL_OK)
 8008248:	2900      	cmp	r1, #0
 800824a:	d0b9      	beq.n	80081c0 <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800824c:	23ff      	movs	r3, #255	@ 0xff
 800824e:	2003      	movs	r0, #3
 8008250:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8008252:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	22ff      	movs	r2, #255	@ 0xff
 8008258:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800825a:	bd70      	pop	{r4, r5, r6, pc}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800825c:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 800825e:	4619      	mov	r1, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008260:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
 8008264:	e7eb      	b.n	800823e <HAL_RTC_Init+0xba>
 8008266:	bf00      	nop
 8008268:	fb8fffbf 	.word	0xfb8fffbf

0800826c <HAL_RTC_SetTime>:
{
 800826c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hrtc);
 8008270:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8008274:	2b01      	cmp	r3, #1
 8008276:	d065      	beq.n	8008344 <HAL_RTC_SetTime+0xd8>
 8008278:	2301      	movs	r3, #1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800827a:	6805      	ldr	r5, [r0, #0]
 800827c:	4681      	mov	r9, r0
 800827e:	460f      	mov	r7, r1
  __HAL_LOCK(hrtc);
 8008280:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008284:	2302      	movs	r3, #2
 8008286:	4616      	mov	r6, r2
 8008288:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800828c:	23ca      	movs	r3, #202	@ 0xca
 800828e:	626b      	str	r3, [r5, #36]	@ 0x24
 8008290:	2353      	movs	r3, #83	@ 0x53
 8008292:	626b      	str	r3, [r5, #36]	@ 0x24
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8008294:	68ec      	ldr	r4, [r5, #12]
 8008296:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 800829a:	d030      	beq.n	80082fe <HAL_RTC_SetTime+0x92>
    if(Format == RTC_FORMAT_BIN)
 800829c:	2e00      	cmp	r6, #0
 800829e:	d154      	bne.n	800834a <HAL_RTC_SetTime+0xde>
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80082a0:	69a8      	ldr	r0, [r5, #24]
 80082a2:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 80082a6:	d07d      	beq.n	80083a4 <HAL_RTC_SetTime+0x138>
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80082a8:	78f8      	ldrb	r0, [r7, #3]
 80082aa:	0580      	lsls	r0, r0, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80082ac:	783b      	ldrb	r3, [r7, #0]
  while (bcdlow >= 10U)
 80082ae:	2b09      	cmp	r3, #9
 80082b0:	d908      	bls.n	80082c4 <HAL_RTC_SetTime+0x58>
  uint32_t bcdhigh = 0U;
 80082b2:	2200      	movs	r2, #0
    bcdlow -= 10U;
 80082b4:	3b0a      	subs	r3, #10
    bcdhigh++;
 80082b6:	3201      	adds	r2, #1
    bcdlow -= 10U;
 80082b8:	b2db      	uxtb	r3, r3
  while (bcdlow >= 10U)
 80082ba:	2b09      	cmp	r3, #9
 80082bc:	d8fa      	bhi.n	80082b4 <HAL_RTC_SetTime+0x48>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80082be:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80082c2:	b2db      	uxtb	r3, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80082c4:	787a      	ldrb	r2, [r7, #1]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80082c6:	041b      	lsls	r3, r3, #16
  while (bcdlow >= 10U)
 80082c8:	2a09      	cmp	r2, #9
 80082ca:	d908      	bls.n	80082de <HAL_RTC_SetTime+0x72>
  uint32_t bcdhigh = 0U;
 80082cc:	2100      	movs	r1, #0
    bcdlow -= 10U;
 80082ce:	3a0a      	subs	r2, #10
    bcdhigh++;
 80082d0:	3101      	adds	r1, #1
    bcdlow -= 10U;
 80082d2:	b2d2      	uxtb	r2, r2
  while (bcdlow >= 10U)
 80082d4:	2a09      	cmp	r2, #9
 80082d6:	d8fa      	bhi.n	80082ce <HAL_RTC_SetTime+0x62>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80082d8:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80082dc:	b2d2      	uxtb	r2, r2
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80082de:	78b9      	ldrb	r1, [r7, #2]
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80082e0:	0212      	lsls	r2, r2, #8
  while (bcdlow >= 10U)
 80082e2:	2909      	cmp	r1, #9
 80082e4:	d907      	bls.n	80082f6 <HAL_RTC_SetTime+0x8a>
    bcdlow -= 10U;
 80082e6:	390a      	subs	r1, #10
    bcdhigh++;
 80082e8:	3601      	adds	r6, #1
    bcdlow -= 10U;
 80082ea:	b2c9      	uxtb	r1, r1
  while (bcdlow >= 10U)
 80082ec:	2909      	cmp	r1, #9
 80082ee:	d8fa      	bhi.n	80082e6 <HAL_RTC_SetTime+0x7a>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80082f0:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 80082f4:	b2c9      	uxtb	r1, r1
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80082f6:	4303      	orrs	r3, r0
 80082f8:	4313      	orrs	r3, r2
 80082fa:	430b      	orrs	r3, r1
 80082fc:	e033      	b.n	8008366 <HAL_RTC_SetTime+0xfa>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80082fe:	68eb      	ldr	r3, [r5, #12]
 8008300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008304:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8008306:	f7fb fd09 	bl	8003d1c <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 800830a:	4622      	mov	r2, r4
    tickstart = HAL_GetTick();
 800830c:	4680      	mov	r8, r0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800830e:	e009      	b.n	8008324 <HAL_RTC_SetTime+0xb8>
 8008310:	2a03      	cmp	r2, #3
 8008312:	d00f      	beq.n	8008334 <HAL_RTC_SetTime+0xc8>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008314:	f7fb fd02 	bl	8003d1c <HAL_GetTick>
 8008318:	eba0 0308 	sub.w	r3, r0, r8
 800831c:	4622      	mov	r2, r4
 800831e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008322:	d83a      	bhi.n	800839a <HAL_RTC_SetTime+0x12e>
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008324:	f8d9 5000 	ldr.w	r5, [r9]
 8008328:	68ec      	ldr	r4, [r5, #12]
 800832a:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 800832e:	d0ef      	beq.n	8008310 <HAL_RTC_SetTime+0xa4>
  if (status == HAL_OK)
 8008330:	2a00      	cmp	r2, #0
 8008332:	d0b3      	beq.n	800829c <HAL_RTC_SetTime+0x30>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008334:	23ff      	movs	r3, #255	@ 0xff
 8008336:	2003      	movs	r0, #3
 8008338:	626b      	str	r3, [r5, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 800833a:	2300      	movs	r3, #0
 800833c:	f889 3024 	strb.w	r3, [r9, #36]	@ 0x24
}
 8008340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hrtc);
 8008344:	2002      	movs	r0, #2
}
 8008346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800834a:	69aa      	ldr	r2, [r5, #24]
 800834c:	f012 0240 	ands.w	r2, r2, #64	@ 0x40
 8008350:	d02a      	beq.n	80083a8 <HAL_RTC_SetTime+0x13c>
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008352:	78fa      	ldrb	r2, [r7, #3]
 8008354:	0592      	lsls	r2, r2, #22
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008356:	787b      	ldrb	r3, [r7, #1]
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008358:	7839      	ldrb	r1, [r7, #0]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800835a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800835c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008360:	78b9      	ldrb	r1, [r7, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008362:	430b      	orrs	r3, r1
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008364:	4313      	orrs	r3, r2
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008366:	4a11      	ldr	r2, [pc, #68]	@ (80083ac <HAL_RTC_SetTime+0x140>)
    status = RTC_ExitInitMode(hrtc);
 8008368:	4648      	mov	r0, r9
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800836a:	401a      	ands	r2, r3
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800836c:	e9d7 3103 	ldrd	r3, r1, [r7, #12]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008370:	602a      	str	r2, [r5, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008372:	69aa      	ldr	r2, [r5, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008374:	430b      	orrs	r3, r1
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008376:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800837a:	61aa      	str	r2, [r5, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800837c:	69aa      	ldr	r2, [r5, #24]
 800837e:	4313      	orrs	r3, r2
 8008380:	61ab      	str	r3, [r5, #24]
    status = RTC_ExitInitMode(hrtc);
 8008382:	f7ff feb9 	bl	80080f8 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008386:	f8d9 3000 	ldr.w	r3, [r9]
 800838a:	22ff      	movs	r2, #255	@ 0xff
 800838c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800838e:	2800      	cmp	r0, #0
 8008390:	d1d3      	bne.n	800833a <HAL_RTC_SetTime+0xce>
    hrtc->State = HAL_RTC_STATE_READY;
 8008392:	2301      	movs	r3, #1
 8008394:	f889 3025 	strb.w	r3, [r9, #37]	@ 0x25
 8008398:	e7cf      	b.n	800833a <HAL_RTC_SetTime+0xce>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800839a:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 800839c:	461a      	mov	r2, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800839e:	f889 3025 	strb.w	r3, [r9, #37]	@ 0x25
 80083a2:	e7bf      	b.n	8008324 <HAL_RTC_SetTime+0xb8>
        sTime->TimeFormat = 0x00U;
 80083a4:	70fe      	strb	r6, [r7, #3]
 80083a6:	e781      	b.n	80082ac <HAL_RTC_SetTime+0x40>
        sTime->TimeFormat = 0x00U;
 80083a8:	70fa      	strb	r2, [r7, #3]
 80083aa:	e7d4      	b.n	8008356 <HAL_RTC_SetTime+0xea>
 80083ac:	007f7f7f 	.word	0x007f7f7f

080083b0 <HAL_RTC_SetDate>:
{
 80083b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80083b2:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	f000 808b 	beq.w	80084d2 <HAL_RTC_SetDate+0x122>
 80083bc:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 80083be:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 80083c0:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80083c2:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
  __HAL_LOCK(hrtc);
 80083c6:	f885 0024 	strb.w	r0, [r5, #36]	@ 0x24
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80083ca:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80083cc:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80083ce:	f891 c001 	ldrb.w	ip, [r1, #1]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80083d2:	0376      	lsls	r6, r6, #13
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80083d4:	7888      	ldrb	r0, [r1, #2]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80083d6:	b1f2      	cbz	r2, 8008416 <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80083d8:	ea46 4403 	orr.w	r4, r6, r3, lsl #16
 80083dc:	4304      	orrs	r4, r0
 80083de:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80083e2:	682a      	ldr	r2, [r5, #0]
 80083e4:	21ca      	movs	r1, #202	@ 0xca
 80083e6:	2353      	movs	r3, #83	@ 0x53
 80083e8:	6251      	str	r1, [r2, #36]	@ 0x24
 80083ea:	6253      	str	r3, [r2, #36]	@ 0x24
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80083ec:	68d6      	ldr	r6, [r2, #12]
 80083ee:	f016 0640 	ands.w	r6, r6, #64	@ 0x40
 80083f2:	d049      	beq.n	8008488 <HAL_RTC_SetDate+0xd8>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80083f4:	4b39      	ldr	r3, [pc, #228]	@ (80084dc <HAL_RTC_SetDate+0x12c>)
    status = RTC_ExitInitMode(hrtc);
 80083f6:	4628      	mov	r0, r5
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80083f8:	4023      	ands	r3, r4
 80083fa:	6053      	str	r3, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 80083fc:	f7ff fe7c 	bl	80080f8 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	22ff      	movs	r2, #255	@ 0xff
 8008404:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8008406:	b910      	cbnz	r0, 800840e <HAL_RTC_SetDate+0x5e>
    hrtc->State = HAL_RTC_STATE_READY;
 8008408:	2301      	movs	r3, #1
 800840a:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
  __HAL_UNLOCK(hrtc);
 800840e:	2300      	movs	r3, #0
 8008410:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
}
 8008414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008416:	f01c 0f10 	tst.w	ip, #16
 800841a:	d052      	beq.n	80084c2 <HAL_RTC_SetDate+0x112>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800841c:	f02c 0c10 	bic.w	ip, ip, #16
  while (bcdlow >= 10U)
 8008420:	2b09      	cmp	r3, #9
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008422:	f10c 0c0a 	add.w	ip, ip, #10
 8008426:	fa5f fc8c 	uxtb.w	ip, ip
 800842a:	f881 c001 	strb.w	ip, [r1, #1]
  while (bcdlow >= 10U)
 800842e:	d952      	bls.n	80084d6 <HAL_RTC_SetDate+0x126>
  uint32_t bcdhigh = 0U;
 8008430:	2100      	movs	r1, #0
    bcdlow -= 10U;
 8008432:	3b0a      	subs	r3, #10
    bcdhigh++;
 8008434:	3101      	adds	r1, #1
    bcdlow -= 10U;
 8008436:	b2db      	uxtb	r3, r3
  while (bcdlow >= 10U)
 8008438:	2b09      	cmp	r3, #9
 800843a:	d8fa      	bhi.n	8008432 <HAL_RTC_SetDate+0x82>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800843c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8008440:	b2db      	uxtb	r3, r3
  while (bcdlow >= 10U)
 8008442:	f1bc 0f09 	cmp.w	ip, #9
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008446:	ea4f 4403 	mov.w	r4, r3, lsl #16
  while (bcdlow >= 10U)
 800844a:	d90c      	bls.n	8008466 <HAL_RTC_SetDate+0xb6>
  uint32_t bcdhigh = 0U;
 800844c:	2300      	movs	r3, #0
    bcdlow -= 10U;
 800844e:	f1ac 0c0a 	sub.w	ip, ip, #10
    bcdhigh++;
 8008452:	3301      	adds	r3, #1
    bcdlow -= 10U;
 8008454:	fa5f fc8c 	uxtb.w	ip, ip
  while (bcdlow >= 10U)
 8008458:	f1bc 0f09 	cmp.w	ip, #9
 800845c:	d8f7      	bhi.n	800844e <HAL_RTC_SetDate+0x9e>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800845e:	ea4c 1303 	orr.w	r3, ip, r3, lsl #4
 8008462:	fa5f fc83 	uxtb.w	ip, r3
  while (bcdlow >= 10U)
 8008466:	2809      	cmp	r0, #9
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008468:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  while (bcdlow >= 10U)
 800846c:	d907      	bls.n	800847e <HAL_RTC_SetDate+0xce>
    bcdlow -= 10U;
 800846e:	380a      	subs	r0, #10
    bcdhigh++;
 8008470:	3201      	adds	r2, #1
    bcdlow -= 10U;
 8008472:	b2c0      	uxtb	r0, r0
  while (bcdlow >= 10U)
 8008474:	2809      	cmp	r0, #9
 8008476:	d8fa      	bhi.n	800846e <HAL_RTC_SetDate+0xbe>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8008478:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800847c:	b2d0      	uxtb	r0, r2
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800847e:	4334      	orrs	r4, r6
 8008480:	ea44 040c 	orr.w	r4, r4, ip
 8008484:	4304      	orrs	r4, r0
 8008486:	e7ac      	b.n	80083e2 <HAL_RTC_SetDate+0x32>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8008488:	68d3      	ldr	r3, [r2, #12]
 800848a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800848e:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8008490:	f7fb fc44 	bl	8003d1c <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 8008494:	4631      	mov	r1, r6
    tickstart = HAL_GetTick();
 8008496:	4607      	mov	r7, r0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008498:	e008      	b.n	80084ac <HAL_RTC_SetDate+0xfc>
 800849a:	2903      	cmp	r1, #3
 800849c:	d00d      	beq.n	80084ba <HAL_RTC_SetDate+0x10a>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800849e:	f7fb fc3d 	bl	8003d1c <HAL_GetTick>
 80084a2:	1bc0      	subs	r0, r0, r7
 80084a4:	4631      	mov	r1, r6
 80084a6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80084aa:	d80d      	bhi.n	80084c8 <HAL_RTC_SetDate+0x118>
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80084ac:	682a      	ldr	r2, [r5, #0]
 80084ae:	68d6      	ldr	r6, [r2, #12]
 80084b0:	f016 0640 	ands.w	r6, r6, #64	@ 0x40
 80084b4:	d0f1      	beq.n	800849a <HAL_RTC_SetDate+0xea>
  if (status == HAL_OK)
 80084b6:	2900      	cmp	r1, #0
 80084b8:	d09c      	beq.n	80083f4 <HAL_RTC_SetDate+0x44>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084ba:	23ff      	movs	r3, #255	@ 0xff
 80084bc:	2003      	movs	r0, #3
 80084be:	6253      	str	r3, [r2, #36]	@ 0x24
  if (status == HAL_OK)
 80084c0:	e7a5      	b.n	800840e <HAL_RTC_SetDate+0x5e>
  while (bcdlow >= 10U)
 80084c2:	2b09      	cmp	r3, #9
 80084c4:	d8b4      	bhi.n	8008430 <HAL_RTC_SetDate+0x80>
 80084c6:	e7bc      	b.n	8008442 <HAL_RTC_SetDate+0x92>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80084c8:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 80084ca:	4619      	mov	r1, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80084cc:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80084d0:	e7ec      	b.n	80084ac <HAL_RTC_SetDate+0xfc>
  __HAL_LOCK(hrtc);
 80084d2:	2002      	movs	r0, #2
}
 80084d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80084d6:	041c      	lsls	r4, r3, #16
  while (bcdlow >= 10U)
 80084d8:	e7b8      	b.n	800844c <HAL_RTC_SetDate+0x9c>
 80084da:	bf00      	nop
 80084dc:	00ffff3f 	.word	0x00ffff3f

080084e0 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 80084e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e4:	4605      	mov	r5, r0
 80084e6:	b086      	sub	sp, #24
 80084e8:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80084ea:	f7fb fc17 	bl	8003d1c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80084ee:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 80084f0:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80084f2:	6828      	ldr	r0, [r5, #0]
 80084f4:	f001 f904 	bl	8009700 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80084f8:	4604      	mov	r4, r0
 80084fa:	b118      	cbz	r0, 8008504 <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 80084fc:	4620      	mov	r0, r4
 80084fe:	b006      	add	sp, #24
 8008500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008504:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8008506:	6828      	ldr	r0, [r5, #0]
 8008508:	0409      	lsls	r1, r1, #16
 800850a:	f001 fe71 	bl	800a1f0 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800850e:	4604      	mov	r4, r0
 8008510:	2800      	cmp	r0, #0
 8008512:	d1f3      	bne.n	80084fc <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
 8008514:	f04f 32ff 	mov.w	r2, #4294967295
 8008518:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800851a:	4669      	mov	r1, sp
 800851c:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 800851e:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008522:	2230      	movs	r2, #48	@ 0x30
 8008524:	2302      	movs	r3, #2
 8008526:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800852a:	2200      	movs	r2, #0
 800852c:	2301      	movs	r3, #1
 800852e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008532:	f001 f8cf 	bl	80096d4 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008536:	6828      	ldr	r0, [r5, #0]
 8008538:	f001 ffee 	bl	800a518 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800853c:	4604      	mov	r4, r0
 800853e:	2800      	cmp	r0, #0
 8008540:	d1dc      	bne.n	80084fc <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008542:	4682      	mov	sl, r0
 8008544:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008546:	f240 582a 	movw	r8, #1322	@ 0x52a
 800854a:	e004      	b.n	8008556 <SD_FindSCR.constprop.0+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800854c:	f7fb fbe6 	bl	8003d1c <HAL_GetTick>
 8008550:	1b83      	subs	r3, r0, r6
 8008552:	3301      	adds	r3, #1
 8008554:	d024      	beq.n	80085a0 <SD_FindSCR.constprop.0+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008556:	6828      	ldr	r0, [r5, #0]
 8008558:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800855a:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800855e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008560:	d10c      	bne.n	800857c <SD_FindSCR.constprop.0+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008562:	0319      	lsls	r1, r3, #12
 8008564:	d4f2      	bmi.n	800854c <SD_FindSCR.constprop.0+0x6c>
 8008566:	2c00      	cmp	r4, #0
 8008568:	d1f0      	bne.n	800854c <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800856a:	f001 f899 	bl	80096a0 <SDMMC_ReadFIFO>
 800856e:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008570:	6828      	ldr	r0, [r5, #0]
      index++;
 8008572:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008574:	f001 f894 	bl	80096a0 <SDMMC_ReadFIFO>
 8008578:	4682      	mov	sl, r0
      index++;
 800857a:	e7e7      	b.n	800854c <SD_FindSCR.constprop.0+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800857c:	071a      	lsls	r2, r3, #28
 800857e:	d416      	bmi.n	80085ae <SD_FindSCR.constprop.0+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008580:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008582:	079b      	lsls	r3, r3, #30
 8008584:	d40f      	bmi.n	80085a6 <SD_FindSCR.constprop.0+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008586:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8008588:	f014 0420 	ands.w	r4, r4, #32
 800858c:	d113      	bne.n	80085b6 <SD_FindSCR.constprop.0+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800858e:	fa9a f28a 	rev.w	r2, sl
 8008592:	fa99 f389 	rev.w	r3, r9
 8008596:	490a      	ldr	r1, [pc, #40]	@ (80085c0 <SD_FindSCR.constprop.0+0xe0>)
 8008598:	6381      	str	r1, [r0, #56]	@ 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800859a:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 800859e:	e7ad      	b.n	80084fc <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 80085a0:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80085a4:	e7aa      	b.n	80084fc <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80085a6:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80085a8:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80085aa:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80085ac:	e7a6      	b.n	80084fc <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80085ae:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80085b0:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80085b2:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80085b4:	e7a2      	b.n	80084fc <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80085b6:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 80085b8:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80085ba:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80085bc:	e79e      	b.n	80084fc <SD_FindSCR.constprop.0+0x1c>
 80085be:	bf00      	nop
 80085c0:	18000f3a 	.word	0x18000f3a

080085c4 <HAL_SD_ReadBlocks>:
{
 80085c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c8:	460d      	mov	r5, r1
 80085ca:	b086      	sub	sp, #24
 80085cc:	4604      	mov	r4, r0
 80085ce:	4691      	mov	r9, r2
 80085d0:	461f      	mov	r7, r3
 80085d2:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  uint32_t tickstart = HAL_GetTick();
 80085d6:	f7fb fba1 	bl	8003d1c <HAL_GetTick>
  if (NULL == pData)
 80085da:	2d00      	cmp	r5, #0
 80085dc:	d065      	beq.n	80086aa <HAL_SD_ReadBlocks+0xe6>
  if (hsd->State == HAL_SD_STATE_READY)
 80085de:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d152      	bne.n	800868c <HAL_SD_ReadBlocks+0xc8>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80085e6:	eb09 0307 	add.w	r3, r9, r7
 80085ea:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085ec:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80085ee:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085f0:	6361      	str	r1, [r4, #52]	@ 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80085f2:	d85f      	bhi.n	80086b4 <HAL_SD_ReadBlocks+0xf0>
    hsd->State = HAL_SD_STATE_BUSY;
 80085f4:	2303      	movs	r3, #3
 80085f6:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 80085f8:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80085fa:	f04f 0a02 	mov.w	sl, #2
    hsd->State = HAL_SD_STATE_BUSY;
 80085fe:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008602:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    hsd->Instance->DCTRL = 0U;
 8008604:	62c1      	str	r1, [r0, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008606:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008608:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800860a:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800860e:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008612:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 8008616:	bf18      	it	ne
 8008618:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800861c:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800861e:	027b      	lsls	r3, r7, #9
 8008620:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008622:	2390      	movs	r3, #144	@ 0x90
 8008624:	e9cd 3a02 	strd	r3, sl, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008628:	f001 f854 	bl	80096d4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800862c:	6820      	ldr	r0, [r4, #0]
    if (NumberOfBlocks > 1U)
 800862e:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008630:	68c3      	ldr	r3, [r0, #12]
 8008632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008636:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 8008638:	d931      	bls.n	800869e <HAL_SD_ReadBlocks+0xda>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800863a:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800863c:	f8c4 a02c 	str.w	sl, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008640:	f001 f9b6 	bl	80099b0 <SDMMC_CmdReadMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008644:	6822      	ldr	r2, [r4, #0]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008646:	2800      	cmp	r0, #0
 8008648:	d139      	bne.n	80086be <HAL_SD_ReadBlocks+0xfa>
    dataremaining = config.DataLength;
 800864a:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800864e:	e005      	b.n	800865c <HAL_SD_ReadBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008650:	f7fb fb64 	bl	8003d1c <HAL_GetTick>
 8008654:	1b82      	subs	r2, r0, r6
 8008656:	4542      	cmp	r2, r8
 8008658:	d25c      	bcs.n	8008714 <HAL_SD_ReadBlocks+0x150>
 800865a:	6822      	ldr	r2, [r4, #0]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800865c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800865e:	4610      	mov	r0, r2
 8008660:	f413 7f95 	tst.w	r3, #298	@ 0x12a
 8008664:	d136      	bne.n	80086d4 <HAL_SD_ReadBlocks+0x110>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008666:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8008668:	041a      	lsls	r2, r3, #16
 800866a:	d5f1      	bpl.n	8008650 <HAL_SD_ReadBlocks+0x8c>
 800866c:	f1b9 0f1f 	cmp.w	r9, #31
 8008670:	d9ee      	bls.n	8008650 <HAL_SD_ReadBlocks+0x8c>
 8008672:	f105 0a20 	add.w	sl, r5, #32
 8008676:	e000      	b.n	800867a <HAL_SD_ReadBlocks+0xb6>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008678:	6820      	ldr	r0, [r4, #0]
 800867a:	f001 f811 	bl	80096a0 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800867e:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
 8008682:	45aa      	cmp	sl, r5
 8008684:	d1f8      	bne.n	8008678 <HAL_SD_ReadBlocks+0xb4>
        dataremaining -= 32U;
 8008686:	f1a9 0920 	sub.w	r9, r9, #32
 800868a:	e7e1      	b.n	8008650 <HAL_SD_ReadBlocks+0x8c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800868c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800868e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008692:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
}
 8008696:	4618      	mov	r0, r3
 8008698:	b006      	add	sp, #24
 800869a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800869e:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80086a0:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80086a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80086a4:	f001 f8d8 	bl	8009858 <SDMMC_CmdReadSingleBlock>
 80086a8:	e7cc      	b.n	8008644 <HAL_SD_ReadBlocks+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80086aa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80086ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80086b0:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80086b2:	e7ef      	b.n	8008694 <HAL_SD_ReadBlocks+0xd0>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80086b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80086b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80086ba:	6363      	str	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 80086bc:	e7ea      	b.n	8008694 <HAL_SD_ReadBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086be:	4b31      	ldr	r3, [pc, #196]	@ (8008784 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 80086c0:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086c2:	6393      	str	r3, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80086c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80086c6:	2200      	movs	r2, #0
          hsd->ErrorCode |= errorstate;
 80086c8:	4303      	orrs	r3, r0
 80086ca:	6363      	str	r3, [r4, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 80086cc:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80086d0:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 80086d2:	e7df      	b.n	8008694 <HAL_SD_ReadBlocks+0xd0>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80086d4:	68d3      	ldr	r3, [r2, #12]
 80086d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086da:	60d3      	str	r3, [r2, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80086dc:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80086de:	05db      	lsls	r3, r3, #23
 80086e0:	d501      	bpl.n	80086e6 <HAL_SD_ReadBlocks+0x122>
 80086e2:	2f01      	cmp	r7, #1
 80086e4:	d824      	bhi.n	8008730 <HAL_SD_ReadBlocks+0x16c>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80086e6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80086e8:	f013 0308 	ands.w	r3, r3, #8
 80086ec:	d133      	bne.n	8008756 <HAL_SD_ReadBlocks+0x192>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80086ee:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80086f0:	f012 0202 	ands.w	r2, r2, #2
 80086f4:	d124      	bne.n	8008740 <HAL_SD_ReadBlocks+0x17c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80086f6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80086f8:	f013 0320 	ands.w	r3, r3, #32
 80086fc:	d037      	beq.n	800876e <HAL_SD_ReadBlocks+0x1aa>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086fe:	4b21      	ldr	r3, [pc, #132]	@ (8008784 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 8008700:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008702:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008704:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008706:	f043 0320 	orr.w	r3, r3, #32
 800870a:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800870c:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008710:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8008712:	e7bf      	b.n	8008694 <HAL_SD_ReadBlocks+0xd0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008714:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8008716:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008718:	481a      	ldr	r0, [pc, #104]	@ (8008784 <HAL_SD_ReadBlocks+0x1c0>)
        hsd->Context = SD_CONTEXT_NONE;
 800871a:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800871c:	6398      	str	r0, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800871e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008720:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008724:	6363      	str	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
        hsd->State = HAL_SD_STATE_READY;
 8008728:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800872c:	62e2      	str	r2, [r4, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800872e:	e7b2      	b.n	8008696 <HAL_SD_ReadBlocks+0xd2>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008730:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008732:	2b03      	cmp	r3, #3
 8008734:	d0d7      	beq.n	80086e6 <HAL_SD_ReadBlocks+0x122>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008736:	f001 fb3f 	bl	8009db8 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800873a:	b9f0      	cbnz	r0, 800877a <HAL_SD_ReadBlocks+0x1b6>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800873c:	6820      	ldr	r0, [r4, #0]
 800873e:	e7d2      	b.n	80086e6 <HAL_SD_ReadBlocks+0x122>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008740:	4a10      	ldr	r2, [pc, #64]	@ (8008784 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 8008742:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008744:	6382      	str	r2, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008746:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008748:	f042 0202 	orr.w	r2, r2, #2
 800874c:	6362      	str	r2, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800874e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008752:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8008754:	e79e      	b.n	8008694 <HAL_SD_ReadBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008756:	4b0b      	ldr	r3, [pc, #44]	@ (8008784 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 8008758:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800875a:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800875c:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800875e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008760:	f043 0308 	orr.w	r3, r3, #8
 8008764:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008766:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800876a:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800876c:	e792      	b.n	8008694 <HAL_SD_ReadBlocks+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800876e:	4906      	ldr	r1, [pc, #24]	@ (8008788 <HAL_SD_ReadBlocks+0x1c4>)
    hsd->State = HAL_SD_STATE_READY;
 8008770:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008772:	6381      	str	r1, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008774:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    return HAL_OK;
 8008778:	e78d      	b.n	8008696 <HAL_SD_ReadBlocks+0xd2>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800877a:	6823      	ldr	r3, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 800877c:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800877e:	4a01      	ldr	r2, [pc, #4]	@ (8008784 <HAL_SD_ReadBlocks+0x1c0>)
 8008780:	639a      	str	r2, [r3, #56]	@ 0x38
 8008782:	e79f      	b.n	80086c4 <HAL_SD_ReadBlocks+0x100>
 8008784:	1fe00fff 	.word	0x1fe00fff
 8008788:	18000f3a 	.word	0x18000f3a

0800878c <HAL_SD_WriteBlocks>:
{
 800878c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008790:	460d      	mov	r5, r1
 8008792:	b088      	sub	sp, #32
 8008794:	4604      	mov	r4, r0
 8008796:	4691      	mov	r9, r2
 8008798:	461f      	mov	r7, r3
 800879a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800879e:	f7fb fabd 	bl	8003d1c <HAL_GetTick>
  if (NULL == pData)
 80087a2:	2d00      	cmp	r5, #0
 80087a4:	d064      	beq.n	8008870 <HAL_SD_WriteBlocks+0xe4>
  if (hsd->State == HAL_SD_STATE_READY)
 80087a6:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d152      	bne.n	8008854 <HAL_SD_WriteBlocks+0xc8>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80087ae:	eb09 0307 	add.w	r3, r9, r7
 80087b2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087b4:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80087b6:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087b8:	6361      	str	r1, [r4, #52]	@ 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80087ba:	d85e      	bhi.n	800887a <HAL_SD_WriteBlocks+0xee>
    hsd->State = HAL_SD_STATE_BUSY;
 80087bc:	2303      	movs	r3, #3
 80087be:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 80087c0:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 80087c2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80087c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    hsd->Instance->DCTRL = 0U;
 80087c8:	62c1      	str	r1, [r0, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80087ca:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80087cc:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80087ce:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80087d2:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80087d6:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80087d8:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 80087dc:	bf18      	it	ne
 80087de:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80087e2:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80087e4:	027b      	lsls	r3, r7, #9
 80087e6:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80087e8:	2390      	movs	r3, #144	@ 0x90
 80087ea:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80087ec:	f000 ff72 	bl	80096d4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80087f0:	6820      	ldr	r0, [r4, #0]
    if (NumberOfBlocks > 1U)
 80087f2:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80087f4:	4649      	mov	r1, r9
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80087f6:	68c3      	ldr	r3, [r0, #12]
 80087f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087fc:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 80087fe:	d932      	bls.n	8008866 <HAL_SD_WriteBlocks+0xda>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008800:	2320      	movs	r3, #32
 8008802:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008804:	f001 fa2c 	bl	8009c60 <SDMMC_CmdWriteMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008808:	6822      	ldr	r2, [r4, #0]
    if (errorstate != HAL_SD_ERROR_NONE)
 800880a:	2800      	cmp	r0, #0
 800880c:	d13a      	bne.n	8008884 <HAL_SD_WriteBlocks+0xf8>
    dataremaining = config.DataLength;
 800880e:	f8dd 900c 	ldr.w	r9, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008812:	e005      	b.n	8008820 <HAL_SD_WriteBlocks+0x94>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008814:	f7fb fa82 	bl	8003d1c <HAL_GetTick>
 8008818:	1b82      	subs	r2, r0, r6
 800881a:	4542      	cmp	r2, r8
 800881c:	d25d      	bcs.n	80088da <HAL_SD_WriteBlocks+0x14e>
 800881e:	6822      	ldr	r2, [r4, #0]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008820:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8008822:	4610      	mov	r0, r2
 8008824:	f413 7f8d 	tst.w	r3, #282	@ 0x11a
 8008828:	d137      	bne.n	800889a <HAL_SD_WriteBlocks+0x10e>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800882a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800882c:	045a      	lsls	r2, r3, #17
 800882e:	d5f1      	bpl.n	8008814 <HAL_SD_WriteBlocks+0x88>
 8008830:	f1b9 0f1f 	cmp.w	r9, #31
 8008834:	d9ee      	bls.n	8008814 <HAL_SD_WriteBlocks+0x88>
 8008836:	f105 0a20 	add.w	sl, r5, #32
 800883a:	e000      	b.n	800883e <HAL_SD_WriteBlocks+0xb2>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800883c:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800883e:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008842:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008844:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008846:	f000 ff2f 	bl	80096a8 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800884a:	4555      	cmp	r5, sl
 800884c:	d1f6      	bne.n	800883c <HAL_SD_WriteBlocks+0xb0>
        dataremaining -= 32U;
 800884e:	f1a9 0920 	sub.w	r9, r9, #32
 8008852:	e7df      	b.n	8008814 <HAL_SD_WriteBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008854:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008856:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800885a:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
}
 800885e:	4618      	mov	r0, r3
 8008860:	b008      	add	sp, #32
 8008862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008866:	2310      	movs	r3, #16
 8008868:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800886a:	f001 f94d 	bl	8009b08 <SDMMC_CmdWriteSingleBlock>
 800886e:	e7cb      	b.n	8008808 <HAL_SD_WriteBlocks+0x7c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008870:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008872:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008876:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8008878:	e7f0      	b.n	800885c <HAL_SD_WriteBlocks+0xd0>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800887a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800887c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008880:	6363      	str	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 8008882:	e7eb      	b.n	800885c <HAL_SD_WriteBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008884:	4b30      	ldr	r3, [pc, #192]	@ (8008948 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 8008886:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008888:	6393      	str	r3, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800888a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800888c:	2200      	movs	r2, #0
          hsd->ErrorCode |= errorstate;
 800888e:	4303      	orrs	r3, r0
 8008890:	6363      	str	r3, [r4, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008892:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008896:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8008898:	e7e0      	b.n	800885c <HAL_SD_WriteBlocks+0xd0>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800889a:	68d3      	ldr	r3, [r2, #12]
 800889c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088a0:	60d3      	str	r3, [r2, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80088a2:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80088a4:	05db      	lsls	r3, r3, #23
 80088a6:	d501      	bpl.n	80088ac <HAL_SD_WriteBlocks+0x120>
 80088a8:	2f01      	cmp	r7, #1
 80088aa:	d822      	bhi.n	80088f2 <HAL_SD_WriteBlocks+0x166>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80088ac:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80088ae:	f013 0308 	ands.w	r3, r3, #8
 80088b2:	d131      	bne.n	8008918 <HAL_SD_WriteBlocks+0x18c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80088b4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80088b6:	f012 0202 	ands.w	r2, r2, #2
 80088ba:	d122      	bne.n	8008902 <HAL_SD_WriteBlocks+0x176>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80088bc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80088be:	f013 0310 	ands.w	r3, r3, #16
 80088c2:	d035      	beq.n	8008930 <HAL_SD_WriteBlocks+0x1a4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088c4:	4b20      	ldr	r3, [pc, #128]	@ (8008948 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 80088c6:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088c8:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80088ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088cc:	f043 0310 	orr.w	r3, r3, #16
 80088d0:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80088d2:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80088d6:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 80088d8:	e7c0      	b.n	800885c <HAL_SD_WriteBlocks+0xd0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088da:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 80088dc:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088de:	481a      	ldr	r0, [pc, #104]	@ (8008948 <HAL_SD_WriteBlocks+0x1bc>)
        hsd->Context = SD_CONTEXT_NONE;
 80088e0:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088e2:	6398      	str	r0, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80088e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088e6:	6363      	str	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 80088e8:	2303      	movs	r3, #3
        hsd->State = HAL_SD_STATE_READY;
 80088ea:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80088ee:	62e2      	str	r2, [r4, #44]	@ 0x2c
        return HAL_TIMEOUT;
 80088f0:	e7b5      	b.n	800885e <HAL_SD_WriteBlocks+0xd2>
      if (hsd->SdCard.CardType != CARD_SECURED)
 80088f2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d0d9      	beq.n	80088ac <HAL_SD_WriteBlocks+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80088f8:	f001 fa5e 	bl	8009db8 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 80088fc:	b9f0      	cbnz	r0, 800893c <HAL_SD_WriteBlocks+0x1b0>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088fe:	6820      	ldr	r0, [r4, #0]
 8008900:	e7d4      	b.n	80088ac <HAL_SD_WriteBlocks+0x120>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008902:	4a11      	ldr	r2, [pc, #68]	@ (8008948 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 8008904:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008906:	6382      	str	r2, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008908:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800890a:	f042 0202 	orr.w	r2, r2, #2
 800890e:	6362      	str	r2, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008910:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008914:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8008916:	e7a1      	b.n	800885c <HAL_SD_WriteBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008918:	4b0b      	ldr	r3, [pc, #44]	@ (8008948 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 800891a:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800891c:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800891e:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008920:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008922:	f043 0308 	orr.w	r3, r3, #8
 8008926:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008928:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800892c:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800892e:	e795      	b.n	800885c <HAL_SD_WriteBlocks+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008930:	4906      	ldr	r1, [pc, #24]	@ (800894c <HAL_SD_WriteBlocks+0x1c0>)
    hsd->State = HAL_SD_STATE_READY;
 8008932:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008934:	6381      	str	r1, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008936:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    return HAL_OK;
 800893a:	e790      	b.n	800885e <HAL_SD_WriteBlocks+0xd2>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800893c:	6823      	ldr	r3, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 800893e:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008940:	4a01      	ldr	r2, [pc, #4]	@ (8008948 <HAL_SD_WriteBlocks+0x1bc>)
 8008942:	639a      	str	r2, [r3, #56]	@ 0x38
 8008944:	e7a1      	b.n	800888a <HAL_SD_WriteBlocks+0xfe>
 8008946:	bf00      	nop
 8008948:	1fe00fff 	.word	0x1fe00fff
 800894c:	18000f3a 	.word	0x18000f3a

08008950 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008950:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
{
 8008952:	4603      	mov	r3, r0
 8008954:	b410      	push	{r4}
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008956:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800895a:	0f94      	lsrs	r4, r2, #30
 800895c:	700c      	strb	r4, [r1, #0]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800895e:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008962:	7048      	strb	r0, [r1, #1]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008964:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008968:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800896a:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800896c:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008970:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008972:	7108      	strb	r0, [r1, #4]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008974:	2000      	movs	r0, #0
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008976:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008978:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800897a:	0d14      	lsrs	r4, r2, #20
 800897c:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800897e:	f3c2 4403 	ubfx	r4, r2, #16, #4
 8008982:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008984:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 8008988:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800898a:	f3c2 3480 	ubfx	r4, r2, #14, #1
 800898e:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008990:	f3c2 3440 	ubfx	r4, r2, #13, #1
 8008994:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008996:	f3c2 3400 	ubfx	r4, r2, #12, #1
 800899a:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800899c:	7348      	strb	r0, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 800899e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80089a0:	2800      	cmp	r0, #0
 80089a2:	d16f      	bne.n	8008a84 <HAL_SD_GetCardCSD+0x134>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80089a4:	f640 74fc 	movw	r4, #4092	@ 0xffc
 80089a8:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80089aa:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80089ae:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80089b2:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 80089b6:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80089b8:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80089bc:	750c      	strb	r4, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80089be:	f3c0 6402 	ubfx	r4, r0, #24, #3
 80089c2:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80089c4:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80089c8:	758a      	strb	r2, [r1, #22]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80089ca:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80089ce:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80089d0:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80089d2:	690c      	ldr	r4, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80089d4:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80089d6:	3401      	adds	r4, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80089d8:	f002 0207 	and.w	r2, r2, #7
 80089dc:	3202      	adds	r2, #2
 80089de:	4094      	lsls	r4, r2
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80089e0:	2201      	movs	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80089e2:	649c      	str	r4, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80089e4:	f891 c008 	ldrb.w	ip, [r1, #8]
 80089e8:	f00c 0c0f 	and.w	ip, ip, #15
 80089ec:	fa02 f20c 	lsl.w	r2, r2, ip
 80089f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80089f2:	0a52      	lsrs	r2, r2, #9
 80089f4:	fb04 f202 	mul.w	r2, r4, r2
 80089f8:	651a      	str	r2, [r3, #80]	@ 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80089fa:	f3c0 3280 	ubfx	r2, r0, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 80089fe:	f44f 7400 	mov.w	r4, #512	@ 0x200
 8008a02:	655c      	str	r4, [r3, #84]	@ 0x54
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008a04:	f3c0 14c6 	ubfx	r4, r0, #7, #7
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008a08:	764a      	strb	r2, [r1, #25]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008a0a:	f000 027f 	and.w	r2, r0, #127	@ 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008a0e:	768c      	strb	r4, [r1, #26]
  pCSD->Reserved3 = 0;
 8008a10:	2000      	movs	r0, #0
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008a12:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008a14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a16:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008a18:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008a1c:	770c      	strb	r4, [r1, #28]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008a1e:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008a22:	774a      	strb	r2, [r1, #29]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008a24:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008a28:	778c      	strb	r4, [r1, #30]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008a2a:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008a2e:	77ca      	strb	r2, [r1, #31]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008a30:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008a34:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008a38:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->Reserved3 = 0;
 8008a3c:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008a40:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008a44:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008a48:	f881 4023 	strb.w	r4, [r1, #35]	@ 0x23
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008a4c:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008a50:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008a54:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008a58:	f881 4025 	strb.w	r4, [r1, #37]	@ 0x25
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008a5c:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008a60:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008a64:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008a68:	f881 4027 	strb.w	r4, [r1, #39]	@ 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008a6c:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008a70:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->Reserved4 = 1;
 8008a74:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008a76:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8008a7a:	f881 202a 	strb.w	r2, [r1, #42]	@ 0x2a
}
 8008a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a82:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008a84:	2801      	cmp	r0, #1
 8008a86:	d10f      	bne.n	8008aa8 <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008a88:	0412      	lsls	r2, r2, #16
 8008a8a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
    hsd->SdCard.BlockSize = 512U;
 8008a8c:	f44f 7400 	mov.w	r4, #512	@ 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008a90:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8008a94:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 8008a98:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008a9a:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 8008a9c:	64dc      	str	r4, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008a9e:	3201      	adds	r2, #1
 8008aa0:	0292      	lsls	r2, r2, #10
 8008aa2:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008aa4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008aa6:	e7a8      	b.n	80089fa <HAL_SD_GetCardCSD+0xaa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008aa8:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 8008aaa:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008aac:	4805      	ldr	r0, [pc, #20]	@ (8008ac4 <HAL_SD_GetCardCSD+0x174>)
 8008aae:	6390      	str	r0, [r2, #56]	@ 0x38
    return HAL_ERROR;
 8008ab0:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ab4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8008ab8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008aba:	f883 1030 	strb.w	r1, [r3, #48]	@ 0x30
}
 8008abe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ac2:	4770      	bx	lr
 8008ac4:	1fe00fff 	.word	0x1fe00fff

08008ac8 <HAL_SD_InitCard>:
{
 8008ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008aca:	2200      	movs	r2, #0
{
 8008acc:	b095      	sub	sp, #84	@ 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008ace:	2300      	movs	r3, #0
{
 8008ad0:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008ad8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008adc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008ae0:	f7ff f8ea 	bl	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 8008ae4:	b948      	cbnz	r0, 8008afa <HAL_SD_InitCard+0x32>
    hsd->State = HAL_SD_STATE_READY;
 8008ae6:	2201      	movs	r2, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008ae8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 8008aec:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008af0:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8008af2:	2501      	movs	r5, #1
}
 8008af4:	4628      	mov	r0, r5
 8008af6:	b015      	add	sp, #84	@ 0x54
 8008af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008afa:	0a06      	lsrs	r6, r0, #8
 8008afc:	4b8a      	ldr	r3, [pc, #552]	@ (8008d28 <HAL_SD_InitCard+0x260>)
  (void)SDMMC_Init(hsd->Instance, Init);
 8008afe:	aa07      	add	r2, sp, #28
 8008b00:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008b02:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 8008b06:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008b08:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 8008b0a:	9608      	str	r6, [sp, #32]
 8008b0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b10:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008b14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b16:	6820      	ldr	r0, [r4, #0]
 8008b18:	f000 fda6 	bl	8009668 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008b1c:	6820      	ldr	r0, [r4, #0]
 8008b1e:	f000 fdc9 	bl	80096b4 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 8008b22:	4b82      	ldr	r3, [pc, #520]	@ (8008d2c <HAL_SD_InitCard+0x264>)
 8008b24:	429d      	cmp	r5, r3
 8008b26:	d902      	bls.n	8008b2e <HAL_SD_InitCard+0x66>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008b28:	0076      	lsls	r6, r6, #1
 8008b2a:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008b2e:	4880      	ldr	r0, [pc, #512]	@ (8008d30 <HAL_SD_InitCard+0x268>)
 8008b30:	fbb0 f0f5 	udiv	r0, r0, r5
 8008b34:	3001      	adds	r0, #1
 8008b36:	f7fb f8f7 	bl	8003d28 <HAL_Delay>
  __IO uint32_t count = 0U;
 8008b3a:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008b3c:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8008b3e:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008b40:	f001 faea 	bl	800a118 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b44:	4605      	mov	r5, r0
 8008b46:	bb70      	cbnz	r0, 8008ba6 <HAL_SD_InitCard+0xde>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008b48:	6820      	ldr	r0, [r4, #0]
 8008b4a:	f001 fb11 	bl	800a170 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008b4e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8008b52:	f000 80ce 	beq.w	8008cf2 <HAL_SD_InitCard+0x22a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008b56:	2301      	movs	r3, #1
 8008b58:	63e3      	str	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	6820      	ldr	r0, [r4, #0]
 8008b5e:	f001 fb47 	bl	800a1f0 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b62:	bb38      	cbnz	r0, 8008bb4 <HAL_SD_InitCard+0xec>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008b64:	9b03      	ldr	r3, [sp, #12]
 8008b66:	f64f 76fe 	movw	r6, #65534	@ 0xfffe
 8008b6a:	42b3      	cmp	r3, r6
 8008b6c:	f200 80d3 	bhi.w	8008d16 <HAL_SD_InitCard+0x24e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008b70:	4f70      	ldr	r7, [pc, #448]	@ (8008d34 <HAL_SD_InitCard+0x26c>)
 8008b72:	e010      	b.n	8008b96 <HAL_SD_InitCard+0xce>
 8008b74:	6820      	ldr	r0, [r4, #0]
 8008b76:	f001 fbe7 	bl	800a348 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b7a:	4601      	mov	r1, r0
 8008b7c:	b9d0      	cbnz	r0, 8008bb4 <HAL_SD_InitCard+0xec>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b7e:	6820      	ldr	r0, [r4, #0]
 8008b80:	f000 fda4 	bl	80096cc <SDMMC_GetResponse>
    count++;
 8008b84:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008b86:	2800      	cmp	r0, #0
    count++;
 8008b88:	f103 0301 	add.w	r3, r3, #1
 8008b8c:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008b8e:	9b03      	ldr	r3, [sp, #12]
 8008b90:	db13      	blt.n	8008bba <HAL_SD_InitCard+0xf2>
 8008b92:	42b3      	cmp	r3, r6
 8008b94:	d811      	bhi.n	8008bba <HAL_SD_InitCard+0xf2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008b96:	2100      	movs	r1, #0
 8008b98:	6820      	ldr	r0, [r4, #0]
 8008b9a:	f001 fb29 	bl	800a1f0 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008b9e:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	d0e7      	beq.n	8008b74 <HAL_SD_InitCard+0xac>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008ba4:	4605      	mov	r5, r0
    hsd->State = HAL_SD_STATE_READY;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008bac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008bae:	432b      	orrs	r3, r5
 8008bb0:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8008bb2:	e79e      	b.n	8008af2 <HAL_SD_InitCard+0x2a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bb4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8008bb8:	e7f5      	b.n	8008ba6 <HAL_SD_InitCard+0xde>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008bba:	9a03      	ldr	r2, [sp, #12]
 8008bbc:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	f200 80ac 	bhi.w	8008d1e <HAL_SD_InitCard+0x256>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008bc6:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8008bca:	bf18      	it	ne
 8008bcc:	2501      	movne	r5, #1
  uint16_t sd_rca = 0U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	63a5      	str	r5, [r4, #56]	@ 0x38
 8008bd2:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 8008bd6:	f7fb f8a1 	bl	8003d1c <HAL_GetTick>
 8008bda:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008bdc:	6820      	ldr	r0, [r4, #0]
 8008bde:	f000 fd71 	bl	80096c4 <SDMMC_GetPowerState>
 8008be2:	b348      	cbz	r0, 8008c38 <HAL_SD_InitCard+0x170>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008be4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008be6:	6820      	ldr	r0, [r4, #0]
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008be8:	2b03      	cmp	r3, #3
 8008bea:	d12e      	bne.n	8008c4a <HAL_SD_InitCard+0x182>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008bec:	2104      	movs	r1, #4
 8008bee:	f000 fd6d 	bl	80096cc <SDMMC_GetResponse>
 8008bf2:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008bf4:	a909      	add	r1, sp, #36	@ 0x24
 8008bf6:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008bf8:	0d1b      	lsrs	r3, r3, #20
 8008bfa:	6423      	str	r3, [r4, #64]	@ 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008bfc:	f7ff fea8 	bl	8008950 <HAL_SD_GetCardCSD>
 8008c00:	4605      	mov	r5, r0
 8008c02:	2800      	cmp	r0, #0
 8008c04:	f040 8081 	bne.w	8008d0a <HAL_SD_InitCard+0x242>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008c08:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008c0a:	6820      	ldr	r0, [r4, #0]
 8008c0c:	0409      	lsls	r1, r1, #16
 8008c0e:	f001 f9d7 	bl	8009fc0 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c12:	b998      	cbnz	r0, 8008c3c <HAL_SD_InitCard+0x174>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008c18:	6820      	ldr	r0, [r4, #0]
 8008c1a:	f000 fd71 	bl	8009700 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	f43f af68 	beq.w	8008af4 <HAL_SD_InitCard+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c24:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8008c26:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c28:	4943      	ldr	r1, [pc, #268]	@ (8008d38 <HAL_SD_InitCard+0x270>)
 8008c2a:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008c2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c2e:	4303      	orrs	r3, r0
 8008c30:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008c32:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    return HAL_ERROR;
 8008c36:	e75c      	b.n	8008af2 <HAL_SD_InitCard+0x2a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c38:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008c42:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c44:	4303      	orrs	r3, r0
 8008c46:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8008c48:	e753      	b.n	8008af2 <HAL_SD_InitCard+0x2a>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008c4a:	f001 fd0b 	bl	800a664 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d1f4      	bne.n	8008c3c <HAL_SD_InitCard+0x174>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008c52:	4601      	mov	r1, r0
 8008c54:	6820      	ldr	r0, [r4, #0]
 8008c56:	f000 fd39 	bl	80096cc <SDMMC_GetResponse>
 8008c5a:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008c5c:	2104      	movs	r1, #4
 8008c5e:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008c60:	66e3      	str	r3, [r4, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008c62:	f000 fd33 	bl	80096cc <SDMMC_GetResponse>
 8008c66:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008c68:	2108      	movs	r1, #8
 8008c6a:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008c6c:	6723      	str	r3, [r4, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008c6e:	f000 fd2d 	bl	80096cc <SDMMC_GetResponse>
 8008c72:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008c74:	210c      	movs	r1, #12
 8008c76:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008c78:	6763      	str	r3, [r4, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008c7a:	f000 fd27 	bl	80096cc <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008c7e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008c80:	67a0      	str	r0, [r4, #120]	@ 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008c82:	2b03      	cmp	r3, #3
 8008c84:	d04e      	beq.n	8008d24 <HAL_SD_InitCard+0x25c>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008c86:	f241 3687 	movw	r6, #4999	@ 0x1387
 8008c8a:	e008      	b.n	8008c9e <HAL_SD_InitCard+0x1d6>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008c8c:	f001 fd68 	bl	800a760 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d1d3      	bne.n	8008c3c <HAL_SD_InitCard+0x174>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008c94:	f7fb f842 	bl	8003d1c <HAL_GetTick>
 8008c98:	1b43      	subs	r3, r0, r5
 8008c9a:	42b3      	cmp	r3, r6
 8008c9c:	d838      	bhi.n	8008d10 <HAL_SD_InitCard+0x248>
    while (sd_rca == 0U)
 8008c9e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008ca2:	f10d 010a 	add.w	r1, sp, #10
 8008ca6:	6820      	ldr	r0, [r4, #0]
    while (sd_rca == 0U)
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d0ef      	beq.n	8008c8c <HAL_SD_InitCard+0x1c4>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008cac:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008cae:	2a03      	cmp	r2, #3
 8008cb0:	d09c      	beq.n	8008bec <HAL_SD_InitCard+0x124>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008cb2:	0419      	lsls	r1, r3, #16
    hsd->SdCard.RelCardAdd = sd_rca;
 8008cb4:	6463      	str	r3, [r4, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008cb6:	f001 fd13 	bl	800a6e0 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	d1be      	bne.n	8008c3c <HAL_SD_InitCard+0x174>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008cbe:	4601      	mov	r1, r0
 8008cc0:	6820      	ldr	r0, [r4, #0]
 8008cc2:	f000 fd03 	bl	80096cc <SDMMC_GetResponse>
 8008cc6:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008cc8:	2104      	movs	r1, #4
 8008cca:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ccc:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008cce:	f000 fcfd 	bl	80096cc <SDMMC_GetResponse>
 8008cd2:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008cd4:	2108      	movs	r1, #8
 8008cd6:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008cd8:	6623      	str	r3, [r4, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008cda:	f000 fcf7 	bl	80096cc <SDMMC_GetResponse>
 8008cde:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008ce0:	210c      	movs	r1, #12
 8008ce2:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008ce4:	6663      	str	r3, [r4, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008ce6:	f000 fcf1 	bl	80096cc <SDMMC_GetResponse>
 8008cea:	4603      	mov	r3, r0
 8008cec:	6820      	ldr	r0, [r4, #0]
 8008cee:	66a3      	str	r3, [r4, #104]	@ 0x68
 8008cf0:	e77c      	b.n	8008bec <HAL_SD_InitCard+0x124>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008cf2:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008cf4:	63e5      	str	r5, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008cf6:	f001 fa0f 	bl	800a118 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	f47f af52 	bne.w	8008ba4 <HAL_SD_InitCard+0xdc>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008d00:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	f47f af2e 	bne.w	8008b64 <HAL_SD_InitCard+0x9c>
 8008d08:	e727      	b.n	8008b5a <HAL_SD_InitCard+0x92>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d0a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8008d0e:	e795      	b.n	8008c3c <HAL_SD_InitCard+0x174>
        return HAL_SD_ERROR_TIMEOUT;
 8008d10:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d14:	e792      	b.n	8008c3c <HAL_SD_InitCard+0x174>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008d16:	9b03      	ldr	r3, [sp, #12]
 8008d18:	42b3      	cmp	r3, r6
 8008d1a:	f67f af58 	bls.w	8008bce <HAL_SD_InitCard+0x106>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008d1e:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 8008d22:	e740      	b.n	8008ba6 <HAL_SD_InitCard+0xde>
 8008d24:	6820      	ldr	r0, [r4, #0]
 8008d26:	e761      	b.n	8008bec <HAL_SD_InitCard+0x124>
 8008d28:	014f8b59 	.word	0x014f8b59
 8008d2c:	000c34ff 	.word	0x000c34ff
 8008d30:	00012110 	.word	0x00012110
 8008d34:	c1100000 	.word	0xc1100000
 8008d38:	1fe00fff 	.word	0x1fe00fff

08008d3c <HAL_SD_GetCardStatus>:
{
 8008d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (hsd->State == HAL_SD_STATE_BUSY)
 8008d40:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
{
 8008d44:	b097      	sub	sp, #92	@ 0x5c
  if (hsd->State == HAL_SD_STATE_BUSY)
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	d033      	beq.n	8008db2 <HAL_SD_GetCardStatus+0x76>
  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008d4a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008d4c:	460d      	mov	r5, r1
 8008d4e:	f7fa ffe5 	bl	8003d1c <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008d52:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 8008d54:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008d56:	6820      	ldr	r0, [r4, #0]
 8008d58:	f000 fcb8 	bl	80096cc <SDMMC_GetResponse>
 8008d5c:	0182      	lsls	r2, r0, #6
 8008d5e:	d410      	bmi.n	8008d82 <HAL_SD_GetCardStatus+0x46>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008d60:	2140      	movs	r1, #64	@ 0x40
 8008d62:	6820      	ldr	r0, [r4, #0]
 8008d64:	f000 fccc 	bl	8009700 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d68:	4603      	mov	r3, r0
 8008d6a:	b930      	cbnz	r0, 8008d7a <HAL_SD_GetCardStatus+0x3e>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d6c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008d6e:	6820      	ldr	r0, [r4, #0]
 8008d70:	0409      	lsls	r1, r1, #16
 8008d72:	f001 fa3d 	bl	800a1f0 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d76:	4603      	mov	r3, r0
 8008d78:	b300      	cbz	r0, 8008dbc <HAL_SD_GetCardStatus+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008d7a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d7c:	6820      	ldr	r0, [r4, #0]
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008d7e:	6362      	str	r2, [r4, #52]	@ 0x34
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d80:	e002      	b.n	8008d88 <HAL_SD_GetCardStatus+0x4c>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008d82:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008d84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d88:	4a54      	ldr	r2, [pc, #336]	@ (8008edc <HAL_SD_GetCardStatus+0x1a0>)
    hsd->State = HAL_SD_STATE_READY;
 8008d8a:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d8c:	6382      	str	r2, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8008d8e:	460e      	mov	r6, r1
    hsd->ErrorCode |= errorstate;
 8008d90:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008d92:	4313      	orrs	r3, r2
 8008d94:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008d96:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008d9e:	f000 fcaf 	bl	8009700 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008da2:	b138      	cbz	r0, 8008db4 <HAL_SD_GetCardStatus+0x78>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008da4:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8008da6:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008da8:	494c      	ldr	r1, [pc, #304]	@ (8008edc <HAL_SD_GetCardStatus+0x1a0>)
 8008daa:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8008dac:	6360      	str	r0, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008dae:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    return HAL_ERROR;
 8008db2:	2601      	movs	r6, #1
}
 8008db4:	4630      	mov	r0, r6
 8008db6:	b017      	add	sp, #92	@ 0x5c
 8008db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  config.DataLength    = 64U;
 8008dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc0:	2340      	movs	r3, #64	@ 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008dc2:	4669      	mov	r1, sp
 8008dc4:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 8008dc6:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008dca:	2260      	movs	r2, #96	@ 0x60
 8008dcc:	2302      	movs	r3, #2
 8008dce:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008dda:	f000 fc7b 	bl	80096d4 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008dde:	6820      	ldr	r0, [r4, #0]
 8008de0:	f001 fdca 	bl	800a978 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008de4:	4603      	mov	r3, r0
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d1c7      	bne.n	8008d7a <HAL_SD_GetCardStatus+0x3e>
  uint32_t *pData = pSDstatus;
 8008dea:	ae06      	add	r6, sp, #24
 8008dec:	e004      	b.n	8008df8 <HAL_SD_GetCardStatus+0xbc>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008dee:	f7fa ff95 	bl	8003d1c <HAL_GetTick>
 8008df2:	1bc0      	subs	r0, r0, r7
 8008df4:	3001      	adds	r0, #1
 8008df6:	d012      	beq.n	8008e1e <HAL_SD_GetCardStatus+0xe2>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008df8:	6820      	ldr	r0, [r4, #0]
 8008dfa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008dfc:	f413 7f95 	tst.w	r3, #298	@ 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008e00:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008e02:	d110      	bne.n	8008e26 <HAL_SD_GetCardStatus+0xea>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008e04:	041b      	lsls	r3, r3, #16
 8008e06:	d5f2      	bpl.n	8008dee <HAL_SD_GetCardStatus+0xb2>
 8008e08:	f106 0820 	add.w	r8, r6, #32
 8008e0c:	e000      	b.n	8008e10 <HAL_SD_GetCardStatus+0xd4>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008e0e:	6820      	ldr	r0, [r4, #0]
 8008e10:	f000 fc46 	bl	80096a0 <SDMMC_ReadFIFO>
 8008e14:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 8008e18:	4546      	cmp	r6, r8
 8008e1a:	d1f8      	bne.n	8008e0e <HAL_SD_GetCardStatus+0xd2>
 8008e1c:	e7e7      	b.n	8008dee <HAL_SD_GetCardStatus+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e1e:	6820      	ldr	r0, [r4, #0]
 8008e20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008e24:	e7b0      	b.n	8008d88 <HAL_SD_GetCardStatus+0x4c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008e26:	0719      	lsls	r1, r3, #28
 8008e28:	d451      	bmi.n	8008ece <HAL_SD_GetCardStatus+0x192>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008e2a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008e2c:	079a      	lsls	r2, r3, #30
 8008e2e:	d450      	bmi.n	8008ed2 <HAL_SD_GetCardStatus+0x196>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008e30:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008e32:	069b      	lsls	r3, r3, #26
 8008e34:	d50a      	bpl.n	8008e4c <HAL_SD_GetCardStatus+0x110>
 8008e36:	e04e      	b.n	8008ed6 <HAL_SD_GetCardStatus+0x19a>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008e38:	f000 fc32 	bl	80096a0 <SDMMC_ReadFIFO>
 8008e3c:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008e40:	f7fa ff6c 	bl	8003d1c <HAL_GetTick>
 8008e44:	1bc0      	subs	r0, r0, r7
 8008e46:	3001      	adds	r0, #1
 8008e48:	d0e9      	beq.n	8008e1e <HAL_SD_GetCardStatus+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e4a:	6820      	ldr	r0, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008e4c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008e4e:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8008e52:	d1f1      	bne.n	8008e38 <HAL_SD_GetCardStatus+0xfc>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008e54:	9906      	ldr	r1, [sp, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8008e56:	461e      	mov	r6, r3
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e58:	4a21      	ldr	r2, [pc, #132]	@ (8008ee0 <HAL_SD_GetCardStatus+0x1a4>)
 8008e5a:	6382      	str	r2, [r0, #56]	@ 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008e5c:	0a0a      	lsrs	r2, r1, #8
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008e5e:	e9dd c308 	ldrd	ip, r3, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008e62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008e6a:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008e6e:	fa5f f883 	uxtb.w	r8, r3
 8008e72:	f027 07ff 	bic.w	r7, r7, #255	@ 0xff
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008e76:	fa1f f982 	uxth.w	r9, r2
 8008e7a:	9a07      	ldr	r2, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008e7c:	ea47 0708 	orr.w	r7, r7, r8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008e80:	f3c1 1881 	ubfx	r8, r1, #6, #2
 8008e84:	fa92 fe82 	rev.w	lr, r2
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008e88:	f3c1 1140 	ubfx	r1, r1, #5, #1
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008e8c:	fa5f f28c 	uxtb.w	r2, ip
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008e90:	f885 8000 	strb.w	r8, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008e94:	7069      	strb	r1, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008e96:	f8a5 9002 	strh.w	r9, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008e9a:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008e9e:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008ea0:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8008ea4:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008ea6:	f3cc 5203 	ubfx	r2, ip, #20, #4
 8008eaa:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008eac:	f3c3 2285 	ubfx	r2, r3, #10, #6
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008eb0:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008eb2:	73aa      	strb	r2, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008eb4:	f3c3 2201 	ubfx	r2, r3, #8, #2
 8008eb8:	73ea      	strb	r2, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008eba:	f3c3 1203 	ubfx	r2, r3, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008ebe:	f003 030f 	and.w	r3, r3, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008ec2:	742a      	strb	r2, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008ec4:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008ec6:	f89d 302b 	ldrb.w	r3, [sp, #43]	@ 0x2b
 8008eca:	74ab      	strb	r3, [r5, #18]
 8008ecc:	e765      	b.n	8008d9a <HAL_SD_GetCardStatus+0x5e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008ece:	2308      	movs	r3, #8
 8008ed0:	e75a      	b.n	8008d88 <HAL_SD_GetCardStatus+0x4c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	e758      	b.n	8008d88 <HAL_SD_GetCardStatus+0x4c>
    return HAL_SD_ERROR_RX_OVERRUN;
 8008ed6:	2320      	movs	r3, #32
 8008ed8:	e756      	b.n	8008d88 <HAL_SD_GetCardStatus+0x4c>
 8008eda:	bf00      	nop
 8008edc:	1fe00fff 	.word	0x1fe00fff
 8008ee0:	18000f3a 	.word	0x18000f3a

08008ee4 <HAL_SD_GetCardInfo>:
{
 8008ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008ee6:	e9d0 e30e 	ldrd	lr, r3, [r0, #56]	@ 0x38
 8008eea:	e9d0 7610 	ldrd	r7, r6, [r0, #64]	@ 0x40
 8008eee:	e9d0 5412 	ldrd	r5, r4, [r0, #72]	@ 0x48
 8008ef2:	e9d0 2014 	ldrd	r2, r0, [r0, #80]	@ 0x50
 8008ef6:	e9c1 e300 	strd	lr, r3, [r1]
 8008efa:	e9c1 2006 	strd	r2, r0, [r1, #24]
 8008efe:	e9c1 7602 	strd	r7, r6, [r1, #8]
}
 8008f02:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008f04:	e9c1 5404 	strd	r5, r4, [r1, #16]
}
 8008f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f0a:	bf00      	nop

08008f0c <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8008f0c:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008f0e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008f10:	4293      	cmp	r3, r2
{
 8008f12:	b530      	push	{r4, r5, lr}
 8008f14:	4604      	mov	r4, r0
 8008f16:	b089      	sub	sp, #36	@ 0x24
 8008f18:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8008f1a:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008f1e:	d041      	beq.n	8008fa4 <HAL_SD_ConfigWideBusOperation+0x98>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008f20:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8008f24:	d03e      	beq.n	8008fa4 <HAL_SD_ConfigWideBusOperation+0x98>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008f26:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8008f2a:	d07e      	beq.n	800902a <HAL_SD_ConfigWideBusOperation+0x11e>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008f2c:	2900      	cmp	r1, #0
 8008f2e:	d05d      	beq.n	8008fec <HAL_SD_ConfigWideBusOperation+0xe0>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f30:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008f32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008f36:	6343      	str	r3, [r0, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008f38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d139      	bne.n	8008fb2 <HAL_SD_ConfigWideBusOperation+0xa6>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008f3e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008f42:	2100      	movs	r1, #0
 8008f44:	f7fe feb8 	bl	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	d048      	beq.n	8008fde <HAL_SD_ConfigWideBusOperation+0xd2>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008f4c:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008f4e:	4b50      	ldr	r3, [pc, #320]	@ (8009090 <HAL_SD_ConfigWideBusOperation+0x184>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008f50:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 8008f52:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008f54:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008f56:	fba3 5300 	umull	r5, r3, r3, r0
 8008f5a:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008f5c:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008f5e:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008f62:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008f64:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008f68:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008f6a:	d20e      	bcs.n	8008f8a <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008f6c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8008f6e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008f72:	d00a      	beq.n	8008f8a <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008f74:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8008f78:	d079      	beq.n	800906e <HAL_SD_ConfigWideBusOperation+0x162>
        if (hsd->Init.ClockDiv == 0U)
 8008f7a:	b112      	cbz	r2, 8008f82 <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008f7c:	0053      	lsls	r3, r2, #1
 8008f7e:	fbb0 f0f3 	udiv	r0, r0, r3
 8008f82:	4b44      	ldr	r3, [pc, #272]	@ (8009094 <HAL_SD_ConfigWideBusOperation+0x188>)
 8008f84:	4298      	cmp	r0, r3
 8008f86:	bf88      	it	hi
 8008f88:	462a      	movhi	r2, r5
      (void)SDMMC_Init(hsd->Instance, Init);
 8008f8a:	a905      	add	r1, sp, #20
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008f8c:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 8008f8e:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 8008f90:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 8008f92:	c903      	ldmia	r1, {r0, r1}
 8008f94:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008f98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f9a:	6820      	ldr	r0, [r4, #0]
 8008f9c:	f000 fb64 	bl	8009668 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008fa0:	6820      	ldr	r0, [r4, #0]
 8008fa2:	e00a      	b.n	8008fba <HAL_SD_ConfigWideBusOperation+0xae>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008faa:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008fac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d0c5      	beq.n	8008f3e <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fb2:	6820      	ldr	r0, [r4, #0]
    status = HAL_ERROR;
 8008fb4:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fb6:	4b38      	ldr	r3, [pc, #224]	@ (8009098 <HAL_SD_ConfigWideBusOperation+0x18c>)
 8008fb8:	6383      	str	r3, [r0, #56]	@ 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008fba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008fbe:	f000 fb9f 	bl	8009700 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fc2:	b130      	cbz	r0, 8008fd2 <HAL_SD_ConfigWideBusOperation+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fc4:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8008fc6:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fc8:	4a33      	ldr	r2, [pc, #204]	@ (8009098 <HAL_SD_ConfigWideBusOperation+0x18c>)
 8008fca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008fcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008fce:	4303      	orrs	r3, r0
 8008fd0:	6363      	str	r3, [r4, #52]	@ 0x34
  hsd->State = HAL_SD_STATE_READY;
 8008fd2:	2301      	movs	r3, #1
}
 8008fd4:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8008fd6:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 8008fda:	b009      	add	sp, #36	@ 0x24
 8008fdc:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008fde:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 8008fe0:	2501      	movs	r5, #1
      (void)SDMMC_Init(hsd->Instance, Init);
 8008fe2:	6820      	ldr	r0, [r4, #0]
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008fe4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008fe8:	6363      	str	r3, [r4, #52]	@ 0x34
      status = HAL_ERROR;
 8008fea:	e7e6      	b.n	8008fba <HAL_SD_ConfigWideBusOperation+0xae>
  uint32_t scr[2U] = {0UL, 0UL};
 8008fec:	2200      	movs	r2, #0
 8008fee:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ff0:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8008ff2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ff6:	f000 fb69 	bl	80096cc <SDMMC_GetResponse>
 8008ffa:	0182      	lsls	r2, r0, #6
 8008ffc:	d434      	bmi.n	8009068 <HAL_SD_ConfigWideBusOperation+0x15c>
  errorstate = SD_FindSCR(hsd, scr);
 8008ffe:	a902      	add	r1, sp, #8
 8009000:	4620      	mov	r0, r4
 8009002:	f7ff fa6d 	bl	80084e0 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009006:	b960      	cbnz	r0, 8009022 <HAL_SD_ConfigWideBusOperation+0x116>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009008:	9b03      	ldr	r3, [sp, #12]
 800900a:	03db      	lsls	r3, r3, #15
 800900c:	d535      	bpl.n	800907a <HAL_SD_ConfigWideBusOperation+0x16e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800900e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009010:	6820      	ldr	r0, [r4, #0]
 8009012:	0409      	lsls	r1, r1, #16
 8009014:	f001 f8ec 	bl	800a1f0 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009018:	b918      	cbnz	r0, 8009022 <HAL_SD_ConfigWideBusOperation+0x116>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800901a:	4601      	mov	r1, r0
 800901c:	6820      	ldr	r0, [r4, #0]
 800901e:	f001 f9cf 	bl	800a3c0 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8009022:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009024:	4303      	orrs	r3, r0
 8009026:	6363      	str	r3, [r4, #52]	@ 0x34
 8009028:	e7c0      	b.n	8008fac <HAL_SD_ConfigWideBusOperation+0xa0>
  uint32_t scr[2U] = {0UL, 0UL};
 800902a:	2200      	movs	r2, #0
 800902c:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800902e:	2100      	movs	r1, #0
 8009030:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8009032:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009036:	f000 fb49 	bl	80096cc <SDMMC_GetResponse>
 800903a:	0180      	lsls	r0, r0, #6
 800903c:	d414      	bmi.n	8009068 <HAL_SD_ConfigWideBusOperation+0x15c>
  errorstate = SD_FindSCR(hsd, scr);
 800903e:	a902      	add	r1, sp, #8
 8009040:	4620      	mov	r0, r4
 8009042:	f7ff fa4d 	bl	80084e0 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009046:	2800      	cmp	r0, #0
 8009048:	d1eb      	bne.n	8009022 <HAL_SD_ConfigWideBusOperation+0x116>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800904a:	9b03      	ldr	r3, [sp, #12]
 800904c:	0359      	lsls	r1, r3, #13
 800904e:	d514      	bpl.n	800907a <HAL_SD_ConfigWideBusOperation+0x16e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009050:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009052:	6820      	ldr	r0, [r4, #0]
 8009054:	0409      	lsls	r1, r1, #16
 8009056:	f001 f8cb 	bl	800a1f0 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800905a:	2800      	cmp	r0, #0
 800905c:	d1e1      	bne.n	8009022 <HAL_SD_ConfigWideBusOperation+0x116>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800905e:	2102      	movs	r1, #2
 8009060:	6820      	ldr	r0, [r4, #0]
 8009062:	f001 f9ad 	bl	800a3c0 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009066:	e7dc      	b.n	8009022 <HAL_SD_ConfigWideBusOperation+0x116>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009068:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800906c:	e7d9      	b.n	8009022 <HAL_SD_ConfigWideBusOperation+0x116>
        if (hsd->Init.ClockDiv == 0U)
 800906e:	b93a      	cbnz	r2, 8009080 <HAL_SD_ConfigWideBusOperation+0x174>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009070:	490a      	ldr	r1, [pc, #40]	@ (800909c <HAL_SD_ConfigWideBusOperation+0x190>)
 8009072:	4288      	cmp	r0, r1
 8009074:	d989      	bls.n	8008f8a <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009076:	0e5a      	lsrs	r2, r3, #25
 8009078:	e787      	b.n	8008f8a <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800907a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800907e:	e7d0      	b.n	8009022 <HAL_SD_ConfigWideBusOperation+0x116>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009080:	0051      	lsls	r1, r2, #1
 8009082:	fbb0 f1f1 	udiv	r1, r0, r1
 8009086:	4805      	ldr	r0, [pc, #20]	@ (800909c <HAL_SD_ConfigWideBusOperation+0x190>)
 8009088:	4281      	cmp	r1, r0
 800908a:	f67f af7e 	bls.w	8008f8a <HAL_SD_ConfigWideBusOperation+0x7e>
 800908e:	e7f2      	b.n	8009076 <HAL_SD_ConfigWideBusOperation+0x16a>
 8009090:	55e63b89 	.word	0x55e63b89
 8009094:	017d7840 	.word	0x017d7840
 8009098:	1fe00fff 	.word	0x1fe00fff
 800909c:	02faf080 	.word	0x02faf080

080090a0 <HAL_SD_Init>:
{
 80090a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090a2:	b087      	sub	sp, #28
  if (hsd == NULL)
 80090a4:	b168      	cbz	r0, 80090c2 <HAL_SD_Init+0x22>
  if (hsd->State == HAL_SD_STATE_RESET)
 80090a6:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80090aa:	4604      	mov	r4, r0
 80090ac:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d044      	beq.n	800913e <HAL_SD_Init+0x9e>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80090b4:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80090b6:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80090b8:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80090bc:	f7ff fd04 	bl	8008ac8 <HAL_SD_InitCard>
 80090c0:	b118      	cbz	r0, 80090ca <HAL_SD_Init+0x2a>
    return HAL_ERROR;
 80090c2:	2601      	movs	r6, #1
}
 80090c4:	4630      	mov	r0, r6
 80090c6:	b007      	add	sp, #28
 80090c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80090ca:	a901      	add	r1, sp, #4
 80090cc:	4620      	mov	r0, r4
 80090ce:	f7ff fe35 	bl	8008d3c <HAL_SD_GetCardStatus>
 80090d2:	2800      	cmp	r0, #0
 80090d4:	d1f5      	bne.n	80090c2 <HAL_SD_Init+0x22>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80090d6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 80090d8:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80090dc:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 80090de:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 80090e2:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 80090e4:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80090e6:	d02e      	beq.n	8009146 <HAL_SD_Init+0xa6>
 80090e8:	4603      	mov	r3, r0
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80090ea:	68e1      	ldr	r1, [r4, #12]
 80090ec:	4620      	mov	r0, r4
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80090ee:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80090f0:	f7ff ff0c 	bl	8008f0c <HAL_SD_ConfigWideBusOperation>
 80090f4:	4606      	mov	r6, r0
 80090f6:	2800      	cmp	r0, #0
 80090f8:	d1e3      	bne.n	80090c2 <HAL_SD_Init+0x22>
  tickstart = HAL_GetTick();
 80090fa:	f7fa fe0f 	bl	8003d1c <HAL_GetTick>
 80090fe:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009100:	e007      	b.n	8009112 <HAL_SD_Init+0x72>
    hsd->ErrorCode |= errorstate;
 8009102:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009104:	4303      	orrs	r3, r0
 8009106:	6363      	str	r3, [r4, #52]	@ 0x34
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009108:	f7fa fe08 	bl	8003d1c <HAL_GetTick>
 800910c:	1bc3      	subs	r3, r0, r7
 800910e:	3301      	adds	r3, #1
 8009110:	d020      	beq.n	8009154 <HAL_SD_Init+0xb4>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009112:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009114:	6820      	ldr	r0, [r4, #0]
 8009116:	0409      	lsls	r1, r1, #16
 8009118:	f001 fb82 	bl	800a820 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800911c:	4605      	mov	r5, r0
 800911e:	2800      	cmp	r0, #0
 8009120:	d1ef      	bne.n	8009102 <HAL_SD_Init+0x62>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009122:	6820      	ldr	r0, [r4, #0]
 8009124:	4629      	mov	r1, r5
 8009126:	f000 fad1 	bl	80096cc <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800912a:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800912e:	2804      	cmp	r0, #4
 8009130:	d1ea      	bne.n	8009108 <HAL_SD_Init+0x68>
  hsd->State = HAL_SD_STATE_READY;
 8009132:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009134:	6365      	str	r5, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009136:	62e5      	str	r5, [r4, #44]	@ 0x2c
  hsd->State = HAL_SD_STATE_READY;
 8009138:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  return HAL_OK;
 800913c:	e7c2      	b.n	80090c4 <HAL_SD_Init+0x24>
    hsd->Lock = HAL_UNLOCKED;
 800913e:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 8009140:	f7fa fba0 	bl	8003884 <HAL_SD_MspInit>
 8009144:	e7b6      	b.n	80090b4 <HAL_SD_Init+0x14>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009146:	4313      	orrs	r3, r2
 8009148:	bf14      	ite	ne
 800914a:	f44f 7300 	movne.w	r3, #512	@ 0x200
 800914e:	f44f 7380 	moveq.w	r3, #256	@ 0x100
 8009152:	e7ca      	b.n	80090ea <HAL_SD_Init+0x4a>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009154:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 8009158:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800915a:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800915c:	6362      	str	r2, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800915e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009162:	e7af      	b.n	80090c4 <HAL_SD_Init+0x24>

08009164 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009164:	6c41      	ldr	r1, [r0, #68]	@ 0x44
{
 8009166:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009168:	0409      	lsls	r1, r1, #16
{
 800916a:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800916c:	6800      	ldr	r0, [r0, #0]
 800916e:	f001 fb57 	bl	800a820 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009172:	4601      	mov	r1, r0
 8009174:	b120      	cbz	r0, 8009180 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8009176:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009178:	2000      	movs	r0, #0
 800917a:	430b      	orrs	r3, r1
 800917c:	6363      	str	r3, [r4, #52]	@ 0x34
}
 800917e:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009180:	6820      	ldr	r0, [r4, #0]
 8009182:	f000 faa3 	bl	80096cc <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009186:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800918a:	bd10      	pop	{r4, pc}

0800918c <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800918c:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800918e:	492c      	ldr	r1, [pc, #176]	@ (8009240 <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 8009190:	695a      	ldr	r2, [r3, #20]
{
 8009192:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009194:	699c      	ldr	r4, [r3, #24]
 8009196:	f044 0408 	orr.w	r4, r4, #8
 800919a:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800919c:	699c      	ldr	r4, [r3, #24]
 800919e:	f044 0410 	orr.w	r4, r4, #16
 80091a2:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 80091a4:	681c      	ldr	r4, [r3, #0]
 80091a6:	f024 0401 	bic.w	r4, r4, #1
 80091aa:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80091ac:	691c      	ldr	r4, [r3, #16]
 80091ae:	4021      	ands	r1, r4
 80091b0:	6119      	str	r1, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80091b2:	6899      	ldr	r1, [r3, #8]
 80091b4:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 80091b8:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80091ba:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 80091be:	2904      	cmp	r1, #4
 80091c0:	d001      	beq.n	80091c6 <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80091c2:	0691      	lsls	r1, r2, #26
 80091c4:	d430      	bmi.n	8009228 <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80091c6:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 80091ca:	2903      	cmp	r1, #3
 80091cc:	d001      	beq.n	80091d2 <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80091ce:	0654      	lsls	r4, r2, #25
 80091d0:	d41f      	bmi.n	8009212 <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80091d2:	0591      	lsls	r1, r2, #22
 80091d4:	d509      	bpl.n	80091ea <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80091d6:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 80091da:	f041 0101 	orr.w	r1, r1, #1
 80091de:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80091e2:	6999      	ldr	r1, [r3, #24]
 80091e4:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 80091e8:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80091ea:	05d2      	lsls	r2, r2, #23
 80091ec:	d509      	bpl.n	8009202 <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80091ee:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 80091f2:	f042 0208 	orr.w	r2, r2, #8
 80091f6:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80091fa:	699a      	ldr	r2, [r3, #24]
 80091fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009200:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009202:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8009204:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 8009208:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800920c:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
}
 8009210:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009212:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 8009216:	f041 0104 	orr.w	r1, r1, #4
 800921a:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800921e:	6999      	ldr	r1, [r3, #24]
 8009220:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8009224:	6199      	str	r1, [r3, #24]
 8009226:	e7d4      	b.n	80091d2 <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009228:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 800922c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009230:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009234:	6999      	ldr	r1, [r3, #24]
 8009236:	f041 0120 	orr.w	r1, r1, #32
 800923a:	6199      	str	r1, [r3, #24]
 800923c:	e7c3      	b.n	80091c6 <SPI_CloseTransfer+0x3a>
 800923e:	bf00      	nop
 8009240:	fffffc90 	.word	0xfffffc90

08009244 <HAL_SPI_Init>:
  if (hspi == NULL)
 8009244:	2800      	cmp	r0, #0
 8009246:	f000 80c8 	beq.w	80093da <HAL_SPI_Init+0x196>
{
 800924a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800924e:	4604      	mov	r4, r0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009250:	4b67      	ldr	r3, [pc, #412]	@ (80093f0 <HAL_SPI_Init+0x1ac>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009252:	2000      	movs	r0, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009254:	6822      	ldr	r2, [r4, #0]
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009256:	68e1      	ldr	r1, [r4, #12]
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009258:	429a      	cmp	r2, r3
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800925a:	62a0      	str	r0, [r4, #40]	@ 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800925c:	d016      	beq.n	800928c <HAL_SPI_Init+0x48>
 800925e:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 8009262:	429a      	cmp	r2, r3
 8009264:	d012      	beq.n	800928c <HAL_SPI_Init+0x48>
 8009266:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800926a:	429a      	cmp	r2, r3
 800926c:	f000 80ad 	beq.w	80093ca <HAL_SPI_Init+0x186>
 8009270:	290f      	cmp	r1, #15
 8009272:	d808      	bhi.n	8009286 <HAL_SPI_Init+0x42>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009274:	6be5      	ldr	r5, [r4, #60]	@ 0x3c

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009276:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800927a:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 800927c:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 800927e:	fb00 3303 	mla	r3, r0, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009282:	2b08      	cmp	r3, #8
 8009284:	d90a      	bls.n	800929c <HAL_SPI_Init+0x58>
    return HAL_ERROR;
 8009286:	2001      	movs	r0, #1
}
 8009288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800928c:	4b58      	ldr	r3, [pc, #352]	@ (80093f0 <HAL_SPI_Init+0x1ac>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800928e:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009290:	429a      	cmp	r2, r3
 8009292:	d06d      	beq.n	8009370 <HAL_SPI_Init+0x12c>
 8009294:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 8009298:	429a      	cmp	r2, r3
 800929a:	d069      	beq.n	8009370 <HAL_SPI_Init+0x12c>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800929c:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 80092a0:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d071      	beq.n	800938c <HAL_SPI_Init+0x148>
 80092a8:	f04f 0800 	mov.w	r8, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 80092ac:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80092ae:	6860      	ldr	r0, [r4, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80092b0:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 80092b4:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80092b8:	f400 0980 	and.w	r9, r0, #4194304	@ 0x400000
  __HAL_SPI_DISABLE(hspi);
 80092bc:	6813      	ldr	r3, [r2, #0]
 80092be:	f023 0301 	bic.w	r3, r3, #1
 80092c2:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80092c4:	6893      	ldr	r3, [r2, #8]
 80092c6:	f403 1cf8 	and.w	ip, r3, #2031616	@ 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80092ca:	69a3      	ldr	r3, [r4, #24]
 80092cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80092d0:	d067      	beq.n	80093a2 <HAL_SPI_Init+0x15e>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80092d2:	f1b9 0f00 	cmp.w	r9, #0
 80092d6:	d001      	beq.n	80092dc <HAL_SPI_Init+0x98>
 80092d8:	2906      	cmp	r1, #6
 80092da:	d86f      	bhi.n	80093bc <HAL_SPI_Init+0x178>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80092dc:	6817      	ldr	r7, [r2, #0]
 80092de:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 80092e2:	6017      	str	r7, [r2, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80092e4:	4303      	orrs	r3, r0
 80092e6:	6b67      	ldr	r7, [r4, #52]	@ 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80092e8:	ea41 0108 	orr.w	r1, r1, r8
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80092ec:	ea43 030e 	orr.w	r3, r3, lr
 80092f0:	433b      	orrs	r3, r7
 80092f2:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 80092f4:	433b      	orrs	r3, r7
 80092f6:	6927      	ldr	r7, [r4, #16]
 80092f8:	433b      	orrs	r3, r7
 80092fa:	6967      	ldr	r7, [r4, #20]
 80092fc:	433b      	orrs	r3, r7
 80092fe:	6a27      	ldr	r7, [r4, #32]
 8009300:	433b      	orrs	r3, r7
 8009302:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8009304:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009306:	69e7      	ldr	r7, [r4, #28]
 8009308:	4339      	orrs	r1, r7
 800930a:	4329      	orrs	r1, r5
 800930c:	ea41 010c 	orr.w	r1, r1, ip
 8009310:	6091      	str	r1, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009312:	68a1      	ldr	r1, [r4, #8]
 8009314:	430b      	orrs	r3, r1
 8009316:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009318:	430b      	orrs	r3, r1
 800931a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800931c:	430b      	orrs	r3, r1
 800931e:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009320:	b9c0      	cbnz	r0, 8009354 <HAL_SPI_Init+0x110>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009322:	6893      	ldr	r3, [r2, #8]
 8009324:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8009328:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800932c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800932e:	6893      	ldr	r3, [r2, #8]
 8009330:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009334:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009338:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800933a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800933c:	f023 0301 	bic.w	r3, r3, #1
 8009340:	6513      	str	r3, [r2, #80]	@ 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009342:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8009344:	2201      	movs	r2, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009346:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  return HAL_OK;
 800934a:	4618      	mov	r0, r3
  hspi->State     = HAL_SPI_STATE_READY;
 800934c:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
}
 8009350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009354:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009356:	f023 0301 	bic.w	r3, r3, #1
 800935a:	6513      	str	r3, [r2, #80]	@ 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800935c:	f1b9 0f00 	cmp.w	r9, #0
 8009360:	d0ef      	beq.n	8009342 <HAL_SPI_Init+0xfe>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009362:	68d3      	ldr	r3, [r2, #12]
 8009364:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8009366:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800936a:	430b      	orrs	r3, r1
 800936c:	60d3      	str	r3, [r2, #12]
 800936e:	e7e8      	b.n	8009342 <HAL_SPI_Init+0xfe>
  data_size = (data_size + 7UL) / 8UL;
 8009370:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009374:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 8009376:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 8009378:	fb00 3303 	mla	r3, r0, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800937c:	2b10      	cmp	r3, #16
 800937e:	d882      	bhi.n	8009286 <HAL_SPI_Init+0x42>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009380:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 8009384:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
 8009388:	2b00      	cmp	r3, #0
 800938a:	d18d      	bne.n	80092a8 <HAL_SPI_Init+0x64>
    HAL_SPI_MspInit(hspi);
 800938c:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800938e:	f884 6080 	strb.w	r6, [r4, #128]	@ 0x80
    HAL_SPI_MspInit(hspi);
 8009392:	f7fa fb09 	bl	80039a8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8009396:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009398:	68e1      	ldr	r1, [r4, #12]
 800939a:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 800939e:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80093a0:	e784      	b.n	80092ac <HAL_SPI_Init+0x68>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80093a2:	f5b0 0f80 	cmp.w	r0, #4194304	@ 0x400000
 80093a6:	d01a      	beq.n	80093de <HAL_SPI_Init+0x19a>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d192      	bne.n	80092d2 <HAL_SPI_Init+0x8e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80093ac:	f1be 5f80 	cmp.w	lr, #268435456	@ 0x10000000
 80093b0:	d194      	bne.n	80092dc <HAL_SPI_Init+0x98>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80093b2:	6817      	ldr	r7, [r2, #0]
 80093b4:	f447 5780 	orr.w	r7, r7, #4096	@ 0x1000
 80093b8:	6017      	str	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80093ba:	e78f      	b.n	80092dc <HAL_SPI_Init+0x98>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80093bc:	6817      	ldr	r7, [r2, #0]
 80093be:	6d26      	ldr	r6, [r4, #80]	@ 0x50
 80093c0:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 80093c4:	4337      	orrs	r7, r6
 80093c6:	6017      	str	r7, [r2, #0]
 80093c8:	e78c      	b.n	80092e4 <HAL_SPI_Init+0xa0>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80093ca:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
  data_size = (data_size + 7UL) / 8UL;
 80093cc:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80093d0:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 80093d2:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 80093d4:	fb00 3303 	mla	r3, r0, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80093d8:	e7d0      	b.n	800937c <HAL_SPI_Init+0x138>
    return HAL_ERROR;
 80093da:	2001      	movs	r0, #1
}
 80093dc:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80093de:	f1be 0f00 	cmp.w	lr, #0
 80093e2:	f47f af79 	bne.w	80092d8 <HAL_SPI_Init+0x94>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80093e6:	6817      	ldr	r7, [r2, #0]
 80093e8:	f447 5780 	orr.w	r7, r7, #4096	@ 0x1000
 80093ec:	6017      	str	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80093ee:	e773      	b.n	80092d8 <HAL_SPI_Init+0x94>
 80093f0:	40013000 	.word	0x40013000

080093f4 <HAL_SPI_Transmit>:
{
 80093f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093f8:	4604      	mov	r4, r0
 80093fa:	461d      	mov	r5, r3
 80093fc:	4689      	mov	r9, r1
 80093fe:	4690      	mov	r8, r2
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009400:	6807      	ldr	r7, [r0, #0]
  tickstart = HAL_GetTick();
 8009402:	f7fa fc8b 	bl	8003d1c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8009406:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 800940a:	2b01      	cmp	r3, #1
 800940c:	d172      	bne.n	80094f4 <HAL_SPI_Transmit+0x100>
  if ((pData == NULL) || (Size == 0UL))
 800940e:	4606      	mov	r6, r0
 8009410:	b2d8      	uxtb	r0, r3
 8009412:	f1b9 0f00 	cmp.w	r9, #0
 8009416:	d06e      	beq.n	80094f6 <HAL_SPI_Transmit+0x102>
 8009418:	fab8 f388 	clz	r3, r8
 800941c:	095b      	lsrs	r3, r3, #5
 800941e:	f1b8 0f00 	cmp.w	r8, #0
 8009422:	d068      	beq.n	80094f6 <HAL_SPI_Transmit+0x102>
  __HAL_LOCK(hspi);
 8009424:	f894 2080 	ldrb.w	r2, [r4, #128]	@ 0x80
 8009428:	2a01      	cmp	r2, #1
 800942a:	d063      	beq.n	80094f4 <HAL_SPI_Transmit+0x100>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800942c:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = NULL;
 800942e:	6663      	str	r3, [r4, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009430:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009434:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009438:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->TxXferCount = Size;
 800943c:	f8a4 8062 	strh.w	r8, [r4, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t) 0UL;
 8009440:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    SPI_1LINE_TX(hspi);
 8009444:	6821      	ldr	r1, [r4, #0]
  __HAL_LOCK(hspi);
 8009446:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800944a:	f8c4 905c 	str.w	r9, [r4, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800944e:	f8a4 8060 	strh.w	r8, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8009452:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009456:	68a3      	ldr	r3, [r4, #8]
 8009458:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800945c:	f000 80eb 	beq.w	8009636 <HAL_SPI_Transmit+0x242>
    SPI_2LINES_TX(hspi);
 8009460:	68cb      	ldr	r3, [r1, #12]
 8009462:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 8009466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800946a:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800946c:	684a      	ldr	r2, [r1, #4]
 800946e:	4b7d      	ldr	r3, [pc, #500]	@ (8009664 <HAL_SPI_Transmit+0x270>)
 8009470:	4013      	ands	r3, r2
 8009472:	ea43 0308 	orr.w	r3, r3, r8
 8009476:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 8009478:	680b      	ldr	r3, [r1, #0]
 800947a:	f043 0301 	orr.w	r3, r3, #1
 800947e:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009480:	6863      	ldr	r3, [r4, #4]
 8009482:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009486:	d103      	bne.n	8009490 <HAL_SPI_Transmit+0x9c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009488:	680b      	ldr	r3, [r1, #0]
 800948a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800948e:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009490:	68e3      	ldr	r3, [r4, #12]
 8009492:	2b0f      	cmp	r3, #15
 8009494:	d84e      	bhi.n	8009534 <HAL_SPI_Transmit+0x140>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009496:	2b07      	cmp	r3, #7
    while (hspi->TxXferCount > 0UL)
 8009498:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800949c:	b29b      	uxth	r3, r3
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800949e:	d92c      	bls.n	80094fa <HAL_SPI_Transmit+0x106>
    while (hspi->TxXferCount > 0UL)
 80094a0:	b9db      	cbnz	r3, 80094da <HAL_SPI_Transmit+0xe6>
 80094a2:	e06b      	b.n	800957c <HAL_SPI_Transmit+0x188>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80094a4:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80094a8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80094aa:	b292      	uxth	r2, r2
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80094ac:	4618      	mov	r0, r3
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80094ae:	2a01      	cmp	r2, #1
 80094b0:	f240 8093 	bls.w	80095da <HAL_SPI_Transmit+0x1e6>
 80094b4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80094b6:	2a00      	cmp	r2, #0
 80094b8:	f000 808f 	beq.w	80095da <HAL_SPI_Transmit+0x1e6>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80094bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80094c0:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80094c2:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80094c4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 80094c8:	3b02      	subs	r3, #2
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 80094d0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d050      	beq.n	800957c <HAL_SPI_Transmit+0x188>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80094da:	694b      	ldr	r3, [r1, #20]
 80094dc:	0798      	lsls	r0, r3, #30
 80094de:	d4e1      	bmi.n	80094a4 <HAL_SPI_Transmit+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094e0:	f7fa fc1c 	bl	8003d1c <HAL_GetTick>
 80094e4:	1b80      	subs	r0, r0, r6
 80094e6:	42a8      	cmp	r0, r5
 80094e8:	d302      	bcc.n	80094f0 <HAL_SPI_Transmit+0xfc>
 80094ea:	1c6a      	adds	r2, r5, #1
 80094ec:	f040 80a8 	bne.w	8009640 <HAL_SPI_Transmit+0x24c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80094f0:	6821      	ldr	r1, [r4, #0]
 80094f2:	e7ed      	b.n	80094d0 <HAL_SPI_Transmit+0xdc>
    return HAL_BUSY;
 80094f4:	2002      	movs	r0, #2
}
 80094f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while (hspi->TxXferCount > 0UL)
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d03e      	beq.n	800957c <HAL_SPI_Transmit+0x188>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80094fe:	694b      	ldr	r3, [r1, #20]
 8009500:	079b      	lsls	r3, r3, #30
 8009502:	f140 8083 	bpl.w	800960c <HAL_SPI_Transmit+0x218>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009506:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800950a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800950c:	b29b      	uxth	r3, r3
 800950e:	2b03      	cmp	r3, #3
 8009510:	d951      	bls.n	80095b6 <HAL_SPI_Transmit+0x1c2>
 8009512:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009514:	2b40      	cmp	r3, #64	@ 0x40
 8009516:	d94e      	bls.n	80095b6 <HAL_SPI_Transmit+0x1c2>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009518:	f852 3b04 	ldr.w	r3, [r2], #4
 800951c:	620b      	str	r3, [r1, #32]
          hspi->TxXferCount -= (uint16_t)4UL;
 800951e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009522:	65e2      	str	r2, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009524:	3b04      	subs	r3, #4
 8009526:	b29b      	uxth	r3, r3
 8009528:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 800952c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8009530:	b29b      	uxth	r3, r3
 8009532:	e7e2      	b.n	80094fa <HAL_SPI_Transmit+0x106>
    while (hspi->TxXferCount > 0UL)
 8009534:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8009538:	b29b      	uxth	r3, r3
 800953a:	b97b      	cbnz	r3, 800955c <HAL_SPI_Transmit+0x168>
 800953c:	e01e      	b.n	800957c <HAL_SPI_Transmit+0x188>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800953e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8009540:	f853 2b04 	ldr.w	r2, [r3], #4
 8009544:	620a      	str	r2, [r1, #32]
        hspi->TxXferCount--;
 8009546:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800954a:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hspi->TxXferCount--;
 800954c:	3a01      	subs	r2, #1
 800954e:	b292      	uxth	r2, r2
 8009550:	f8a4 2062 	strh.w	r2, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 8009554:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
 8009558:	b292      	uxth	r2, r2
 800955a:	b17a      	cbz	r2, 800957c <HAL_SPI_Transmit+0x188>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800955c:	694b      	ldr	r3, [r1, #20]
 800955e:	079b      	lsls	r3, r3, #30
 8009560:	d4ed      	bmi.n	800953e <HAL_SPI_Transmit+0x14a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009562:	f7fa fbdb 	bl	8003d1c <HAL_GetTick>
 8009566:	1b80      	subs	r0, r0, r6
 8009568:	42a8      	cmp	r0, r5
 800956a:	d301      	bcc.n	8009570 <HAL_SPI_Transmit+0x17c>
 800956c:	1c6f      	adds	r7, r5, #1
 800956e:	d167      	bne.n	8009640 <HAL_SPI_Transmit+0x24c>
    while (hspi->TxXferCount > 0UL)
 8009570:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009574:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 8009576:	b292      	uxth	r2, r2
 8009578:	2a00      	cmp	r2, #0
 800957a:	d1ef      	bne.n	800955c <HAL_SPI_Transmit+0x168>
 800957c:	b945      	cbnz	r5, 8009590 <HAL_SPI_Transmit+0x19c>
 800957e:	e04e      	b.n	800961e <HAL_SPI_Transmit+0x22a>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009580:	f7fa fbcc 	bl	8003d1c <HAL_GetTick>
 8009584:	1b80      	subs	r0, r0, r6
 8009586:	42a8      	cmp	r0, r5
 8009588:	d301      	bcc.n	800958e <HAL_SPI_Transmit+0x19a>
 800958a:	1c6a      	adds	r2, r5, #1
 800958c:	d14c      	bne.n	8009628 <HAL_SPI_Transmit+0x234>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800958e:	6821      	ldr	r1, [r4, #0]
 8009590:	694b      	ldr	r3, [r1, #20]
 8009592:	0719      	lsls	r1, r3, #28
 8009594:	d5f4      	bpl.n	8009580 <HAL_SPI_Transmit+0x18c>
  SPI_CloseTransfer(hspi);
 8009596:	4620      	mov	r0, r4
 8009598:	f7ff fdf8 	bl	800918c <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 800959c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800959e:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80095a0:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095a4:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  __HAL_UNLOCK(hspi);
 80095a8:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095ac:	1ac0      	subs	r0, r0, r3
 80095ae:	bf18      	it	ne
 80095b0:	2001      	movne	r0, #1
}
 80095b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80095b6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d917      	bls.n	80095f0 <HAL_SPI_Transmit+0x1fc>
 80095c0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80095c2:	b1ab      	cbz	r3, 80095f0 <HAL_SPI_Transmit+0x1fc>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80095c4:	f832 3b02 	ldrh.w	r3, [r2], #2
 80095c8:	843b      	strh	r3, [r7, #32]
          hspi->TxXferCount -= (uint16_t)2UL;
 80095ca:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80095ce:	65e2      	str	r2, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80095d0:	3b02      	subs	r3, #2
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 80095d8:	e7a8      	b.n	800952c <HAL_SPI_Transmit+0x138>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80095da:	f830 3b02 	ldrh.w	r3, [r0], #2
 80095de:	843b      	strh	r3, [r7, #32]
          hspi->TxXferCount--;
 80095e0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80095e4:	65e0      	str	r0, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 80095e6:	3b01      	subs	r3, #1
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 80095ee:	e76f      	b.n	80094d0 <HAL_SPI_Transmit+0xdc>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80095f0:	7813      	ldrb	r3, [r2, #0]
 80095f2:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80095f6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80095f8:	6821      	ldr	r1, [r4, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80095fa:	3301      	adds	r3, #1
 80095fc:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 80095fe:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8009602:	3b01      	subs	r3, #1
 8009604:	b29b      	uxth	r3, r3
 8009606:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 800960a:	e78f      	b.n	800952c <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800960c:	f7fa fb86 	bl	8003d1c <HAL_GetTick>
 8009610:	1b80      	subs	r0, r0, r6
 8009612:	42a8      	cmp	r0, r5
 8009614:	d301      	bcc.n	800961a <HAL_SPI_Transmit+0x226>
 8009616:	1c68      	adds	r0, r5, #1
 8009618:	d112      	bne.n	8009640 <HAL_SPI_Transmit+0x24c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800961a:	6821      	ldr	r1, [r4, #0]
 800961c:	e786      	b.n	800952c <HAL_SPI_Transmit+0x138>
 800961e:	694b      	ldr	r3, [r1, #20]
 8009620:	071b      	lsls	r3, r3, #28
 8009622:	d4b8      	bmi.n	8009596 <HAL_SPI_Transmit+0x1a2>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009624:	f7fa fb7a 	bl	8003d1c <HAL_GetTick>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009628:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800962c:	f043 0320 	orr.w	r3, r3, #32
 8009630:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8009634:	e7af      	b.n	8009596 <HAL_SPI_Transmit+0x1a2>
    SPI_1LINE_TX(hspi);
 8009636:	680b      	ldr	r3, [r1, #0]
 8009638:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800963c:	600b      	str	r3, [r1, #0]
 800963e:	e715      	b.n	800946c <HAL_SPI_Transmit+0x78>
          SPI_CloseTransfer(hspi);
 8009640:	4620      	mov	r0, r4
 8009642:	f7ff fda3 	bl	800918c <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009646:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800964a:	2201      	movs	r2, #1
          return HAL_TIMEOUT;
 800964c:	2003      	movs	r0, #3
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800964e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009652:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(hspi);
 8009656:	2300      	movs	r3, #0
          hspi->State = HAL_SPI_STATE_READY;
 8009658:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
          __HAL_UNLOCK(hspi);
 800965c:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 8009660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009664:	ffff0000 	.word	0xffff0000

08009668 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009668:	b084      	sub	sp, #16
 800966a:	b410      	push	{r4}
 800966c:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009670:	4614      	mov	r4, r2
{
 8009672:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 8009676:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 8009678:	9904      	ldr	r1, [sp, #16]
{
 800967a:	4602      	mov	r2, r0
             Init.BusWide             | \
 800967c:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 800967e:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009680:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 8009682:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 8009684:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 8009686:	4303      	orrs	r3, r0

  return HAL_OK;
}
 8009688:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 800968a:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800968c:	4903      	ldr	r1, [pc, #12]	@ (800969c <SDMMC_Init+0x34>)
 800968e:	4021      	ands	r1, r4
}
 8009690:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009694:	430b      	orrs	r3, r1
}
 8009696:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009698:	6053      	str	r3, [r2, #4]
}
 800969a:	4770      	bx	lr
 800969c:	ffc02c00 	.word	0xffc02c00

080096a0 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80096a0:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop

080096a8 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80096a8:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80096aa:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 80096ac:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 80096ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 80096b2:	4770      	bx	lr

080096b4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80096b4:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 80096b6:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	f042 0203 	orr.w	r2, r2, #3
 80096be:	601a      	str	r2, [r3, #0]
}
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop

080096c4 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80096c4:	6800      	ldr	r0, [r0, #0]
}
 80096c6:	f000 0003 	and.w	r0, r0, #3
 80096ca:	4770      	bx	lr

080096cc <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80096cc:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 80096ce:	5840      	ldr	r0, [r0, r1]
}
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop

080096d4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80096d4:	b430      	push	{r4, r5}

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80096d6:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
                       Data->TransferDir   | \
 80096da:	690d      	ldr	r5, [r1, #16]
{
 80096dc:	4602      	mov	r2, r0
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80096de:	4323      	orrs	r3, r4
  SDMMCx->DTIMER = Data->DataTimeOut;
 80096e0:	6808      	ldr	r0, [r1, #0]
  SDMMCx->DLEN = Data->DataLength;
 80096e2:	684c      	ldr	r4, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 80096e4:	6250      	str	r0, [r2, #36]	@ 0x24
                       Data->TransferDir   | \
 80096e6:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 80096e8:	6948      	ldr	r0, [r1, #20]
  SDMMCx->DLEN = Data->DataLength;
 80096ea:	6294      	str	r4, [r2, #40]	@ 0x28
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80096ec:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
                       Data->TransferMode  | \
 80096ee:	4303      	orrs	r3, r0

  return HAL_OK;

}
 80096f0:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80096f2:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80096f6:	430b      	orrs	r3, r1
}
 80096f8:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80096fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop

08009700 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009700:	4a4f      	ldr	r2, [pc, #316]	@ (8009840 <SDMMC_CmdBlockLength+0x140>)
{
 8009702:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009704:	4b4f      	ldr	r3, [pc, #316]	@ (8009844 <SDMMC_CmdBlockLength+0x144>)
 8009706:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009708:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800970c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009710:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009714:	484c      	ldr	r0, [pc, #304]	@ (8009848 <SDMMC_CmdBlockLength+0x148>)
 8009716:	f241 1310 	movw	r3, #4368	@ 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800971a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800971c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800971e:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009722:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009724:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009728:	f8cc 300c 	str.w	r3, [ip, #12]

  do
  {
    if (count-- == 0U)
 800972c:	1e53      	subs	r3, r2, #1
 800972e:	b14a      	cbz	r2, 8009744 <SDMMC_CmdBlockLength+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009730:	4946      	ldr	r1, [pc, #280]	@ (800984c <SDMMC_CmdBlockLength+0x14c>)
    sta_reg = SDMMCx->STA;
 8009732:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 8009736:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009738:	420a      	tst	r2, r1
 800973a:	d001      	beq.n	8009740 <SDMMC_CmdBlockLength+0x40>
 800973c:	0492      	lsls	r2, r2, #18
 800973e:	d504      	bpl.n	800974a <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
 8009740:	1c58      	adds	r0, r3, #1
 8009742:	d1f6      	bne.n	8009732 <SDMMC_CmdBlockLength+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009744:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009748:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800974a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800974e:	075b      	lsls	r3, r3, #29
 8009750:	d443      	bmi.n	80097da <SDMMC_CmdBlockLength+0xda>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009752:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009756:	07d8      	lsls	r0, r3, #31
 8009758:	d409      	bmi.n	800976e <SDMMC_CmdBlockLength+0x6e>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800975a:	4b3d      	ldr	r3, [pc, #244]	@ (8009850 <SDMMC_CmdBlockLength+0x150>)
 800975c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009760:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b10      	cmp	r3, #16
 8009768:	d005      	beq.n	8009776 <SDMMC_CmdBlockLength+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800976a:	2001      	movs	r0, #1
 800976c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800976e:	2301      	movs	r3, #1
 8009770:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009774:	e7f9      	b.n	800976a <SDMMC_CmdBlockLength+0x6a>
  return (*(__IO uint32_t *) tmp);
 8009776:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800977a:	4836      	ldr	r0, [pc, #216]	@ (8009854 <SDMMC_CmdBlockLength+0x154>)
 800977c:	4018      	ands	r0, r3
 800977e:	b358      	cbz	r0, 80097d8 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009780:	2b00      	cmp	r3, #0
 8009782:	db2f      	blt.n	80097e4 <SDMMC_CmdBlockLength+0xe4>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009784:	0059      	lsls	r1, r3, #1
 8009786:	d430      	bmi.n	80097ea <SDMMC_CmdBlockLength+0xea>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009788:	009a      	lsls	r2, r3, #2
 800978a:	d430      	bmi.n	80097ee <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800978c:	00d9      	lsls	r1, r3, #3
 800978e:	d430      	bmi.n	80097f2 <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009790:	011a      	lsls	r2, r3, #4
 8009792:	d431      	bmi.n	80097f8 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009794:	0159      	lsls	r1, r3, #5
 8009796:	d432      	bmi.n	80097fe <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009798:	01da      	lsls	r2, r3, #7
 800979a:	d433      	bmi.n	8009804 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800979c:	0219      	lsls	r1, r3, #8
 800979e:	d434      	bmi.n	800980a <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80097a0:	025a      	lsls	r2, r3, #9
 80097a2:	d435      	bmi.n	8009810 <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80097a4:	0299      	lsls	r1, r3, #10
 80097a6:	d43f      	bmi.n	8009828 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80097a8:	02da      	lsls	r2, r3, #11
 80097aa:	d43a      	bmi.n	8009822 <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80097ac:	0359      	lsls	r1, r3, #13
 80097ae:	d435      	bmi.n	800981c <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80097b0:	039a      	lsls	r2, r3, #14
 80097b2:	d430      	bmi.n	8009816 <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80097b4:	03d9      	lsls	r1, r3, #15
 80097b6:	d440      	bmi.n	800983a <SDMMC_CmdBlockLength+0x13a>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80097b8:	041a      	lsls	r2, r3, #16
 80097ba:	d43b      	bmi.n	8009834 <SDMMC_CmdBlockLength+0x134>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80097bc:	0459      	lsls	r1, r3, #17
 80097be:	d436      	bmi.n	800982e <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80097c0:	049a      	lsls	r2, r3, #18
 80097c2:	d407      	bmi.n	80097d4 <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80097c4:	f013 0f08 	tst.w	r3, #8
 80097c8:	bf0c      	ite	eq
 80097ca:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 80097ce:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 80097d2:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 80097d4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 80097d8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80097da:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097dc:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80097de:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097e2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80097e4:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80097e8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80097ea:	2040      	movs	r0, #64	@ 0x40
 80097ec:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80097ee:	2080      	movs	r0, #128	@ 0x80
 80097f0:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80097f2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80097f6:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80097f8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80097fc:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80097fe:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009802:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009804:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009808:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800980a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800980e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009810:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009814:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009816:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800981a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800981c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009820:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009822:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009826:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009828:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800982c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800982e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009832:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009834:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009838:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800983a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800983e:	4770      	bx	lr
 8009840:	2400000c 	.word	0x2400000c
 8009844:	10624dd3 	.word	0x10624dd3
 8009848:	fffee0c0 	.word	0xfffee0c0
 800984c:	00200045 	.word	0x00200045
 8009850:	002000c5 	.word	0x002000c5
 8009854:	fdffe008 	.word	0xfdffe008

08009858 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009858:	4a4f      	ldr	r2, [pc, #316]	@ (8009998 <SDMMC_CmdReadSingleBlock+0x140>)
{
 800985a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800985c:	4b4f      	ldr	r3, [pc, #316]	@ (800999c <SDMMC_CmdReadSingleBlock+0x144>)
 800985e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009860:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009864:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009868:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800986c:	484c      	ldr	r0, [pc, #304]	@ (80099a0 <SDMMC_CmdReadSingleBlock+0x148>)
 800986e:	f241 1311 	movw	r3, #4369	@ 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009872:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009874:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009876:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800987a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800987c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009880:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009884:	1e53      	subs	r3, r2, #1
 8009886:	b14a      	cbz	r2, 800989c <SDMMC_CmdReadSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009888:	4946      	ldr	r1, [pc, #280]	@ (80099a4 <SDMMC_CmdReadSingleBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 800988a:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800988e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009890:	420a      	tst	r2, r1
 8009892:	d001      	beq.n	8009898 <SDMMC_CmdReadSingleBlock+0x40>
 8009894:	0492      	lsls	r2, r2, #18
 8009896:	d504      	bpl.n	80098a2 <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 8009898:	1c58      	adds	r0, r3, #1
 800989a:	d1f6      	bne.n	800988a <SDMMC_CmdReadSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800989c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80098a0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80098a2:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 80098a6:	075b      	lsls	r3, r3, #29
 80098a8:	d443      	bmi.n	8009932 <SDMMC_CmdReadSingleBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80098aa:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 80098ae:	07d8      	lsls	r0, r3, #31
 80098b0:	d409      	bmi.n	80098c6 <SDMMC_CmdReadSingleBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80098b2:	4b3d      	ldr	r3, [pc, #244]	@ (80099a8 <SDMMC_CmdReadSingleBlock+0x150>)
 80098b4:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80098b8:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	2b11      	cmp	r3, #17
 80098c0:	d005      	beq.n	80098ce <SDMMC_CmdReadSingleBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098c2:	2001      	movs	r0, #1
 80098c4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80098c6:	2301      	movs	r3, #1
 80098c8:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098cc:	e7f9      	b.n	80098c2 <SDMMC_CmdReadSingleBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 80098ce:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80098d2:	4836      	ldr	r0, [pc, #216]	@ (80099ac <SDMMC_CmdReadSingleBlock+0x154>)
 80098d4:	4018      	ands	r0, r3
 80098d6:	b358      	cbz	r0, 8009930 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80098d8:	2b00      	cmp	r3, #0
 80098da:	db2f      	blt.n	800993c <SDMMC_CmdReadSingleBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80098dc:	0059      	lsls	r1, r3, #1
 80098de:	d430      	bmi.n	8009942 <SDMMC_CmdReadSingleBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80098e0:	009a      	lsls	r2, r3, #2
 80098e2:	d430      	bmi.n	8009946 <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80098e4:	00d9      	lsls	r1, r3, #3
 80098e6:	d430      	bmi.n	800994a <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80098e8:	011a      	lsls	r2, r3, #4
 80098ea:	d431      	bmi.n	8009950 <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80098ec:	0159      	lsls	r1, r3, #5
 80098ee:	d432      	bmi.n	8009956 <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80098f0:	01da      	lsls	r2, r3, #7
 80098f2:	d433      	bmi.n	800995c <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80098f4:	0219      	lsls	r1, r3, #8
 80098f6:	d434      	bmi.n	8009962 <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80098f8:	025a      	lsls	r2, r3, #9
 80098fa:	d435      	bmi.n	8009968 <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80098fc:	0299      	lsls	r1, r3, #10
 80098fe:	d43f      	bmi.n	8009980 <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009900:	02da      	lsls	r2, r3, #11
 8009902:	d43a      	bmi.n	800997a <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009904:	0359      	lsls	r1, r3, #13
 8009906:	d435      	bmi.n	8009974 <SDMMC_CmdReadSingleBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009908:	039a      	lsls	r2, r3, #14
 800990a:	d430      	bmi.n	800996e <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800990c:	03d9      	lsls	r1, r3, #15
 800990e:	d440      	bmi.n	8009992 <SDMMC_CmdReadSingleBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009910:	041a      	lsls	r2, r3, #16
 8009912:	d43b      	bmi.n	800998c <SDMMC_CmdReadSingleBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009914:	0459      	lsls	r1, r3, #17
 8009916:	d436      	bmi.n	8009986 <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009918:	049a      	lsls	r2, r3, #18
 800991a:	d407      	bmi.n	800992c <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800991c:	f013 0f08 	tst.w	r3, #8
 8009920:	bf0c      	ite	eq
 8009922:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8009926:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800992a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800992c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009930:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009932:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009934:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009936:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800993a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800993c:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009940:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009942:	2040      	movs	r0, #64	@ 0x40
 8009944:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009946:	2080      	movs	r0, #128	@ 0x80
 8009948:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800994a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800994e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009950:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009954:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009956:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800995a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800995c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009960:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009962:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009966:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009968:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800996c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800996e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8009972:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009974:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009978:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800997a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800997e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009980:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009984:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009986:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800998a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800998c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009990:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009992:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009996:	4770      	bx	lr
 8009998:	2400000c 	.word	0x2400000c
 800999c:	10624dd3 	.word	0x10624dd3
 80099a0:	fffee0c0 	.word	0xfffee0c0
 80099a4:	00200045 	.word	0x00200045
 80099a8:	002000c5 	.word	0x002000c5
 80099ac:	fdffe008 	.word	0xfdffe008

080099b0 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80099b0:	4a4f      	ldr	r2, [pc, #316]	@ (8009af0 <SDMMC_CmdReadMultiBlock+0x140>)
{
 80099b2:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80099b4:	4b4f      	ldr	r3, [pc, #316]	@ (8009af4 <SDMMC_CmdReadMultiBlock+0x144>)
 80099b6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80099b8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80099bc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80099c0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80099c4:	484c      	ldr	r0, [pc, #304]	@ (8009af8 <SDMMC_CmdReadMultiBlock+0x148>)
 80099c6:	f241 1312 	movw	r3, #4370	@ 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80099ca:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80099cc:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80099ce:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80099d2:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80099d4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80099d8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 80099dc:	1e53      	subs	r3, r2, #1
 80099de:	b14a      	cbz	r2, 80099f4 <SDMMC_CmdReadMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80099e0:	4946      	ldr	r1, [pc, #280]	@ (8009afc <SDMMC_CmdReadMultiBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 80099e2:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 80099e6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80099e8:	420a      	tst	r2, r1
 80099ea:	d001      	beq.n	80099f0 <SDMMC_CmdReadMultiBlock+0x40>
 80099ec:	0492      	lsls	r2, r2, #18
 80099ee:	d504      	bpl.n	80099fa <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 80099f0:	1c58      	adds	r0, r3, #1
 80099f2:	d1f6      	bne.n	80099e2 <SDMMC_CmdReadMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 80099f4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80099f8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80099fa:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 80099fe:	075b      	lsls	r3, r3, #29
 8009a00:	d443      	bmi.n	8009a8a <SDMMC_CmdReadMultiBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a02:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009a06:	07d8      	lsls	r0, r3, #31
 8009a08:	d409      	bmi.n	8009a1e <SDMMC_CmdReadMultiBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8009b00 <SDMMC_CmdReadMultiBlock+0x150>)
 8009a0c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009a10:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	2b12      	cmp	r3, #18
 8009a18:	d005      	beq.n	8009a26 <SDMMC_CmdReadMultiBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a1a:	2001      	movs	r0, #1
 8009a1c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a1e:	2301      	movs	r3, #1
 8009a20:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a24:	e7f9      	b.n	8009a1a <SDMMC_CmdReadMultiBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 8009a26:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009a2a:	4836      	ldr	r0, [pc, #216]	@ (8009b04 <SDMMC_CmdReadMultiBlock+0x154>)
 8009a2c:	4018      	ands	r0, r3
 8009a2e:	b358      	cbz	r0, 8009a88 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	db2f      	blt.n	8009a94 <SDMMC_CmdReadMultiBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009a34:	0059      	lsls	r1, r3, #1
 8009a36:	d430      	bmi.n	8009a9a <SDMMC_CmdReadMultiBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009a38:	009a      	lsls	r2, r3, #2
 8009a3a:	d430      	bmi.n	8009a9e <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009a3c:	00d9      	lsls	r1, r3, #3
 8009a3e:	d430      	bmi.n	8009aa2 <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009a40:	011a      	lsls	r2, r3, #4
 8009a42:	d431      	bmi.n	8009aa8 <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009a44:	0159      	lsls	r1, r3, #5
 8009a46:	d432      	bmi.n	8009aae <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009a48:	01da      	lsls	r2, r3, #7
 8009a4a:	d433      	bmi.n	8009ab4 <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009a4c:	0219      	lsls	r1, r3, #8
 8009a4e:	d434      	bmi.n	8009aba <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009a50:	025a      	lsls	r2, r3, #9
 8009a52:	d435      	bmi.n	8009ac0 <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009a54:	0299      	lsls	r1, r3, #10
 8009a56:	d43f      	bmi.n	8009ad8 <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009a58:	02da      	lsls	r2, r3, #11
 8009a5a:	d43a      	bmi.n	8009ad2 <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009a5c:	0359      	lsls	r1, r3, #13
 8009a5e:	d435      	bmi.n	8009acc <SDMMC_CmdReadMultiBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009a60:	039a      	lsls	r2, r3, #14
 8009a62:	d430      	bmi.n	8009ac6 <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009a64:	03d9      	lsls	r1, r3, #15
 8009a66:	d440      	bmi.n	8009aea <SDMMC_CmdReadMultiBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009a68:	041a      	lsls	r2, r3, #16
 8009a6a:	d43b      	bmi.n	8009ae4 <SDMMC_CmdReadMultiBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009a6c:	0459      	lsls	r1, r3, #17
 8009a6e:	d436      	bmi.n	8009ade <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009a70:	049a      	lsls	r2, r3, #18
 8009a72:	d407      	bmi.n	8009a84 <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009a74:	f013 0f08 	tst.w	r3, #8
 8009a78:	bf0c      	ite	eq
 8009a7a:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8009a7e:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8009a82:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009a84:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009a88:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a8a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a8c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a8e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a92:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009a94:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009a98:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009a9a:	2040      	movs	r0, #64	@ 0x40
 8009a9c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009a9e:	2080      	movs	r0, #128	@ 0x80
 8009aa0:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009aa2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009aa6:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009aa8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009aac:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009aae:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009ab2:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009ab4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009ab8:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009aba:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009abe:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ac0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009ac4:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009ac6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8009aca:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009acc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009ad0:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009ad2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009ad6:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009ad8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009adc:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009ade:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009ae2:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009ae4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009ae8:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009aea:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009aee:	4770      	bx	lr
 8009af0:	2400000c 	.word	0x2400000c
 8009af4:	10624dd3 	.word	0x10624dd3
 8009af8:	fffee0c0 	.word	0xfffee0c0
 8009afc:	00200045 	.word	0x00200045
 8009b00:	002000c5 	.word	0x002000c5
 8009b04:	fdffe008 	.word	0xfdffe008

08009b08 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b08:	4a4f      	ldr	r2, [pc, #316]	@ (8009c48 <SDMMC_CmdWriteSingleBlock+0x140>)
{
 8009b0a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b0c:	4b4f      	ldr	r3, [pc, #316]	@ (8009c4c <SDMMC_CmdWriteSingleBlock+0x144>)
 8009b0e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009b10:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b14:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009b18:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009b1c:	484c      	ldr	r0, [pc, #304]	@ (8009c50 <SDMMC_CmdWriteSingleBlock+0x148>)
 8009b1e:	f241 1318 	movw	r3, #4376	@ 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b22:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009b24:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b26:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009b2a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b2c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009b30:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009b34:	1e53      	subs	r3, r2, #1
 8009b36:	b14a      	cbz	r2, 8009b4c <SDMMC_CmdWriteSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009b38:	4946      	ldr	r1, [pc, #280]	@ (8009c54 <SDMMC_CmdWriteSingleBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 8009b3a:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 8009b3e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009b40:	420a      	tst	r2, r1
 8009b42:	d001      	beq.n	8009b48 <SDMMC_CmdWriteSingleBlock+0x40>
 8009b44:	0492      	lsls	r2, r2, #18
 8009b46:	d504      	bpl.n	8009b52 <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
 8009b48:	1c58      	adds	r0, r3, #1
 8009b4a:	d1f6      	bne.n	8009b3a <SDMMC_CmdWriteSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009b4c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009b50:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b52:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009b56:	075b      	lsls	r3, r3, #29
 8009b58:	d443      	bmi.n	8009be2 <SDMMC_CmdWriteSingleBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009b5a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009b5e:	07d8      	lsls	r0, r3, #31
 8009b60:	d409      	bmi.n	8009b76 <SDMMC_CmdWriteSingleBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009b62:	4b3d      	ldr	r3, [pc, #244]	@ (8009c58 <SDMMC_CmdWriteSingleBlock+0x150>)
 8009b64:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009b68:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	2b18      	cmp	r3, #24
 8009b70:	d005      	beq.n	8009b7e <SDMMC_CmdWriteSingleBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b72:	2001      	movs	r0, #1
 8009b74:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009b76:	2301      	movs	r3, #1
 8009b78:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b7c:	e7f9      	b.n	8009b72 <SDMMC_CmdWriteSingleBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 8009b7e:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009b82:	4836      	ldr	r0, [pc, #216]	@ (8009c5c <SDMMC_CmdWriteSingleBlock+0x154>)
 8009b84:	4018      	ands	r0, r3
 8009b86:	b358      	cbz	r0, 8009be0 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	db2f      	blt.n	8009bec <SDMMC_CmdWriteSingleBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009b8c:	0059      	lsls	r1, r3, #1
 8009b8e:	d430      	bmi.n	8009bf2 <SDMMC_CmdWriteSingleBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009b90:	009a      	lsls	r2, r3, #2
 8009b92:	d430      	bmi.n	8009bf6 <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009b94:	00d9      	lsls	r1, r3, #3
 8009b96:	d430      	bmi.n	8009bfa <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009b98:	011a      	lsls	r2, r3, #4
 8009b9a:	d431      	bmi.n	8009c00 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009b9c:	0159      	lsls	r1, r3, #5
 8009b9e:	d432      	bmi.n	8009c06 <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009ba0:	01da      	lsls	r2, r3, #7
 8009ba2:	d433      	bmi.n	8009c0c <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009ba4:	0219      	lsls	r1, r3, #8
 8009ba6:	d434      	bmi.n	8009c12 <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009ba8:	025a      	lsls	r2, r3, #9
 8009baa:	d435      	bmi.n	8009c18 <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009bac:	0299      	lsls	r1, r3, #10
 8009bae:	d43f      	bmi.n	8009c30 <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009bb0:	02da      	lsls	r2, r3, #11
 8009bb2:	d43a      	bmi.n	8009c2a <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009bb4:	0359      	lsls	r1, r3, #13
 8009bb6:	d435      	bmi.n	8009c24 <SDMMC_CmdWriteSingleBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009bb8:	039a      	lsls	r2, r3, #14
 8009bba:	d430      	bmi.n	8009c1e <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009bbc:	03d9      	lsls	r1, r3, #15
 8009bbe:	d440      	bmi.n	8009c42 <SDMMC_CmdWriteSingleBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009bc0:	041a      	lsls	r2, r3, #16
 8009bc2:	d43b      	bmi.n	8009c3c <SDMMC_CmdWriteSingleBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009bc4:	0459      	lsls	r1, r3, #17
 8009bc6:	d436      	bmi.n	8009c36 <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009bc8:	049a      	lsls	r2, r3, #18
 8009bca:	d407      	bmi.n	8009bdc <SDMMC_CmdWriteSingleBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009bcc:	f013 0f08 	tst.w	r3, #8
 8009bd0:	bf0c      	ite	eq
 8009bd2:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8009bd6:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8009bda:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009bdc:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009be0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009be2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009be4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009be6:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009bea:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009bec:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009bf0:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009bf2:	2040      	movs	r0, #64	@ 0x40
 8009bf4:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009bf6:	2080      	movs	r0, #128	@ 0x80
 8009bf8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009bfa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009bfe:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009c00:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009c04:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009c06:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009c0a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009c0c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009c10:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c12:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009c16:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c18:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009c1c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009c1e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8009c22:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009c24:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009c28:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009c2a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009c2e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009c30:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009c34:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009c36:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009c3a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009c3c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009c40:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009c42:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009c46:	4770      	bx	lr
 8009c48:	2400000c 	.word	0x2400000c
 8009c4c:	10624dd3 	.word	0x10624dd3
 8009c50:	fffee0c0 	.word	0xfffee0c0
 8009c54:	00200045 	.word	0x00200045
 8009c58:	002000c5 	.word	0x002000c5
 8009c5c:	fdffe008 	.word	0xfdffe008

08009c60 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009c60:	4a4f      	ldr	r2, [pc, #316]	@ (8009da0 <SDMMC_CmdWriteMultiBlock+0x140>)
{
 8009c62:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009c64:	4b4f      	ldr	r3, [pc, #316]	@ (8009da4 <SDMMC_CmdWriteMultiBlock+0x144>)
 8009c66:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009c68:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009c6c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009c70:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009c74:	484c      	ldr	r0, [pc, #304]	@ (8009da8 <SDMMC_CmdWriteMultiBlock+0x148>)
 8009c76:	f241 1319 	movw	r3, #4377	@ 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009c7a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009c7c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009c7e:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009c82:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009c84:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009c88:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009c8c:	1e53      	subs	r3, r2, #1
 8009c8e:	b14a      	cbz	r2, 8009ca4 <SDMMC_CmdWriteMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009c90:	4946      	ldr	r1, [pc, #280]	@ (8009dac <SDMMC_CmdWriteMultiBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 8009c92:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 8009c96:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009c98:	420a      	tst	r2, r1
 8009c9a:	d001      	beq.n	8009ca0 <SDMMC_CmdWriteMultiBlock+0x40>
 8009c9c:	0492      	lsls	r2, r2, #18
 8009c9e:	d504      	bpl.n	8009caa <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 8009ca0:	1c58      	adds	r0, r3, #1
 8009ca2:	d1f6      	bne.n	8009c92 <SDMMC_CmdWriteMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009ca4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009ca8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009caa:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009cae:	075b      	lsls	r3, r3, #29
 8009cb0:	d443      	bmi.n	8009d3a <SDMMC_CmdWriteMultiBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009cb2:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009cb6:	07d8      	lsls	r0, r3, #31
 8009cb8:	d409      	bmi.n	8009cce <SDMMC_CmdWriteMultiBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009cba:	4b3d      	ldr	r3, [pc, #244]	@ (8009db0 <SDMMC_CmdWriteMultiBlock+0x150>)
 8009cbc:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009cc0:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b19      	cmp	r3, #25
 8009cc8:	d005      	beq.n	8009cd6 <SDMMC_CmdWriteMultiBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009cca:	2001      	movs	r0, #1
 8009ccc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009cce:	2301      	movs	r3, #1
 8009cd0:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009cd4:	e7f9      	b.n	8009cca <SDMMC_CmdWriteMultiBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 8009cd6:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009cda:	4836      	ldr	r0, [pc, #216]	@ (8009db4 <SDMMC_CmdWriteMultiBlock+0x154>)
 8009cdc:	4018      	ands	r0, r3
 8009cde:	b358      	cbz	r0, 8009d38 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	db2f      	blt.n	8009d44 <SDMMC_CmdWriteMultiBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009ce4:	0059      	lsls	r1, r3, #1
 8009ce6:	d430      	bmi.n	8009d4a <SDMMC_CmdWriteMultiBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009ce8:	009a      	lsls	r2, r3, #2
 8009cea:	d430      	bmi.n	8009d4e <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009cec:	00d9      	lsls	r1, r3, #3
 8009cee:	d430      	bmi.n	8009d52 <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009cf0:	011a      	lsls	r2, r3, #4
 8009cf2:	d431      	bmi.n	8009d58 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009cf4:	0159      	lsls	r1, r3, #5
 8009cf6:	d432      	bmi.n	8009d5e <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009cf8:	01da      	lsls	r2, r3, #7
 8009cfa:	d433      	bmi.n	8009d64 <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009cfc:	0219      	lsls	r1, r3, #8
 8009cfe:	d434      	bmi.n	8009d6a <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009d00:	025a      	lsls	r2, r3, #9
 8009d02:	d435      	bmi.n	8009d70 <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009d04:	0299      	lsls	r1, r3, #10
 8009d06:	d43f      	bmi.n	8009d88 <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009d08:	02da      	lsls	r2, r3, #11
 8009d0a:	d43a      	bmi.n	8009d82 <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009d0c:	0359      	lsls	r1, r3, #13
 8009d0e:	d435      	bmi.n	8009d7c <SDMMC_CmdWriteMultiBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009d10:	039a      	lsls	r2, r3, #14
 8009d12:	d430      	bmi.n	8009d76 <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009d14:	03d9      	lsls	r1, r3, #15
 8009d16:	d440      	bmi.n	8009d9a <SDMMC_CmdWriteMultiBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009d18:	041a      	lsls	r2, r3, #16
 8009d1a:	d43b      	bmi.n	8009d94 <SDMMC_CmdWriteMultiBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009d1c:	0459      	lsls	r1, r3, #17
 8009d1e:	d436      	bmi.n	8009d8e <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009d20:	049a      	lsls	r2, r3, #18
 8009d22:	d407      	bmi.n	8009d34 <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009d24:	f013 0f08 	tst.w	r3, #8
 8009d28:	bf0c      	ite	eq
 8009d2a:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8009d2e:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8009d32:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009d34:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009d38:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d3a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d3c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d3e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d42:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009d44:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009d48:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009d4a:	2040      	movs	r0, #64	@ 0x40
 8009d4c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009d4e:	2080      	movs	r0, #128	@ 0x80
 8009d50:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009d52:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009d56:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009d58:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009d5c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009d5e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009d62:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009d64:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009d68:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009d6a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009d6e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009d70:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009d74:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009d76:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8009d7a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009d7c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009d80:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009d82:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009d86:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009d88:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009d8c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009d8e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009d92:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009d94:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009d98:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009d9a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009d9e:	4770      	bx	lr
 8009da0:	2400000c 	.word	0x2400000c
 8009da4:	10624dd3 	.word	0x10624dd3
 8009da8:	fffee0c0 	.word	0xfffee0c0
 8009dac:	00200045 	.word	0x00200045
 8009db0:	002000c5 	.word	0x002000c5
 8009db4:	fdffe008 	.word	0xfdffe008

08009db8 <SDMMC_CmdStopTransfer>:
{
 8009db8:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009dba:	4b7a      	ldr	r3, [pc, #488]	@ (8009fa4 <SDMMC_CmdStopTransfer+0x1ec>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009dbc:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009dbe:	681a      	ldr	r2, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009dc0:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009dc4:	4b78      	ldr	r3, [pc, #480]	@ (8009fa8 <SDMMC_CmdStopTransfer+0x1f0>)
{
 8009dc6:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009dc8:	4c78      	ldr	r4, [pc, #480]	@ (8009fac <SDMMC_CmdStopTransfer+0x1f4>)
  SDMMCx->ARG = Command->Argument;
 8009dca:	2500      	movs	r5, #0
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009dcc:	60c8      	str	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009dce:	fba4 4202 	umull	r4, r2, r4, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009dd2:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009dd4:	4c76      	ldr	r4, [pc, #472]	@ (8009fb0 <SDMMC_CmdStopTransfer+0x1f8>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009dd6:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009dda:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009ddc:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009dde:	f241 100c 	movw	r0, #4364	@ 0x110c
  SDMMCx->ARG = Command->Argument;
 8009de2:	608d      	str	r5, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009de4:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009de8:	68cc      	ldr	r4, [r1, #12]
 8009dea:	4023      	ands	r3, r4
 8009dec:	4318      	orrs	r0, r3
 8009dee:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 8009df0:	b14a      	cbz	r2, 8009e06 <SDMMC_CmdStopTransfer+0x4e>
 8009df2:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009df4:	486f      	ldr	r0, [pc, #444]	@ (8009fb4 <SDMMC_CmdStopTransfer+0x1fc>)
    sta_reg = SDMMCx->STA;
 8009df6:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 8009df8:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009dfa:	4202      	tst	r2, r0
 8009dfc:	d001      	beq.n	8009e02 <SDMMC_CmdStopTransfer+0x4a>
 8009dfe:	0492      	lsls	r2, r2, #18
 8009e00:	d509      	bpl.n	8009e16 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 8009e02:	1c5c      	adds	r4, r3, #1
 8009e04:	d1f7      	bne.n	8009df6 <SDMMC_CmdStopTransfer+0x3e>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009e06:	68cb      	ldr	r3, [r1, #12]
 8009e08:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009e0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e10:	60cb      	str	r3, [r1, #12]
}
 8009e12:	bc30      	pop	{r4, r5}
 8009e14:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009e16:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8009e18:	075b      	lsls	r3, r3, #29
 8009e1a:	d44d      	bmi.n	8009eb8 <SDMMC_CmdStopTransfer+0x100>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009e1c:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8009e1e:	f010 0001 	ands.w	r0, r0, #1
 8009e22:	d13a      	bne.n	8009e9a <SDMMC_CmdStopTransfer+0xe2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e24:	4b64      	ldr	r3, [pc, #400]	@ (8009fb8 <SDMMC_CmdStopTransfer+0x200>)
 8009e26:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009e28:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	2b0c      	cmp	r3, #12
 8009e2e:	d136      	bne.n	8009e9e <SDMMC_CmdStopTransfer+0xe6>
  return (*(__IO uint32_t *) tmp);
 8009e30:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009e32:	4a62      	ldr	r2, [pc, #392]	@ (8009fbc <SDMMC_CmdStopTransfer+0x204>)
 8009e34:	401a      	ands	r2, r3
 8009e36:	2a00      	cmp	r2, #0
 8009e38:	d038      	beq.n	8009eac <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	db36      	blt.n	8009eac <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009e3e:	005d      	lsls	r5, r3, #1
 8009e40:	d441      	bmi.n	8009ec6 <SDMMC_CmdStopTransfer+0x10e>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009e42:	009c      	lsls	r4, r3, #2
 8009e44:	d445      	bmi.n	8009ed2 <SDMMC_CmdStopTransfer+0x11a>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009e46:	00d8      	lsls	r0, r3, #3
 8009e48:	d449      	bmi.n	8009ede <SDMMC_CmdStopTransfer+0x126>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009e4a:	011a      	lsls	r2, r3, #4
 8009e4c:	d44e      	bmi.n	8009eec <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009e4e:	015d      	lsls	r5, r3, #5
 8009e50:	d453      	bmi.n	8009efa <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009e52:	01dc      	lsls	r4, r3, #7
 8009e54:	d45f      	bmi.n	8009f16 <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009e56:	0218      	lsls	r0, r3, #8
 8009e58:	d456      	bmi.n	8009f08 <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009e5a:	025a      	lsls	r2, r3, #9
 8009e5c:	d469      	bmi.n	8009f32 <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009e5e:	029d      	lsls	r5, r3, #10
 8009e60:	d460      	bmi.n	8009f24 <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009e62:	02dc      	lsls	r4, r3, #11
 8009e64:	d47a      	bmi.n	8009f5c <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009e66:	0358      	lsls	r0, r3, #13
 8009e68:	d471      	bmi.n	8009f4e <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009e6a:	039a      	lsls	r2, r3, #14
 8009e6c:	d468      	bmi.n	8009f40 <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009e6e:	03dd      	lsls	r5, r3, #15
 8009e70:	f100 8090 	bmi.w	8009f94 <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009e74:	041c      	lsls	r4, r3, #16
 8009e76:	d47f      	bmi.n	8009f78 <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009e78:	0458      	lsls	r0, r3, #17
 8009e7a:	d476      	bmi.n	8009f6a <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009e7c:	049a      	lsls	r2, r3, #18
 8009e7e:	f100 8082 	bmi.w	8009f86 <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009e82:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009e86:	68cb      	ldr	r3, [r1, #12]
 8009e88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009e8c:	bf14      	ite	ne
 8009e8e:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009e92:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009e96:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009e98:	e7bb      	b.n	8009e12 <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	638b      	str	r3, [r1, #56]	@ 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009e9e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ea0:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ea2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
}
 8009ea6:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ea8:	60cb      	str	r3, [r1, #12]
}
 8009eaa:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009eac:	68cb      	ldr	r3, [r1, #12]
 8009eae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
}
 8009eb2:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009eb4:	60cb      	str	r3, [r1, #12]
}
 8009eb6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009eb8:	2004      	movs	r0, #4
 8009eba:	6388      	str	r0, [r1, #56]	@ 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ebc:	68cb      	ldr	r3, [r1, #12]
 8009ebe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ec2:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009ec4:	e7a5      	b.n	8009e12 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ec6:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009ec8:	2040      	movs	r0, #64	@ 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009eca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ece:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009ed0:	e79f      	b.n	8009e12 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ed2:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009ed4:	2080      	movs	r0, #128	@ 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ed6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009eda:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009edc:	e799      	b.n	8009e12 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ede:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009ee0:	f44f 7080 	mov.w	r0, #256	@ 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ee4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ee8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009eea:	e792      	b.n	8009e12 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009eec:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009eee:	f44f 7000 	mov.w	r0, #512	@ 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ef2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ef6:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009ef8:	e78b      	b.n	8009e12 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009efa:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009efc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f04:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009f06:	e784      	b.n	8009e12 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f08:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009f0a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f12:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009f14:	e77d      	b.n	8009e12 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f16:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009f18:	f44f 6000 	mov.w	r0, #2048	@ 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f20:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009f22:	e776      	b.n	8009e12 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f24:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009f26:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f2e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009f30:	e76f      	b.n	8009e12 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f32:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009f34:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f3c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009f3e:	e768      	b.n	8009e12 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f40:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009f42:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f4a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009f4c:	e761      	b.n	8009e12 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f4e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009f50:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f58:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009f5a:	e75a      	b.n	8009e12 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f5c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
 8009f5e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f66:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009f68:	e753      	b.n	8009e12 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f6a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009f6c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f74:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009f76:	e74c      	b.n	8009e12 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f78:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009f7a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f82:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009f84:	e745      	b.n	8009e12 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f86:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
 8009f88:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f90:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009f92:	e73e      	b.n	8009e12 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f94:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009f96:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f9e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009fa0:	e737      	b.n	8009e12 <SDMMC_CmdStopTransfer+0x5a>
 8009fa2:	bf00      	nop
 8009fa4:	2400000c 	.word	0x2400000c
 8009fa8:	fffee0c0 	.word	0xfffee0c0
 8009fac:	10624dd3 	.word	0x10624dd3
 8009fb0:	05f5e100 	.word	0x05f5e100
 8009fb4:	00200045 	.word	0x00200045
 8009fb8:	002000c5 	.word	0x002000c5
 8009fbc:	fdffe008 	.word	0xfdffe008

08009fc0 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009fc0:	4a4f      	ldr	r2, [pc, #316]	@ (800a100 <SDMMC_CmdSelDesel+0x140>)
{
 8009fc2:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009fc4:	4b4f      	ldr	r3, [pc, #316]	@ (800a104 <SDMMC_CmdSelDesel+0x144>)
 8009fc6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009fc8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009fcc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009fd0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009fd4:	484c      	ldr	r0, [pc, #304]	@ (800a108 <SDMMC_CmdSelDesel+0x148>)
 8009fd6:	f241 1307 	movw	r3, #4359	@ 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009fda:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009fdc:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009fde:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009fe2:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009fe4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009fe8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009fec:	1e53      	subs	r3, r2, #1
 8009fee:	b14a      	cbz	r2, 800a004 <SDMMC_CmdSelDesel+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009ff0:	4946      	ldr	r1, [pc, #280]	@ (800a10c <SDMMC_CmdSelDesel+0x14c>)
    sta_reg = SDMMCx->STA;
 8009ff2:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 8009ff6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009ff8:	420a      	tst	r2, r1
 8009ffa:	d001      	beq.n	800a000 <SDMMC_CmdSelDesel+0x40>
 8009ffc:	0492      	lsls	r2, r2, #18
 8009ffe:	d504      	bpl.n	800a00a <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
 800a000:	1c58      	adds	r0, r3, #1
 800a002:	d1f6      	bne.n	8009ff2 <SDMMC_CmdSelDesel+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800a004:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a008:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a00a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a00e:	075b      	lsls	r3, r3, #29
 800a010:	d443      	bmi.n	800a09a <SDMMC_CmdSelDesel+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a012:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a016:	07d8      	lsls	r0, r3, #31
 800a018:	d409      	bmi.n	800a02e <SDMMC_CmdSelDesel+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a01a:	4b3d      	ldr	r3, [pc, #244]	@ (800a110 <SDMMC_CmdSelDesel+0x150>)
 800a01c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a020:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b07      	cmp	r3, #7
 800a028:	d005      	beq.n	800a036 <SDMMC_CmdSelDesel+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a02a:	2001      	movs	r0, #1
 800a02c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a02e:	2301      	movs	r3, #1
 800a030:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a034:	e7f9      	b.n	800a02a <SDMMC_CmdSelDesel+0x6a>
  return (*(__IO uint32_t *) tmp);
 800a036:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a03a:	4836      	ldr	r0, [pc, #216]	@ (800a114 <SDMMC_CmdSelDesel+0x154>)
 800a03c:	4018      	ands	r0, r3
 800a03e:	b358      	cbz	r0, 800a098 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a040:	2b00      	cmp	r3, #0
 800a042:	db2f      	blt.n	800a0a4 <SDMMC_CmdSelDesel+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a044:	0059      	lsls	r1, r3, #1
 800a046:	d430      	bmi.n	800a0aa <SDMMC_CmdSelDesel+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a048:	009a      	lsls	r2, r3, #2
 800a04a:	d430      	bmi.n	800a0ae <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a04c:	00d9      	lsls	r1, r3, #3
 800a04e:	d430      	bmi.n	800a0b2 <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a050:	011a      	lsls	r2, r3, #4
 800a052:	d431      	bmi.n	800a0b8 <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a054:	0159      	lsls	r1, r3, #5
 800a056:	d432      	bmi.n	800a0be <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a058:	01da      	lsls	r2, r3, #7
 800a05a:	d433      	bmi.n	800a0c4 <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a05c:	0219      	lsls	r1, r3, #8
 800a05e:	d434      	bmi.n	800a0ca <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a060:	025a      	lsls	r2, r3, #9
 800a062:	d435      	bmi.n	800a0d0 <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a064:	0299      	lsls	r1, r3, #10
 800a066:	d43f      	bmi.n	800a0e8 <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a068:	02da      	lsls	r2, r3, #11
 800a06a:	d43a      	bmi.n	800a0e2 <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a06c:	0359      	lsls	r1, r3, #13
 800a06e:	d435      	bmi.n	800a0dc <SDMMC_CmdSelDesel+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a070:	039a      	lsls	r2, r3, #14
 800a072:	d430      	bmi.n	800a0d6 <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a074:	03d9      	lsls	r1, r3, #15
 800a076:	d440      	bmi.n	800a0fa <SDMMC_CmdSelDesel+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a078:	041a      	lsls	r2, r3, #16
 800a07a:	d43b      	bmi.n	800a0f4 <SDMMC_CmdSelDesel+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a07c:	0459      	lsls	r1, r3, #17
 800a07e:	d436      	bmi.n	800a0ee <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a080:	049a      	lsls	r2, r3, #18
 800a082:	d407      	bmi.n	800a094 <SDMMC_CmdSelDesel+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a084:	f013 0f08 	tst.w	r3, #8
 800a088:	bf0c      	ite	eq
 800a08a:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800a08e:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800a092:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800a094:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800a098:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a09a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a09c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a09e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0a2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a0a4:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800a0a8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a0aa:	2040      	movs	r0, #64	@ 0x40
 800a0ac:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a0ae:	2080      	movs	r0, #128	@ 0x80
 800a0b0:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a0b2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a0b6:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a0b8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a0bc:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a0be:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a0c2:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a0c4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a0c8:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a0ca:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a0ce:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a0d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a0d4:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a0d6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800a0da:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a0dc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a0e0:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800a0e2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800a0e6:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a0e8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a0ec:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a0ee:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a0f2:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a0f4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a0f8:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a0fa:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a0fe:	4770      	bx	lr
 800a100:	2400000c 	.word	0x2400000c
 800a104:	10624dd3 	.word	0x10624dd3
 800a108:	fffee0c0 	.word	0xfffee0c0
 800a10c:	00200045 	.word	0x00200045
 800a110:	002000c5 	.word	0x002000c5
 800a114:	fdffe008 	.word	0xfdffe008

0800a118 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a118:	4b11      	ldr	r3, [pc, #68]	@ (800a160 <SDMMC_CmdGoIdleState+0x48>)
{
 800a11a:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a11c:	4a11      	ldr	r2, [pc, #68]	@ (800a164 <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a11e:	681b      	ldr	r3, [r3, #0]
{
 800a120:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a122:	4c11      	ldr	r4, [pc, #68]	@ (800a168 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 800a124:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a126:	fba4 4303 	umull	r4, r3, r4, r3
  SDMMCx->ARG = Command->Argument;
 800a12a:	6085      	str	r5, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a12c:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a12e:	0a5b      	lsrs	r3, r3, #9
 800a130:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a134:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a136:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a13a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a13e:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a140:	e002      	b.n	800a148 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a142:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800a144:	0612      	lsls	r2, r2, #24
 800a146:	d405      	bmi.n	800a154 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800a148:	3b01      	subs	r3, #1
 800a14a:	d2fa      	bcs.n	800a142 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800a14c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a150:	bc30      	pop	{r4, r5}
 800a152:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a154:	4b05      	ldr	r3, [pc, #20]	@ (800a16c <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 800a156:	2000      	movs	r0, #0
}
 800a158:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a15a:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	2400000c 	.word	0x2400000c
 800a164:	fffee0c0 	.word	0xfffee0c0
 800a168:	10624dd3 	.word	0x10624dd3
 800a16c:	002000c5 	.word	0x002000c5

0800a170 <SDMMC_CmdOperCond>:
{
 800a170:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a172:	4a1c      	ldr	r2, [pc, #112]	@ (800a1e4 <SDMMC_CmdOperCond+0x74>)
 800a174:	4b1c      	ldr	r3, [pc, #112]	@ (800a1e8 <SDMMC_CmdOperCond+0x78>)
 800a176:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a178:	481c      	ldr	r0, [pc, #112]	@ (800a1ec <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a17a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a17e:	f241 1308 	movw	r3, #4360	@ 0x1108
{
 800a182:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a184:	f44f 74d5 	mov.w	r4, #426	@ 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a188:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800a18a:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a18c:	68cc      	ldr	r4, [r1, #12]
 800a18e:	4020      	ands	r0, r4
 800a190:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a192:	f241 3088 	movw	r0, #5000	@ 0x1388
 800a196:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a19a:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800a19c:	b14a      	cbz	r2, 800a1b2 <SDMMC_CmdOperCond+0x42>
 800a19e:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800a1a0:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800a1a2:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1a4:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800a1a8:	d001      	beq.n	800a1ae <SDMMC_CmdOperCond+0x3e>
 800a1aa:	0490      	lsls	r0, r2, #18
 800a1ac:	d506      	bpl.n	800a1bc <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 800a1ae:	1c5c      	adds	r4, r3, #1
 800a1b0:	d1f6      	bne.n	800a1a0 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a1b2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a1b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1ba:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1bc:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800a1be:	075a      	lsls	r2, r3, #29
 800a1c0:	d40c      	bmi.n	800a1dc <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1c2:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800a1c4:	f010 0001 	ands.w	r0, r0, #1
 800a1c8:	d105      	bne.n	800a1d6 <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a1ca:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800a1cc:	065b      	lsls	r3, r3, #25
 800a1ce:	d5f2      	bpl.n	800a1b6 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a1d0:	2340      	movs	r3, #64	@ 0x40
 800a1d2:	638b      	str	r3, [r1, #56]	@ 0x38
 800a1d4:	e7ef      	b.n	800a1b6 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1da:	e7ec      	b.n	800a1b6 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1dc:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1de:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1e0:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1e2:	e7e8      	b.n	800a1b6 <SDMMC_CmdOperCond+0x46>
 800a1e4:	2400000c 	.word	0x2400000c
 800a1e8:	10624dd3 	.word	0x10624dd3
 800a1ec:	fffee0c0 	.word	0xfffee0c0

0800a1f0 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a1f0:	4a4f      	ldr	r2, [pc, #316]	@ (800a330 <SDMMC_CmdAppCommand+0x140>)
{
 800a1f2:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a1f4:	4b4f      	ldr	r3, [pc, #316]	@ (800a334 <SDMMC_CmdAppCommand+0x144>)
 800a1f6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a1f8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a1fc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a200:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a204:	484c      	ldr	r0, [pc, #304]	@ (800a338 <SDMMC_CmdAppCommand+0x148>)
 800a206:	f241 1337 	movw	r3, #4407	@ 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a20a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a20c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a20e:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a212:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a214:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a218:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a21c:	1e53      	subs	r3, r2, #1
 800a21e:	b14a      	cbz	r2, 800a234 <SDMMC_CmdAppCommand+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a220:	4946      	ldr	r1, [pc, #280]	@ (800a33c <SDMMC_CmdAppCommand+0x14c>)
    sta_reg = SDMMCx->STA;
 800a222:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a226:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a228:	420a      	tst	r2, r1
 800a22a:	d001      	beq.n	800a230 <SDMMC_CmdAppCommand+0x40>
 800a22c:	0492      	lsls	r2, r2, #18
 800a22e:	d504      	bpl.n	800a23a <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 800a230:	1c58      	adds	r0, r3, #1
 800a232:	d1f6      	bne.n	800a222 <SDMMC_CmdAppCommand+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800a234:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a238:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a23a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a23e:	075b      	lsls	r3, r3, #29
 800a240:	d443      	bmi.n	800a2ca <SDMMC_CmdAppCommand+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a242:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a246:	07d8      	lsls	r0, r3, #31
 800a248:	d409      	bmi.n	800a25e <SDMMC_CmdAppCommand+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a24a:	4b3d      	ldr	r3, [pc, #244]	@ (800a340 <SDMMC_CmdAppCommand+0x150>)
 800a24c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a250:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a254:	b2db      	uxtb	r3, r3
 800a256:	2b37      	cmp	r3, #55	@ 0x37
 800a258:	d005      	beq.n	800a266 <SDMMC_CmdAppCommand+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a25a:	2001      	movs	r0, #1
 800a25c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a25e:	2301      	movs	r3, #1
 800a260:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a264:	e7f9      	b.n	800a25a <SDMMC_CmdAppCommand+0x6a>
  return (*(__IO uint32_t *) tmp);
 800a266:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a26a:	4836      	ldr	r0, [pc, #216]	@ (800a344 <SDMMC_CmdAppCommand+0x154>)
 800a26c:	4018      	ands	r0, r3
 800a26e:	b358      	cbz	r0, 800a2c8 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a270:	2b00      	cmp	r3, #0
 800a272:	db2f      	blt.n	800a2d4 <SDMMC_CmdAppCommand+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a274:	0059      	lsls	r1, r3, #1
 800a276:	d430      	bmi.n	800a2da <SDMMC_CmdAppCommand+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a278:	009a      	lsls	r2, r3, #2
 800a27a:	d430      	bmi.n	800a2de <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a27c:	00d9      	lsls	r1, r3, #3
 800a27e:	d430      	bmi.n	800a2e2 <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a280:	011a      	lsls	r2, r3, #4
 800a282:	d431      	bmi.n	800a2e8 <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a284:	0159      	lsls	r1, r3, #5
 800a286:	d432      	bmi.n	800a2ee <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a288:	01da      	lsls	r2, r3, #7
 800a28a:	d433      	bmi.n	800a2f4 <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a28c:	0219      	lsls	r1, r3, #8
 800a28e:	d434      	bmi.n	800a2fa <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a290:	025a      	lsls	r2, r3, #9
 800a292:	d435      	bmi.n	800a300 <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a294:	0299      	lsls	r1, r3, #10
 800a296:	d43f      	bmi.n	800a318 <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a298:	02da      	lsls	r2, r3, #11
 800a29a:	d43a      	bmi.n	800a312 <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a29c:	0359      	lsls	r1, r3, #13
 800a29e:	d435      	bmi.n	800a30c <SDMMC_CmdAppCommand+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a2a0:	039a      	lsls	r2, r3, #14
 800a2a2:	d430      	bmi.n	800a306 <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a2a4:	03d9      	lsls	r1, r3, #15
 800a2a6:	d440      	bmi.n	800a32a <SDMMC_CmdAppCommand+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a2a8:	041a      	lsls	r2, r3, #16
 800a2aa:	d43b      	bmi.n	800a324 <SDMMC_CmdAppCommand+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a2ac:	0459      	lsls	r1, r3, #17
 800a2ae:	d436      	bmi.n	800a31e <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a2b0:	049a      	lsls	r2, r3, #18
 800a2b2:	d407      	bmi.n	800a2c4 <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a2b4:	f013 0f08 	tst.w	r3, #8
 800a2b8:	bf0c      	ite	eq
 800a2ba:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800a2be:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800a2c2:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800a2c4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800a2c8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a2ca:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2cc:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a2ce:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2d2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a2d4:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800a2d8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a2da:	2040      	movs	r0, #64	@ 0x40
 800a2dc:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a2de:	2080      	movs	r0, #128	@ 0x80
 800a2e0:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a2e2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a2e6:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a2e8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a2ec:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a2ee:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a2f2:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a2f4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a2f8:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a2fa:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a2fe:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a300:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a304:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a306:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800a30a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a30c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a310:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800a312:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800a316:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a318:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a31c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a31e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a322:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a324:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a328:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a32a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a32e:	4770      	bx	lr
 800a330:	2400000c 	.word	0x2400000c
 800a334:	10624dd3 	.word	0x10624dd3
 800a338:	fffee0c0 	.word	0xfffee0c0
 800a33c:	00200045 	.word	0x00200045
 800a340:	002000c5 	.word	0x002000c5
 800a344:	fdffe008 	.word	0xfdffe008

0800a348 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a348:	4a19      	ldr	r2, [pc, #100]	@ (800a3b0 <SDMMC_CmdAppOperCommand+0x68>)
{
 800a34a:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a34c:	4b19      	ldr	r3, [pc, #100]	@ (800a3b4 <SDMMC_CmdAppOperCommand+0x6c>)
 800a34e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a350:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a354:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a358:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a35c:	4816      	ldr	r0, [pc, #88]	@ (800a3b8 <SDMMC_CmdAppOperCommand+0x70>)
 800a35e:	f241 1329 	movw	r3, #4393	@ 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a362:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a364:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a366:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a36a:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a36c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a370:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a374:	1e53      	subs	r3, r2, #1
 800a376:	b14a      	cbz	r2, 800a38c <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
 800a378:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a37c:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a37e:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800a382:	d001      	beq.n	800a388 <SDMMC_CmdAppOperCommand+0x40>
 800a384:	0492      	lsls	r2, r2, #18
 800a386:	d504      	bpl.n	800a392 <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 800a388:	1c59      	adds	r1, r3, #1
 800a38a:	d1f5      	bne.n	800a378 <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a38c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a390:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a392:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800a396:	f010 0004 	ands.w	r0, r0, #4
 800a39a:	d103      	bne.n	800a3a4 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a39c:	4b07      	ldr	r3, [pc, #28]	@ (800a3bc <SDMMC_CmdAppOperCommand+0x74>)
 800a39e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800a3a2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a3a4:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3a6:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a3a8:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	2400000c 	.word	0x2400000c
 800a3b4:	10624dd3 	.word	0x10624dd3
 800a3b8:	fffee0c0 	.word	0xfffee0c0
 800a3bc:	002000c5 	.word	0x002000c5

0800a3c0 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a3c0:	4a4f      	ldr	r2, [pc, #316]	@ (800a500 <SDMMC_CmdBusWidth+0x140>)
{
 800a3c2:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a3c4:	4b4f      	ldr	r3, [pc, #316]	@ (800a504 <SDMMC_CmdBusWidth+0x144>)
 800a3c6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a3c8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a3cc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a3d0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a3d4:	484c      	ldr	r0, [pc, #304]	@ (800a508 <SDMMC_CmdBusWidth+0x148>)
 800a3d6:	f241 1306 	movw	r3, #4358	@ 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a3da:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a3dc:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a3de:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a3e2:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a3e4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a3e8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a3ec:	1e53      	subs	r3, r2, #1
 800a3ee:	b14a      	cbz	r2, 800a404 <SDMMC_CmdBusWidth+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a3f0:	4946      	ldr	r1, [pc, #280]	@ (800a50c <SDMMC_CmdBusWidth+0x14c>)
    sta_reg = SDMMCx->STA;
 800a3f2:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a3f6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a3f8:	420a      	tst	r2, r1
 800a3fa:	d001      	beq.n	800a400 <SDMMC_CmdBusWidth+0x40>
 800a3fc:	0492      	lsls	r2, r2, #18
 800a3fe:	d504      	bpl.n	800a40a <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 800a400:	1c58      	adds	r0, r3, #1
 800a402:	d1f6      	bne.n	800a3f2 <SDMMC_CmdBusWidth+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800a404:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a408:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a40a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a40e:	075b      	lsls	r3, r3, #29
 800a410:	d443      	bmi.n	800a49a <SDMMC_CmdBusWidth+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a412:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a416:	07d8      	lsls	r0, r3, #31
 800a418:	d409      	bmi.n	800a42e <SDMMC_CmdBusWidth+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a41a:	4b3d      	ldr	r3, [pc, #244]	@ (800a510 <SDMMC_CmdBusWidth+0x150>)
 800a41c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a420:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a424:	b2db      	uxtb	r3, r3
 800a426:	2b06      	cmp	r3, #6
 800a428:	d005      	beq.n	800a436 <SDMMC_CmdBusWidth+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a42a:	2001      	movs	r0, #1
 800a42c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a42e:	2301      	movs	r3, #1
 800a430:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a434:	e7f9      	b.n	800a42a <SDMMC_CmdBusWidth+0x6a>
  return (*(__IO uint32_t *) tmp);
 800a436:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a43a:	4836      	ldr	r0, [pc, #216]	@ (800a514 <SDMMC_CmdBusWidth+0x154>)
 800a43c:	4018      	ands	r0, r3
 800a43e:	b358      	cbz	r0, 800a498 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a440:	2b00      	cmp	r3, #0
 800a442:	db2f      	blt.n	800a4a4 <SDMMC_CmdBusWidth+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a444:	0059      	lsls	r1, r3, #1
 800a446:	d430      	bmi.n	800a4aa <SDMMC_CmdBusWidth+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a448:	009a      	lsls	r2, r3, #2
 800a44a:	d430      	bmi.n	800a4ae <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a44c:	00d9      	lsls	r1, r3, #3
 800a44e:	d430      	bmi.n	800a4b2 <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a450:	011a      	lsls	r2, r3, #4
 800a452:	d431      	bmi.n	800a4b8 <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a454:	0159      	lsls	r1, r3, #5
 800a456:	d432      	bmi.n	800a4be <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a458:	01da      	lsls	r2, r3, #7
 800a45a:	d433      	bmi.n	800a4c4 <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a45c:	0219      	lsls	r1, r3, #8
 800a45e:	d434      	bmi.n	800a4ca <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a460:	025a      	lsls	r2, r3, #9
 800a462:	d435      	bmi.n	800a4d0 <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a464:	0299      	lsls	r1, r3, #10
 800a466:	d43f      	bmi.n	800a4e8 <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a468:	02da      	lsls	r2, r3, #11
 800a46a:	d43a      	bmi.n	800a4e2 <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a46c:	0359      	lsls	r1, r3, #13
 800a46e:	d435      	bmi.n	800a4dc <SDMMC_CmdBusWidth+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a470:	039a      	lsls	r2, r3, #14
 800a472:	d430      	bmi.n	800a4d6 <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a474:	03d9      	lsls	r1, r3, #15
 800a476:	d440      	bmi.n	800a4fa <SDMMC_CmdBusWidth+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a478:	041a      	lsls	r2, r3, #16
 800a47a:	d43b      	bmi.n	800a4f4 <SDMMC_CmdBusWidth+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a47c:	0459      	lsls	r1, r3, #17
 800a47e:	d436      	bmi.n	800a4ee <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a480:	049a      	lsls	r2, r3, #18
 800a482:	d407      	bmi.n	800a494 <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a484:	f013 0f08 	tst.w	r3, #8
 800a488:	bf0c      	ite	eq
 800a48a:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800a48e:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800a492:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800a494:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800a498:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a49a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a49c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a49e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4a2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a4a4:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800a4a8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a4aa:	2040      	movs	r0, #64	@ 0x40
 800a4ac:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a4ae:	2080      	movs	r0, #128	@ 0x80
 800a4b0:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a4b2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a4b6:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a4b8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a4bc:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a4be:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a4c2:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a4c4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a4c8:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a4ca:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a4ce:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a4d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a4d4:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a4d6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800a4da:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a4dc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a4e0:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800a4e2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800a4e6:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a4e8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a4ec:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a4ee:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a4f2:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a4f4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a4f8:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a4fa:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a4fe:	4770      	bx	lr
 800a500:	2400000c 	.word	0x2400000c
 800a504:	10624dd3 	.word	0x10624dd3
 800a508:	fffee0c0 	.word	0xfffee0c0
 800a50c:	00200045 	.word	0x00200045
 800a510:	002000c5 	.word	0x002000c5
 800a514:	fdffe008 	.word	0xfdffe008

0800a518 <SDMMC_CmdSendSCR>:
{
 800a518:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a51a:	4a4c      	ldr	r2, [pc, #304]	@ (800a64c <SDMMC_CmdSendSCR+0x134>)
 800a51c:	4b4c      	ldr	r3, [pc, #304]	@ (800a650 <SDMMC_CmdSendSCR+0x138>)
 800a51e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a520:	484c      	ldr	r0, [pc, #304]	@ (800a654 <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a522:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a526:	f241 1333 	movw	r3, #4403	@ 0x1133
{
 800a52a:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a52c:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a52e:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800a530:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a532:	68cc      	ldr	r4, [r1, #12]
 800a534:	4020      	ands	r0, r4
 800a536:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a538:	f241 3088 	movw	r0, #5000	@ 0x1388
 800a53c:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a540:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800a542:	b14a      	cbz	r2, 800a558 <SDMMC_CmdSendSCR+0x40>
 800a544:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a546:	4844      	ldr	r0, [pc, #272]	@ (800a658 <SDMMC_CmdSendSCR+0x140>)
    sta_reg = SDMMCx->STA;
 800a548:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800a54a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a54c:	4202      	tst	r2, r0
 800a54e:	d001      	beq.n	800a554 <SDMMC_CmdSendSCR+0x3c>
 800a550:	0492      	lsls	r2, r2, #18
 800a552:	d506      	bpl.n	800a562 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 800a554:	1c5c      	adds	r4, r3, #1
 800a556:	d1f7      	bne.n	800a548 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a558:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a55c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a560:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a562:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800a564:	075c      	lsls	r4, r3, #29
 800a566:	d43c      	bmi.n	800a5e2 <SDMMC_CmdSendSCR+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a568:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800a56a:	07d8      	lsls	r0, r3, #31
 800a56c:	d407      	bmi.n	800a57e <SDMMC_CmdSendSCR+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a56e:	4b3b      	ldr	r3, [pc, #236]	@ (800a65c <SDMMC_CmdSendSCR+0x144>)
 800a570:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a572:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a574:	b2db      	uxtb	r3, r3
 800a576:	2b33      	cmp	r3, #51	@ 0x33
 800a578:	d004      	beq.n	800a584 <SDMMC_CmdSendSCR+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a57a:	2001      	movs	r0, #1
 800a57c:	e7ee      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a57e:	2301      	movs	r3, #1
 800a580:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a582:	e7fa      	b.n	800a57a <SDMMC_CmdSendSCR+0x62>
  return (*(__IO uint32_t *) tmp);
 800a584:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a586:	4836      	ldr	r0, [pc, #216]	@ (800a660 <SDMMC_CmdSendSCR+0x148>)
 800a588:	4018      	ands	r0, r3
 800a58a:	2800      	cmp	r0, #0
 800a58c:	d0e6      	beq.n	800a55c <SDMMC_CmdSendSCR+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a58e:	2b00      	cmp	r3, #0
 800a590:	db2b      	blt.n	800a5ea <SDMMC_CmdSendSCR+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a592:	005a      	lsls	r2, r3, #1
 800a594:	d42c      	bmi.n	800a5f0 <SDMMC_CmdSendSCR+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a596:	009c      	lsls	r4, r3, #2
 800a598:	d42c      	bmi.n	800a5f4 <SDMMC_CmdSendSCR+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a59a:	00d9      	lsls	r1, r3, #3
 800a59c:	d42c      	bmi.n	800a5f8 <SDMMC_CmdSendSCR+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a59e:	011a      	lsls	r2, r3, #4
 800a5a0:	d42d      	bmi.n	800a5fe <SDMMC_CmdSendSCR+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a5a2:	015c      	lsls	r4, r3, #5
 800a5a4:	d42e      	bmi.n	800a604 <SDMMC_CmdSendSCR+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a5a6:	01d9      	lsls	r1, r3, #7
 800a5a8:	d42f      	bmi.n	800a60a <SDMMC_CmdSendSCR+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a5aa:	021a      	lsls	r2, r3, #8
 800a5ac:	d430      	bmi.n	800a610 <SDMMC_CmdSendSCR+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a5ae:	025c      	lsls	r4, r3, #9
 800a5b0:	d431      	bmi.n	800a616 <SDMMC_CmdSendSCR+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a5b2:	0299      	lsls	r1, r3, #10
 800a5b4:	d43b      	bmi.n	800a62e <SDMMC_CmdSendSCR+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a5b6:	02da      	lsls	r2, r3, #11
 800a5b8:	d436      	bmi.n	800a628 <SDMMC_CmdSendSCR+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a5ba:	035c      	lsls	r4, r3, #13
 800a5bc:	d431      	bmi.n	800a622 <SDMMC_CmdSendSCR+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a5be:	0399      	lsls	r1, r3, #14
 800a5c0:	d42c      	bmi.n	800a61c <SDMMC_CmdSendSCR+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a5c2:	03da      	lsls	r2, r3, #15
 800a5c4:	d43f      	bmi.n	800a646 <SDMMC_CmdSendSCR+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a5c6:	041c      	lsls	r4, r3, #16
 800a5c8:	d43a      	bmi.n	800a640 <SDMMC_CmdSendSCR+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a5ca:	0459      	lsls	r1, r3, #17
 800a5cc:	d435      	bmi.n	800a63a <SDMMC_CmdSendSCR+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a5ce:	049a      	lsls	r2, r3, #18
 800a5d0:	d430      	bmi.n	800a634 <SDMMC_CmdSendSCR+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a5d2:	f013 0f08 	tst.w	r3, #8
 800a5d6:	bf0c      	ite	eq
 800a5d8:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800a5dc:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800a5e0:	e7bc      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a5e2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5e4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a5e6:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5e8:	e7b8      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a5ea:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800a5ee:	e7b5      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a5f0:	2040      	movs	r0, #64	@ 0x40
 800a5f2:	e7b3      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a5f4:	2080      	movs	r0, #128	@ 0x80
 800a5f6:	e7b1      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a5f8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a5fc:	e7ae      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a5fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a602:	e7ab      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a604:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a608:	e7a8      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a60a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a60e:	e7a5      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a610:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a614:	e7a2      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a616:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a61a:	e79f      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a61c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800a620:	e79c      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a622:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a626:	e799      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
 800a628:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800a62c:	e796      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a62e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a632:	e793      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800a634:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800a638:	e790      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a63a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a63e:	e78d      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a640:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a644:	e78a      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a646:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a64a:	e787      	b.n	800a55c <SDMMC_CmdSendSCR+0x44>
 800a64c:	2400000c 	.word	0x2400000c
 800a650:	10624dd3 	.word	0x10624dd3
 800a654:	fffee0c0 	.word	0xfffee0c0
 800a658:	00200045 	.word	0x00200045
 800a65c:	002000c5 	.word	0x002000c5
 800a660:	fdffe008 	.word	0xfdffe008

0800a664 <SDMMC_CmdSendCID>:
{
 800a664:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a666:	4a1a      	ldr	r2, [pc, #104]	@ (800a6d0 <SDMMC_CmdSendCID+0x6c>)
 800a668:	4b1a      	ldr	r3, [pc, #104]	@ (800a6d4 <SDMMC_CmdSendCID+0x70>)
 800a66a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a66c:	481a      	ldr	r0, [pc, #104]	@ (800a6d8 <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a66e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a672:	f241 3302 	movw	r3, #4866	@ 0x1302
{
 800a676:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a678:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a67a:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800a67c:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a67e:	68cc      	ldr	r4, [r1, #12]
 800a680:	4020      	ands	r0, r4
 800a682:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a684:	f241 3088 	movw	r0, #5000	@ 0x1388
 800a688:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a68c:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800a68e:	b14a      	cbz	r2, 800a6a4 <SDMMC_CmdSendCID+0x40>
 800a690:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800a692:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800a694:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a696:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800a69a:	d001      	beq.n	800a6a0 <SDMMC_CmdSendCID+0x3c>
 800a69c:	0492      	lsls	r2, r2, #18
 800a69e:	d506      	bpl.n	800a6ae <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 800a6a0:	1c58      	adds	r0, r3, #1
 800a6a2:	d1f6      	bne.n	800a692 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800a6a4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a6a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6ac:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a6ae:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800a6b0:	075b      	lsls	r3, r3, #29
 800a6b2:	d409      	bmi.n	800a6c8 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a6b4:	6b48      	ldr	r0, [r1, #52]	@ 0x34
}
 800a6b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a6ba:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a6be:	bf14      	ite	ne
 800a6c0:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a6c2:	4b06      	ldreq	r3, [pc, #24]	@ (800a6dc <SDMMC_CmdSendCID+0x78>)
 800a6c4:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800a6c6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a6c8:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a6ca:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a6cc:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a6ce:	e7eb      	b.n	800a6a8 <SDMMC_CmdSendCID+0x44>
 800a6d0:	2400000c 	.word	0x2400000c
 800a6d4:	10624dd3 	.word	0x10624dd3
 800a6d8:	fffee0c0 	.word	0xfffee0c0
 800a6dc:	002000c5 	.word	0x002000c5

0800a6e0 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a6e0:	4a1b      	ldr	r2, [pc, #108]	@ (800a750 <SDMMC_CmdSendCSD+0x70>)
{
 800a6e2:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a6e4:	4b1b      	ldr	r3, [pc, #108]	@ (800a754 <SDMMC_CmdSendCSD+0x74>)
 800a6e6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a6e8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a6ec:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a6f0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a6f4:	4818      	ldr	r0, [pc, #96]	@ (800a758 <SDMMC_CmdSendCSD+0x78>)
 800a6f6:	f241 3309 	movw	r3, #4873	@ 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a6fa:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a6fc:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a6fe:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a702:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a704:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a708:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a70c:	1e53      	subs	r3, r2, #1
 800a70e:	b14a      	cbz	r2, 800a724 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800a710:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a714:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a716:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800a71a:	d001      	beq.n	800a720 <SDMMC_CmdSendCSD+0x40>
 800a71c:	0492      	lsls	r2, r2, #18
 800a71e:	d504      	bpl.n	800a72a <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800a720:	1c59      	adds	r1, r3, #1
 800a722:	d1f5      	bne.n	800a710 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a724:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a728:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a72a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a72e:	075b      	lsls	r3, r3, #29
 800a730:	d409      	bmi.n	800a746 <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a732:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800a736:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a73a:	bf14      	ite	ne
 800a73c:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a73e:	4b07      	ldreq	r3, [pc, #28]	@ (800a75c <SDMMC_CmdSendCSD+0x7c>)
 800a740:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800a744:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a746:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a748:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a74a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a74e:	4770      	bx	lr
 800a750:	2400000c 	.word	0x2400000c
 800a754:	10624dd3 	.word	0x10624dd3
 800a758:	fffee0c0 	.word	0xfffee0c0
 800a75c:	002000c5 	.word	0x002000c5

0800a760 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800a760:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a762:	4a2b      	ldr	r2, [pc, #172]	@ (800a810 <SDMMC_CmdSetRelAdd+0xb0>)
{
 800a764:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a766:	6812      	ldr	r2, [r2, #0]
{
 800a768:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a76a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a76c:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a76e:	4829      	ldr	r0, [pc, #164]	@ (800a814 <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a770:	4c29      	ldr	r4, [pc, #164]	@ (800a818 <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a772:	fba0 0202 	umull	r0, r2, r0, r2
 800a776:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a77a:	401c      	ands	r4, r3
 800a77c:	f241 1303 	movw	r3, #4355	@ 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a780:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a782:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a784:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a788:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a78c:	b152      	cbz	r2, 800a7a4 <SDMMC_CmdSetRelAdd+0x44>
 800a78e:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800a790:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a794:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a796:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800a79a:	d001      	beq.n	800a7a0 <SDMMC_CmdSetRelAdd+0x40>
 800a79c:	0492      	lsls	r2, r2, #18
 800a79e:	d506      	bpl.n	800a7ae <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
 800a7a0:	1c58      	adds	r0, r3, #1
 800a7a2:	d1f5      	bne.n	800a790 <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a7a4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a7a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7ac:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a7ae:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a7b2:	075c      	lsls	r4, r3, #29
 800a7b4:	d420      	bmi.n	800a7f8 <SDMMC_CmdSetRelAdd+0x98>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a7b6:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a7ba:	07d8      	lsls	r0, r3, #31
 800a7bc:	d406      	bmi.n	800a7cc <SDMMC_CmdSetRelAdd+0x6c>
  return (uint8_t)(SDMMCx->RESPCMD);
 800a7be:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	2b03      	cmp	r3, #3
 800a7c6:	d005      	beq.n	800a7d4 <SDMMC_CmdSetRelAdd+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7c8:	2001      	movs	r0, #1
 800a7ca:	e7ed      	b.n	800a7a8 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7d2:	e7f9      	b.n	800a7c8 <SDMMC_CmdSetRelAdd+0x68>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a7d4:	4b11      	ldr	r3, [pc, #68]	@ (800a81c <SDMMC_CmdSetRelAdd+0xbc>)
 800a7d6:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 800a7da:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a7de:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 800a7e2:	d011      	beq.n	800a808 <SDMMC_CmdSetRelAdd+0xa8>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a7e4:	045a      	lsls	r2, r3, #17
 800a7e6:	d40c      	bmi.n	800a802 <SDMMC_CmdSetRelAdd+0xa2>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a7e8:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800a7ec:	bf0c      	ite	eq
 800a7ee:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800a7f2:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 800a7f6:	e7d7      	b.n	800a7a8 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a7f8:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7fa:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a7fc:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a800:	e7d2      	b.n	800a7a8 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a802:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a806:	e7cf      	b.n	800a7a8 <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a808:	0c1b      	lsrs	r3, r3, #16
 800a80a:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 800a80c:	e7cc      	b.n	800a7a8 <SDMMC_CmdSetRelAdd+0x48>
 800a80e:	bf00      	nop
 800a810:	2400000c 	.word	0x2400000c
 800a814:	10624dd3 	.word	0x10624dd3
 800a818:	fffee0c0 	.word	0xfffee0c0
 800a81c:	002000c5 	.word	0x002000c5

0800a820 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a820:	4a4f      	ldr	r2, [pc, #316]	@ (800a960 <SDMMC_CmdSendStatus+0x140>)
{
 800a822:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a824:	4b4f      	ldr	r3, [pc, #316]	@ (800a964 <SDMMC_CmdSendStatus+0x144>)
 800a826:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a828:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a82c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a830:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a834:	484c      	ldr	r0, [pc, #304]	@ (800a968 <SDMMC_CmdSendStatus+0x148>)
 800a836:	f241 130d 	movw	r3, #4365	@ 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a83a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a83c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a83e:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a842:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a844:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a848:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a84c:	1e53      	subs	r3, r2, #1
 800a84e:	b14a      	cbz	r2, 800a864 <SDMMC_CmdSendStatus+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a850:	4946      	ldr	r1, [pc, #280]	@ (800a96c <SDMMC_CmdSendStatus+0x14c>)
    sta_reg = SDMMCx->STA;
 800a852:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a856:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a858:	420a      	tst	r2, r1
 800a85a:	d001      	beq.n	800a860 <SDMMC_CmdSendStatus+0x40>
 800a85c:	0492      	lsls	r2, r2, #18
 800a85e:	d504      	bpl.n	800a86a <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 800a860:	1c58      	adds	r0, r3, #1
 800a862:	d1f6      	bne.n	800a852 <SDMMC_CmdSendStatus+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800a864:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a868:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a86a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a86e:	075b      	lsls	r3, r3, #29
 800a870:	d443      	bmi.n	800a8fa <SDMMC_CmdSendStatus+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a872:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a876:	07d8      	lsls	r0, r3, #31
 800a878:	d409      	bmi.n	800a88e <SDMMC_CmdSendStatus+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a87a:	4b3d      	ldr	r3, [pc, #244]	@ (800a970 <SDMMC_CmdSendStatus+0x150>)
 800a87c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a880:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a884:	b2db      	uxtb	r3, r3
 800a886:	2b0d      	cmp	r3, #13
 800a888:	d005      	beq.n	800a896 <SDMMC_CmdSendStatus+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a88a:	2001      	movs	r0, #1
 800a88c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a88e:	2301      	movs	r3, #1
 800a890:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a894:	e7f9      	b.n	800a88a <SDMMC_CmdSendStatus+0x6a>
  return (*(__IO uint32_t *) tmp);
 800a896:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a89a:	4836      	ldr	r0, [pc, #216]	@ (800a974 <SDMMC_CmdSendStatus+0x154>)
 800a89c:	4018      	ands	r0, r3
 800a89e:	b358      	cbz	r0, 800a8f8 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	db2f      	blt.n	800a904 <SDMMC_CmdSendStatus+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a8a4:	0059      	lsls	r1, r3, #1
 800a8a6:	d430      	bmi.n	800a90a <SDMMC_CmdSendStatus+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a8a8:	009a      	lsls	r2, r3, #2
 800a8aa:	d430      	bmi.n	800a90e <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a8ac:	00d9      	lsls	r1, r3, #3
 800a8ae:	d430      	bmi.n	800a912 <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a8b0:	011a      	lsls	r2, r3, #4
 800a8b2:	d431      	bmi.n	800a918 <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a8b4:	0159      	lsls	r1, r3, #5
 800a8b6:	d432      	bmi.n	800a91e <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a8b8:	01da      	lsls	r2, r3, #7
 800a8ba:	d433      	bmi.n	800a924 <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a8bc:	0219      	lsls	r1, r3, #8
 800a8be:	d434      	bmi.n	800a92a <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a8c0:	025a      	lsls	r2, r3, #9
 800a8c2:	d435      	bmi.n	800a930 <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a8c4:	0299      	lsls	r1, r3, #10
 800a8c6:	d43f      	bmi.n	800a948 <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a8c8:	02da      	lsls	r2, r3, #11
 800a8ca:	d43a      	bmi.n	800a942 <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a8cc:	0359      	lsls	r1, r3, #13
 800a8ce:	d435      	bmi.n	800a93c <SDMMC_CmdSendStatus+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a8d0:	039a      	lsls	r2, r3, #14
 800a8d2:	d430      	bmi.n	800a936 <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a8d4:	03d9      	lsls	r1, r3, #15
 800a8d6:	d440      	bmi.n	800a95a <SDMMC_CmdSendStatus+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a8d8:	041a      	lsls	r2, r3, #16
 800a8da:	d43b      	bmi.n	800a954 <SDMMC_CmdSendStatus+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a8dc:	0459      	lsls	r1, r3, #17
 800a8de:	d436      	bmi.n	800a94e <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a8e0:	049a      	lsls	r2, r3, #18
 800a8e2:	d407      	bmi.n	800a8f4 <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a8e4:	f013 0f08 	tst.w	r3, #8
 800a8e8:	bf0c      	ite	eq
 800a8ea:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800a8ee:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800a8f2:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800a8f4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800a8f8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a8fa:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a8fc:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a8fe:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a902:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a904:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800a908:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a90a:	2040      	movs	r0, #64	@ 0x40
 800a90c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a90e:	2080      	movs	r0, #128	@ 0x80
 800a910:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a912:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a916:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a918:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a91c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a91e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a922:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a924:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a928:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a92a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a92e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a930:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a934:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a936:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800a93a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a93c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a940:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800a942:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800a946:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a948:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a94c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a94e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a952:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a954:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a958:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a95a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a95e:	4770      	bx	lr
 800a960:	2400000c 	.word	0x2400000c
 800a964:	10624dd3 	.word	0x10624dd3
 800a968:	fffee0c0 	.word	0xfffee0c0
 800a96c:	00200045 	.word	0x00200045
 800a970:	002000c5 	.word	0x002000c5
 800a974:	fdffe008 	.word	0xfdffe008

0800a978 <SDMMC_CmdStatusRegister>:
{
 800a978:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a97a:	4a4c      	ldr	r2, [pc, #304]	@ (800aaac <SDMMC_CmdStatusRegister+0x134>)
 800a97c:	4b4c      	ldr	r3, [pc, #304]	@ (800aab0 <SDMMC_CmdStatusRegister+0x138>)
 800a97e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a980:	484c      	ldr	r0, [pc, #304]	@ (800aab4 <SDMMC_CmdStatusRegister+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a982:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a986:	f241 130d 	movw	r3, #4365	@ 0x110d
{
 800a98a:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a98c:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a98e:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800a990:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a992:	68cc      	ldr	r4, [r1, #12]
 800a994:	4020      	ands	r0, r4
 800a996:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a998:	f241 3088 	movw	r0, #5000	@ 0x1388
 800a99c:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a9a0:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800a9a2:	b14a      	cbz	r2, 800a9b8 <SDMMC_CmdStatusRegister+0x40>
 800a9a4:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a9a6:	4844      	ldr	r0, [pc, #272]	@ (800aab8 <SDMMC_CmdStatusRegister+0x140>)
    sta_reg = SDMMCx->STA;
 800a9a8:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800a9aa:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a9ac:	4202      	tst	r2, r0
 800a9ae:	d001      	beq.n	800a9b4 <SDMMC_CmdStatusRegister+0x3c>
 800a9b0:	0492      	lsls	r2, r2, #18
 800a9b2:	d506      	bpl.n	800a9c2 <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 800a9b4:	1c5c      	adds	r4, r3, #1
 800a9b6:	d1f7      	bne.n	800a9a8 <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a9b8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a9bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9c0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a9c2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800a9c4:	075c      	lsls	r4, r3, #29
 800a9c6:	d43c      	bmi.n	800aa42 <SDMMC_CmdStatusRegister+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a9c8:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800a9ca:	07d8      	lsls	r0, r3, #31
 800a9cc:	d407      	bmi.n	800a9de <SDMMC_CmdStatusRegister+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a9ce:	4b3b      	ldr	r3, [pc, #236]	@ (800aabc <SDMMC_CmdStatusRegister+0x144>)
 800a9d0:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a9d2:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b0d      	cmp	r3, #13
 800a9d8:	d004      	beq.n	800a9e4 <SDMMC_CmdStatusRegister+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9da:	2001      	movs	r0, #1
 800a9dc:	e7ee      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a9de:	2301      	movs	r3, #1
 800a9e0:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9e2:	e7fa      	b.n	800a9da <SDMMC_CmdStatusRegister+0x62>
  return (*(__IO uint32_t *) tmp);
 800a9e4:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a9e6:	4836      	ldr	r0, [pc, #216]	@ (800aac0 <SDMMC_CmdStatusRegister+0x148>)
 800a9e8:	4018      	ands	r0, r3
 800a9ea:	2800      	cmp	r0, #0
 800a9ec:	d0e6      	beq.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	db2b      	blt.n	800aa4a <SDMMC_CmdStatusRegister+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a9f2:	005a      	lsls	r2, r3, #1
 800a9f4:	d42c      	bmi.n	800aa50 <SDMMC_CmdStatusRegister+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a9f6:	009c      	lsls	r4, r3, #2
 800a9f8:	d42c      	bmi.n	800aa54 <SDMMC_CmdStatusRegister+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a9fa:	00d9      	lsls	r1, r3, #3
 800a9fc:	d42c      	bmi.n	800aa58 <SDMMC_CmdStatusRegister+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a9fe:	011a      	lsls	r2, r3, #4
 800aa00:	d42d      	bmi.n	800aa5e <SDMMC_CmdStatusRegister+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aa02:	015c      	lsls	r4, r3, #5
 800aa04:	d42e      	bmi.n	800aa64 <SDMMC_CmdStatusRegister+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aa06:	01d9      	lsls	r1, r3, #7
 800aa08:	d42f      	bmi.n	800aa6a <SDMMC_CmdStatusRegister+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800aa0a:	021a      	lsls	r2, r3, #8
 800aa0c:	d430      	bmi.n	800aa70 <SDMMC_CmdStatusRegister+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800aa0e:	025c      	lsls	r4, r3, #9
 800aa10:	d431      	bmi.n	800aa76 <SDMMC_CmdStatusRegister+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800aa12:	0299      	lsls	r1, r3, #10
 800aa14:	d43b      	bmi.n	800aa8e <SDMMC_CmdStatusRegister+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800aa16:	02da      	lsls	r2, r3, #11
 800aa18:	d436      	bmi.n	800aa88 <SDMMC_CmdStatusRegister+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800aa1a:	035c      	lsls	r4, r3, #13
 800aa1c:	d431      	bmi.n	800aa82 <SDMMC_CmdStatusRegister+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800aa1e:	0399      	lsls	r1, r3, #14
 800aa20:	d42c      	bmi.n	800aa7c <SDMMC_CmdStatusRegister+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800aa22:	03da      	lsls	r2, r3, #15
 800aa24:	d43f      	bmi.n	800aaa6 <SDMMC_CmdStatusRegister+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800aa26:	041c      	lsls	r4, r3, #16
 800aa28:	d43a      	bmi.n	800aaa0 <SDMMC_CmdStatusRegister+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800aa2a:	0459      	lsls	r1, r3, #17
 800aa2c:	d435      	bmi.n	800aa9a <SDMMC_CmdStatusRegister+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800aa2e:	049a      	lsls	r2, r3, #18
 800aa30:	d430      	bmi.n	800aa94 <SDMMC_CmdStatusRegister+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800aa32:	f013 0f08 	tst.w	r3, #8
 800aa36:	bf0c      	ite	eq
 800aa38:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800aa3c:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800aa40:	e7bc      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa42:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa44:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa46:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa48:	e7b8      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aa4a:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800aa4e:	e7b5      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aa50:	2040      	movs	r0, #64	@ 0x40
 800aa52:	e7b3      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aa54:	2080      	movs	r0, #128	@ 0x80
 800aa56:	e7b1      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aa58:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800aa5c:	e7ae      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800aa5e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800aa62:	e7ab      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aa64:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800aa68:	e7a8      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800aa6a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800aa6e:	e7a5      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aa70:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800aa74:	e7a2      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aa76:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800aa7a:	e79f      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800aa7c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800aa80:	e79c      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800aa82:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800aa86:	e799      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CC_ERR;
 800aa88:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800aa8c:	e796      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800aa8e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800aa92:	e793      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800aa94:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800aa98:	e790      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800aa9a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800aa9e:	e78d      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800aaa0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800aaa4:	e78a      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800aaa6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800aaaa:	e787      	b.n	800a9bc <SDMMC_CmdStatusRegister+0x44>
 800aaac:	2400000c 	.word	0x2400000c
 800aab0:	10624dd3 	.word	0x10624dd3
 800aab4:	fffee0c0 	.word	0xfffee0c0
 800aab8:	00200045 	.word	0x00200045
 800aabc:	002000c5 	.word	0x002000c5
 800aac0:	fdffe008 	.word	0xfdffe008

0800aac4 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800aac4:	2000      	movs	r0, #0
 800aac6:	4770      	bx	lr

0800aac8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800aac8:	b510      	push	{r4, lr}
 800aaca:	4694      	mov	ip, r2
 800aacc:	b082      	sub	sp, #8
 800aace:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800aad0:	460a      	mov	r2, r1
 800aad2:	4663      	mov	r3, ip
 800aad4:	4601      	mov	r1, r0
 800aad6:	9400      	str	r4, [sp, #0]
 800aad8:	4803      	ldr	r0, [pc, #12]	@ (800aae8 <BSP_SD_ReadBlocks+0x20>)
 800aada:	f7fd fd73 	bl	80085c4 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800aade:	3800      	subs	r0, #0
 800aae0:	bf18      	it	ne
 800aae2:	2001      	movne	r0, #1
 800aae4:	b002      	add	sp, #8
 800aae6:	bd10      	pop	{r4, pc}
 800aae8:	24000228 	.word	0x24000228

0800aaec <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800aaec:	b510      	push	{r4, lr}
 800aaee:	4694      	mov	ip, r2
 800aaf0:	b082      	sub	sp, #8
 800aaf2:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800aaf4:	460a      	mov	r2, r1
 800aaf6:	4663      	mov	r3, ip
 800aaf8:	4601      	mov	r1, r0
 800aafa:	9400      	str	r4, [sp, #0]
 800aafc:	4803      	ldr	r0, [pc, #12]	@ (800ab0c <BSP_SD_WriteBlocks+0x20>)
 800aafe:	f7fd fe45 	bl	800878c <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800ab02:	3800      	subs	r0, #0
 800ab04:	bf18      	it	ne
 800ab06:	2001      	movne	r0, #1
 800ab08:	b002      	add	sp, #8
 800ab0a:	bd10      	pop	{r4, pc}
 800ab0c:	24000228 	.word	0x24000228

0800ab10 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ab10:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ab12:	4803      	ldr	r0, [pc, #12]	@ (800ab20 <BSP_SD_GetCardState+0x10>)
 800ab14:	f7fe fb26 	bl	8009164 <HAL_SD_GetCardState>
}
 800ab18:	3804      	subs	r0, #4
 800ab1a:	bf18      	it	ne
 800ab1c:	2001      	movne	r0, #1
 800ab1e:	bd08      	pop	{r3, pc}
 800ab20:	24000228 	.word	0x24000228

0800ab24 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ab24:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ab26:	4801      	ldr	r0, [pc, #4]	@ (800ab2c <BSP_SD_GetCardInfo+0x8>)
 800ab28:	f7fe b9dc 	b.w	8008ee4 <HAL_SD_GetCardInfo>
 800ab2c:	24000228 	.word	0x24000228

0800ab30 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ab30:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 800ab32:	2301      	movs	r3, #1
{
 800ab34:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 800ab36:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ab3a:	f000 f821 	bl	800ab80 <BSP_PlatformIsDetected>
 800ab3e:	b908      	cbnz	r0, 800ab44 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 800ab40:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 800ab44:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800ab48:	b003      	add	sp, #12
 800ab4a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab4e:	bf00      	nop

0800ab50 <BSP_SD_Init>:
{
 800ab50:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ab52:	f7ff ffed 	bl	800ab30 <BSP_SD_IsDetected>
 800ab56:	2801      	cmp	r0, #1
 800ab58:	d001      	beq.n	800ab5e <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800ab5a:	2002      	movs	r0, #2
}
 800ab5c:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800ab5e:	4807      	ldr	r0, [pc, #28]	@ (800ab7c <BSP_SD_Init+0x2c>)
 800ab60:	f7fe fa9e 	bl	80090a0 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800ab64:	2800      	cmp	r0, #0
 800ab66:	d1f9      	bne.n	800ab5c <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ab68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ab6c:	4803      	ldr	r0, [pc, #12]	@ (800ab7c <BSP_SD_Init+0x2c>)
 800ab6e:	f7fe f9cd 	bl	8008f0c <HAL_SD_ConfigWideBusOperation>
 800ab72:	3800      	subs	r0, #0
 800ab74:	bf18      	it	ne
 800ab76:	2001      	movne	r0, #1
}
 800ab78:	bd08      	pop	{r3, pc}
 800ab7a:	bf00      	nop
 800ab7c:	24000228 	.word	0x24000228

0800ab80 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ab80:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ab84:	4803      	ldr	r0, [pc, #12]	@ (800ab94 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 800ab86:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ab88:	f7f9 fc62 	bl	8004450 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800ab8c:	fab0 f080 	clz	r0, r0
 800ab90:	0940      	lsrs	r0, r0, #5
 800ab92:	bd08      	pop	{r3, pc}
 800ab94:	58020000 	.word	0x58020000

0800ab98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ab98:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800ab9a:	4c0a      	ldr	r4, [pc, #40]	@ (800abc4 <SD_initialize+0x2c>)
 800ab9c:	2501      	movs	r5, #1
 800ab9e:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800aba0:	f7ff ffd6 	bl	800ab50 <BSP_SD_Init>
 800aba4:	b108      	cbz	r0, 800abaa <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800aba6:	7820      	ldrb	r0, [r4, #0]
}
 800aba8:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800abaa:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800abac:	f7ff ffb0 	bl	800ab10 <BSP_SD_GetCardState>
 800abb0:	b918      	cbnz	r0, 800abba <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800abb2:	7823      	ldrb	r3, [r4, #0]
 800abb4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800abb8:	7023      	strb	r3, [r4, #0]
  return Stat;
 800abba:	7823      	ldrb	r3, [r4, #0]
 800abbc:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800abbe:	7023      	strb	r3, [r4, #0]
  return Stat;
 800abc0:	7820      	ldrb	r0, [r4, #0]
}
 800abc2:	bd38      	pop	{r3, r4, r5, pc}
 800abc4:	24000018 	.word	0x24000018

0800abc8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800abc8:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800abca:	2301      	movs	r3, #1
 800abcc:	4c05      	ldr	r4, [pc, #20]	@ (800abe4 <SD_status+0x1c>)
 800abce:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800abd0:	f7ff ff9e 	bl	800ab10 <BSP_SD_GetCardState>
 800abd4:	b918      	cbnz	r0, 800abde <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800abd6:	7823      	ldrb	r3, [r4, #0]
 800abd8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800abdc:	7023      	strb	r3, [r4, #0]
  return Stat;
 800abde:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800abe0:	bd10      	pop	{r4, pc}
 800abe2:	bf00      	nop
 800abe4:	24000018 	.word	0x24000018

0800abe8 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800abe8:	4b16      	ldr	r3, [pc, #88]	@ (800ac44 <SD_ioctl+0x5c>)
{
 800abea:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800abec:	7818      	ldrb	r0, [r3, #0]
{
 800abee:	b08b      	sub	sp, #44	@ 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800abf0:	f010 0401 	ands.w	r4, r0, #1
 800abf4:	d106      	bne.n	800ac04 <SD_ioctl+0x1c>
 800abf6:	4615      	mov	r5, r2

  switch (cmd)
 800abf8:	2903      	cmp	r1, #3
 800abfa:	d820      	bhi.n	800ac3e <SD_ioctl+0x56>
 800abfc:	e8df f001 	tbb	[pc, r1]
 800ac00:	06170f03 	.word	0x06170f03
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ac04:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800ac06:	4620      	mov	r0, r4
 800ac08:	b00b      	add	sp, #44	@ 0x2c
 800ac0a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800ac0c:	a801      	add	r0, sp, #4
 800ac0e:	f7ff ff89 	bl	800ab24 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ac12:	9b08      	ldr	r3, [sp, #32]
}
 800ac14:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ac16:	0a5b      	lsrs	r3, r3, #9
 800ac18:	602b      	str	r3, [r5, #0]
}
 800ac1a:	b00b      	add	sp, #44	@ 0x2c
 800ac1c:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800ac1e:	a801      	add	r0, sp, #4
 800ac20:	f7ff ff80 	bl	800ab24 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ac24:	9b07      	ldr	r3, [sp, #28]
}
 800ac26:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ac28:	602b      	str	r3, [r5, #0]
}
 800ac2a:	b00b      	add	sp, #44	@ 0x2c
 800ac2c:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800ac2e:	a801      	add	r0, sp, #4
 800ac30:	f7ff ff78 	bl	800ab24 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ac34:	9b08      	ldr	r3, [sp, #32]
}
 800ac36:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ac38:	802b      	strh	r3, [r5, #0]
}
 800ac3a:	b00b      	add	sp, #44	@ 0x2c
 800ac3c:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 800ac3e:	2404      	movs	r4, #4
 800ac40:	e7e1      	b.n	800ac06 <SD_ioctl+0x1e>
 800ac42:	bf00      	nop
 800ac44:	24000018 	.word	0x24000018

0800ac48 <SD_read>:
{
 800ac48:	b508      	push	{r3, lr}
 800ac4a:	4608      	mov	r0, r1
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	461a      	mov	r2, r3
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ac50:	f04f 33ff 	mov.w	r3, #4294967295
 800ac54:	f7ff ff38 	bl	800aac8 <BSP_SD_ReadBlocks>
 800ac58:	b108      	cbz	r0, 800ac5e <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800ac5a:	2001      	movs	r0, #1
}
 800ac5c:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ac5e:	f7ff ff57 	bl	800ab10 <BSP_SD_GetCardState>
 800ac62:	2800      	cmp	r0, #0
 800ac64:	d0fa      	beq.n	800ac5c <SD_read+0x14>
 800ac66:	f7ff ff53 	bl	800ab10 <BSP_SD_GetCardState>
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	d1f7      	bne.n	800ac5e <SD_read+0x16>
 800ac6e:	e7f5      	b.n	800ac5c <SD_read+0x14>

0800ac70 <SD_write>:
{
 800ac70:	b508      	push	{r3, lr}
 800ac72:	4608      	mov	r0, r1
 800ac74:	4611      	mov	r1, r2
 800ac76:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ac78:	f04f 33ff 	mov.w	r3, #4294967295
 800ac7c:	f7ff ff36 	bl	800aaec <BSP_SD_WriteBlocks>
 800ac80:	b108      	cbz	r0, 800ac86 <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800ac82:	2001      	movs	r0, #1
}
 800ac84:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ac86:	f7ff ff43 	bl	800ab10 <BSP_SD_GetCardState>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	d0fa      	beq.n	800ac84 <SD_write+0x14>
 800ac8e:	f7ff ff3f 	bl	800ab10 <BSP_SD_GetCardState>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d1f7      	bne.n	800ac86 <SD_write+0x16>
 800ac96:	e7f5      	b.n	800ac84 <SD_write+0x14>

0800ac98 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ac98:	4b03      	ldr	r3, [pc, #12]	@ (800aca8 <disk_status+0x10>)
 800ac9a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800ac9e:	4403      	add	r3, r0
 800aca0:	6852      	ldr	r2, [r2, #4]
 800aca2:	7a18      	ldrb	r0, [r3, #8]
 800aca4:	6853      	ldr	r3, [r2, #4]
 800aca6:	4718      	bx	r3
 800aca8:	240bc0b8 	.word	0x240bc0b8

0800acac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800acac:	b538      	push	{r3, r4, r5, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800acae:	4d09      	ldr	r5, [pc, #36]	@ (800acd4 <disk_initialize+0x28>)
 800acb0:	5c2b      	ldrb	r3, [r5, r0]
 800acb2:	b10b      	cbz	r3, 800acb8 <disk_initialize+0xc>
  DSTATUS stat = RES_OK;
 800acb4:	2000      	movs	r0, #0
    {
      disk.is_initialized[pdrv] = 1;
    }
  }
  return stat;
}
 800acb6:	bd38      	pop	{r3, r4, r5, pc}
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800acb8:	eb05 0280 	add.w	r2, r5, r0, lsl #2
 800acbc:	182b      	adds	r3, r5, r0
 800acbe:	4604      	mov	r4, r0
 800acc0:	6852      	ldr	r2, [r2, #4]
 800acc2:	7a18      	ldrb	r0, [r3, #8]
 800acc4:	6813      	ldr	r3, [r2, #0]
 800acc6:	4798      	blx	r3
    if(stat == RES_OK)
 800acc8:	2800      	cmp	r0, #0
 800acca:	d1f4      	bne.n	800acb6 <disk_initialize+0xa>
      disk.is_initialized[pdrv] = 1;
 800accc:	2301      	movs	r3, #1
 800acce:	552b      	strb	r3, [r5, r4]
 800acd0:	e7f0      	b.n	800acb4 <disk_initialize+0x8>
 800acd2:	bf00      	nop
 800acd4:	240bc0b8 	.word	0x240bc0b8

0800acd8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800acd8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800acda:	4c05      	ldr	r4, [pc, #20]	@ (800acf0 <disk_read+0x18>)
 800acdc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800ace0:	4404      	add	r4, r0
 800ace2:	686d      	ldr	r5, [r5, #4]
 800ace4:	7a20      	ldrb	r0, [r4, #8]
 800ace6:	68ac      	ldr	r4, [r5, #8]
 800ace8:	46a4      	mov	ip, r4
  return res;
}
 800acea:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800acec:	4760      	bx	ip
 800acee:	bf00      	nop
 800acf0:	240bc0b8 	.word	0x240bc0b8

0800acf4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800acf4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800acf6:	4c05      	ldr	r4, [pc, #20]	@ (800ad0c <disk_write+0x18>)
 800acf8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800acfc:	4404      	add	r4, r0
 800acfe:	686d      	ldr	r5, [r5, #4]
 800ad00:	7a20      	ldrb	r0, [r4, #8]
 800ad02:	68ec      	ldr	r4, [r5, #12]
 800ad04:	46a4      	mov	ip, r4
  return res;
}
 800ad06:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ad08:	4760      	bx	ip
 800ad0a:	bf00      	nop
 800ad0c:	240bc0b8 	.word	0x240bc0b8

0800ad10 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ad10:	4b04      	ldr	r3, [pc, #16]	@ (800ad24 <disk_ioctl+0x14>)
 800ad12:	eb03 0c00 	add.w	ip, r3, r0
 800ad16:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	4718      	bx	r3
 800ad24:	240bc0b8 	.word	0x240bc0b8

0800ad28 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ad28:	4602      	mov	r2, r0
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800ad2a:	4b28      	ldr	r3, [pc, #160]	@ (800adcc <inc_lock+0xa4>)
{
 800ad2c:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 800ad2e:	6818      	ldr	r0, [r3, #0]
 800ad30:	6814      	ldr	r4, [r2, #0]
 800ad32:	4284      	cmp	r4, r0
 800ad34:	d022      	beq.n	800ad7c <inc_lock+0x54>
 800ad36:	691d      	ldr	r5, [r3, #16]
 800ad38:	42a5      	cmp	r5, r4
 800ad3a:	d005      	beq.n	800ad48 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ad3c:	b370      	cbz	r0, 800ad9c <inc_lock+0x74>
 800ad3e:	2d00      	cmp	r5, #0
 800ad40:	d040      	beq.n	800adc4 <inc_lock+0x9c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ad42:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800ad44:	bcf0      	pop	{r4, r5, r6, r7}
 800ad46:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800ad48:	695e      	ldr	r6, [r3, #20]
 800ad4a:	6897      	ldr	r7, [r2, #8]
 800ad4c:	42be      	cmp	r6, r7
 800ad4e:	d1f5      	bne.n	800ad3c <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
 800ad50:	699e      	ldr	r6, [r3, #24]
 800ad52:	6957      	ldr	r7, [r2, #20]
 800ad54:	42be      	cmp	r6, r7
 800ad56:	d1f1      	bne.n	800ad3c <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ad58:	f04f 0c01 	mov.w	ip, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ad5c:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 800ad60:	ea4f 150c 	mov.w	r5, ip, lsl #4
 800ad64:	8992      	ldrh	r2, [r2, #12]
 800ad66:	b1a1      	cbz	r1, 800ad92 <inc_lock+0x6a>
 800ad68:	2a00      	cmp	r2, #0
 800ad6a:	d1ea      	bne.n	800ad42 <inc_lock+0x1a>
	return i + 1;
 800ad6c:	f10c 0001 	add.w	r0, ip, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ad70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ad74:	442b      	add	r3, r5
}
 800ad76:	bcf0      	pop	{r4, r5, r6, r7}
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ad78:	819a      	strh	r2, [r3, #12]
}
 800ad7a:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800ad7c:	6895      	ldr	r5, [r2, #8]
 800ad7e:	685e      	ldr	r6, [r3, #4]
 800ad80:	42ae      	cmp	r6, r5
 800ad82:	d1d8      	bne.n	800ad36 <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
 800ad84:	6955      	ldr	r5, [r2, #20]
 800ad86:	689e      	ldr	r6, [r3, #8]
 800ad88:	42ae      	cmp	r6, r5
 800ad8a:	d1d4      	bne.n	800ad36 <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ad8c:	f04f 0c00 	mov.w	ip, #0
 800ad90:	e7e4      	b.n	800ad5c <inc_lock+0x34>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ad92:	3201      	adds	r2, #1
	return i + 1;
 800ad94:	f10c 0001 	add.w	r0, ip, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ad98:	b292      	uxth	r2, r2
 800ad9a:	e7eb      	b.n	800ad74 <inc_lock+0x4c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ad9c:	4684      	mov	ip, r0
 800ad9e:	2001      	movs	r0, #1
		Files[i].fs = dp->obj.fs;
 800ada0:	ea4f 150c 	mov.w	r5, ip, lsl #4
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ada4:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 800ada6:	eb03 110c 	add.w	r1, r3, ip, lsl #4
 800adaa:	515c      	str	r4, [r3, r5]
		Files[i].clu = dp->obj.sclust;
 800adac:	6894      	ldr	r4, [r2, #8]
 800adae:	6952      	ldr	r2, [r2, #20]
 800adb0:	e9c1 4201 	strd	r4, r2, [r1, #4]
		Files[i].ctr = 0;
 800adb4:	f04f 0200 	mov.w	r2, #0
 800adb8:	818a      	strh	r2, [r1, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800adba:	bf14      	ite	ne
 800adbc:	f44f 7280 	movne.w	r2, #256	@ 0x100
 800adc0:	2201      	moveq	r2, #1
 800adc2:	e7d7      	b.n	800ad74 <inc_lock+0x4c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800adc4:	2002      	movs	r0, #2
 800adc6:	f04f 0c01 	mov.w	ip, #1
 800adca:	e7e9      	b.n	800ada0 <inc_lock+0x78>
 800adcc:	240bc090 	.word	0x240bc090

0800add0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800add0:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800add2:	f04f 36ff 	mov.w	r6, #4294967295
 800add6:	2300      	movs	r3, #0
{
 800add8:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800adda:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800addc:	70c3      	strb	r3, [r0, #3]
 800adde:	62c6      	str	r6, [r0, #44]	@ 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ade0:	d122      	bne.n	800ae28 <check_fs+0x58>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ade2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ade6:	f8b4 222e 	ldrh.w	r2, [r4, #558]	@ 0x22e
 800adea:	429a      	cmp	r2, r3
 800adec:	d11a      	bne.n	800ae24 <check_fs+0x54>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800adee:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800adf2:	2be9      	cmp	r3, #233	@ 0xe9
 800adf4:	d007      	beq.n	800ae06 <check_fs+0x36>
 800adf6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800adf8:	4a13      	ldr	r2, [pc, #76]	@ (800ae48 <check_fs+0x78>)
 800adfa:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d001      	beq.n	800ae06 <check_fs+0x36>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ae02:	2002      	movs	r0, #2
}
 800ae04:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 800ae06:	f8d4 3066 	ldr.w	r3, [r4, #102]	@ 0x66
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ae0a:	4a10      	ldr	r2, [pc, #64]	@ (800ae4c <check_fs+0x7c>)
 800ae0c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d017      	beq.n	800ae44 <check_fs+0x74>
	rv = rv << 8 | ptr[0];
 800ae14:	f8d4 0082 	ldr.w	r0, [r4, #130]	@ 0x82
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ae18:	4b0d      	ldr	r3, [pc, #52]	@ (800ae50 <check_fs+0x80>)
 800ae1a:	1ac0      	subs	r0, r0, r3
 800ae1c:	bf18      	it	ne
 800ae1e:	2001      	movne	r0, #1
 800ae20:	0040      	lsls	r0, r0, #1
}
 800ae22:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ae24:	2003      	movs	r0, #3
}
 800ae26:	bd70      	pop	{r4, r5, r6, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ae28:	460d      	mov	r5, r1
 800ae2a:	460a      	mov	r2, r1
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	f100 0130 	add.w	r1, r0, #48	@ 0x30
 800ae32:	7840      	ldrb	r0, [r0, #1]
 800ae34:	f7ff ff50 	bl	800acd8 <disk_read>
 800ae38:	b110      	cbz	r0, 800ae40 <check_fs+0x70>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ae3a:	2004      	movs	r0, #4
			fs->winsect = sector;
 800ae3c:	62e6      	str	r6, [r4, #44]	@ 0x2c
}
 800ae3e:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800ae40:	62e5      	str	r5, [r4, #44]	@ 0x2c
	return res;
 800ae42:	e7ce      	b.n	800ade2 <check_fs+0x12>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ae44:	2000      	movs	r0, #0
}
 800ae46:	bd70      	pop	{r4, r5, r6, pc}
 800ae48:	009000eb 	.word	0x009000eb
 800ae4c:	00544146 	.word	0x00544146
 800ae50:	33544146 	.word	0x33544146

0800ae54 <sync_fs>:
{
 800ae54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ae56:	78c3      	ldrb	r3, [r0, #3]
{
 800ae58:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ae5a:	b95b      	cbnz	r3, 800ae74 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ae5c:	7823      	ldrb	r3, [r4, #0]
 800ae5e:	2b03      	cmp	r3, #3
 800ae60:	d02a      	beq.n	800aeb8 <sync_fs+0x64>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ae62:	2200      	movs	r2, #0
 800ae64:	7860      	ldrb	r0, [r4, #1]
 800ae66:	4611      	mov	r1, r2
 800ae68:	f7ff ff52 	bl	800ad10 <disk_ioctl>
 800ae6c:	3800      	subs	r0, #0
 800ae6e:	bf18      	it	ne
 800ae70:	2001      	movne	r0, #1
}
 800ae72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 800ae74:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ae76:	f100 0730 	add.w	r7, r0, #48	@ 0x30
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	7840      	ldrb	r0, [r0, #1]
 800ae7e:	462a      	mov	r2, r5
 800ae80:	4639      	mov	r1, r7
 800ae82:	f7ff ff37 	bl	800acf4 <disk_write>
 800ae86:	b9a8      	cbnz	r0, 800aeb4 <sync_fs+0x60>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ae88:	6a22      	ldr	r2, [r4, #32]
 800ae8a:	69a3      	ldr	r3, [r4, #24]
 800ae8c:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 800ae8e:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d2e3      	bcs.n	800ae5c <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ae94:	78a6      	ldrb	r6, [r4, #2]
 800ae96:	2e01      	cmp	r6, #1
 800ae98:	d801      	bhi.n	800ae9e <sync_fs+0x4a>
 800ae9a:	e7df      	b.n	800ae5c <sync_fs+0x8>
					wsect += fs->fsize;
 800ae9c:	69a3      	ldr	r3, [r4, #24]
 800ae9e:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aea0:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800aea2:	2301      	movs	r3, #1
 800aea4:	4639      	mov	r1, r7
 800aea6:	462a      	mov	r2, r5
 800aea8:	7860      	ldrb	r0, [r4, #1]
 800aeaa:	f7ff ff23 	bl	800acf4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aeae:	2e01      	cmp	r6, #1
 800aeb0:	d1f4      	bne.n	800ae9c <sync_fs+0x48>
 800aeb2:	e7d3      	b.n	800ae5c <sync_fs+0x8>
			res = FR_DISK_ERR;
 800aeb4:	2001      	movs	r0, #1
}
 800aeb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800aeb8:	7925      	ldrb	r5, [r4, #4]
 800aeba:	2d01      	cmp	r5, #1
 800aebc:	d1d1      	bne.n	800ae62 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 800aebe:	f104 0630 	add.w	r6, r4, #48	@ 0x30
		*d++ = (BYTE)val;
 800aec2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aec6:	2100      	movs	r1, #0
 800aec8:	4630      	mov	r0, r6
 800aeca:	f001 fda1 	bl	800ca10 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800aece:	480f      	ldr	r0, [pc, #60]	@ (800af0c <sync_fs+0xb8>)
	*ptr++ = (BYTE)val; val >>= 8;
 800aed0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
 800aed4:	6320      	str	r0, [r4, #48]	@ 0x30
 800aed6:	f100 50ff 	add.w	r0, r0, #534773760	@ 0x1fe00000
	*ptr++ = (BYTE)val; val >>= 8;
 800aeda:	f8a4 322e 	strh.w	r3, [r4, #558]	@ 0x22e
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800aede:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800aee0:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 800aee4:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800aee8:	3020      	adds	r0, #32
 800aeea:	f8c4 2218 	str.w	r2, [r4, #536]	@ 0x218
			fs->winsect = fs->volbase + 1;
 800aeee:	69e2      	ldr	r2, [r4, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800aef0:	f8c4 121c 	str.w	r1, [r4, #540]	@ 0x21c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800aef4:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 800aef6:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800aef8:	f8c4 0214 	str.w	r0, [r4, #532]	@ 0x214
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800aefc:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800aefe:	62e2      	str	r2, [r4, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800af00:	f7ff fef8 	bl	800acf4 <disk_write>
			fs->fsi_flag = 0;
 800af04:	2300      	movs	r3, #0
 800af06:	7123      	strb	r3, [r4, #4]
 800af08:	e7ab      	b.n	800ae62 <sync_fs+0xe>
 800af0a:	bf00      	nop
 800af0c:	41615252 	.word	0x41615252

0800af10 <move_window>:
{
 800af10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800af14:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
 800af16:	428e      	cmp	r6, r1
 800af18:	d102      	bne.n	800af20 <move_window+0x10>
	FRESULT res = FR_OK;
 800af1a:	2000      	movs	r0, #0
}
 800af1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800af20:	4604      	mov	r4, r0
 800af22:	460d      	mov	r5, r1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800af24:	7840      	ldrb	r0, [r0, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800af26:	78e3      	ldrb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800af28:	f104 0730 	add.w	r7, r4, #48	@ 0x30
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800af2c:	b95b      	cbnz	r3, 800af46 <move_window+0x36>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800af2e:	2301      	movs	r3, #1
 800af30:	4639      	mov	r1, r7
 800af32:	462a      	mov	r2, r5
 800af34:	f7ff fed0 	bl	800acd8 <disk_read>
 800af38:	b110      	cbz	r0, 800af40 <move_window+0x30>
				res = FR_DISK_ERR;
 800af3a:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800af3c:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 800af40:	62e5      	str	r5, [r4, #44]	@ 0x2c
}
 800af42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800af46:	2301      	movs	r3, #1
 800af48:	4632      	mov	r2, r6
 800af4a:	4639      	mov	r1, r7
 800af4c:	f7ff fed2 	bl	800acf4 <disk_write>
 800af50:	b9d0      	cbnz	r0, 800af88 <move_window+0x78>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800af52:	6a22      	ldr	r2, [r4, #32]
 800af54:	69a3      	ldr	r3, [r4, #24]
 800af56:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 800af58:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d212      	bcs.n	800af84 <move_window+0x74>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af5e:	f894 8002 	ldrb.w	r8, [r4, #2]
 800af62:	f1b8 0f01 	cmp.w	r8, #1
 800af66:	d801      	bhi.n	800af6c <move_window+0x5c>
 800af68:	e00c      	b.n	800af84 <move_window+0x74>
					wsect += fs->fsize;
 800af6a:	69a3      	ldr	r3, [r4, #24]
 800af6c:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af6e:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800af72:	2301      	movs	r3, #1
 800af74:	4639      	mov	r1, r7
 800af76:	4632      	mov	r2, r6
 800af78:	7860      	ldrb	r0, [r4, #1]
 800af7a:	f7ff febb 	bl	800acf4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af7e:	f1b8 0f01 	cmp.w	r8, #1
 800af82:	d1f2      	bne.n	800af6a <move_window+0x5a>
 800af84:	7860      	ldrb	r0, [r4, #1]
 800af86:	e7d2      	b.n	800af2e <move_window+0x1e>
			res = FR_DISK_ERR;
 800af88:	2001      	movs	r0, #1
 800af8a:	e7c7      	b.n	800af1c <move_window+0xc>

0800af8c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800af8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800af90:	2300      	movs	r3, #0
	if (*path) {	/* If the pointer is not a null */
 800af92:	6804      	ldr	r4, [r0, #0]
	*rfs = 0;
 800af94:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800af96:	b18c      	cbz	r4, 800afbc <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800af98:	7825      	ldrb	r5, [r4, #0]
 800af9a:	2d20      	cmp	r5, #32
 800af9c:	d911      	bls.n	800afc2 <find_volume+0x36>
 800af9e:	2d3a      	cmp	r5, #58	@ 0x3a
 800afa0:	d00f      	beq.n	800afc2 <find_volume+0x36>
 800afa2:	46a4      	mov	ip, r4
 800afa4:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800afa8:	2b20      	cmp	r3, #32
 800afaa:	d90c      	bls.n	800afc6 <find_volume+0x3a>
 800afac:	2b3a      	cmp	r3, #58	@ 0x3a
 800afae:	d1f9      	bne.n	800afa4 <find_volume+0x18>
			i = *tp++ - '0';
 800afb0:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800afb2:	45a4      	cmp	ip, r4
 800afb4:	d102      	bne.n	800afbc <find_volume+0x30>
 800afb6:	2d30      	cmp	r5, #48	@ 0x30
 800afb8:	f000 80e1 	beq.w	800b17e <find_volume+0x1f2>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800afbc:	200b      	movs	r0, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800afbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800afc2:	462b      	mov	r3, r5
 800afc4:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800afc6:	2b3a      	cmp	r3, #58	@ 0x3a
 800afc8:	d0f2      	beq.n	800afb0 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800afca:	4ba1      	ldr	r3, [pc, #644]	@ (800b250 <find_volume+0x2c4>)
 800afcc:	681c      	ldr	r4, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800afce:	2c00      	cmp	r4, #0
 800afd0:	f000 80c6 	beq.w	800b160 <find_volume+0x1d4>
	*rfs = fs;							/* Return pointer to the file system object */
 800afd4:	600c      	str	r4, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800afd6:	f002 05fe 	and.w	r5, r2, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800afda:	7823      	ldrb	r3, [r4, #0]
 800afdc:	b153      	cbz	r3, 800aff4 <find_volume+0x68>
		stat = disk_status(fs->drv);
 800afde:	7860      	ldrb	r0, [r4, #1]
 800afe0:	f7ff fe5a 	bl	800ac98 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800afe4:	07c3      	lsls	r3, r0, #31
 800afe6:	d405      	bmi.n	800aff4 <find_volume+0x68>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800afe8:	b115      	cbz	r5, 800aff0 <find_volume+0x64>
 800afea:	0747      	lsls	r7, r0, #29
 800afec:	f100 80b5 	bmi.w	800b15a <find_volume+0x1ce>
			return FR_OK;				/* The file system object is valid */
 800aff0:	2000      	movs	r0, #0
 800aff2:	e08d      	b.n	800b110 <find_volume+0x184>
	fs->fs_type = 0;					/* Clear the file system object */
 800aff4:	2000      	movs	r0, #0
 800aff6:	8020      	strh	r0, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800aff8:	f7ff fe58 	bl	800acac <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800affc:	07c6      	lsls	r6, r0, #31
 800affe:	f100 8089 	bmi.w	800b114 <find_volume+0x188>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b002:	b115      	cbz	r5, 800b00a <find_volume+0x7e>
 800b004:	0745      	lsls	r5, r0, #29
 800b006:	f100 80a8 	bmi.w	800b15a <find_volume+0x1ce>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b00a:	2100      	movs	r1, #0
 800b00c:	4620      	mov	r0, r4
 800b00e:	f7ff fedf 	bl	800add0 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b012:	2802      	cmp	r0, #2
 800b014:	f000 8081 	beq.w	800b11a <find_volume+0x18e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b018:	2804      	cmp	r0, #4
 800b01a:	f000 80ac 	beq.w	800b176 <find_volume+0x1ea>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b01e:	2801      	cmp	r0, #1
 800b020:	d875      	bhi.n	800b10e <find_volume+0x182>
 800b022:	2500      	movs	r5, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b024:	f8b4 303b 	ldrh.w	r3, [r4, #59]	@ 0x3b
 800b028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b02c:	d16f      	bne.n	800b10e <find_volume+0x182>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b02e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b032:	b901      	cbnz	r1, 800b036 <find_volume+0xaa>
	rv = rv << 8 | ptr[0];
 800b034:	6d61      	ldr	r1, [r4, #84]	@ 0x54
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b036:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
		fs->fsize = fasize;
 800b03a:	61a1      	str	r1, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b03c:	1e53      	subs	r3, r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b03e:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b040:	2b01      	cmp	r3, #1
 800b042:	d864      	bhi.n	800b10e <find_volume+0x182>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b044:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800b048:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d05f      	beq.n	800b10e <find_volume+0x182>
 800b04e:	1e58      	subs	r0, r3, #1
 800b050:	4218      	tst	r0, r3
 800b052:	d15c      	bne.n	800b10e <find_volume+0x182>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b054:	f8b4 7041 	ldrh.w	r7, [r4, #65]	@ 0x41
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b058:	0738      	lsls	r0, r7, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b05a:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b05c:	d157      	bne.n	800b10e <find_volume+0x182>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b05e:	f8b4 0043 	ldrh.w	r0, [r4, #67]	@ 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b062:	b900      	cbnz	r0, 800b066 <find_volume+0xda>
	rv = rv << 8 | ptr[0];
 800b064:	6d20      	ldr	r0, [r4, #80]	@ 0x50
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b066:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b06a:	f1bc 0f00 	cmp.w	ip, #0
 800b06e:	d04e      	beq.n	800b10e <find_volume+0x182>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b070:	fb01 f202 	mul.w	r2, r1, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b074:	eb0c 1617 	add.w	r6, ip, r7, lsr #4
 800b078:	4416      	add	r6, r2
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b07a:	42b0      	cmp	r0, r6
 800b07c:	d347      	bcc.n	800b10e <find_volume+0x182>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b07e:	1b80      	subs	r0, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b080:	4298      	cmp	r0, r3
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b082:	fbb0 fef3 	udiv	lr, r0, r3
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b086:	d342      	bcc.n	800b10e <find_volume+0x182>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b088:	eb0c 0305 	add.w	r3, ip, r5
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b08c:	f64f 7cf5 	movw	ip, #65525	@ 0xfff5
		fs->database = bsect + sysect;					/* Data start sector */
 800b090:	442e      	add	r6, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b092:	f10e 0002 	add.w	r0, lr, #2
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b096:	45e6      	cmp	lr, ip
 800b098:	f240 808f 	bls.w	800b1ba <find_volume+0x22e>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b09c:	6223      	str	r3, [r4, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b09e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
		fs->database = bsect + sysect;					/* Data start sector */
 800b0a2:	62a6      	str	r6, [r4, #40]	@ 0x28
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b0a4:	433b      	orrs	r3, r7
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b0a6:	6160      	str	r0, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b0a8:	61e5      	str	r5, [r4, #28]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b0aa:	d130      	bne.n	800b10e <find_volume+0x182>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b0ac:	0083      	lsls	r3, r0, #2
	rv = rv << 8 | ptr[0];
 800b0ae:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b0b0:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b0b4:	6262      	str	r2, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b0b6:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 800b0ba:	d328      	bcc.n	800b10e <find_volume+0x182>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b0bc:	f8b4 2060 	ldrh.w	r2, [r4, #96]	@ 0x60
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b0c0:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 800b0c4:	2180      	movs	r1, #128	@ 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b0c6:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 800b0c8:	7121      	strb	r1, [r4, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b0ca:	e9c4 3303 	strd	r3, r3, [r4, #12]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b0ce:	f000 809c 	beq.w	800b20a <find_volume+0x27e>
		fmt = FS_FAT32;
 800b0d2:	2303      	movs	r3, #3
	fs->id = ++Fsid;		/* File system mount ID */
 800b0d4:	495f      	ldr	r1, [pc, #380]	@ (800b254 <find_volume+0x2c8>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800b0d6:	7023      	strb	r3, [r4, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b0d8:	4a5f      	ldr	r2, [pc, #380]	@ (800b258 <find_volume+0x2cc>)
	fs->id = ++Fsid;		/* File system mount ID */
 800b0da:	880b      	ldrh	r3, [r1, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b0dc:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b0de:	3301      	adds	r3, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b0e0:	42a0      	cmp	r0, r4
	fs->id = ++Fsid;		/* File system mount ID */
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	800b      	strh	r3, [r1, #0]
 800b0e6:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b0e8:	f000 808c 	beq.w	800b204 <find_volume+0x278>
 800b0ec:	6913      	ldr	r3, [r2, #16]
 800b0ee:	429c      	cmp	r4, r3
 800b0f0:	f47f af7e 	bne.w	800aff0 <find_volume+0x64>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	6113      	str	r3, [r2, #16]
 800b0f8:	e77a      	b.n	800aff0 <find_volume+0x64>
	rv = rv << 8 | ptr[0];
 800b0fa:	f8d4 5226 	ldr.w	r5, [r4, #550]	@ 0x226
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b0fe:	2e00      	cmp	r6, #0
 800b100:	d14a      	bne.n	800b198 <find_volume+0x20c>
 800b102:	2f00      	cmp	r7, #0
 800b104:	d151      	bne.n	800b1aa <find_volume+0x21e>
 800b106:	f1b8 0f00 	cmp.w	r8, #0
 800b10a:	d13c      	bne.n	800b186 <find_volume+0x1fa>
 800b10c:	bb55      	cbnz	r5, 800b164 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b10e:	200d      	movs	r0, #13
}
 800b110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b114:	2003      	movs	r0, #3
}
 800b116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b11a:	f894 61f2 	ldrb.w	r6, [r4, #498]	@ 0x1f2
 800b11e:	b10e      	cbz	r6, 800b124 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
 800b120:	f8d4 61f6 	ldr.w	r6, [r4, #502]	@ 0x1f6
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b124:	f894 7202 	ldrb.w	r7, [r4, #514]	@ 0x202
 800b128:	b10f      	cbz	r7, 800b12e <find_volume+0x1a2>
	rv = rv << 8 | ptr[0];
 800b12a:	f8d4 7206 	ldr.w	r7, [r4, #518]	@ 0x206
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b12e:	f894 3212 	ldrb.w	r3, [r4, #530]	@ 0x212
 800b132:	b313      	cbz	r3, 800b17a <find_volume+0x1ee>
	rv = rv << 8 | ptr[0];
 800b134:	f8d4 8216 	ldr.w	r8, [r4, #534]	@ 0x216
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b138:	f894 5222 	ldrb.w	r5, [r4, #546]	@ 0x222
 800b13c:	2d00      	cmp	r5, #0
 800b13e:	d1dc      	bne.n	800b0fa <find_volume+0x16e>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b140:	bb56      	cbnz	r6, 800b198 <find_volume+0x20c>
 800b142:	bb8f      	cbnz	r7, 800b1a8 <find_volume+0x21c>
 800b144:	f1b8 0f00 	cmp.w	r8, #0
 800b148:	d0e1      	beq.n	800b10e <find_volume+0x182>
 800b14a:	4641      	mov	r1, r8
 800b14c:	4620      	mov	r0, r4
 800b14e:	f7ff fe3f 	bl	800add0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b152:	2801      	cmp	r0, #1
 800b154:	d8db      	bhi.n	800b10e <find_volume+0x182>
			bsect = br[i];
 800b156:	4645      	mov	r5, r8
 800b158:	e764      	b.n	800b024 <find_volume+0x98>
				return FR_WRITE_PROTECTED;
 800b15a:	200a      	movs	r0, #10
}
 800b15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b160:	200c      	movs	r0, #12
 800b162:	e7d5      	b.n	800b110 <find_volume+0x184>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b164:	4629      	mov	r1, r5
 800b166:	4620      	mov	r0, r4
 800b168:	f7ff fe32 	bl	800add0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b16c:	2801      	cmp	r0, #1
 800b16e:	f67f af59 	bls.w	800b024 <find_volume+0x98>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b172:	2804      	cmp	r0, #4
 800b174:	d1cb      	bne.n	800b10e <find_volume+0x182>
 800b176:	2001      	movs	r0, #1
 800b178:	e7ca      	b.n	800b110 <find_volume+0x184>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b17a:	4698      	mov	r8, r3
 800b17c:	e7dc      	b.n	800b138 <find_volume+0x1ac>
					*path = ++tt;
 800b17e:	f10c 0301 	add.w	r3, ip, #1
 800b182:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b184:	e721      	b.n	800afca <find_volume+0x3e>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b186:	4641      	mov	r1, r8
 800b188:	4620      	mov	r0, r4
 800b18a:	f7ff fe21 	bl	800add0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b18e:	2801      	cmp	r0, #1
 800b190:	d9e1      	bls.n	800b156 <find_volume+0x1ca>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b192:	2d00      	cmp	r5, #0
 800b194:	d1e6      	bne.n	800b164 <find_volume+0x1d8>
 800b196:	e7ba      	b.n	800b10e <find_volume+0x182>
 800b198:	4631      	mov	r1, r6
 800b19a:	4620      	mov	r0, r4
 800b19c:	f7ff fe18 	bl	800add0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b1a0:	2801      	cmp	r0, #1
 800b1a2:	d8ae      	bhi.n	800b102 <find_volume+0x176>
			bsect = br[i];
 800b1a4:	4635      	mov	r5, r6
 800b1a6:	e73d      	b.n	800b024 <find_volume+0x98>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b1a8:	4635      	mov	r5, r6
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f7ff fe0f 	bl	800add0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b1b2:	2801      	cmp	r0, #1
 800b1b4:	d8a7      	bhi.n	800b106 <find_volume+0x17a>
			bsect = br[i];
 800b1b6:	463d      	mov	r5, r7
 800b1b8:	e734      	b.n	800b024 <find_volume+0x98>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b1ba:	f640 7cf5 	movw	ip, #4085	@ 0xff5
		fs->volbase = bsect;							/* Volume start sector */
 800b1be:	61e5      	str	r5, [r4, #28]
		fs->database = bsect + sysect;					/* Data start sector */
 800b1c0:	62a6      	str	r6, [r4, #40]	@ 0x28
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b1c2:	45e6      	cmp	lr, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b1c4:	6160      	str	r0, [r4, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b1c6:	6223      	str	r3, [r4, #32]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b1c8:	d816      	bhi.n	800b1f8 <find_volume+0x26c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b1ca:	2f00      	cmp	r7, #0
 800b1cc:	d09f      	beq.n	800b10e <find_volume+0x182>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b1ce:	441a      	add	r2, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b1d0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800b1d4:	f000 0001 	and.w	r0, r0, #1
 800b1d8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800b1dc:	2301      	movs	r3, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b1de:	f200 10ff 	addw	r0, r0, #511	@ 0x1ff
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b1e2:	6262      	str	r2, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b1e4:	ebb1 2f50 	cmp.w	r1, r0, lsr #9
 800b1e8:	d391      	bcc.n	800b10e <find_volume+0x182>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b1ea:	f04f 32ff 	mov.w	r2, #4294967295
		fs->fsi_flag = 0x80;
 800b1ee:	2180      	movs	r1, #128	@ 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b1f0:	e9c4 2203 	strd	r2, r2, [r4, #12]
		fs->fsi_flag = 0x80;
 800b1f4:	7121      	strb	r1, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b1f6:	e76d      	b.n	800b0d4 <find_volume+0x148>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b1f8:	2f00      	cmp	r7, #0
 800b1fa:	d088      	beq.n	800b10e <find_volume+0x182>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b1fc:	441a      	add	r2, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b1fe:	0040      	lsls	r0, r0, #1
 800b200:	2302      	movs	r3, #2
 800b202:	e7ec      	b.n	800b1de <find_volume+0x252>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b204:	2300      	movs	r3, #0
 800b206:	6013      	str	r3, [r2, #0]
 800b208:	e770      	b.n	800b0ec <find_volume+0x160>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b20a:	1c69      	adds	r1, r5, #1
 800b20c:	4620      	mov	r0, r4
 800b20e:	f7ff fe7f 	bl	800af10 <move_window>
 800b212:	2800      	cmp	r0, #0
 800b214:	f47f af5d 	bne.w	800b0d2 <find_volume+0x146>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b218:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800b21c:	f8b4 122e 	ldrh.w	r1, [r4, #558]	@ 0x22e
			fs->fsi_flag = 0;
 800b220:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b222:	4291      	cmp	r1, r2
 800b224:	f47f af55 	bne.w	800b0d2 <find_volume+0x146>
	rv = rv << 8 | ptr[0];
 800b228:	6b22      	ldr	r2, [r4, #48]	@ 0x30
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b22a:	4b0c      	ldr	r3, [pc, #48]	@ (800b25c <find_volume+0x2d0>)
 800b22c:	429a      	cmp	r2, r3
 800b22e:	f47f af50 	bne.w	800b0d2 <find_volume+0x146>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b232:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
	rv = rv << 8 | ptr[0];
 800b236:	f8d4 2214 	ldr.w	r2, [r4, #532]	@ 0x214
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b23a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b23e:	3320      	adds	r3, #32
 800b240:	429a      	cmp	r2, r3
 800b242:	f47f af46 	bne.w	800b0d2 <find_volume+0x146>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b246:	e9d4 2386 	ldrd	r2, r3, [r4, #536]	@ 0x218
 800b24a:	e9c4 3203 	strd	r3, r2, [r4, #12]
 800b24e:	e740      	b.n	800b0d2 <find_volume+0x146>
 800b250:	240bc0b4 	.word	0x240bc0b4
 800b254:	240bc0b0 	.word	0x240bc0b0
 800b258:	240bc090 	.word	0x240bc090
 800b25c:	41615252 	.word	0x41615252

0800b260 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800b260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 800b264:	f890 9000 	ldrb.w	r9, [r0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800b268:	4605      	mov	r5, r0
 800b26a:	460e      	mov	r6, r1
 800b26c:	4614      	mov	r4, r2
		switch (fs->fs_type) {
 800b26e:	f1b9 0f02 	cmp.w	r9, #2
 800b272:	d008      	beq.n	800b286 <put_fat.part.0+0x26>
 800b274:	f1b9 0f03 	cmp.w	r9, #3
 800b278:	d042      	beq.n	800b300 <put_fat.part.0+0xa0>
 800b27a:	f1b9 0f01 	cmp.w	r9, #1
 800b27e:	d014      	beq.n	800b2aa <put_fat.part.0+0x4a>
 800b280:	2002      	movs	r0, #2
}
 800b282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b286:	6a01      	ldr	r1, [r0, #32]
 800b288:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 800b28c:	f7ff fe40 	bl	800af10 <move_window>
			if (res != FR_OK) break;
 800b290:	2800      	cmp	r0, #0
 800b292:	d1f6      	bne.n	800b282 <put_fat.part.0+0x22>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b294:	0076      	lsls	r6, r6, #1
 800b296:	f105 0330 	add.w	r3, r5, #48	@ 0x30
 800b29a:	f406 76ff 	and.w	r6, r6, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800b29e:	559c      	strb	r4, [r3, r6]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b2a0:	199a      	adds	r2, r3, r6
	*ptr++ = (BYTE)val; val >>= 8;
 800b2a2:	f3c4 2407 	ubfx	r4, r4, #8, #8
	*ptr++ = (BYTE)val;
 800b2a6:	7054      	strb	r4, [r2, #1]
			break;
 800b2a8:	e03d      	b.n	800b326 <put_fat.part.0+0xc6>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b2aa:	6a01      	ldr	r1, [r0, #32]
			bc = (UINT)clst; bc += bc / 2;
 800b2ac:	eb06 0856 	add.w	r8, r6, r6, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b2b0:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800b2b4:	f7ff fe2c 	bl	800af10 <move_window>
			if (res != FR_OK) break;
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d1e2      	bne.n	800b282 <put_fat.part.0+0x22>
			p = fs->win + bc++ % SS(fs);
 800b2bc:	f108 0701 	add.w	r7, r8, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b2c0:	07f2      	lsls	r2, r6, #31
			p = fs->win + bc++ % SS(fs);
 800b2c2:	f3c8 0308 	ubfx	r3, r8, #0, #9
 800b2c6:	f105 0830 	add.w	r8, r5, #48	@ 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b2ca:	ea4f 2157 	mov.w	r1, r7, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b2ce:	d52f      	bpl.n	800b330 <put_fat.part.0+0xd0>
 800b2d0:	f818 2003 	ldrb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b2d4:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b2d6:	f002 020f 	and.w	r2, r2, #15
 800b2da:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 800b2de:	f808 2003 	strb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b2e2:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 1;
 800b2e4:	f885 9003 	strb.w	r9, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b2e8:	4419      	add	r1, r3
 800b2ea:	f7ff fe11 	bl	800af10 <move_window>
			if (res != FR_OK) break;
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	d1c7      	bne.n	800b282 <put_fat.part.0+0x22>
			p = fs->win + bc % SS(fs);
 800b2f2:	f3c7 0208 	ubfx	r2, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b2f6:	f3c4 1307 	ubfx	r3, r4, #4, #8
			p = fs->win + bc % SS(fs);
 800b2fa:	4442      	add	r2, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b2fc:	7013      	strb	r3, [r2, #0]
			break;
 800b2fe:	e012      	b.n	800b326 <put_fat.part.0+0xc6>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b300:	6a01      	ldr	r1, [r0, #32]
 800b302:	eb01 11d6 	add.w	r1, r1, r6, lsr #7
 800b306:	f7ff fe03 	bl	800af10 <move_window>
			if (res != FR_OK) break;
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d1b9      	bne.n	800b282 <put_fat.part.0+0x22>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b30e:	00b6      	lsls	r6, r6, #2
 800b310:	f105 0230 	add.w	r2, r5, #48	@ 0x30
 800b314:	f024 4470 	bic.w	r4, r4, #4026531840	@ 0xf0000000
 800b318:	f406 76fe 	and.w	r6, r6, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800b31c:	5993      	ldr	r3, [r2, r6]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b31e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b322:	4323      	orrs	r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800b324:	5193      	str	r3, [r2, r6]
			fs->wflag = 1;
 800b326:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b328:	2000      	movs	r0, #0
			fs->wflag = 1;
 800b32a:	70eb      	strb	r3, [r5, #3]
}
 800b32c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b330:	f808 4003 	strb.w	r4, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b334:	4628      	mov	r0, r5
 800b336:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 1;
 800b338:	f885 9003 	strb.w	r9, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b33c:	4419      	add	r1, r3
 800b33e:	f7ff fde7 	bl	800af10 <move_window>
			if (res != FR_OK) break;
 800b342:	2800      	cmp	r0, #0
 800b344:	d19d      	bne.n	800b282 <put_fat.part.0+0x22>
			p = fs->win + bc % SS(fs);
 800b346:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b34a:	f3c4 2403 	ubfx	r4, r4, #8, #4
 800b34e:	f818 3007 	ldrb.w	r3, [r8, r7]
			p = fs->win + bc % SS(fs);
 800b352:	eb08 0207 	add.w	r2, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b356:	f023 030f 	bic.w	r3, r3, #15
 800b35a:	4323      	orrs	r3, r4
 800b35c:	7013      	strb	r3, [r2, #0]
			break;
 800b35e:	e7e2      	b.n	800b326 <put_fat.part.0+0xc6>

0800b360 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b360:	2901      	cmp	r1, #1
 800b362:	d90e      	bls.n	800b382 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800b364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b366:	6943      	ldr	r3, [r0, #20]
 800b368:	460c      	mov	r4, r1
 800b36a:	4605      	mov	r5, r0
 800b36c:	4299      	cmp	r1, r3
 800b36e:	d206      	bcs.n	800b37e <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 800b370:	7803      	ldrb	r3, [r0, #0]
 800b372:	2b02      	cmp	r3, #2
 800b374:	d021      	beq.n	800b3ba <get_fat.isra.0+0x5a>
 800b376:	2b03      	cmp	r3, #3
 800b378:	d010      	beq.n	800b39c <get_fat.isra.0+0x3c>
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d003      	beq.n	800b386 <get_fat.isra.0+0x26>
		val = 1;	/* Internal error */
 800b37e:	2001      	movs	r0, #1
}
 800b380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800b382:	2001      	movs	r0, #1
}
 800b384:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b386:	6a01      	ldr	r1, [r0, #32]
			bc = (UINT)clst; bc += bc / 2;
 800b388:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b38c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800b390:	f7ff fdbe 	bl	800af10 <move_window>
 800b394:	b1f0      	cbz	r0, 800b3d4 <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b396:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b39c:	6a01      	ldr	r1, [r0, #32]
 800b39e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800b3a2:	f7ff fdb5 	bl	800af10 <move_window>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	d1f5      	bne.n	800b396 <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b3aa:	00a4      	lsls	r4, r4, #2
 800b3ac:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800b3b0:	4425      	add	r5, r4
 800b3b2:	6b28      	ldr	r0, [r5, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b3b4:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
}
 800b3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b3ba:	6a01      	ldr	r1, [r0, #32]
 800b3bc:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800b3c0:	f7ff fda6 	bl	800af10 <move_window>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d1e6      	bne.n	800b396 <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b3c8:	0063      	lsls	r3, r4, #1
 800b3ca:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b3ce:	442b      	add	r3, r5
 800b3d0:	8e18      	ldrh	r0, [r3, #48]	@ 0x30
}
 800b3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800b3d4:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3d8:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 800b3da:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3dc:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800b3de:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3e0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800b3e4:	f893 6030 	ldrb.w	r6, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3e8:	f7ff fd92 	bl	800af10 <move_window>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	d1d2      	bne.n	800b396 <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b3f0:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800b3f4:	442f      	add	r7, r5
 800b3f6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800b3fa:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b3fe:	07e3      	lsls	r3, r4, #31
 800b400:	bf4c      	ite	mi
 800b402:	0900      	lsrmi	r0, r0, #4
 800b404:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 800b408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b40a:	bf00      	nop

0800b40c <create_chain>:
{
 800b40c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b410:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
 800b412:	4689      	mov	r9, r1
	FATFS *fs = obj->fs;
 800b414:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
 800b418:	2900      	cmp	r1, #0
 800b41a:	f040 80a7 	bne.w	800b56c <create_chain+0x160>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b41e:	f8d8 600c 	ldr.w	r6, [r8, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b422:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b426:	b1c6      	cbz	r6, 800b45a <create_chain+0x4e>
 800b428:	429e      	cmp	r6, r3
 800b42a:	d216      	bcs.n	800b45a <create_chain+0x4e>
			ncl++;							/* Next cluster */
 800b42c:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b42e:	42a3      	cmp	r3, r4
 800b430:	f200 80b4 	bhi.w	800b59c <create_chain+0x190>
				if (ncl > scl) return 0;	/* No free cluster */
 800b434:	2e01      	cmp	r6, #1
 800b436:	d013      	beq.n	800b460 <create_chain+0x54>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b438:	683d      	ldr	r5, [r7, #0]
				ncl = 2;
 800b43a:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b43c:	696b      	ldr	r3, [r5, #20]
 800b43e:	42a3      	cmp	r3, r4
 800b440:	d907      	bls.n	800b452 <create_chain+0x46>
		switch (fs->fs_type) {
 800b442:	782b      	ldrb	r3, [r5, #0]
 800b444:	2b02      	cmp	r3, #2
 800b446:	f000 8083 	beq.w	800b550 <create_chain+0x144>
 800b44a:	2b03      	cmp	r3, #3
 800b44c:	d042      	beq.n	800b4d4 <create_chain+0xc8>
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d00a      	beq.n	800b468 <create_chain+0x5c>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b452:	2401      	movs	r4, #1
}
 800b454:	4620      	mov	r0, r4
 800b456:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	f200 809a 	bhi.w	800b594 <create_chain+0x188>
				if (ncl > scl) return 0;	/* No free cluster */
 800b460:	2400      	movs	r4, #0
}
 800b462:	4620      	mov	r0, r4
 800b464:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b468:	6a29      	ldr	r1, [r5, #32]
			bc = (UINT)clst; bc += bc / 2;
 800b46a:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b46e:	4628      	mov	r0, r5
 800b470:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800b474:	f7ff fd4c 	bl	800af10 <move_window>
 800b478:	bb38      	cbnz	r0, 800b4ca <create_chain+0xbe>
			wc = fs->win[bc++ % SS(fs)];
 800b47a:	f3cb 0308 	ubfx	r3, fp, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b47e:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 800b480:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b484:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800b486:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b488:	eb01 215b 	add.w	r1, r1, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800b48c:	f893 a030 	ldrb.w	sl, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b490:	f7ff fd3e 	bl	800af10 <move_window>
 800b494:	b9c8      	cbnz	r0, 800b4ca <create_chain+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b496:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b49a:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800b49c:	44ab      	add	fp, r5
 800b49e:	f89b 3030 	ldrb.w	r3, [fp, #48]	@ 0x30
 800b4a2:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b4a6:	bf4c      	ite	mi
 800b4a8:	091b      	lsrmi	r3, r3, #4
 800b4aa:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 800b4ae:	b313      	cbz	r3, 800b4f6 <create_chain+0xea>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d0ce      	beq.n	800b452 <create_chain+0x46>
			if (ncl == scl) return 0;		/* No free cluster */
 800b4b4:	42a6      	cmp	r6, r4
 800b4b6:	d0d3      	beq.n	800b460 <create_chain+0x54>
			ncl++;							/* Next cluster */
 800b4b8:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b4ba:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b4be:	429c      	cmp	r4, r3
 800b4c0:	d2b8      	bcs.n	800b434 <create_chain+0x28>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b4c2:	683d      	ldr	r5, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b4c4:	e7ba      	b.n	800b43c <create_chain+0x30>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b4c6:	2801      	cmp	r0, #1
 800b4c8:	d1c3      	bne.n	800b452 <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b4ca:	f04f 34ff 	mov.w	r4, #4294967295
}
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b4d4:	6a29      	ldr	r1, [r5, #32]
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800b4dc:	f7ff fd18 	bl	800af10 <move_window>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d1f2      	bne.n	800b4ca <create_chain+0xbe>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b4e4:	00a3      	lsls	r3, r4, #2
 800b4e6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800b4ea:	442b      	add	r3, r5
 800b4ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b4ee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1dc      	bne.n	800b4b0 <create_chain+0xa4>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b4f6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b4fa:	42a3      	cmp	r3, r4
 800b4fc:	d9a9      	bls.n	800b452 <create_chain+0x46>
 800b4fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b502:	4621      	mov	r1, r4
 800b504:	4640      	mov	r0, r8
 800b506:	f7ff feab 	bl	800b260 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800b50a:	b970      	cbnz	r0, 800b52a <create_chain+0x11e>
 800b50c:	f1b9 0f00 	cmp.w	r9, #0
 800b510:	d00b      	beq.n	800b52a <create_chain+0x11e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b512:	f1b9 0f01 	cmp.w	r9, #1
 800b516:	d09c      	beq.n	800b452 <create_chain+0x46>
 800b518:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b51c:	4599      	cmp	r9, r3
 800b51e:	d298      	bcs.n	800b452 <create_chain+0x46>
 800b520:	4622      	mov	r2, r4
 800b522:	4649      	mov	r1, r9
 800b524:	4640      	mov	r0, r8
 800b526:	f7ff fe9b 	bl	800b260 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b52a:	2800      	cmp	r0, #0
 800b52c:	d1cb      	bne.n	800b4c6 <create_chain+0xba>
		fs->last_clst = ncl;
 800b52e:	f8c8 400c 	str.w	r4, [r8, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b532:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
 800b536:	3b02      	subs	r3, #2
 800b538:	429a      	cmp	r2, r3
 800b53a:	d802      	bhi.n	800b542 <create_chain+0x136>
 800b53c:	3a01      	subs	r2, #1
 800b53e:	f8c8 2010 	str.w	r2, [r8, #16]
		fs->fsi_flag |= 1;
 800b542:	f898 3004 	ldrb.w	r3, [r8, #4]
 800b546:	f043 0301 	orr.w	r3, r3, #1
 800b54a:	f888 3004 	strb.w	r3, [r8, #4]
 800b54e:	e781      	b.n	800b454 <create_chain+0x48>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b550:	6a29      	ldr	r1, [r5, #32]
 800b552:	4628      	mov	r0, r5
 800b554:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800b558:	f7ff fcda 	bl	800af10 <move_window>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d1b4      	bne.n	800b4ca <create_chain+0xbe>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b560:	0063      	lsls	r3, r4, #1
 800b562:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b566:	442b      	add	r3, r5
 800b568:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
			break;
 800b56a:	e7a0      	b.n	800b4ae <create_chain+0xa2>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b56c:	4640      	mov	r0, r8
 800b56e:	f7ff fef7 	bl	800b360 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b572:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b574:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b576:	f67f af6c 	bls.w	800b452 <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b57a:	1c41      	adds	r1, r0, #1
 800b57c:	d0a5      	beq.n	800b4ca <create_chain+0xbe>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b57e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b582:	4283      	cmp	r3, r0
 800b584:	f63f af66 	bhi.w	800b454 <create_chain+0x48>
			ncl++;							/* Next cluster */
 800b588:	f109 0401 	add.w	r4, r9, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b58c:	42a3      	cmp	r3, r4
 800b58e:	d807      	bhi.n	800b5a0 <create_chain+0x194>
 800b590:	464e      	mov	r6, r9
 800b592:	e74f      	b.n	800b434 <create_chain+0x28>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b594:	683d      	ldr	r5, [r7, #0]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b596:	2601      	movs	r6, #1
			ncl++;							/* Next cluster */
 800b598:	2402      	movs	r4, #2
 800b59a:	e74f      	b.n	800b43c <create_chain+0x30>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b59c:	4645      	mov	r5, r8
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b59e:	e74d      	b.n	800b43c <create_chain+0x30>
 800b5a0:	2c01      	cmp	r4, #1
 800b5a2:	683d      	ldr	r5, [r7, #0]
 800b5a4:	f67f af55 	bls.w	800b452 <create_chain+0x46>
 800b5a8:	464e      	mov	r6, r9
 800b5aa:	e747      	b.n	800b43c <create_chain+0x30>

0800b5ac <dir_sdi.constprop.0>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800b5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	dp->dptr = ofs;				/* Set current offset */
 800b5b0:	2300      	movs	r3, #0
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b5b2:	6884      	ldr	r4, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800b5b4:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
 800b5b6:	6807      	ldr	r7, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 800b5b8:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b5ba:	b98c      	cbnz	r4, 800b5e0 <dir_sdi.constprop.0+0x34>
 800b5bc:	783b      	ldrb	r3, [r7, #0]
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d80a      	bhi.n	800b5d8 <dir_sdi.constprop.0+0x2c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b5c2:	893b      	ldrh	r3, [r7, #8]
 800b5c4:	b18b      	cbz	r3, 800b5ea <dir_sdi.constprop.0+0x3e>
		dp->sect = fs->dirbase;
 800b5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	dp->clust = clst;					/* Current cluster# */
 800b5c8:	e9c6 4306 	strd	r4, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b5cc:	b16b      	cbz	r3, 800b5ea <dir_sdi.constprop.0+0x3e>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b5ce:	3730      	adds	r7, #48	@ 0x30
	return FR_OK;
 800b5d0:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b5d2:	6237      	str	r7, [r6, #32]
}
 800b5d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		clst = fs->dirbase;
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d0f1      	beq.n	800b5c2 <dir_sdi.constprop.0+0x16>
 800b5de:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b5e0:	897b      	ldrh	r3, [r7, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d15c      	bne.n	800b6a0 <dir_sdi.constprop.0+0xf4>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b5e6:	2c01      	cmp	r4, #1
 800b5e8:	d102      	bne.n	800b5f0 <dir_sdi.constprop.0+0x44>
		return FR_INT_ERR;
 800b5ea:	2002      	movs	r0, #2
}
 800b5ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5f0:	463d      	mov	r5, r7
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b5f2:	696b      	ldr	r3, [r5, #20]
 800b5f4:	42a3      	cmp	r3, r4
 800b5f6:	d9f8      	bls.n	800b5ea <dir_sdi.constprop.0+0x3e>
		switch (fs->fs_type) {
 800b5f8:	782b      	ldrb	r3, [r5, #0]
 800b5fa:	2b02      	cmp	r3, #2
 800b5fc:	d025      	beq.n	800b64a <dir_sdi.constprop.0+0x9e>
 800b5fe:	2b03      	cmp	r3, #3
 800b600:	d00d      	beq.n	800b61e <dir_sdi.constprop.0+0x72>
 800b602:	2b01      	cmp	r3, #1
 800b604:	d1f1      	bne.n	800b5ea <dir_sdi.constprop.0+0x3e>
			bc = (UINT)clst; bc += bc / 2;
 800b606:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b60a:	6a29      	ldr	r1, [r5, #32]
 800b60c:	4628      	mov	r0, r5
 800b60e:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800b612:	f7ff fc7d 	bl	800af10 <move_window>
 800b616:	b330      	cbz	r0, 800b666 <dir_sdi.constprop.0+0xba>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b618:	2001      	movs	r0, #1
}
 800b61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b61e:	6a29      	ldr	r1, [r5, #32]
 800b620:	4628      	mov	r0, r5
 800b622:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800b626:	f7ff fc73 	bl	800af10 <move_window>
 800b62a:	2800      	cmp	r0, #0
 800b62c:	d1f4      	bne.n	800b618 <dir_sdi.constprop.0+0x6c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b62e:	00a3      	lsls	r3, r4, #2
 800b630:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800b634:	442b      	add	r3, r5
 800b636:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b638:	f024 4470 	bic.w	r4, r4, #4026531840	@ 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b63c:	2c01      	cmp	r4, #1
 800b63e:	d9d4      	bls.n	800b5ea <dir_sdi.constprop.0+0x3e>
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	429c      	cmp	r4, r3
 800b644:	d2d1      	bcs.n	800b5ea <dir_sdi.constprop.0+0x3e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b646:	6835      	ldr	r5, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b648:	e7d3      	b.n	800b5f2 <dir_sdi.constprop.0+0x46>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b64a:	6a29      	ldr	r1, [r5, #32]
 800b64c:	4628      	mov	r0, r5
 800b64e:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800b652:	f7ff fc5d 	bl	800af10 <move_window>
 800b656:	2800      	cmp	r0, #0
 800b658:	d1de      	bne.n	800b618 <dir_sdi.constprop.0+0x6c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b65a:	0063      	lsls	r3, r4, #1
 800b65c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b660:	442b      	add	r3, r5
 800b662:	8e1c      	ldrh	r4, [r3, #48]	@ 0x30
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b664:	e7ea      	b.n	800b63c <dir_sdi.constprop.0+0x90>
			wc = fs->win[bc++ % SS(fs)];
 800b666:	f3c8 0308 	ubfx	r3, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b66a:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 800b66c:	f108 0801 	add.w	r8, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b670:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800b672:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b674:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800b678:	f893 9030 	ldrb.w	r9, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b67c:	f7ff fc48 	bl	800af10 <move_window>
 800b680:	2800      	cmp	r0, #0
 800b682:	d1c9      	bne.n	800b618 <dir_sdi.constprop.0+0x6c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b684:	f3c8 0808 	ubfx	r8, r8, #0, #9
 800b688:	44a8      	add	r8, r5
 800b68a:	f898 3030 	ldrb.w	r3, [r8, #48]	@ 0x30
 800b68e:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b692:	07e3      	lsls	r3, r4, #31
 800b694:	bf4c      	ite	mi
 800b696:	ea4f 1419 	movmi.w	r4, r9, lsr #4
 800b69a:	f3c9 040b 	ubfxpl	r4, r9, #0, #12
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b69e:	e7cd      	b.n	800b63c <dir_sdi.constprop.0+0x90>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b6a0:	697a      	ldr	r2, [r7, #20]
	clst -= 2;
 800b6a2:	1ea1      	subs	r1, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b6a4:	3a02      	subs	r2, #2
 800b6a6:	4291      	cmp	r1, r2
 800b6a8:	d203      	bcs.n	800b6b2 <dir_sdi.constprop.0+0x106>
	return clst * fs->csize + fs->database;
 800b6aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6ac:	fb01 2303 	mla	r3, r1, r3, r2
 800b6b0:	e78a      	b.n	800b5c8 <dir_sdi.constprop.0+0x1c>
		dp->sect = fs->dirbase;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	e9c6 4306 	strd	r4, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b6b8:	e797      	b.n	800b5ea <dir_sdi.constprop.0+0x3e>
 800b6ba:	bf00      	nop

0800b6bc <follow_path>:
{
 800b6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b6c0:	780a      	ldrb	r2, [r1, #0]
{
 800b6c2:	b085      	sub	sp, #20
 800b6c4:	468b      	mov	fp, r1
 800b6c6:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b6c8:	2a2f      	cmp	r2, #47	@ 0x2f
	FATFS *fs = obj->fs;
 800b6ca:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b6cc:	d001      	beq.n	800b6d2 <follow_path+0x16>
 800b6ce:	2a5c      	cmp	r2, #92	@ 0x5c
 800b6d0:	d105      	bne.n	800b6de <follow_path+0x22>
 800b6d2:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 800b6d6:	2b2f      	cmp	r3, #47	@ 0x2f
 800b6d8:	d0fb      	beq.n	800b6d2 <follow_path+0x16>
 800b6da:	2b5c      	cmp	r3, #92	@ 0x5c
 800b6dc:	d0f9      	beq.n	800b6d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b6de:	2200      	movs	r2, #0
 800b6e0:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b6e2:	f89b 2000 	ldrb.w	r2, [fp]
 800b6e6:	2a1f      	cmp	r2, #31
 800b6e8:	f240 816b 	bls.w	800b9c2 <follow_path+0x306>
 800b6ec:	465b      	mov	r3, fp
	p = *path; sfn = dp->fn;
 800b6ee:	f104 0724 	add.w	r7, r4, #36	@ 0x24
 800b6f2:	46ab      	mov	fp, r5
		*d++ = (BYTE)val;
 800b6f4:	f04f 3a20 	mov.w	sl, #538976288	@ 0x20202020
 800b6f8:	463e      	mov	r6, r7
 800b6fa:	461d      	mov	r5, r3
 800b6fc:	2320      	movs	r3, #32
 800b6fe:	f242 0220 	movw	r2, #8224	@ 0x2020
 800b702:	f8c4 a024 	str.w	sl, [r4, #36]	@ 0x24
 800b706:	f8c4 a028 	str.w	sl, [r4, #40]	@ 0x28
 800b70a:	85a2      	strh	r2, [r4, #44]	@ 0x2c
 800b70c:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
		c = (BYTE)p[si++];
 800b710:	782b      	ldrb	r3, [r5, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b712:	2b20      	cmp	r3, #32
 800b714:	d95f      	bls.n	800b7d6 <follow_path+0x11a>
 800b716:	46ae      	mov	lr, r5
	si = i = 0; ni = 8;
 800b718:	2700      	movs	r7, #0
 800b71a:	f04f 0c08 	mov.w	ip, #8
		c = (BYTE)p[si++];
 800b71e:	2001      	movs	r0, #1
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b720:	2b2f      	cmp	r3, #47	@ 0x2f
 800b722:	d066      	beq.n	800b7f2 <follow_path+0x136>
 800b724:	2b5c      	cmp	r3, #92	@ 0x5c
 800b726:	d064      	beq.n	800b7f2 <follow_path+0x136>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b728:	2b2e      	cmp	r3, #46	@ 0x2e
 800b72a:	d001      	beq.n	800b730 <follow_path+0x74>
 800b72c:	4567      	cmp	r7, ip
 800b72e:	d345      	bcc.n	800b7bc <follow_path+0x100>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b730:	f1bc 0f0b 	cmp.w	ip, #11
 800b734:	d04f      	beq.n	800b7d6 <follow_path+0x11a>
 800b736:	2b2e      	cmp	r3, #46	@ 0x2e
 800b738:	d14d      	bne.n	800b7d6 <follow_path+0x11a>
			i = 8; ni = 11;				/* Goto extension */
 800b73a:	2708      	movs	r7, #8
 800b73c:	f04f 0c0b 	mov.w	ip, #11
		c = (BYTE)p[si++];
 800b740:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 800b744:	3001      	adds	r0, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b746:	2b20      	cmp	r3, #32
 800b748:	d8ea      	bhi.n	800b720 <follow_path+0x64>
	*path = p + si;						/* Return pointer to the next segment */
 800b74a:	4405      	add	r5, r0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b74c:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 800b750:	2ae5      	cmp	r2, #229	@ 0xe5
 800b752:	d102      	bne.n	800b75a <follow_path+0x9e>
 800b754:	2205      	movs	r2, #5
 800b756:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b75a:	2b20      	cmp	r3, #32
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b75c:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800b75e:	f8d4 8000 	ldr.w	r8, [r4]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b762:	bf8c      	ite	hi
 800b764:	2300      	movhi	r3, #0
 800b766:	2301      	movls	r3, #1
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b76e:	f7ff ff1d 	bl	800b5ac <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 800b772:	4602      	mov	r2, r0
 800b774:	2800      	cmp	r0, #0
 800b776:	f040 80cc 	bne.w	800b912 <follow_path+0x256>
		res = move_window(fs, dp->sect);
 800b77a:	69e7      	ldr	r7, [r4, #28]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b77c:	f108 0930 	add.w	r9, r8, #48	@ 0x30
 800b780:	e9cd b600 	strd	fp, r6, [sp]
 800b784:	46ab      	mov	fp, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b786:	f8d8 602c 	ldr.w	r6, [r8, #44]	@ 0x2c
 800b78a:	42b7      	cmp	r7, r6
 800b78c:	d046      	beq.n	800b81c <follow_path+0x160>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b78e:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b792:	f898 0001 	ldrb.w	r0, [r8, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b796:	2b00      	cmp	r3, #0
 800b798:	f040 80c1 	bne.w	800b91e <follow_path+0x262>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b79c:	2301      	movs	r3, #1
 800b79e:	463a      	mov	r2, r7
 800b7a0:	4649      	mov	r1, r9
 800b7a2:	f7ff fa99 	bl	800acd8 <disk_read>
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d036      	beq.n	800b818 <follow_path+0x15c>
				res = FR_DISK_ERR;
 800b7aa:	2201      	movs	r2, #1
			fs->winsect = sector;
 800b7ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b7b0:	4610      	mov	r0, r2
			fs->winsect = sector;
 800b7b2:	f8c8 302c 	str.w	r3, [r8, #44]	@ 0x2c
}
 800b7b6:	b005      	add	sp, #20
 800b7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c >= 0x80) {				/* Extended character? */
 800b7bc:	061a      	lsls	r2, r3, #24
 800b7be:	d502      	bpl.n	800b7c6 <follow_path+0x10a>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b7c0:	3b80      	subs	r3, #128	@ 0x80
 800b7c2:	4a89      	ldr	r2, [pc, #548]	@ (800b9e8 <follow_path+0x32c>)
 800b7c4:	5cd3      	ldrb	r3, [r2, r3]
	while (*str && *str != chr) str++;
 800b7c6:	2222      	movs	r2, #34	@ 0x22
 800b7c8:	4988      	ldr	r1, [pc, #544]	@ (800b9ec <follow_path+0x330>)
 800b7ca:	e002      	b.n	800b7d2 <follow_path+0x116>
 800b7cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b7d0:	b132      	cbz	r2, 800b7e0 <follow_path+0x124>
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d1fa      	bne.n	800b7cc <follow_path+0x110>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b7d6:	2206      	movs	r2, #6
}
 800b7d8:	4610      	mov	r0, r2
 800b7da:	b005      	add	sp, #20
 800b7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b7e0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b7e4:	2a19      	cmp	r2, #25
 800b7e6:	d801      	bhi.n	800b7ec <follow_path+0x130>
 800b7e8:	3b20      	subs	r3, #32
 800b7ea:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 800b7ec:	55f3      	strb	r3, [r6, r7]
 800b7ee:	3701      	adds	r7, #1
 800b7f0:	e7a6      	b.n	800b740 <follow_path+0x84>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b7f2:	5c2a      	ldrb	r2, [r5, r0]
 800b7f4:	1829      	adds	r1, r5, r0
 800b7f6:	2a2f      	cmp	r2, #47	@ 0x2f
 800b7f8:	d002      	beq.n	800b800 <follow_path+0x144>
 800b7fa:	2a5c      	cmp	r2, #92	@ 0x5c
 800b7fc:	f040 80ec 	bne.w	800b9d8 <follow_path+0x31c>
 800b800:	1c42      	adds	r2, r0, #1
 800b802:	442a      	add	r2, r5
 800b804:	4615      	mov	r5, r2
 800b806:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b80a:	292f      	cmp	r1, #47	@ 0x2f
 800b80c:	d0fa      	beq.n	800b804 <follow_path+0x148>
 800b80e:	295c      	cmp	r1, #92	@ 0x5c
 800b810:	d0f8      	beq.n	800b804 <follow_path+0x148>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b812:	2f00      	cmp	r7, #0
 800b814:	d19a      	bne.n	800b74c <follow_path+0x90>
 800b816:	e7de      	b.n	800b7d6 <follow_path+0x11a>
			fs->winsect = sector;
 800b818:	f8c8 702c 	str.w	r7, [r8, #44]	@ 0x2c
		c = dp->dir[DIR_Name];
 800b81c:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b81e:	781a      	ldrb	r2, [r3, #0]
 800b820:	2a00      	cmp	r2, #0
 800b822:	d075      	beq.n	800b910 <follow_path+0x254>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b824:	7ad9      	ldrb	r1, [r3, #11]
 800b826:	f001 023f 	and.w	r2, r1, #63	@ 0x3f
 800b82a:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b82c:	7ada      	ldrb	r2, [r3, #11]
 800b82e:	f012 0208 	ands.w	r2, r2, #8
 800b832:	d01b      	beq.n	800b86c <follow_path+0x1b0>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b834:	6966      	ldr	r6, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b836:	69e7      	ldr	r7, [r4, #28]
	FATFS *fs = dp->obj.fs;
 800b838:	6825      	ldr	r5, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b83a:	3620      	adds	r6, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b83c:	2f00      	cmp	r7, #0
 800b83e:	d067      	beq.n	800b910 <follow_path+0x254>
 800b840:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
 800b844:	d264      	bcs.n	800b910 <follow_path+0x254>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b846:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800b84a:	b953      	cbnz	r3, 800b862 <follow_path+0x1a6>
		dp->sect++;				/* Next sector */
 800b84c:	3701      	adds	r7, #1
		if (!dp->clust) {		/* Static table */
 800b84e:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800b850:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800b852:	2900      	cmp	r1, #0
 800b854:	f040 8087 	bne.w	800b966 <follow_path+0x2aa>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b858:	892a      	ldrh	r2, [r5, #8]
 800b85a:	ebb2 1f56 	cmp.w	r2, r6, lsr #5
 800b85e:	f240 809f 	bls.w	800b9a0 <follow_path+0x2e4>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b862:	3530      	adds	r5, #48	@ 0x30
	dp->dptr = ofs;						/* Current entry */
 800b864:	6166      	str	r6, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b866:	441d      	add	r5, r3
 800b868:	6225      	str	r5, [r4, #32]
	} while (res == FR_OK);
 800b86a:	e78c      	b.n	800b786 <follow_path+0xca>
	} while (--cnt && r == 0);
 800b86c:	f894 5024 	ldrb.w	r5, [r4, #36]	@ 0x24
 800b870:	7818      	ldrb	r0, [r3, #0]
 800b872:	4285      	cmp	r5, r0
 800b874:	d1de      	bne.n	800b834 <follow_path+0x178>
 800b876:	785d      	ldrb	r5, [r3, #1]
 800b878:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 800b87c:	4285      	cmp	r5, r0
 800b87e:	d1d9      	bne.n	800b834 <follow_path+0x178>
 800b880:	f894 5026 	ldrb.w	r5, [r4, #38]	@ 0x26
 800b884:	7898      	ldrb	r0, [r3, #2]
 800b886:	4285      	cmp	r5, r0
 800b888:	d1d4      	bne.n	800b834 <follow_path+0x178>
 800b88a:	f894 5027 	ldrb.w	r5, [r4, #39]	@ 0x27
 800b88e:	78d8      	ldrb	r0, [r3, #3]
 800b890:	4285      	cmp	r5, r0
 800b892:	d1cf      	bne.n	800b834 <follow_path+0x178>
 800b894:	791d      	ldrb	r5, [r3, #4]
 800b896:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 800b89a:	4285      	cmp	r5, r0
 800b89c:	d1ca      	bne.n	800b834 <follow_path+0x178>
 800b89e:	795d      	ldrb	r5, [r3, #5]
 800b8a0:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 800b8a4:	4285      	cmp	r5, r0
 800b8a6:	d1c5      	bne.n	800b834 <follow_path+0x178>
 800b8a8:	799d      	ldrb	r5, [r3, #6]
 800b8aa:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
 800b8ae:	4285      	cmp	r5, r0
 800b8b0:	d1c0      	bne.n	800b834 <follow_path+0x178>
 800b8b2:	79dd      	ldrb	r5, [r3, #7]
 800b8b4:	f894 002b 	ldrb.w	r0, [r4, #43]	@ 0x2b
 800b8b8:	4285      	cmp	r5, r0
 800b8ba:	d1bb      	bne.n	800b834 <follow_path+0x178>
 800b8bc:	7a1d      	ldrb	r5, [r3, #8]
 800b8be:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800b8c2:	4285      	cmp	r5, r0
 800b8c4:	d1b6      	bne.n	800b834 <follow_path+0x178>
 800b8c6:	7a5d      	ldrb	r5, [r3, #9]
 800b8c8:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800b8cc:	4285      	cmp	r5, r0
 800b8ce:	d1b1      	bne.n	800b834 <follow_path+0x178>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b8d0:	7a98      	ldrb	r0, [r3, #10]
 800b8d2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800b8d6:	4298      	cmp	r0, r3
 800b8d8:	d1ac      	bne.n	800b834 <follow_path+0x178>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b8da:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800b8de:	465d      	mov	r5, fp
 800b8e0:	9e01      	ldr	r6, [sp, #4]
 800b8e2:	0758      	lsls	r0, r3, #29
 800b8e4:	f8dd b000 	ldr.w	fp, [sp]
 800b8e8:	f53f af76 	bmi.w	800b7d8 <follow_path+0x11c>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b8ec:	06cb      	lsls	r3, r1, #27
 800b8ee:	d553      	bpl.n	800b998 <follow_path+0x2dc>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b8f0:	6962      	ldr	r2, [r4, #20]
 800b8f2:	f10b 0330 	add.w	r3, fp, #48	@ 0x30
	if (fs->fs_type == FS_FAT32) {
 800b8f6:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b8fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 800b8fe:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b900:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 800b902:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800b904:	d102      	bne.n	800b90c <follow_path+0x250>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b906:	8a9b      	ldrh	r3, [r3, #20]
 800b908:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b90c:	60a2      	str	r2, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b90e:	e6f5      	b.n	800b6fc <follow_path+0x40>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b910:	2204      	movs	r2, #4
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b912:	2a04      	cmp	r2, #4
			ns = dp->fn[NSFLAG];
 800b914:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b918:	f47f af5e 	bne.w	800b7d8 <follow_path+0x11c>
 800b91c:	e03a      	b.n	800b994 <follow_path+0x2d8>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b91e:	2301      	movs	r3, #1
 800b920:	4632      	mov	r2, r6
 800b922:	4649      	mov	r1, r9
 800b924:	f7ff f9e6 	bl	800acf4 <disk_write>
 800b928:	bbc0      	cbnz	r0, 800b99c <follow_path+0x2e0>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b92a:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800b92e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800b932:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 800b934:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b938:	429a      	cmp	r2, r3
 800b93a:	d211      	bcs.n	800b960 <follow_path+0x2a4>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b93c:	f898 5002 	ldrb.w	r5, [r8, #2]
 800b940:	2d01      	cmp	r5, #1
 800b942:	d802      	bhi.n	800b94a <follow_path+0x28e>
 800b944:	e00c      	b.n	800b960 <follow_path+0x2a4>
					wsect += fs->fsize;
 800b946:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800b94a:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b94c:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800b94e:	2301      	movs	r3, #1
 800b950:	4649      	mov	r1, r9
 800b952:	4632      	mov	r2, r6
 800b954:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b958:	f7ff f9cc 	bl	800acf4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b95c:	2d01      	cmp	r5, #1
 800b95e:	d1f2      	bne.n	800b946 <follow_path+0x28a>
 800b960:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b964:	e71a      	b.n	800b79c <follow_path+0xe0>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b966:	896a      	ldrh	r2, [r5, #10]
 800b968:	3a01      	subs	r2, #1
 800b96a:	ea12 2256 	ands.w	r2, r2, r6, lsr #9
 800b96e:	f47f af78 	bne.w	800b862 <follow_path+0x1a6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b972:	4628      	mov	r0, r5
 800b974:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800b978:	f7ff fcf2 	bl	800b360 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b97c:	2801      	cmp	r0, #1
 800b97e:	d91e      	bls.n	800b9be <follow_path+0x302>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b980:	1c47      	adds	r7, r0, #1
 800b982:	d00b      	beq.n	800b99c <follow_path+0x2e0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b984:	6969      	ldr	r1, [r5, #20]
 800b986:	9b02      	ldr	r3, [sp, #8]
 800b988:	4288      	cmp	r0, r1
 800b98a:	d30d      	bcc.n	800b9a8 <follow_path+0x2ec>
			ns = dp->fn[NSFLAG];
 800b98c:	9a03      	ldr	r2, [sp, #12]
 800b98e:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
						dp->sect = 0; return FR_NO_FILE;
 800b992:	61e2      	str	r2, [r4, #28]
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b994:	075a      	lsls	r2, r3, #29
 800b996:	d424      	bmi.n	800b9e2 <follow_path+0x326>
 800b998:	2205      	movs	r2, #5
 800b99a:	e71d      	b.n	800b7d8 <follow_path+0x11c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b99c:	2201      	movs	r2, #1
 800b99e:	e7b8      	b.n	800b912 <follow_path+0x256>
			ns = dp->fn[NSFLAG];
 800b9a0:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
				dp->sect = 0; return FR_NO_FILE;
 800b9a4:	61e1      	str	r1, [r4, #28]
			if (res != FR_OK) {				/* Failed to find the object */
 800b9a6:	e7f5      	b.n	800b994 <follow_path+0x2d8>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b9a8:	3902      	subs	r1, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800b9aa:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800b9ac:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b9ae:	4288      	cmp	r0, r1
 800b9b0:	d210      	bcs.n	800b9d4 <follow_path+0x318>
	return clst * fs->csize + fs->database;
 800b9b2:	896a      	ldrh	r2, [r5, #10]
 800b9b4:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 800b9b6:	fb00 7702 	mla	r7, r0, r2, r7
				dp->sect = clust2sect(fs, clst);
 800b9ba:	61e7      	str	r7, [r4, #28]
 800b9bc:	e751      	b.n	800b862 <follow_path+0x1a6>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b9be:	2202      	movs	r2, #2
 800b9c0:	e7a7      	b.n	800b912 <follow_path+0x256>
		dp->fn[NSFLAG] = NS_NONAME;
 800b9c2:	2380      	movs	r3, #128	@ 0x80
		res = dir_sdi(dp, 0);
 800b9c4:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 800b9c6:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
}
 800b9ca:	b005      	add	sp, #20
 800b9cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800b9d0:	f7ff bdec 	b.w	800b5ac <dir_sdi.constprop.0>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b9d4:	461f      	mov	r7, r3
 800b9d6:	e7f0      	b.n	800b9ba <follow_path+0x2fe>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b9d8:	460d      	mov	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b9da:	2f00      	cmp	r7, #0
 800b9dc:	f47f aeb6 	bne.w	800b74c <follow_path+0x90>
 800b9e0:	e6f9      	b.n	800b7d6 <follow_path+0x11a>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b9e2:	2204      	movs	r2, #4
	return res;
 800b9e4:	e6f8      	b.n	800b7d8 <follow_path+0x11c>
 800b9e6:	bf00      	nop
 800b9e8:	0800d5ec 	.word	0x0800d5ec
 800b9ec:	0800d5dc 	.word	0x0800d5dc

0800b9f0 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b9f0:	2901      	cmp	r1, #1
{
 800b9f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f6:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800b9f8:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b9fa:	d909      	bls.n	800ba10 <remove_chain+0x20>
 800b9fc:	6973      	ldr	r3, [r6, #20]
 800b9fe:	428b      	cmp	r3, r1
 800ba00:	d906      	bls.n	800ba10 <remove_chain+0x20>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ba02:	4605      	mov	r5, r0
 800ba04:	4611      	mov	r1, r2
 800ba06:	b932      	cbnz	r2, 800ba16 <remove_chain+0x26>
 800ba08:	46b1      	mov	r9, r6
			fs->wflag = 1;
 800ba0a:	2701      	movs	r7, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ba0c:	429c      	cmp	r4, r3
 800ba0e:	d312      	bcc.n	800ba36 <remove_chain+0x46>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ba10:	2002      	movs	r0, #2
}
 800ba12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d9fa      	bls.n	800ba10 <remove_chain+0x20>
 800ba1a:	2a01      	cmp	r2, #1
 800ba1c:	d0f8      	beq.n	800ba10 <remove_chain+0x20>
 800ba1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba22:	4630      	mov	r0, r6
 800ba24:	f7ff fc1c 	bl	800b260 <put_fat.part.0>
		if (res != FR_OK) return res;
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	d1f2      	bne.n	800ba12 <remove_chain+0x22>
 800ba2c:	f8d5 9000 	ldr.w	r9, [r5]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ba30:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ba34:	e7e9      	b.n	800ba0a <remove_chain+0x1a>
		switch (fs->fs_type) {
 800ba36:	f899 3000 	ldrb.w	r3, [r9]
 800ba3a:	2b02      	cmp	r3, #2
 800ba3c:	f000 8098 	beq.w	800bb70 <remove_chain+0x180>
 800ba40:	2b03      	cmp	r3, #3
 800ba42:	d010      	beq.n	800ba66 <remove_chain+0x76>
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d1e3      	bne.n	800ba10 <remove_chain+0x20>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba48:	f8d9 1020 	ldr.w	r1, [r9, #32]
			bc = (UINT)clst; bc += bc / 2;
 800ba4c:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba50:	4648      	mov	r0, r9
 800ba52:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800ba56:	f7ff fa5b 	bl	800af10 <move_window>
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	f000 80b3 	beq.w	800bbc6 <remove_chain+0x1d6>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ba60:	2001      	movs	r0, #1
}
 800ba62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ba66:	f8d9 1020 	ldr.w	r1, [r9, #32]
 800ba6a:	4648      	mov	r0, r9
 800ba6c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800ba70:	f7ff fa4e 	bl	800af10 <move_window>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d1f3      	bne.n	800ba60 <remove_chain+0x70>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ba78:	00a3      	lsls	r3, r4, #2
 800ba7a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800ba7e:	444b      	add	r3, r9
 800ba80:	f8d3 8030 	ldr.w	r8, [r3, #48]	@ 0x30
		if (nxt == 0) break;				/* Empty cluster? */
 800ba84:	f038 4870 	bics.w	r8, r8, #4026531840	@ 0xf0000000
 800ba88:	f000 80bb 	beq.w	800bc02 <remove_chain+0x212>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ba8c:	f1b8 0f01 	cmp.w	r8, #1
 800ba90:	d0be      	beq.n	800ba10 <remove_chain+0x20>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ba92:	6973      	ldr	r3, [r6, #20]
 800ba94:	429c      	cmp	r4, r3
 800ba96:	d2bb      	bcs.n	800ba10 <remove_chain+0x20>
		switch (fs->fs_type) {
 800ba98:	f896 9000 	ldrb.w	r9, [r6]
 800ba9c:	f1b9 0f02 	cmp.w	r9, #2
 800baa0:	d02e      	beq.n	800bb00 <remove_chain+0x110>
 800baa2:	f1b9 0f03 	cmp.w	r9, #3
 800baa6:	d04c      	beq.n	800bb42 <remove_chain+0x152>
 800baa8:	f1b9 0f01 	cmp.w	r9, #1
 800baac:	d1b0      	bne.n	800ba10 <remove_chain+0x20>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800baae:	6a31      	ldr	r1, [r6, #32]
			bc = (UINT)clst; bc += bc / 2;
 800bab0:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bab4:	4630      	mov	r0, r6
 800bab6:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800baba:	f7ff fa29 	bl	800af10 <move_window>
			if (res != FR_OK) break;
 800babe:	2800      	cmp	r0, #0
 800bac0:	d1a7      	bne.n	800ba12 <remove_chain+0x22>
			p = fs->win + bc++ % SS(fs);
 800bac2:	f10a 0b01 	add.w	fp, sl, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bac6:	07e1      	lsls	r1, r4, #31
			p = fs->win + bc++ % SS(fs);
 800bac8:	f3ca 0308 	ubfx	r3, sl, #0, #9
 800bacc:	f106 0a30 	add.w	sl, r6, #48	@ 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bad0:	ea4f 225b 	mov.w	r2, fp, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bad4:	d561      	bpl.n	800bb9a <remove_chain+0x1aa>
 800bad6:	f81a 1003 	ldrb.w	r1, [sl, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bada:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800badc:	f001 010f 	and.w	r1, r1, #15
 800bae0:	f80a 1003 	strb.w	r1, [sl, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bae4:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 800bae6:	f886 9003 	strb.w	r9, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800baea:	4411      	add	r1, r2
 800baec:	f7ff fa10 	bl	800af10 <move_window>
			if (res != FR_OK) break;
 800baf0:	2800      	cmp	r0, #0
 800baf2:	d18e      	bne.n	800ba12 <remove_chain+0x22>
			p = fs->win + bc % SS(fs);
 800baf4:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 800baf8:	eb0a 030b 	add.w	r3, sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bafc:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800bafe:	e00c      	b.n	800bb1a <remove_chain+0x12a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bb00:	6a31      	ldr	r1, [r6, #32]
 800bb02:	4630      	mov	r0, r6
 800bb04:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800bb08:	f7ff fa02 	bl	800af10 <move_window>
			if (res != FR_OK) break;
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	d180      	bne.n	800ba12 <remove_chain+0x22>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bb10:	0064      	lsls	r4, r4, #1
 800bb12:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800bb16:	4434      	add	r4, r6
 800bb18:	8620      	strh	r0, [r4, #48]	@ 0x30
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bb1a:	6972      	ldr	r2, [r6, #20]
 800bb1c:	6933      	ldr	r3, [r6, #16]
 800bb1e:	1e91      	subs	r1, r2, #2
			fs->wflag = 1;
 800bb20:	70f7      	strb	r7, [r6, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bb22:	428b      	cmp	r3, r1
 800bb24:	d205      	bcs.n	800bb32 <remove_chain+0x142>
			fs->free_clst++;
 800bb26:	3301      	adds	r3, #1
 800bb28:	6133      	str	r3, [r6, #16]
			fs->fsi_flag |= 1;
 800bb2a:	7933      	ldrb	r3, [r6, #4]
 800bb2c:	f043 0301 	orr.w	r3, r3, #1
 800bb30:	7133      	strb	r3, [r6, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bb32:	4542      	cmp	r2, r8
 800bb34:	d965      	bls.n	800bc02 <remove_chain+0x212>
 800bb36:	f8d5 9000 	ldr.w	r9, [r5]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bb3a:	4644      	mov	r4, r8
 800bb3c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800bb40:	e764      	b.n	800ba0c <remove_chain+0x1c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bb42:	6a31      	ldr	r1, [r6, #32]
 800bb44:	4630      	mov	r0, r6
 800bb46:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800bb4a:	f7ff f9e1 	bl	800af10 <move_window>
			if (res != FR_OK) break;
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	f47f af5f 	bne.w	800ba12 <remove_chain+0x22>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bb54:	00a4      	lsls	r4, r4, #2
 800bb56:	f106 0230 	add.w	r2, r6, #48	@ 0x30
 800bb5a:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800bb5e:	5911      	ldr	r1, [r2, r4]
	*ptr++ = (BYTE)val; val >>= 8;
 800bb60:	5310      	strh	r0, [r2, r4]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bb62:	4422      	add	r2, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800bb64:	0e0b      	lsrs	r3, r1, #24
 800bb66:	7090      	strb	r0, [r2, #2]
 800bb68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
	*ptr++ = (BYTE)val;
 800bb6c:	70d3      	strb	r3, [r2, #3]
			if (res != FR_OK) return res;
 800bb6e:	e7d4      	b.n	800bb1a <remove_chain+0x12a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bb70:	f8d9 1020 	ldr.w	r1, [r9, #32]
 800bb74:	4648      	mov	r0, r9
 800bb76:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800bb7a:	f7ff f9c9 	bl	800af10 <move_window>
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	f47f af6e 	bne.w	800ba60 <remove_chain+0x70>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bb84:	0063      	lsls	r3, r4, #1
 800bb86:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bb8a:	444b      	add	r3, r9
 800bb8c:	f8b3 8030 	ldrh.w	r8, [r3, #48]	@ 0x30
		if (nxt == 0) break;				/* Empty cluster? */
 800bb90:	f1b8 0f00 	cmp.w	r8, #0
 800bb94:	f47f af7a 	bne.w	800ba8c <remove_chain+0x9c>
 800bb98:	e033      	b.n	800bc02 <remove_chain+0x212>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bb9a:	f80a 0003 	strb.w	r0, [sl, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bb9e:	4630      	mov	r0, r6
 800bba0:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 800bba2:	f886 9003 	strb.w	r9, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bba6:	4411      	add	r1, r2
 800bba8:	f7ff f9b2 	bl	800af10 <move_window>
			if (res != FR_OK) break;
 800bbac:	2800      	cmp	r0, #0
 800bbae:	f47f af30 	bne.w	800ba12 <remove_chain+0x22>
			p = fs->win + bc % SS(fs);
 800bbb2:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 800bbb6:	f81a 000b 	ldrb.w	r0, [sl, fp]
 800bbba:	eb0a 030b 	add.w	r3, sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bbbe:	f000 00f0 	and.w	r0, r0, #240	@ 0xf0
 800bbc2:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800bbc4:	e7a9      	b.n	800bb1a <remove_chain+0x12a>
			wc = fs->win[bc++ % SS(fs)];
 800bbc6:	f3c8 0308 	ubfx	r3, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbca:	f8d9 1020 	ldr.w	r1, [r9, #32]
			wc = fs->win[bc++ % SS(fs)];
 800bbce:	f108 0801 	add.w	r8, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbd2:	4648      	mov	r0, r9
			wc = fs->win[bc++ % SS(fs)];
 800bbd4:	444b      	add	r3, r9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbd6:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800bbda:	f893 a030 	ldrb.w	sl, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbde:	f7ff f997 	bl	800af10 <move_window>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	f47f af3c 	bne.w	800ba60 <remove_chain+0x70>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bbe8:	f3c8 0808 	ubfx	r8, r8, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bbec:	07e0      	lsls	r0, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800bbee:	44c8      	add	r8, r9
 800bbf0:	f898 3030 	ldrb.w	r3, [r8, #48]	@ 0x30
 800bbf4:	ea4a 2803 	orr.w	r8, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bbf8:	d505      	bpl.n	800bc06 <remove_chain+0x216>
		if (nxt == 0) break;				/* Empty cluster? */
 800bbfa:	ea5f 1818 	movs.w	r8, r8, lsr #4
 800bbfe:	f47f af45 	bne.w	800ba8c <remove_chain+0x9c>
	return FR_OK;
 800bc02:	2000      	movs	r0, #0
 800bc04:	e705      	b.n	800ba12 <remove_chain+0x22>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bc06:	f3c8 080b 	ubfx	r8, r8, #0, #12
		if (nxt == 0) break;				/* Empty cluster? */
 800bc0a:	f1b8 0f00 	cmp.w	r8, #0
 800bc0e:	f47f af3d 	bne.w	800ba8c <remove_chain+0x9c>
 800bc12:	e7f6      	b.n	800bc02 <remove_chain+0x212>

0800bc14 <dir_register>:
{
 800bc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc18:	b085      	sub	sp, #20
 800bc1a:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800bc1c:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800bc1e:	f7ff fcc5 	bl	800b5ac <dir_sdi.constprop.0>
	if (res == FR_OK) {
 800bc22:	2800      	cmp	r0, #0
 800bc24:	f040 80b2 	bne.w	800bd8c <dir_register+0x178>
	if (sector != fs->winsect) {	/* Window offset changed? */
 800bc28:	f8d6 b02c 	ldr.w	fp, [r6, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bc2c:	f106 0330 	add.w	r3, r6, #48	@ 0x30
			res = move_window(fs, dp->sect);
 800bc30:	f8d4 a01c 	ldr.w	sl, [r4, #28]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bc34:	9300      	str	r3, [sp, #0]
 800bc36:	465b      	mov	r3, fp
 800bc38:	46d3      	mov	fp, sl
 800bc3a:	469a      	mov	sl, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 800bc3c:	45d3      	cmp	fp, sl
 800bc3e:	d014      	beq.n	800bc6a <dir_register+0x56>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bc40:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bc42:	7870      	ldrb	r0, [r6, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d15c      	bne.n	800bd02 <dir_register+0xee>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bc48:	2301      	movs	r3, #1
 800bc4a:	465a      	mov	r2, fp
 800bc4c:	9900      	ldr	r1, [sp, #0]
 800bc4e:	f7ff f843 	bl	800acd8 <disk_read>
 800bc52:	b138      	cbz	r0, 800bc64 <dir_register+0x50>
			fs->winsect = sector;
 800bc54:	f04f 33ff 	mov.w	r3, #4294967295
 800bc58:	62f3      	str	r3, [r6, #44]	@ 0x2c
				res = FR_DISK_ERR;
 800bc5a:	2501      	movs	r5, #1
}
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	b005      	add	sp, #20
 800bc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800bc64:	46da      	mov	sl, fp
 800bc66:	f8c6 b02c 	str.w	fp, [r6, #44]	@ 0x2c
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bc6a:	6a23      	ldr	r3, [r4, #32]
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	2be5      	cmp	r3, #229	@ 0xe5
 800bc70:	d000      	beq.n	800bc74 <dir_register+0x60>
 800bc72:	bb2b      	cbnz	r3, 800bcc0 <dir_register+0xac>
		res = move_window(fs, dp->sect);
 800bc74:	69e1      	ldr	r1, [r4, #28]
 800bc76:	4630      	mov	r0, r6
 800bc78:	f7ff f94a 	bl	800af10 <move_window>
		if (res == FR_OK) {
 800bc7c:	4605      	mov	r5, r0
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d1ec      	bne.n	800bc5c <dir_register+0x48>
		*d++ = (BYTE)val;
 800bc82:	2220      	movs	r2, #32
 800bc84:	4601      	mov	r1, r0
 800bc86:	6a20      	ldr	r0, [r4, #32]
 800bc88:	f000 fec2 	bl	800ca10 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bc8c:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bc8e:	f104 0225 	add.w	r2, r4, #37	@ 0x25
 800bc92:	1a9a      	subs	r2, r3, r2
 800bc94:	2a02      	cmp	r2, #2
 800bc96:	f240 80db 	bls.w	800be50 <dir_register+0x23c>
			*d++ = *s++;
 800bc9a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800bc9c:	601a      	str	r2, [r3, #0]
 800bc9e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800bca0:	605a      	str	r2, [r3, #4]
 800bca2:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
}
 800bca6:	4628      	mov	r0, r5
			*d++ = *s++;
 800bca8:	721a      	strb	r2, [r3, #8]
 800bcaa:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800bcae:	725a      	strb	r2, [r3, #9]
			fs->wflag = 1;
 800bcb0:	2201      	movs	r2, #1
			*d++ = *s++;
 800bcb2:	f894 102e 	ldrb.w	r1, [r4, #46]	@ 0x2e
 800bcb6:	7299      	strb	r1, [r3, #10]
			fs->wflag = 1;
 800bcb8:	70f2      	strb	r2, [r6, #3]
}
 800bcba:	b005      	add	sp, #20
 800bcbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bcc0:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
 800bcc2:	6827      	ldr	r7, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bcc4:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bcc6:	f8d4 b01c 	ldr.w	fp, [r4, #28]
 800bcca:	f5b5 1f00 	cmp.w	r5, #2097152	@ 0x200000
 800bcce:	d265      	bcs.n	800bd9c <dir_register+0x188>
 800bcd0:	f1bb 0f00 	cmp.w	fp, #0
 800bcd4:	d062      	beq.n	800bd9c <dir_register+0x188>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bcd6:	f3c5 0908 	ubfx	r9, r5, #0, #9
 800bcda:	f1b9 0f00 	cmp.w	r9, #0
 800bcde:	d109      	bne.n	800bcf4 <dir_register+0xe0>
		dp->sect++;				/* Next sector */
 800bce0:	f10b 0b01 	add.w	fp, fp, #1
		if (!dp->clust) {		/* Static table */
 800bce4:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800bce6:	f8c4 b01c 	str.w	fp, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800bcea:	bb51      	cbnz	r1, 800bd42 <dir_register+0x12e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bcec:	893b      	ldrh	r3, [r7, #8]
 800bcee:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800bcf2:	d952      	bls.n	800bd9a <dir_register+0x186>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bcf4:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bcf8:	eb08 0309 	add.w	r3, r8, r9
	dp->dptr = ofs;						/* Current entry */
 800bcfc:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bcfe:	6223      	str	r3, [r4, #32]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bd00:	e79c      	b.n	800bc3c <dir_register+0x28>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bd02:	2301      	movs	r3, #1
 800bd04:	4652      	mov	r2, sl
 800bd06:	9900      	ldr	r1, [sp, #0]
 800bd08:	f7fe fff4 	bl	800acf4 <disk_write>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d1a4      	bne.n	800bc5a <dir_register+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bd10:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 800bd12:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bd14:	ebaa 0103 	sub.w	r1, sl, r3
 800bd18:	69b3      	ldr	r3, [r6, #24]
 800bd1a:	4299      	cmp	r1, r3
 800bd1c:	d20f      	bcs.n	800bd3e <dir_register+0x12a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bd1e:	78b5      	ldrb	r5, [r6, #2]
 800bd20:	2d01      	cmp	r5, #1
 800bd22:	d90c      	bls.n	800bd3e <dir_register+0x12a>
 800bd24:	9f00      	ldr	r7, [sp, #0]
 800bd26:	e000      	b.n	800bd2a <dir_register+0x116>
					wsect += fs->fsize;
 800bd28:	69b3      	ldr	r3, [r6, #24]
 800bd2a:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bd2c:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800bd2e:	2301      	movs	r3, #1
 800bd30:	4639      	mov	r1, r7
 800bd32:	4652      	mov	r2, sl
 800bd34:	7870      	ldrb	r0, [r6, #1]
 800bd36:	f7fe ffdd 	bl	800acf4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bd3a:	2d01      	cmp	r5, #1
 800bd3c:	d1f4      	bne.n	800bd28 <dir_register+0x114>
 800bd3e:	7870      	ldrb	r0, [r6, #1]
 800bd40:	e782      	b.n	800bc48 <dir_register+0x34>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bd42:	897b      	ldrh	r3, [r7, #10]
 800bd44:	3b01      	subs	r3, #1
 800bd46:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 800bd4a:	d1d3      	bne.n	800bcf4 <dir_register+0xe0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bd4c:	4638      	mov	r0, r7
 800bd4e:	f7ff fb07 	bl	800b360 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bd52:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bd54:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bd56:	d979      	bls.n	800be4c <dir_register+0x238>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bd58:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bd5c:	f43f af7d 	beq.w	800bc5a <dir_register+0x46>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	4298      	cmp	r0, r3
 800bd64:	d21c      	bcs.n	800bda0 <dir_register+0x18c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bd66:	3b02      	subs	r3, #2
	clst -= 2;
 800bd68:	f1a0 0b02 	sub.w	fp, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bd6c:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bd70:	455b      	cmp	r3, fp
				dp->clust = clst;		/* Initialize data for new cluster */
 800bd72:	f8c4 a018 	str.w	sl, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bd76:	f240 8084 	bls.w	800be82 <dir_register+0x26e>
	return clst * fs->csize + fs->database;
 800bd7a:	897a      	ldrh	r2, [r7, #10]
 800bd7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd7e:	fb0b 3b02 	mla	fp, fp, r2, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 800bd82:	f8d6 a02c 	ldr.w	sl, [r6, #44]	@ 0x2c
				dp->sect = clust2sect(fs, clst);
 800bd86:	f8c4 b01c 	str.w	fp, [r4, #28]
 800bd8a:	e7b5      	b.n	800bcf8 <dir_register+0xe4>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bd8c:	2804      	cmp	r0, #4
 800bd8e:	4605      	mov	r5, r0
 800bd90:	d004      	beq.n	800bd9c <dir_register+0x188>
}
 800bd92:	4628      	mov	r0, r5
 800bd94:	b005      	add	sp, #20
 800bd96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				dp->sect = 0; return FR_NO_FILE;
 800bd9a:	61e1      	str	r1, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bd9c:	2507      	movs	r5, #7
	return res;
 800bd9e:	e75d      	b.n	800bc5c <dir_register+0x48>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bda0:	69a1      	ldr	r1, [r4, #24]
 800bda2:	4620      	mov	r0, r4
 800bda4:	f7ff fb32 	bl	800b40c <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bda8:	4682      	mov	sl, r0
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	d0f6      	beq.n	800bd9c <dir_register+0x188>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bdae:	2801      	cmp	r0, #1
 800bdb0:	d04c      	beq.n	800be4c <dir_register+0x238>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bdb2:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bdb6:	f43f af50 	beq.w	800bc5a <dir_register+0x46>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bdba:	78fb      	ldrb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bdbc:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d16a      	bne.n	800be9a <dir_register+0x286>
		*d++ = (BYTE)val;
 800bdc4:	2100      	movs	r1, #0
 800bdc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bdca:	4640      	mov	r0, r8
	clst -= 2;
 800bdcc:	f1aa 0b02 	sub.w	fp, sl, #2
		*d++ = (BYTE)val;
 800bdd0:	f000 fe1e 	bl	800ca10 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bdd4:	697b      	ldr	r3, [r7, #20]
	return clst * fs->csize + fs->database;
 800bdd6:	8979      	ldrh	r1, [r7, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bdd8:	3b02      	subs	r3, #2
 800bdda:	459b      	cmp	fp, r3
 800bddc:	f080 8086 	bcs.w	800beec <dir_register+0x2d8>
	return clst * fs->csize + fs->database;
 800bde0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bde2:	fb0b 2201 	mla	r2, fp, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bde6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bde8:	2900      	cmp	r1, #0
 800bdea:	d054      	beq.n	800be96 <dir_register+0x282>
 800bdec:	2100      	movs	r1, #0
 800bdee:	9403      	str	r4, [sp, #12]
 800bdf0:	4614      	mov	r4, r2
 800bdf2:	e9cd 6501 	strd	r6, r5, [sp, #4]
 800bdf6:	460e      	mov	r6, r1
						fs->wflag = 1;
 800bdf8:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bdfc:	4622      	mov	r2, r4
 800bdfe:	4641      	mov	r1, r8
 800be00:	7878      	ldrb	r0, [r7, #1]
						fs->wflag = 1;
 800be02:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800be04:	2301      	movs	r3, #1
 800be06:	f7fe ff75 	bl	800acf4 <disk_write>
 800be0a:	2800      	cmp	r0, #0
 800be0c:	f47f af25 	bne.w	800bc5a <dir_register+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800be10:	6a3b      	ldr	r3, [r7, #32]
			fs->wflag = 0;
 800be12:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800be14:	1ae1      	subs	r1, r4, r3
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	4299      	cmp	r1, r3
 800be1a:	d20e      	bcs.n	800be3a <dir_register+0x226>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800be1c:	78bd      	ldrb	r5, [r7, #2]
 800be1e:	2d01      	cmp	r5, #1
 800be20:	d801      	bhi.n	800be26 <dir_register+0x212>
 800be22:	e00a      	b.n	800be3a <dir_register+0x226>
					wsect += fs->fsize;
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800be28:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800be2a:	2301      	movs	r3, #1
 800be2c:	4641      	mov	r1, r8
 800be2e:	4622      	mov	r2, r4
 800be30:	7878      	ldrb	r0, [r7, #1]
 800be32:	f7fe ff5f 	bl	800acf4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800be36:	2d01      	cmp	r5, #1
 800be38:	d1f4      	bne.n	800be24 <dir_register+0x210>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800be3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be3c:	1c73      	adds	r3, r6, #1
 800be3e:	8979      	ldrh	r1, [r7, #10]
 800be40:	1c44      	adds	r4, r0, #1
 800be42:	428b      	cmp	r3, r1
 800be44:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800be46:	d21f      	bcs.n	800be88 <dir_register+0x274>
 800be48:	461e      	mov	r6, r3
 800be4a:	e7d5      	b.n	800bdf8 <dir_register+0x1e4>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800be4c:	2502      	movs	r5, #2
 800be4e:	e705      	b.n	800bc5c <dir_register+0x48>
			*d++ = *s++;
 800be50:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 800be54:	701a      	strb	r2, [r3, #0]
 800be56:	f894 2025 	ldrb.w	r2, [r4, #37]	@ 0x25
 800be5a:	705a      	strb	r2, [r3, #1]
 800be5c:	f894 2026 	ldrb.w	r2, [r4, #38]	@ 0x26
 800be60:	709a      	strb	r2, [r3, #2]
 800be62:	f894 2027 	ldrb.w	r2, [r4, #39]	@ 0x27
 800be66:	70da      	strb	r2, [r3, #3]
 800be68:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800be6c:	711a      	strb	r2, [r3, #4]
 800be6e:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 800be72:	715a      	strb	r2, [r3, #5]
 800be74:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 800be78:	719a      	strb	r2, [r3, #6]
 800be7a:	f894 202b 	ldrb.w	r2, [r4, #43]	@ 0x2b
 800be7e:	71da      	strb	r2, [r3, #7]
 800be80:	e70f      	b.n	800bca2 <dir_register+0x8e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800be82:	f04f 0b00 	mov.w	fp, #0
 800be86:	e77c      	b.n	800bd82 <dir_register+0x16e>
					fs->winsect -= n;							/* Restore window offset */
 800be88:	4631      	mov	r1, r6
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800be8a:	697b      	ldr	r3, [r7, #20]
					fs->winsect -= n;							/* Restore window offset */
 800be8c:	9d02      	ldr	r5, [sp, #8]
 800be8e:	9e01      	ldr	r6, [sp, #4]
 800be90:	1a42      	subs	r2, r0, r1
 800be92:	9c03      	ldr	r4, [sp, #12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800be94:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 800be96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be98:	e76a      	b.n	800bd70 <dir_register+0x15c>
		wsect = fs->winsect;	/* Current sector number */
 800be9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800be9c:	2301      	movs	r3, #1
 800be9e:	4641      	mov	r1, r8
 800bea0:	7878      	ldrb	r0, [r7, #1]
 800bea2:	9201      	str	r2, [sp, #4]
 800bea4:	f7fe ff26 	bl	800acf4 <disk_write>
 800bea8:	2800      	cmp	r0, #0
 800beaa:	f47f aed6 	bne.w	800bc5a <dir_register+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800beae:	6a3b      	ldr	r3, [r7, #32]
 800beb0:	9a01      	ldr	r2, [sp, #4]
			fs->wflag = 0;
 800beb2:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800beb4:	1ad1      	subs	r1, r2, r3
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	4299      	cmp	r1, r3
 800beba:	d283      	bcs.n	800bdc4 <dir_register+0x1b0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bebc:	f897 b002 	ldrb.w	fp, [r7, #2]
 800bec0:	f1bb 0f01 	cmp.w	fp, #1
 800bec4:	f67f af7e 	bls.w	800bdc4 <dir_register+0x1b0>
 800bec8:	9401      	str	r4, [sp, #4]
 800beca:	4614      	mov	r4, r2
 800becc:	e000      	b.n	800bed0 <dir_register+0x2bc>
					wsect += fs->fsize;
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bed2:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800bed6:	2301      	movs	r3, #1
 800bed8:	4641      	mov	r1, r8
 800beda:	4622      	mov	r2, r4
 800bedc:	7878      	ldrb	r0, [r7, #1]
 800bede:	f7fe ff09 	bl	800acf4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bee2:	f1bb 0f01 	cmp.w	fp, #1
 800bee6:	d1f2      	bne.n	800bece <dir_register+0x2ba>
 800bee8:	9c01      	ldr	r4, [sp, #4]
 800beea:	e76b      	b.n	800bdc4 <dir_register+0x1b0>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800beec:	2200      	movs	r2, #0
 800beee:	e77a      	b.n	800bde6 <dir_register+0x1d2>

0800bef0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bef0:	b510      	push	{r4, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 800bef8:	b1a1      	cbz	r1, 800bf24 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800befa:	f891 c000 	ldrb.w	ip, [r1]
 800befe:	f1bc 0f20 	cmp.w	ip, #32
 800bf02:	d912      	bls.n	800bf2a <f_mount+0x3a>
 800bf04:	f1bc 0f3a 	cmp.w	ip, #58	@ 0x3a
 800bf08:	d00f      	beq.n	800bf2a <f_mount+0x3a>
 800bf0a:	4608      	mov	r0, r1
 800bf0c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800bf10:	2b20      	cmp	r3, #32
 800bf12:	d90c      	bls.n	800bf2e <f_mount+0x3e>
 800bf14:	2b3a      	cmp	r3, #58	@ 0x3a
 800bf16:	d1f9      	bne.n	800bf0c <f_mount+0x1c>
			i = *tp++ - '0';
 800bf18:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bf1a:	4288      	cmp	r0, r1
 800bf1c:	d102      	bne.n	800bf24 <f_mount+0x34>
 800bf1e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800bf22:	d006      	beq.n	800bf32 <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 800bf24:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800bf26:	b002      	add	sp, #8
 800bf28:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bf2a:	4663      	mov	r3, ip
 800bf2c:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bf2e:	2b3a      	cmp	r3, #58	@ 0x3a
 800bf30:	d0f2      	beq.n	800bf18 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bf32:	4913      	ldr	r1, [pc, #76]	@ (800bf80 <f_mount+0x90>)
 800bf34:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 800bf36:	b143      	cbz	r3, 800bf4a <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bf38:	4812      	ldr	r0, [pc, #72]	@ (800bf84 <f_mount+0x94>)
 800bf3a:	6804      	ldr	r4, [r0, #0]
 800bf3c:	42a3      	cmp	r3, r4
 800bf3e:	d019      	beq.n	800bf74 <f_mount+0x84>
 800bf40:	6904      	ldr	r4, [r0, #16]
 800bf42:	429c      	cmp	r4, r3
 800bf44:	d013      	beq.n	800bf6e <f_mount+0x7e>
		cfs->fs_type = 0;				/* Clear old fs object */
 800bf46:	2000      	movs	r0, #0
 800bf48:	7018      	strb	r0, [r3, #0]
	if (fs) {
 800bf4a:	9b01      	ldr	r3, [sp, #4]
 800bf4c:	b15b      	cbz	r3, 800bf66 <f_mount+0x76>
		fs->fs_type = 0;				/* Clear new fs object */
 800bf4e:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bf50:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 800bf52:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
 800bf54:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bf56:	d107      	bne.n	800bf68 <f_mount+0x78>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bf58:	4602      	mov	r2, r0
 800bf5a:	a901      	add	r1, sp, #4
 800bf5c:	4668      	mov	r0, sp
 800bf5e:	f7ff f815 	bl	800af8c <find_volume>
}
 800bf62:	b002      	add	sp, #8
 800bf64:	bd10      	pop	{r4, pc}
	FatFs[vol] = fs;					/* Register new fs object */
 800bf66:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bf68:	2000      	movs	r0, #0
}
 800bf6a:	b002      	add	sp, #8
 800bf6c:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bf6e:	2400      	movs	r4, #0
 800bf70:	6104      	str	r4, [r0, #16]
 800bf72:	e7e8      	b.n	800bf46 <f_mount+0x56>
 800bf74:	2400      	movs	r4, #0
 800bf76:	6004      	str	r4, [r0, #0]
 800bf78:	6904      	ldr	r4, [r0, #16]
 800bf7a:	429c      	cmp	r4, r3
 800bf7c:	d1e3      	bne.n	800bf46 <f_mount+0x56>
 800bf7e:	e7f6      	b.n	800bf6e <f_mount+0x7e>
 800bf80:	240bc0b4 	.word	0x240bc0b4
 800bf84:	240bc090 	.word	0x240bc090

0800bf88 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bf88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf8c:	b090      	sub	sp, #64	@ 0x40
 800bf8e:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bf90:	2800      	cmp	r0, #0
 800bf92:	d036      	beq.n	800c002 <f_open+0x7a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bf94:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 800bf98:	4616      	mov	r6, r2
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	a903      	add	r1, sp, #12
 800bf9e:	a801      	add	r0, sp, #4
 800bfa0:	463a      	mov	r2, r7
 800bfa2:	f7fe fff3 	bl	800af8c <find_volume>
	if (res == FR_OK) {
 800bfa6:	4605      	mov	r5, r0
 800bfa8:	b128      	cbz	r0, 800bfb6 <f_open+0x2e>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bfaa:	2300      	movs	r3, #0
 800bfac:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800bfae:	4628      	mov	r0, r5
 800bfb0:	b010      	add	sp, #64	@ 0x40
 800bfb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 800bfb6:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800bfba:	a804      	add	r0, sp, #16
 800bfbc:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800bfbe:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800bfc2:	f7ff fb7b 	bl	800b6bc <follow_path>
		if (res == FR_OK) {
 800bfc6:	b9a8      	cbnz	r0, 800bff4 <f_open+0x6c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bfc8:	f99d 303f 	ldrsb.w	r3, [sp, #63]	@ 0x3f
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	db1d      	blt.n	800c00c <f_open+0x84>
		if (Files[i].fs) {	/* Existing entry */
 800bfd0:	4ba8      	ldr	r3, [pc, #672]	@ (800c274 <f_open+0x2ec>)
 800bfd2:	f006 0c3e 	and.w	ip, r6, #62	@ 0x3e
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bfd6:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 800bfd8:	6818      	ldr	r0, [r3, #0]
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	f000 8109 	beq.w	800c1f2 <f_open+0x26a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bfe0:	4290      	cmp	r0, r2
 800bfe2:	d060      	beq.n	800c0a6 <f_open+0x11e>
		if (Files[i].fs) {	/* Existing entry */
 800bfe4:	6919      	ldr	r1, [r3, #16]
 800bfe6:	2900      	cmp	r1, #0
 800bfe8:	d06d      	beq.n	800c0c6 <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bfea:	4291      	cmp	r1, r2
 800bfec:	f000 8116 	beq.w	800c21c <f_open+0x294>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bff0:	2512      	movs	r5, #18
 800bff2:	e7da      	b.n	800bfaa <f_open+0x22>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bff4:	f016 0f1c 	tst.w	r6, #28
 800bff8:	d001      	beq.n	800bffe <f_open+0x76>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bffa:	2804      	cmp	r0, #4
 800bffc:	d008      	beq.n	800c010 <f_open+0x88>
 800bffe:	4605      	mov	r5, r0
 800c000:	e7d3      	b.n	800bfaa <f_open+0x22>
	if (!fp) return FR_INVALID_OBJECT;
 800c002:	2509      	movs	r5, #9
}
 800c004:	4628      	mov	r0, r5
 800c006:	b010      	add	sp, #64	@ 0x40
 800c008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
 800c00c:	2506      	movs	r5, #6
 800c00e:	e7cc      	b.n	800bfaa <f_open+0x22>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c010:	4b98      	ldr	r3, [pc, #608]	@ (800c274 <f_open+0x2ec>)
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	2a00      	cmp	r2, #0
 800c016:	f000 80f9 	beq.w	800c20c <f_open+0x284>
 800c01a:	691b      	ldr	r3, [r3, #16]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d1e7      	bne.n	800bff0 <f_open+0x68>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c020:	a804      	add	r0, sp, #16
 800c022:	f7ff fdf7 	bl	800bc14 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c026:	4603      	mov	r3, r0
 800c028:	2800      	cmp	r0, #0
 800c02a:	f040 811c 	bne.w	800c266 <f_open+0x2de>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c02e:	f047 0708 	orr.w	r7, r7, #8
				dw = GET_FATTIME();
 800c032:	f7fe fd47 	bl	800aac4 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c036:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c03a:	2320      	movs	r3, #32
	*ptr++ = (BYTE)val; val >>= 8;
 800c03c:	f8c9 000e 	str.w	r0, [r9, #14]
 800c040:	f8c9 0016 	str.w	r0, [r9, #22]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c044:	f889 300b 	strb.w	r3, [r9, #11]
	if (fs->fs_type == FS_FAT32) {
 800c048:	f898 3000 	ldrb.w	r3, [r8]
	cl = ld_word(dir + DIR_FstClusLO);
 800c04c:	f8b9 601a 	ldrh.w	r6, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800c050:	2b03      	cmp	r3, #3
 800c052:	d103      	bne.n	800c05c <f_open+0xd4>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c054:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 800c058:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 800c05c:	2300      	movs	r3, #0
 800c05e:	f8a9 301a 	strh.w	r3, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800c062:	f898 2000 	ldrb.w	r2, [r8]
 800c066:	2a03      	cmp	r2, #3
	*ptr++ = (BYTE)val; val >>= 8;
 800c068:	f04f 0200 	mov.w	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800c06c:	bf08      	it	eq
 800c06e:	f8a9 3014 	strheq.w	r3, [r9, #20]
					fs->wflag = 1;
 800c072:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800c074:	f8c9 201c 	str.w	r2, [r9, #28]
					fs->wflag = 1;
 800c078:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800c07c:	2e00      	cmp	r6, #0
 800c07e:	f040 80de 	bne.w	800c23e <f_open+0x2b6>
				mode |= FA_MODIFIED;
 800c082:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c086:	2f01      	cmp	r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c088:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c08c:	a804      	add	r0, sp, #16
 800c08e:	bf94      	ite	ls
 800c090:	2100      	movls	r1, #0
 800c092:	2101      	movhi	r1, #1
			fp->dir_ptr = dj.dir;
 800c094:	e9c4 3909 	strd	r3, r9, [r4, #36]	@ 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c098:	f7fe fe46 	bl	800ad28 <inc_lock>
 800c09c:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	d143      	bne.n	800c12a <f_open+0x1a2>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c0a2:	2502      	movs	r5, #2
 800c0a4:	e781      	b.n	800bfaa <f_open+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c0a6:	685a      	ldr	r2, [r3, #4]
 800c0a8:	f8dd e018 	ldr.w	lr, [sp, #24]
 800c0ac:	4572      	cmp	r2, lr
 800c0ae:	f000 80b9 	beq.w	800c224 <f_open+0x29c>
		if (Files[i].fs) {	/* Existing entry */
 800c0b2:	691a      	ldr	r2, [r3, #16]
 800c0b4:	b13a      	cbz	r2, 800c0c6 <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c0b6:	4282      	cmp	r2, r0
 800c0b8:	d19a      	bne.n	800bff0 <f_open+0x68>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c0ba:	4628      	mov	r0, r5
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c0bc:	695a      	ldr	r2, [r3, #20]
 800c0be:	4572      	cmp	r2, lr
 800c0c0:	d00d      	beq.n	800c0de <f_open+0x156>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	d094      	beq.n	800bff0 <f_open+0x68>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c0c6:	f016 0f1c 	tst.w	r6, #28
 800c0ca:	d018      	beq.n	800c0fe <f_open+0x176>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c0cc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800c0d0:	f013 0f11 	tst.w	r3, #17
 800c0d4:	d120      	bne.n	800c118 <f_open+0x190>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c0d6:	0773      	lsls	r3, r6, #29
 800c0d8:	d520      	bpl.n	800c11c <f_open+0x194>
 800c0da:	2508      	movs	r5, #8
 800c0dc:	e765      	b.n	800bfaa <f_open+0x22>
				Files[i].clu == dp->obj.sclust &&
 800c0de:	6999      	ldr	r1, [r3, #24]
 800c0e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0e2:	4291      	cmp	r1, r2
 800c0e4:	d1ed      	bne.n	800c0c2 <f_open+0x13a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c0e6:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c0e8:	f1bc 0f00 	cmp.w	ip, #0
 800c0ec:	d105      	bne.n	800c0fa <f_open+0x172>
 800c0ee:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800c0f2:	899b      	ldrh	r3, [r3, #12]
 800c0f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c0f8:	d1e5      	bne.n	800c0c6 <f_open+0x13e>
 800c0fa:	2510      	movs	r5, #16
 800c0fc:	e755      	b.n	800bfaa <f_open+0x22>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c0fe:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800c102:	06d8      	lsls	r0, r3, #27
 800c104:	d40f      	bmi.n	800c126 <f_open+0x19e>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c106:	07b2      	lsls	r2, r6, #30
 800c108:	d501      	bpl.n	800c10e <f_open+0x186>
 800c10a:	07db      	lsls	r3, r3, #31
 800c10c:	d404      	bmi.n	800c118 <f_open+0x190>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c10e:	0730      	lsls	r0, r6, #28
			fp->dir_ptr = dj.dir;
 800c110:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c114:	d5b7      	bpl.n	800c086 <f_open+0xfe>
 800c116:	e7b4      	b.n	800c082 <f_open+0xfa>
					res = FR_DENIED;
 800c118:	2507      	movs	r5, #7
 800c11a:	e746      	b.n	800bfaa <f_open+0x22>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c11c:	0736      	lsls	r6, r6, #28
			fp->dir_ptr = dj.dir;
 800c11e:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c122:	d5b0      	bpl.n	800c086 <f_open+0xfe>
 800c124:	e785      	b.n	800c032 <f_open+0xaa>
					res = FR_NO_FILE;
 800c126:	2504      	movs	r5, #4
 800c128:	e73f      	b.n	800bfaa <f_open+0x22>
	if (fs->fs_type == FS_FAT32) {
 800c12a:	f898 3000 	ldrb.w	r3, [r8]
	cl = ld_word(dir + DIR_FstClusLO);
 800c12e:	f8b9 601a 	ldrh.w	r6, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800c132:	2b03      	cmp	r3, #3
 800c134:	d103      	bne.n	800c13e <f_open+0x1b6>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c136:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 800c13a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c13e:	2100      	movs	r1, #0
			fp->obj.id = fs->id;
 800c140:	f8b8 3006 	ldrh.w	r3, [r8, #6]
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c144:	60a6      	str	r6, [r4, #8]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c146:	f104 0a30 	add.w	sl, r4, #48	@ 0x30
	rv = rv << 8 | ptr[0];
 800c14a:	f8d9 901c 	ldr.w	r9, [r9, #28]
		*d++ = (BYTE)val;
 800c14e:	f44f 7200 	mov.w	r2, #512	@ 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c152:	62e1      	str	r1, [r4, #44]	@ 0x2c
		*d++ = (BYTE)val;
 800c154:	4650      	mov	r0, sl
			fp->err = 0;			/* Clear error flag */
 800c156:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c158:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c15a:	61a1      	str	r1, [r4, #24]
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c15c:	f8c4 8000 	str.w	r8, [r4]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c160:	f8c4 900c 	str.w	r9, [r4, #12]
			fp->obj.id = fs->id;
 800c164:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 800c166:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
 800c168:	f000 fc52 	bl	800ca10 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c16c:	06b9      	lsls	r1, r7, #26
 800c16e:	f57f af1e 	bpl.w	800bfae <f_open+0x26>
 800c172:	f1b9 0f00 	cmp.w	r9, #0
 800c176:	f43f af1a 	beq.w	800bfae <f_open+0x26>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c17a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c17e:	f8c4 9018 	str.w	r9, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c182:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c186:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c18a:	d96e      	bls.n	800c26a <f_open+0x2e2>
					clst = get_fat(&fp->obj, clst);
 800c18c:	4631      	mov	r1, r6
 800c18e:	6820      	ldr	r0, [r4, #0]
 800c190:	f7ff f8e6 	bl	800b360 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 800c194:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c196:	eba9 0907 	sub.w	r9, r9, r7
					clst = get_fat(&fp->obj, clst);
 800c19a:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 800c19c:	d934      	bls.n	800c208 <f_open+0x280>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c19e:	1c42      	adds	r2, r0, #1
 800c1a0:	d001      	beq.n	800c1a6 <f_open+0x21e>
 800c1a2:	454f      	cmp	r7, r9
 800c1a4:	d3f2      	bcc.n	800c18c <f_open+0x204>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c1a6:	1c73      	adds	r3, r6, #1
				fp->clust = clst;
 800c1a8:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c1aa:	d020      	beq.n	800c1ee <f_open+0x266>
 800c1ac:	f3c9 0308 	ubfx	r3, r9, #0, #9
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f43f aefc 	beq.w	800bfae <f_open+0x26>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c1b6:	f8d8 3014 	ldr.w	r3, [r8, #20]
	clst -= 2;
 800c1ba:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c1bc:	3b02      	subs	r3, #2
 800c1be:	429e      	cmp	r6, r3
 800c1c0:	f4bf af6f 	bcs.w	800c0a2 <f_open+0x11a>
	return clst * fs->csize + fs->database;
 800c1c4:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800c1c8:	f8d8 2028 	ldr.w	r2, [r8, #40]	@ 0x28
 800c1cc:	fb06 2203 	mla	r2, r6, r3, r2
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c1d0:	2a00      	cmp	r2, #0
 800c1d2:	f43f af66 	beq.w	800c0a2 <f_open+0x11a>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c1d6:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c1da:	4651      	mov	r1, sl
 800c1dc:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c1de:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c1e0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c1e4:	f7fe fd78 	bl	800acd8 <disk_read>
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	f43f aee0 	beq.w	800bfae <f_open+0x26>
 800c1ee:	2501      	movs	r5, #1
 800c1f0:	e6db      	b.n	800bfaa <f_open+0x22>
		if (Files[i].fs) {	/* Existing entry */
 800c1f2:	6919      	ldr	r1, [r3, #16]
 800c1f4:	2900      	cmp	r1, #0
 800c1f6:	f43f af66 	beq.w	800c0c6 <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c1fa:	4291      	cmp	r1, r2
 800c1fc:	f47f af63 	bne.w	800c0c6 <f_open+0x13e>
			be = 1;
 800c200:	2001      	movs	r0, #1
 800c202:	f8dd e018 	ldr.w	lr, [sp, #24]
 800c206:	e759      	b.n	800c0bc <f_open+0x134>
				fp->clust = clst;
 800c208:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c20a:	e74a      	b.n	800c0a2 <f_open+0x11a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c20c:	a804      	add	r0, sp, #16
 800c20e:	f7ff fd01 	bl	800bc14 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c212:	2800      	cmp	r0, #0
 800c214:	f43f af0b 	beq.w	800c02e <f_open+0xa6>
 800c218:	4605      	mov	r5, r0
 800c21a:	e6c6      	b.n	800bfaa <f_open+0x22>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c21c:	4628      	mov	r0, r5
 800c21e:	f8dd e018 	ldr.w	lr, [sp, #24]
 800c222:	e74b      	b.n	800c0bc <f_open+0x134>
				Files[i].clu == dp->obj.sclust &&
 800c224:	689a      	ldr	r2, [r3, #8]
 800c226:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c228:	4291      	cmp	r1, r2
 800c22a:	d020      	beq.n	800c26e <f_open+0x2e6>
		if (Files[i].fs) {	/* Existing entry */
 800c22c:	691a      	ldr	r2, [r3, #16]
 800c22e:	2a00      	cmp	r2, #0
 800c230:	f43f af49 	beq.w	800c0c6 <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c234:	4290      	cmp	r0, r2
 800c236:	f47f aedb 	bne.w	800bff0 <f_open+0x68>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c23a:	2000      	movs	r0, #0
 800c23c:	e73e      	b.n	800c0bc <f_open+0x134>
						res = remove_chain(&dj.obj, cl, 0);
 800c23e:	4631      	mov	r1, r6
 800c240:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 800c242:	f8d8 a02c 	ldr.w	sl, [r8, #44]	@ 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 800c246:	f7ff fbd3 	bl	800b9f0 <remove_chain>
						if (res == FR_OK) {
 800c24a:	2800      	cmp	r0, #0
 800c24c:	f47f aed7 	bne.w	800bffe <f_open+0x76>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c250:	3e01      	subs	r6, #1
							res = move_window(fs, dw);
 800c252:	4651      	mov	r1, sl
 800c254:	4640      	mov	r0, r8
 800c256:	f7fe fe5b 	bl	800af10 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c25a:	f8c8 600c 	str.w	r6, [r8, #12]
		if (res == FR_OK) {
 800c25e:	4603      	mov	r3, r0
 800c260:	2800      	cmp	r0, #0
 800c262:	f43f af0e 	beq.w	800c082 <f_open+0xfa>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c266:	461d      	mov	r5, r3
 800c268:	e69f      	b.n	800bfaa <f_open+0x22>
				fp->clust = clst;
 800c26a:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c26c:	e79e      	b.n	800c1ac <f_open+0x224>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c26e:	462a      	mov	r2, r5
 800c270:	e73a      	b.n	800c0e8 <f_open+0x160>
 800c272:	bf00      	nop
 800c274:	240bc090 	.word	0x240bc090

0800c278 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c27c:	461f      	mov	r7, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800c27e:	2300      	movs	r3, #0
{
 800c280:	b083      	sub	sp, #12
	*br = 0;	/* Clear read byte counter */
 800c282:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c284:	b150      	cbz	r0, 800c29c <f_read+0x24>
 800c286:	6803      	ldr	r3, [r0, #0]
 800c288:	4604      	mov	r4, r0
 800c28a:	b13b      	cbz	r3, 800c29c <f_read+0x24>
 800c28c:	4691      	mov	r9, r2
 800c28e:	781a      	ldrb	r2, [r3, #0]
 800c290:	b122      	cbz	r2, 800c29c <f_read+0x24>
 800c292:	460e      	mov	r6, r1
 800c294:	88da      	ldrh	r2, [r3, #6]
 800c296:	8881      	ldrh	r1, [r0, #4]
 800c298:	4291      	cmp	r1, r2
 800c29a:	d004      	beq.n	800c2a6 <f_read+0x2e>
	FRESULT res = FR_INVALID_OBJECT;
 800c29c:	2509      	movs	r5, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800c29e:	4628      	mov	r0, r5
 800c2a0:	b003      	add	sp, #12
 800c2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c2a6:	7858      	ldrb	r0, [r3, #1]
 800c2a8:	f7fe fcf6 	bl	800ac98 <disk_status>
 800c2ac:	07c2      	lsls	r2, r0, #31
 800c2ae:	d4f5      	bmi.n	800c29c <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c2b0:	7d65      	ldrb	r5, [r4, #21]
 800c2b2:	2d00      	cmp	r5, #0
 800c2b4:	d1f3      	bne.n	800c29e <f_read+0x26>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c2b6:	7d23      	ldrb	r3, [r4, #20]
 800c2b8:	f013 0b01 	ands.w	fp, r3, #1
 800c2bc:	f000 80d9 	beq.w	800c472 <f_read+0x1fa>
	remain = fp->obj.objsize - fp->fptr;
 800c2c0:	69a0      	ldr	r0, [r4, #24]
 800c2c2:	68e3      	ldr	r3, [r4, #12]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c2c4:	f8d4 a000 	ldr.w	sl, [r4]
	remain = fp->obj.objsize - fp->fptr;
 800c2c8:	eba3 0800 	sub.w	r8, r3, r0
 800c2cc:	45c8      	cmp	r8, r9
 800c2ce:	bf28      	it	cs
 800c2d0:	46c8      	movcs	r8, r9
	for ( ;  btr;								/* Repeat until all data read */
 800c2d2:	f1b8 0f00 	cmp.w	r8, #0
 800c2d6:	d0e2      	beq.n	800c29e <f_read+0x26>
 800c2d8:	9500      	str	r5, [sp, #0]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c2da:	f3c0 0c08 	ubfx	ip, r0, #0, #9
 800c2de:	f1bc 0f00 	cmp.w	ip, #0
 800c2e2:	d152      	bne.n	800c38a <f_read+0x112>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c2e4:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800c2e8:	0a43      	lsrs	r3, r0, #9
 800c2ea:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800c2ec:	ea12 2250 	ands.w	r2, r2, r0, lsr #9
 800c2f0:	d036      	beq.n	800c360 <f_read+0xe8>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c2f2:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c2f4:	f8da 3014 	ldr.w	r3, [sl, #20]
	clst -= 2;
 800c2f8:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c2fa:	3b02      	subs	r3, #2
 800c2fc:	4298      	cmp	r0, r3
 800c2fe:	d23d      	bcs.n	800c37c <f_read+0x104>
	return clst * fs->csize + fs->database;
 800c300:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 800c304:	f8da 3028 	ldr.w	r3, [sl, #40]	@ 0x28
 800c308:	fb01 3300 	mla	r3, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d035      	beq.n	800c37c <f_read+0x104>
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c310:	f5b8 7f00 	cmp.w	r8, #512	@ 0x200
			sect += csect;
 800c314:	eb02 0903 	add.w	r9, r2, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c318:	d378      	bcc.n	800c40c <f_read+0x194>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c31a:	eb02 2058 	add.w	r0, r2, r8, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c31e:	ea4f 2558 	mov.w	r5, r8, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c322:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c324:	f89a 0001 	ldrb.w	r0, [sl, #1]
					cc = fs->csize - csect;
 800c328:	bf88      	it	hi
 800c32a:	1a8d      	subhi	r5, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c32c:	464a      	mov	r2, r9
 800c32e:	4631      	mov	r1, r6
 800c330:	462b      	mov	r3, r5
 800c332:	f7fe fcd1 	bl	800acd8 <disk_read>
 800c336:	2800      	cmp	r0, #0
 800c338:	f040 8094 	bne.w	800c464 <f_read+0x1ec>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c33c:	f994 2014 	ldrsb.w	r2, [r4, #20]
 800c340:	2a00      	cmp	r2, #0
 800c342:	f2c0 80ad 	blt.w	800c4a0 <f_read+0x228>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c346:	026a      	lsls	r2, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c348:	69a0      	ldr	r0, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 800c34a:	ebb8 0802 	subs.w	r8, r8, r2
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	4416      	add	r6, r2
 800c352:	4410      	add	r0, r2
 800c354:	4413      	add	r3, r2
 800c356:	61a0      	str	r0, [r4, #24]
 800c358:	603b      	str	r3, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 800c35a:	d1be      	bne.n	800c2da <f_read+0x62>
 800c35c:	9d00      	ldr	r5, [sp, #0]
 800c35e:	e79e      	b.n	800c29e <f_read+0x26>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c360:	2800      	cmp	r0, #0
 800c362:	d16b      	bne.n	800c43c <f_read+0x1c4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c364:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c366:	2801      	cmp	r0, #1
 800c368:	d908      	bls.n	800c37c <f_read+0x104>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c36a:	1c43      	adds	r3, r0, #1
 800c36c:	d07a      	beq.n	800c464 <f_read+0x1ec>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c36e:	f8da 3014 	ldr.w	r3, [sl, #20]
				fp->clust = clst;				/* Update current cluster */
 800c372:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 800c374:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c376:	3b02      	subs	r3, #2
 800c378:	4298      	cmp	r0, r3
 800c37a:	d3c1      	bcc.n	800c300 <f_read+0x88>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c37c:	2302      	movs	r3, #2
 800c37e:	461d      	mov	r5, r3
 800c380:	7563      	strb	r3, [r4, #21]
}
 800c382:	4628      	mov	r0, r5
 800c384:	b003      	add	sp, #12
 800c386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c38a:	f104 0130 	add.w	r1, r4, #48	@ 0x30
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c38e:	f5cc 7300 	rsb	r3, ip, #512	@ 0x200
 800c392:	4543      	cmp	r3, r8
 800c394:	bf28      	it	cs
 800c396:	4643      	movcs	r3, r8
 800c398:	461a      	mov	r2, r3
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c39a:	eb01 030c 	add.w	r3, r1, ip
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c39e:	1e50      	subs	r0, r2, #1
 800c3a0:	2805      	cmp	r0, #5
 800c3a2:	d905      	bls.n	800c3b0 <f_read+0x138>
 800c3a4:	f10c 0c01 	add.w	ip, ip, #1
 800c3a8:	4461      	add	r1, ip
 800c3aa:	1a71      	subs	r1, r6, r1
 800c3ac:	2902      	cmp	r1, #2
 800c3ae:	d809      	bhi.n	800c3c4 <f_read+0x14c>
 800c3b0:	1e71      	subs	r1, r6, #1
 800c3b2:	eb03 0c02 	add.w	ip, r3, r2
			*d++ = *s++;
 800c3b6:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
 800c3ba:	4563      	cmp	r3, ip
			*d++ = *s++;
 800c3bc:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 800c3c0:	d1f9      	bne.n	800c3b6 <f_read+0x13e>
 800c3c2:	e7c1      	b.n	800c348 <f_read+0xd0>
 800c3c4:	f022 0e03 	bic.w	lr, r2, #3
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	449e      	add	lr, r3
			*d++ = *s++;
 800c3ce:	f851 5b04 	ldr.w	r5, [r1], #4
 800c3d2:	4571      	cmp	r1, lr
 800c3d4:	f840 5b04 	str.w	r5, [r0], #4
		} while (--cnt);
 800c3d8:	d1f9      	bne.n	800c3ce <f_read+0x156>
 800c3da:	f022 0103 	bic.w	r1, r2, #3
 800c3de:	0795      	lsls	r5, r2, #30
 800c3e0:	f002 0003 	and.w	r0, r2, #3
 800c3e4:	eb06 0c01 	add.w	ip, r6, r1
 800c3e8:	eb03 0e01 	add.w	lr, r3, r1
 800c3ec:	d0ac      	beq.n	800c348 <f_read+0xd0>
			*d++ = *s++;
 800c3ee:	5c5b      	ldrb	r3, [r3, r1]
		} while (--cnt);
 800c3f0:	2801      	cmp	r0, #1
			*d++ = *s++;
 800c3f2:	5473      	strb	r3, [r6, r1]
		} while (--cnt);
 800c3f4:	d0a8      	beq.n	800c348 <f_read+0xd0>
			*d++ = *s++;
 800c3f6:	f89e 3001 	ldrb.w	r3, [lr, #1]
		} while (--cnt);
 800c3fa:	2802      	cmp	r0, #2
			*d++ = *s++;
 800c3fc:	f88c 3001 	strb.w	r3, [ip, #1]
		} while (--cnt);
 800c400:	d0a2      	beq.n	800c348 <f_read+0xd0>
			*d++ = *s++;
 800c402:	f89e 3002 	ldrb.w	r3, [lr, #2]
 800c406:	f88c 3002 	strb.w	r3, [ip, #2]
		} while (--cnt);
 800c40a:	e79d      	b.n	800c348 <f_read+0xd0>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c40c:	6a22      	ldr	r2, [r4, #32]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c40e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c412:	454a      	cmp	r2, r9
 800c414:	d00c      	beq.n	800c430 <f_read+0x1b8>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c416:	f994 3014 	ldrsb.w	r3, [r4, #20]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c41a:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c41e:	2b00      	cmp	r3, #0
 800c420:	db30      	blt.n	800c484 <f_read+0x20c>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c422:	2301      	movs	r3, #1
 800c424:	464a      	mov	r2, r9
 800c426:	9101      	str	r1, [sp, #4]
 800c428:	f7fe fc56 	bl	800acd8 <disk_read>
 800c42c:	9901      	ldr	r1, [sp, #4]
 800c42e:	b9c8      	cbnz	r0, 800c464 <f_read+0x1ec>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c430:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 800c432:	f8c4 9020 	str.w	r9, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c436:	f3c3 0c08 	ubfx	ip, r3, #0, #9
 800c43a:	e7a8      	b.n	800c38e <f_read+0x116>
					if (fp->cltbl) {
 800c43c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	FATFS *fs = fp->obj.fs;
 800c43e:	6821      	ldr	r1, [r4, #0]
					if (fp->cltbl) {
 800c440:	b1c8      	cbz	r0, 800c476 <f_read+0x1fe>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c442:	8949      	ldrh	r1, [r1, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c444:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c446:	fbb3 f3f1 	udiv	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c44a:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c44c:	b929      	cbnz	r1, 800c45a <f_read+0x1e2>
 800c44e:	e795      	b.n	800c37c <f_read+0x104>
		cl -= ncl; tbl++;		/* Next fragment */
 800c450:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c452:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c456:	2900      	cmp	r1, #0
 800c458:	d090      	beq.n	800c37c <f_read+0x104>
		if (cl < ncl) break;	/* In this fragment? */
 800c45a:	428b      	cmp	r3, r1
 800c45c:	d2f8      	bcs.n	800c450 <f_read+0x1d8>
	return cl + *tbl;	/* Return the cluster number */
 800c45e:	6840      	ldr	r0, [r0, #4]
 800c460:	4418      	add	r0, r3
 800c462:	e780      	b.n	800c366 <f_read+0xee>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c464:	465d      	mov	r5, fp
 800c466:	2301      	movs	r3, #1
}
 800c468:	4628      	mov	r0, r5
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c46a:	7563      	strb	r3, [r4, #21]
}
 800c46c:	b003      	add	sp, #12
 800c46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c472:	2507      	movs	r5, #7
 800c474:	e713      	b.n	800c29e <f_read+0x26>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c476:	4608      	mov	r0, r1
 800c478:	69e1      	ldr	r1, [r4, #28]
 800c47a:	9201      	str	r2, [sp, #4]
 800c47c:	f7fe ff70 	bl	800b360 <get_fat.isra.0>
 800c480:	9a01      	ldr	r2, [sp, #4]
 800c482:	e770      	b.n	800c366 <f_read+0xee>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c484:	2301      	movs	r3, #1
 800c486:	9101      	str	r1, [sp, #4]
 800c488:	f7fe fc34 	bl	800acf4 <disk_write>
 800c48c:	2800      	cmp	r0, #0
 800c48e:	d1e9      	bne.n	800c464 <f_read+0x1ec>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c490:	7d23      	ldrb	r3, [r4, #20]
 800c492:	9901      	ldr	r1, [sp, #4]
 800c494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c498:	7523      	strb	r3, [r4, #20]
 800c49a:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800c49e:	e7c0      	b.n	800c422 <f_read+0x1aa>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c4a0:	6a22      	ldr	r2, [r4, #32]
 800c4a2:	eba2 0209 	sub.w	r2, r2, r9
 800c4a6:	42aa      	cmp	r2, r5
 800c4a8:	f4bf af4d 	bcs.w	800c346 <f_read+0xce>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c4ac:	eb06 2242 	add.w	r2, r6, r2, lsl #9
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c4b0:	f104 0131 	add.w	r1, r4, #49	@ 0x31
 800c4b4:	1a51      	subs	r1, r2, r1
 800c4b6:	2902      	cmp	r1, #2
 800c4b8:	d90a      	bls.n	800c4d0 <f_read+0x258>
 800c4ba:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c4be:	f502 7c00 	add.w	ip, r2, #512	@ 0x200
			*d++ = *s++;
 800c4c2:	f851 3b04 	ldr.w	r3, [r1], #4
 800c4c6:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 800c4ca:	4562      	cmp	r2, ip
 800c4cc:	d1f9      	bne.n	800c4c2 <f_read+0x24a>
 800c4ce:	e73a      	b.n	800c346 <f_read+0xce>
 800c4d0:	3a01      	subs	r2, #1
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c4d2:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c4d6:	f504 7c0c 	add.w	ip, r4, #560	@ 0x230
			*d++ = *s++;
 800c4da:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 800c4de:	458c      	cmp	ip, r1
			*d++ = *s++;
 800c4e0:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 800c4e4:	d1f9      	bne.n	800c4da <f_read+0x262>
 800c4e6:	e72e      	b.n	800c346 <f_read+0xce>

0800c4e8 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c4e8:	b158      	cbz	r0, 800c502 <f_close+0x1a>
 800c4ea:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c4ec:	b570      	push	{r4, r5, r6, lr}
 800c4ee:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c4f0:	b12b      	cbz	r3, 800c4fe <f_close+0x16>
 800c4f2:	781a      	ldrb	r2, [r3, #0]
 800c4f4:	b11a      	cbz	r2, 800c4fe <f_close+0x16>
 800c4f6:	8881      	ldrh	r1, [r0, #4]
 800c4f8:	88da      	ldrh	r2, [r3, #6]
 800c4fa:	4291      	cmp	r1, r2
 800c4fc:	d003      	beq.n	800c506 <f_close+0x1e>
{
 800c4fe:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800c500:	bd70      	pop	{r4, r5, r6, pc}
{
 800c502:	2009      	movs	r0, #9
}
 800c504:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c506:	7858      	ldrb	r0, [r3, #1]
 800c508:	f7fe fbc6 	bl	800ac98 <disk_status>
 800c50c:	07c1      	lsls	r1, r0, #31
 800c50e:	d4f6      	bmi.n	800c4fe <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c510:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c512:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c514:	065a      	lsls	r2, r3, #25
 800c516:	d52e      	bpl.n	800c576 <f_close+0x8e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c518:	061b      	lsls	r3, r3, #24
 800c51a:	d451      	bmi.n	800c5c0 <f_close+0xd8>
			tm = GET_FATTIME();				/* Modified time */
 800c51c:	f7fe fad2 	bl	800aac4 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 800c520:	6a61      	ldr	r1, [r4, #36]	@ 0x24
			tm = GET_FATTIME();				/* Modified time */
 800c522:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
 800c524:	4628      	mov	r0, r5
 800c526:	f7fe fcf3 	bl	800af10 <move_window>
				if (res == FR_OK) {
 800c52a:	2800      	cmp	r0, #0
 800c52c:	d1e8      	bne.n	800c500 <f_close+0x18>
					dir = fp->dir_ptr;
 800c52e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c530:	7ada      	ldrb	r2, [r3, #11]
 800c532:	f042 0220 	orr.w	r2, r2, #32
 800c536:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c538:	68a2      	ldr	r2, [r4, #8]
 800c53a:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c53c:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800c540:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 800c542:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800c544:	7809      	ldrb	r1, [r1, #0]
 800c546:	2903      	cmp	r1, #3
 800c548:	d103      	bne.n	800c552 <f_close+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c54a:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800c54c:	751a      	strb	r2, [r3, #20]
 800c54e:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800c550:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 800c552:	68e1      	ldr	r1, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800c554:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800c556:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c55a:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800c55c:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800c55e:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
 800c560:	2301      	movs	r3, #1
 800c562:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c564:	f7fe fc76 	bl	800ae54 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c568:	7d23      	ldrb	r3, [r4, #20]
 800c56a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c56e:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 800c570:	2800      	cmp	r0, #0
 800c572:	d1c5      	bne.n	800c500 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c574:	6825      	ldr	r5, [r4, #0]
 800c576:	2d00      	cmp	r5, #0
 800c578:	d0c1      	beq.n	800c4fe <f_close+0x16>
 800c57a:	782b      	ldrb	r3, [r5, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d0be      	beq.n	800c4fe <f_close+0x16>
 800c580:	88a2      	ldrh	r2, [r4, #4]
 800c582:	88eb      	ldrh	r3, [r5, #6]
 800c584:	429a      	cmp	r2, r3
 800c586:	d1ba      	bne.n	800c4fe <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c588:	7868      	ldrb	r0, [r5, #1]
 800c58a:	f7fe fb85 	bl	800ac98 <disk_status>
 800c58e:	f010 0001 	ands.w	r0, r0, #1
 800c592:	d1b4      	bne.n	800c4fe <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c594:	6923      	ldr	r3, [r4, #16]
 800c596:	3b01      	subs	r3, #1
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d81e      	bhi.n	800c5da <f_close+0xf2>
		n = Files[i].ctr;
 800c59c:	4912      	ldr	r1, [pc, #72]	@ (800c5e8 <f_close+0x100>)
 800c59e:	011d      	lsls	r5, r3, #4
 800c5a0:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800c5a4:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c5a6:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800c5aa:	d01a      	beq.n	800c5e2 <f_close+0xfa>
		if (n > 0) n--;				/* Decrement read mode open count */
 800c5ac:	b11a      	cbz	r2, 800c5b6 <f_close+0xce>
 800c5ae:	3a01      	subs	r2, #1
 800c5b0:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 800c5b2:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c5b4:	b90a      	cbnz	r2, 800c5ba <f_close+0xd2>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	514b      	str	r3, [r1, r5]
				fp->obj.fs = 0;			/* Invalidate file object */
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	6023      	str	r3, [r4, #0]
}
 800c5be:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	6a22      	ldr	r2, [r4, #32]
 800c5c4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c5c8:	7868      	ldrb	r0, [r5, #1]
 800c5ca:	f7fe fb93 	bl	800acf4 <disk_write>
 800c5ce:	b930      	cbnz	r0, 800c5de <f_close+0xf6>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c5d0:	7d23      	ldrb	r3, [r4, #20]
 800c5d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5d6:	7523      	strb	r3, [r4, #20]
 800c5d8:	e7a0      	b.n	800c51c <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c5da:	2002      	movs	r0, #2
}
 800c5dc:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c5de:	2001      	movs	r0, #1
}
 800c5e0:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 800c5e2:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c5e4:	e7e7      	b.n	800c5b6 <f_close+0xce>
 800c5e6:	bf00      	nop
 800c5e8:	240bc090 	.word	0x240bc090

0800c5ec <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f0:	b085      	sub	sp, #20
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c5f2:	b148      	cbz	r0, 800c608 <f_lseek+0x1c>
 800c5f4:	6803      	ldr	r3, [r0, #0]
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	b133      	cbz	r3, 800c608 <f_lseek+0x1c>
 800c5fa:	781a      	ldrb	r2, [r3, #0]
 800c5fc:	b122      	cbz	r2, 800c608 <f_lseek+0x1c>
 800c5fe:	460e      	mov	r6, r1
 800c600:	88da      	ldrh	r2, [r3, #6]
 800c602:	8881      	ldrh	r1, [r0, #4]
 800c604:	4291      	cmp	r1, r2
 800c606:	d004      	beq.n	800c612 <f_lseek+0x26>
	FRESULT res = FR_INVALID_OBJECT;
 800c608:	2509      	movs	r5, #9
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 800c60a:	4628      	mov	r0, r5
 800c60c:	b005      	add	sp, #20
 800c60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c612:	7858      	ldrb	r0, [r3, #1]
 800c614:	f7fe fb40 	bl	800ac98 <disk_status>
 800c618:	07c3      	lsls	r3, r0, #31
 800c61a:	d4f5      	bmi.n	800c608 <f_lseek+0x1c>
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c61c:	7d65      	ldrb	r5, [r4, #21]
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c61e:	2d00      	cmp	r5, #0
 800c620:	d1f3      	bne.n	800c60a <f_lseek+0x1e>
	if (fp->cltbl) {	/* Fast seek */
 800c622:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c624:	f8d4 9000 	ldr.w	r9, [r4]
	if (fp->cltbl) {	/* Fast seek */
 800c628:	b1f8      	cbz	r0, 800c66a <f_lseek+0x7e>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c62a:	1c77      	adds	r7, r6, #1
 800c62c:	d05d      	beq.n	800c6ea <f_lseek+0xfe>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c62e:	68e3      	ldr	r3, [r4, #12]
 800c630:	429e      	cmp	r6, r3
 800c632:	bf28      	it	cs
 800c634:	461e      	movcs	r6, r3
			fp->fptr = ofs;				/* Set file pointer */
 800c636:	61a6      	str	r6, [r4, #24]
			if (ofs) {
 800c638:	2e00      	cmp	r6, #0
 800c63a:	d0e6      	beq.n	800c60a <f_lseek+0x1e>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c63c:	f106 3cff 	add.w	ip, r6, #4294967295
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c640:	f8b9 700a 	ldrh.w	r7, [r9, #10]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c644:	6843      	ldr	r3, [r0, #4]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c646:	1d02      	adds	r2, r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c648:	ea4f 2c5c 	mov.w	ip, ip, lsr #9
 800c64c:	fbbc f1f7 	udiv	r1, ip, r7
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c650:	b92b      	cbnz	r3, 800c65e <f_lseek+0x72>
 800c652:	e05f      	b.n	800c714 <f_lseek+0x128>
		cl -= ncl; tbl++;		/* Next fragment */
 800c654:	1ac9      	subs	r1, r1, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c656:	f852 3f08 	ldr.w	r3, [r2, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d05a      	beq.n	800c714 <f_lseek+0x128>
		if (cl < ncl) break;	/* In this fragment? */
 800c65e:	428b      	cmp	r3, r1
 800c660:	d9f8      	bls.n	800c654 <f_lseek+0x68>
	return cl + *tbl;	/* Return the cluster number */
 800c662:	6853      	ldr	r3, [r2, #4]
 800c664:	440b      	add	r3, r1
	clst -= 2;
 800c666:	1e99      	subs	r1, r3, #2
	return cl + *tbl;	/* Return the cluster number */
 800c668:	e056      	b.n	800c718 <f_lseek+0x12c>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c66a:	68e2      	ldr	r2, [r4, #12]
		ifptr = fp->fptr;
 800c66c:	69a3      	ldr	r3, [r4, #24]
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c66e:	42b2      	cmp	r2, r6
 800c670:	d204      	bcs.n	800c67c <f_lseek+0x90>
 800c672:	7d21      	ldrb	r1, [r4, #20]
 800c674:	0788      	lsls	r0, r1, #30
 800c676:	f100 809b 	bmi.w	800c7b0 <f_lseek+0x1c4>
 800c67a:	4616      	mov	r6, r2
		fp->fptr = nsect = 0;
 800c67c:	2200      	movs	r2, #0
 800c67e:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 800c680:	2e00      	cmp	r6, #0
 800c682:	d0c2      	beq.n	800c60a <f_lseek+0x1e>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c684:	f8b9 800a 	ldrh.w	r8, [r9, #10]
 800c688:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d16e      	bne.n	800c76e <f_lseek+0x182>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c690:	68a7      	ldr	r7, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c692:	2f00      	cmp	r7, #0
 800c694:	f000 811e 	beq.w	800c8d4 <f_lseek+0x2e8>
				fp->clust = clst;
 800c698:	2300      	movs	r3, #0
 800c69a:	61e7      	str	r7, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c69c:	45b0      	cmp	r8, r6
 800c69e:	f080 8155 	bcs.w	800c94c <f_lseek+0x360>
 800c6a2:	4639      	mov	r1, r7
 800c6a4:	e014      	b.n	800c6d0 <f_lseek+0xe4>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c6a6:	f7fe feb1 	bl	800b40c <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c6aa:	4601      	mov	r1, r0
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	f000 8148 	beq.w	800c942 <f_lseek+0x356>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c6b2:	1c4b      	adds	r3, r1, #1
 800c6b4:	f000 80c7 	beq.w	800c846 <f_lseek+0x25a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c6b8:	2901      	cmp	r1, #1
 800c6ba:	d91d      	bls.n	800c6f8 <f_lseek+0x10c>
 800c6bc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c6c0:	428b      	cmp	r3, r1
 800c6c2:	d919      	bls.n	800c6f8 <f_lseek+0x10c>
				fp->fptr += ofs;
 800c6c4:	69a2      	ldr	r2, [r4, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 800c6c6:	45b0      	cmp	r8, r6
					fp->clust = clst;
 800c6c8:	61e1      	str	r1, [r4, #28]
				fp->fptr += ofs;
 800c6ca:	4613      	mov	r3, r2
				while (ofs > bcs) {						/* Cluster following loop */
 800c6cc:	f080 8120 	bcs.w	800c910 <f_lseek+0x324>
					ofs -= bcs; fp->fptr += bcs;
 800c6d0:	4443      	add	r3, r8
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c6d2:	4620      	mov	r0, r4
					ofs -= bcs; fp->fptr += bcs;
 800c6d4:	eba6 0608 	sub.w	r6, r6, r8
 800c6d8:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c6da:	7d23      	ldrb	r3, [r4, #20]
 800c6dc:	079a      	lsls	r2, r3, #30
 800c6de:	d4e2      	bmi.n	800c6a6 <f_lseek+0xba>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c6e0:	6820      	ldr	r0, [r4, #0]
 800c6e2:	f7fe fe3d 	bl	800b360 <get_fat.isra.0>
 800c6e6:	4601      	mov	r1, r0
 800c6e8:	e7e3      	b.n	800c6b2 <f_lseek+0xc6>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c6ea:	4680      	mov	r8, r0
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c6ec:	68a2      	ldr	r2, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c6ee:	f858 1b04 	ldr.w	r1, [r8], #4
			if (cl) {
 800c6f2:	b12a      	cbz	r2, 800c700 <f_lseek+0x114>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c6f4:	2a01      	cmp	r2, #1
 800c6f6:	d15f      	bne.n	800c7b8 <f_lseek+0x1cc>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c6f8:	2302      	movs	r3, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c6fa:	461d      	mov	r5, r3
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c6fc:	7563      	strb	r3, [r4, #21]
 800c6fe:	e784      	b.n	800c60a <f_lseek+0x1e>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c700:	f04f 0a02 	mov.w	sl, #2
			if (ulen <= tlen) {
 800c704:	458a      	cmp	sl, r1
			*fp->cltbl = ulen;	/* Number of items used */
 800c706:	f8c0 a000 	str.w	sl, [r0]
			if (ulen <= tlen) {
 800c70a:	d853      	bhi.n	800c7b4 <f_lseek+0x1c8>
				*tbl = 0;		/* Terminate table */
 800c70c:	2300      	movs	r3, #0
 800c70e:	f8c8 3000 	str.w	r3, [r8]
 800c712:	e77a      	b.n	800c60a <f_lseek+0x1e>
 800c714:	f06f 0101 	mvn.w	r1, #1
				fp->clust = clmt_clust(fp, ofs - 1);
 800c718:	61e3      	str	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c71a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c71e:	3b02      	subs	r3, #2
 800c720:	428b      	cmp	r3, r1
 800c722:	d9e9      	bls.n	800c6f8 <f_lseek+0x10c>
	return clst * fs->csize + fs->database;
 800c724:	f8d9 2028 	ldr.w	r2, [r9, #40]	@ 0x28
 800c728:	fb01 2207 	mla	r2, r1, r7, r2
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c72c:	2a00      	cmp	r2, #0
 800c72e:	d0e3      	beq.n	800c6f8 <f_lseek+0x10c>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c730:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800c734:	2e00      	cmp	r6, #0
 800c736:	f43f af68 	beq.w	800c60a <f_lseek+0x1e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c73a:	3f01      	subs	r7, #1
 800c73c:	ea07 070c 	and.w	r7, r7, ip
 800c740:	4417      	add	r7, r2
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c742:	6a22      	ldr	r2, [r4, #32]
 800c744:	42ba      	cmp	r2, r7
 800c746:	f43f af60 	beq.w	800c60a <f_lseek+0x1e>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c74a:	f994 3014 	ldrsb.w	r3, [r4, #20]
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c74e:	f104 0630 	add.w	r6, r4, #48	@ 0x30
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c752:	f899 0001 	ldrb.w	r0, [r9, #1]
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c756:	2b00      	cmp	r3, #0
 800c758:	f2c0 80af 	blt.w	800c8ba <f_lseek+0x2ce>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c75c:	4631      	mov	r1, r6
 800c75e:	2301      	movs	r3, #1
 800c760:	463a      	mov	r2, r7
 800c762:	f7fe fab9 	bl	800acd8 <disk_read>
 800c766:	2800      	cmp	r0, #0
 800c768:	d16d      	bne.n	800c846 <f_lseek+0x25a>
			fp->sect = nsect;
 800c76a:	6227      	str	r7, [r4, #32]
 800c76c:	e74d      	b.n	800c60a <f_lseek+0x1e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c76e:	3b01      	subs	r3, #1
 800c770:	1e72      	subs	r2, r6, #1
 800c772:	fbb3 f1f8 	udiv	r1, r3, r8
 800c776:	fbb2 f2f8 	udiv	r2, r2, r8
			if (ifptr > 0 &&
 800c77a:	428a      	cmp	r2, r1
 800c77c:	d388      	bcc.n	800c690 <f_lseek+0xa4>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c77e:	f1c8 0200 	rsb	r2, r8, #0
				clst = fp->clust;
 800c782:	69e7      	ldr	r7, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c784:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 800c786:	1af6      	subs	r6, r6, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c788:	61a3      	str	r3, [r4, #24]
			if (clst != 0) {
 800c78a:	2f00      	cmp	r7, #0
 800c78c:	d186      	bne.n	800c69c <f_lseek+0xb0>
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c78e:	68e2      	ldr	r2, [r4, #12]
 800c790:	429a      	cmp	r2, r3
 800c792:	d204      	bcs.n	800c79e <f_lseek+0x1b2>
			fp->flag |= FA_MODIFIED;
 800c794:	7d22      	ldrb	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
 800c796:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 800c798:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c79c:	7522      	strb	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c79e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	f43f af31 	beq.w	800c60a <f_lseek+0x1e>
 800c7a8:	6a22      	ldr	r2, [r4, #32]
 800c7aa:	42ba      	cmp	r2, r7
 800c7ac:	d1cd      	bne.n	800c74a <f_lseek+0x15e>
 800c7ae:	e72c      	b.n	800c60a <f_lseek+0x1e>
		fp->fptr = nsect = 0;
 800c7b0:	61a5      	str	r5, [r4, #24]
		if (ofs) {
 800c7b2:	e767      	b.n	800c684 <f_lseek+0x98>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c7b4:	2511      	movs	r5, #17
 800c7b6:	e728      	b.n	800c60a <f_lseek+0x1e>
 800c7b8:	464f      	mov	r7, r9
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c7ba:	f04f 0a02 	mov.w	sl, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c7be:	46c3      	mov	fp, r8
 800c7c0:	4616      	mov	r6, r2
 800c7c2:	9102      	str	r1, [sp, #8]
 800c7c4:	9503      	str	r5, [sp, #12]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c7c6:	4635      	mov	r5, r6
						pcl = cl; ncl++;
 800c7c8:	f04f 0801 	mov.w	r8, #1
 800c7cc:	9600      	str	r6, [sp, #0]
 800c7ce:	e033      	b.n	800c838 <f_lseek+0x24c>
		switch (fs->fs_type) {
 800c7d0:	783b      	ldrb	r3, [r7, #0]
 800c7d2:	2b02      	cmp	r3, #2
 800c7d4:	d04e      	beq.n	800c874 <f_lseek+0x288>
 800c7d6:	2b03      	cmp	r3, #3
 800c7d8:	d039      	beq.n	800c84e <f_lseek+0x262>
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d18c      	bne.n	800c6f8 <f_lseek+0x10c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7de:	6a39      	ldr	r1, [r7, #32]
			bc = (UINT)clst; bc += bc / 2;
 800c7e0:	eb05 0655 	add.w	r6, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7e4:	4638      	mov	r0, r7
 800c7e6:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800c7ea:	f7fe fb91 	bl	800af10 <move_window>
 800c7ee:	bb50      	cbnz	r0, 800c846 <f_lseek+0x25a>
			wc = fs->win[bc++ % SS(fs)];
 800c7f0:	f3c6 0208 	ubfx	r2, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7f4:	6a39      	ldr	r1, [r7, #32]
			wc = fs->win[bc++ % SS(fs)];
 800c7f6:	3601      	adds	r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7f8:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 800c7fa:	443a      	add	r2, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7fc:	eb01 2156 	add.w	r1, r1, r6, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800c800:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 800c804:	9301      	str	r3, [sp, #4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c806:	f7fe fb83 	bl	800af10 <move_window>
 800c80a:	b9e0      	cbnz	r0, 800c846 <f_lseek+0x25a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c80c:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800c810:	9a01      	ldr	r2, [sp, #4]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c812:	07ee      	lsls	r6, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800c814:	443b      	add	r3, r7
 800c816:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c81a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c81e:	d570      	bpl.n	800c902 <f_lseek+0x316>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c820:	2a1f      	cmp	r2, #31
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c822:	ea4f 1312 	mov.w	r3, r2, lsr #4
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c826:	f67f af67 	bls.w	800c6f8 <f_lseek+0x10c>
					} while (cl == pcl + 1);
 800c82a:	3501      	adds	r5, #1
 800c82c:	429d      	cmp	r5, r3
 800c82e:	d131      	bne.n	800c894 <f_lseek+0x2a8>
						pcl = cl; ncl++;
 800c830:	f108 0801 	add.w	r8, r8, #1
 800c834:	461d      	mov	r5, r3
 800c836:	6827      	ldr	r7, [r4, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	42ab      	cmp	r3, r5
 800c83c:	d8c8      	bhi.n	800c7d0 <f_lseek+0x1e4>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c83e:	2302      	movs	r3, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c840:	461d      	mov	r5, r3
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c842:	7563      	strb	r3, [r4, #21]
 800c844:	e6e1      	b.n	800c60a <f_lseek+0x1e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c846:	2301      	movs	r3, #1
 800c848:	461d      	mov	r5, r3
 800c84a:	7563      	strb	r3, [r4, #21]
 800c84c:	e6dd      	b.n	800c60a <f_lseek+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c84e:	6a39      	ldr	r1, [r7, #32]
 800c850:	4638      	mov	r0, r7
 800c852:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800c856:	f7fe fb5b 	bl	800af10 <move_window>
 800c85a:	2800      	cmp	r0, #0
 800c85c:	d1f3      	bne.n	800c846 <f_lseek+0x25a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c85e:	00ab      	lsls	r3, r5, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c860:	493e      	ldr	r1, [pc, #248]	@ (800c95c <f_lseek+0x370>)
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c862:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800c866:	443b      	add	r3, r7
 800c868:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c86a:	420a      	tst	r2, r1
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c86c:	f022 4370 	bic.w	r3, r2, #4026531840	@ 0xf0000000
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c870:	d1db      	bne.n	800c82a <f_lseek+0x23e>
 800c872:	e741      	b.n	800c6f8 <f_lseek+0x10c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c874:	6a39      	ldr	r1, [r7, #32]
 800c876:	4638      	mov	r0, r7
 800c878:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800c87c:	f7fe fb48 	bl	800af10 <move_window>
 800c880:	2800      	cmp	r0, #0
 800c882:	d1e0      	bne.n	800c846 <f_lseek+0x25a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c884:	006b      	lsls	r3, r5, #1
 800c886:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c88a:	443b      	add	r3, r7
 800c88c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d8cb      	bhi.n	800c82a <f_lseek+0x23e>
 800c892:	e731      	b.n	800c6f8 <f_lseek+0x10c>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c894:	f10a 0a02 	add.w	sl, sl, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c898:	9a02      	ldr	r2, [sp, #8]
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c89a:	9e00      	ldr	r6, [sp, #0]
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c89c:	4552      	cmp	r2, sl
 800c89e:	d327      	bcc.n	800c8f0 <f_lseek+0x304>
						*tbl++ = ncl; *tbl++ = tcl;
 800c8a0:	465a      	mov	r2, fp
 800c8a2:	f842 8b08 	str.w	r8, [r2], #8
 800c8a6:	f8cb 6004 	str.w	r6, [fp, #4]
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c8aa:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800c8ae:	4299      	cmp	r1, r3
 800c8b0:	d950      	bls.n	800c954 <f_lseek+0x368>
						*tbl++ = ncl; *tbl++ = tcl;
 800c8b2:	4693      	mov	fp, r2
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c8b4:	461e      	mov	r6, r3
 800c8b6:	6827      	ldr	r7, [r4, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c8b8:	e785      	b.n	800c7c6 <f_lseek+0x1da>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	4631      	mov	r1, r6
 800c8be:	f7fe fa19 	bl	800acf4 <disk_write>
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	d1bf      	bne.n	800c846 <f_lseek+0x25a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c8c6:	7d23      	ldrb	r3, [r4, #20]
 800c8c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8cc:	7523      	strb	r3, [r4, #20]
 800c8ce:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c8d2:	e743      	b.n	800c75c <f_lseek+0x170>
					clst = create_chain(&fp->obj, 0);
 800c8d4:	4639      	mov	r1, r7
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f7fe fd98 	bl	800b40c <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c8dc:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 800c8de:	4607      	mov	r7, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c8e0:	f43f af0a 	beq.w	800c6f8 <f_lseek+0x10c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c8e4:	1c41      	adds	r1, r0, #1
 800c8e6:	d0ae      	beq.n	800c846 <f_lseek+0x25a>
				fp->fptr += ofs;
 800c8e8:	69a3      	ldr	r3, [r4, #24]
					fp->obj.sclust = clst;
 800c8ea:	60a0      	str	r0, [r4, #8]
				fp->clust = clst;
 800c8ec:	61e0      	str	r0, [r4, #28]
 800c8ee:	e74c      	b.n	800c78a <f_lseek+0x19e>
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c8f0:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d8dd      	bhi.n	800c8b4 <f_lseek+0x2c8>
 800c8f8:	46d8      	mov	r8, fp
 800c8fa:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
			*fp->cltbl = ulen;	/* Number of items used */
 800c8fe:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800c900:	e700      	b.n	800c704 <f_lseek+0x118>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c902:	f640 71fe 	movw	r1, #4094	@ 0xffe
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c906:	f3c2 030b 	ubfx	r3, r2, #0, #12
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c90a:	420a      	tst	r2, r1
 800c90c:	d18d      	bne.n	800c82a <f_lseek+0x23e>
 800c90e:	e6f3      	b.n	800c6f8 <f_lseek+0x10c>
				if (ofs % SS(fs)) {
 800c910:	460f      	mov	r7, r1
 800c912:	f3c6 0108 	ubfx	r1, r6, #0, #9
				fp->fptr += ofs;
 800c916:	18b3      	adds	r3, r6, r2
 800c918:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 800c91a:	b1a9      	cbz	r1, 800c948 <f_lseek+0x35c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c91c:	f8d9 2014 	ldr.w	r2, [r9, #20]
	clst -= 2;
 800c920:	1eb9      	subs	r1, r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c922:	3a02      	subs	r2, #2
 800c924:	4291      	cmp	r1, r2
 800c926:	f4bf aee7 	bcs.w	800c6f8 <f_lseek+0x10c>
	return clst * fs->csize + fs->database;
 800c92a:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 800c92e:	f8d9 7028 	ldr.w	r7, [r9, #40]	@ 0x28
 800c932:	fb01 7702 	mla	r7, r1, r2, r7
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c936:	2f00      	cmp	r7, #0
 800c938:	f43f aede 	beq.w	800c6f8 <f_lseek+0x10c>
					nsect += (DWORD)(ofs / SS(fs));
 800c93c:	eb07 2756 	add.w	r7, r7, r6, lsr #9
 800c940:	e725      	b.n	800c78e <f_lseek+0x1a2>
 800c942:	4607      	mov	r7, r0
				fp->fptr += ofs;
 800c944:	69a3      	ldr	r3, [r4, #24]
				if (ofs % SS(fs)) {
 800c946:	e722      	b.n	800c78e <f_lseek+0x1a2>
		fp->fptr = nsect = 0;
 800c948:	460f      	mov	r7, r1
 800c94a:	e720      	b.n	800c78e <f_lseek+0x1a2>
				if (ofs % SS(fs)) {
 800c94c:	f3c6 0108 	ubfx	r1, r6, #0, #9
 800c950:	69a2      	ldr	r2, [r4, #24]
 800c952:	e7e0      	b.n	800c916 <f_lseek+0x32a>
						*tbl++ = ncl; *tbl++ = tcl;
 800c954:	9902      	ldr	r1, [sp, #8]
 800c956:	4690      	mov	r8, r2
 800c958:	9d03      	ldr	r5, [sp, #12]
 800c95a:	e7d0      	b.n	800c8fe <f_lseek+0x312>
 800c95c:	0ffffffe 	.word	0x0ffffffe

0800c960 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800c960:	4b10      	ldr	r3, [pc, #64]	@ (800c9a4 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c962:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800c964:	7a5c      	ldrb	r4, [r3, #9]
 800c966:	b9cc      	cbnz	r4, 800c99c <FATFS_LinkDriver+0x3c>
 800c968:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 800c96a:	f004 00ff 	and.w	r0, r4, #255	@ 0xff
 800c96e:	7a5c      	ldrb	r4, [r3, #9]
 800c970:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800c972:	7a5c      	ldrb	r4, [r3, #9]
 800c974:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c978:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800c97a:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 800c97c:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800c97e:	441c      	add	r4, r3
 800c980:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 800c982:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 800c984:	3230      	adds	r2, #48	@ 0x30
    DiskNum = disk.nbr++;
 800c986:	b2e4      	uxtb	r4, r4
 800c988:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 800c98a:	243a      	movs	r4, #58	@ 0x3a
    path[2] = '/';
 800c98c:	232f      	movs	r3, #47	@ 0x2f
    path[0] = DiskNum + '0';
 800c98e:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800c990:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 800c992:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800c994:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 800c998:	708b      	strb	r3, [r1, #2]
}
 800c99a:	4770      	bx	lr
  uint8_t ret = 1;
 800c99c:	2001      	movs	r0, #1
}
 800c99e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9a2:	4770      	bx	lr
 800c9a4:	240bc0b8 	.word	0x240bc0b8

0800c9a8 <sniprintf>:
 800c9a8:	b40c      	push	{r2, r3}
 800c9aa:	b530      	push	{r4, r5, lr}
 800c9ac:	4b17      	ldr	r3, [pc, #92]	@ (800ca0c <sniprintf+0x64>)
 800c9ae:	1e0c      	subs	r4, r1, #0
 800c9b0:	681d      	ldr	r5, [r3, #0]
 800c9b2:	b09d      	sub	sp, #116	@ 0x74
 800c9b4:	da08      	bge.n	800c9c8 <sniprintf+0x20>
 800c9b6:	238b      	movs	r3, #139	@ 0x8b
 800c9b8:	602b      	str	r3, [r5, #0]
 800c9ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c9be:	b01d      	add	sp, #116	@ 0x74
 800c9c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9c4:	b002      	add	sp, #8
 800c9c6:	4770      	bx	lr
 800c9c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c9cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c9d0:	bf14      	ite	ne
 800c9d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c9d6:	4623      	moveq	r3, r4
 800c9d8:	9304      	str	r3, [sp, #16]
 800c9da:	9307      	str	r3, [sp, #28]
 800c9dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c9e0:	9002      	str	r0, [sp, #8]
 800c9e2:	9006      	str	r0, [sp, #24]
 800c9e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c9e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c9ea:	ab21      	add	r3, sp, #132	@ 0x84
 800c9ec:	a902      	add	r1, sp, #8
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	9301      	str	r3, [sp, #4]
 800c9f2:	f000 f995 	bl	800cd20 <_svfiprintf_r>
 800c9f6:	1c43      	adds	r3, r0, #1
 800c9f8:	bfbc      	itt	lt
 800c9fa:	238b      	movlt	r3, #139	@ 0x8b
 800c9fc:	602b      	strlt	r3, [r5, #0]
 800c9fe:	2c00      	cmp	r4, #0
 800ca00:	d0dd      	beq.n	800c9be <sniprintf+0x16>
 800ca02:	9b02      	ldr	r3, [sp, #8]
 800ca04:	2200      	movs	r2, #0
 800ca06:	701a      	strb	r2, [r3, #0]
 800ca08:	e7d9      	b.n	800c9be <sniprintf+0x16>
 800ca0a:	bf00      	nop
 800ca0c:	2400001c 	.word	0x2400001c

0800ca10 <memset>:
 800ca10:	4402      	add	r2, r0
 800ca12:	4603      	mov	r3, r0
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d100      	bne.n	800ca1a <memset+0xa>
 800ca18:	4770      	bx	lr
 800ca1a:	f803 1b01 	strb.w	r1, [r3], #1
 800ca1e:	e7f9      	b.n	800ca14 <memset+0x4>

0800ca20 <__errno>:
 800ca20:	4b01      	ldr	r3, [pc, #4]	@ (800ca28 <__errno+0x8>)
 800ca22:	6818      	ldr	r0, [r3, #0]
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	2400001c 	.word	0x2400001c

0800ca2c <__libc_init_array>:
 800ca2c:	b570      	push	{r4, r5, r6, lr}
 800ca2e:	4d0d      	ldr	r5, [pc, #52]	@ (800ca64 <__libc_init_array+0x38>)
 800ca30:	4c0d      	ldr	r4, [pc, #52]	@ (800ca68 <__libc_init_array+0x3c>)
 800ca32:	1b64      	subs	r4, r4, r5
 800ca34:	10a4      	asrs	r4, r4, #2
 800ca36:	2600      	movs	r6, #0
 800ca38:	42a6      	cmp	r6, r4
 800ca3a:	d109      	bne.n	800ca50 <__libc_init_array+0x24>
 800ca3c:	4d0b      	ldr	r5, [pc, #44]	@ (800ca6c <__libc_init_array+0x40>)
 800ca3e:	4c0c      	ldr	r4, [pc, #48]	@ (800ca70 <__libc_init_array+0x44>)
 800ca40:	f000 fc66 	bl	800d310 <_init>
 800ca44:	1b64      	subs	r4, r4, r5
 800ca46:	10a4      	asrs	r4, r4, #2
 800ca48:	2600      	movs	r6, #0
 800ca4a:	42a6      	cmp	r6, r4
 800ca4c:	d105      	bne.n	800ca5a <__libc_init_array+0x2e>
 800ca4e:	bd70      	pop	{r4, r5, r6, pc}
 800ca50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca54:	4798      	blx	r3
 800ca56:	3601      	adds	r6, #1
 800ca58:	e7ee      	b.n	800ca38 <__libc_init_array+0xc>
 800ca5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca5e:	4798      	blx	r3
 800ca60:	3601      	adds	r6, #1
 800ca62:	e7f2      	b.n	800ca4a <__libc_init_array+0x1e>
 800ca64:	0800d6a8 	.word	0x0800d6a8
 800ca68:	0800d6a8 	.word	0x0800d6a8
 800ca6c:	0800d6a8 	.word	0x0800d6a8
 800ca70:	0800d6ac 	.word	0x0800d6ac

0800ca74 <__retarget_lock_acquire_recursive>:
 800ca74:	4770      	bx	lr

0800ca76 <__retarget_lock_release_recursive>:
 800ca76:	4770      	bx	lr

0800ca78 <_free_r>:
 800ca78:	b538      	push	{r3, r4, r5, lr}
 800ca7a:	4605      	mov	r5, r0
 800ca7c:	2900      	cmp	r1, #0
 800ca7e:	d041      	beq.n	800cb04 <_free_r+0x8c>
 800ca80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca84:	1f0c      	subs	r4, r1, #4
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	bfb8      	it	lt
 800ca8a:	18e4      	addlt	r4, r4, r3
 800ca8c:	f000 f8e0 	bl	800cc50 <__malloc_lock>
 800ca90:	4a1d      	ldr	r2, [pc, #116]	@ (800cb08 <_free_r+0x90>)
 800ca92:	6813      	ldr	r3, [r2, #0]
 800ca94:	b933      	cbnz	r3, 800caa4 <_free_r+0x2c>
 800ca96:	6063      	str	r3, [r4, #4]
 800ca98:	6014      	str	r4, [r2, #0]
 800ca9a:	4628      	mov	r0, r5
 800ca9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caa0:	f000 b8dc 	b.w	800cc5c <__malloc_unlock>
 800caa4:	42a3      	cmp	r3, r4
 800caa6:	d908      	bls.n	800caba <_free_r+0x42>
 800caa8:	6820      	ldr	r0, [r4, #0]
 800caaa:	1821      	adds	r1, r4, r0
 800caac:	428b      	cmp	r3, r1
 800caae:	bf01      	itttt	eq
 800cab0:	6819      	ldreq	r1, [r3, #0]
 800cab2:	685b      	ldreq	r3, [r3, #4]
 800cab4:	1809      	addeq	r1, r1, r0
 800cab6:	6021      	streq	r1, [r4, #0]
 800cab8:	e7ed      	b.n	800ca96 <_free_r+0x1e>
 800caba:	461a      	mov	r2, r3
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	b10b      	cbz	r3, 800cac4 <_free_r+0x4c>
 800cac0:	42a3      	cmp	r3, r4
 800cac2:	d9fa      	bls.n	800caba <_free_r+0x42>
 800cac4:	6811      	ldr	r1, [r2, #0]
 800cac6:	1850      	adds	r0, r2, r1
 800cac8:	42a0      	cmp	r0, r4
 800caca:	d10b      	bne.n	800cae4 <_free_r+0x6c>
 800cacc:	6820      	ldr	r0, [r4, #0]
 800cace:	4401      	add	r1, r0
 800cad0:	1850      	adds	r0, r2, r1
 800cad2:	4283      	cmp	r3, r0
 800cad4:	6011      	str	r1, [r2, #0]
 800cad6:	d1e0      	bne.n	800ca9a <_free_r+0x22>
 800cad8:	6818      	ldr	r0, [r3, #0]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	6053      	str	r3, [r2, #4]
 800cade:	4408      	add	r0, r1
 800cae0:	6010      	str	r0, [r2, #0]
 800cae2:	e7da      	b.n	800ca9a <_free_r+0x22>
 800cae4:	d902      	bls.n	800caec <_free_r+0x74>
 800cae6:	230c      	movs	r3, #12
 800cae8:	602b      	str	r3, [r5, #0]
 800caea:	e7d6      	b.n	800ca9a <_free_r+0x22>
 800caec:	6820      	ldr	r0, [r4, #0]
 800caee:	1821      	adds	r1, r4, r0
 800caf0:	428b      	cmp	r3, r1
 800caf2:	bf04      	itt	eq
 800caf4:	6819      	ldreq	r1, [r3, #0]
 800caf6:	685b      	ldreq	r3, [r3, #4]
 800caf8:	6063      	str	r3, [r4, #4]
 800cafa:	bf04      	itt	eq
 800cafc:	1809      	addeq	r1, r1, r0
 800cafe:	6021      	streq	r1, [r4, #0]
 800cb00:	6054      	str	r4, [r2, #4]
 800cb02:	e7ca      	b.n	800ca9a <_free_r+0x22>
 800cb04:	bd38      	pop	{r3, r4, r5, pc}
 800cb06:	bf00      	nop
 800cb08:	240bc208 	.word	0x240bc208

0800cb0c <sbrk_aligned>:
 800cb0c:	b570      	push	{r4, r5, r6, lr}
 800cb0e:	4e0f      	ldr	r6, [pc, #60]	@ (800cb4c <sbrk_aligned+0x40>)
 800cb10:	460c      	mov	r4, r1
 800cb12:	6831      	ldr	r1, [r6, #0]
 800cb14:	4605      	mov	r5, r0
 800cb16:	b911      	cbnz	r1, 800cb1e <sbrk_aligned+0x12>
 800cb18:	f000 fba6 	bl	800d268 <_sbrk_r>
 800cb1c:	6030      	str	r0, [r6, #0]
 800cb1e:	4621      	mov	r1, r4
 800cb20:	4628      	mov	r0, r5
 800cb22:	f000 fba1 	bl	800d268 <_sbrk_r>
 800cb26:	1c43      	adds	r3, r0, #1
 800cb28:	d103      	bne.n	800cb32 <sbrk_aligned+0x26>
 800cb2a:	f04f 34ff 	mov.w	r4, #4294967295
 800cb2e:	4620      	mov	r0, r4
 800cb30:	bd70      	pop	{r4, r5, r6, pc}
 800cb32:	1cc4      	adds	r4, r0, #3
 800cb34:	f024 0403 	bic.w	r4, r4, #3
 800cb38:	42a0      	cmp	r0, r4
 800cb3a:	d0f8      	beq.n	800cb2e <sbrk_aligned+0x22>
 800cb3c:	1a21      	subs	r1, r4, r0
 800cb3e:	4628      	mov	r0, r5
 800cb40:	f000 fb92 	bl	800d268 <_sbrk_r>
 800cb44:	3001      	adds	r0, #1
 800cb46:	d1f2      	bne.n	800cb2e <sbrk_aligned+0x22>
 800cb48:	e7ef      	b.n	800cb2a <sbrk_aligned+0x1e>
 800cb4a:	bf00      	nop
 800cb4c:	240bc204 	.word	0x240bc204

0800cb50 <_malloc_r>:
 800cb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb54:	1ccd      	adds	r5, r1, #3
 800cb56:	f025 0503 	bic.w	r5, r5, #3
 800cb5a:	3508      	adds	r5, #8
 800cb5c:	2d0c      	cmp	r5, #12
 800cb5e:	bf38      	it	cc
 800cb60:	250c      	movcc	r5, #12
 800cb62:	2d00      	cmp	r5, #0
 800cb64:	4606      	mov	r6, r0
 800cb66:	db01      	blt.n	800cb6c <_malloc_r+0x1c>
 800cb68:	42a9      	cmp	r1, r5
 800cb6a:	d904      	bls.n	800cb76 <_malloc_r+0x26>
 800cb6c:	230c      	movs	r3, #12
 800cb6e:	6033      	str	r3, [r6, #0]
 800cb70:	2000      	movs	r0, #0
 800cb72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc4c <_malloc_r+0xfc>
 800cb7a:	f000 f869 	bl	800cc50 <__malloc_lock>
 800cb7e:	f8d8 3000 	ldr.w	r3, [r8]
 800cb82:	461c      	mov	r4, r3
 800cb84:	bb44      	cbnz	r4, 800cbd8 <_malloc_r+0x88>
 800cb86:	4629      	mov	r1, r5
 800cb88:	4630      	mov	r0, r6
 800cb8a:	f7ff ffbf 	bl	800cb0c <sbrk_aligned>
 800cb8e:	1c43      	adds	r3, r0, #1
 800cb90:	4604      	mov	r4, r0
 800cb92:	d158      	bne.n	800cc46 <_malloc_r+0xf6>
 800cb94:	f8d8 4000 	ldr.w	r4, [r8]
 800cb98:	4627      	mov	r7, r4
 800cb9a:	2f00      	cmp	r7, #0
 800cb9c:	d143      	bne.n	800cc26 <_malloc_r+0xd6>
 800cb9e:	2c00      	cmp	r4, #0
 800cba0:	d04b      	beq.n	800cc3a <_malloc_r+0xea>
 800cba2:	6823      	ldr	r3, [r4, #0]
 800cba4:	4639      	mov	r1, r7
 800cba6:	4630      	mov	r0, r6
 800cba8:	eb04 0903 	add.w	r9, r4, r3
 800cbac:	f000 fb5c 	bl	800d268 <_sbrk_r>
 800cbb0:	4581      	cmp	r9, r0
 800cbb2:	d142      	bne.n	800cc3a <_malloc_r+0xea>
 800cbb4:	6821      	ldr	r1, [r4, #0]
 800cbb6:	1a6d      	subs	r5, r5, r1
 800cbb8:	4629      	mov	r1, r5
 800cbba:	4630      	mov	r0, r6
 800cbbc:	f7ff ffa6 	bl	800cb0c <sbrk_aligned>
 800cbc0:	3001      	adds	r0, #1
 800cbc2:	d03a      	beq.n	800cc3a <_malloc_r+0xea>
 800cbc4:	6823      	ldr	r3, [r4, #0]
 800cbc6:	442b      	add	r3, r5
 800cbc8:	6023      	str	r3, [r4, #0]
 800cbca:	f8d8 3000 	ldr.w	r3, [r8]
 800cbce:	685a      	ldr	r2, [r3, #4]
 800cbd0:	bb62      	cbnz	r2, 800cc2c <_malloc_r+0xdc>
 800cbd2:	f8c8 7000 	str.w	r7, [r8]
 800cbd6:	e00f      	b.n	800cbf8 <_malloc_r+0xa8>
 800cbd8:	6822      	ldr	r2, [r4, #0]
 800cbda:	1b52      	subs	r2, r2, r5
 800cbdc:	d420      	bmi.n	800cc20 <_malloc_r+0xd0>
 800cbde:	2a0b      	cmp	r2, #11
 800cbe0:	d917      	bls.n	800cc12 <_malloc_r+0xc2>
 800cbe2:	1961      	adds	r1, r4, r5
 800cbe4:	42a3      	cmp	r3, r4
 800cbe6:	6025      	str	r5, [r4, #0]
 800cbe8:	bf18      	it	ne
 800cbea:	6059      	strne	r1, [r3, #4]
 800cbec:	6863      	ldr	r3, [r4, #4]
 800cbee:	bf08      	it	eq
 800cbf0:	f8c8 1000 	streq.w	r1, [r8]
 800cbf4:	5162      	str	r2, [r4, r5]
 800cbf6:	604b      	str	r3, [r1, #4]
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	f000 f82f 	bl	800cc5c <__malloc_unlock>
 800cbfe:	f104 000b 	add.w	r0, r4, #11
 800cc02:	1d23      	adds	r3, r4, #4
 800cc04:	f020 0007 	bic.w	r0, r0, #7
 800cc08:	1ac2      	subs	r2, r0, r3
 800cc0a:	bf1c      	itt	ne
 800cc0c:	1a1b      	subne	r3, r3, r0
 800cc0e:	50a3      	strne	r3, [r4, r2]
 800cc10:	e7af      	b.n	800cb72 <_malloc_r+0x22>
 800cc12:	6862      	ldr	r2, [r4, #4]
 800cc14:	42a3      	cmp	r3, r4
 800cc16:	bf0c      	ite	eq
 800cc18:	f8c8 2000 	streq.w	r2, [r8]
 800cc1c:	605a      	strne	r2, [r3, #4]
 800cc1e:	e7eb      	b.n	800cbf8 <_malloc_r+0xa8>
 800cc20:	4623      	mov	r3, r4
 800cc22:	6864      	ldr	r4, [r4, #4]
 800cc24:	e7ae      	b.n	800cb84 <_malloc_r+0x34>
 800cc26:	463c      	mov	r4, r7
 800cc28:	687f      	ldr	r7, [r7, #4]
 800cc2a:	e7b6      	b.n	800cb9a <_malloc_r+0x4a>
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	42a3      	cmp	r3, r4
 800cc32:	d1fb      	bne.n	800cc2c <_malloc_r+0xdc>
 800cc34:	2300      	movs	r3, #0
 800cc36:	6053      	str	r3, [r2, #4]
 800cc38:	e7de      	b.n	800cbf8 <_malloc_r+0xa8>
 800cc3a:	230c      	movs	r3, #12
 800cc3c:	6033      	str	r3, [r6, #0]
 800cc3e:	4630      	mov	r0, r6
 800cc40:	f000 f80c 	bl	800cc5c <__malloc_unlock>
 800cc44:	e794      	b.n	800cb70 <_malloc_r+0x20>
 800cc46:	6005      	str	r5, [r0, #0]
 800cc48:	e7d6      	b.n	800cbf8 <_malloc_r+0xa8>
 800cc4a:	bf00      	nop
 800cc4c:	240bc208 	.word	0x240bc208

0800cc50 <__malloc_lock>:
 800cc50:	4801      	ldr	r0, [pc, #4]	@ (800cc58 <__malloc_lock+0x8>)
 800cc52:	f7ff bf0f 	b.w	800ca74 <__retarget_lock_acquire_recursive>
 800cc56:	bf00      	nop
 800cc58:	240bc200 	.word	0x240bc200

0800cc5c <__malloc_unlock>:
 800cc5c:	4801      	ldr	r0, [pc, #4]	@ (800cc64 <__malloc_unlock+0x8>)
 800cc5e:	f7ff bf0a 	b.w	800ca76 <__retarget_lock_release_recursive>
 800cc62:	bf00      	nop
 800cc64:	240bc200 	.word	0x240bc200

0800cc68 <__ssputs_r>:
 800cc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc6c:	688e      	ldr	r6, [r1, #8]
 800cc6e:	461f      	mov	r7, r3
 800cc70:	42be      	cmp	r6, r7
 800cc72:	680b      	ldr	r3, [r1, #0]
 800cc74:	4682      	mov	sl, r0
 800cc76:	460c      	mov	r4, r1
 800cc78:	4690      	mov	r8, r2
 800cc7a:	d82d      	bhi.n	800ccd8 <__ssputs_r+0x70>
 800cc7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cc84:	d026      	beq.n	800ccd4 <__ssputs_r+0x6c>
 800cc86:	6965      	ldr	r5, [r4, #20]
 800cc88:	6909      	ldr	r1, [r1, #16]
 800cc8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc8e:	eba3 0901 	sub.w	r9, r3, r1
 800cc92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc96:	1c7b      	adds	r3, r7, #1
 800cc98:	444b      	add	r3, r9
 800cc9a:	106d      	asrs	r5, r5, #1
 800cc9c:	429d      	cmp	r5, r3
 800cc9e:	bf38      	it	cc
 800cca0:	461d      	movcc	r5, r3
 800cca2:	0553      	lsls	r3, r2, #21
 800cca4:	d527      	bpl.n	800ccf6 <__ssputs_r+0x8e>
 800cca6:	4629      	mov	r1, r5
 800cca8:	f7ff ff52 	bl	800cb50 <_malloc_r>
 800ccac:	4606      	mov	r6, r0
 800ccae:	b360      	cbz	r0, 800cd0a <__ssputs_r+0xa2>
 800ccb0:	6921      	ldr	r1, [r4, #16]
 800ccb2:	464a      	mov	r2, r9
 800ccb4:	f000 fae8 	bl	800d288 <memcpy>
 800ccb8:	89a3      	ldrh	r3, [r4, #12]
 800ccba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ccbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccc2:	81a3      	strh	r3, [r4, #12]
 800ccc4:	6126      	str	r6, [r4, #16]
 800ccc6:	6165      	str	r5, [r4, #20]
 800ccc8:	444e      	add	r6, r9
 800ccca:	eba5 0509 	sub.w	r5, r5, r9
 800ccce:	6026      	str	r6, [r4, #0]
 800ccd0:	60a5      	str	r5, [r4, #8]
 800ccd2:	463e      	mov	r6, r7
 800ccd4:	42be      	cmp	r6, r7
 800ccd6:	d900      	bls.n	800ccda <__ssputs_r+0x72>
 800ccd8:	463e      	mov	r6, r7
 800ccda:	6820      	ldr	r0, [r4, #0]
 800ccdc:	4632      	mov	r2, r6
 800ccde:	4641      	mov	r1, r8
 800cce0:	f000 faa8 	bl	800d234 <memmove>
 800cce4:	68a3      	ldr	r3, [r4, #8]
 800cce6:	1b9b      	subs	r3, r3, r6
 800cce8:	60a3      	str	r3, [r4, #8]
 800ccea:	6823      	ldr	r3, [r4, #0]
 800ccec:	4433      	add	r3, r6
 800ccee:	6023      	str	r3, [r4, #0]
 800ccf0:	2000      	movs	r0, #0
 800ccf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccf6:	462a      	mov	r2, r5
 800ccf8:	f000 fad4 	bl	800d2a4 <_realloc_r>
 800ccfc:	4606      	mov	r6, r0
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	d1e0      	bne.n	800ccc4 <__ssputs_r+0x5c>
 800cd02:	6921      	ldr	r1, [r4, #16]
 800cd04:	4650      	mov	r0, sl
 800cd06:	f7ff feb7 	bl	800ca78 <_free_r>
 800cd0a:	230c      	movs	r3, #12
 800cd0c:	f8ca 3000 	str.w	r3, [sl]
 800cd10:	89a3      	ldrh	r3, [r4, #12]
 800cd12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd16:	81a3      	strh	r3, [r4, #12]
 800cd18:	f04f 30ff 	mov.w	r0, #4294967295
 800cd1c:	e7e9      	b.n	800ccf2 <__ssputs_r+0x8a>
	...

0800cd20 <_svfiprintf_r>:
 800cd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd24:	4698      	mov	r8, r3
 800cd26:	898b      	ldrh	r3, [r1, #12]
 800cd28:	061b      	lsls	r3, r3, #24
 800cd2a:	b09d      	sub	sp, #116	@ 0x74
 800cd2c:	4607      	mov	r7, r0
 800cd2e:	460d      	mov	r5, r1
 800cd30:	4614      	mov	r4, r2
 800cd32:	d510      	bpl.n	800cd56 <_svfiprintf_r+0x36>
 800cd34:	690b      	ldr	r3, [r1, #16]
 800cd36:	b973      	cbnz	r3, 800cd56 <_svfiprintf_r+0x36>
 800cd38:	2140      	movs	r1, #64	@ 0x40
 800cd3a:	f7ff ff09 	bl	800cb50 <_malloc_r>
 800cd3e:	6028      	str	r0, [r5, #0]
 800cd40:	6128      	str	r0, [r5, #16]
 800cd42:	b930      	cbnz	r0, 800cd52 <_svfiprintf_r+0x32>
 800cd44:	230c      	movs	r3, #12
 800cd46:	603b      	str	r3, [r7, #0]
 800cd48:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4c:	b01d      	add	sp, #116	@ 0x74
 800cd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd52:	2340      	movs	r3, #64	@ 0x40
 800cd54:	616b      	str	r3, [r5, #20]
 800cd56:	2300      	movs	r3, #0
 800cd58:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd5a:	2320      	movs	r3, #32
 800cd5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd60:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd64:	2330      	movs	r3, #48	@ 0x30
 800cd66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cf04 <_svfiprintf_r+0x1e4>
 800cd6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd6e:	f04f 0901 	mov.w	r9, #1
 800cd72:	4623      	mov	r3, r4
 800cd74:	469a      	mov	sl, r3
 800cd76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd7a:	b10a      	cbz	r2, 800cd80 <_svfiprintf_r+0x60>
 800cd7c:	2a25      	cmp	r2, #37	@ 0x25
 800cd7e:	d1f9      	bne.n	800cd74 <_svfiprintf_r+0x54>
 800cd80:	ebba 0b04 	subs.w	fp, sl, r4
 800cd84:	d00b      	beq.n	800cd9e <_svfiprintf_r+0x7e>
 800cd86:	465b      	mov	r3, fp
 800cd88:	4622      	mov	r2, r4
 800cd8a:	4629      	mov	r1, r5
 800cd8c:	4638      	mov	r0, r7
 800cd8e:	f7ff ff6b 	bl	800cc68 <__ssputs_r>
 800cd92:	3001      	adds	r0, #1
 800cd94:	f000 80a7 	beq.w	800cee6 <_svfiprintf_r+0x1c6>
 800cd98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd9a:	445a      	add	r2, fp
 800cd9c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd9e:	f89a 3000 	ldrb.w	r3, [sl]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	f000 809f 	beq.w	800cee6 <_svfiprintf_r+0x1c6>
 800cda8:	2300      	movs	r3, #0
 800cdaa:	f04f 32ff 	mov.w	r2, #4294967295
 800cdae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdb2:	f10a 0a01 	add.w	sl, sl, #1
 800cdb6:	9304      	str	r3, [sp, #16]
 800cdb8:	9307      	str	r3, [sp, #28]
 800cdba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cdbe:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdc0:	4654      	mov	r4, sl
 800cdc2:	2205      	movs	r2, #5
 800cdc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdc8:	484e      	ldr	r0, [pc, #312]	@ (800cf04 <_svfiprintf_r+0x1e4>)
 800cdca:	f7f3 fa91 	bl	80002f0 <memchr>
 800cdce:	9a04      	ldr	r2, [sp, #16]
 800cdd0:	b9d8      	cbnz	r0, 800ce0a <_svfiprintf_r+0xea>
 800cdd2:	06d0      	lsls	r0, r2, #27
 800cdd4:	bf44      	itt	mi
 800cdd6:	2320      	movmi	r3, #32
 800cdd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cddc:	0711      	lsls	r1, r2, #28
 800cdde:	bf44      	itt	mi
 800cde0:	232b      	movmi	r3, #43	@ 0x2b
 800cde2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cde6:	f89a 3000 	ldrb.w	r3, [sl]
 800cdea:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdec:	d015      	beq.n	800ce1a <_svfiprintf_r+0xfa>
 800cdee:	9a07      	ldr	r2, [sp, #28]
 800cdf0:	4654      	mov	r4, sl
 800cdf2:	2000      	movs	r0, #0
 800cdf4:	f04f 0c0a 	mov.w	ip, #10
 800cdf8:	4621      	mov	r1, r4
 800cdfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdfe:	3b30      	subs	r3, #48	@ 0x30
 800ce00:	2b09      	cmp	r3, #9
 800ce02:	d94b      	bls.n	800ce9c <_svfiprintf_r+0x17c>
 800ce04:	b1b0      	cbz	r0, 800ce34 <_svfiprintf_r+0x114>
 800ce06:	9207      	str	r2, [sp, #28]
 800ce08:	e014      	b.n	800ce34 <_svfiprintf_r+0x114>
 800ce0a:	eba0 0308 	sub.w	r3, r0, r8
 800ce0e:	fa09 f303 	lsl.w	r3, r9, r3
 800ce12:	4313      	orrs	r3, r2
 800ce14:	9304      	str	r3, [sp, #16]
 800ce16:	46a2      	mov	sl, r4
 800ce18:	e7d2      	b.n	800cdc0 <_svfiprintf_r+0xa0>
 800ce1a:	9b03      	ldr	r3, [sp, #12]
 800ce1c:	1d19      	adds	r1, r3, #4
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	9103      	str	r1, [sp, #12]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	bfbb      	ittet	lt
 800ce26:	425b      	neglt	r3, r3
 800ce28:	f042 0202 	orrlt.w	r2, r2, #2
 800ce2c:	9307      	strge	r3, [sp, #28]
 800ce2e:	9307      	strlt	r3, [sp, #28]
 800ce30:	bfb8      	it	lt
 800ce32:	9204      	strlt	r2, [sp, #16]
 800ce34:	7823      	ldrb	r3, [r4, #0]
 800ce36:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce38:	d10a      	bne.n	800ce50 <_svfiprintf_r+0x130>
 800ce3a:	7863      	ldrb	r3, [r4, #1]
 800ce3c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce3e:	d132      	bne.n	800cea6 <_svfiprintf_r+0x186>
 800ce40:	9b03      	ldr	r3, [sp, #12]
 800ce42:	1d1a      	adds	r2, r3, #4
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	9203      	str	r2, [sp, #12]
 800ce48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce4c:	3402      	adds	r4, #2
 800ce4e:	9305      	str	r3, [sp, #20]
 800ce50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cf14 <_svfiprintf_r+0x1f4>
 800ce54:	7821      	ldrb	r1, [r4, #0]
 800ce56:	2203      	movs	r2, #3
 800ce58:	4650      	mov	r0, sl
 800ce5a:	f7f3 fa49 	bl	80002f0 <memchr>
 800ce5e:	b138      	cbz	r0, 800ce70 <_svfiprintf_r+0x150>
 800ce60:	9b04      	ldr	r3, [sp, #16]
 800ce62:	eba0 000a 	sub.w	r0, r0, sl
 800ce66:	2240      	movs	r2, #64	@ 0x40
 800ce68:	4082      	lsls	r2, r0
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	3401      	adds	r4, #1
 800ce6e:	9304      	str	r3, [sp, #16]
 800ce70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce74:	4824      	ldr	r0, [pc, #144]	@ (800cf08 <_svfiprintf_r+0x1e8>)
 800ce76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce7a:	2206      	movs	r2, #6
 800ce7c:	f7f3 fa38 	bl	80002f0 <memchr>
 800ce80:	2800      	cmp	r0, #0
 800ce82:	d036      	beq.n	800cef2 <_svfiprintf_r+0x1d2>
 800ce84:	4b21      	ldr	r3, [pc, #132]	@ (800cf0c <_svfiprintf_r+0x1ec>)
 800ce86:	bb1b      	cbnz	r3, 800ced0 <_svfiprintf_r+0x1b0>
 800ce88:	9b03      	ldr	r3, [sp, #12]
 800ce8a:	3307      	adds	r3, #7
 800ce8c:	f023 0307 	bic.w	r3, r3, #7
 800ce90:	3308      	adds	r3, #8
 800ce92:	9303      	str	r3, [sp, #12]
 800ce94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce96:	4433      	add	r3, r6
 800ce98:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce9a:	e76a      	b.n	800cd72 <_svfiprintf_r+0x52>
 800ce9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cea0:	460c      	mov	r4, r1
 800cea2:	2001      	movs	r0, #1
 800cea4:	e7a8      	b.n	800cdf8 <_svfiprintf_r+0xd8>
 800cea6:	2300      	movs	r3, #0
 800cea8:	3401      	adds	r4, #1
 800ceaa:	9305      	str	r3, [sp, #20]
 800ceac:	4619      	mov	r1, r3
 800ceae:	f04f 0c0a 	mov.w	ip, #10
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ceb8:	3a30      	subs	r2, #48	@ 0x30
 800ceba:	2a09      	cmp	r2, #9
 800cebc:	d903      	bls.n	800cec6 <_svfiprintf_r+0x1a6>
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d0c6      	beq.n	800ce50 <_svfiprintf_r+0x130>
 800cec2:	9105      	str	r1, [sp, #20]
 800cec4:	e7c4      	b.n	800ce50 <_svfiprintf_r+0x130>
 800cec6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ceca:	4604      	mov	r4, r0
 800cecc:	2301      	movs	r3, #1
 800cece:	e7f0      	b.n	800ceb2 <_svfiprintf_r+0x192>
 800ced0:	ab03      	add	r3, sp, #12
 800ced2:	9300      	str	r3, [sp, #0]
 800ced4:	462a      	mov	r2, r5
 800ced6:	4b0e      	ldr	r3, [pc, #56]	@ (800cf10 <_svfiprintf_r+0x1f0>)
 800ced8:	a904      	add	r1, sp, #16
 800ceda:	4638      	mov	r0, r7
 800cedc:	f3af 8000 	nop.w
 800cee0:	1c42      	adds	r2, r0, #1
 800cee2:	4606      	mov	r6, r0
 800cee4:	d1d6      	bne.n	800ce94 <_svfiprintf_r+0x174>
 800cee6:	89ab      	ldrh	r3, [r5, #12]
 800cee8:	065b      	lsls	r3, r3, #25
 800ceea:	f53f af2d 	bmi.w	800cd48 <_svfiprintf_r+0x28>
 800ceee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cef0:	e72c      	b.n	800cd4c <_svfiprintf_r+0x2c>
 800cef2:	ab03      	add	r3, sp, #12
 800cef4:	9300      	str	r3, [sp, #0]
 800cef6:	462a      	mov	r2, r5
 800cef8:	4b05      	ldr	r3, [pc, #20]	@ (800cf10 <_svfiprintf_r+0x1f0>)
 800cefa:	a904      	add	r1, sp, #16
 800cefc:	4638      	mov	r0, r7
 800cefe:	f000 f879 	bl	800cff4 <_printf_i>
 800cf02:	e7ed      	b.n	800cee0 <_svfiprintf_r+0x1c0>
 800cf04:	0800d66c 	.word	0x0800d66c
 800cf08:	0800d676 	.word	0x0800d676
 800cf0c:	00000000 	.word	0x00000000
 800cf10:	0800cc69 	.word	0x0800cc69
 800cf14:	0800d672 	.word	0x0800d672

0800cf18 <_printf_common>:
 800cf18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf1c:	4616      	mov	r6, r2
 800cf1e:	4698      	mov	r8, r3
 800cf20:	688a      	ldr	r2, [r1, #8]
 800cf22:	690b      	ldr	r3, [r1, #16]
 800cf24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	bfb8      	it	lt
 800cf2c:	4613      	movlt	r3, r2
 800cf2e:	6033      	str	r3, [r6, #0]
 800cf30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cf34:	4607      	mov	r7, r0
 800cf36:	460c      	mov	r4, r1
 800cf38:	b10a      	cbz	r2, 800cf3e <_printf_common+0x26>
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	6033      	str	r3, [r6, #0]
 800cf3e:	6823      	ldr	r3, [r4, #0]
 800cf40:	0699      	lsls	r1, r3, #26
 800cf42:	bf42      	ittt	mi
 800cf44:	6833      	ldrmi	r3, [r6, #0]
 800cf46:	3302      	addmi	r3, #2
 800cf48:	6033      	strmi	r3, [r6, #0]
 800cf4a:	6825      	ldr	r5, [r4, #0]
 800cf4c:	f015 0506 	ands.w	r5, r5, #6
 800cf50:	d106      	bne.n	800cf60 <_printf_common+0x48>
 800cf52:	f104 0a19 	add.w	sl, r4, #25
 800cf56:	68e3      	ldr	r3, [r4, #12]
 800cf58:	6832      	ldr	r2, [r6, #0]
 800cf5a:	1a9b      	subs	r3, r3, r2
 800cf5c:	42ab      	cmp	r3, r5
 800cf5e:	dc26      	bgt.n	800cfae <_printf_common+0x96>
 800cf60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cf64:	6822      	ldr	r2, [r4, #0]
 800cf66:	3b00      	subs	r3, #0
 800cf68:	bf18      	it	ne
 800cf6a:	2301      	movne	r3, #1
 800cf6c:	0692      	lsls	r2, r2, #26
 800cf6e:	d42b      	bmi.n	800cfc8 <_printf_common+0xb0>
 800cf70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cf74:	4641      	mov	r1, r8
 800cf76:	4638      	mov	r0, r7
 800cf78:	47c8      	blx	r9
 800cf7a:	3001      	adds	r0, #1
 800cf7c:	d01e      	beq.n	800cfbc <_printf_common+0xa4>
 800cf7e:	6823      	ldr	r3, [r4, #0]
 800cf80:	6922      	ldr	r2, [r4, #16]
 800cf82:	f003 0306 	and.w	r3, r3, #6
 800cf86:	2b04      	cmp	r3, #4
 800cf88:	bf02      	ittt	eq
 800cf8a:	68e5      	ldreq	r5, [r4, #12]
 800cf8c:	6833      	ldreq	r3, [r6, #0]
 800cf8e:	1aed      	subeq	r5, r5, r3
 800cf90:	68a3      	ldr	r3, [r4, #8]
 800cf92:	bf0c      	ite	eq
 800cf94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf98:	2500      	movne	r5, #0
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	bfc4      	itt	gt
 800cf9e:	1a9b      	subgt	r3, r3, r2
 800cfa0:	18ed      	addgt	r5, r5, r3
 800cfa2:	2600      	movs	r6, #0
 800cfa4:	341a      	adds	r4, #26
 800cfa6:	42b5      	cmp	r5, r6
 800cfa8:	d11a      	bne.n	800cfe0 <_printf_common+0xc8>
 800cfaa:	2000      	movs	r0, #0
 800cfac:	e008      	b.n	800cfc0 <_printf_common+0xa8>
 800cfae:	2301      	movs	r3, #1
 800cfb0:	4652      	mov	r2, sl
 800cfb2:	4641      	mov	r1, r8
 800cfb4:	4638      	mov	r0, r7
 800cfb6:	47c8      	blx	r9
 800cfb8:	3001      	adds	r0, #1
 800cfba:	d103      	bne.n	800cfc4 <_printf_common+0xac>
 800cfbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfc4:	3501      	adds	r5, #1
 800cfc6:	e7c6      	b.n	800cf56 <_printf_common+0x3e>
 800cfc8:	18e1      	adds	r1, r4, r3
 800cfca:	1c5a      	adds	r2, r3, #1
 800cfcc:	2030      	movs	r0, #48	@ 0x30
 800cfce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cfd2:	4422      	add	r2, r4
 800cfd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cfd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cfdc:	3302      	adds	r3, #2
 800cfde:	e7c7      	b.n	800cf70 <_printf_common+0x58>
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	4622      	mov	r2, r4
 800cfe4:	4641      	mov	r1, r8
 800cfe6:	4638      	mov	r0, r7
 800cfe8:	47c8      	blx	r9
 800cfea:	3001      	adds	r0, #1
 800cfec:	d0e6      	beq.n	800cfbc <_printf_common+0xa4>
 800cfee:	3601      	adds	r6, #1
 800cff0:	e7d9      	b.n	800cfa6 <_printf_common+0x8e>
	...

0800cff4 <_printf_i>:
 800cff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cff8:	7e0f      	ldrb	r7, [r1, #24]
 800cffa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cffc:	2f78      	cmp	r7, #120	@ 0x78
 800cffe:	4691      	mov	r9, r2
 800d000:	4680      	mov	r8, r0
 800d002:	460c      	mov	r4, r1
 800d004:	469a      	mov	sl, r3
 800d006:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d00a:	d807      	bhi.n	800d01c <_printf_i+0x28>
 800d00c:	2f62      	cmp	r7, #98	@ 0x62
 800d00e:	d80a      	bhi.n	800d026 <_printf_i+0x32>
 800d010:	2f00      	cmp	r7, #0
 800d012:	f000 80d2 	beq.w	800d1ba <_printf_i+0x1c6>
 800d016:	2f58      	cmp	r7, #88	@ 0x58
 800d018:	f000 80b9 	beq.w	800d18e <_printf_i+0x19a>
 800d01c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d020:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d024:	e03a      	b.n	800d09c <_printf_i+0xa8>
 800d026:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d02a:	2b15      	cmp	r3, #21
 800d02c:	d8f6      	bhi.n	800d01c <_printf_i+0x28>
 800d02e:	a101      	add	r1, pc, #4	@ (adr r1, 800d034 <_printf_i+0x40>)
 800d030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d034:	0800d08d 	.word	0x0800d08d
 800d038:	0800d0a1 	.word	0x0800d0a1
 800d03c:	0800d01d 	.word	0x0800d01d
 800d040:	0800d01d 	.word	0x0800d01d
 800d044:	0800d01d 	.word	0x0800d01d
 800d048:	0800d01d 	.word	0x0800d01d
 800d04c:	0800d0a1 	.word	0x0800d0a1
 800d050:	0800d01d 	.word	0x0800d01d
 800d054:	0800d01d 	.word	0x0800d01d
 800d058:	0800d01d 	.word	0x0800d01d
 800d05c:	0800d01d 	.word	0x0800d01d
 800d060:	0800d1a1 	.word	0x0800d1a1
 800d064:	0800d0cb 	.word	0x0800d0cb
 800d068:	0800d15b 	.word	0x0800d15b
 800d06c:	0800d01d 	.word	0x0800d01d
 800d070:	0800d01d 	.word	0x0800d01d
 800d074:	0800d1c3 	.word	0x0800d1c3
 800d078:	0800d01d 	.word	0x0800d01d
 800d07c:	0800d0cb 	.word	0x0800d0cb
 800d080:	0800d01d 	.word	0x0800d01d
 800d084:	0800d01d 	.word	0x0800d01d
 800d088:	0800d163 	.word	0x0800d163
 800d08c:	6833      	ldr	r3, [r6, #0]
 800d08e:	1d1a      	adds	r2, r3, #4
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	6032      	str	r2, [r6, #0]
 800d094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d098:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d09c:	2301      	movs	r3, #1
 800d09e:	e09d      	b.n	800d1dc <_printf_i+0x1e8>
 800d0a0:	6833      	ldr	r3, [r6, #0]
 800d0a2:	6820      	ldr	r0, [r4, #0]
 800d0a4:	1d19      	adds	r1, r3, #4
 800d0a6:	6031      	str	r1, [r6, #0]
 800d0a8:	0606      	lsls	r6, r0, #24
 800d0aa:	d501      	bpl.n	800d0b0 <_printf_i+0xbc>
 800d0ac:	681d      	ldr	r5, [r3, #0]
 800d0ae:	e003      	b.n	800d0b8 <_printf_i+0xc4>
 800d0b0:	0645      	lsls	r5, r0, #25
 800d0b2:	d5fb      	bpl.n	800d0ac <_printf_i+0xb8>
 800d0b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d0b8:	2d00      	cmp	r5, #0
 800d0ba:	da03      	bge.n	800d0c4 <_printf_i+0xd0>
 800d0bc:	232d      	movs	r3, #45	@ 0x2d
 800d0be:	426d      	negs	r5, r5
 800d0c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d0c4:	4859      	ldr	r0, [pc, #356]	@ (800d22c <_printf_i+0x238>)
 800d0c6:	230a      	movs	r3, #10
 800d0c8:	e011      	b.n	800d0ee <_printf_i+0xfa>
 800d0ca:	6821      	ldr	r1, [r4, #0]
 800d0cc:	6833      	ldr	r3, [r6, #0]
 800d0ce:	0608      	lsls	r0, r1, #24
 800d0d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800d0d4:	d402      	bmi.n	800d0dc <_printf_i+0xe8>
 800d0d6:	0649      	lsls	r1, r1, #25
 800d0d8:	bf48      	it	mi
 800d0da:	b2ad      	uxthmi	r5, r5
 800d0dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800d0de:	4853      	ldr	r0, [pc, #332]	@ (800d22c <_printf_i+0x238>)
 800d0e0:	6033      	str	r3, [r6, #0]
 800d0e2:	bf14      	ite	ne
 800d0e4:	230a      	movne	r3, #10
 800d0e6:	2308      	moveq	r3, #8
 800d0e8:	2100      	movs	r1, #0
 800d0ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d0ee:	6866      	ldr	r6, [r4, #4]
 800d0f0:	60a6      	str	r6, [r4, #8]
 800d0f2:	2e00      	cmp	r6, #0
 800d0f4:	bfa2      	ittt	ge
 800d0f6:	6821      	ldrge	r1, [r4, #0]
 800d0f8:	f021 0104 	bicge.w	r1, r1, #4
 800d0fc:	6021      	strge	r1, [r4, #0]
 800d0fe:	b90d      	cbnz	r5, 800d104 <_printf_i+0x110>
 800d100:	2e00      	cmp	r6, #0
 800d102:	d04b      	beq.n	800d19c <_printf_i+0x1a8>
 800d104:	4616      	mov	r6, r2
 800d106:	fbb5 f1f3 	udiv	r1, r5, r3
 800d10a:	fb03 5711 	mls	r7, r3, r1, r5
 800d10e:	5dc7      	ldrb	r7, [r0, r7]
 800d110:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d114:	462f      	mov	r7, r5
 800d116:	42bb      	cmp	r3, r7
 800d118:	460d      	mov	r5, r1
 800d11a:	d9f4      	bls.n	800d106 <_printf_i+0x112>
 800d11c:	2b08      	cmp	r3, #8
 800d11e:	d10b      	bne.n	800d138 <_printf_i+0x144>
 800d120:	6823      	ldr	r3, [r4, #0]
 800d122:	07df      	lsls	r7, r3, #31
 800d124:	d508      	bpl.n	800d138 <_printf_i+0x144>
 800d126:	6923      	ldr	r3, [r4, #16]
 800d128:	6861      	ldr	r1, [r4, #4]
 800d12a:	4299      	cmp	r1, r3
 800d12c:	bfde      	ittt	le
 800d12e:	2330      	movle	r3, #48	@ 0x30
 800d130:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d134:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d138:	1b92      	subs	r2, r2, r6
 800d13a:	6122      	str	r2, [r4, #16]
 800d13c:	f8cd a000 	str.w	sl, [sp]
 800d140:	464b      	mov	r3, r9
 800d142:	aa03      	add	r2, sp, #12
 800d144:	4621      	mov	r1, r4
 800d146:	4640      	mov	r0, r8
 800d148:	f7ff fee6 	bl	800cf18 <_printf_common>
 800d14c:	3001      	adds	r0, #1
 800d14e:	d14a      	bne.n	800d1e6 <_printf_i+0x1f2>
 800d150:	f04f 30ff 	mov.w	r0, #4294967295
 800d154:	b004      	add	sp, #16
 800d156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d15a:	6823      	ldr	r3, [r4, #0]
 800d15c:	f043 0320 	orr.w	r3, r3, #32
 800d160:	6023      	str	r3, [r4, #0]
 800d162:	4833      	ldr	r0, [pc, #204]	@ (800d230 <_printf_i+0x23c>)
 800d164:	2778      	movs	r7, #120	@ 0x78
 800d166:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d16a:	6823      	ldr	r3, [r4, #0]
 800d16c:	6831      	ldr	r1, [r6, #0]
 800d16e:	061f      	lsls	r7, r3, #24
 800d170:	f851 5b04 	ldr.w	r5, [r1], #4
 800d174:	d402      	bmi.n	800d17c <_printf_i+0x188>
 800d176:	065f      	lsls	r7, r3, #25
 800d178:	bf48      	it	mi
 800d17a:	b2ad      	uxthmi	r5, r5
 800d17c:	6031      	str	r1, [r6, #0]
 800d17e:	07d9      	lsls	r1, r3, #31
 800d180:	bf44      	itt	mi
 800d182:	f043 0320 	orrmi.w	r3, r3, #32
 800d186:	6023      	strmi	r3, [r4, #0]
 800d188:	b11d      	cbz	r5, 800d192 <_printf_i+0x19e>
 800d18a:	2310      	movs	r3, #16
 800d18c:	e7ac      	b.n	800d0e8 <_printf_i+0xf4>
 800d18e:	4827      	ldr	r0, [pc, #156]	@ (800d22c <_printf_i+0x238>)
 800d190:	e7e9      	b.n	800d166 <_printf_i+0x172>
 800d192:	6823      	ldr	r3, [r4, #0]
 800d194:	f023 0320 	bic.w	r3, r3, #32
 800d198:	6023      	str	r3, [r4, #0]
 800d19a:	e7f6      	b.n	800d18a <_printf_i+0x196>
 800d19c:	4616      	mov	r6, r2
 800d19e:	e7bd      	b.n	800d11c <_printf_i+0x128>
 800d1a0:	6833      	ldr	r3, [r6, #0]
 800d1a2:	6825      	ldr	r5, [r4, #0]
 800d1a4:	6961      	ldr	r1, [r4, #20]
 800d1a6:	1d18      	adds	r0, r3, #4
 800d1a8:	6030      	str	r0, [r6, #0]
 800d1aa:	062e      	lsls	r6, r5, #24
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	d501      	bpl.n	800d1b4 <_printf_i+0x1c0>
 800d1b0:	6019      	str	r1, [r3, #0]
 800d1b2:	e002      	b.n	800d1ba <_printf_i+0x1c6>
 800d1b4:	0668      	lsls	r0, r5, #25
 800d1b6:	d5fb      	bpl.n	800d1b0 <_printf_i+0x1bc>
 800d1b8:	8019      	strh	r1, [r3, #0]
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	6123      	str	r3, [r4, #16]
 800d1be:	4616      	mov	r6, r2
 800d1c0:	e7bc      	b.n	800d13c <_printf_i+0x148>
 800d1c2:	6833      	ldr	r3, [r6, #0]
 800d1c4:	1d1a      	adds	r2, r3, #4
 800d1c6:	6032      	str	r2, [r6, #0]
 800d1c8:	681e      	ldr	r6, [r3, #0]
 800d1ca:	6862      	ldr	r2, [r4, #4]
 800d1cc:	2100      	movs	r1, #0
 800d1ce:	4630      	mov	r0, r6
 800d1d0:	f7f3 f88e 	bl	80002f0 <memchr>
 800d1d4:	b108      	cbz	r0, 800d1da <_printf_i+0x1e6>
 800d1d6:	1b80      	subs	r0, r0, r6
 800d1d8:	6060      	str	r0, [r4, #4]
 800d1da:	6863      	ldr	r3, [r4, #4]
 800d1dc:	6123      	str	r3, [r4, #16]
 800d1de:	2300      	movs	r3, #0
 800d1e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d1e4:	e7aa      	b.n	800d13c <_printf_i+0x148>
 800d1e6:	6923      	ldr	r3, [r4, #16]
 800d1e8:	4632      	mov	r2, r6
 800d1ea:	4649      	mov	r1, r9
 800d1ec:	4640      	mov	r0, r8
 800d1ee:	47d0      	blx	sl
 800d1f0:	3001      	adds	r0, #1
 800d1f2:	d0ad      	beq.n	800d150 <_printf_i+0x15c>
 800d1f4:	6823      	ldr	r3, [r4, #0]
 800d1f6:	079b      	lsls	r3, r3, #30
 800d1f8:	d413      	bmi.n	800d222 <_printf_i+0x22e>
 800d1fa:	68e0      	ldr	r0, [r4, #12]
 800d1fc:	9b03      	ldr	r3, [sp, #12]
 800d1fe:	4298      	cmp	r0, r3
 800d200:	bfb8      	it	lt
 800d202:	4618      	movlt	r0, r3
 800d204:	e7a6      	b.n	800d154 <_printf_i+0x160>
 800d206:	2301      	movs	r3, #1
 800d208:	4632      	mov	r2, r6
 800d20a:	4649      	mov	r1, r9
 800d20c:	4640      	mov	r0, r8
 800d20e:	47d0      	blx	sl
 800d210:	3001      	adds	r0, #1
 800d212:	d09d      	beq.n	800d150 <_printf_i+0x15c>
 800d214:	3501      	adds	r5, #1
 800d216:	68e3      	ldr	r3, [r4, #12]
 800d218:	9903      	ldr	r1, [sp, #12]
 800d21a:	1a5b      	subs	r3, r3, r1
 800d21c:	42ab      	cmp	r3, r5
 800d21e:	dcf2      	bgt.n	800d206 <_printf_i+0x212>
 800d220:	e7eb      	b.n	800d1fa <_printf_i+0x206>
 800d222:	2500      	movs	r5, #0
 800d224:	f104 0619 	add.w	r6, r4, #25
 800d228:	e7f5      	b.n	800d216 <_printf_i+0x222>
 800d22a:	bf00      	nop
 800d22c:	0800d67d 	.word	0x0800d67d
 800d230:	0800d68e 	.word	0x0800d68e

0800d234 <memmove>:
 800d234:	4288      	cmp	r0, r1
 800d236:	b510      	push	{r4, lr}
 800d238:	eb01 0402 	add.w	r4, r1, r2
 800d23c:	d902      	bls.n	800d244 <memmove+0x10>
 800d23e:	4284      	cmp	r4, r0
 800d240:	4623      	mov	r3, r4
 800d242:	d807      	bhi.n	800d254 <memmove+0x20>
 800d244:	1e43      	subs	r3, r0, #1
 800d246:	42a1      	cmp	r1, r4
 800d248:	d008      	beq.n	800d25c <memmove+0x28>
 800d24a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d24e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d252:	e7f8      	b.n	800d246 <memmove+0x12>
 800d254:	4402      	add	r2, r0
 800d256:	4601      	mov	r1, r0
 800d258:	428a      	cmp	r2, r1
 800d25a:	d100      	bne.n	800d25e <memmove+0x2a>
 800d25c:	bd10      	pop	{r4, pc}
 800d25e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d266:	e7f7      	b.n	800d258 <memmove+0x24>

0800d268 <_sbrk_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	4d06      	ldr	r5, [pc, #24]	@ (800d284 <_sbrk_r+0x1c>)
 800d26c:	2300      	movs	r3, #0
 800d26e:	4604      	mov	r4, r0
 800d270:	4608      	mov	r0, r1
 800d272:	602b      	str	r3, [r5, #0]
 800d274:	f7f6 fc4c 	bl	8003b10 <_sbrk>
 800d278:	1c43      	adds	r3, r0, #1
 800d27a:	d102      	bne.n	800d282 <_sbrk_r+0x1a>
 800d27c:	682b      	ldr	r3, [r5, #0]
 800d27e:	b103      	cbz	r3, 800d282 <_sbrk_r+0x1a>
 800d280:	6023      	str	r3, [r4, #0]
 800d282:	bd38      	pop	{r3, r4, r5, pc}
 800d284:	240bc1fc 	.word	0x240bc1fc

0800d288 <memcpy>:
 800d288:	440a      	add	r2, r1
 800d28a:	4291      	cmp	r1, r2
 800d28c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d290:	d100      	bne.n	800d294 <memcpy+0xc>
 800d292:	4770      	bx	lr
 800d294:	b510      	push	{r4, lr}
 800d296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d29a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d29e:	4291      	cmp	r1, r2
 800d2a0:	d1f9      	bne.n	800d296 <memcpy+0xe>
 800d2a2:	bd10      	pop	{r4, pc}

0800d2a4 <_realloc_r>:
 800d2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a8:	4680      	mov	r8, r0
 800d2aa:	4615      	mov	r5, r2
 800d2ac:	460c      	mov	r4, r1
 800d2ae:	b921      	cbnz	r1, 800d2ba <_realloc_r+0x16>
 800d2b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2b4:	4611      	mov	r1, r2
 800d2b6:	f7ff bc4b 	b.w	800cb50 <_malloc_r>
 800d2ba:	b92a      	cbnz	r2, 800d2c8 <_realloc_r+0x24>
 800d2bc:	f7ff fbdc 	bl	800ca78 <_free_r>
 800d2c0:	2400      	movs	r4, #0
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c8:	f000 f81a 	bl	800d300 <_malloc_usable_size_r>
 800d2cc:	4285      	cmp	r5, r0
 800d2ce:	4606      	mov	r6, r0
 800d2d0:	d802      	bhi.n	800d2d8 <_realloc_r+0x34>
 800d2d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d2d6:	d8f4      	bhi.n	800d2c2 <_realloc_r+0x1e>
 800d2d8:	4629      	mov	r1, r5
 800d2da:	4640      	mov	r0, r8
 800d2dc:	f7ff fc38 	bl	800cb50 <_malloc_r>
 800d2e0:	4607      	mov	r7, r0
 800d2e2:	2800      	cmp	r0, #0
 800d2e4:	d0ec      	beq.n	800d2c0 <_realloc_r+0x1c>
 800d2e6:	42b5      	cmp	r5, r6
 800d2e8:	462a      	mov	r2, r5
 800d2ea:	4621      	mov	r1, r4
 800d2ec:	bf28      	it	cs
 800d2ee:	4632      	movcs	r2, r6
 800d2f0:	f7ff ffca 	bl	800d288 <memcpy>
 800d2f4:	4621      	mov	r1, r4
 800d2f6:	4640      	mov	r0, r8
 800d2f8:	f7ff fbbe 	bl	800ca78 <_free_r>
 800d2fc:	463c      	mov	r4, r7
 800d2fe:	e7e0      	b.n	800d2c2 <_realloc_r+0x1e>

0800d300 <_malloc_usable_size_r>:
 800d300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d304:	1f18      	subs	r0, r3, #4
 800d306:	2b00      	cmp	r3, #0
 800d308:	bfbc      	itt	lt
 800d30a:	580b      	ldrlt	r3, [r1, r0]
 800d30c:	18c0      	addlt	r0, r0, r3
 800d30e:	4770      	bx	lr

0800d310 <_init>:
 800d310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d312:	bf00      	nop
 800d314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d316:	bc08      	pop	{r3}
 800d318:	469e      	mov	lr, r3
 800d31a:	4770      	bx	lr

0800d31c <_fini>:
 800d31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d31e:	bf00      	nop
 800d320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d322:	bc08      	pop	{r3}
 800d324:	469e      	mov	lr, r3
 800d326:	4770      	bx	lr
