
digital_watch_v02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120f8  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  080123a8  080123a8  000133a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012798  08012798  00013798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080127a0  080127a0  000137a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080127a4  080127a4  000137a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  24000000  080127a8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000bc20c  24000068  08012810  00014068  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  240bc274  08012810  00014274  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00014068  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002059a  00000000  00000000  00014096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044fd  00000000  00000000  00034630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017f8  00000000  00000000  00038b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001246  00000000  00000000  0003a328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035cad  00000000  00000000  0003b56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024ebb  00000000  00000000  0007121b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00147808  00000000  00000000  000960d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001dd8de  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000067cc  00000000  00000000  001dd924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  001e40f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000068 	.word	0x24000068
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08012390 	.word	0x08012390

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	08012390 	.word	0x08012390

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__AVI_SearchID>:
  * @param  size:
  * @param  id:
  * @retval ID
  */
uint32_t __AVI_SearchID(uint8_t* buf,  uint32_t size, uint8_t *id)
{
 8000390:	b480      	push	{r7}
 8000392:	b087      	sub	sp, #28
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
 uint16_t i;
  size-=4;
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	3b04      	subs	r3, #4
 80003a0:	60bb      	str	r3, [r7, #8]
  for(i=0;i<size;i++)
 80003a2:	2300      	movs	r3, #0
 80003a4:	82fb      	strh	r3, [r7, #22]
 80003a6:	e02a      	b.n	80003fe <__AVI_SearchID+0x6e>
  {
    if(buf[i] == id[0])
 80003a8:	8afb      	ldrh	r3, [r7, #22]
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	4413      	add	r3, r2
 80003ae:	781a      	ldrb	r2, [r3, #0]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	429a      	cmp	r2, r3
 80003b6:	d11f      	bne.n	80003f8 <__AVI_SearchID+0x68>
      if(buf[i+1] == id[1])
 80003b8:	8afb      	ldrh	r3, [r7, #22]
 80003ba:	3301      	adds	r3, #1
 80003bc:	68fa      	ldr	r2, [r7, #12]
 80003be:	4413      	add	r3, r2
 80003c0:	781a      	ldrb	r2, [r3, #0]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	3301      	adds	r3, #1
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d115      	bne.n	80003f8 <__AVI_SearchID+0x68>
        if(buf[i+2] == id[2])  
 80003cc:	8afb      	ldrh	r3, [r7, #22]
 80003ce:	3302      	adds	r3, #2
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	4413      	add	r3, r2
 80003d4:	781a      	ldrb	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3302      	adds	r3, #2
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d10b      	bne.n	80003f8 <__AVI_SearchID+0x68>
          if(buf[i+3] == id[3])
 80003e0:	8afb      	ldrh	r3, [r7, #22]
 80003e2:	3303      	adds	r3, #3
 80003e4:	68fa      	ldr	r2, [r7, #12]
 80003e6:	4413      	add	r3, r2
 80003e8:	781a      	ldrb	r2, [r3, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	3303      	adds	r3, #3
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d101      	bne.n	80003f8 <__AVI_SearchID+0x68>
            return i;  
 80003f4:	8afb      	ldrh	r3, [r7, #22]
 80003f6:	e007      	b.n	8000408 <__AVI_SearchID+0x78>
  for(i=0;i<size;i++)
 80003f8:	8afb      	ldrh	r3, [r7, #22]
 80003fa:	3301      	adds	r3, #1
 80003fc:	82fb      	strh	r3, [r7, #22]
 80003fe:	8afb      	ldrh	r3, [r7, #22]
 8000400:	68ba      	ldr	r2, [r7, #8]
 8000402:	429a      	cmp	r2, r3
 8000404:	d8d0      	bhi.n	80003a8 <__AVI_SearchID+0x18>
  }
  return 0;    
 8000406:	2300      	movs	r3, #0
}
 8000408:	4618      	mov	r0, r3
 800040a:	371c      	adds	r7, #28
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <__AVI_GetStreamInfo>:
  * @param  havi: AVI handle
  * @param  buf:   
  * @retval AVI status
  */
AVISTATUS __AVI_GetStreamInfo( AVI_CONTEXT * pavi, uint8_t* buf)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
  
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	3302      	adds	r3, #2
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	021b      	lsls	r3, r3, #8
 8000426:	b21a      	sxth	r2, r3
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	3303      	adds	r3, #3
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	b21b      	sxth	r3, r3
 8000430:	4313      	orrs	r3, r2
 8000432:	b21b      	sxth	r3, r3
 8000434:	b29a      	uxth	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	83da      	strh	r2, [r3, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	3304      	adds	r3, #4
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	461a      	mov	r2, r3
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	3305      	adds	r3, #5
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	021b      	lsls	r3, r3, #8
 800044a:	431a      	orrs	r2, r3
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	3306      	adds	r3, #6
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	041b      	lsls	r3, r3, #16
 8000454:	431a      	orrs	r2, r3
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	3307      	adds	r3, #7
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	061b      	lsls	r3, r3, #24
 800045e:	4313      	orrs	r3, r2
 8000460:	461a      	mov	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	621a      	str	r2, [r3, #32]
  
  if(pavi->aviInfo.StreamSize%2)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	6a1b      	ldr	r3, [r3, #32]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	2b00      	cmp	r3, #0
 8000470:	d004      	beq.n	800047c <__AVI_GetStreamInfo+0x68>
    pavi->aviInfo.StreamSize++;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6a1b      	ldr	r3, [r3, #32]
 8000476:	1c5a      	adds	r2, r3, #1
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	621a      	str	r2, [r3, #32]
  
  if((pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG) || (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG))
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	8bdb      	ldrh	r3, [r3, #30]
 8000480:	f246 4263 	movw	r2, #25699	@ 0x6463
 8000484:	4293      	cmp	r3, r2
 8000486:	d005      	beq.n	8000494 <__AVI_GetStreamInfo+0x80>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	8bdb      	ldrh	r3, [r3, #30]
 800048c:	f247 7262 	movw	r2, #30562	@ 0x7762
 8000490:	4293      	cmp	r3, r2
 8000492:	d101      	bne.n	8000498 <__AVI_GetStreamInfo+0x84>
  {
    return AVI_OK;
 8000494:	2300      	movs	r3, #0
 8000496:	e000      	b.n	800049a <__AVI_GetStreamInfo+0x86>
  }
  
  return AVI_STREAM_ERR;  
 8000498:	230b      	movs	r3, #11
}
 800049a:	4618      	mov	r0, r3
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
	...

080004a8 <__AVI_Init>:
  * @param  buf:
  * @param  size: AVI file size     
  * @retval AVI status
  */
AVISTATUS __AVI_Init( AVI_CONTEXT * pavi, uint8_t *buf, uint32_t size)     
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08e      	sub	sp, #56	@ 0x38
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
  uint16_t offset;
  uint8_t *tbuf;
  AVISTATUS   res = AVI_OK;
 80004b4:	2300      	movs	r3, #0
 80004b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  STRH_HEADER *strhheader; 
  
  STRF_BMPHEADER *bmpheader; 
  STRF_WAVHEADER *wavheader; 
  
  tbuf=buf;
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	633b      	str	r3, [r7, #48]	@ 0x30
  aviheader=(AVI_HEADER*)buf; 
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(aviheader->RiffID != AVI_RIFF_ID)
 80004c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a87      	ldr	r2, [pc, #540]	@ (80006e4 <__AVI_Init+0x23c>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d001      	beq.n	80004d0 <__AVI_Init+0x28>
  {
    return AVI_RIFF_ERR;
 80004cc:	2301      	movs	r3, #1
 80004ce:	e170      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  if(aviheader->AviID != AVI_AVI_ID)
 80004d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	4a84      	ldr	r2, [pc, #528]	@ (80006e8 <__AVI_Init+0x240>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d001      	beq.n	80004de <__AVI_Init+0x36>
  {
    return AVI_AVI_ERR;  
 80004da:	2302      	movs	r3, #2
 80004dc:	e169      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(AVI_HEADER);            
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	330c      	adds	r3, #12
 80004e2:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf);
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 80004e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a7f      	ldr	r2, [pc, #508]	@ (80006ec <__AVI_Init+0x244>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d001      	beq.n	80004f6 <__AVI_Init+0x4e>
  {
    return AVI_LIST_ERR;
 80004f2:	2303      	movs	r3, #3
 80004f4:	e15d      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_HDRL_ID)
 80004f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	4a7d      	ldr	r2, [pc, #500]	@ (80006f0 <__AVI_Init+0x248>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d001      	beq.n	8000504 <__AVI_Init+0x5c>
  {
    return AVI_HDRL_ERR;
 8000500:	2304      	movs	r3, #4
 8000502:	e156      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(LIST_HEADER);            
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	330c      	adds	r3, #12
 8000508:	60bb      	str	r3, [r7, #8]
  avihheader=(AVIH_HEADER*)(buf);                                   
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	627b      	str	r3, [r7, #36]	@ 0x24
  if(avihheader->BlockID != AVI_AVIH_ID)
 800050e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a78      	ldr	r2, [pc, #480]	@ (80006f4 <__AVI_Init+0x24c>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d001      	beq.n	800051c <__AVI_Init+0x74>
  {
    return AVI_AVIH_ERR;
 8000518:	2305      	movs	r3, #5
 800051a:	e14a      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 800051c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800051e:	689a      	ldr	r2, [r3, #8]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	601a      	str	r2, [r3, #0]
  pavi->aviInfo.TotalFrame=avihheader->TotalFrame;          
 8000524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000526:	699a      	ldr	r2, [r3, #24]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	605a      	str	r2, [r3, #4]
  buf+=avihheader->BlockSize+8;            
 800052c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	3308      	adds	r3, #8
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	4413      	add	r3, r2
 8000536:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf); 
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800053c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a6a      	ldr	r2, [pc, #424]	@ (80006ec <__AVI_Init+0x244>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d001      	beq.n	800054a <__AVI_Init+0xa2>
  {
    return AVI_LIST_ERR;
 8000546:	2303      	movs	r3, #3
 8000548:	e133      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_STRL_ID)
 800054a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	4a6a      	ldr	r2, [pc, #424]	@ (80006f8 <__AVI_Init+0x250>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d001      	beq.n	8000558 <__AVI_Init+0xb0>
  {
    return AVI_STRL_ERR;
 8000554:	2306      	movs	r3, #6
 8000556:	e12c      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  strhheader=(STRH_HEADER*)(buf+12);                                
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	330c      	adds	r3, #12
 800055c:	623b      	str	r3, [r7, #32]
  if(strhheader->BlockID != AVI_STRH_ID)
 800055e:	6a3b      	ldr	r3, [r7, #32]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a66      	ldr	r2, [pc, #408]	@ (80006fc <__AVI_Init+0x254>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d001      	beq.n	800056c <__AVI_Init+0xc4>
  {
    return AVI_STRH_ERR;
 8000568:	2307      	movs	r3, #7
 800056a:	e122      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 800056c:	6a3b      	ldr	r3, [r7, #32]
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	4a63      	ldr	r2, [pc, #396]	@ (8000700 <__AVI_Init+0x258>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d16a      	bne.n	800064c <__AVI_Init+0x1a4>
  {
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 8000576:	6a3b      	ldr	r3, [r7, #32]
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	4a62      	ldr	r2, [pc, #392]	@ (8000704 <__AVI_Init+0x25c>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d001      	beq.n	8000584 <__AVI_Init+0xdc>
    {
      return AVI_FORMAT_ERR;
 8000580:	230a      	movs	r3, #10
 8000582:	e116      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 8000584:	4a60      	ldr	r2, [pc, #384]	@ (8000708 <__AVI_Init+0x260>)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 800058a:	4a60      	ldr	r2, [pc, #384]	@ (800070c <__AVI_Init+0x264>)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	629a      	str	r2, [r3, #40]	@ 0x28
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 8000590:	6a3b      	ldr	r3, [r7, #32]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	3314      	adds	r3, #20
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	4413      	add	r3, r2
 800059a:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800059c:	69bb      	ldr	r3, [r7, #24]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a5b      	ldr	r2, [pc, #364]	@ (8000710 <__AVI_Init+0x268>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d001      	beq.n	80005aa <__AVI_Init+0x102>
    {
      return AVI_STRF_ERR;
 80005a6:	2308      	movs	r3, #8
 80005a8:	e103      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 80005aa:	69bb      	ldr	r3, [r7, #24]
 80005ac:	68da      	ldr	r2, [r3, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height; 
 80005b2:	69bb      	ldr	r3, [r7, #24]
 80005b4:	691a      	ldr	r2, [r3, #16]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	611a      	str	r2, [r3, #16]
    buf+=listheader->BlockSize+8;          
 80005ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	3308      	adds	r3, #8
 80005c0:	68ba      	ldr	r2, [r7, #8]
 80005c2:	4413      	add	r3, r2
 80005c4:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 80005ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a47      	ldr	r2, [pc, #284]	@ (80006ec <__AVI_Init+0x244>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d009      	beq.n	80005e8 <__AVI_Init+0x140>
    {
      pavi->aviInfo.SampleRate=0;          
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=0;          
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2200      	movs	r2, #0
 80005de:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=0;          
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2200      	movs	r2, #0
 80005e4:	839a      	strh	r2, [r3, #28]
 80005e6:	e0b7      	b.n	8000758 <__AVI_Init+0x2b0>
      
    }else
    {      
      if(listheader->ListType != AVI_STRL_ID)
 80005e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	4a42      	ldr	r2, [pc, #264]	@ (80006f8 <__AVI_Init+0x250>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d001      	beq.n	80005f6 <__AVI_Init+0x14e>
      {
        return AVI_STRL_ERR;    
 80005f2:	2306      	movs	r3, #6
 80005f4:	e0dd      	b.n	80007b2 <__AVI_Init+0x30a>
      }
      
      strhheader=(STRH_HEADER*)(buf+12);
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	330c      	adds	r3, #12
 80005fa:	623b      	str	r3, [r7, #32]
      if(strhheader->BlockID != AVI_STRH_ID)
 80005fc:	6a3b      	ldr	r3, [r7, #32]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a3e      	ldr	r2, [pc, #248]	@ (80006fc <__AVI_Init+0x254>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d001      	beq.n	800060a <__AVI_Init+0x162>
      {
        return AVI_STRH_ERR;
 8000606:	2307      	movs	r3, #7
 8000608:	e0d3      	b.n	80007b2 <__AVI_Init+0x30a>
      }
      
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 800060a:	6a3b      	ldr	r3, [r7, #32]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	4a41      	ldr	r2, [pc, #260]	@ (8000714 <__AVI_Init+0x26c>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d001      	beq.n	8000618 <__AVI_Init+0x170>
      {
        return AVI_FORMAT_ERR;
 8000614:	230a      	movs	r3, #10
 8000616:	e0cc      	b.n	80007b2 <__AVI_Init+0x30a>
      }
      
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 8000618:	6a3b      	ldr	r3, [r7, #32]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	3314      	adds	r3, #20
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	4413      	add	r3, r2
 8000622:	61fb      	str	r3, [r7, #28]
      if(wavheader->BlockID != AVI_STRF_ID)
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a39      	ldr	r2, [pc, #228]	@ (8000710 <__AVI_Init+0x268>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d001      	beq.n	8000632 <__AVI_Init+0x18a>
      {
        return AVI_STRF_ERR;
 800062e:	2308      	movs	r3, #8
 8000630:	e0bf      	b.n	80007b2 <__AVI_Init+0x30a>
      }
      
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	68da      	ldr	r2, [r3, #12]
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	895a      	ldrh	r2, [r3, #10]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	891a      	ldrh	r2, [r3, #8]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	839a      	strh	r2, [r3, #28]
 800064a:	e085      	b.n	8000758 <__AVI_Init+0x2b0>
    }
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 800064c:	6a3b      	ldr	r3, [r7, #32]
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	4a30      	ldr	r2, [pc, #192]	@ (8000714 <__AVI_Init+0x26c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	f040 8080 	bne.w	8000758 <__AVI_Init+0x2b0>
  { 
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 8000658:	4a2f      	ldr	r2, [pc, #188]	@ (8000718 <__AVI_Init+0x270>)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 800065e:	4a2f      	ldr	r2, [pc, #188]	@ (800071c <__AVI_Init+0x274>)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	629a      	str	r2, [r3, #40]	@ 0x28
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 8000664:	6a3b      	ldr	r3, [r7, #32]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	3314      	adds	r3, #20
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	4413      	add	r3, r2
 800066e:	61fb      	str	r3, [r7, #28]
    if(wavheader->BlockID != AVI_STRF_ID)
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a26      	ldr	r2, [pc, #152]	@ (8000710 <__AVI_Init+0x268>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d001      	beq.n	800067e <__AVI_Init+0x1d6>
    {
      return AVI_STRF_ERR;
 800067a:	2308      	movs	r3, #8
 800067c:	e099      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	68da      	ldr	r2, [r3, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	615a      	str	r2, [r3, #20]
    pavi->aviInfo.Channels=wavheader->Channels;        
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	895a      	ldrh	r2, [r3, #10]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	831a      	strh	r2, [r3, #24]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	891a      	ldrh	r2, [r3, #8]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	839a      	strh	r2, [r3, #28]
    buf+=listheader->BlockSize+8;          
 8000696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	3308      	adds	r3, #8
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	4413      	add	r3, r2
 80006a0:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 80006a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a10      	ldr	r2, [pc, #64]	@ (80006ec <__AVI_Init+0x244>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d001      	beq.n	80006b4 <__AVI_Init+0x20c>
    {
      return AVI_LIST_ERR;  
 80006b0:	2303      	movs	r3, #3
 80006b2:	e07e      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    if(listheader->ListType != AVI_STRL_ID)
 80006b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	4a0f      	ldr	r2, [pc, #60]	@ (80006f8 <__AVI_Init+0x250>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d001      	beq.n	80006c2 <__AVI_Init+0x21a>
    {
      return AVI_STRL_ERR;  
 80006be:	2306      	movs	r3, #6
 80006c0:	e077      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    strhheader=(STRH_HEADER*)(buf+12);
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	330c      	adds	r3, #12
 80006c6:	623b      	str	r3, [r7, #32]
    if(strhheader->BlockID != AVI_STRH_ID)
 80006c8:	6a3b      	ldr	r3, [r7, #32]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a0b      	ldr	r2, [pc, #44]	@ (80006fc <__AVI_Init+0x254>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d001      	beq.n	80006d6 <__AVI_Init+0x22e>
    {
      return AVI_STRH_ERR;
 80006d2:	2307      	movs	r3, #7
 80006d4:	e06d      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 80006d6:	6a3b      	ldr	r3, [r7, #32]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	4a09      	ldr	r2, [pc, #36]	@ (8000700 <__AVI_Init+0x258>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d01f      	beq.n	8000720 <__AVI_Init+0x278>
    {
      return AVI_FORMAT_ERR;
 80006e0:	230a      	movs	r3, #10
 80006e2:	e066      	b.n	80007b2 <__AVI_Init+0x30a>
 80006e4:	46464952 	.word	0x46464952
 80006e8:	20495641 	.word	0x20495641
 80006ec:	5453494c 	.word	0x5453494c
 80006f0:	6c726468 	.word	0x6c726468
 80006f4:	68697661 	.word	0x68697661
 80006f8:	6c727473 	.word	0x6c727473
 80006fc:	68727473 	.word	0x68727473
 8000700:	73646976 	.word	0x73646976
 8000704:	47504a4d 	.word	0x47504a4d
 8000708:	080123a8 	.word	0x080123a8
 800070c:	080123c0 	.word	0x080123c0
 8000710:	66727473 	.word	0x66727473
 8000714:	73647561 	.word	0x73647561
 8000718:	080123b0 	.word	0x080123b0
 800071c:	080123b8 	.word	0x080123b8
    }
    
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 8000720:	6a3b      	ldr	r3, [r7, #32]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	3314      	adds	r3, #20
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	4413      	add	r3, r2
 800072a:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a22      	ldr	r2, [pc, #136]	@ (80007bc <__AVI_Init+0x314>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d001      	beq.n	800073a <__AVI_Init+0x292>
    {
      return AVI_STRF_ERR;  
 8000736:	2308      	movs	r3, #8
 8000738:	e03b      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	4a20      	ldr	r2, [pc, #128]	@ (80007c0 <__AVI_Init+0x318>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d001      	beq.n	8000748 <__AVI_Init+0x2a0>
    {
      return AVI_FORMAT_ERR;
 8000744:	230a      	movs	r3, #10
 8000746:	e034      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	68da      	ldr	r2, [r3, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height;   
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	691a      	ldr	r2, [r3, #16]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	611a      	str	r2, [r3, #16]
  }
  offset= __AVI_SearchID(tbuf,size,(uint8_t*)"movi");
 8000758:	4a1a      	ldr	r2, [pc, #104]	@ (80007c4 <__AVI_Init+0x31c>)
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800075e:	f7ff fe17 	bl	8000390 <__AVI_SearchID>
 8000762:	4603      	mov	r3, r0
 8000764:	82fb      	strh	r3, [r7, #22]
  if(offset == 0)
 8000766:	8afb      	ldrh	r3, [r7, #22]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d101      	bne.n	8000770 <__AVI_Init+0x2c8>
  {
    return AVI_MOVI_ERR;
 800076c:	2309      	movs	r3, #9
 800076e:	e020      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  if(pavi->aviInfo.SampleRate)
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d01a      	beq.n	80007ae <__AVI_Init+0x306>
  {
    tbuf+=offset;
 8000778:	8afb      	ldrh	r3, [r7, #22]
 800077a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800077c:	4413      	add	r3, r2
 800077e:	633b      	str	r3, [r7, #48]	@ 0x30
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000784:	461a      	mov	r2, r3
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800078a:	f7ff fe01 	bl	8000390 <__AVI_SearchID>
 800078e:	4603      	mov	r3, r0
 8000790:	82fb      	strh	r3, [r7, #22]
    if(offset == 0)
 8000792:	8afb      	ldrh	r3, [r7, #22]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d101      	bne.n	800079c <__AVI_Init+0x2f4>
    {
      return AVI_STREAM_ERR;
 8000798:	230b      	movs	r3, #11
 800079a:	e00a      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    tbuf+=offset+4;
 800079c:	8afb      	ldrh	r3, [r7, #22]
 800079e:	3304      	adds	r3, #4
 80007a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80007a2:	4413      	add	r3, r2
 80007a4:	633b      	str	r3, [r7, #48]	@ 0x30
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 80007a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007a8:	881a      	ldrh	r2, [r3, #0]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	835a      	strh	r2, [r3, #26]
  }
  
  return res;
 80007ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3738      	adds	r7, #56	@ 0x38
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	66727473 	.word	0x66727473
 80007c0:	47504a4d 	.word	0x47504a4d
 80007c4:	080123c8 	.word	0x080123c8

080007c8 <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT * pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	603b      	str	r3, [r7, #0]
  uint32_t readSize= 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  
  pavi->pVideoBuffer = pVideoBuffer;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	635a      	str	r2, [r3, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	639a      	str	r2, [r3, #56]	@ 0x38

  pavi->pAudioBuffer = pAudioBuffer;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	6a3a      	ldr	r2, [r7, #32]
 80007ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  pavi->AudioBufferSize = AudioBufferSize;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007f0:	641a      	str	r2, [r3, #64]	@ 0x40
  
  f_lseek(file, 0 );
 80007f2:	2100      	movs	r1, #0
 80007f4:	68b8      	ldr	r0, [r7, #8]
 80007f6:	f010 feb2 	bl	801155e <f_lseek>
  
  f_read(file, pavi->pVideoBuffer, VideoBufferSize,(UINT*) &readSize );
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	683a      	ldr	r2, [r7, #0]
 8000804:	68b8      	ldr	r0, [r7, #8]
 8000806:	f010 fcc3 	bl	8011190 <f_read>
  if(readSize != VideoBufferSize)
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	429a      	cmp	r2, r3
 8000810:	d001      	beq.n	8000816 <AVI_ParserInit+0x4e>
  {
    return 1;
 8000812:	2301      	movs	r3, #1
 8000814:	e013      	b.n	800083e <AVI_ParserInit+0x76>
  }
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800081a:	683a      	ldr	r2, [r7, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	68f8      	ldr	r0, [r7, #12]
 8000820:	f7ff fe42 	bl	80004a8 <__AVI_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <AVI_ParserInit+0x66>
  {
    return 1;    
 800082a:	2301      	movs	r3, #1
 800082c:	e007      	b.n	800083e <AVI_ParserInit+0x76>
  }

  pavi->FileSize= f_size(file);
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	68da      	ldr	r2, [r3, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	645a      	str	r2, [r3, #68]	@ 0x44
  pavi->CurrentImage=0;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	2200      	movs	r2, #0
 800083a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  return  0;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT * pavi, FIL *file, uint8_t skipFlag)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	4613      	mov	r3, r2
 8000854:	71fb      	strb	r3, [r7, #7]
  uint32_t  offset ;
  uint32_t readSize = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  
  if(pavi->CurrentImage== 0 )
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800085e:	2b00      	cmp	r3, #0
 8000860:	d124      	bne.n	80008ac <AVI_GetFrame+0x64>
  {
    
    f_lseek(file, 0 ); /* Go to the file start */
 8000862:	2100      	movs	r1, #0
 8000864:	68b8      	ldr	r0, [r7, #8]
 8000866:	f010 fe7a 	bl	801155e <f_lseek>
    /* Read data*/
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize);
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	68b8      	ldr	r0, [r7, #8]
 8000878:	f010 fc8a 	bl	8011190 <f_read>
    
    /* Check for "movi" tag */
    offset = __AVI_SearchID(pavi->pVideoBuffer,pavi->VideoBufferSize,(uint8_t*)"movi");
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000884:	4a49      	ldr	r2, [pc, #292]	@ (80009ac <AVI_GetFrame+0x164>)
 8000886:	4619      	mov	r1, r3
 8000888:	f7ff fd82 	bl	8000390 <__AVI_SearchID>
 800088c:	6178      	str	r0, [r7, #20]
    /* Read first Frame info*/
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	3304      	adds	r3, #4
 8000896:	4413      	add	r3, r2
 8000898:	4619      	mov	r1, r3
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f7ff fdba 	bl	8000414 <__AVI_GetStreamInfo>
    /* go to the first frame offset in the avi file*/
    f_lseek(file, offset + 12 );
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	330c      	adds	r3, #12
 80008a4:	4619      	mov	r1, r3
 80008a6:	68b8      	ldr	r0, [r7, #8]
 80008a8:	f010 fe59 	bl	801155e <f_lseek>
    
  }

  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	8bdb      	ldrh	r3, [r3, #30]
 80008b0:	f246 4263 	movw	r2, #25699	@ 0x6463
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d158      	bne.n	800096a <AVI_GetFrame+0x122>
  {
    /* the Frame is a Video Frame */
       
	if(skipFlag == 1)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d11b      	bne.n	80008f6 <AVI_GetFrame+0xae>
	{

		/* Get the current frame size */
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	6a1a      	ldr	r2, [r3, #32]
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	631a      	str	r2, [r3, #48]	@ 0x30

		f_lseek(file, f_tell(file) + pavi->FrameSize);
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	699a      	ldr	r2, [r3, #24]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4413      	add	r3, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	68b8      	ldr	r0, [r7, #8]
 80008d4:	f010 fe43 	bl	801155e <f_lseek>

	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	2208      	movs	r2, #8
 80008e2:	68b8      	ldr	r0, [r7, #8]
 80008e4:	f010 fc54 	bl	8011190 <f_read>

	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ec:	4619      	mov	r1, r3
 80008ee:	68f8      	ldr	r0, [r7, #12]
 80008f0:	f7ff fd90 	bl	8000414 <__AVI_GetStreamInfo>
 80008f4:	e037      	b.n	8000966 <AVI_GetFrame+0x11e>

	}
	else if(skipFlag == 2)
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d11c      	bne.n	8000936 <AVI_GetFrame+0xee>
	{

		f_lseek(file, f_tell(file) - pavi->FrameSize - 8 - 8);
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	699a      	ldr	r2, [r3, #24]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	3b10      	subs	r3, #16
 8000908:	4619      	mov	r1, r3
 800090a:	68b8      	ldr	r0, [r7, #8]
 800090c:	f010 fe27 	bl	801155e <f_lseek>

	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	2208      	movs	r2, #8
 800091a:	68b8      	ldr	r0, [r7, #8]
 800091c:	f010 fc38 	bl	8011190 <f_read>

	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000924:	4619      	mov	r1, r3
 8000926:	68f8      	ldr	r0, [r7, #12]
 8000928:	f7ff fd74 	bl	8000414 <__AVI_GetStreamInfo>

		// Get the previous frame size
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	6a1a      	ldr	r2, [r3, #32]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	631a      	str	r2, [r3, #48]	@ 0x30
 8000934:	e017      	b.n	8000966 <AVI_GetFrame+0x11e>
	}
	else
	{

		/* Get the current frame size */
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	6a1a      	ldr	r2, [r3, #32]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Read The current frame + the header of the next frame (8 bytes) */
		f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f103 0208 	add.w	r2, r3, #8
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	68b8      	ldr	r0, [r7, #8]
 8000950:	f010 fc1e 	bl	8011190 <f_read>

		/* Get the info of the next frame */
		__AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	6a1b      	ldr	r3, [r3, #32]
 800095c:	4413      	add	r3, r2
 800095e:	4619      	mov	r1, r3
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	f7ff fd57 	bl	8000414 <__AVI_GetStreamInfo>
    	/* Return VIDEO frame */

	}
    
    return AVI_VIDEO_FRAME;
 8000966:	2301      	movs	r3, #1
 8000968:	e01c      	b.n	80009a4 <AVI_GetFrame+0x15c>
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	8bdb      	ldrh	r3, [r3, #30]
 800096e:	f247 7262 	movw	r2, #30562	@ 0x7762
 8000972:	4293      	cmp	r3, r2
 8000974:	d115      	bne.n	80009a2 <AVI_GetFrame+0x15a>
  { /* the Frame is an Audio Frame */
    
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f103 0208 	add.w	r2, r3, #8
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	68b8      	ldr	r0, [r7, #8]
 8000988:	f010 fc02 	bl	8011190 <f_read>

    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	6a1b      	ldr	r3, [r3, #32]
 8000994:	4413      	add	r3, r2
 8000996:	4619      	mov	r1, r3
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f7ff fd3b 	bl	8000414 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
 800099e:	2302      	movs	r3, #2
 80009a0:	e000      	b.n	80009a4 <AVI_GetFrame+0x15c>
    
  }
  
  return 0;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	080123c8 	.word	0x080123c8

080009b0 <GC9A01_set_reset>:
uint8_t spi_dma_not_ready = 0;

//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d105      	bne.n	80009cc <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2104      	movs	r1, #4
 80009c4:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <GC9A01_set_reset+0x30>)
 80009c6:	f005 fa5d 	bl	8005e84 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 80009ca:	e004      	b.n	80009d6 <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2104      	movs	r1, #4
 80009d0:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <GC9A01_set_reset+0x30>)
 80009d2:	f005 fa57 	bl	8005e84 <HAL_GPIO_WritePin>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	58020400 	.word	0x58020400

080009e4 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d105      	bne.n	8000a00 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2102      	movs	r1, #2
 80009f8:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <GC9A01_set_data_command+0x30>)
 80009fa:	f005 fa43 	bl	8005e84 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 80009fe:	e004      	b.n	8000a0a <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2102      	movs	r1, #2
 8000a04:	4803      	ldr	r0, [pc, #12]	@ (8000a14 <GC9A01_set_data_command+0x30>)
 8000a06:	f005 fa3d 	bl	8005e84 <HAL_GPIO_WritePin>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	58020400 	.word	0x58020400

08000a18 <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d105      	bne.n	8000a34 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4806      	ldr	r0, [pc, #24]	@ (8000a48 <GC9A01_set_chip_select+0x30>)
 8000a2e:	f005 fa29 	bl	8005e84 <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000a32:	e004      	b.n	8000a3e <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	2101      	movs	r1, #1
 8000a38:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <GC9A01_set_chip_select+0x30>)
 8000a3a:	f005 fa23 	bl	8005e84 <HAL_GPIO_WritePin>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	58020400 	.word	0x58020400

08000a4c <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff ffc4 	bl	80009e4 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff ffdb 	bl	8000a18 <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	2101      	movs	r1, #1
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fac4 	bl	8000ff4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff ffd3 	bl	8000a18 <GC9A01_set_chip_select>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f7ff ffad 	bl	80009e4 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff ffc4 	bl	8000a18 <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	4619      	mov	r1, r3
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f000 faac 	bl	8000ff4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f7ff ffbb 	bl	8000a18 <GC9A01_set_chip_select>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ffde 	bl	8000a7a <GC9A01_write_data>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <GC9A01_init>:
void GC9A01_write_continue(uint8_t *data, size_t len) {
    GC9A01_write_command(MEM_WR_CONT);
    GC9A01_write_data(data, len);
}

void GC9A01_init(void) {
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 8000aca:	2001      	movs	r0, #1
 8000acc:	f7ff ffa4 	bl	8000a18 <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000ad0:	2005      	movs	r0, #5
 8000ad2:	f001 fff1 	bl	8002ab8 <HAL_Delay>
    GC9A01_set_reset(OFF);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff ff6a 	bl	80009b0 <GC9A01_set_reset>
    HAL_Delay(10);
 8000adc:	200a      	movs	r0, #10
 8000ade:	f001 ffeb 	bl	8002ab8 <HAL_Delay>
    GC9A01_set_reset(ON);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f7ff ff64 	bl	80009b0 <GC9A01_set_reset>
    HAL_Delay(120);
 8000ae8:	2078      	movs	r0, #120	@ 0x78
 8000aea:	f001 ffe5 	bl	8002ab8 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000aee:	20ef      	movs	r0, #239	@ 0xef
 8000af0:	f7ff ffac 	bl	8000a4c <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000af4:	20eb      	movs	r0, #235	@ 0xeb
 8000af6:	f7ff ffa9 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000afa:	2014      	movs	r0, #20
 8000afc:	f7ff ffd5 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000b00:	20fe      	movs	r0, #254	@ 0xfe
 8000b02:	f7ff ffa3 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 8000b06:	20ef      	movs	r0, #239	@ 0xef
 8000b08:	f7ff ffa0 	bl	8000a4c <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000b0c:	20eb      	movs	r0, #235	@ 0xeb
 8000b0e:	f7ff ff9d 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000b12:	2014      	movs	r0, #20
 8000b14:	f7ff ffc9 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 8000b18:	2084      	movs	r0, #132	@ 0x84
 8000b1a:	f7ff ff97 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 8000b1e:	2040      	movs	r0, #64	@ 0x40
 8000b20:	f7ff ffc3 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 8000b24:	2085      	movs	r0, #133	@ 0x85
 8000b26:	f7ff ff91 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000b2a:	20ff      	movs	r0, #255	@ 0xff
 8000b2c:	f7ff ffbd 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 8000b30:	2086      	movs	r0, #134	@ 0x86
 8000b32:	f7ff ff8b 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	f7ff ffb7 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 8000b3c:	2087      	movs	r0, #135	@ 0x87
 8000b3e:	f7ff ff85 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000b42:	20ff      	movs	r0, #255	@ 0xff
 8000b44:	f7ff ffb1 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 8000b48:	2088      	movs	r0, #136	@ 0x88
 8000b4a:	f7ff ff7f 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 8000b4e:	200a      	movs	r0, #10
 8000b50:	f7ff ffab 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 8000b54:	2089      	movs	r0, #137	@ 0x89
 8000b56:	f7ff ff79 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000b5a:	2021      	movs	r0, #33	@ 0x21
 8000b5c:	f7ff ffa5 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 8000b60:	208a      	movs	r0, #138	@ 0x8a
 8000b62:	f7ff ff73 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff ff9f 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 8000b6c:	208b      	movs	r0, #139	@ 0x8b
 8000b6e:	f7ff ff6d 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000b72:	2080      	movs	r0, #128	@ 0x80
 8000b74:	f7ff ff99 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 8000b78:	208c      	movs	r0, #140	@ 0x8c
 8000b7a:	f7ff ff67 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff ff93 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 8000b84:	208d      	movs	r0, #141	@ 0x8d
 8000b86:	f7ff ff61 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f7ff ff8d 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 8000b90:	208e      	movs	r0, #142	@ 0x8e
 8000b92:	f7ff ff5b 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000b96:	20ff      	movs	r0, #255	@ 0xff
 8000b98:	f7ff ff87 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 8000b9c:	208f      	movs	r0, #143	@ 0x8f
 8000b9e:	f7ff ff55 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000ba2:	20ff      	movs	r0, #255	@ 0xff
 8000ba4:	f7ff ff81 	bl	8000aaa <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 8000ba8:	20b6      	movs	r0, #182	@ 0xb6
 8000baa:	f7ff ff4f 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff ff7b 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff ff78 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 8000bba:	2036      	movs	r0, #54	@ 0x36
 8000bbc:	f7ff ff46 	bl	8000a4c <GC9A01_write_command>
    
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
 8000bc0:	2018      	movs	r0, #24
 8000bc2:	f7ff ff72 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x48);
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 8000bc6:	203a      	movs	r0, #58	@ 0x3a
 8000bc8:	f7ff ff40 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000bcc:	2005      	movs	r0, #5
 8000bce:	f7ff ff6c 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000bd2:	2090      	movs	r0, #144	@ 0x90
 8000bd4:	f7ff ff3a 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 8000bd8:	2008      	movs	r0, #8
 8000bda:	f7ff ff66 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000bde:	2008      	movs	r0, #8
 8000be0:	f7ff ff63 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000be4:	2008      	movs	r0, #8
 8000be6:	f7ff ff60 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000bea:	2008      	movs	r0, #8
 8000bec:	f7ff ff5d 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000bf0:	20bd      	movs	r0, #189	@ 0xbd
 8000bf2:	f7ff ff2b 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 8000bf6:	2006      	movs	r0, #6
 8000bf8:	f7ff ff57 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000bfc:	20bc      	movs	r0, #188	@ 0xbc
 8000bfe:	f7ff ff25 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff ff51 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 8000c08:	20ff      	movs	r0, #255	@ 0xff
 8000c0a:	f7ff ff1f 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000c0e:	2060      	movs	r0, #96	@ 0x60
 8000c10:	f7ff ff4b 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f7ff ff48 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8000c1a:	2004      	movs	r0, #4
 8000c1c:	f7ff ff45 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 8000c20:	20c3      	movs	r0, #195	@ 0xc3
 8000c22:	f7ff ff13 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000c26:	2013      	movs	r0, #19
 8000c28:	f7ff ff3f 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 8000c2c:	20c4      	movs	r0, #196	@ 0xc4
 8000c2e:	f7ff ff0d 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000c32:	2013      	movs	r0, #19
 8000c34:	f7ff ff39 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 8000c38:	20c9      	movs	r0, #201	@ 0xc9
 8000c3a:	f7ff ff07 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 8000c3e:	2022      	movs	r0, #34	@ 0x22
 8000c40:	f7ff ff33 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 8000c44:	20be      	movs	r0, #190	@ 0xbe
 8000c46:	f7ff ff01 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 8000c4a:	2011      	movs	r0, #17
 8000c4c:	f7ff ff2d 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 8000c50:	20e1      	movs	r0, #225	@ 0xe1
 8000c52:	f7ff fefb 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000c56:	2010      	movs	r0, #16
 8000c58:	f7ff ff27 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8000c5c:	200e      	movs	r0, #14
 8000c5e:	f7ff ff24 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 8000c62:	20df      	movs	r0, #223	@ 0xdf
 8000c64:	f7ff fef2 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000c68:	2021      	movs	r0, #33	@ 0x21
 8000c6a:	f7ff ff1e 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 8000c6e:	200c      	movs	r0, #12
 8000c70:	f7ff ff1b 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 8000c74:	2002      	movs	r0, #2
 8000c76:	f7ff ff18 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 8000c7a:	20f0      	movs	r0, #240	@ 0xf0
 8000c7c:	f7ff fee6 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000c80:	2045      	movs	r0, #69	@ 0x45
 8000c82:	f7ff ff12 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000c86:	2009      	movs	r0, #9
 8000c88:	f7ff ff0f 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000c8c:	2008      	movs	r0, #8
 8000c8e:	f7ff ff0c 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000c92:	2008      	movs	r0, #8
 8000c94:	f7ff ff09 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000c98:	2026      	movs	r0, #38	@ 0x26
 8000c9a:	f7ff ff06 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000c9e:	202a      	movs	r0, #42	@ 0x2a
 8000ca0:	f7ff ff03 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 8000ca4:	20f1      	movs	r0, #241	@ 0xf1
 8000ca6:	f7ff fed1 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000caa:	2043      	movs	r0, #67	@ 0x43
 8000cac:	f7ff fefd 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000cb0:	2070      	movs	r0, #112	@ 0x70
 8000cb2:	f7ff fefa 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000cb6:	2072      	movs	r0, #114	@ 0x72
 8000cb8:	f7ff fef7 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000cbc:	2036      	movs	r0, #54	@ 0x36
 8000cbe:	f7ff fef4 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000cc2:	2037      	movs	r0, #55	@ 0x37
 8000cc4:	f7ff fef1 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000cc8:	206f      	movs	r0, #111	@ 0x6f
 8000cca:	f7ff feee 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000cce:	20f2      	movs	r0, #242	@ 0xf2
 8000cd0:	f7ff febc 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000cd4:	2045      	movs	r0, #69	@ 0x45
 8000cd6:	f7ff fee8 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000cda:	2009      	movs	r0, #9
 8000cdc:	f7ff fee5 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000ce0:	2008      	movs	r0, #8
 8000ce2:	f7ff fee2 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000ce6:	2008      	movs	r0, #8
 8000ce8:	f7ff fedf 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000cec:	2026      	movs	r0, #38	@ 0x26
 8000cee:	f7ff fedc 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000cf2:	202a      	movs	r0, #42	@ 0x2a
 8000cf4:	f7ff fed9 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 8000cf8:	20f3      	movs	r0, #243	@ 0xf3
 8000cfa:	f7ff fea7 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000cfe:	2043      	movs	r0, #67	@ 0x43
 8000d00:	f7ff fed3 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000d04:	2070      	movs	r0, #112	@ 0x70
 8000d06:	f7ff fed0 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000d0a:	2072      	movs	r0, #114	@ 0x72
 8000d0c:	f7ff fecd 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000d10:	2036      	movs	r0, #54	@ 0x36
 8000d12:	f7ff feca 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000d16:	2037      	movs	r0, #55	@ 0x37
 8000d18:	f7ff fec7 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000d1c:	206f      	movs	r0, #111	@ 0x6f
 8000d1e:	f7ff fec4 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 8000d22:	20ed      	movs	r0, #237	@ 0xed
 8000d24:	f7ff fe92 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 8000d28:	201b      	movs	r0, #27
 8000d2a:	f7ff febe 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 8000d2e:	200b      	movs	r0, #11
 8000d30:	f7ff febb 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 8000d34:	20ae      	movs	r0, #174	@ 0xae
 8000d36:	f7ff fe89 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 8000d3a:	2077      	movs	r0, #119	@ 0x77
 8000d3c:	f7ff feb5 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 8000d40:	20cd      	movs	r0, #205	@ 0xcd
 8000d42:	f7ff fe83 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 8000d46:	2063      	movs	r0, #99	@ 0x63
 8000d48:	f7ff feaf 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 8000d4c:	2070      	movs	r0, #112	@ 0x70
 8000d4e:	f7ff fe7d 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 8000d52:	2007      	movs	r0, #7
 8000d54:	f7ff fea9 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000d58:	2007      	movs	r0, #7
 8000d5a:	f7ff fea6 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8000d5e:	2004      	movs	r0, #4
 8000d60:	f7ff fea3 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8000d64:	200e      	movs	r0, #14
 8000d66:	f7ff fea0 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000d6a:	200f      	movs	r0, #15
 8000d6c:	f7ff fe9d 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000d70:	2009      	movs	r0, #9
 8000d72:	f7ff fe9a 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000d76:	2007      	movs	r0, #7
 8000d78:	f7ff fe97 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000d7c:	2008      	movs	r0, #8
 8000d7e:	f7ff fe94 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 8000d82:	2003      	movs	r0, #3
 8000d84:	f7ff fe91 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 8000d88:	20e8      	movs	r0, #232	@ 0xe8
 8000d8a:	f7ff fe5f 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 8000d8e:	2034      	movs	r0, #52	@ 0x34
 8000d90:	f7ff fe8b 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 8000d94:	2062      	movs	r0, #98	@ 0x62
 8000d96:	f7ff fe59 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000d9a:	2018      	movs	r0, #24
 8000d9c:	f7ff fe85 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 8000da0:	200d      	movs	r0, #13
 8000da2:	f7ff fe82 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000da6:	2071      	movs	r0, #113	@ 0x71
 8000da8:	f7ff fe7f 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 8000dac:	20ed      	movs	r0, #237	@ 0xed
 8000dae:	f7ff fe7c 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000db2:	2070      	movs	r0, #112	@ 0x70
 8000db4:	f7ff fe79 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000db8:	2070      	movs	r0, #112	@ 0x70
 8000dba:	f7ff fe76 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000dbe:	2018      	movs	r0, #24
 8000dc0:	f7ff fe73 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000dc4:	200f      	movs	r0, #15
 8000dc6:	f7ff fe70 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000dca:	2071      	movs	r0, #113	@ 0x71
 8000dcc:	f7ff fe6d 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 8000dd0:	20ef      	movs	r0, #239	@ 0xef
 8000dd2:	f7ff fe6a 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000dd6:	2070      	movs	r0, #112	@ 0x70
 8000dd8:	f7ff fe67 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000ddc:	2070      	movs	r0, #112	@ 0x70
 8000dde:	f7ff fe64 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8000de2:	2063      	movs	r0, #99	@ 0x63
 8000de4:	f7ff fe32 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000de8:	2018      	movs	r0, #24
 8000dea:	f7ff fe5e 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8000dee:	2011      	movs	r0, #17
 8000df0:	f7ff fe5b 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000df4:	2071      	movs	r0, #113	@ 0x71
 8000df6:	f7ff fe58 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000dfa:	20f1      	movs	r0, #241	@ 0xf1
 8000dfc:	f7ff fe55 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000e00:	2070      	movs	r0, #112	@ 0x70
 8000e02:	f7ff fe52 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000e06:	2070      	movs	r0, #112	@ 0x70
 8000e08:	f7ff fe4f 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000e0c:	2018      	movs	r0, #24
 8000e0e:	f7ff fe4c 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 8000e12:	2013      	movs	r0, #19
 8000e14:	f7ff fe49 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000e18:	2071      	movs	r0, #113	@ 0x71
 8000e1a:	f7ff fe46 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 8000e1e:	20f3      	movs	r0, #243	@ 0xf3
 8000e20:	f7ff fe43 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000e24:	2070      	movs	r0, #112	@ 0x70
 8000e26:	f7ff fe40 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000e2a:	2070      	movs	r0, #112	@ 0x70
 8000e2c:	f7ff fe3d 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 8000e30:	2064      	movs	r0, #100	@ 0x64
 8000e32:	f7ff fe0b 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 8000e36:	2028      	movs	r0, #40	@ 0x28
 8000e38:	f7ff fe37 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 8000e3c:	2029      	movs	r0, #41	@ 0x29
 8000e3e:	f7ff fe34 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000e42:	20f1      	movs	r0, #241	@ 0xf1
 8000e44:	f7ff fe31 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f7ff fe2e 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000e4e:	20f1      	movs	r0, #241	@ 0xf1
 8000e50:	f7ff fe2b 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000e54:	2000      	movs	r0, #0
 8000e56:	f7ff fe28 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000e5a:	2007      	movs	r0, #7
 8000e5c:	f7ff fe25 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 8000e60:	2066      	movs	r0, #102	@ 0x66
 8000e62:	f7ff fdf3 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 8000e66:	203c      	movs	r0, #60	@ 0x3c
 8000e68:	f7ff fe1f 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fe1c 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 8000e72:	20cd      	movs	r0, #205	@ 0xcd
 8000e74:	f7ff fe19 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 8000e78:	2067      	movs	r0, #103	@ 0x67
 8000e7a:	f7ff fe16 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000e7e:	2045      	movs	r0, #69	@ 0x45
 8000e80:	f7ff fe13 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000e84:	2045      	movs	r0, #69	@ 0x45
 8000e86:	f7ff fe10 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000e8a:	2010      	movs	r0, #16
 8000e8c:	f7ff fe0d 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff fe0a 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff fe07 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f7ff fe04 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 8000ea2:	2067      	movs	r0, #103	@ 0x67
 8000ea4:	f7ff fdd2 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff fdfe 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 8000eae:	203c      	movs	r0, #60	@ 0x3c
 8000eb0:	f7ff fdfb 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff fdf8 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff fdf5 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff fdf2 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f7ff fdef 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 8000ecc:	2054      	movs	r0, #84	@ 0x54
 8000ece:	f7ff fdec 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000ed2:	2010      	movs	r0, #16
 8000ed4:	f7ff fde9 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 8000ed8:	2032      	movs	r0, #50	@ 0x32
 8000eda:	f7ff fde6 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8000ede:	2098      	movs	r0, #152	@ 0x98
 8000ee0:	f7ff fde3 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8000ee4:	2074      	movs	r0, #116	@ 0x74
 8000ee6:	f7ff fdb1 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000eea:	2010      	movs	r0, #16
 8000eec:	f7ff fddd 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8000ef0:	2085      	movs	r0, #133	@ 0x85
 8000ef2:	f7ff fdda 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 8000ef6:	2080      	movs	r0, #128	@ 0x80
 8000ef8:	f7ff fdd7 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff fdd4 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff fdd1 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 8000f08:	204e      	movs	r0, #78	@ 0x4e
 8000f0a:	f7ff fdce 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff fdcb 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 8000f14:	2098      	movs	r0, #152	@ 0x98
 8000f16:	f7ff fd99 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 8000f1a:	203e      	movs	r0, #62	@ 0x3e
 8000f1c:	f7ff fdc5 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000f20:	2007      	movs	r0, #7
 8000f22:	f7ff fdc2 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 8000f26:	2035      	movs	r0, #53	@ 0x35
 8000f28:	f7ff fd90 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8000f2c:	2021      	movs	r0, #33	@ 0x21
 8000f2e:	f7ff fd8d 	bl	8000a4c <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 8000f32:	2011      	movs	r0, #17
 8000f34:	f7ff fd8a 	bl	8000a4c <GC9A01_write_command>
    HAL_Delay(120);
 8000f38:	2078      	movs	r0, #120	@ 0x78
 8000f3a:	f001 fdbd 	bl	8002ab8 <HAL_Delay>
    GC9A01_write_command(0x29);
 8000f3e:	2029      	movs	r0, #41	@ 0x29
 8000f40:	f7ff fd84 	bl	8000a4c <GC9A01_write_command>
    HAL_Delay(20);
 8000f44:	2014      	movs	r0, #20
 8000f46:	f001 fdb7 	bl	8002ab8 <HAL_Delay>
    
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <GC9A01_set_frame>:

void GC9A01_set_frame(struct GC9A01_frame frame) {
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	463b      	mov	r3, r7
 8000f56:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t data[4];
    
    GC9A01_write_command(COL_ADDR_SET);
 8000f5a:	202a      	movs	r0, #42	@ 0x2a
 8000f5c:	f7ff fd76 	bl	8000a4c <GC9A01_write_command>
    data[0] = (frame.start.X >> 8) & 0xFF;
 8000f60:	883b      	ldrh	r3, [r7, #0]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.X & 0xFF;
 8000f6a:	883b      	ldrh	r3, [r7, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.X >> 8) & 0xFF;
 8000f70:	88bb      	ldrh	r3, [r7, #4]
 8000f72:	0a1b      	lsrs	r3, r3, #8
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.X & 0xFF;
 8000f7a:	88bb      	ldrh	r3, [r7, #4]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2104      	movs	r1, #4
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fd77 	bl	8000a7a <GC9A01_write_data>

    GC9A01_write_command(ROW_ADDR_SET);
 8000f8c:	202b      	movs	r0, #43	@ 0x2b
 8000f8e:	f7ff fd5d 	bl	8000a4c <GC9A01_write_command>
    data[0] = (frame.start.Y >> 8) & 0xFF;
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.Y & 0xFF;
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.Y >> 8) & 0xFF;
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.Y & 0xFF;
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fd5e 	bl	8000a7a <GC9A01_write_data>
    
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <GC9A01_sleep_mode>:


void GC9A01_sleep_mode(uint8_t command)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	71fb      	strb	r3, [r7, #7]

	if(command)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <GC9A01_sleep_mode+0x18>
		GC9A01_write_command(SLEEP_MODE_ON);
 8000fd6:	2010      	movs	r0, #16
 8000fd8:	f7ff fd38 	bl	8000a4c <GC9A01_write_command>
 8000fdc:	e002      	b.n	8000fe4 <GC9A01_sleep_mode+0x1e>
	else
		GC9A01_write_command(SLEEP_MODE_OFF);
 8000fde:	2011      	movs	r0, #17
 8000fe0:	f7ff fd34 	bl	8000a4c <GC9A01_write_command>

	HAL_Delay(120);
 8000fe4:	2078      	movs	r0, #120	@ 0x78
 8000fe6:	f001 fd67 	bl	8002ab8 <HAL_Delay>

}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
int GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]

	//ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);

	//while(spi_dma_not_ready);

	spi_dma_not_ready = 1;
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <GC9A01_spi_tx+0x40>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001006:	887b      	ldrh	r3, [r7, #2]
 8001008:	461a      	mov	r2, r3
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	480a      	ldr	r0, [pc, #40]	@ (8001038 <GC9A01_spi_tx+0x44>)
 800100e:	f00c fdb9 	bl	800db84 <HAL_SPI_Transmit_DMA>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <GC9A01_spi_tx+0x48>)
 8001018:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 800101a:	4b08      	ldr	r3, [pc, #32]	@ (800103c <GC9A01_spi_tx+0x48>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <GC9A01_spi_tx+0x34>
		return -1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	e000      	b.n	800102a <GC9A01_spi_tx+0x36>

	return 1;
 8001028:	2301      	movs	r3, #1

}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	24000084 	.word	0x24000084
 8001038:	24000118 	.word	0x24000118
 800103c:	24000085 	.word	0x24000085

08001040 <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
int JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af02      	add	r7, sp, #8
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	603b      	str	r3, [r7, #0]
  JPEGSourceAddress =  FrameSourceAddress ;
 800104e:	4a14      	ldr	r2, [pc, #80]	@ (80010a0 <JPEG_Decode_DMA+0x60>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 8001054:	4a13      	ldr	r2, [pc, #76]	@ (80010a4 <JPEG_Decode_DMA+0x64>)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	6013      	str	r3, [r2, #0]
  Input_frameIndex=0;
 800105a:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <JPEG_Decode_DMA+0x68>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
  Input_frameSize = FrameSize;
 8001060:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <JPEG_Decode_DMA+0x6c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]

  Jpeg_HWDecodingEnd = 0;
 8001066:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <JPEG_Decode_DMA+0x70>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
  
  /* Start JPEG decoding with DMA method */
  if(HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT) != HAL_OK)
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <JPEG_Decode_DMA+0x60>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <JPEG_Decode_DMA+0x64>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	4613      	mov	r3, r2
 8001080:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f005 f848 	bl	800611a <HAL_JPEG_Decode_DMA>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <JPEG_Decode_DMA+0x56>
	  return -1;
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	e000      	b.n	8001098 <JPEG_Decode_DMA+0x58>
  
  
  return 1;
 8001096:	2301      	movs	r3, #1
  
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	24000090 	.word	0x24000090
 80010a4:	2400008c 	.word	0x2400008c
 80010a8:	24000098 	.word	0x24000098
 80010ac:	24000094 	.word	0x24000094
 80010b0:	24000088 	.word	0x24000088

080010b4 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <HAL_JPEG_GetDataCallback+0x70>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	4413      	add	r3, r2
 80010de:	4a17      	ldr	r2, [pc, #92]	@ (800113c <HAL_JPEG_GetDataCallback+0x70>)
 80010e0:	6013      	str	r3, [r2, #0]
  if( Input_frameIndex < Input_frameSize)
 80010e2:	4b16      	ldr	r3, [pc, #88]	@ (800113c <HAL_JPEG_GetDataCallback+0x70>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <HAL_JPEG_GetDataCallback+0x74>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d218      	bcs.n	8001120 <HAL_JPEG_GetDataCallback+0x54>
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <HAL_JPEG_GetDataCallback+0x78>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a13      	ldr	r2, [pc, #76]	@ (8001144 <HAL_JPEG_GetDataCallback+0x78>)
 80010f8:	6013      	str	r3, [r2, #0]
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <HAL_JPEG_GetDataCallback+0x74>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <HAL_JPEG_GetDataCallback+0x70>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001108:	d303      	bcc.n	8001112 <HAL_JPEG_GetDataCallback+0x46>
    {
      inDataLength = CHUNK_SIZE_IN;
 800110a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	e008      	b.n	8001124 <HAL_JPEG_GetDataCallback+0x58>
    }
    else
    {
      inDataLength = Input_frameSize - Input_frameIndex;
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <HAL_JPEG_GetDataCallback+0x74>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <HAL_JPEG_GetDataCallback+0x70>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	e001      	b.n	8001124 <HAL_JPEG_GetDataCallback+0x58>
    }    
  }
  else
  {
    inDataLength = 0; 
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 8001124:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <HAL_JPEG_GetDataCallback+0x78>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4619      	mov	r1, r3
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f005 f8af 	bl	8006290 <HAL_JPEG_ConfigInputBuffer>
  
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	24000098 	.word	0x24000098
 8001140:	24000094 	.word	0x24000094
 8001144:	24000090 	.word	0x24000090

08001148 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <HAL_JPEG_DataReadyCallback+0x30>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	4a06      	ldr	r2, [pc, #24]	@ (8001178 <HAL_JPEG_DataReadyCallback+0x30>)
 800115e:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <HAL_JPEG_DataReadyCallback+0x30>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001168:	4619      	mov	r1, r3
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f005 f8a2 	bl	80062b4 <HAL_JPEG_ConfigOutputBuffer>
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	2400008c 	.word	0x2400008c

0800117c <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  Error_Handler();
 8001184:	f000 fae6 	bl	8001754 <Error_Handler>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1; 
 8001198:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <HAL_JPEG_DecodeCpltCallback+0x1c>)
 800119a:	2201      	movs	r2, #1
 800119c:	601a      	str	r2, [r3, #0]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	24000088 	.word	0x24000088

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001264 <main+0xb4>)
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d11b      	bne.n	80011f8 <main+0x48>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011c0:	f3bf 8f4f 	dsb	sy
}
 80011c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011c6:	f3bf 8f6f 	isb	sy
}
 80011ca:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011cc:	4b25      	ldr	r3, [pc, #148]	@ (8001264 <main+0xb4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011d4:	f3bf 8f4f 	dsb	sy
}
 80011d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011da:	f3bf 8f6f 	isb	sy
}
 80011de:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011e0:	4b20      	ldr	r3, [pc, #128]	@ (8001264 <main+0xb4>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001264 <main+0xb4>)
 80011e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80011ec:	f3bf 8f4f 	dsb	sy
}
 80011f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f2:	f3bf 8f6f 	isb	sy
}
 80011f6:	e000      	b.n	80011fa <main+0x4a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011f8:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fa:	f001 fbcb 	bl	8002994 <HAL_Init>

  HAL_Delay(500);
 80011fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001202:	f001 fc59 	bl	8002ab8 <HAL_Delay>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001206:	f000 f833 	bl	8001270 <SystemClock_Config>

  HAL_Delay(500);
 800120a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800120e:	f001 fc53 	bl	8002ab8 <HAL_Delay>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001212:	f000 f9eb 	bl	80015ec <MX_GPIO_Init>
  MX_DMA2D_Init();
 8001216:	f000 f8a7 	bl	8001368 <MX_DMA2D_Init>
  MX_SDMMC1_SD_Init();
 800121a:	f000 f913 	bl	8001444 <MX_SDMMC1_SD_Init>
  MX_DMA_Init();
 800121e:	f000 f8dd 	bl	80013dc <MX_DMA_Init>
  MX_SPI1_Init();
 8001222:	f000 f92f 	bl	8001484 <MX_SPI1_Init>
  MX_RTC_Init();
 8001226:	f000 f983 	bl	8001530 <MX_RTC_Init>
  //MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 800122a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800122e:	f001 fc43 	bl	8002ab8 <HAL_Delay>
  JPEG_Handle.Instance = JPEG;
 8001232:	4b0d      	ldr	r3, [pc, #52]	@ (8001268 <main+0xb8>)
 8001234:	4a0d      	ldr	r2, [pc, #52]	@ (800126c <main+0xbc>)
 8001236:	601a      	str	r2, [r3, #0]
  MX_JPEG_Init();
 8001238:	f000 f8f0 	bl	800141c <MX_JPEG_Init>

  HAL_Delay(500);
 800123c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001240:	f001 fc3a 	bl	8002ab8 <HAL_Delay>
  GC9A01_init();
 8001244:	f7ff fc3f 	bl	8000ac6 <GC9A01_init>
  HAL_Delay(500);
 8001248:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800124c:	f001 fc34 	bl	8002ab8 <HAL_Delay>

  smart_watch_init();
 8001250:	f000 fa86 	bl	8001760 <smart_watch_init>

  HAL_Delay(500);
 8001254:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001258:	f001 fc2e 	bl	8002ab8 <HAL_Delay>

  if(TEST == 0)
  {

	  smart_watch_process();
 800125c:	f000 fac2 	bl	80017e4 <smart_watch_process>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <main+0xb0>
 8001264:	e000ed00 	.word	0xe000ed00
 8001268:	24000218 	.word	0x24000218
 800126c:	52003000 	.word	0x52003000

08001270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b09c      	sub	sp, #112	@ 0x70
 8001274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800127a:	224c      	movs	r2, #76	@ 0x4c
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f010 fc06 	bl	8011a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2220      	movs	r2, #32
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f010 fc00 	bl	8011a90 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001290:	4b33      	ldr	r3, [pc, #204]	@ (8001360 <SystemClock_Config+0xf0>)
 8001292:	f04f 32ff 	mov.w	r2, #4294967295
 8001296:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800129a:	2002      	movs	r0, #2
 800129c:	f007 f888 	bl	80083b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012a0:	2300      	movs	r3, #0
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001364 <SystemClock_Config+0xf4>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001364 <SystemClock_Config+0xf4>)
 80012aa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001364 <SystemClock_Config+0xf4>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012bc:	bf00      	nop
 80012be:	4b29      	ldr	r3, [pc, #164]	@ (8001364 <SystemClock_Config+0xf4>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012ca:	d1f8      	bne.n	80012be <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 80012cc:	2306      	movs	r3, #6
 80012ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012d0:	2301      	movs	r3, #1
 80012d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
 80012d4:	2301      	movs	r3, #1
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
 80012d8:	2301      	movs	r3, #1
 80012da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80012dc:	2301      	movs	r3, #1
 80012de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80012e0:	2340      	movs	r3, #64	@ 0x40
 80012e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e4:	2302      	movs	r3, #2
 80012e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e8:	2300      	movs	r3, #0
 80012ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012ec:	2304      	movs	r3, #4
 80012ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 23;
 80012f0:	2317      	movs	r3, #23
 80012f2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80012f8:	2306      	movs	r3, #6
 80012fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001300:	230c      	movs	r3, #12
 8001302:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001304:	2300      	movs	r3, #0
 8001306:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001310:	4618      	mov	r0, r3
 8001312:	f007 f887 	bl	8008424 <HAL_RCC_OscConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800131c:	f000 fa1a 	bl	8001754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001320:	233f      	movs	r3, #63	@ 0x3f
 8001322:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001324:	2303      	movs	r3, #3
 8001326:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800132c:	2308      	movs	r3, #8
 800132e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001330:	2340      	movs	r3, #64	@ 0x40
 8001332:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001334:	2340      	movs	r3, #64	@ 0x40
 8001336:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001338:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800133c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800133e:	2340      	movs	r3, #64	@ 0x40
 8001340:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2102      	movs	r1, #2
 8001346:	4618      	mov	r0, r3
 8001348:	f007 fc9e 	bl	8008c88 <HAL_RCC_ClockConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001352:	f000 f9ff 	bl	8001754 <Error_Handler>
  }
}
 8001356:	bf00      	nop
 8001358:	3770      	adds	r7, #112	@ 0x70
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	58024400 	.word	0x58024400
 8001364:	58024800 	.word	0x58024800

08001368 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  DMA2D_Handle.Instance = DMA2D;
 800136c:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <MX_DMA2D_Init+0x6c>)
 800136e:	4a1a      	ldr	r2, [pc, #104]	@ (80013d8 <MX_DMA2D_Init+0x70>)
 8001370:	601a      	str	r2, [r3, #0]
  DMA2D_Handle.Init.Mode = DMA2D_M2M;
 8001372:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <MX_DMA2D_Init+0x6c>)
 8001374:	2200      	movs	r2, #0
 8001376:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001378:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <MX_DMA2D_Init+0x6c>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = 0;
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <MX_DMA2D_Init+0x6c>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.LayerCfg[1].InputOffset = 0;
 8001384:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <MX_DMA2D_Init+0x6c>)
 8001386:	2200      	movs	r2, #0
 8001388:	645a      	str	r2, [r3, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800138a:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <MX_DMA2D_Init+0x6c>)
 800138c:	2200      	movs	r2, #0
 800138e:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001390:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <MX_DMA2D_Init+0x6c>)
 8001392:	2200      	movs	r2, #0
 8001394:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0;
 8001396:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <MX_DMA2D_Init+0x6c>)
 8001398:	2200      	movs	r2, #0
 800139a:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800139c:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <MX_DMA2D_Init+0x6c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	655a      	str	r2, [r3, #84]	@ 0x54
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_DMA2D_Init+0x6c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <MX_DMA2D_Init+0x6c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&DMA2D_Handle) != HAL_OK)
 80013ae:	4809      	ldr	r0, [pc, #36]	@ (80013d4 <MX_DMA2D_Init+0x6c>)
 80013b0:	f004 f8d4 	bl	800555c <HAL_DMA2D_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80013ba:	f000 f9cb 	bl	8001754 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1) != HAL_OK)
 80013be:	2101      	movs	r1, #1
 80013c0:	4804      	ldr	r0, [pc, #16]	@ (80013d4 <MX_DMA2D_Init+0x6c>)
 80013c2:	f004 fa43 	bl	800584c <HAL_DMA2D_ConfigLayer>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 80013cc:	f000 f9c2 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	24000270 	.word	0x24000270
 80013d8:	52001000 	.word	0x52001000

080013dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <MX_DMA_Init+0x3c>)
 80013e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80013e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001418 <MX_DMA_Init+0x3c>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <MX_DMA_Init+0x3c>)
 80013f4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2100      	movs	r1, #0
 8001404:	200b      	movs	r0, #11
 8001406:	f001 fc9a 	bl	8002d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800140a:	200b      	movs	r0, #11
 800140c:	f001 fcb1 	bl	8002d72 <HAL_NVIC_EnableIRQ>

}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	58024400 	.word	0x58024400

0800141c <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  JPEG_Handle.Instance = JPEG;
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <MX_JPEG_Init+0x20>)
 8001422:	4a07      	ldr	r2, [pc, #28]	@ (8001440 <MX_JPEG_Init+0x24>)
 8001424:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&JPEG_Handle) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	@ (800143c <MX_JPEG_Init+0x20>)
 8001428:	f004 fd60 	bl	8005eec <HAL_JPEG_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8001432:	f000 f98f 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	24000218 	.word	0x24000218
 8001440:	52003000 	.word	0x52003000

08001444 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001448:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <MX_SDMMC1_SD_Init+0x38>)
 800144a:	4a0d      	ldr	r2, [pc, #52]	@ (8001480 <MX_SDMMC1_SD_Init+0x3c>)
 800144c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800144e:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <MX_SDMMC1_SD_Init+0x38>)
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001454:	4b09      	ldr	r3, [pc, #36]	@ (800147c <MX_SDMMC1_SD_Init+0x38>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800145a:	4b08      	ldr	r3, [pc, #32]	@ (800147c <MX_SDMMC1_SD_Init+0x38>)
 800145c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001460:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <MX_SDMMC1_SD_Init+0x38>)
 8001464:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001468:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800146a:	4b04      	ldr	r3, [pc, #16]	@ (800147c <MX_SDMMC1_SD_Init+0x38>)
 800146c:	2200      	movs	r2, #0
 800146e:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	2400009c 	.word	0x2400009c
 8001480:	52007000 	.word	0x52007000

08001484 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001488:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <MX_SPI1_Init+0xa4>)
 800148a:	4a28      	ldr	r2, [pc, #160]	@ (800152c <MX_SPI1_Init+0xa8>)
 800148c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800148e:	4b26      	ldr	r3, [pc, #152]	@ (8001528 <MX_SPI1_Init+0xa4>)
 8001490:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001494:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001496:	4b24      	ldr	r3, [pc, #144]	@ (8001528 <MX_SPI1_Init+0xa4>)
 8001498:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 800149c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800149e:	4b22      	ldr	r3, [pc, #136]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014a0:	2207      	movs	r2, #7
 80014a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014a4:	4b20      	ldr	r3, [pc, #128]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014b2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80014b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014be:	4b1a      	ldr	r3, [pc, #104]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014c4:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ca:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80014d0:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014d6:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014de:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014e4:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <MX_SPI1_Init+0xa4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <MX_SPI1_Init+0xa4>)
 8001504:	2200      	movs	r2, #0
 8001506:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001508:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <MX_SPI1_Init+0xa4>)
 800150a:	2200      	movs	r2, #0
 800150c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <MX_SPI1_Init+0xa4>)
 8001510:	2200      	movs	r2, #0
 8001512:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001514:	4804      	ldr	r0, [pc, #16]	@ (8001528 <MX_SPI1_Init+0xa4>)
 8001516:	f00c fa11 	bl	800d93c <HAL_SPI_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001520:	f000 f918 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	24000118 	.word	0x24000118
 800152c:	40013000 	.word	0x40013000

08001530 <MX_RTC_Init>:

void MX_RTC_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0

  RTC_TimeTypeDef sTime = {0};
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001544:	2300      	movs	r3, #0
 8001546:	603b      	str	r3, [r7, #0]


  hrtc.Instance = RTC;
 8001548:	4b26      	ldr	r3, [pc, #152]	@ (80015e4 <MX_RTC_Init+0xb4>)
 800154a:	4a27      	ldr	r2, [pc, #156]	@ (80015e8 <MX_RTC_Init+0xb8>)
 800154c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800154e:	4b25      	ldr	r3, [pc, #148]	@ (80015e4 <MX_RTC_Init+0xb4>)
 8001550:	2200      	movs	r2, #0
 8001552:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001554:	4b23      	ldr	r3, [pc, #140]	@ (80015e4 <MX_RTC_Init+0xb4>)
 8001556:	227f      	movs	r2, #127	@ 0x7f
 8001558:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800155a:	4b22      	ldr	r3, [pc, #136]	@ (80015e4 <MX_RTC_Init+0xb4>)
 800155c:	22ff      	movs	r2, #255	@ 0xff
 800155e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001560:	4b20      	ldr	r3, [pc, #128]	@ (80015e4 <MX_RTC_Init+0xb4>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001566:	4b1f      	ldr	r3, [pc, #124]	@ (80015e4 <MX_RTC_Init+0xb4>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800156c:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <MX_RTC_Init+0xb4>)
 800156e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001572:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001574:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <MX_RTC_Init+0xb4>)
 8001576:	2200      	movs	r2, #0
 8001578:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800157a:	481a      	ldr	r0, [pc, #104]	@ (80015e4 <MX_RTC_Init+0xb4>)
 800157c:	f00a fb04 	bl	800bb88 <HAL_RTC_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001586:	f000 f8e5 	bl	8001754 <Error_Handler>
  }


  sTime.Hours = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2200      	movs	r2, #0
 80015a2:	4619      	mov	r1, r3
 80015a4:	480f      	ldr	r0, [pc, #60]	@ (80015e4 <MX_RTC_Init+0xb4>)
 80015a6:	f00a fb75 	bl	800bc94 <HAL_RTC_SetTime>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80015b0:	f000 f8d0 	bl	8001754 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80015b4:	2301      	movs	r3, #1
 80015b6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80015b8:	2301      	movs	r3, #1
 80015ba:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80015bc:	2301      	movs	r3, #1
 80015be:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	2200      	movs	r2, #0
 80015c8:	4619      	mov	r1, r3
 80015ca:	4806      	ldr	r0, [pc, #24]	@ (80015e4 <MX_RTC_Init+0xb4>)
 80015cc:	f00a fc5c 	bl	800be88 <HAL_RTC_SetDate>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80015d6:	f000 f8bd 	bl	8001754 <Error_Handler>
  }

}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	240002ec 	.word	0x240002ec
 80015e8:	58004000 	.word	0x58004000

080015ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	@ 0x28
 80015f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001602:	4b50      	ldr	r3, [pc, #320]	@ (8001744 <MX_GPIO_Init+0x158>)
 8001604:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001608:	4a4e      	ldr	r2, [pc, #312]	@ (8001744 <MX_GPIO_Init+0x158>)
 800160a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800160e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001612:	4b4c      	ldr	r3, [pc, #304]	@ (8001744 <MX_GPIO_Init+0x158>)
 8001614:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b48      	ldr	r3, [pc, #288]	@ (8001744 <MX_GPIO_Init+0x158>)
 8001622:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001626:	4a47      	ldr	r2, [pc, #284]	@ (8001744 <MX_GPIO_Init+0x158>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001630:	4b44      	ldr	r3, [pc, #272]	@ (8001744 <MX_GPIO_Init+0x158>)
 8001632:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	4b41      	ldr	r3, [pc, #260]	@ (8001744 <MX_GPIO_Init+0x158>)
 8001640:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001644:	4a3f      	ldr	r2, [pc, #252]	@ (8001744 <MX_GPIO_Init+0x158>)
 8001646:	f043 0302 	orr.w	r3, r3, #2
 800164a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800164e:	4b3d      	ldr	r3, [pc, #244]	@ (8001744 <MX_GPIO_Init+0x158>)
 8001650:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165c:	4b39      	ldr	r3, [pc, #228]	@ (8001744 <MX_GPIO_Init+0x158>)
 800165e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001662:	4a38      	ldr	r2, [pc, #224]	@ (8001744 <MX_GPIO_Init+0x158>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800166c:	4b35      	ldr	r3, [pc, #212]	@ (8001744 <MX_GPIO_Init+0x158>)
 800166e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800167a:	4b32      	ldr	r3, [pc, #200]	@ (8001744 <MX_GPIO_Init+0x158>)
 800167c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001680:	4a30      	ldr	r2, [pc, #192]	@ (8001744 <MX_GPIO_Init+0x158>)
 8001682:	f043 0308 	orr.w	r3, r3, #8
 8001686:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800168a:	4b2e      	ldr	r3, [pc, #184]	@ (8001744 <MX_GPIO_Init+0x158>)
 800168c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001698:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800169c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4826      	ldr	r0, [pc, #152]	@ (8001748 <MX_GPIO_Init+0x15c>)
 80016ae:	f004 fa21 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GC9A01_CS_Pin|GC9A01_DC_Pin, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2103      	movs	r1, #3
 80016b6:	4825      	ldr	r0, [pc, #148]	@ (800174c <MX_GPIO_Init+0x160>)
 80016b8:	f004 fbe4 	bl	8005e84 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GC9A01_RST_Pin|GC9A01_BL_Pin, GPIO_PIN_SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	f240 4104 	movw	r1, #1028	@ 0x404
 80016c2:	4822      	ldr	r0, [pc, #136]	@ (800174c <MX_GPIO_Init+0x160>)
 80016c4:	f004 fbde 	bl	8005e84 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PLUS_BTN_Pin|SET_BTN_Pin|MINUS_BTN_Pin, GPIO_PIN_SET);
 80016c8:	2201      	movs	r2, #1
 80016ca:	2107      	movs	r1, #7
 80016cc:	4820      	ldr	r0, [pc, #128]	@ (8001750 <MX_GPIO_Init+0x164>)
 80016ce:	f004 fbd9 	bl	8005e84 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : GC9A01_CS_Pin GC9A01_DC_Pin GC9A01_RST_Pin GC9A01_BL_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin|GC9A01_BL_Pin;
 80016d2:	f240 4307 	movw	r3, #1031	@ 0x407
 80016d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	4818      	ldr	r0, [pc, #96]	@ (800174c <MX_GPIO_Init+0x160>)
 80016ec:	f004 fa02 	bl	8005af4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = PLUS_BTN_Pin|SET_BTN_Pin|MINUS_BTN_Pin;
 80016f0:	2307      	movs	r3, #7
 80016f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016f4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4812      	ldr	r0, [pc, #72]	@ (8001750 <MX_GPIO_Init+0x164>)
 8001706:	f004 f9f5 	bl	8005af4 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	2006      	movs	r0, #6
 8001710:	f001 fb15 	bl	8002d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001714:	2006      	movs	r0, #6
 8001716:	f001 fb2c 	bl	8002d72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	2007      	movs	r0, #7
 8001720:	f001 fb0d 	bl	8002d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001724:	2007      	movs	r0, #7
 8001726:	f001 fb24 	bl	8002d72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	2008      	movs	r0, #8
 8001730:	f001 fb05 	bl	8002d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001734:	2008      	movs	r0, #8
 8001736:	f001 fb1c 	bl	8002d72 <HAL_NVIC_EnableIRQ>

/* USER CODE END MX_GPIO_Init_2 */
}
 800173a:	bf00      	nop
 800173c:	3728      	adds	r7, #40	@ 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	58024400 	.word	0x58024400
 8001748:	58020000 	.word	0x58020000
 800174c:	58020400 	.word	0x58020400
 8001750:	58020800 	.word	0x58020800

08001754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
}
 800175a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <Error_Handler+0x8>

08001760 <smart_watch_init>:
uint8_t *outputData = output_data1;

/************************** GLOBAL FUNCTIONS **************************/

void smart_watch_init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0

	parameters_reset();
 8001766:	f000 fbdd 	bl	8001f24 <parameters_reset>


	for(int i = 0 ; i < 200*1024 ; i++)
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	e00c      	b.n	800178a <smart_watch_init+0x2a>
	{

		output_data1[i] = 0x00;
 8001770:	4a16      	ldr	r2, [pc, #88]	@ (80017cc <smart_watch_init+0x6c>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
		output_data2[i] = 0xff;
 800177a:	4a15      	ldr	r2, [pc, #84]	@ (80017d0 <smart_watch_init+0x70>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4413      	add	r3, r2
 8001780:	22ff      	movs	r2, #255	@ 0xff
 8001782:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 200*1024 ; i++)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3301      	adds	r3, #1
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f5b3 3f48 	cmp.w	r3, #204800	@ 0x32000
 8001790:	dbee      	blt.n	8001770 <smart_watch_init+0x10>

	}
	// First time setting
	video.video_mode = SETTING_MODE;
 8001792:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <smart_watch_init+0x74>)
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

	// SD card initialization
	// Link the micro SD disk I/O driver
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800179a:	490f      	ldr	r1, [pc, #60]	@ (80017d8 <smart_watch_init+0x78>)
 800179c:	480f      	ldr	r0, [pc, #60]	@ (80017dc <smart_watch_init+0x7c>)
 800179e:	f010 f933 	bl	8011a08 <FATFS_LinkDriver>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10b      	bne.n	80017c0 <smart_watch_init+0x60>
	{

		// Init the SD Card
	    SD_Initialize();
 80017a8:	f000 fcba 	bl	8002120 <SD_Initialize>

	    // Register the file system object to the FatFs module
	    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 80017ac:	2200      	movs	r2, #0
 80017ae:	490a      	ldr	r1, [pc, #40]	@ (80017d8 <smart_watch_init+0x78>)
 80017b0:	480b      	ldr	r0, [pc, #44]	@ (80017e0 <smart_watch_init+0x80>)
 80017b2:	f00f faed 	bl	8010d90 <f_mount>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <smart_watch_init+0x62>
	    {

	    	while(1);
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <smart_watch_init+0x5c>

  	}
	else
	{

		while(1);
 80017c0:	e7fe      	b.n	80017c0 <smart_watch_init+0x60>

	}

}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	24058014 	.word	0x24058014
 80017d0:	2408a014 	.word	0x2408a014
 80017d4:	2400cfd0 	.word	0x2400cfd0
 80017d8:	240bc0f4 	.word	0x240bc0f4
 80017dc:	080126d0 	.word	0x080126d0
 80017e0:	24000328 	.word	0x24000328

080017e4 <smart_watch_process>:

void smart_watch_process(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
#ifdef DEBUG_TIME
		uint32_t tempStart = HAL_GetTick();
#endif

		// Check if new file needs to be open
		file_handler(0);
 80017e8:	2000      	movs	r0, #0
 80017ea:	f000 fa4b 	bl	8001c84 <file_handler>

		// Video processing unit
		mjpeg_video_processing();
 80017ee:	f000 f909 	bl	8001a04 <mjpeg_video_processing>

		battery_management();
 80017f2:	f000 fac5 	bl	8001d80 <battery_management>
		file_handler(0);
 80017f6:	bf00      	nop
 80017f8:	e7f6      	b.n	80017e8 <smart_watch_process+0x4>
	...

080017fc <lcd_draw_opt2>:
	   return ret;

}

int lcd_draw_opt2(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b08d      	sub	sp, #52	@ 0x34
 8001800:	af00      	add	r7, sp, #0
 8001802:	4604      	mov	r4, r0
 8001804:	4608      	mov	r0, r1
 8001806:	4611      	mov	r1, r2
 8001808:	461a      	mov	r2, r3
 800180a:	4623      	mov	r3, r4
 800180c:	80fb      	strh	r3, [r7, #6]
 800180e:	4603      	mov	r3, r0
 8001810:	80bb      	strh	r3, [r7, #4]
 8001812:	460b      	mov	r3, r1
 8001814:	807b      	strh	r3, [r7, #2]
 8001816:	4613      	mov	r3, r2
 8001818:	803b      	strh	r3, [r7, #0]

	   struct GC9A01_frame frame;

	   int ret = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	62fb      	str	r3, [r7, #44]	@ 0x2c

       frame.start.X = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	813b      	strh	r3, [r7, #8]
       frame.start.Y = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	817b      	strh	r3, [r7, #10]
       frame.end.X = 239;
 8001826:	23ef      	movs	r3, #239	@ 0xef
 8001828:	81bb      	strh	r3, [r7, #12]
       frame.end.Y = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	81fb      	strh	r3, [r7, #14]

       uint16_t *buff16o1 = (uint16_t *)output_data1;
 800182e:	4b73      	ldr	r3, [pc, #460]	@ (80019fc <lcd_draw_opt2+0x200>)
 8001830:	623b      	str	r3, [r7, #32]
       uint16_t *buff16o2 = (uint16_t *)output_data2;
 8001832:	4b73      	ldr	r3, [pc, #460]	@ (8001a00 <lcd_draw_opt2+0x204>)
 8001834:	61fb      	str	r3, [r7, #28]

       uint8_t out_the_circle_flag = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
       uint32_t py;


	   for(int i = 0 ; i < LCD_SIDE_SIZE ; i++)
 800183c:	2300      	movs	r3, #0
 800183e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001840:	e0d2      	b.n	80019e8 <lcd_draw_opt2+0x1ec>
	   {

	       frame.start.X = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	813b      	strh	r3, [r7, #8]
	       frame.start.Y = i;
 8001846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001848:	b29b      	uxth	r3, r3
 800184a:	817b      	strh	r3, [r7, #10]
	       frame.end.X = ( LCD_SIDE_SIZE - 1 );
 800184c:	23ef      	movs	r3, #239	@ 0xef
 800184e:	81bb      	strh	r3, [r7, #12]
	       frame.end.Y = frame.start.Y;
 8001850:	897b      	ldrh	r3, [r7, #10]
 8001852:	81fb      	strh	r3, [r7, #14]

	       out_the_circle_flag = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	       py = ( i * LCD_SIDE_SIZE );
 800185a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800185c:	4613      	mov	r3, r2
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	1a9b      	subs	r3, r3, r2
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	61bb      	str	r3, [r7, #24]

		   while(( buff16o1[py+frame.start.X] == buff16o2[py+frame.start.X] ) || CIRCLE_MASK(frame.start.X, frame.start.Y))
 8001866:	e00b      	b.n	8001880 <lcd_draw_opt2+0x84>
		   {

			   frame.start.X++;
 8001868:	893b      	ldrh	r3, [r7, #8]
 800186a:	3301      	adds	r3, #1
 800186c:	b29b      	uxth	r3, r3
 800186e:	813b      	strh	r3, [r7, #8]

			   if(frame.start.X > frame.end.X)
 8001870:	893a      	ldrh	r2, [r7, #8]
 8001872:	89bb      	ldrh	r3, [r7, #12]
 8001874:	429a      	cmp	r2, r3
 8001876:	d903      	bls.n	8001880 <lcd_draw_opt2+0x84>
			   {

				   out_the_circle_flag = 1;
 8001878:	2301      	movs	r3, #1
 800187a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
				   break;
 800187e:	e03e      	b.n	80018fe <lcd_draw_opt2+0x102>
		   while(( buff16o1[py+frame.start.X] == buff16o2[py+frame.start.X] ) || CIRCLE_MASK(frame.start.X, frame.start.Y))
 8001880:	893b      	ldrh	r3, [r7, #8]
 8001882:	461a      	mov	r2, r3
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	4413      	add	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	6a3a      	ldr	r2, [r7, #32]
 800188c:	4413      	add	r3, r2
 800188e:	881a      	ldrh	r2, [r3, #0]
 8001890:	893b      	ldrh	r3, [r7, #8]
 8001892:	4619      	mov	r1, r3
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	440b      	add	r3, r1
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	69f9      	ldr	r1, [r7, #28]
 800189c:	440b      	add	r3, r1
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d0e1      	beq.n	8001868 <lcd_draw_opt2+0x6c>
 80018a4:	893b      	ldrh	r3, [r7, #8]
 80018a6:	2b76      	cmp	r3, #118	@ 0x76
 80018a8:	d902      	bls.n	80018b0 <lcd_draw_opt2+0xb4>
 80018aa:	893b      	ldrh	r3, [r7, #8]
 80018ac:	3b77      	subs	r3, #119	@ 0x77
 80018ae:	e002      	b.n	80018b6 <lcd_draw_opt2+0xba>
 80018b0:	893b      	ldrh	r3, [r7, #8]
 80018b2:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 80018b6:	893a      	ldrh	r2, [r7, #8]
 80018b8:	2a76      	cmp	r2, #118	@ 0x76
 80018ba:	d902      	bls.n	80018c2 <lcd_draw_opt2+0xc6>
 80018bc:	893a      	ldrh	r2, [r7, #8]
 80018be:	3a77      	subs	r2, #119	@ 0x77
 80018c0:	e002      	b.n	80018c8 <lcd_draw_opt2+0xcc>
 80018c2:	893a      	ldrh	r2, [r7, #8]
 80018c4:	f1c2 0277 	rsb	r2, r2, #119	@ 0x77
 80018c8:	fb02 f103 	mul.w	r1, r2, r3
 80018cc:	897b      	ldrh	r3, [r7, #10]
 80018ce:	2b76      	cmp	r3, #118	@ 0x76
 80018d0:	d902      	bls.n	80018d8 <lcd_draw_opt2+0xdc>
 80018d2:	897b      	ldrh	r3, [r7, #10]
 80018d4:	3b77      	subs	r3, #119	@ 0x77
 80018d6:	e002      	b.n	80018de <lcd_draw_opt2+0xe2>
 80018d8:	897b      	ldrh	r3, [r7, #10]
 80018da:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 80018de:	897a      	ldrh	r2, [r7, #10]
 80018e0:	2a76      	cmp	r2, #118	@ 0x76
 80018e2:	d902      	bls.n	80018ea <lcd_draw_opt2+0xee>
 80018e4:	897a      	ldrh	r2, [r7, #10]
 80018e6:	3a77      	subs	r2, #119	@ 0x77
 80018e8:	e002      	b.n	80018f0 <lcd_draw_opt2+0xf4>
 80018ea:	897a      	ldrh	r2, [r7, #10]
 80018ec:	f1c2 0277 	rsb	r2, r2, #119	@ 0x77
 80018f0:	fb02 f303 	mul.w	r3, r2, r3
 80018f4:	440b      	add	r3, r1
 80018f6:	f243 7250 	movw	r2, #14160	@ 0x3750
 80018fa:	4293      	cmp	r3, r2
 80018fc:	dcb4      	bgt.n	8001868 <lcd_draw_opt2+0x6c>

			   }

		   }

		   if(out_the_circle_flag)
 80018fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001902:	2b00      	cmp	r3, #0
 8001904:	d16c      	bne.n	80019e0 <lcd_draw_opt2+0x1e4>
			   continue;

		   while(( buff16o1[py+frame.end.X] == buff16o2[py+frame.end.X] ) || CIRCLE_MASK(frame.end.X, frame.start.Y))
 8001906:	e003      	b.n	8001910 <lcd_draw_opt2+0x114>
			   frame.end.X--;
 8001908:	89bb      	ldrh	r3, [r7, #12]
 800190a:	3b01      	subs	r3, #1
 800190c:	b29b      	uxth	r3, r3
 800190e:	81bb      	strh	r3, [r7, #12]
		   while(( buff16o1[py+frame.end.X] == buff16o2[py+frame.end.X] ) || CIRCLE_MASK(frame.end.X, frame.start.Y))
 8001910:	89bb      	ldrh	r3, [r7, #12]
 8001912:	461a      	mov	r2, r3
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	4413      	add	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	6a3a      	ldr	r2, [r7, #32]
 800191c:	4413      	add	r3, r2
 800191e:	881a      	ldrh	r2, [r3, #0]
 8001920:	89bb      	ldrh	r3, [r7, #12]
 8001922:	4619      	mov	r1, r3
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	440b      	add	r3, r1
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	69f9      	ldr	r1, [r7, #28]
 800192c:	440b      	add	r3, r1
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d0e9      	beq.n	8001908 <lcd_draw_opt2+0x10c>
 8001934:	89bb      	ldrh	r3, [r7, #12]
 8001936:	2b76      	cmp	r3, #118	@ 0x76
 8001938:	d902      	bls.n	8001940 <lcd_draw_opt2+0x144>
 800193a:	89bb      	ldrh	r3, [r7, #12]
 800193c:	3b77      	subs	r3, #119	@ 0x77
 800193e:	e002      	b.n	8001946 <lcd_draw_opt2+0x14a>
 8001940:	89bb      	ldrh	r3, [r7, #12]
 8001942:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 8001946:	89ba      	ldrh	r2, [r7, #12]
 8001948:	2a76      	cmp	r2, #118	@ 0x76
 800194a:	d902      	bls.n	8001952 <lcd_draw_opt2+0x156>
 800194c:	89ba      	ldrh	r2, [r7, #12]
 800194e:	3a77      	subs	r2, #119	@ 0x77
 8001950:	e002      	b.n	8001958 <lcd_draw_opt2+0x15c>
 8001952:	89ba      	ldrh	r2, [r7, #12]
 8001954:	f1c2 0277 	rsb	r2, r2, #119	@ 0x77
 8001958:	fb02 f103 	mul.w	r1, r2, r3
 800195c:	897b      	ldrh	r3, [r7, #10]
 800195e:	2b76      	cmp	r3, #118	@ 0x76
 8001960:	d902      	bls.n	8001968 <lcd_draw_opt2+0x16c>
 8001962:	897b      	ldrh	r3, [r7, #10]
 8001964:	3b77      	subs	r3, #119	@ 0x77
 8001966:	e002      	b.n	800196e <lcd_draw_opt2+0x172>
 8001968:	897b      	ldrh	r3, [r7, #10]
 800196a:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 800196e:	897a      	ldrh	r2, [r7, #10]
 8001970:	2a76      	cmp	r2, #118	@ 0x76
 8001972:	d902      	bls.n	800197a <lcd_draw_opt2+0x17e>
 8001974:	897a      	ldrh	r2, [r7, #10]
 8001976:	3a77      	subs	r2, #119	@ 0x77
 8001978:	e002      	b.n	8001980 <lcd_draw_opt2+0x184>
 800197a:	897a      	ldrh	r2, [r7, #10]
 800197c:	f1c2 0277 	rsb	r2, r2, #119	@ 0x77
 8001980:	fb02 f303 	mul.w	r3, r2, r3
 8001984:	440b      	add	r3, r1
 8001986:	f243 7250 	movw	r2, #14160	@ 0x3750
 800198a:	4293      	cmp	r3, r2
 800198c:	dcbc      	bgt.n	8001908 <lcd_draw_opt2+0x10c>

		   uint32_t total_bytes = ( ( frame.end.X - frame.start.X ) << 1 );
 800198e:	89bb      	ldrh	r3, [r7, #12]
 8001990:	461a      	mov	r2, r3
 8001992:	893b      	ldrh	r3, [r7, #8]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	617b      	str	r3, [r7, #20]

		   GC9A01_set_frame(frame);
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019a2:	f7ff fad4 	bl	8000f4e <GC9A01_set_frame>
		   GC9A01_write_command(MEM_WR);
 80019a6:	202c      	movs	r0, #44	@ 0x2c
 80019a8:	f7ff f850 	bl	8000a4c <GC9A01_write_command>

		   GC9A01_set_data_command(ON);
 80019ac:	2001      	movs	r0, #1
 80019ae:	f7ff f819 	bl	80009e4 <GC9A01_set_data_command>
		   GC9A01_set_chip_select(OFF);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f7ff f830 	bl	8000a18 <GC9A01_set_chip_select>

		   uint32_t start_idx = ( ( py + frame.start.X ) << 1 );
 80019b8:	893b      	ldrh	r3, [r7, #8]
 80019ba:	461a      	mov	r2, r3
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	4413      	add	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	613b      	str	r3, [r7, #16]

		   ret = GC9A01_spi_tx(&data[start_idx], total_bytes);
 80019c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4413      	add	r3, r2
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	b292      	uxth	r2, r2
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fb0f 	bl	8000ff4 <GC9A01_spi_tx>
 80019d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

		   GC9A01_set_chip_select(ON);
 80019d8:	2001      	movs	r0, #1
 80019da:	f7ff f81d 	bl	8000a18 <GC9A01_set_chip_select>
 80019de:	e000      	b.n	80019e2 <lcd_draw_opt2+0x1e6>
			   continue;
 80019e0:	bf00      	nop
	   for(int i = 0 ; i < LCD_SIDE_SIZE ; i++)
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	3301      	adds	r3, #1
 80019e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ea:	2bef      	cmp	r3, #239	@ 0xef
 80019ec:	f77f af29 	ble.w	8001842 <lcd_draw_opt2+0x46>

	   }

	   return ret;
 80019f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3734      	adds	r7, #52	@ 0x34
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd90      	pop	{r4, r7, pc}
 80019fa:	bf00      	nop
 80019fc:	24058014 	.word	0x24058014
 8001a00:	2408a014 	.word	0x2408a014

08001a04 <mjpeg_video_processing>:
}

/************************** PRIVATE FUNCTIONS **************************/

static void mjpeg_video_processing(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0

	switch(video.video_mode)
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <mjpeg_video_processing+0x20>)
 8001a0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d002      	beq.n	8001a18 <mjpeg_video_processing+0x14>

		default:
		case SETTING_MODE:

			//clock_setting();
			clock_normal();
 8001a12:	f000 f809 	bl	8001a28 <clock_normal>

			break;
 8001a16:	e002      	b.n	8001a1e <mjpeg_video_processing+0x1a>

		case NORMAL_MODE:

			clock_normal();
 8001a18:	f000 f806 	bl	8001a28 <clock_normal>

			break;
 8001a1c:	bf00      	nop

	}

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2400cfd0 	.word	0x2400cfd0

08001a28 <clock_normal>:

static void clock_normal(void)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af02      	add	r7, sp, #8
#endif



	// Save the frame into MJPEG_VideoBuffer
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	4989      	ldr	r1, [pc, #548]	@ (8001c58 <clock_normal+0x230>)
 8001a32:	488a      	ldr	r0, [pc, #552]	@ (8001c5c <clock_normal+0x234>)
 8001a34:	f7fe ff08 	bl	8000848 <AVI_GetFrame>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	4b88      	ldr	r3, [pc, #544]	@ (8001c60 <clock_normal+0x238>)
 8001a3e:	75da      	strb	r2, [r3, #23]

	if(video.frameToSkip > 0)
 8001a40:	4b87      	ldr	r3, [pc, #540]	@ (8001c60 <clock_normal+0x238>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	dd0f      	ble.n	8001a68 <clock_normal+0x40>
	{

		// Skip frames until the the watch time is
		// synchronized with the actual time

		video.frameToSkip--;
 8001a48:	4b85      	ldr	r3, [pc, #532]	@ (8001c60 <clock_normal+0x238>)
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	4a84      	ldr	r2, [pc, #528]	@ (8001c60 <clock_normal+0x238>)
 8001a50:	6253      	str	r3, [r2, #36]	@ 0x24
		AVI_Handel.CurrentImage++;
 8001a52:	4b82      	ldr	r3, [pc, #520]	@ (8001c5c <clock_normal+0x234>)
 8001a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a56:	3301      	adds	r3, #1
 8001a58:	4a80      	ldr	r2, [pc, #512]	@ (8001c5c <clock_normal+0x234>)
 8001a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
		video.frameCount++;
 8001a5c:	4b80      	ldr	r3, [pc, #512]	@ (8001c60 <clock_normal+0x238>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	3301      	adds	r3, #1
 8001a62:	4a7f      	ldr	r2, [pc, #508]	@ (8001c60 <clock_normal+0x238>)
 8001a64:	6213      	str	r3, [r2, #32]
		HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);

	}

}
 8001a66:	e0ec      	b.n	8001c42 <clock_normal+0x21a>
	else if(video.FrameType == AVI_VIDEO_FRAME)
 8001a68:	4b7d      	ldr	r3, [pc, #500]	@ (8001c60 <clock_normal+0x238>)
 8001a6a:	7ddb      	ldrb	r3, [r3, #23]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	f040 80e8 	bne.w	8001c42 <clock_normal+0x21a>
		AVI_Handel.CurrentImage++;
 8001a72:	4b7a      	ldr	r3, [pc, #488]	@ (8001c5c <clock_normal+0x234>)
 8001a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a76:	3301      	adds	r3, #1
 8001a78:	4a78      	ldr	r2, [pc, #480]	@ (8001c5c <clock_normal+0x234>)
 8001a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
		video.frameCount++;
 8001a7c:	4b78      	ldr	r3, [pc, #480]	@ (8001c60 <clock_normal+0x238>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	3301      	adds	r3, #1
 8001a82:	4a77      	ldr	r2, [pc, #476]	@ (8001c60 <clock_normal+0x238>)
 8001a84:	6213      	str	r3, [r2, #32]
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8001a86:	4977      	ldr	r1, [pc, #476]	@ (8001c64 <clock_normal+0x23c>)
 8001a88:	4b74      	ldr	r3, [pc, #464]	@ (8001c5c <clock_normal+0x234>)
 8001a8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a8c:	4b74      	ldr	r3, [pc, #464]	@ (8001c60 <clock_normal+0x238>)
 8001a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a90:	4875      	ldr	r0, [pc, #468]	@ (8001c68 <clock_normal+0x240>)
 8001a92:	f7ff fad5 	bl	8001040 <JPEG_Decode_DMA>
		while(Jpeg_HWDecodingEnd == 0);
 8001a96:	bf00      	nop
 8001a98:	4b74      	ldr	r3, [pc, #464]	@ (8001c6c <clock_normal+0x244>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0fb      	beq.n	8001a98 <clock_normal+0x70>
		if(video.isfirstFrame == 1)
 8001aa0:	4b6f      	ldr	r3, [pc, #444]	@ (8001c60 <clock_normal+0x238>)
 8001aa2:	7d9b      	ldrb	r3, [r3, #22]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d14d      	bne.n	8001b44 <clock_normal+0x11c>
			video.isfirstFrame = 0;
 8001aa8:	4b6d      	ldr	r3, [pc, #436]	@ (8001c60 <clock_normal+0x238>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	759a      	strb	r2, [r3, #22]
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8001aae:	4970      	ldr	r1, [pc, #448]	@ (8001c70 <clock_normal+0x248>)
 8001ab0:	486d      	ldr	r0, [pc, #436]	@ (8001c68 <clock_normal+0x240>)
 8001ab2:	f004 fa9d 	bl	8005ff0 <HAL_JPEG_GetInfo>
			DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 8001ab6:	4b6e      	ldr	r3, [pc, #440]	@ (8001c70 <clock_normal+0x248>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	4a6c      	ldr	r2, [pc, #432]	@ (8001c70 <clock_normal+0x248>)
 8001abe:	6892      	ldr	r2, [r2, #8]
 8001ac0:	b291      	uxth	r1, r2
 8001ac2:	4a6b      	ldr	r2, [pc, #428]	@ (8001c70 <clock_normal+0x248>)
 8001ac4:	6852      	ldr	r2, [r2, #4]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 fa72 	bl	8001fb0 <DMA2D_Init>
			video.width = JPEG_Info.ImageWidth;
 8001acc:	4b68      	ldr	r3, [pc, #416]	@ (8001c70 <clock_normal+0x248>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b63      	ldr	r3, [pc, #396]	@ (8001c60 <clock_normal+0x238>)
 8001ad4:	831a      	strh	r2, [r3, #24]
			video.height = JPEG_Info.ImageHeight;
 8001ad6:	4b66      	ldr	r3, [pc, #408]	@ (8001c70 <clock_normal+0x248>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	4b60      	ldr	r3, [pc, #384]	@ (8001c60 <clock_normal+0x238>)
 8001ade:	835a      	strh	r2, [r3, #26]
			video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 8001ae0:	4b5f      	ldr	r3, [pc, #380]	@ (8001c60 <clock_normal+0x238>)
 8001ae2:	8b1b      	ldrh	r3, [r3, #24]
 8001ae4:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da00      	bge.n	8001aee <clock_normal+0xc6>
 8001aec:	3301      	adds	r3, #1
 8001aee:	105b      	asrs	r3, r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	4b5b      	ldr	r3, [pc, #364]	@ (8001c60 <clock_normal+0x238>)
 8001af4:	839a      	strh	r2, [r3, #28]
			video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 8001af6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c60 <clock_normal+0x238>)
 8001af8:	8b5b      	ldrh	r3, [r3, #26]
 8001afa:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	da00      	bge.n	8001b04 <clock_normal+0xdc>
 8001b02:	3301      	adds	r3, #1
 8001b04:	105b      	asrs	r3, r3, #1
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	4b55      	ldr	r3, [pc, #340]	@ (8001c60 <clock_normal+0x238>)
 8001b0a:	83da      	strh	r2, [r3, #30]
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 8001b0c:	4b53      	ldr	r3, [pc, #332]	@ (8001c5c <clock_normal+0x234>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	ee07 3a90 	vmov	s15, r3
 8001b14:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001b18:	ed9f 5b4d 	vldr	d5, [pc, #308]	@ 8001c50 <clock_normal+0x228>
 8001b1c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b24:	4b4e      	ldr	r3, [pc, #312]	@ (8001c60 <clock_normal+0x238>)
 8001b26:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			video.tick_offset = HAL_GetTick();									// Tick offset from 0
 8001b2a:	f000 ffb9 	bl	8002aa0 <HAL_GetTick>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a4b      	ldr	r2, [pc, #300]	@ (8001c60 <clock_normal+0x238>)
 8001b32:	6313      	str	r3, [r2, #48]	@ 0x30
			video.frameCount = 1;												// Reset the count here for every first frame of the minute chunk
 8001b34:	4b4a      	ldr	r3, [pc, #296]	@ (8001c60 <clock_normal+0x238>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	621a      	str	r2, [r3, #32]
			HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	4948      	ldr	r1, [pc, #288]	@ (8001c60 <clock_normal+0x238>)
 8001b3e:	484d      	ldr	r0, [pc, #308]	@ (8001c74 <clock_normal+0x24c>)
 8001b40:	f00a f8a8 	bl	800bc94 <HAL_RTC_SetTime>
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8001b44:	4b46      	ldr	r3, [pc, #280]	@ (8001c60 <clock_normal+0x238>)
 8001b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b48:	4618      	mov	r0, r3
 8001b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c78 <clock_normal+0x250>)
 8001b4c:	6819      	ldr	r1, [r3, #0]
 8001b4e:	4b48      	ldr	r3, [pc, #288]	@ (8001c70 <clock_normal+0x248>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	4b46      	ldr	r3, [pc, #280]	@ (8001c70 <clock_normal+0x248>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	f000 faa7 	bl	80020ac <DMA2D_CopyBuffer>
		pOut.u8Arr = (uint8_t *)outputData;
 8001b5e:	4b46      	ldr	r3, [pc, #280]	@ (8001c78 <clock_normal+0x250>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	607b      	str	r3, [r7, #4]
		depth24To16(&pOut, ( video.width * video.height ), 3);
 8001b64:	4b3e      	ldr	r3, [pc, #248]	@ (8001c60 <clock_normal+0x238>)
 8001b66:	8b1a      	ldrh	r2, [r3, #24]
 8001b68:	4b3d      	ldr	r3, [pc, #244]	@ (8001c60 <clock_normal+0x238>)
 8001b6a:	8b5b      	ldrh	r3, [r3, #26]
 8001b6c:	fb12 f303 	smulbb	r3, r2, r3
 8001b70:	b299      	uxth	r1, r3
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	2203      	movs	r2, #3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f966 	bl	8001e48 <depth24To16>
		lcd_draw_opt2(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr);
 8001b7c:	4b38      	ldr	r3, [pc, #224]	@ (8001c60 <clock_normal+0x238>)
 8001b7e:	8b98      	ldrh	r0, [r3, #28]
 8001b80:	4b37      	ldr	r3, [pc, #220]	@ (8001c60 <clock_normal+0x238>)
 8001b82:	8bd9      	ldrh	r1, [r3, #30]
 8001b84:	4b36      	ldr	r3, [pc, #216]	@ (8001c60 <clock_normal+0x238>)
 8001b86:	8b1a      	ldrh	r2, [r3, #24]
 8001b88:	4b35      	ldr	r3, [pc, #212]	@ (8001c60 <clock_normal+0x238>)
 8001b8a:	8b5c      	ldrh	r4, [r3, #26]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	4623      	mov	r3, r4
 8001b92:	f7ff fe33 	bl	80017fc <lcd_draw_opt2>
		outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 8001b96:	4b38      	ldr	r3, [pc, #224]	@ (8001c78 <clock_normal+0x250>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a38      	ldr	r2, [pc, #224]	@ (8001c7c <clock_normal+0x254>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d101      	bne.n	8001ba4 <clock_normal+0x17c>
 8001ba0:	4b37      	ldr	r3, [pc, #220]	@ (8001c80 <clock_normal+0x258>)
 8001ba2:	e000      	b.n	8001ba6 <clock_normal+0x17e>
 8001ba4:	4b35      	ldr	r3, [pc, #212]	@ (8001c7c <clock_normal+0x254>)
 8001ba6:	4a34      	ldr	r2, [pc, #208]	@ (8001c78 <clock_normal+0x250>)
 8001ba8:	6013      	str	r3, [r2, #0]
		video.actual_time = ( HAL_GetTick() - video.tick_offset );
 8001baa:	f000 ff79 	bl	8002aa0 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c60 <clock_normal+0x238>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	4a2a      	ldr	r2, [pc, #168]	@ (8001c60 <clock_normal+0x238>)
 8001bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
		float watch_time = ( video.frameCount * video.frame_time );
 8001bba:	4b29      	ldr	r3, [pc, #164]	@ (8001c60 <clock_normal+0x238>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bc6:	4b26      	ldr	r3, [pc, #152]	@ (8001c60 <clock_normal+0x238>)
 8001bc8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd0:	edc7 7a03 	vstr	s15, [r7, #12]
		int time_diff = ( video.actual_time - watch_time );
 8001bd4:	4b22      	ldr	r3, [pc, #136]	@ (8001c60 <clock_normal+0x238>)
 8001bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001be0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bec:	ee17 3a90 	vmov	r3, s15
 8001bf0:	60bb      	str	r3, [r7, #8]
		video.frameToSkip = ( time_diff / video.frame_time );
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bfc:	4b18      	ldr	r3, [pc, #96]	@ (8001c60 <clock_normal+0x238>)
 8001bfe:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c0a:	ee17 2a90 	vmov	r2, s15
 8001c0e:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <clock_normal+0x238>)
 8001c10:	625a      	str	r2, [r3, #36]	@ 0x24
		if(time_diff < 0)
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	da07      	bge.n	8001c28 <clock_normal+0x200>
			HAL_Delay(-time_diff);
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	425b      	negs	r3, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 ff4b 	bl	8002ab8 <HAL_Delay>
			video.frameToSkip = 0;
 8001c22:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <clock_normal+0x238>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	625a      	str	r2, [r3, #36]	@ 0x24
		RTC_DateTypeDef sDate = {0};
 8001c28:	2300      	movs	r3, #0
 8001c2a:	603b      	str	r3, [r7, #0]
		HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	490c      	ldr	r1, [pc, #48]	@ (8001c60 <clock_normal+0x238>)
 8001c30:	4810      	ldr	r0, [pc, #64]	@ (8001c74 <clock_normal+0x24c>)
 8001c32:	f00a f8cd 	bl	800bdd0 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001c36:	463b      	mov	r3, r7
 8001c38:	2200      	movs	r2, #0
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	480d      	ldr	r0, [pc, #52]	@ (8001c74 <clock_normal+0x24c>)
 8001c3e:	f00a f9ab 	bl	800bf98 <HAL_RTC_GetDate>
}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	f3af 8000 	nop.w
 8001c50:	00000000 	.word	0x00000000
 8001c54:	408f4000 	.word	0x408f4000
 8001c58:	24000558 	.word	0x24000558
 8001c5c:	24000788 	.word	0x24000788
 8001c60:	2400cfd0 	.word	0x2400cfd0
 8001c64:	240007d0 	.word	0x240007d0
 8001c68:	24000218 	.word	0x24000218
 8001c6c:	24000088 	.word	0x24000088
 8001c70:	240002d8 	.word	0x240002d8
 8001c74:	240002ec 	.word	0x240002ec
 8001c78:	24000000 	.word	0x24000000
 8001c7c:	24058014 	.word	0x24058014
 8001c80:	2408a014 	.word	0x2408a014

08001c84 <file_handler>:
	enable_btn_int();

}

static void file_handler(uint8_t openFile)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
   // Each file takes 1m

   static uint8_t  new_file_flag = 1;


   if(new_file_flag || openFile)
 8001c8e:	4b31      	ldr	r3, [pc, #196]	@ (8001d54 <file_handler+0xd0>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <file_handler+0x18>
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d033      	beq.n	8001d04 <file_handler+0x80>
   {

  	 if(openFile)
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <file_handler+0x24>
  		 f_close(&MJPEG_File);
 8001ca2:	482d      	ldr	r0, [pc, #180]	@ (8001d58 <file_handler+0xd4>)
 8001ca4:	f00f fc31 	bl	801150a <f_close>

  	 new_file_flag = 0;
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d54 <file_handler+0xd0>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]

  	 char file_idx_str[4];
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8001cae:	4b2b      	ldr	r3, [pc, #172]	@ (8001d5c <file_handler+0xd8>)
 8001cb0:	8a9b      	ldrh	r3, [r3, #20]
 8001cb2:	f107 000c 	add.w	r0, r7, #12
 8001cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8001d60 <file_handler+0xdc>)
 8001cb8:	2104      	movs	r1, #4
 8001cba:	f00f feb5 	bl	8011a28 <sniprintf>
  	 snprintf(name, sizeof(name), "a%s.avi", file_idx_str);
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	4a28      	ldr	r2, [pc, #160]	@ (8001d64 <file_handler+0xe0>)
 8001cc4:	210e      	movs	r1, #14
 8001cc6:	4828      	ldr	r0, [pc, #160]	@ (8001d68 <file_handler+0xe4>)
 8001cc8:	f00f feae 	bl	8011a28 <sniprintf>

  	 // Open the MJPEG avi file with read access
  	 if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4926      	ldr	r1, [pc, #152]	@ (8001d68 <file_handler+0xe4>)
 8001cd0:	4821      	ldr	r0, [pc, #132]	@ (8001d58 <file_handler+0xd4>)
 8001cd2:	f00f f8a3 	bl	8010e1c <f_open>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d112      	bne.n	8001d02 <file_handler+0x7e>
  	 {

  		 video.isfirstFrame = 1;
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d5c <file_handler+0xd8>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	759a      	strb	r2, [r3, #22]

  		 // parse the AVI file Header
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	9301      	str	r3, [sp, #4]
 8001ce6:	4b21      	ldr	r3, [pc, #132]	@ (8001d6c <file_handler+0xe8>)
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8001cee:	4a20      	ldr	r2, [pc, #128]	@ (8001d70 <file_handler+0xec>)
 8001cf0:	4919      	ldr	r1, [pc, #100]	@ (8001d58 <file_handler+0xd4>)
 8001cf2:	4820      	ldr	r0, [pc, #128]	@ (8001d74 <file_handler+0xf0>)
 8001cf4:	f7fe fd68 	bl	80007c8 <AVI_ParserInit>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <file_handler+0x80>
  			 while(1);
 8001cfe:	bf00      	nop
 8001d00:	e7fd      	b.n	8001cfe <file_handler+0x7a>

  	 }
  	 else
  	 {

  		 while(1);
 8001d02:	e7fe      	b.n	8001d02 <file_handler+0x7e>
  	 }

   }

   // Check for the end of the video
   if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 8001d04:	4b1b      	ldr	r3, [pc, #108]	@ (8001d74 <file_handler+0xf0>)
 8001d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d08:	4b1a      	ldr	r3, [pc, #104]	@ (8001d74 <file_handler+0xf0>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d31d      	bcc.n	8001d4c <file_handler+0xc8>
   {

  	 video.file_idx++;
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <file_handler+0xd8>)
 8001d12:	8a9b      	ldrh	r3, [r3, #20]
 8001d14:	3301      	adds	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <file_handler+0xd8>)
 8001d1a:	829a      	strh	r2, [r3, #20]
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <file_handler+0xd8>)
 8001d1e:	8a9b      	ldrh	r3, [r3, #20]
 8001d20:	091a      	lsrs	r2, r3, #4
 8001d22:	4915      	ldr	r1, [pc, #84]	@ (8001d78 <file_handler+0xf4>)
 8001d24:	fba1 1202 	umull	r1, r2, r1, r2
 8001d28:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8001d2c:	fb01 f202 	mul.w	r2, r1, r2
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <file_handler+0xd8>)
 8001d36:	829a      	strh	r2, [r3, #20]

		 //  wait for the Last DMA2D transfer to ends
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8001d38:	2132      	movs	r1, #50	@ 0x32
 8001d3a:	4810      	ldr	r0, [pc, #64]	@ (8001d7c <file_handler+0xf8>)
 8001d3c:	f003 fc9d 	bl	800567a <HAL_DMA2D_PollForTransfer>

		 f_close(&MJPEG_File);
 8001d40:	4805      	ldr	r0, [pc, #20]	@ (8001d58 <file_handler+0xd4>)
 8001d42:	f00f fbe2 	bl	801150a <f_close>

		 new_file_flag = 1;
 8001d46:	4b03      	ldr	r3, [pc, #12]	@ (8001d54 <file_handler+0xd0>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]

   }

}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	24000004 	.word	0x24000004
 8001d58:	24000558 	.word	0x24000558
 8001d5c:	2400cfd0 	.word	0x2400cfd0
 8001d60:	08012404 	.word	0x08012404
 8001d64:	0801240c 	.word	0x0801240c
 8001d68:	24000318 	.word	0x24000318
 8001d6c:	2400cfd0 	.word	0x2400cfd0
 8001d70:	240007d0 	.word	0x240007d0
 8001d74:	24000788 	.word	0x24000788
 8001d78:	05b05b06 	.word	0x05b05b06
 8001d7c:	24000270 	.word	0x24000270

08001d80 <battery_management>:

static void battery_management(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0


	if(video.display_status == DISPLAY_ON)
 8001d86:	4b2d      	ldr	r3, [pc, #180]	@ (8001e3c <battery_management+0xbc>)
 8001d88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d150      	bne.n	8001e32 <battery_management+0xb2>
	{

		if(video.time.Seconds >= DISPLAY_STANDBY_TIMER)
 8001d90:	4b2a      	ldr	r3, [pc, #168]	@ (8001e3c <battery_management+0xbc>)
 8001d92:	789b      	ldrb	r3, [r3, #2]
 8001d94:	2b3a      	cmp	r3, #58	@ 0x3a
 8001d96:	d94c      	bls.n	8001e32 <battery_management+0xb2>
		{

			parameters_reset();
 8001d98:	f000 f8c4 	bl	8001f24 <parameters_reset>

			GC9A01_sleep_mode(ON);
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f7ff f912 	bl	8000fc6 <GC9A01_sleep_mode>
			video.display_status = DISPLAY_OFF;
 8001da2:	4b26      	ldr	r3, [pc, #152]	@ (8001e3c <battery_management+0xbc>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

			// Stop mode

			HAL_SuspendTick();
 8001daa:	f000 fea9 	bl	8002b00 <HAL_SuspendTick>
  __ASM volatile ("cpsid i" : : : "memory");
 8001dae:	b672      	cpsid	i
}
 8001db0:	bf00      	nop

			__disable_irq();

			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001db2:	2101      	movs	r1, #1
 8001db4:	2001      	movs	r0, #1
 8001db6:	f006 fac5 	bl	8008344 <HAL_PWR_EnterSTOPMode>
  __ASM volatile ("cpsie i" : : : "memory");
 8001dba:	b662      	cpsie	i
}
 8001dbc:	bf00      	nop

			// Wake up

			__enable_irq();

			HAL_ResumeTick();
 8001dbe:	f000 feaf 	bl	8002b20 <HAL_ResumeTick>

			SystemClock_Config();
 8001dc2:	f7ff fa55 	bl	8001270 <SystemClock_Config>

			GC9A01_init();
 8001dc6:	f7fe fe7e 	bl	8000ac6 <GC9A01_init>
			video.display_status = DISPLAY_ON;
 8001dca:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <battery_management+0xbc>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

			// Clock setting

			RTC_DateTypeDef sDate = {0};
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
			HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	4918      	ldr	r1, [pc, #96]	@ (8001e3c <battery_management+0xbc>)
 8001dda:	4819      	ldr	r0, [pc, #100]	@ (8001e40 <battery_management+0xc0>)
 8001ddc:	f009 fff8 	bl	800bdd0 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	2200      	movs	r2, #0
 8001de4:	4619      	mov	r1, r3
 8001de6:	4816      	ldr	r0, [pc, #88]	@ (8001e40 <battery_management+0xc0>)
 8001de8:	f00a f8d6 	bl	800bf98 <HAL_RTC_GetDate>

			video.file_idx = ( ( video.time.Hours % 12 ) * 60 );
 8001dec:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <battery_management+0xbc>)
 8001dee:	781a      	ldrb	r2, [r3, #0]
 8001df0:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <battery_management+0xc4>)
 8001df2:	fba3 1302 	umull	r1, r3, r3, r2
 8001df6:	08d9      	lsrs	r1, r3, #3
 8001df8:	460b      	mov	r3, r1
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	440b      	add	r3, r1
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	0112      	lsls	r2, r2, #4
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <battery_management+0xbc>)
 8001e10:	829a      	strh	r2, [r3, #20]
			video.file_idx += video.time.Minutes;
 8001e12:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <battery_management+0xbc>)
 8001e14:	8a9b      	ldrh	r3, [r3, #20]
 8001e16:	4a09      	ldr	r2, [pc, #36]	@ (8001e3c <battery_management+0xbc>)
 8001e18:	7852      	ldrb	r2, [r2, #1]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	4b07      	ldr	r3, [pc, #28]	@ (8001e3c <battery_management+0xbc>)
 8001e20:	829a      	strh	r2, [r3, #20]

			file_handler(1);
 8001e22:	2001      	movs	r0, #1
 8001e24:	f7ff ff2e 	bl	8001c84 <file_handler>

			video.display_ts = video.time.Seconds;
 8001e28:	4b04      	ldr	r3, [pc, #16]	@ (8001e3c <battery_management+0xbc>)
 8001e2a:	789b      	ldrb	r3, [r3, #2]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b03      	ldr	r3, [pc, #12]	@ (8001e3c <battery_management+0xbc>)
 8001e30:	63da      	str	r2, [r3, #60]	@ 0x3c

		}

	}

}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2400cfd0 	.word	0x2400cfd0
 8001e40:	240002ec 	.word	0x240002ec
 8001e44:	aaaaaaab 	.word	0xaaaaaaab

08001e48 <depth24To16>:

static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
 8001e54:	4613      	mov	r3, r2
 8001e56:	707b      	strb	r3, [r7, #1]

	uint8_t b;
	uint8_t g;
	uint8_t r;

	int i = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]


	for( ; i < length ; i++)
 8001e5c:	e054      	b.n	8001f08 <depth24To16+0xc0>
	{

		b = pxArr->u8Arr[i*bpx];
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	787a      	ldrb	r2, [r7, #1]
 8001e64:	68f9      	ldr	r1, [r7, #12]
 8001e66:	fb01 f202 	mul.w	r2, r1, r2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	72fb      	strb	r3, [r7, #11]
		g = pxArr->u8Arr[i*bpx+1];
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	787b      	ldrb	r3, [r7, #1]
 8001e76:	68f9      	ldr	r1, [r7, #12]
 8001e78:	fb01 f303 	mul.w	r3, r1, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	72bb      	strb	r3, [r7, #10]
		r = pxArr->u8Arr[i*bpx+2];
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	787b      	ldrb	r3, [r7, #1]
 8001e8a:	68f9      	ldr	r1, [r7, #12]
 8001e8c:	fb01 f303 	mul.w	r3, r1, r3
 8001e90:	3302      	adds	r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	727b      	strb	r3, [r7, #9]

		pxArr->u16Arr[i] = color565(r, g, b);
 8001e98:	7a7b      	ldrb	r3, [r7, #9]
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	b21a      	sxth	r2, r3
 8001e9e:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <depth24To16+0xd8>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	b21a      	sxth	r2, r3
 8001ea4:	7abb      	ldrb	r3, [r7, #10]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	b21a      	sxth	r2, r3
 8001eb4:	7afb      	ldrb	r3, [r7, #11]
 8001eb6:	08db      	lsrs	r3, r3, #3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	b21b      	sxth	r3, r3
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	b219      	sxth	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	b28a      	uxth	r2, r1
 8001ecc:	801a      	strh	r2, [r3, #0]
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	021b      	lsls	r3, r3, #8
 8001edc:	b21a      	sxth	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6819      	ldr	r1, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	440b      	add	r3, r1
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	b21b      	sxth	r3, r3
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	b219      	sxth	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	b28a      	uxth	r2, r1
 8001f00:	801a      	strh	r2, [r3, #0]
	for( ; i < length ; i++)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3301      	adds	r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	887b      	ldrh	r3, [r7, #2]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	dba6      	blt.n	8001e5e <depth24To16+0x16>

	}

}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	fffff800 	.word	0xfffff800

08001f24 <parameters_reset>:
	}

}

static void parameters_reset(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

	video.width = 0;
 8001f28:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa8 <parameters_reset+0x84>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	831a      	strh	r2, [r3, #24]
	video.height = 0;
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa8 <parameters_reset+0x84>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	835a      	strh	r2, [r3, #26]
	video.xPos = 0;
 8001f34:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa8 <parameters_reset+0x84>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	839a      	strh	r2, [r3, #28]
	video.yPos = 0;
 8001f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa8 <parameters_reset+0x84>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	83da      	strh	r2, [r3, #30]

	video.time.Hours = 0;
 8001f40:	4b19      	ldr	r3, [pc, #100]	@ (8001fa8 <parameters_reset+0x84>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
	video.time.Minutes = 0;
 8001f46:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <parameters_reset+0x84>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	705a      	strb	r2, [r3, #1]
	video.time.Seconds = 0;
 8001f4c:	4b16      	ldr	r3, [pc, #88]	@ (8001fa8 <parameters_reset+0x84>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	709a      	strb	r2, [r3, #2]

	video.file_idx = 0;
 8001f52:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <parameters_reset+0x84>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	829a      	strh	r2, [r3, #20]
	video.FrameType = 0;
 8001f58:	4b13      	ldr	r3, [pc, #76]	@ (8001fa8 <parameters_reset+0x84>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	75da      	strb	r2, [r3, #23]

	video.frameToSkip = 0;
 8001f5e:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <parameters_reset+0x84>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	625a      	str	r2, [r3, #36]	@ 0x24
	video.frame_time = 0.0;
 8001f64:	4b10      	ldr	r3, [pc, #64]	@ (8001fa8 <parameters_reset+0x84>)
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	629a      	str	r2, [r3, #40]	@ 0x28
	video.actual_time = 0;
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <parameters_reset+0x84>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	62da      	str	r2, [r3, #44]	@ 0x2c
	video.tick_offset = 0;
 8001f72:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa8 <parameters_reset+0x84>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	631a      	str	r2, [r3, #48]	@ 0x30
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 8001f78:	4a0c      	ldr	r2, [pc, #48]	@ (8001fac <parameters_reset+0x88>)
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <parameters_reset+0x84>)
 8001f7c:	635a      	str	r2, [r3, #52]	@ 0x34

	video.display_ts = video.time.Seconds;
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <parameters_reset+0x84>)
 8001f80:	789b      	ldrb	r3, [r3, #2]
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <parameters_reset+0x84>)
 8001f86:	63da      	str	r2, [r3, #60]	@ 0x3c

	video.display_status = DISPLAY_ON;
 8001f88:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <parameters_reset+0x84>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	video.frameCount = 0;
 8001f90:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <parameters_reset+0x84>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	621a      	str	r2, [r3, #32]

	//video.video_mode = NORMAL_MODE;
	video.set = SET_IDLE;
 8001f96:	4b04      	ldr	r3, [pc, #16]	@ (8001fa8 <parameters_reset+0x84>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	2400cfd0 	.word	0x2400cfd0
 8001fac:	2400d014 	.word	0x2400d014

08001fb0 <DMA2D_Init>:

static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	603a      	str	r2, [r7, #0]
 8001fba:	80fb      	strh	r3, [r7, #6]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	80bb      	strh	r3, [r7, #4]

	uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]


	HAL_DMA2D_MspInit(&DMA2D_Handle);
 8001fc8:	4836      	ldr	r0, [pc, #216]	@ (80020a4 <DMA2D_Init+0xf4>)
 8001fca:	f000 f91d 	bl	8002208 <HAL_DMA2D_MspInit>

	if(ChromaSampling == JPEG_420_SUBSAMPLING)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d10d      	bne.n	8001ff0 <DMA2D_Init+0x40>
	{

		cssMode = DMA2D_CSS_420;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	60fb      	str	r3, [r7, #12]

		inputLineOffset = xsize % 16;
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	60bb      	str	r3, [r7, #8]
		if(inputLineOffset != 0)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d025      	beq.n	8002032 <DMA2D_Init+0x82>
		{

			inputLineOffset = 16 - inputLineOffset;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f1c3 0310 	rsb	r3, r3, #16
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	e020      	b.n	8002032 <DMA2D_Init+0x82>

		}

	}
	else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10d      	bne.n	8002012 <DMA2D_Init+0x62>
	{

		cssMode = DMA2D_NO_CSS;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]

		inputLineOffset = xsize % 8;
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	60bb      	str	r3, [r7, #8]
		if(inputLineOffset != 0)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d014      	beq.n	8002032 <DMA2D_Init+0x82>
		{

			inputLineOffset = 8 - inputLineOffset;
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f1c3 0308 	rsb	r3, r3, #8
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	e00f      	b.n	8002032 <DMA2D_Init+0x82>

		}

	}
	else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d10c      	bne.n	8002032 <DMA2D_Init+0x82>
	{

		cssMode = DMA2D_CSS_422;
 8002018:	2301      	movs	r3, #1
 800201a:	60fb      	str	r3, [r7, #12]

		inputLineOffset = xsize % 16;
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	60bb      	str	r3, [r7, #8]
		if(inputLineOffset != 0)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <DMA2D_Init+0x82>
		{

			inputLineOffset = 16 - inputLineOffset;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f1c3 0310 	rsb	r3, r3, #16
 8002030:	60bb      	str	r3, [r7, #8]
		}

	}

  	// Configure the DMA2D Mode, Color Mode and output offset
  	DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 8002032:	4b1c      	ldr	r3, [pc, #112]	@ (80020a4 <DMA2D_Init+0xf4>)
 8002034:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002038:	605a      	str	r2, [r3, #4]
  	DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
 800203a:	4b1a      	ldr	r3, [pc, #104]	@ (80020a4 <DMA2D_Init+0xf4>)
 800203c:	2201      	movs	r2, #1
 800203e:	609a      	str	r2, [r3, #8]
  	DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8002046:	461a      	mov	r2, r3
 8002048:	4b16      	ldr	r3, [pc, #88]	@ (80020a4 <DMA2D_Init+0xf4>)
 800204a:	60da      	str	r2, [r3, #12]
  	DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  // No Output Alpha Inversion
 800204c:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <DMA2D_Init+0xf4>)
 800204e:	2200      	movs	r2, #0
 8002050:	611a      	str	r2, [r3, #16]
  	DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     // No Output Red & Blue swap
 8002052:	4b14      	ldr	r3, [pc, #80]	@ (80020a4 <DMA2D_Init+0xf4>)
 8002054:	2200      	movs	r2, #0
 8002056:	615a      	str	r2, [r3, #20]

  	// DMA2D Callbacks Configuration
  	DMA2D_Handle.XferCpltCallback  = NULL;
 8002058:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <DMA2D_Init+0xf4>)
 800205a:	2200      	movs	r2, #0
 800205c:	621a      	str	r2, [r3, #32]

  	// Foreground Configuration
  	DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 800205e:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <DMA2D_Init+0xf4>)
 8002060:	2201      	movs	r2, #1
 8002062:	64da      	str	r2, [r3, #76]	@ 0x4c
  	DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 8002064:	4b0f      	ldr	r3, [pc, #60]	@ (80020a4 <DMA2D_Init+0xf4>)
 8002066:	22ff      	movs	r2, #255	@ 0xff
 8002068:	651a      	str	r2, [r3, #80]	@ 0x50
  	DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 800206a:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <DMA2D_Init+0xf4>)
 800206c:	220b      	movs	r2, #11
 800206e:	649a      	str	r2, [r3, #72]	@ 0x48
  	DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 8002070:	4a0c      	ldr	r2, [pc, #48]	@ (80020a4 <DMA2D_Init+0xf4>)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	65d3      	str	r3, [r2, #92]	@ 0x5c
  	DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 8002076:	4a0b      	ldr	r2, [pc, #44]	@ (80020a4 <DMA2D_Init+0xf4>)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	6453      	str	r3, [r2, #68]	@ 0x44
  	DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; 		// No ForeGround Red/Blue swap
 800207c:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <DMA2D_Init+0xf4>)
 800207e:	2200      	movs	r2, #0
 8002080:	659a      	str	r2, [r3, #88]	@ 0x58
  	DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion
 8002082:	4b08      	ldr	r3, [pc, #32]	@ (80020a4 <DMA2D_Init+0xf4>)
 8002084:	2200      	movs	r2, #0
 8002086:	655a      	str	r2, [r3, #84]	@ 0x54

  	DMA2D_Handle.Instance = DMA2D;
 8002088:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <DMA2D_Init+0xf4>)
 800208a:	4a07      	ldr	r2, [pc, #28]	@ (80020a8 <DMA2D_Init+0xf8>)
 800208c:	601a      	str	r2, [r3, #0]

  	// DMA2D Initialization
  	HAL_DMA2D_Init(&DMA2D_Handle);
 800208e:	4805      	ldr	r0, [pc, #20]	@ (80020a4 <DMA2D_Init+0xf4>)
 8002090:	f003 fa64 	bl	800555c <HAL_DMA2D_Init>
  	HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 8002094:	2101      	movs	r1, #1
 8002096:	4803      	ldr	r0, [pc, #12]	@ (80020a4 <DMA2D_Init+0xf4>)
 8002098:	f003 fbd8 	bl	800584c <HAL_DMA2D_ConfigLayer>

}
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	24000270 	.word	0x24000270
 80020a8:	52001000 	.word	0x52001000

080020ac <DMA2D_CopyBuffer>:

static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t ImageWidth, uint16_t ImageHeight)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	@ 0x28
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	4611      	mov	r1, r2
 80020b8:	461a      	mov	r2, r3
 80020ba:	460b      	mov	r3, r1
 80020bc:	80fb      	strh	r3, [r7, #6]
 80020be:	4613      	mov	r3, r2
 80020c0:	80bb      	strh	r3, [r7, #4]

	uint32_t xPos, yPos, destination;


	// calculate the destination transfer address
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 80020c2:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <DMA2D_CopyBuffer+0x6c>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80020ca:	085b      	lsrs	r3, r3, #1
 80020cc:	61fb      	str	r3, [r7, #28]
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 80020ce:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <DMA2D_CopyBuffer+0x6c>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80020d6:	085b      	lsrs	r3, r3, #1
 80020d8:	61bb      	str	r3, [r7, #24]

	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4613      	mov	r3, r2
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	461a      	mov	r2, r3
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	4413      	add	r3, r2
 80020ea:	009a      	lsls	r2, r3, #2
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4413      	add	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]

	// wait for the DMA2D transfer to ends
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 80020f2:	f04f 31ff 	mov.w	r1, #4294967295
 80020f6:	4809      	ldr	r0, [pc, #36]	@ (800211c <DMA2D_CopyBuffer+0x70>)
 80020f8:	f003 fabf 	bl	800567a <HAL_DMA2D_PollForTransfer>
	// copy the new decoded frame to the LCD Frame buffer
	HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 80020fc:	68f9      	ldr	r1, [r7, #12]
 80020fe:	88fa      	ldrh	r2, [r7, #6]
 8002100:	88bb      	ldrh	r3, [r7, #4]
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	4613      	mov	r3, r2
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4804      	ldr	r0, [pc, #16]	@ (800211c <DMA2D_CopyBuffer+0x70>)
 800210a:	f003 fa8b 	bl	8005624 <HAL_DMA2D_Start>

}
 800210e:	bf00      	nop
 8002110:	3720      	adds	r7, #32
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	240002d8 	.word	0x240002d8
 800211c:	24000270 	.word	0x24000270

08002120 <SD_Initialize>:

static void SD_Initialize(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0

	BSP_SD_Init();
 8002124:	f00c ff6c 	bl	800f000 <BSP_SD_Init>

}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}

0800212c <disable_btn_int>:
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);

}

static void disable_btn_int(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002130:	2006      	movs	r0, #6
 8002132:	f000 fe2c 	bl	8002d8e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8002136:	2007      	movs	r0, #7
 8002138:	f000 fe29 	bl	8002d8e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800213c:	2008      	movs	r0, #8
 800213e:	f000 fe26 	bl	8002d8e <HAL_NVIC_DisableIRQ>

}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_GPIO_EXTI_Callback>:
}

/************************** CALLBACK FUNCTIONS **************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]

	if(video.video_mode == SETTING_MODE)
 8002152:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <HAL_GPIO_EXTI_Callback+0x60>)
 8002154:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002158:	2b00      	cmp	r3, #0
 800215a:	d121      	bne.n	80021a0 <HAL_GPIO_EXTI_Callback+0x58>
	{

		if(!HAL_GPIO_ReadPin(PLUS_BTN_GPIO_Port, PLUS_BTN_Pin))
 800215c:	2104      	movs	r1, #4
 800215e:	4813      	ldr	r0, [pc, #76]	@ (80021ac <HAL_GPIO_EXTI_Callback+0x64>)
 8002160:	f003 fe78 	bl	8005e54 <HAL_GPIO_ReadPin>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d103      	bne.n	8002172 <HAL_GPIO_EXTI_Callback+0x2a>
			btn_status = BTN_PLUS;
 800216a:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <HAL_GPIO_EXTI_Callback+0x68>)
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
 8002170:	e014      	b.n	800219c <HAL_GPIO_EXTI_Callback+0x54>
		else if(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin))
 8002172:	2102      	movs	r1, #2
 8002174:	480d      	ldr	r0, [pc, #52]	@ (80021ac <HAL_GPIO_EXTI_Callback+0x64>)
 8002176:	f003 fe6d 	bl	8005e54 <HAL_GPIO_ReadPin>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d103      	bne.n	8002188 <HAL_GPIO_EXTI_Callback+0x40>
			btn_status = BTN_SET;
 8002180:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <HAL_GPIO_EXTI_Callback+0x68>)
 8002182:	2202      	movs	r2, #2
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	e009      	b.n	800219c <HAL_GPIO_EXTI_Callback+0x54>
		else if(!HAL_GPIO_ReadPin(MINUS_BTN_GPIO_Port, MINUS_BTN_Pin))
 8002188:	2101      	movs	r1, #1
 800218a:	4808      	ldr	r0, [pc, #32]	@ (80021ac <HAL_GPIO_EXTI_Callback+0x64>)
 800218c:	f003 fe62 	bl	8005e54 <HAL_GPIO_ReadPin>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d102      	bne.n	800219c <HAL_GPIO_EXTI_Callback+0x54>
			btn_status = BTN_MINUS;
 8002196:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <HAL_GPIO_EXTI_Callback+0x68>)
 8002198:	2203      	movs	r2, #3
 800219a:	701a      	strb	r2, [r3, #0]

		disable_btn_int();
 800219c:	f7ff ffc6 	bl	800212c <disable_btn_int>

	}

}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	2400cfd0 	.word	0x2400cfd0
 80021ac:	58020800 	.word	0x58020800
 80021b0:	24000314 	.word	0x24000314

080021b4 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

	spi_dma_not_ready = 0;
 80021bc:	4b04      	ldr	r3, [pc, #16]	@ (80021d0 <HAL_SPI_TxCpltCallback+0x1c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]

}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	24000084 	.word	0x24000084

080021d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021da:	4b0a      	ldr	r3, [pc, #40]	@ (8002204 <HAL_MspInit+0x30>)
 80021dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80021e0:	4a08      	ldr	r2, [pc, #32]	@ (8002204 <HAL_MspInit+0x30>)
 80021e2:	f043 0302 	orr.w	r3, r3, #2
 80021e6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80021ea:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <HAL_MspInit+0x30>)
 80021ec:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	58024400 	.word	0x58024400

08002208 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0b      	ldr	r2, [pc, #44]	@ (8002244 <HAL_DMA2D_MspInit+0x3c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d10e      	bne.n	8002238 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800221a:	4b0b      	ldr	r3, [pc, #44]	@ (8002248 <HAL_DMA2D_MspInit+0x40>)
 800221c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002220:	4a09      	ldr	r2, [pc, #36]	@ (8002248 <HAL_DMA2D_MspInit+0x40>)
 8002222:	f043 0310 	orr.w	r3, r3, #16
 8002226:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800222a:	4b07      	ldr	r3, [pc, #28]	@ (8002248 <HAL_DMA2D_MspInit+0x40>)
 800222c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	52001000 	.word	0x52001000
 8002248:	58024400 	.word	0x58024400

0800224c <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	  static MDMA_HandleTypeDef   hmdmaIn;
	  static MDMA_HandleTypeDef   hmdmaOut;


	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8002254:	4b54      	ldr	r3, [pc, #336]	@ (80023a8 <HAL_JPEG_MspInit+0x15c>)
 8002256:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800225a:	4a53      	ldr	r2, [pc, #332]	@ (80023a8 <HAL_JPEG_MspInit+0x15c>)
 800225c:	f043 0320 	orr.w	r3, r3, #32
 8002260:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8002264:	4b50      	ldr	r3, [pc, #320]	@ (80023a8 <HAL_JPEG_MspInit+0x15c>)
 8002266:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]

	  __HAL_RCC_MDMA_CLK_ENABLE();
 8002272:	4b4d      	ldr	r3, [pc, #308]	@ (80023a8 <HAL_JPEG_MspInit+0x15c>)
 8002274:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002278:	4a4b      	ldr	r2, [pc, #300]	@ (80023a8 <HAL_JPEG_MspInit+0x15c>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8002282:	4b49      	ldr	r3, [pc, #292]	@ (80023a8 <HAL_JPEG_MspInit+0x15c>)
 8002284:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]

	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 8002290:	220f      	movs	r2, #15
 8002292:	2107      	movs	r1, #7
 8002294:	2079      	movs	r0, #121	@ 0x79
 8002296:	f000 fd52 	bl	8002d3e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800229a:	2079      	movs	r0, #121	@ 0x79
 800229c:	f000 fd69 	bl	8002d72 <HAL_NVIC_EnableIRQ>

	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 80022a0:	4b42      	ldr	r3, [pc, #264]	@ (80023ac <HAL_JPEG_MspInit+0x160>)
 80022a2:	2280      	movs	r2, #128	@ 0x80
 80022a4:	60da      	str	r2, [r3, #12]
	  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80022a6:	4b41      	ldr	r3, [pc, #260]	@ (80023ac <HAL_JPEG_MspInit+0x160>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
	  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 80022ac:	4b3f      	ldr	r3, [pc, #252]	@ (80023ac <HAL_JPEG_MspInit+0x160>)
 80022ae:	2202      	movs	r2, #2
 80022b0:	615a      	str	r2, [r3, #20]
	  hmdmaIn.Init.DestinationInc     = MDMA_DEST_INC_DISABLE;
 80022b2:	4b3e      	ldr	r3, [pc, #248]	@ (80023ac <HAL_JPEG_MspInit+0x160>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
	  hmdmaIn.Init.SourceDataSize     = MDMA_SRC_DATASIZE_BYTE;
 80022b8:	4b3c      	ldr	r3, [pc, #240]	@ (80023ac <HAL_JPEG_MspInit+0x160>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
	  hmdmaIn.Init.DestDataSize       = MDMA_DEST_DATASIZE_WORD;
 80022be:	4b3b      	ldr	r3, [pc, #236]	@ (80023ac <HAL_JPEG_MspInit+0x160>)
 80022c0:	2280      	movs	r2, #128	@ 0x80
 80022c2:	621a      	str	r2, [r3, #32]
	  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;
 80022c4:	4b39      	ldr	r3, [pc, #228]	@ (80023ac <HAL_JPEG_MspInit+0x160>)
 80022c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022ca:	625a      	str	r2, [r3, #36]	@ 0x24
	  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 80022cc:	4b37      	ldr	r3, [pc, #220]	@ (80023ac <HAL_JPEG_MspInit+0x160>)
 80022ce:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80022d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hmdmaIn.Init.DestBurst          = MDMA_DEST_BURST_16BEATS;
 80022d4:	4b35      	ldr	r3, [pc, #212]	@ (80023ac <HAL_JPEG_MspInit+0x160>)
 80022d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022da:	631a      	str	r2, [r3, #48]	@ 0x30
	  hmdmaIn.Init.SourceBlockAddressOffset = 0;
 80022dc:	4b33      	ldr	r3, [pc, #204]	@ (80023ac <HAL_JPEG_MspInit+0x160>)
 80022de:	2200      	movs	r2, #0
 80022e0:	635a      	str	r2, [r3, #52]	@ 0x34
	  hmdmaIn.Init.DestBlockAddressOffset  = 0;
 80022e2:	4b32      	ldr	r3, [pc, #200]	@ (80023ac <HAL_JPEG_MspInit+0x160>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	639a      	str	r2, [r3, #56]	@ 0x38

	  hmdmaIn.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80022e8:	4b30      	ldr	r3, [pc, #192]	@ (80023ac <HAL_JPEG_MspInit+0x160>)
 80022ea:	2211      	movs	r2, #17
 80022ec:	605a      	str	r2, [r3, #4]
	  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80022ee:	4b2f      	ldr	r3, [pc, #188]	@ (80023ac <HAL_JPEG_MspInit+0x160>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
	  hmdmaIn.Init.BufferTransferLength = 32;
 80022f4:	4b2d      	ldr	r3, [pc, #180]	@ (80023ac <HAL_JPEG_MspInit+0x160>)
 80022f6:	2220      	movs	r2, #32
 80022f8:	629a      	str	r2, [r3, #40]	@ 0x28

	  hmdmaIn.Instance = MDMA_Channel1;
 80022fa:	4b2c      	ldr	r3, [pc, #176]	@ (80023ac <HAL_JPEG_MspInit+0x160>)
 80022fc:	4a2c      	ldr	r2, [pc, #176]	@ (80023b0 <HAL_JPEG_MspInit+0x164>)
 80022fe:	601a      	str	r2, [r3, #0]

	  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a2a      	ldr	r2, [pc, #168]	@ (80023ac <HAL_JPEG_MspInit+0x160>)
 8002304:	631a      	str	r2, [r3, #48]	@ 0x30
 8002306:	4a29      	ldr	r2, [pc, #164]	@ (80023ac <HAL_JPEG_MspInit+0x160>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6413      	str	r3, [r2, #64]	@ 0x40

	  HAL_MDMA_DeInit(&hmdmaIn);
 800230c:	4827      	ldr	r0, [pc, #156]	@ (80023ac <HAL_JPEG_MspInit+0x160>)
 800230e:	f005 fcbd 	bl	8007c8c <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaIn);
 8002312:	4826      	ldr	r0, [pc, #152]	@ (80023ac <HAL_JPEG_MspInit+0x160>)
 8002314:	f005 fc6e 	bl	8007bf4 <HAL_MDMA_Init>

	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 8002318:	4b26      	ldr	r3, [pc, #152]	@ (80023b4 <HAL_JPEG_MspInit+0x168>)
 800231a:	22c0      	movs	r2, #192	@ 0xc0
 800231c:	60da      	str	r2, [r3, #12]
	  hmdmaOut.Init.Endianness      = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800231e:	4b25      	ldr	r3, [pc, #148]	@ (80023b4 <HAL_JPEG_MspInit+0x168>)
 8002320:	2200      	movs	r2, #0
 8002322:	611a      	str	r2, [r3, #16]
	  hmdmaOut.Init.SourceInc       = MDMA_SRC_INC_DISABLE;
 8002324:	4b23      	ldr	r3, [pc, #140]	@ (80023b4 <HAL_JPEG_MspInit+0x168>)
 8002326:	2200      	movs	r2, #0
 8002328:	615a      	str	r2, [r3, #20]
	  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
 800232a:	4b22      	ldr	r3, [pc, #136]	@ (80023b4 <HAL_JPEG_MspInit+0x168>)
 800232c:	2208      	movs	r2, #8
 800232e:	619a      	str	r2, [r3, #24]
	  hmdmaOut.Init.SourceDataSize  = MDMA_SRC_DATASIZE_WORD;
 8002330:	4b20      	ldr	r3, [pc, #128]	@ (80023b4 <HAL_JPEG_MspInit+0x168>)
 8002332:	2220      	movs	r2, #32
 8002334:	61da      	str	r2, [r3, #28]
	  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
 8002336:	4b1f      	ldr	r3, [pc, #124]	@ (80023b4 <HAL_JPEG_MspInit+0x168>)
 8002338:	2200      	movs	r2, #0
 800233a:	621a      	str	r2, [r3, #32]
	  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
 800233c:	4b1d      	ldr	r3, [pc, #116]	@ (80023b4 <HAL_JPEG_MspInit+0x168>)
 800233e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002342:	625a      	str	r2, [r3, #36]	@ 0x24
	  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
 8002344:	4b1b      	ldr	r3, [pc, #108]	@ (80023b4 <HAL_JPEG_MspInit+0x168>)
 8002346:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800234a:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;
 800234c:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <HAL_JPEG_MspInit+0x168>)
 800234e:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 8002352:	631a      	str	r2, [r3, #48]	@ 0x30
	  hmdmaOut.Init.SourceBlockAddressOffset = 0;
 8002354:	4b17      	ldr	r3, [pc, #92]	@ (80023b4 <HAL_JPEG_MspInit+0x168>)
 8002356:	2200      	movs	r2, #0
 8002358:	635a      	str	r2, [r3, #52]	@ 0x34
	  hmdmaOut.Init.DestBlockAddressOffset  = 0;
 800235a:	4b16      	ldr	r3, [pc, #88]	@ (80023b4 <HAL_JPEG_MspInit+0x168>)
 800235c:	2200      	movs	r2, #0
 800235e:	639a      	str	r2, [r3, #56]	@ 0x38

	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8002360:	4b14      	ldr	r3, [pc, #80]	@ (80023b4 <HAL_JPEG_MspInit+0x168>)
 8002362:	2213      	movs	r2, #19
 8002364:	605a      	str	r2, [r3, #4]
	  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;
 8002366:	4b13      	ldr	r3, [pc, #76]	@ (80023b4 <HAL_JPEG_MspInit+0x168>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
	  hmdmaOut.Init.BufferTransferLength = 32;
 800236c:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <HAL_JPEG_MspInit+0x168>)
 800236e:	2220      	movs	r2, #32
 8002370:	629a      	str	r2, [r3, #40]	@ 0x28

	  hmdmaOut.Instance = MDMA_Channel0;
 8002372:	4b10      	ldr	r3, [pc, #64]	@ (80023b4 <HAL_JPEG_MspInit+0x168>)
 8002374:	4a10      	ldr	r2, [pc, #64]	@ (80023b8 <HAL_JPEG_MspInit+0x16c>)
 8002376:	601a      	str	r2, [r3, #0]

	  HAL_MDMA_DeInit(&hmdmaOut);
 8002378:	480e      	ldr	r0, [pc, #56]	@ (80023b4 <HAL_JPEG_MspInit+0x168>)
 800237a:	f005 fc87 	bl	8007c8c <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaOut);
 800237e:	480d      	ldr	r0, [pc, #52]	@ (80023b4 <HAL_JPEG_MspInit+0x168>)
 8002380:	f005 fc38 	bl	8007bf4 <HAL_MDMA_Init>

	  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a0b      	ldr	r2, [pc, #44]	@ (80023b4 <HAL_JPEG_MspInit+0x168>)
 8002388:	635a      	str	r2, [r3, #52]	@ 0x34
 800238a:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <HAL_JPEG_MspInit+0x168>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6413      	str	r3, [r2, #64]	@ 0x40


	  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 8002390:	220f      	movs	r2, #15
 8002392:	2108      	movs	r1, #8
 8002394:	207a      	movs	r0, #122	@ 0x7a
 8002396:	f000 fcd2 	bl	8002d3e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800239a:	207a      	movs	r0, #122	@ 0x7a
 800239c:	f000 fce9 	bl	8002d72 <HAL_NVIC_EnableIRQ>
}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	58024400 	.word	0x58024400
 80023ac:	240bc014 	.word	0x240bc014
 80023b0:	52000080 	.word	0x52000080
 80023b4:	240bc080 	.word	0x240bc080
 80023b8:	52000040 	.word	0x52000040

080023bc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b0bc      	sub	sp, #240	@ 0xf0
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023d4:	f107 0318 	add.w	r3, r7, #24
 80023d8:	22c0      	movs	r2, #192	@ 0xc0
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f00f fb57 	bl	8011a90 <memset>
  if(hsd->Instance==SDMMC1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a56      	ldr	r2, [pc, #344]	@ (8002540 <HAL_SD_MspInit+0x184>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	f040 80a5 	bne.w	8002538 <HAL_SD_MspInit+0x17c>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80023ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023fe:	f107 0318 	add.w	r3, r7, #24
 8002402:	4618      	mov	r0, r3
 8002404:	f006 ffb6 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 800240e:	f7ff f9a1 	bl	8001754 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002412:	4b4c      	ldr	r3, [pc, #304]	@ (8002544 <HAL_SD_MspInit+0x188>)
 8002414:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002418:	4a4a      	ldr	r2, [pc, #296]	@ (8002544 <HAL_SD_MspInit+0x188>)
 800241a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800241e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8002422:	4b48      	ldr	r3, [pc, #288]	@ (8002544 <HAL_SD_MspInit+0x188>)
 8002424:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002430:	4b44      	ldr	r3, [pc, #272]	@ (8002544 <HAL_SD_MspInit+0x188>)
 8002432:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002436:	4a43      	ldr	r2, [pc, #268]	@ (8002544 <HAL_SD_MspInit+0x188>)
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002440:	4b40      	ldr	r3, [pc, #256]	@ (8002544 <HAL_SD_MspInit+0x188>)
 8002442:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800244e:	4b3d      	ldr	r3, [pc, #244]	@ (8002544 <HAL_SD_MspInit+0x188>)
 8002450:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002454:	4a3b      	ldr	r2, [pc, #236]	@ (8002544 <HAL_SD_MspInit+0x188>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800245e:	4b39      	ldr	r3, [pc, #228]	@ (8002544 <HAL_SD_MspInit+0x188>)
 8002460:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800246c:	4b35      	ldr	r3, [pc, #212]	@ (8002544 <HAL_SD_MspInit+0x188>)
 800246e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002472:	4a34      	ldr	r2, [pc, #208]	@ (8002544 <HAL_SD_MspInit+0x188>)
 8002474:	f043 0308 	orr.w	r3, r3, #8
 8002478:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800247c:	4b31      	ldr	r3, [pc, #196]	@ (8002544 <HAL_SD_MspInit+0x188>)
 800247e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800248a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800248e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002498:	2301      	movs	r3, #1
 800249a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249e:	2303      	movs	r3, #3
 80024a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80024a4:	230c      	movs	r3, #12
 80024a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024aa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80024ae:	4619      	mov	r1, r3
 80024b0:	4825      	ldr	r0, [pc, #148]	@ (8002548 <HAL_SD_MspInit+0x18c>)
 80024b2:	f003 fb1f 	bl	8005af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80024b6:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80024ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024be:	2302      	movs	r3, #2
 80024c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024c4:	2301      	movs	r3, #1
 80024c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ca:	2303      	movs	r3, #3
 80024cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80024d0:	230c      	movs	r3, #12
 80024d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80024da:	4619      	mov	r1, r3
 80024dc:	481b      	ldr	r0, [pc, #108]	@ (800254c <HAL_SD_MspInit+0x190>)
 80024de:	f003 fb09 	bl	8005af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80024e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f6:	2303      	movs	r3, #3
 80024f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80024fc:	230c      	movs	r3, #12
 80024fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002502:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002506:	4619      	mov	r1, r3
 8002508:	4810      	ldr	r0, [pc, #64]	@ (800254c <HAL_SD_MspInit+0x190>)
 800250a:	f003 faf3 	bl	8005af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800250e:	2304      	movs	r3, #4
 8002510:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800251a:	2301      	movs	r3, #1
 800251c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	2303      	movs	r3, #3
 8002522:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002526:	230c      	movs	r3, #12
 8002528:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800252c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002530:	4619      	mov	r1, r3
 8002532:	4807      	ldr	r0, [pc, #28]	@ (8002550 <HAL_SD_MspInit+0x194>)
 8002534:	f003 fade 	bl	8005af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002538:	bf00      	nop
 800253a:	37f0      	adds	r7, #240	@ 0xf0
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	52007000 	.word	0x52007000
 8002544:	58024400 	.word	0x58024400
 8002548:	58020400 	.word	0x58020400
 800254c:	58020800 	.word	0x58020800
 8002550:	58020c00 	.word	0x58020c00

08002554 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b0ba      	sub	sp, #232	@ 0xe8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800256c:	f107 0310 	add.w	r3, r7, #16
 8002570:	22c0      	movs	r2, #192	@ 0xc0
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f00f fa8b 	bl	8011a90 <memset>
  if(hspi->Instance==SPI1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a41      	ldr	r2, [pc, #260]	@ (8002684 <HAL_SPI_MspInit+0x130>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d17a      	bne.n	800267a <HAL_SPI_MspInit+0x126>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002584:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002590:	2300      	movs	r3, #0
 8002592:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002594:	f107 0310 	add.w	r3, r7, #16
 8002598:	4618      	mov	r0, r3
 800259a:	f006 feeb 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80025a4:	f7ff f8d6 	bl	8001754 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025a8:	4b37      	ldr	r3, [pc, #220]	@ (8002688 <HAL_SPI_MspInit+0x134>)
 80025aa:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80025ae:	4a36      	ldr	r2, [pc, #216]	@ (8002688 <HAL_SPI_MspInit+0x134>)
 80025b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025b4:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80025b8:	4b33      	ldr	r3, [pc, #204]	@ (8002688 <HAL_SPI_MspInit+0x134>)
 80025ba:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80025be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c6:	4b30      	ldr	r3, [pc, #192]	@ (8002688 <HAL_SPI_MspInit+0x134>)
 80025c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80025cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002688 <HAL_SPI_MspInit+0x134>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80025d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002688 <HAL_SPI_MspInit+0x134>)
 80025d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80025e4:	23a0      	movs	r3, #160	@ 0xa0
 80025e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ea:	2302      	movs	r3, #2
 80025ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025fc:	2305      	movs	r3, #5
 80025fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002606:	4619      	mov	r1, r3
 8002608:	4820      	ldr	r0, [pc, #128]	@ (800268c <HAL_SPI_MspInit+0x138>)
 800260a:	f003 fa73 	bl	8005af4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 800260e:	4b20      	ldr	r3, [pc, #128]	@ (8002690 <HAL_SPI_MspInit+0x13c>)
 8002610:	4a20      	ldr	r2, [pc, #128]	@ (8002694 <HAL_SPI_MspInit+0x140>)
 8002612:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002614:	4b1e      	ldr	r3, [pc, #120]	@ (8002690 <HAL_SPI_MspInit+0x13c>)
 8002616:	2226      	movs	r2, #38	@ 0x26
 8002618:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800261a:	4b1d      	ldr	r3, [pc, #116]	@ (8002690 <HAL_SPI_MspInit+0x13c>)
 800261c:	2240      	movs	r2, #64	@ 0x40
 800261e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002620:	4b1b      	ldr	r3, [pc, #108]	@ (8002690 <HAL_SPI_MspInit+0x13c>)
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002626:	4b1a      	ldr	r3, [pc, #104]	@ (8002690 <HAL_SPI_MspInit+0x13c>)
 8002628:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800262c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800262e:	4b18      	ldr	r3, [pc, #96]	@ (8002690 <HAL_SPI_MspInit+0x13c>)
 8002630:	2200      	movs	r2, #0
 8002632:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002634:	4b16      	ldr	r3, [pc, #88]	@ (8002690 <HAL_SPI_MspInit+0x13c>)
 8002636:	2200      	movs	r2, #0
 8002638:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800263a:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <HAL_SPI_MspInit+0x13c>)
 800263c:	2200      	movs	r2, #0
 800263e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002640:	4b13      	ldr	r3, [pc, #76]	@ (8002690 <HAL_SPI_MspInit+0x13c>)
 8002642:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002646:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002648:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <HAL_SPI_MspInit+0x13c>)
 800264a:	2200      	movs	r2, #0
 800264c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800264e:	4810      	ldr	r0, [pc, #64]	@ (8002690 <HAL_SPI_MspInit+0x13c>)
 8002650:	f000 fbb8 	bl	8002dc4 <HAL_DMA_Init>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 800265a:	f7ff f87b 	bl	8001754 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a0b      	ldr	r2, [pc, #44]	@ (8002690 <HAL_SPI_MspInit+0x13c>)
 8002662:	679a      	str	r2, [r3, #120]	@ 0x78
 8002664:	4a0a      	ldr	r2, [pc, #40]	@ (8002690 <HAL_SPI_MspInit+0x13c>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	2023      	movs	r0, #35	@ 0x23
 8002670:	f000 fb65 	bl	8002d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002674:	2023      	movs	r0, #35	@ 0x23
 8002676:	f000 fb7c 	bl	8002d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800267a:	bf00      	nop
 800267c:	37e8      	adds	r7, #232	@ 0xe8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40013000 	.word	0x40013000
 8002688:	58024400 	.word	0x58024400
 800268c:	58020000 	.word	0x58020000
 8002690:	240001a0 	.word	0x240001a0
 8002694:	40020010 	.word	0x40020010

08002698 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b0b2      	sub	sp, #200	@ 0xc8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a0:	f107 0308 	add.w	r3, r7, #8
 80026a4:	22c0      	movs	r2, #192	@ 0xc0
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f00f f9f1 	bl	8011a90 <memset>
  if(hrtc->Instance==RTC)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a10      	ldr	r2, [pc, #64]	@ (80026f4 <HAL_RTC_MspInit+0x5c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d119      	bne.n	80026ec <HAL_RTC_MspInit+0x54>
  {

    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026b8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80026c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026cc:	f107 0308 	add.w	r3, r7, #8
 80026d0:	4618      	mov	r0, r3
 80026d2:	f006 fe4f 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80026dc:	f7ff f83a 	bl	8001754 <Error_Handler>
    }

    __HAL_RCC_RTC_ENABLE();
 80026e0:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <HAL_RTC_MspInit+0x60>)
 80026e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e4:	4a04      	ldr	r2, [pc, #16]	@ (80026f8 <HAL_RTC_MspInit+0x60>)
 80026e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026ea:	6713      	str	r3, [r2, #112]	@ 0x70

  }

}
 80026ec:	bf00      	nop
 80026ee:	37c8      	adds	r7, #200	@ 0xc8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	58004000 	.word	0x58004000
 80026f8:	58024400 	.word	0x58024400

080026fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <NMI_Handler+0x4>

08002704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <HardFault_Handler+0x4>

0800270c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <MemManage_Handler+0x4>

08002714 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <BusFault_Handler+0x4>

0800271c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002720:	bf00      	nop
 8002722:	e7fd      	b.n	8002720 <UsageFault_Handler+0x4>

08002724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002752:	f000 f991 	bl	8002a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <JPEG_IRQHandler>:
/* please refer to the startup file (startup_stm32h7xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void JPEG_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  HAL_JPEG_IRQHandler(&JPEG_Handle);
 8002760:	4802      	ldr	r0, [pc, #8]	@ (800276c <JPEG_IRQHandler+0x10>)
 8002762:	f003 fdc3 	bl	80062ec <HAL_JPEG_IRQHandler>
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	24000218 	.word	0x24000218

08002770 <MDMA_IRQHandler>:


void MDMA_IRQHandler()
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Check the interrupt and clear flag */
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmain);
 8002774:	4b05      	ldr	r3, [pc, #20]	@ (800278c <MDMA_IRQHandler+0x1c>)
 8002776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002778:	4618      	mov	r0, r3
 800277a:	f005 fb87 	bl	8007e8c <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);
 800277e:	4b03      	ldr	r3, [pc, #12]	@ (800278c <MDMA_IRQHandler+0x1c>)
 8002780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002782:	4618      	mov	r0, r3
 8002784:	f005 fb82 	bl	8007e8c <HAL_MDMA_IRQHandler>
}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}
 800278c:	24000218 	.word	0x24000218

08002790 <DMA1_Stream0_IRQHandler>:

void DMA1_Stream0_IRQHandler()
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0

	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002794:	4802      	ldr	r0, [pc, #8]	@ (80027a0 <DMA1_Stream0_IRQHandler+0x10>)
 8002796:	f001 fb53 	bl	8003e40 <HAL_DMA_IRQHandler>

}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	240001a0 	.word	0x240001a0

080027a4 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80027a8:	4802      	ldr	r0, [pc, #8]	@ (80027b4 <SPI1_IRQHandler+0x10>)
 80027aa:	f00b fb2d 	bl	800de08 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	24000118 	.word	0x24000118

080027b8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0

    HAL_GPIO_EXTI_IRQHandler(MINUS_BTN_Pin);
 80027bc:	2001      	movs	r0, #1
 80027be:	f003 fb7a 	bl	8005eb6 <HAL_GPIO_EXTI_IRQHandler>

}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	af00      	add	r7, sp, #0

    HAL_GPIO_EXTI_IRQHandler(SET_BTN_Pin);
 80027ca:	2002      	movs	r0, #2
 80027cc:	f003 fb73 	bl	8005eb6 <HAL_GPIO_EXTI_IRQHandler>

}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0

    HAL_GPIO_EXTI_IRQHandler(PLUS_BTN_Pin);
 80027d8:	2004      	movs	r0, #4
 80027da:	f003 fb6c 	bl	8005eb6 <HAL_GPIO_EXTI_IRQHandler>

}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027ec:	4a14      	ldr	r2, [pc, #80]	@ (8002840 <_sbrk+0x5c>)
 80027ee:	4b15      	ldr	r3, [pc, #84]	@ (8002844 <_sbrk+0x60>)
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f8:	4b13      	ldr	r3, [pc, #76]	@ (8002848 <_sbrk+0x64>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d102      	bne.n	8002806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002800:	4b11      	ldr	r3, [pc, #68]	@ (8002848 <_sbrk+0x64>)
 8002802:	4a12      	ldr	r2, [pc, #72]	@ (800284c <_sbrk+0x68>)
 8002804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002806:	4b10      	ldr	r3, [pc, #64]	@ (8002848 <_sbrk+0x64>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	429a      	cmp	r2, r3
 8002812:	d207      	bcs.n	8002824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002814:	f00f f944 	bl	8011aa0 <__errno>
 8002818:	4603      	mov	r3, r0
 800281a:	220c      	movs	r2, #12
 800281c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
 8002822:	e009      	b.n	8002838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002824:	4b08      	ldr	r3, [pc, #32]	@ (8002848 <_sbrk+0x64>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800282a:	4b07      	ldr	r3, [pc, #28]	@ (8002848 <_sbrk+0x64>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	4a05      	ldr	r2, [pc, #20]	@ (8002848 <_sbrk+0x64>)
 8002834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002836:	68fb      	ldr	r3, [r7, #12]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	24100000 	.word	0x24100000
 8002844:	00000800 	.word	0x00000800
 8002848:	240bc0ec 	.word	0x240bc0ec
 800284c:	240bc278 	.word	0x240bc278

08002850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002854:	4b32      	ldr	r3, [pc, #200]	@ (8002920 <SystemInit+0xd0>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285a:	4a31      	ldr	r2, [pc, #196]	@ (8002920 <SystemInit+0xd0>)
 800285c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002860:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002864:	4b2f      	ldr	r3, [pc, #188]	@ (8002924 <SystemInit+0xd4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	2b02      	cmp	r3, #2
 800286e:	d807      	bhi.n	8002880 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002870:	4b2c      	ldr	r3, [pc, #176]	@ (8002924 <SystemInit+0xd4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f023 030f 	bic.w	r3, r3, #15
 8002878:	4a2a      	ldr	r2, [pc, #168]	@ (8002924 <SystemInit+0xd4>)
 800287a:	f043 0303 	orr.w	r3, r3, #3
 800287e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002880:	4b29      	ldr	r3, [pc, #164]	@ (8002928 <SystemInit+0xd8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a28      	ldr	r2, [pc, #160]	@ (8002928 <SystemInit+0xd8>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800288c:	4b26      	ldr	r3, [pc, #152]	@ (8002928 <SystemInit+0xd8>)
 800288e:	2200      	movs	r2, #0
 8002890:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002892:	4b25      	ldr	r3, [pc, #148]	@ (8002928 <SystemInit+0xd8>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4924      	ldr	r1, [pc, #144]	@ (8002928 <SystemInit+0xd8>)
 8002898:	4b24      	ldr	r3, [pc, #144]	@ (800292c <SystemInit+0xdc>)
 800289a:	4013      	ands	r3, r2
 800289c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800289e:	4b21      	ldr	r3, [pc, #132]	@ (8002924 <SystemInit+0xd4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002924 <SystemInit+0xd4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 030f 	bic.w	r3, r3, #15
 80028b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002924 <SystemInit+0xd4>)
 80028b4:	f043 0303 	orr.w	r3, r3, #3
 80028b8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80028ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002928 <SystemInit+0xd8>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80028c0:	4b19      	ldr	r3, [pc, #100]	@ (8002928 <SystemInit+0xd8>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80028c6:	4b18      	ldr	r3, [pc, #96]	@ (8002928 <SystemInit+0xd8>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80028cc:	4b16      	ldr	r3, [pc, #88]	@ (8002928 <SystemInit+0xd8>)
 80028ce:	4a18      	ldr	r2, [pc, #96]	@ (8002930 <SystemInit+0xe0>)
 80028d0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80028d2:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <SystemInit+0xd8>)
 80028d4:	4a17      	ldr	r2, [pc, #92]	@ (8002934 <SystemInit+0xe4>)
 80028d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80028d8:	4b13      	ldr	r3, [pc, #76]	@ (8002928 <SystemInit+0xd8>)
 80028da:	4a17      	ldr	r2, [pc, #92]	@ (8002938 <SystemInit+0xe8>)
 80028dc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80028de:	4b12      	ldr	r3, [pc, #72]	@ (8002928 <SystemInit+0xd8>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80028e4:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <SystemInit+0xd8>)
 80028e6:	4a14      	ldr	r2, [pc, #80]	@ (8002938 <SystemInit+0xe8>)
 80028e8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80028ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002928 <SystemInit+0xd8>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80028f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002928 <SystemInit+0xd8>)
 80028f2:	4a11      	ldr	r2, [pc, #68]	@ (8002938 <SystemInit+0xe8>)
 80028f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80028f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002928 <SystemInit+0xd8>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <SystemInit+0xd8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a09      	ldr	r2, [pc, #36]	@ (8002928 <SystemInit+0xd8>)
 8002902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002906:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002908:	4b07      	ldr	r3, [pc, #28]	@ (8002928 <SystemInit+0xd8>)
 800290a:	2200      	movs	r2, #0
 800290c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800290e:	4b0b      	ldr	r3, [pc, #44]	@ (800293c <SystemInit+0xec>)
 8002910:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002914:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000ed00 	.word	0xe000ed00
 8002924:	52002000 	.word	0x52002000
 8002928:	58024400 	.word	0x58024400
 800292c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002930:	02020200 	.word	0x02020200
 8002934:	01ff0000 	.word	0x01ff0000
 8002938:	01010280 	.word	0x01010280
 800293c:	52004000 	.word	0x52004000

08002940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002940:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002978 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002944:	f7ff ff84 	bl	8002850 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002948:	480c      	ldr	r0, [pc, #48]	@ (800297c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800294a:	490d      	ldr	r1, [pc, #52]	@ (8002980 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800294c:	4a0d      	ldr	r2, [pc, #52]	@ (8002984 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800294e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002950:	e002      	b.n	8002958 <LoopCopyDataInit>

08002952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002956:	3304      	adds	r3, #4

08002958 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800295a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800295c:	d3f9      	bcc.n	8002952 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800295e:	4a0a      	ldr	r2, [pc, #40]	@ (8002988 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002960:	4c0a      	ldr	r4, [pc, #40]	@ (800298c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002964:	e001      	b.n	800296a <LoopFillZerobss>

08002966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002968:	3204      	adds	r2, #4

0800296a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800296a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800296c:	d3fb      	bcc.n	8002966 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800296e:	f00f f89d 	bl	8011aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002972:	f7fe fc1d 	bl	80011b0 <main>
  bx  lr
 8002976:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002978:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800297c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002980:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 8002984:	080127a8 	.word	0x080127a8
  ldr r2, =_sbss
 8002988:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 800298c:	240bc274 	.word	0x240bc274

08002990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002990:	e7fe      	b.n	8002990 <ADC_IRQHandler>
	...

08002994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299a:	2003      	movs	r0, #3
 800299c:	f000 f9c4 	bl	8002d28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80029a0:	f006 fb28 	bl	8008ff4 <HAL_RCC_GetSysClockFreq>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <HAL_Init+0x68>)
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	4913      	ldr	r1, [pc, #76]	@ (8002a00 <HAL_Init+0x6c>)
 80029b2:	5ccb      	ldrb	r3, [r1, r3]
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
 80029bc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80029be:	4b0f      	ldr	r3, [pc, #60]	@ (80029fc <HAL_Init+0x68>)
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002a00 <HAL_Init+0x6c>)
 80029c8:	5cd3      	ldrb	r3, [r2, r3]
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
 80029d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002a04 <HAL_Init+0x70>)
 80029d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002a08 <HAL_Init+0x74>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029de:	200f      	movs	r0, #15
 80029e0:	f000 f814 	bl	8002a0c <HAL_InitTick>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e002      	b.n	80029f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029ee:	f7ff fbf1 	bl	80021d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	58024400 	.word	0x58024400
 8002a00:	08012458 	.word	0x08012458
 8002a04:	2400000c 	.word	0x2400000c
 8002a08:	24000008 	.word	0x24000008

08002a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a14:	4b15      	ldr	r3, [pc, #84]	@ (8002a6c <HAL_InitTick+0x60>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e021      	b.n	8002a64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a20:	4b13      	ldr	r3, [pc, #76]	@ (8002a70 <HAL_InitTick+0x64>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <HAL_InitTick+0x60>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 f9b7 	bl	8002daa <HAL_SYSTICK_Config>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e00e      	b.n	8002a64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b0f      	cmp	r3, #15
 8002a4a:	d80a      	bhi.n	8002a62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	f04f 30ff 	mov.w	r0, #4294967295
 8002a54:	f000 f973 	bl	8002d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a58:	4a06      	ldr	r2, [pc, #24]	@ (8002a74 <HAL_InitTick+0x68>)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e000      	b.n	8002a64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	24000014 	.word	0x24000014
 8002a70:	24000008 	.word	0x24000008
 8002a74:	24000010 	.word	0x24000010

08002a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <HAL_IncTick+0x20>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <HAL_IncTick+0x24>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4413      	add	r3, r2
 8002a88:	4a04      	ldr	r2, [pc, #16]	@ (8002a9c <HAL_IncTick+0x24>)
 8002a8a:	6013      	str	r3, [r2, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	24000014 	.word	0x24000014
 8002a9c:	240bc0f0 	.word	0x240bc0f0

08002aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	@ (8002ab4 <HAL_GetTick+0x14>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	240bc0f0 	.word	0x240bc0f0

08002ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ac0:	f7ff ffee 	bl	8002aa0 <HAL_GetTick>
 8002ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad0:	d005      	beq.n	8002ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8002afc <HAL_Delay+0x44>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4413      	add	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ade:	bf00      	nop
 8002ae0:	f7ff ffde 	bl	8002aa0 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d8f7      	bhi.n	8002ae0 <HAL_Delay+0x28>
  {
  }
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	24000014 	.word	0x24000014

08002b00 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002b04:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <HAL_SuspendTick+0x1c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a04      	ldr	r2, [pc, #16]	@ (8002b1c <HAL_SuspendTick+0x1c>)
 8002b0a:	f023 0302 	bic.w	r3, r3, #2
 8002b0e:	6013      	str	r3, [r2, #0]
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000e010 	.word	0xe000e010

08002b20 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002b24:	4b05      	ldr	r3, [pc, #20]	@ (8002b3c <HAL_ResumeTick+0x1c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a04      	ldr	r2, [pc, #16]	@ (8002b3c <HAL_ResumeTick+0x1c>)
 8002b2a:	f043 0302 	orr.w	r3, r3, #2
 8002b2e:	6013      	str	r3, [r2, #0]
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	e000e010 	.word	0xe000e010

08002b40 <__NVIC_SetPriorityGrouping>:
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b50:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <__NVIC_SetPriorityGrouping+0x40>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b68:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <__NVIC_SetPriorityGrouping+0x44>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b6e:	4a04      	ldr	r2, [pc, #16]	@ (8002b80 <__NVIC_SetPriorityGrouping+0x40>)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	60d3      	str	r3, [r2, #12]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000ed00 	.word	0xe000ed00
 8002b84:	05fa0000 	.word	0x05fa0000

08002b88 <__NVIC_GetPriorityGrouping>:
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	0a1b      	lsrs	r3, r3, #8
 8002b92:	f003 0307 	and.w	r3, r3, #7
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <__NVIC_EnableIRQ>:
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	db0b      	blt.n	8002bce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb6:	88fb      	ldrh	r3, [r7, #6]
 8002bb8:	f003 021f 	and.w	r2, r3, #31
 8002bbc:	4907      	ldr	r1, [pc, #28]	@ (8002bdc <__NVIC_EnableIRQ+0x38>)
 8002bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	e000e100 	.word	0xe000e100

08002be0 <__NVIC_DisableIRQ>:
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	db12      	blt.n	8002c18 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	490a      	ldr	r1, [pc, #40]	@ (8002c24 <__NVIC_DisableIRQ+0x44>)
 8002bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2001      	movs	r0, #1
 8002c02:	fa00 f202 	lsl.w	r2, r0, r2
 8002c06:	3320      	adds	r3, #32
 8002c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c0c:	f3bf 8f4f 	dsb	sy
}
 8002c10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c12:	f3bf 8f6f 	isb	sy
}
 8002c16:	bf00      	nop
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000e100 	.word	0xe000e100

08002c28 <__NVIC_SetPriority>:
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	db0a      	blt.n	8002c52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	490c      	ldr	r1, [pc, #48]	@ (8002c74 <__NVIC_SetPriority+0x4c>)
 8002c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c46:	0112      	lsls	r2, r2, #4
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002c50:	e00a      	b.n	8002c68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4908      	ldr	r1, [pc, #32]	@ (8002c78 <__NVIC_SetPriority+0x50>)
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	3b04      	subs	r3, #4
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	440b      	add	r3, r1
 8002c66:	761a      	strb	r2, [r3, #24]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000e100 	.word	0xe000e100
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <NVIC_EncodePriority>:
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	@ 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f1c3 0307 	rsb	r3, r3, #7
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	bf28      	it	cs
 8002c9a:	2304      	movcs	r3, #4
 8002c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d902      	bls.n	8002cac <NVIC_EncodePriority+0x30>
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3b03      	subs	r3, #3
 8002caa:	e000      	b.n	8002cae <NVIC_EncodePriority+0x32>
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	43d9      	mvns	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	4313      	orrs	r3, r2
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3724      	adds	r7, #36	@ 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cf4:	d301      	bcc.n	8002cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e00f      	b.n	8002d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8002d24 <SysTick_Config+0x40>)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d02:	210f      	movs	r1, #15
 8002d04:	f04f 30ff 	mov.w	r0, #4294967295
 8002d08:	f7ff ff8e 	bl	8002c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d0c:	4b05      	ldr	r3, [pc, #20]	@ (8002d24 <SysTick_Config+0x40>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d12:	4b04      	ldr	r3, [pc, #16]	@ (8002d24 <SysTick_Config+0x40>)
 8002d14:	2207      	movs	r2, #7
 8002d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	e000e010 	.word	0xe000e010

08002d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ff05 	bl	8002b40 <__NVIC_SetPriorityGrouping>
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b086      	sub	sp, #24
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	4603      	mov	r3, r0
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d4c:	f7ff ff1c 	bl	8002b88 <__NVIC_GetPriorityGrouping>
 8002d50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	6978      	ldr	r0, [r7, #20]
 8002d58:	f7ff ff90 	bl	8002c7c <NVIC_EncodePriority>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ff5f 	bl	8002c28 <__NVIC_SetPriority>
}
 8002d6a:	bf00      	nop
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4603      	mov	r3, r0
 8002d7a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff0f 	bl	8002ba4 <__NVIC_EnableIRQ>
}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	4603      	mov	r3, r0
 8002d96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff1f 	bl	8002be0 <__NVIC_DisableIRQ>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff ff96 	bl	8002ce4 <SysTick_Config>
 8002db8:	4603      	mov	r3, r0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002dcc:	f7ff fe68 	bl	8002aa0 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e37d      	b.n	80034d8 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a66      	ldr	r2, [pc, #408]	@ (8002f7c <HAL_DMA_Init+0x1b8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d04a      	beq.n	8002e7c <HAL_DMA_Init+0xb8>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a65      	ldr	r2, [pc, #404]	@ (8002f80 <HAL_DMA_Init+0x1bc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d045      	beq.n	8002e7c <HAL_DMA_Init+0xb8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a63      	ldr	r2, [pc, #396]	@ (8002f84 <HAL_DMA_Init+0x1c0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d040      	beq.n	8002e7c <HAL_DMA_Init+0xb8>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a62      	ldr	r2, [pc, #392]	@ (8002f88 <HAL_DMA_Init+0x1c4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d03b      	beq.n	8002e7c <HAL_DMA_Init+0xb8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a60      	ldr	r2, [pc, #384]	@ (8002f8c <HAL_DMA_Init+0x1c8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d036      	beq.n	8002e7c <HAL_DMA_Init+0xb8>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a5f      	ldr	r2, [pc, #380]	@ (8002f90 <HAL_DMA_Init+0x1cc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d031      	beq.n	8002e7c <HAL_DMA_Init+0xb8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a5d      	ldr	r2, [pc, #372]	@ (8002f94 <HAL_DMA_Init+0x1d0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d02c      	beq.n	8002e7c <HAL_DMA_Init+0xb8>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a5c      	ldr	r2, [pc, #368]	@ (8002f98 <HAL_DMA_Init+0x1d4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d027      	beq.n	8002e7c <HAL_DMA_Init+0xb8>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a5a      	ldr	r2, [pc, #360]	@ (8002f9c <HAL_DMA_Init+0x1d8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d022      	beq.n	8002e7c <HAL_DMA_Init+0xb8>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a59      	ldr	r2, [pc, #356]	@ (8002fa0 <HAL_DMA_Init+0x1dc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d01d      	beq.n	8002e7c <HAL_DMA_Init+0xb8>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a57      	ldr	r2, [pc, #348]	@ (8002fa4 <HAL_DMA_Init+0x1e0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d018      	beq.n	8002e7c <HAL_DMA_Init+0xb8>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a56      	ldr	r2, [pc, #344]	@ (8002fa8 <HAL_DMA_Init+0x1e4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d013      	beq.n	8002e7c <HAL_DMA_Init+0xb8>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a54      	ldr	r2, [pc, #336]	@ (8002fac <HAL_DMA_Init+0x1e8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00e      	beq.n	8002e7c <HAL_DMA_Init+0xb8>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a53      	ldr	r2, [pc, #332]	@ (8002fb0 <HAL_DMA_Init+0x1ec>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d009      	beq.n	8002e7c <HAL_DMA_Init+0xb8>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a51      	ldr	r2, [pc, #324]	@ (8002fb4 <HAL_DMA_Init+0x1f0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d004      	beq.n	8002e7c <HAL_DMA_Init+0xb8>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a50      	ldr	r2, [pc, #320]	@ (8002fb8 <HAL_DMA_Init+0x1f4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d101      	bne.n	8002e80 <HAL_DMA_Init+0xbc>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <HAL_DMA_Init+0xbe>
 8002e80:	2300      	movs	r3, #0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 813c 	beq.w	8003100 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a37      	ldr	r2, [pc, #220]	@ (8002f7c <HAL_DMA_Init+0x1b8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d04a      	beq.n	8002f38 <HAL_DMA_Init+0x174>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a36      	ldr	r2, [pc, #216]	@ (8002f80 <HAL_DMA_Init+0x1bc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d045      	beq.n	8002f38 <HAL_DMA_Init+0x174>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a34      	ldr	r2, [pc, #208]	@ (8002f84 <HAL_DMA_Init+0x1c0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d040      	beq.n	8002f38 <HAL_DMA_Init+0x174>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a33      	ldr	r2, [pc, #204]	@ (8002f88 <HAL_DMA_Init+0x1c4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d03b      	beq.n	8002f38 <HAL_DMA_Init+0x174>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a31      	ldr	r2, [pc, #196]	@ (8002f8c <HAL_DMA_Init+0x1c8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d036      	beq.n	8002f38 <HAL_DMA_Init+0x174>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a30      	ldr	r2, [pc, #192]	@ (8002f90 <HAL_DMA_Init+0x1cc>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d031      	beq.n	8002f38 <HAL_DMA_Init+0x174>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a2e      	ldr	r2, [pc, #184]	@ (8002f94 <HAL_DMA_Init+0x1d0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d02c      	beq.n	8002f38 <HAL_DMA_Init+0x174>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a2d      	ldr	r2, [pc, #180]	@ (8002f98 <HAL_DMA_Init+0x1d4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d027      	beq.n	8002f38 <HAL_DMA_Init+0x174>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a2b      	ldr	r2, [pc, #172]	@ (8002f9c <HAL_DMA_Init+0x1d8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d022      	beq.n	8002f38 <HAL_DMA_Init+0x174>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8002fa0 <HAL_DMA_Init+0x1dc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d01d      	beq.n	8002f38 <HAL_DMA_Init+0x174>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a28      	ldr	r2, [pc, #160]	@ (8002fa4 <HAL_DMA_Init+0x1e0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d018      	beq.n	8002f38 <HAL_DMA_Init+0x174>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a27      	ldr	r2, [pc, #156]	@ (8002fa8 <HAL_DMA_Init+0x1e4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d013      	beq.n	8002f38 <HAL_DMA_Init+0x174>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a25      	ldr	r2, [pc, #148]	@ (8002fac <HAL_DMA_Init+0x1e8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00e      	beq.n	8002f38 <HAL_DMA_Init+0x174>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a24      	ldr	r2, [pc, #144]	@ (8002fb0 <HAL_DMA_Init+0x1ec>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d009      	beq.n	8002f38 <HAL_DMA_Init+0x174>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a22      	ldr	r2, [pc, #136]	@ (8002fb4 <HAL_DMA_Init+0x1f0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d004      	beq.n	8002f38 <HAL_DMA_Init+0x174>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a21      	ldr	r2, [pc, #132]	@ (8002fb8 <HAL_DMA_Init+0x1f4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d108      	bne.n	8002f4a <HAL_DMA_Init+0x186>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	e007      	b.n	8002f5a <HAL_DMA_Init+0x196>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f5a:	e02f      	b.n	8002fbc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f5c:	f7ff fda0 	bl	8002aa0 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b05      	cmp	r3, #5
 8002f68:	d928      	bls.n	8002fbc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2203      	movs	r2, #3
 8002f74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e2ad      	b.n	80034d8 <HAL_DMA_Init+0x714>
 8002f7c:	40020010 	.word	0x40020010
 8002f80:	40020028 	.word	0x40020028
 8002f84:	40020040 	.word	0x40020040
 8002f88:	40020058 	.word	0x40020058
 8002f8c:	40020070 	.word	0x40020070
 8002f90:	40020088 	.word	0x40020088
 8002f94:	400200a0 	.word	0x400200a0
 8002f98:	400200b8 	.word	0x400200b8
 8002f9c:	40020410 	.word	0x40020410
 8002fa0:	40020428 	.word	0x40020428
 8002fa4:	40020440 	.word	0x40020440
 8002fa8:	40020458 	.word	0x40020458
 8002fac:	40020470 	.word	0x40020470
 8002fb0:	40020488 	.word	0x40020488
 8002fb4:	400204a0 	.word	0x400204a0
 8002fb8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1c8      	bne.n	8002f5c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4b73      	ldr	r3, [pc, #460]	@ (80031a4 <HAL_DMA_Init+0x3e0>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002fe2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ffa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4313      	orrs	r3, r2
 8003006:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	2b04      	cmp	r3, #4
 800300e:	d107      	bne.n	8003020 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003018:	4313      	orrs	r3, r2
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b28      	cmp	r3, #40	@ 0x28
 8003026:	d903      	bls.n	8003030 <HAL_DMA_Init+0x26c>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b2e      	cmp	r3, #46	@ 0x2e
 800302e:	d91f      	bls.n	8003070 <HAL_DMA_Init+0x2ac>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b3e      	cmp	r3, #62	@ 0x3e
 8003036:	d903      	bls.n	8003040 <HAL_DMA_Init+0x27c>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b42      	cmp	r3, #66	@ 0x42
 800303e:	d917      	bls.n	8003070 <HAL_DMA_Init+0x2ac>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b46      	cmp	r3, #70	@ 0x46
 8003046:	d903      	bls.n	8003050 <HAL_DMA_Init+0x28c>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b48      	cmp	r3, #72	@ 0x48
 800304e:	d90f      	bls.n	8003070 <HAL_DMA_Init+0x2ac>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b4e      	cmp	r3, #78	@ 0x4e
 8003056:	d903      	bls.n	8003060 <HAL_DMA_Init+0x29c>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b52      	cmp	r3, #82	@ 0x52
 800305e:	d907      	bls.n	8003070 <HAL_DMA_Init+0x2ac>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b73      	cmp	r3, #115	@ 0x73
 8003066:	d905      	bls.n	8003074 <HAL_DMA_Init+0x2b0>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b77      	cmp	r3, #119	@ 0x77
 800306e:	d801      	bhi.n	8003074 <HAL_DMA_Init+0x2b0>
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_DMA_Init+0x2b2>
 8003074:	2300      	movs	r3, #0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003080:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f023 0307 	bic.w	r3, r3, #7
 8003098:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d117      	bne.n	80030dc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00e      	beq.n	80030dc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f002 f8c2 	bl	8005248 <DMA_CheckFifoParam>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d008      	beq.n	80030dc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2240      	movs	r2, #64	@ 0x40
 80030ce:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e1fd      	b.n	80034d8 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f001 fffd 	bl	80050e4 <DMA_CalcBaseAndBitshift>
 80030ea:	4603      	mov	r3, r0
 80030ec:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	223f      	movs	r2, #63	@ 0x3f
 80030f8:	409a      	lsls	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	609a      	str	r2, [r3, #8]
 80030fe:	e0fd      	b.n	80032fc <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a28      	ldr	r2, [pc, #160]	@ (80031a8 <HAL_DMA_Init+0x3e4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d04a      	beq.n	80031a0 <HAL_DMA_Init+0x3dc>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a27      	ldr	r2, [pc, #156]	@ (80031ac <HAL_DMA_Init+0x3e8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d045      	beq.n	80031a0 <HAL_DMA_Init+0x3dc>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a25      	ldr	r2, [pc, #148]	@ (80031b0 <HAL_DMA_Init+0x3ec>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d040      	beq.n	80031a0 <HAL_DMA_Init+0x3dc>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a24      	ldr	r2, [pc, #144]	@ (80031b4 <HAL_DMA_Init+0x3f0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d03b      	beq.n	80031a0 <HAL_DMA_Init+0x3dc>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a22      	ldr	r2, [pc, #136]	@ (80031b8 <HAL_DMA_Init+0x3f4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d036      	beq.n	80031a0 <HAL_DMA_Init+0x3dc>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a21      	ldr	r2, [pc, #132]	@ (80031bc <HAL_DMA_Init+0x3f8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d031      	beq.n	80031a0 <HAL_DMA_Init+0x3dc>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1f      	ldr	r2, [pc, #124]	@ (80031c0 <HAL_DMA_Init+0x3fc>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d02c      	beq.n	80031a0 <HAL_DMA_Init+0x3dc>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1e      	ldr	r2, [pc, #120]	@ (80031c4 <HAL_DMA_Init+0x400>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d027      	beq.n	80031a0 <HAL_DMA_Init+0x3dc>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1c      	ldr	r2, [pc, #112]	@ (80031c8 <HAL_DMA_Init+0x404>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d022      	beq.n	80031a0 <HAL_DMA_Init+0x3dc>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1b      	ldr	r2, [pc, #108]	@ (80031cc <HAL_DMA_Init+0x408>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d01d      	beq.n	80031a0 <HAL_DMA_Init+0x3dc>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a19      	ldr	r2, [pc, #100]	@ (80031d0 <HAL_DMA_Init+0x40c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d018      	beq.n	80031a0 <HAL_DMA_Init+0x3dc>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a18      	ldr	r2, [pc, #96]	@ (80031d4 <HAL_DMA_Init+0x410>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d013      	beq.n	80031a0 <HAL_DMA_Init+0x3dc>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a16      	ldr	r2, [pc, #88]	@ (80031d8 <HAL_DMA_Init+0x414>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00e      	beq.n	80031a0 <HAL_DMA_Init+0x3dc>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a15      	ldr	r2, [pc, #84]	@ (80031dc <HAL_DMA_Init+0x418>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d009      	beq.n	80031a0 <HAL_DMA_Init+0x3dc>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a13      	ldr	r2, [pc, #76]	@ (80031e0 <HAL_DMA_Init+0x41c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d004      	beq.n	80031a0 <HAL_DMA_Init+0x3dc>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a12      	ldr	r2, [pc, #72]	@ (80031e4 <HAL_DMA_Init+0x420>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d123      	bne.n	80031e8 <HAL_DMA_Init+0x424>
 80031a0:	2301      	movs	r3, #1
 80031a2:	e022      	b.n	80031ea <HAL_DMA_Init+0x426>
 80031a4:	fe10803f 	.word	0xfe10803f
 80031a8:	48022c08 	.word	0x48022c08
 80031ac:	48022c1c 	.word	0x48022c1c
 80031b0:	48022c30 	.word	0x48022c30
 80031b4:	48022c44 	.word	0x48022c44
 80031b8:	48022c58 	.word	0x48022c58
 80031bc:	48022c6c 	.word	0x48022c6c
 80031c0:	48022c80 	.word	0x48022c80
 80031c4:	48022c94 	.word	0x48022c94
 80031c8:	58025408 	.word	0x58025408
 80031cc:	5802541c 	.word	0x5802541c
 80031d0:	58025430 	.word	0x58025430
 80031d4:	58025444 	.word	0x58025444
 80031d8:	58025458 	.word	0x58025458
 80031dc:	5802546c 	.word	0x5802546c
 80031e0:	58025480 	.word	0x58025480
 80031e4:	58025494 	.word	0x58025494
 80031e8:	2300      	movs	r3, #0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d07d      	beq.n	80032ea <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a7f      	ldr	r2, [pc, #508]	@ (80033f0 <HAL_DMA_Init+0x62c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d021      	beq.n	800323c <HAL_DMA_Init+0x478>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a7d      	ldr	r2, [pc, #500]	@ (80033f4 <HAL_DMA_Init+0x630>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01c      	beq.n	800323c <HAL_DMA_Init+0x478>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a7c      	ldr	r2, [pc, #496]	@ (80033f8 <HAL_DMA_Init+0x634>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d017      	beq.n	800323c <HAL_DMA_Init+0x478>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a7a      	ldr	r2, [pc, #488]	@ (80033fc <HAL_DMA_Init+0x638>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d012      	beq.n	800323c <HAL_DMA_Init+0x478>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a79      	ldr	r2, [pc, #484]	@ (8003400 <HAL_DMA_Init+0x63c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00d      	beq.n	800323c <HAL_DMA_Init+0x478>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a77      	ldr	r2, [pc, #476]	@ (8003404 <HAL_DMA_Init+0x640>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d008      	beq.n	800323c <HAL_DMA_Init+0x478>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a76      	ldr	r2, [pc, #472]	@ (8003408 <HAL_DMA_Init+0x644>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d003      	beq.n	800323c <HAL_DMA_Init+0x478>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a74      	ldr	r2, [pc, #464]	@ (800340c <HAL_DMA_Init+0x648>)
 800323a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4b6e      	ldr	r3, [pc, #440]	@ (8003410 <HAL_DMA_Init+0x64c>)
 8003258:	4013      	ands	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b40      	cmp	r3, #64	@ 0x40
 8003262:	d008      	beq.n	8003276 <HAL_DMA_Init+0x4b2>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b80      	cmp	r3, #128	@ 0x80
 800326a:	d102      	bne.n	8003272 <HAL_DMA_Init+0x4ae>
 800326c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003270:	e002      	b.n	8003278 <HAL_DMA_Init+0x4b4>
 8003272:	2300      	movs	r3, #0
 8003274:	e000      	b.n	8003278 <HAL_DMA_Init+0x4b4>
 8003276:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68d2      	ldr	r2, [r2, #12]
 800327c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800327e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003286:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800328e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003296:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800329e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80032a6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	4b55      	ldr	r3, [pc, #340]	@ (8003414 <HAL_DMA_Init+0x650>)
 80032be:	4413      	add	r3, r2
 80032c0:	4a55      	ldr	r2, [pc, #340]	@ (8003418 <HAL_DMA_Init+0x654>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	009a      	lsls	r2, r3, #2
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f001 ff08 	bl	80050e4 <DMA_CalcBaseAndBitshift>
 80032d4:	4603      	mov	r3, r0
 80032d6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	2201      	movs	r2, #1
 80032e2:	409a      	lsls	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	e008      	b.n	80032fc <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2240      	movs	r2, #64	@ 0x40
 80032ee:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2203      	movs	r2, #3
 80032f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0ed      	b.n	80034d8 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a46      	ldr	r2, [pc, #280]	@ (800341c <HAL_DMA_Init+0x658>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d072      	beq.n	80033ec <HAL_DMA_Init+0x628>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a45      	ldr	r2, [pc, #276]	@ (8003420 <HAL_DMA_Init+0x65c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d06d      	beq.n	80033ec <HAL_DMA_Init+0x628>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a43      	ldr	r2, [pc, #268]	@ (8003424 <HAL_DMA_Init+0x660>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d068      	beq.n	80033ec <HAL_DMA_Init+0x628>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a42      	ldr	r2, [pc, #264]	@ (8003428 <HAL_DMA_Init+0x664>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d063      	beq.n	80033ec <HAL_DMA_Init+0x628>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a40      	ldr	r2, [pc, #256]	@ (800342c <HAL_DMA_Init+0x668>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d05e      	beq.n	80033ec <HAL_DMA_Init+0x628>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a3f      	ldr	r2, [pc, #252]	@ (8003430 <HAL_DMA_Init+0x66c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d059      	beq.n	80033ec <HAL_DMA_Init+0x628>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a3d      	ldr	r2, [pc, #244]	@ (8003434 <HAL_DMA_Init+0x670>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d054      	beq.n	80033ec <HAL_DMA_Init+0x628>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a3c      	ldr	r2, [pc, #240]	@ (8003438 <HAL_DMA_Init+0x674>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d04f      	beq.n	80033ec <HAL_DMA_Init+0x628>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a3a      	ldr	r2, [pc, #232]	@ (800343c <HAL_DMA_Init+0x678>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d04a      	beq.n	80033ec <HAL_DMA_Init+0x628>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a39      	ldr	r2, [pc, #228]	@ (8003440 <HAL_DMA_Init+0x67c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d045      	beq.n	80033ec <HAL_DMA_Init+0x628>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a37      	ldr	r2, [pc, #220]	@ (8003444 <HAL_DMA_Init+0x680>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d040      	beq.n	80033ec <HAL_DMA_Init+0x628>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a36      	ldr	r2, [pc, #216]	@ (8003448 <HAL_DMA_Init+0x684>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d03b      	beq.n	80033ec <HAL_DMA_Init+0x628>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a34      	ldr	r2, [pc, #208]	@ (800344c <HAL_DMA_Init+0x688>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d036      	beq.n	80033ec <HAL_DMA_Init+0x628>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a33      	ldr	r2, [pc, #204]	@ (8003450 <HAL_DMA_Init+0x68c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d031      	beq.n	80033ec <HAL_DMA_Init+0x628>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a31      	ldr	r2, [pc, #196]	@ (8003454 <HAL_DMA_Init+0x690>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d02c      	beq.n	80033ec <HAL_DMA_Init+0x628>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a30      	ldr	r2, [pc, #192]	@ (8003458 <HAL_DMA_Init+0x694>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d027      	beq.n	80033ec <HAL_DMA_Init+0x628>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a13      	ldr	r2, [pc, #76]	@ (80033f0 <HAL_DMA_Init+0x62c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d022      	beq.n	80033ec <HAL_DMA_Init+0x628>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a12      	ldr	r2, [pc, #72]	@ (80033f4 <HAL_DMA_Init+0x630>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d01d      	beq.n	80033ec <HAL_DMA_Init+0x628>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a10      	ldr	r2, [pc, #64]	@ (80033f8 <HAL_DMA_Init+0x634>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d018      	beq.n	80033ec <HAL_DMA_Init+0x628>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a0f      	ldr	r2, [pc, #60]	@ (80033fc <HAL_DMA_Init+0x638>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d013      	beq.n	80033ec <HAL_DMA_Init+0x628>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003400 <HAL_DMA_Init+0x63c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00e      	beq.n	80033ec <HAL_DMA_Init+0x628>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003404 <HAL_DMA_Init+0x640>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d009      	beq.n	80033ec <HAL_DMA_Init+0x628>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003408 <HAL_DMA_Init+0x644>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <HAL_DMA_Init+0x628>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a09      	ldr	r2, [pc, #36]	@ (800340c <HAL_DMA_Init+0x648>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d137      	bne.n	800345c <HAL_DMA_Init+0x698>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e036      	b.n	800345e <HAL_DMA_Init+0x69a>
 80033f0:	58025408 	.word	0x58025408
 80033f4:	5802541c 	.word	0x5802541c
 80033f8:	58025430 	.word	0x58025430
 80033fc:	58025444 	.word	0x58025444
 8003400:	58025458 	.word	0x58025458
 8003404:	5802546c 	.word	0x5802546c
 8003408:	58025480 	.word	0x58025480
 800340c:	58025494 	.word	0x58025494
 8003410:	fffe000f 	.word	0xfffe000f
 8003414:	a7fdabf8 	.word	0xa7fdabf8
 8003418:	cccccccd 	.word	0xcccccccd
 800341c:	40020010 	.word	0x40020010
 8003420:	40020028 	.word	0x40020028
 8003424:	40020040 	.word	0x40020040
 8003428:	40020058 	.word	0x40020058
 800342c:	40020070 	.word	0x40020070
 8003430:	40020088 	.word	0x40020088
 8003434:	400200a0 	.word	0x400200a0
 8003438:	400200b8 	.word	0x400200b8
 800343c:	40020410 	.word	0x40020410
 8003440:	40020428 	.word	0x40020428
 8003444:	40020440 	.word	0x40020440
 8003448:	40020458 	.word	0x40020458
 800344c:	40020470 	.word	0x40020470
 8003450:	40020488 	.word	0x40020488
 8003454:	400204a0 	.word	0x400204a0
 8003458:	400204b8 	.word	0x400204b8
 800345c:	2300      	movs	r3, #0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d032      	beq.n	80034c8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f001 ff6c 	bl	8005340 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b80      	cmp	r3, #128	@ 0x80
 800346e:	d102      	bne.n	8003476 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800348a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d010      	beq.n	80034b6 <HAL_DMA_Init+0x6f2>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b08      	cmp	r3, #8
 800349a:	d80c      	bhi.n	80034b6 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f001 ffe9 	bl	8005474 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80034b2:	605a      	str	r2, [r3, #4]
 80034b4:	e008      	b.n	80034c8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e226      	b.n	800394a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_DMA_Start_IT+0x2a>
 8003506:	2302      	movs	r3, #2
 8003508:	e21f      	b.n	800394a <HAL_DMA_Start_IT+0x46a>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b01      	cmp	r3, #1
 800351c:	f040 820a 	bne.w	8003934 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a68      	ldr	r2, [pc, #416]	@ (80036d4 <HAL_DMA_Start_IT+0x1f4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d04a      	beq.n	80035ce <HAL_DMA_Start_IT+0xee>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a66      	ldr	r2, [pc, #408]	@ (80036d8 <HAL_DMA_Start_IT+0x1f8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d045      	beq.n	80035ce <HAL_DMA_Start_IT+0xee>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a65      	ldr	r2, [pc, #404]	@ (80036dc <HAL_DMA_Start_IT+0x1fc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d040      	beq.n	80035ce <HAL_DMA_Start_IT+0xee>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a63      	ldr	r2, [pc, #396]	@ (80036e0 <HAL_DMA_Start_IT+0x200>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d03b      	beq.n	80035ce <HAL_DMA_Start_IT+0xee>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a62      	ldr	r2, [pc, #392]	@ (80036e4 <HAL_DMA_Start_IT+0x204>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d036      	beq.n	80035ce <HAL_DMA_Start_IT+0xee>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a60      	ldr	r2, [pc, #384]	@ (80036e8 <HAL_DMA_Start_IT+0x208>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d031      	beq.n	80035ce <HAL_DMA_Start_IT+0xee>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a5f      	ldr	r2, [pc, #380]	@ (80036ec <HAL_DMA_Start_IT+0x20c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d02c      	beq.n	80035ce <HAL_DMA_Start_IT+0xee>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a5d      	ldr	r2, [pc, #372]	@ (80036f0 <HAL_DMA_Start_IT+0x210>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d027      	beq.n	80035ce <HAL_DMA_Start_IT+0xee>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a5c      	ldr	r2, [pc, #368]	@ (80036f4 <HAL_DMA_Start_IT+0x214>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d022      	beq.n	80035ce <HAL_DMA_Start_IT+0xee>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a5a      	ldr	r2, [pc, #360]	@ (80036f8 <HAL_DMA_Start_IT+0x218>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d01d      	beq.n	80035ce <HAL_DMA_Start_IT+0xee>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a59      	ldr	r2, [pc, #356]	@ (80036fc <HAL_DMA_Start_IT+0x21c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d018      	beq.n	80035ce <HAL_DMA_Start_IT+0xee>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a57      	ldr	r2, [pc, #348]	@ (8003700 <HAL_DMA_Start_IT+0x220>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <HAL_DMA_Start_IT+0xee>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a56      	ldr	r2, [pc, #344]	@ (8003704 <HAL_DMA_Start_IT+0x224>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00e      	beq.n	80035ce <HAL_DMA_Start_IT+0xee>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a54      	ldr	r2, [pc, #336]	@ (8003708 <HAL_DMA_Start_IT+0x228>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d009      	beq.n	80035ce <HAL_DMA_Start_IT+0xee>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a53      	ldr	r2, [pc, #332]	@ (800370c <HAL_DMA_Start_IT+0x22c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d004      	beq.n	80035ce <HAL_DMA_Start_IT+0xee>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a51      	ldr	r2, [pc, #324]	@ (8003710 <HAL_DMA_Start_IT+0x230>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d108      	bne.n	80035e0 <HAL_DMA_Start_IT+0x100>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0201 	bic.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	e007      	b.n	80035f0 <HAL_DMA_Start_IT+0x110>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0201 	bic.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f001 fb90 	bl	8004d1c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a34      	ldr	r2, [pc, #208]	@ (80036d4 <HAL_DMA_Start_IT+0x1f4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d04a      	beq.n	800369c <HAL_DMA_Start_IT+0x1bc>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a33      	ldr	r2, [pc, #204]	@ (80036d8 <HAL_DMA_Start_IT+0x1f8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d045      	beq.n	800369c <HAL_DMA_Start_IT+0x1bc>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a31      	ldr	r2, [pc, #196]	@ (80036dc <HAL_DMA_Start_IT+0x1fc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d040      	beq.n	800369c <HAL_DMA_Start_IT+0x1bc>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a30      	ldr	r2, [pc, #192]	@ (80036e0 <HAL_DMA_Start_IT+0x200>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d03b      	beq.n	800369c <HAL_DMA_Start_IT+0x1bc>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a2e      	ldr	r2, [pc, #184]	@ (80036e4 <HAL_DMA_Start_IT+0x204>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d036      	beq.n	800369c <HAL_DMA_Start_IT+0x1bc>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a2d      	ldr	r2, [pc, #180]	@ (80036e8 <HAL_DMA_Start_IT+0x208>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d031      	beq.n	800369c <HAL_DMA_Start_IT+0x1bc>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a2b      	ldr	r2, [pc, #172]	@ (80036ec <HAL_DMA_Start_IT+0x20c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d02c      	beq.n	800369c <HAL_DMA_Start_IT+0x1bc>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a2a      	ldr	r2, [pc, #168]	@ (80036f0 <HAL_DMA_Start_IT+0x210>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d027      	beq.n	800369c <HAL_DMA_Start_IT+0x1bc>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a28      	ldr	r2, [pc, #160]	@ (80036f4 <HAL_DMA_Start_IT+0x214>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d022      	beq.n	800369c <HAL_DMA_Start_IT+0x1bc>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a27      	ldr	r2, [pc, #156]	@ (80036f8 <HAL_DMA_Start_IT+0x218>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d01d      	beq.n	800369c <HAL_DMA_Start_IT+0x1bc>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a25      	ldr	r2, [pc, #148]	@ (80036fc <HAL_DMA_Start_IT+0x21c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d018      	beq.n	800369c <HAL_DMA_Start_IT+0x1bc>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a24      	ldr	r2, [pc, #144]	@ (8003700 <HAL_DMA_Start_IT+0x220>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d013      	beq.n	800369c <HAL_DMA_Start_IT+0x1bc>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a22      	ldr	r2, [pc, #136]	@ (8003704 <HAL_DMA_Start_IT+0x224>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00e      	beq.n	800369c <HAL_DMA_Start_IT+0x1bc>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a21      	ldr	r2, [pc, #132]	@ (8003708 <HAL_DMA_Start_IT+0x228>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d009      	beq.n	800369c <HAL_DMA_Start_IT+0x1bc>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1f      	ldr	r2, [pc, #124]	@ (800370c <HAL_DMA_Start_IT+0x22c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d004      	beq.n	800369c <HAL_DMA_Start_IT+0x1bc>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1e      	ldr	r2, [pc, #120]	@ (8003710 <HAL_DMA_Start_IT+0x230>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d101      	bne.n	80036a0 <HAL_DMA_Start_IT+0x1c0>
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <HAL_DMA_Start_IT+0x1c2>
 80036a0:	2300      	movs	r3, #0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d036      	beq.n	8003714 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f023 021e 	bic.w	r2, r3, #30
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0216 	orr.w	r2, r2, #22
 80036b8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d03e      	beq.n	8003740 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0208 	orr.w	r2, r2, #8
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	e035      	b.n	8003740 <HAL_DMA_Start_IT+0x260>
 80036d4:	40020010 	.word	0x40020010
 80036d8:	40020028 	.word	0x40020028
 80036dc:	40020040 	.word	0x40020040
 80036e0:	40020058 	.word	0x40020058
 80036e4:	40020070 	.word	0x40020070
 80036e8:	40020088 	.word	0x40020088
 80036ec:	400200a0 	.word	0x400200a0
 80036f0:	400200b8 	.word	0x400200b8
 80036f4:	40020410 	.word	0x40020410
 80036f8:	40020428 	.word	0x40020428
 80036fc:	40020440 	.word	0x40020440
 8003700:	40020458 	.word	0x40020458
 8003704:	40020470 	.word	0x40020470
 8003708:	40020488 	.word	0x40020488
 800370c:	400204a0 	.word	0x400204a0
 8003710:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 020e 	bic.w	r2, r3, #14
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 020a 	orr.w	r2, r2, #10
 8003726:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0204 	orr.w	r2, r2, #4
 800373e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a83      	ldr	r2, [pc, #524]	@ (8003954 <HAL_DMA_Start_IT+0x474>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d072      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a82      	ldr	r2, [pc, #520]	@ (8003958 <HAL_DMA_Start_IT+0x478>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d06d      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a80      	ldr	r2, [pc, #512]	@ (800395c <HAL_DMA_Start_IT+0x47c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d068      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a7f      	ldr	r2, [pc, #508]	@ (8003960 <HAL_DMA_Start_IT+0x480>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d063      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a7d      	ldr	r2, [pc, #500]	@ (8003964 <HAL_DMA_Start_IT+0x484>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d05e      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a7c      	ldr	r2, [pc, #496]	@ (8003968 <HAL_DMA_Start_IT+0x488>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d059      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a7a      	ldr	r2, [pc, #488]	@ (800396c <HAL_DMA_Start_IT+0x48c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d054      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a79      	ldr	r2, [pc, #484]	@ (8003970 <HAL_DMA_Start_IT+0x490>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d04f      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a77      	ldr	r2, [pc, #476]	@ (8003974 <HAL_DMA_Start_IT+0x494>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d04a      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a76      	ldr	r2, [pc, #472]	@ (8003978 <HAL_DMA_Start_IT+0x498>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d045      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a74      	ldr	r2, [pc, #464]	@ (800397c <HAL_DMA_Start_IT+0x49c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d040      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a73      	ldr	r2, [pc, #460]	@ (8003980 <HAL_DMA_Start_IT+0x4a0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d03b      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a71      	ldr	r2, [pc, #452]	@ (8003984 <HAL_DMA_Start_IT+0x4a4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d036      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a70      	ldr	r2, [pc, #448]	@ (8003988 <HAL_DMA_Start_IT+0x4a8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d031      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a6e      	ldr	r2, [pc, #440]	@ (800398c <HAL_DMA_Start_IT+0x4ac>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d02c      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a6d      	ldr	r2, [pc, #436]	@ (8003990 <HAL_DMA_Start_IT+0x4b0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d027      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a6b      	ldr	r2, [pc, #428]	@ (8003994 <HAL_DMA_Start_IT+0x4b4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d022      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a6a      	ldr	r2, [pc, #424]	@ (8003998 <HAL_DMA_Start_IT+0x4b8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d01d      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a68      	ldr	r2, [pc, #416]	@ (800399c <HAL_DMA_Start_IT+0x4bc>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d018      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a67      	ldr	r2, [pc, #412]	@ (80039a0 <HAL_DMA_Start_IT+0x4c0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d013      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a65      	ldr	r2, [pc, #404]	@ (80039a4 <HAL_DMA_Start_IT+0x4c4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00e      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a64      	ldr	r2, [pc, #400]	@ (80039a8 <HAL_DMA_Start_IT+0x4c8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d009      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a62      	ldr	r2, [pc, #392]	@ (80039ac <HAL_DMA_Start_IT+0x4cc>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d004      	beq.n	8003830 <HAL_DMA_Start_IT+0x350>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a61      	ldr	r2, [pc, #388]	@ (80039b0 <HAL_DMA_Start_IT+0x4d0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d101      	bne.n	8003834 <HAL_DMA_Start_IT+0x354>
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <HAL_DMA_Start_IT+0x356>
 8003834:	2300      	movs	r3, #0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01a      	beq.n	8003870 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003852:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003856:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d007      	beq.n	8003870 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800386a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800386e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a37      	ldr	r2, [pc, #220]	@ (8003954 <HAL_DMA_Start_IT+0x474>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d04a      	beq.n	8003910 <HAL_DMA_Start_IT+0x430>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a36      	ldr	r2, [pc, #216]	@ (8003958 <HAL_DMA_Start_IT+0x478>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d045      	beq.n	8003910 <HAL_DMA_Start_IT+0x430>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a34      	ldr	r2, [pc, #208]	@ (800395c <HAL_DMA_Start_IT+0x47c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d040      	beq.n	8003910 <HAL_DMA_Start_IT+0x430>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a33      	ldr	r2, [pc, #204]	@ (8003960 <HAL_DMA_Start_IT+0x480>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d03b      	beq.n	8003910 <HAL_DMA_Start_IT+0x430>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a31      	ldr	r2, [pc, #196]	@ (8003964 <HAL_DMA_Start_IT+0x484>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d036      	beq.n	8003910 <HAL_DMA_Start_IT+0x430>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a30      	ldr	r2, [pc, #192]	@ (8003968 <HAL_DMA_Start_IT+0x488>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d031      	beq.n	8003910 <HAL_DMA_Start_IT+0x430>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a2e      	ldr	r2, [pc, #184]	@ (800396c <HAL_DMA_Start_IT+0x48c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d02c      	beq.n	8003910 <HAL_DMA_Start_IT+0x430>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a2d      	ldr	r2, [pc, #180]	@ (8003970 <HAL_DMA_Start_IT+0x490>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d027      	beq.n	8003910 <HAL_DMA_Start_IT+0x430>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003974 <HAL_DMA_Start_IT+0x494>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d022      	beq.n	8003910 <HAL_DMA_Start_IT+0x430>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a2a      	ldr	r2, [pc, #168]	@ (8003978 <HAL_DMA_Start_IT+0x498>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d01d      	beq.n	8003910 <HAL_DMA_Start_IT+0x430>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a28      	ldr	r2, [pc, #160]	@ (800397c <HAL_DMA_Start_IT+0x49c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d018      	beq.n	8003910 <HAL_DMA_Start_IT+0x430>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a27      	ldr	r2, [pc, #156]	@ (8003980 <HAL_DMA_Start_IT+0x4a0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d013      	beq.n	8003910 <HAL_DMA_Start_IT+0x430>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a25      	ldr	r2, [pc, #148]	@ (8003984 <HAL_DMA_Start_IT+0x4a4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00e      	beq.n	8003910 <HAL_DMA_Start_IT+0x430>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a24      	ldr	r2, [pc, #144]	@ (8003988 <HAL_DMA_Start_IT+0x4a8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d009      	beq.n	8003910 <HAL_DMA_Start_IT+0x430>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a22      	ldr	r2, [pc, #136]	@ (800398c <HAL_DMA_Start_IT+0x4ac>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d004      	beq.n	8003910 <HAL_DMA_Start_IT+0x430>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a21      	ldr	r2, [pc, #132]	@ (8003990 <HAL_DMA_Start_IT+0x4b0>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d108      	bne.n	8003922 <HAL_DMA_Start_IT+0x442>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	e012      	b.n	8003948 <HAL_DMA_Start_IT+0x468>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0201 	orr.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	e009      	b.n	8003948 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800393a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003948:	7dfb      	ldrb	r3, [r7, #23]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40020010 	.word	0x40020010
 8003958:	40020028 	.word	0x40020028
 800395c:	40020040 	.word	0x40020040
 8003960:	40020058 	.word	0x40020058
 8003964:	40020070 	.word	0x40020070
 8003968:	40020088 	.word	0x40020088
 800396c:	400200a0 	.word	0x400200a0
 8003970:	400200b8 	.word	0x400200b8
 8003974:	40020410 	.word	0x40020410
 8003978:	40020428 	.word	0x40020428
 800397c:	40020440 	.word	0x40020440
 8003980:	40020458 	.word	0x40020458
 8003984:	40020470 	.word	0x40020470
 8003988:	40020488 	.word	0x40020488
 800398c:	400204a0 	.word	0x400204a0
 8003990:	400204b8 	.word	0x400204b8
 8003994:	58025408 	.word	0x58025408
 8003998:	5802541c 	.word	0x5802541c
 800399c:	58025430 	.word	0x58025430
 80039a0:	58025444 	.word	0x58025444
 80039a4:	58025458 	.word	0x58025458
 80039a8:	5802546c 	.word	0x5802546c
 80039ac:	58025480 	.word	0x58025480
 80039b0:	58025494 	.word	0x58025494

080039b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e237      	b.n	8003e36 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d004      	beq.n	80039dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2280      	movs	r2, #128	@ 0x80
 80039d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e22c      	b.n	8003e36 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a5c      	ldr	r2, [pc, #368]	@ (8003b54 <HAL_DMA_Abort_IT+0x1a0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d04a      	beq.n	8003a7c <HAL_DMA_Abort_IT+0xc8>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003b58 <HAL_DMA_Abort_IT+0x1a4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d045      	beq.n	8003a7c <HAL_DMA_Abort_IT+0xc8>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a59      	ldr	r2, [pc, #356]	@ (8003b5c <HAL_DMA_Abort_IT+0x1a8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d040      	beq.n	8003a7c <HAL_DMA_Abort_IT+0xc8>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a58      	ldr	r2, [pc, #352]	@ (8003b60 <HAL_DMA_Abort_IT+0x1ac>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d03b      	beq.n	8003a7c <HAL_DMA_Abort_IT+0xc8>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a56      	ldr	r2, [pc, #344]	@ (8003b64 <HAL_DMA_Abort_IT+0x1b0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d036      	beq.n	8003a7c <HAL_DMA_Abort_IT+0xc8>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a55      	ldr	r2, [pc, #340]	@ (8003b68 <HAL_DMA_Abort_IT+0x1b4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d031      	beq.n	8003a7c <HAL_DMA_Abort_IT+0xc8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a53      	ldr	r2, [pc, #332]	@ (8003b6c <HAL_DMA_Abort_IT+0x1b8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d02c      	beq.n	8003a7c <HAL_DMA_Abort_IT+0xc8>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a52      	ldr	r2, [pc, #328]	@ (8003b70 <HAL_DMA_Abort_IT+0x1bc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d027      	beq.n	8003a7c <HAL_DMA_Abort_IT+0xc8>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a50      	ldr	r2, [pc, #320]	@ (8003b74 <HAL_DMA_Abort_IT+0x1c0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d022      	beq.n	8003a7c <HAL_DMA_Abort_IT+0xc8>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a4f      	ldr	r2, [pc, #316]	@ (8003b78 <HAL_DMA_Abort_IT+0x1c4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d01d      	beq.n	8003a7c <HAL_DMA_Abort_IT+0xc8>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a4d      	ldr	r2, [pc, #308]	@ (8003b7c <HAL_DMA_Abort_IT+0x1c8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d018      	beq.n	8003a7c <HAL_DMA_Abort_IT+0xc8>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a4c      	ldr	r2, [pc, #304]	@ (8003b80 <HAL_DMA_Abort_IT+0x1cc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d013      	beq.n	8003a7c <HAL_DMA_Abort_IT+0xc8>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a4a      	ldr	r2, [pc, #296]	@ (8003b84 <HAL_DMA_Abort_IT+0x1d0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00e      	beq.n	8003a7c <HAL_DMA_Abort_IT+0xc8>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a49      	ldr	r2, [pc, #292]	@ (8003b88 <HAL_DMA_Abort_IT+0x1d4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d009      	beq.n	8003a7c <HAL_DMA_Abort_IT+0xc8>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a47      	ldr	r2, [pc, #284]	@ (8003b8c <HAL_DMA_Abort_IT+0x1d8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d004      	beq.n	8003a7c <HAL_DMA_Abort_IT+0xc8>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a46      	ldr	r2, [pc, #280]	@ (8003b90 <HAL_DMA_Abort_IT+0x1dc>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d101      	bne.n	8003a80 <HAL_DMA_Abort_IT+0xcc>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <HAL_DMA_Abort_IT+0xce>
 8003a80:	2300      	movs	r3, #0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 8086 	beq.w	8003b94 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a2f      	ldr	r2, [pc, #188]	@ (8003b54 <HAL_DMA_Abort_IT+0x1a0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d04a      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x17c>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8003b58 <HAL_DMA_Abort_IT+0x1a4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d045      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x17c>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a2c      	ldr	r2, [pc, #176]	@ (8003b5c <HAL_DMA_Abort_IT+0x1a8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d040      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x17c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a2b      	ldr	r2, [pc, #172]	@ (8003b60 <HAL_DMA_Abort_IT+0x1ac>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d03b      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x17c>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a29      	ldr	r2, [pc, #164]	@ (8003b64 <HAL_DMA_Abort_IT+0x1b0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d036      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x17c>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a28      	ldr	r2, [pc, #160]	@ (8003b68 <HAL_DMA_Abort_IT+0x1b4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d031      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x17c>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a26      	ldr	r2, [pc, #152]	@ (8003b6c <HAL_DMA_Abort_IT+0x1b8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d02c      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x17c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a25      	ldr	r2, [pc, #148]	@ (8003b70 <HAL_DMA_Abort_IT+0x1bc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d027      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x17c>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a23      	ldr	r2, [pc, #140]	@ (8003b74 <HAL_DMA_Abort_IT+0x1c0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d022      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x17c>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a22      	ldr	r2, [pc, #136]	@ (8003b78 <HAL_DMA_Abort_IT+0x1c4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d01d      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x17c>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a20      	ldr	r2, [pc, #128]	@ (8003b7c <HAL_DMA_Abort_IT+0x1c8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d018      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x17c>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a1f      	ldr	r2, [pc, #124]	@ (8003b80 <HAL_DMA_Abort_IT+0x1cc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d013      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x17c>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003b84 <HAL_DMA_Abort_IT+0x1d0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00e      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x17c>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1c      	ldr	r2, [pc, #112]	@ (8003b88 <HAL_DMA_Abort_IT+0x1d4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d009      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x17c>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a1a      	ldr	r2, [pc, #104]	@ (8003b8c <HAL_DMA_Abort_IT+0x1d8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d004      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x17c>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a19      	ldr	r2, [pc, #100]	@ (8003b90 <HAL_DMA_Abort_IT+0x1dc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d108      	bne.n	8003b42 <HAL_DMA_Abort_IT+0x18e>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	e178      	b.n	8003e34 <HAL_DMA_Abort_IT+0x480>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0201 	bic.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	e16f      	b.n	8003e34 <HAL_DMA_Abort_IT+0x480>
 8003b54:	40020010 	.word	0x40020010
 8003b58:	40020028 	.word	0x40020028
 8003b5c:	40020040 	.word	0x40020040
 8003b60:	40020058 	.word	0x40020058
 8003b64:	40020070 	.word	0x40020070
 8003b68:	40020088 	.word	0x40020088
 8003b6c:	400200a0 	.word	0x400200a0
 8003b70:	400200b8 	.word	0x400200b8
 8003b74:	40020410 	.word	0x40020410
 8003b78:	40020428 	.word	0x40020428
 8003b7c:	40020440 	.word	0x40020440
 8003b80:	40020458 	.word	0x40020458
 8003b84:	40020470 	.word	0x40020470
 8003b88:	40020488 	.word	0x40020488
 8003b8c:	400204a0 	.word	0x400204a0
 8003b90:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 020e 	bic.w	r2, r2, #14
 8003ba2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a6c      	ldr	r2, [pc, #432]	@ (8003d5c <HAL_DMA_Abort_IT+0x3a8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d04a      	beq.n	8003c44 <HAL_DMA_Abort_IT+0x290>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a6b      	ldr	r2, [pc, #428]	@ (8003d60 <HAL_DMA_Abort_IT+0x3ac>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d045      	beq.n	8003c44 <HAL_DMA_Abort_IT+0x290>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a69      	ldr	r2, [pc, #420]	@ (8003d64 <HAL_DMA_Abort_IT+0x3b0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d040      	beq.n	8003c44 <HAL_DMA_Abort_IT+0x290>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a68      	ldr	r2, [pc, #416]	@ (8003d68 <HAL_DMA_Abort_IT+0x3b4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d03b      	beq.n	8003c44 <HAL_DMA_Abort_IT+0x290>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a66      	ldr	r2, [pc, #408]	@ (8003d6c <HAL_DMA_Abort_IT+0x3b8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d036      	beq.n	8003c44 <HAL_DMA_Abort_IT+0x290>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a65      	ldr	r2, [pc, #404]	@ (8003d70 <HAL_DMA_Abort_IT+0x3bc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d031      	beq.n	8003c44 <HAL_DMA_Abort_IT+0x290>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a63      	ldr	r2, [pc, #396]	@ (8003d74 <HAL_DMA_Abort_IT+0x3c0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d02c      	beq.n	8003c44 <HAL_DMA_Abort_IT+0x290>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a62      	ldr	r2, [pc, #392]	@ (8003d78 <HAL_DMA_Abort_IT+0x3c4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d027      	beq.n	8003c44 <HAL_DMA_Abort_IT+0x290>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a60      	ldr	r2, [pc, #384]	@ (8003d7c <HAL_DMA_Abort_IT+0x3c8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d022      	beq.n	8003c44 <HAL_DMA_Abort_IT+0x290>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a5f      	ldr	r2, [pc, #380]	@ (8003d80 <HAL_DMA_Abort_IT+0x3cc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d01d      	beq.n	8003c44 <HAL_DMA_Abort_IT+0x290>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a5d      	ldr	r2, [pc, #372]	@ (8003d84 <HAL_DMA_Abort_IT+0x3d0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d018      	beq.n	8003c44 <HAL_DMA_Abort_IT+0x290>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a5c      	ldr	r2, [pc, #368]	@ (8003d88 <HAL_DMA_Abort_IT+0x3d4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d013      	beq.n	8003c44 <HAL_DMA_Abort_IT+0x290>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a5a      	ldr	r2, [pc, #360]	@ (8003d8c <HAL_DMA_Abort_IT+0x3d8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00e      	beq.n	8003c44 <HAL_DMA_Abort_IT+0x290>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a59      	ldr	r2, [pc, #356]	@ (8003d90 <HAL_DMA_Abort_IT+0x3dc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d009      	beq.n	8003c44 <HAL_DMA_Abort_IT+0x290>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a57      	ldr	r2, [pc, #348]	@ (8003d94 <HAL_DMA_Abort_IT+0x3e0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d004      	beq.n	8003c44 <HAL_DMA_Abort_IT+0x290>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a56      	ldr	r2, [pc, #344]	@ (8003d98 <HAL_DMA_Abort_IT+0x3e4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d108      	bne.n	8003c56 <HAL_DMA_Abort_IT+0x2a2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	e007      	b.n	8003c66 <HAL_DMA_Abort_IT+0x2b2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0201 	bic.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a3c      	ldr	r2, [pc, #240]	@ (8003d5c <HAL_DMA_Abort_IT+0x3a8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d072      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a3a      	ldr	r2, [pc, #232]	@ (8003d60 <HAL_DMA_Abort_IT+0x3ac>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d06d      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a39      	ldr	r2, [pc, #228]	@ (8003d64 <HAL_DMA_Abort_IT+0x3b0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d068      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a37      	ldr	r2, [pc, #220]	@ (8003d68 <HAL_DMA_Abort_IT+0x3b4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d063      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a36      	ldr	r2, [pc, #216]	@ (8003d6c <HAL_DMA_Abort_IT+0x3b8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d05e      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a34      	ldr	r2, [pc, #208]	@ (8003d70 <HAL_DMA_Abort_IT+0x3bc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d059      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a33      	ldr	r2, [pc, #204]	@ (8003d74 <HAL_DMA_Abort_IT+0x3c0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d054      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a31      	ldr	r2, [pc, #196]	@ (8003d78 <HAL_DMA_Abort_IT+0x3c4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d04f      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a30      	ldr	r2, [pc, #192]	@ (8003d7c <HAL_DMA_Abort_IT+0x3c8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d04a      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8003d80 <HAL_DMA_Abort_IT+0x3cc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d045      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a2d      	ldr	r2, [pc, #180]	@ (8003d84 <HAL_DMA_Abort_IT+0x3d0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d040      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8003d88 <HAL_DMA_Abort_IT+0x3d4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d03b      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a2a      	ldr	r2, [pc, #168]	@ (8003d8c <HAL_DMA_Abort_IT+0x3d8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d036      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a28      	ldr	r2, [pc, #160]	@ (8003d90 <HAL_DMA_Abort_IT+0x3dc>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d031      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a27      	ldr	r2, [pc, #156]	@ (8003d94 <HAL_DMA_Abort_IT+0x3e0>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d02c      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a25      	ldr	r2, [pc, #148]	@ (8003d98 <HAL_DMA_Abort_IT+0x3e4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d027      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a24      	ldr	r2, [pc, #144]	@ (8003d9c <HAL_DMA_Abort_IT+0x3e8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d022      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a22      	ldr	r2, [pc, #136]	@ (8003da0 <HAL_DMA_Abort_IT+0x3ec>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d01d      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a21      	ldr	r2, [pc, #132]	@ (8003da4 <HAL_DMA_Abort_IT+0x3f0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d018      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a1f      	ldr	r2, [pc, #124]	@ (8003da8 <HAL_DMA_Abort_IT+0x3f4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d013      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a1e      	ldr	r2, [pc, #120]	@ (8003dac <HAL_DMA_Abort_IT+0x3f8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00e      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8003db0 <HAL_DMA_Abort_IT+0x3fc>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d009      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1b      	ldr	r2, [pc, #108]	@ (8003db4 <HAL_DMA_Abort_IT+0x400>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d004      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x3a2>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a19      	ldr	r2, [pc, #100]	@ (8003db8 <HAL_DMA_Abort_IT+0x404>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d132      	bne.n	8003dbc <HAL_DMA_Abort_IT+0x408>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e031      	b.n	8003dbe <HAL_DMA_Abort_IT+0x40a>
 8003d5a:	bf00      	nop
 8003d5c:	40020010 	.word	0x40020010
 8003d60:	40020028 	.word	0x40020028
 8003d64:	40020040 	.word	0x40020040
 8003d68:	40020058 	.word	0x40020058
 8003d6c:	40020070 	.word	0x40020070
 8003d70:	40020088 	.word	0x40020088
 8003d74:	400200a0 	.word	0x400200a0
 8003d78:	400200b8 	.word	0x400200b8
 8003d7c:	40020410 	.word	0x40020410
 8003d80:	40020428 	.word	0x40020428
 8003d84:	40020440 	.word	0x40020440
 8003d88:	40020458 	.word	0x40020458
 8003d8c:	40020470 	.word	0x40020470
 8003d90:	40020488 	.word	0x40020488
 8003d94:	400204a0 	.word	0x400204a0
 8003d98:	400204b8 	.word	0x400204b8
 8003d9c:	58025408 	.word	0x58025408
 8003da0:	5802541c 	.word	0x5802541c
 8003da4:	58025430 	.word	0x58025430
 8003da8:	58025444 	.word	0x58025444
 8003dac:	58025458 	.word	0x58025458
 8003db0:	5802546c 	.word	0x5802546c
 8003db4:	58025480 	.word	0x58025480
 8003db8:	58025494 	.word	0x58025494
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d028      	beq.n	8003e14 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dd0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	2201      	movs	r2, #1
 8003de2:	409a      	lsls	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003df0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00c      	beq.n	8003e14 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e08:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e12:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop

08003e40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08a      	sub	sp, #40	@ 0x28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e4c:	4b67      	ldr	r3, [pc, #412]	@ (8003fec <HAL_DMA_IRQHandler+0x1ac>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a67      	ldr	r2, [pc, #412]	@ (8003ff0 <HAL_DMA_IRQHandler+0x1b0>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	0a9b      	lsrs	r3, r3, #10
 8003e58:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e64:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a5f      	ldr	r2, [pc, #380]	@ (8003ff4 <HAL_DMA_IRQHandler+0x1b4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d04a      	beq.n	8003f12 <HAL_DMA_IRQHandler+0xd2>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a5d      	ldr	r2, [pc, #372]	@ (8003ff8 <HAL_DMA_IRQHandler+0x1b8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d045      	beq.n	8003f12 <HAL_DMA_IRQHandler+0xd2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a5c      	ldr	r2, [pc, #368]	@ (8003ffc <HAL_DMA_IRQHandler+0x1bc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d040      	beq.n	8003f12 <HAL_DMA_IRQHandler+0xd2>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a5a      	ldr	r2, [pc, #360]	@ (8004000 <HAL_DMA_IRQHandler+0x1c0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d03b      	beq.n	8003f12 <HAL_DMA_IRQHandler+0xd2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a59      	ldr	r2, [pc, #356]	@ (8004004 <HAL_DMA_IRQHandler+0x1c4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d036      	beq.n	8003f12 <HAL_DMA_IRQHandler+0xd2>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a57      	ldr	r2, [pc, #348]	@ (8004008 <HAL_DMA_IRQHandler+0x1c8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d031      	beq.n	8003f12 <HAL_DMA_IRQHandler+0xd2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a56      	ldr	r2, [pc, #344]	@ (800400c <HAL_DMA_IRQHandler+0x1cc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d02c      	beq.n	8003f12 <HAL_DMA_IRQHandler+0xd2>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a54      	ldr	r2, [pc, #336]	@ (8004010 <HAL_DMA_IRQHandler+0x1d0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d027      	beq.n	8003f12 <HAL_DMA_IRQHandler+0xd2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a53      	ldr	r2, [pc, #332]	@ (8004014 <HAL_DMA_IRQHandler+0x1d4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d022      	beq.n	8003f12 <HAL_DMA_IRQHandler+0xd2>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a51      	ldr	r2, [pc, #324]	@ (8004018 <HAL_DMA_IRQHandler+0x1d8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01d      	beq.n	8003f12 <HAL_DMA_IRQHandler+0xd2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a50      	ldr	r2, [pc, #320]	@ (800401c <HAL_DMA_IRQHandler+0x1dc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d018      	beq.n	8003f12 <HAL_DMA_IRQHandler+0xd2>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a4e      	ldr	r2, [pc, #312]	@ (8004020 <HAL_DMA_IRQHandler+0x1e0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d013      	beq.n	8003f12 <HAL_DMA_IRQHandler+0xd2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a4d      	ldr	r2, [pc, #308]	@ (8004024 <HAL_DMA_IRQHandler+0x1e4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00e      	beq.n	8003f12 <HAL_DMA_IRQHandler+0xd2>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a4b      	ldr	r2, [pc, #300]	@ (8004028 <HAL_DMA_IRQHandler+0x1e8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d009      	beq.n	8003f12 <HAL_DMA_IRQHandler+0xd2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a4a      	ldr	r2, [pc, #296]	@ (800402c <HAL_DMA_IRQHandler+0x1ec>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d004      	beq.n	8003f12 <HAL_DMA_IRQHandler+0xd2>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a48      	ldr	r2, [pc, #288]	@ (8004030 <HAL_DMA_IRQHandler+0x1f0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d101      	bne.n	8003f16 <HAL_DMA_IRQHandler+0xd6>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <HAL_DMA_IRQHandler+0xd8>
 8003f16:	2300      	movs	r3, #0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 842b 	beq.w	8004774 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f22:	f003 031f 	and.w	r3, r3, #31
 8003f26:	2208      	movs	r2, #8
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 80a2 	beq.w	8004078 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a2e      	ldr	r2, [pc, #184]	@ (8003ff4 <HAL_DMA_IRQHandler+0x1b4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d04a      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x194>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a2d      	ldr	r2, [pc, #180]	@ (8003ff8 <HAL_DMA_IRQHandler+0x1b8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d045      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x194>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8003ffc <HAL_DMA_IRQHandler+0x1bc>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d040      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x194>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a2a      	ldr	r2, [pc, #168]	@ (8004000 <HAL_DMA_IRQHandler+0x1c0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d03b      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x194>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a28      	ldr	r2, [pc, #160]	@ (8004004 <HAL_DMA_IRQHandler+0x1c4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d036      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x194>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a27      	ldr	r2, [pc, #156]	@ (8004008 <HAL_DMA_IRQHandler+0x1c8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d031      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x194>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a25      	ldr	r2, [pc, #148]	@ (800400c <HAL_DMA_IRQHandler+0x1cc>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d02c      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x194>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a24      	ldr	r2, [pc, #144]	@ (8004010 <HAL_DMA_IRQHandler+0x1d0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d027      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x194>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a22      	ldr	r2, [pc, #136]	@ (8004014 <HAL_DMA_IRQHandler+0x1d4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d022      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x194>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a21      	ldr	r2, [pc, #132]	@ (8004018 <HAL_DMA_IRQHandler+0x1d8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d01d      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x194>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800401c <HAL_DMA_IRQHandler+0x1dc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d018      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x194>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8004020 <HAL_DMA_IRQHandler+0x1e0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d013      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x194>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8004024 <HAL_DMA_IRQHandler+0x1e4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00e      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x194>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1b      	ldr	r2, [pc, #108]	@ (8004028 <HAL_DMA_IRQHandler+0x1e8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d009      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x194>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a19      	ldr	r2, [pc, #100]	@ (800402c <HAL_DMA_IRQHandler+0x1ec>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x194>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a18      	ldr	r2, [pc, #96]	@ (8004030 <HAL_DMA_IRQHandler+0x1f0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d12f      	bne.n	8004034 <HAL_DMA_IRQHandler+0x1f4>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	bf14      	ite	ne
 8003fe2:	2301      	movne	r3, #1
 8003fe4:	2300      	moveq	r3, #0
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	e02e      	b.n	8004048 <HAL_DMA_IRQHandler+0x208>
 8003fea:	bf00      	nop
 8003fec:	24000008 	.word	0x24000008
 8003ff0:	1b4e81b5 	.word	0x1b4e81b5
 8003ff4:	40020010 	.word	0x40020010
 8003ff8:	40020028 	.word	0x40020028
 8003ffc:	40020040 	.word	0x40020040
 8004000:	40020058 	.word	0x40020058
 8004004:	40020070 	.word	0x40020070
 8004008:	40020088 	.word	0x40020088
 800400c:	400200a0 	.word	0x400200a0
 8004010:	400200b8 	.word	0x400200b8
 8004014:	40020410 	.word	0x40020410
 8004018:	40020428 	.word	0x40020428
 800401c:	40020440 	.word	0x40020440
 8004020:	40020458 	.word	0x40020458
 8004024:	40020470 	.word	0x40020470
 8004028:	40020488 	.word	0x40020488
 800402c:	400204a0 	.word	0x400204a0
 8004030:	400204b8 	.word	0x400204b8
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	bf14      	ite	ne
 8004042:	2301      	movne	r3, #1
 8004044:	2300      	moveq	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d015      	beq.n	8004078 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0204 	bic.w	r2, r2, #4
 800405a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004060:	f003 031f 	and.w	r3, r3, #31
 8004064:	2208      	movs	r2, #8
 8004066:	409a      	lsls	r2, r3
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004070:	f043 0201 	orr.w	r2, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	fa22 f303 	lsr.w	r3, r2, r3
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d06e      	beq.n	800416c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a69      	ldr	r2, [pc, #420]	@ (8004238 <HAL_DMA_IRQHandler+0x3f8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d04a      	beq.n	800412e <HAL_DMA_IRQHandler+0x2ee>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a67      	ldr	r2, [pc, #412]	@ (800423c <HAL_DMA_IRQHandler+0x3fc>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d045      	beq.n	800412e <HAL_DMA_IRQHandler+0x2ee>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a66      	ldr	r2, [pc, #408]	@ (8004240 <HAL_DMA_IRQHandler+0x400>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d040      	beq.n	800412e <HAL_DMA_IRQHandler+0x2ee>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a64      	ldr	r2, [pc, #400]	@ (8004244 <HAL_DMA_IRQHandler+0x404>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d03b      	beq.n	800412e <HAL_DMA_IRQHandler+0x2ee>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a63      	ldr	r2, [pc, #396]	@ (8004248 <HAL_DMA_IRQHandler+0x408>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d036      	beq.n	800412e <HAL_DMA_IRQHandler+0x2ee>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a61      	ldr	r2, [pc, #388]	@ (800424c <HAL_DMA_IRQHandler+0x40c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d031      	beq.n	800412e <HAL_DMA_IRQHandler+0x2ee>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a60      	ldr	r2, [pc, #384]	@ (8004250 <HAL_DMA_IRQHandler+0x410>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d02c      	beq.n	800412e <HAL_DMA_IRQHandler+0x2ee>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a5e      	ldr	r2, [pc, #376]	@ (8004254 <HAL_DMA_IRQHandler+0x414>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d027      	beq.n	800412e <HAL_DMA_IRQHandler+0x2ee>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a5d      	ldr	r2, [pc, #372]	@ (8004258 <HAL_DMA_IRQHandler+0x418>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d022      	beq.n	800412e <HAL_DMA_IRQHandler+0x2ee>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a5b      	ldr	r2, [pc, #364]	@ (800425c <HAL_DMA_IRQHandler+0x41c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d01d      	beq.n	800412e <HAL_DMA_IRQHandler+0x2ee>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a5a      	ldr	r2, [pc, #360]	@ (8004260 <HAL_DMA_IRQHandler+0x420>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d018      	beq.n	800412e <HAL_DMA_IRQHandler+0x2ee>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a58      	ldr	r2, [pc, #352]	@ (8004264 <HAL_DMA_IRQHandler+0x424>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d013      	beq.n	800412e <HAL_DMA_IRQHandler+0x2ee>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a57      	ldr	r2, [pc, #348]	@ (8004268 <HAL_DMA_IRQHandler+0x428>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00e      	beq.n	800412e <HAL_DMA_IRQHandler+0x2ee>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a55      	ldr	r2, [pc, #340]	@ (800426c <HAL_DMA_IRQHandler+0x42c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d009      	beq.n	800412e <HAL_DMA_IRQHandler+0x2ee>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a54      	ldr	r2, [pc, #336]	@ (8004270 <HAL_DMA_IRQHandler+0x430>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d004      	beq.n	800412e <HAL_DMA_IRQHandler+0x2ee>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a52      	ldr	r2, [pc, #328]	@ (8004274 <HAL_DMA_IRQHandler+0x434>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d10a      	bne.n	8004144 <HAL_DMA_IRQHandler+0x304>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	e003      	b.n	800414c <HAL_DMA_IRQHandler+0x30c>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2300      	movs	r3, #0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00d      	beq.n	800416c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	2201      	movs	r2, #1
 800415a:	409a      	lsls	r2, r3
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004164:	f043 0202 	orr.w	r2, r3, #2
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	2204      	movs	r2, #4
 8004176:	409a      	lsls	r2, r3
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	4013      	ands	r3, r2
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 808f 	beq.w	80042a0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a2c      	ldr	r2, [pc, #176]	@ (8004238 <HAL_DMA_IRQHandler+0x3f8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d04a      	beq.n	8004222 <HAL_DMA_IRQHandler+0x3e2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a2a      	ldr	r2, [pc, #168]	@ (800423c <HAL_DMA_IRQHandler+0x3fc>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d045      	beq.n	8004222 <HAL_DMA_IRQHandler+0x3e2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a29      	ldr	r2, [pc, #164]	@ (8004240 <HAL_DMA_IRQHandler+0x400>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d040      	beq.n	8004222 <HAL_DMA_IRQHandler+0x3e2>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a27      	ldr	r2, [pc, #156]	@ (8004244 <HAL_DMA_IRQHandler+0x404>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d03b      	beq.n	8004222 <HAL_DMA_IRQHandler+0x3e2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a26      	ldr	r2, [pc, #152]	@ (8004248 <HAL_DMA_IRQHandler+0x408>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d036      	beq.n	8004222 <HAL_DMA_IRQHandler+0x3e2>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a24      	ldr	r2, [pc, #144]	@ (800424c <HAL_DMA_IRQHandler+0x40c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d031      	beq.n	8004222 <HAL_DMA_IRQHandler+0x3e2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a23      	ldr	r2, [pc, #140]	@ (8004250 <HAL_DMA_IRQHandler+0x410>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d02c      	beq.n	8004222 <HAL_DMA_IRQHandler+0x3e2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a21      	ldr	r2, [pc, #132]	@ (8004254 <HAL_DMA_IRQHandler+0x414>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d027      	beq.n	8004222 <HAL_DMA_IRQHandler+0x3e2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a20      	ldr	r2, [pc, #128]	@ (8004258 <HAL_DMA_IRQHandler+0x418>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d022      	beq.n	8004222 <HAL_DMA_IRQHandler+0x3e2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1e      	ldr	r2, [pc, #120]	@ (800425c <HAL_DMA_IRQHandler+0x41c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d01d      	beq.n	8004222 <HAL_DMA_IRQHandler+0x3e2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004260 <HAL_DMA_IRQHandler+0x420>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d018      	beq.n	8004222 <HAL_DMA_IRQHandler+0x3e2>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004264 <HAL_DMA_IRQHandler+0x424>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <HAL_DMA_IRQHandler+0x3e2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004268 <HAL_DMA_IRQHandler+0x428>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00e      	beq.n	8004222 <HAL_DMA_IRQHandler+0x3e2>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a18      	ldr	r2, [pc, #96]	@ (800426c <HAL_DMA_IRQHandler+0x42c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d009      	beq.n	8004222 <HAL_DMA_IRQHandler+0x3e2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a17      	ldr	r2, [pc, #92]	@ (8004270 <HAL_DMA_IRQHandler+0x430>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d004      	beq.n	8004222 <HAL_DMA_IRQHandler+0x3e2>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a15      	ldr	r2, [pc, #84]	@ (8004274 <HAL_DMA_IRQHandler+0x434>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d12a      	bne.n	8004278 <HAL_DMA_IRQHandler+0x438>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	bf14      	ite	ne
 8004230:	2301      	movne	r3, #1
 8004232:	2300      	moveq	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	e023      	b.n	8004280 <HAL_DMA_IRQHandler+0x440>
 8004238:	40020010 	.word	0x40020010
 800423c:	40020028 	.word	0x40020028
 8004240:	40020040 	.word	0x40020040
 8004244:	40020058 	.word	0x40020058
 8004248:	40020070 	.word	0x40020070
 800424c:	40020088 	.word	0x40020088
 8004250:	400200a0 	.word	0x400200a0
 8004254:	400200b8 	.word	0x400200b8
 8004258:	40020410 	.word	0x40020410
 800425c:	40020428 	.word	0x40020428
 8004260:	40020440 	.word	0x40020440
 8004264:	40020458 	.word	0x40020458
 8004268:	40020470 	.word	0x40020470
 800426c:	40020488 	.word	0x40020488
 8004270:	400204a0 	.word	0x400204a0
 8004274:	400204b8 	.word	0x400204b8
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2300      	movs	r3, #0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00d      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004288:	f003 031f 	and.w	r3, r3, #31
 800428c:	2204      	movs	r2, #4
 800428e:	409a      	lsls	r2, r3
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004298:	f043 0204 	orr.w	r2, r3, #4
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a4:	f003 031f 	and.w	r3, r3, #31
 80042a8:	2210      	movs	r2, #16
 80042aa:	409a      	lsls	r2, r3
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 80a6 	beq.w	8004402 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a85      	ldr	r2, [pc, #532]	@ (80044d0 <HAL_DMA_IRQHandler+0x690>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d04a      	beq.n	8004356 <HAL_DMA_IRQHandler+0x516>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a83      	ldr	r2, [pc, #524]	@ (80044d4 <HAL_DMA_IRQHandler+0x694>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d045      	beq.n	8004356 <HAL_DMA_IRQHandler+0x516>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a82      	ldr	r2, [pc, #520]	@ (80044d8 <HAL_DMA_IRQHandler+0x698>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d040      	beq.n	8004356 <HAL_DMA_IRQHandler+0x516>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a80      	ldr	r2, [pc, #512]	@ (80044dc <HAL_DMA_IRQHandler+0x69c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d03b      	beq.n	8004356 <HAL_DMA_IRQHandler+0x516>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a7f      	ldr	r2, [pc, #508]	@ (80044e0 <HAL_DMA_IRQHandler+0x6a0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d036      	beq.n	8004356 <HAL_DMA_IRQHandler+0x516>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a7d      	ldr	r2, [pc, #500]	@ (80044e4 <HAL_DMA_IRQHandler+0x6a4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d031      	beq.n	8004356 <HAL_DMA_IRQHandler+0x516>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a7c      	ldr	r2, [pc, #496]	@ (80044e8 <HAL_DMA_IRQHandler+0x6a8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d02c      	beq.n	8004356 <HAL_DMA_IRQHandler+0x516>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a7a      	ldr	r2, [pc, #488]	@ (80044ec <HAL_DMA_IRQHandler+0x6ac>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d027      	beq.n	8004356 <HAL_DMA_IRQHandler+0x516>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a79      	ldr	r2, [pc, #484]	@ (80044f0 <HAL_DMA_IRQHandler+0x6b0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d022      	beq.n	8004356 <HAL_DMA_IRQHandler+0x516>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a77      	ldr	r2, [pc, #476]	@ (80044f4 <HAL_DMA_IRQHandler+0x6b4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01d      	beq.n	8004356 <HAL_DMA_IRQHandler+0x516>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a76      	ldr	r2, [pc, #472]	@ (80044f8 <HAL_DMA_IRQHandler+0x6b8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d018      	beq.n	8004356 <HAL_DMA_IRQHandler+0x516>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a74      	ldr	r2, [pc, #464]	@ (80044fc <HAL_DMA_IRQHandler+0x6bc>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <HAL_DMA_IRQHandler+0x516>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a73      	ldr	r2, [pc, #460]	@ (8004500 <HAL_DMA_IRQHandler+0x6c0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00e      	beq.n	8004356 <HAL_DMA_IRQHandler+0x516>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a71      	ldr	r2, [pc, #452]	@ (8004504 <HAL_DMA_IRQHandler+0x6c4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d009      	beq.n	8004356 <HAL_DMA_IRQHandler+0x516>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a70      	ldr	r2, [pc, #448]	@ (8004508 <HAL_DMA_IRQHandler+0x6c8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_DMA_IRQHandler+0x516>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a6e      	ldr	r2, [pc, #440]	@ (800450c <HAL_DMA_IRQHandler+0x6cc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d10a      	bne.n	800436c <HAL_DMA_IRQHandler+0x52c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	e009      	b.n	8004380 <HAL_DMA_IRQHandler+0x540>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	bf14      	ite	ne
 800437a:	2301      	movne	r3, #1
 800437c:	2300      	moveq	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d03e      	beq.n	8004402 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004388:	f003 031f 	and.w	r3, r3, #31
 800438c:	2210      	movs	r2, #16
 800438e:	409a      	lsls	r2, r3
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d018      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d108      	bne.n	80043c2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d024      	beq.n	8004402 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	4798      	blx	r3
 80043c0:	e01f      	b.n	8004402 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d01b      	beq.n	8004402 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	4798      	blx	r3
 80043d2:	e016      	b.n	8004402 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d107      	bne.n	80043f2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0208 	bic.w	r2, r2, #8
 80043f0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004406:	f003 031f 	and.w	r3, r3, #31
 800440a:	2220      	movs	r2, #32
 800440c:	409a      	lsls	r2, r3
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 8110 	beq.w	8004638 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a2c      	ldr	r2, [pc, #176]	@ (80044d0 <HAL_DMA_IRQHandler+0x690>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d04a      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x678>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a2b      	ldr	r2, [pc, #172]	@ (80044d4 <HAL_DMA_IRQHandler+0x694>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d045      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x678>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a29      	ldr	r2, [pc, #164]	@ (80044d8 <HAL_DMA_IRQHandler+0x698>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d040      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x678>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a28      	ldr	r2, [pc, #160]	@ (80044dc <HAL_DMA_IRQHandler+0x69c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d03b      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x678>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a26      	ldr	r2, [pc, #152]	@ (80044e0 <HAL_DMA_IRQHandler+0x6a0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d036      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x678>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a25      	ldr	r2, [pc, #148]	@ (80044e4 <HAL_DMA_IRQHandler+0x6a4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d031      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x678>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a23      	ldr	r2, [pc, #140]	@ (80044e8 <HAL_DMA_IRQHandler+0x6a8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d02c      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x678>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a22      	ldr	r2, [pc, #136]	@ (80044ec <HAL_DMA_IRQHandler+0x6ac>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d027      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x678>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a20      	ldr	r2, [pc, #128]	@ (80044f0 <HAL_DMA_IRQHandler+0x6b0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d022      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x678>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1f      	ldr	r2, [pc, #124]	@ (80044f4 <HAL_DMA_IRQHandler+0x6b4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d01d      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x678>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a1d      	ldr	r2, [pc, #116]	@ (80044f8 <HAL_DMA_IRQHandler+0x6b8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d018      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x678>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1c      	ldr	r2, [pc, #112]	@ (80044fc <HAL_DMA_IRQHandler+0x6bc>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d013      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x678>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a1a      	ldr	r2, [pc, #104]	@ (8004500 <HAL_DMA_IRQHandler+0x6c0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00e      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x678>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a19      	ldr	r2, [pc, #100]	@ (8004504 <HAL_DMA_IRQHandler+0x6c4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d009      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x678>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a17      	ldr	r2, [pc, #92]	@ (8004508 <HAL_DMA_IRQHandler+0x6c8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d004      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x678>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a16      	ldr	r2, [pc, #88]	@ (800450c <HAL_DMA_IRQHandler+0x6cc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d12b      	bne.n	8004510 <HAL_DMA_IRQHandler+0x6d0>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0310 	and.w	r3, r3, #16
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bf14      	ite	ne
 80044c6:	2301      	movne	r3, #1
 80044c8:	2300      	moveq	r3, #0
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	e02a      	b.n	8004524 <HAL_DMA_IRQHandler+0x6e4>
 80044ce:	bf00      	nop
 80044d0:	40020010 	.word	0x40020010
 80044d4:	40020028 	.word	0x40020028
 80044d8:	40020040 	.word	0x40020040
 80044dc:	40020058 	.word	0x40020058
 80044e0:	40020070 	.word	0x40020070
 80044e4:	40020088 	.word	0x40020088
 80044e8:	400200a0 	.word	0x400200a0
 80044ec:	400200b8 	.word	0x400200b8
 80044f0:	40020410 	.word	0x40020410
 80044f4:	40020428 	.word	0x40020428
 80044f8:	40020440 	.word	0x40020440
 80044fc:	40020458 	.word	0x40020458
 8004500:	40020470 	.word	0x40020470
 8004504:	40020488 	.word	0x40020488
 8004508:	400204a0 	.word	0x400204a0
 800450c:	400204b8 	.word	0x400204b8
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	bf14      	ite	ne
 800451e:	2301      	movne	r3, #1
 8004520:	2300      	moveq	r3, #0
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8087 	beq.w	8004638 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452e:	f003 031f 	and.w	r3, r3, #31
 8004532:	2220      	movs	r2, #32
 8004534:	409a      	lsls	r2, r3
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b04      	cmp	r3, #4
 8004544:	d139      	bne.n	80045ba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0216 	bic.w	r2, r2, #22
 8004554:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695a      	ldr	r2, [r3, #20]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004564:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d103      	bne.n	8004576 <HAL_DMA_IRQHandler+0x736>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0208 	bic.w	r2, r2, #8
 8004584:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	223f      	movs	r2, #63	@ 0x3f
 8004590:	409a      	lsls	r2, r3
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 8382 	beq.w	8004cb4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	4798      	blx	r3
          }
          return;
 80045b8:	e37c      	b.n	8004cb4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d018      	beq.n	80045fa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d108      	bne.n	80045e8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d02c      	beq.n	8004638 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	4798      	blx	r3
 80045e6:	e027      	b.n	8004638 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d023      	beq.n	8004638 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	4798      	blx	r3
 80045f8:	e01e      	b.n	8004638 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10f      	bne.n	8004628 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0210 	bic.w	r2, r2, #16
 8004616:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 833e 	beq.w	8004cbe <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 8088 	beq.w	8004760 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2204      	movs	r2, #4
 8004654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a89      	ldr	r2, [pc, #548]	@ (8004884 <HAL_DMA_IRQHandler+0xa44>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d04a      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x8b8>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a88      	ldr	r2, [pc, #544]	@ (8004888 <HAL_DMA_IRQHandler+0xa48>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d045      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x8b8>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a86      	ldr	r2, [pc, #536]	@ (800488c <HAL_DMA_IRQHandler+0xa4c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d040      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x8b8>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a85      	ldr	r2, [pc, #532]	@ (8004890 <HAL_DMA_IRQHandler+0xa50>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d03b      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x8b8>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a83      	ldr	r2, [pc, #524]	@ (8004894 <HAL_DMA_IRQHandler+0xa54>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d036      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x8b8>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a82      	ldr	r2, [pc, #520]	@ (8004898 <HAL_DMA_IRQHandler+0xa58>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d031      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x8b8>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a80      	ldr	r2, [pc, #512]	@ (800489c <HAL_DMA_IRQHandler+0xa5c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d02c      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x8b8>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a7f      	ldr	r2, [pc, #508]	@ (80048a0 <HAL_DMA_IRQHandler+0xa60>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d027      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x8b8>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a7d      	ldr	r2, [pc, #500]	@ (80048a4 <HAL_DMA_IRQHandler+0xa64>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d022      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x8b8>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a7c      	ldr	r2, [pc, #496]	@ (80048a8 <HAL_DMA_IRQHandler+0xa68>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d01d      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x8b8>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a7a      	ldr	r2, [pc, #488]	@ (80048ac <HAL_DMA_IRQHandler+0xa6c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d018      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x8b8>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a79      	ldr	r2, [pc, #484]	@ (80048b0 <HAL_DMA_IRQHandler+0xa70>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d013      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x8b8>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a77      	ldr	r2, [pc, #476]	@ (80048b4 <HAL_DMA_IRQHandler+0xa74>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00e      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x8b8>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a76      	ldr	r2, [pc, #472]	@ (80048b8 <HAL_DMA_IRQHandler+0xa78>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d009      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x8b8>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a74      	ldr	r2, [pc, #464]	@ (80048bc <HAL_DMA_IRQHandler+0xa7c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x8b8>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a73      	ldr	r2, [pc, #460]	@ (80048c0 <HAL_DMA_IRQHandler+0xa80>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d108      	bne.n	800470a <HAL_DMA_IRQHandler+0x8ca>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0201 	bic.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	e007      	b.n	800471a <HAL_DMA_IRQHandler+0x8da>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0201 	bic.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3301      	adds	r3, #1
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004722:	429a      	cmp	r2, r3
 8004724:	d307      	bcc.n	8004736 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1f2      	bne.n	800471a <HAL_DMA_IRQHandler+0x8da>
 8004734:	e000      	b.n	8004738 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004736:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d004      	beq.n	8004750 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2203      	movs	r2, #3
 800474a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800474e:	e003      	b.n	8004758 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 82aa 	beq.w	8004cbe <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	4798      	blx	r3
 8004772:	e2a4      	b.n	8004cbe <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a52      	ldr	r2, [pc, #328]	@ (80048c4 <HAL_DMA_IRQHandler+0xa84>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d04a      	beq.n	8004814 <HAL_DMA_IRQHandler+0x9d4>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a51      	ldr	r2, [pc, #324]	@ (80048c8 <HAL_DMA_IRQHandler+0xa88>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d045      	beq.n	8004814 <HAL_DMA_IRQHandler+0x9d4>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a4f      	ldr	r2, [pc, #316]	@ (80048cc <HAL_DMA_IRQHandler+0xa8c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d040      	beq.n	8004814 <HAL_DMA_IRQHandler+0x9d4>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a4e      	ldr	r2, [pc, #312]	@ (80048d0 <HAL_DMA_IRQHandler+0xa90>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d03b      	beq.n	8004814 <HAL_DMA_IRQHandler+0x9d4>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a4c      	ldr	r2, [pc, #304]	@ (80048d4 <HAL_DMA_IRQHandler+0xa94>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d036      	beq.n	8004814 <HAL_DMA_IRQHandler+0x9d4>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a4b      	ldr	r2, [pc, #300]	@ (80048d8 <HAL_DMA_IRQHandler+0xa98>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d031      	beq.n	8004814 <HAL_DMA_IRQHandler+0x9d4>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a49      	ldr	r2, [pc, #292]	@ (80048dc <HAL_DMA_IRQHandler+0xa9c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d02c      	beq.n	8004814 <HAL_DMA_IRQHandler+0x9d4>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a48      	ldr	r2, [pc, #288]	@ (80048e0 <HAL_DMA_IRQHandler+0xaa0>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d027      	beq.n	8004814 <HAL_DMA_IRQHandler+0x9d4>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a46      	ldr	r2, [pc, #280]	@ (80048e4 <HAL_DMA_IRQHandler+0xaa4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d022      	beq.n	8004814 <HAL_DMA_IRQHandler+0x9d4>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a45      	ldr	r2, [pc, #276]	@ (80048e8 <HAL_DMA_IRQHandler+0xaa8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d01d      	beq.n	8004814 <HAL_DMA_IRQHandler+0x9d4>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a43      	ldr	r2, [pc, #268]	@ (80048ec <HAL_DMA_IRQHandler+0xaac>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d018      	beq.n	8004814 <HAL_DMA_IRQHandler+0x9d4>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a42      	ldr	r2, [pc, #264]	@ (80048f0 <HAL_DMA_IRQHandler+0xab0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d013      	beq.n	8004814 <HAL_DMA_IRQHandler+0x9d4>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a40      	ldr	r2, [pc, #256]	@ (80048f4 <HAL_DMA_IRQHandler+0xab4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00e      	beq.n	8004814 <HAL_DMA_IRQHandler+0x9d4>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a3f      	ldr	r2, [pc, #252]	@ (80048f8 <HAL_DMA_IRQHandler+0xab8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d009      	beq.n	8004814 <HAL_DMA_IRQHandler+0x9d4>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a3d      	ldr	r2, [pc, #244]	@ (80048fc <HAL_DMA_IRQHandler+0xabc>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d004      	beq.n	8004814 <HAL_DMA_IRQHandler+0x9d4>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a3c      	ldr	r2, [pc, #240]	@ (8004900 <HAL_DMA_IRQHandler+0xac0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d101      	bne.n	8004818 <HAL_DMA_IRQHandler+0x9d8>
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <HAL_DMA_IRQHandler+0x9da>
 8004818:	2300      	movs	r3, #0
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 824f 	beq.w	8004cbe <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	2204      	movs	r2, #4
 8004832:	409a      	lsls	r2, r3
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	4013      	ands	r3, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80dd 	beq.w	80049f8 <HAL_DMA_IRQHandler+0xbb8>
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 80d7 	beq.w	80049f8 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800484e:	f003 031f 	and.w	r3, r3, #31
 8004852:	2204      	movs	r2, #4
 8004854:	409a      	lsls	r2, r3
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d059      	beq.n	8004918 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d14a      	bne.n	8004904 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8220 	beq.w	8004cb8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004880:	e21a      	b.n	8004cb8 <HAL_DMA_IRQHandler+0xe78>
 8004882:	bf00      	nop
 8004884:	40020010 	.word	0x40020010
 8004888:	40020028 	.word	0x40020028
 800488c:	40020040 	.word	0x40020040
 8004890:	40020058 	.word	0x40020058
 8004894:	40020070 	.word	0x40020070
 8004898:	40020088 	.word	0x40020088
 800489c:	400200a0 	.word	0x400200a0
 80048a0:	400200b8 	.word	0x400200b8
 80048a4:	40020410 	.word	0x40020410
 80048a8:	40020428 	.word	0x40020428
 80048ac:	40020440 	.word	0x40020440
 80048b0:	40020458 	.word	0x40020458
 80048b4:	40020470 	.word	0x40020470
 80048b8:	40020488 	.word	0x40020488
 80048bc:	400204a0 	.word	0x400204a0
 80048c0:	400204b8 	.word	0x400204b8
 80048c4:	48022c08 	.word	0x48022c08
 80048c8:	48022c1c 	.word	0x48022c1c
 80048cc:	48022c30 	.word	0x48022c30
 80048d0:	48022c44 	.word	0x48022c44
 80048d4:	48022c58 	.word	0x48022c58
 80048d8:	48022c6c 	.word	0x48022c6c
 80048dc:	48022c80 	.word	0x48022c80
 80048e0:	48022c94 	.word	0x48022c94
 80048e4:	58025408 	.word	0x58025408
 80048e8:	5802541c 	.word	0x5802541c
 80048ec:	58025430 	.word	0x58025430
 80048f0:	58025444 	.word	0x58025444
 80048f4:	58025458 	.word	0x58025458
 80048f8:	5802546c 	.word	0x5802546c
 80048fc:	58025480 	.word	0x58025480
 8004900:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 81d5 	beq.w	8004cb8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004916:	e1cf      	b.n	8004cb8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b00      	cmp	r3, #0
 8004920:	d160      	bne.n	80049e4 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7f      	ldr	r2, [pc, #508]	@ (8004b24 <HAL_DMA_IRQHandler+0xce4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d04a      	beq.n	80049c2 <HAL_DMA_IRQHandler+0xb82>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a7d      	ldr	r2, [pc, #500]	@ (8004b28 <HAL_DMA_IRQHandler+0xce8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d045      	beq.n	80049c2 <HAL_DMA_IRQHandler+0xb82>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a7c      	ldr	r2, [pc, #496]	@ (8004b2c <HAL_DMA_IRQHandler+0xcec>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d040      	beq.n	80049c2 <HAL_DMA_IRQHandler+0xb82>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a7a      	ldr	r2, [pc, #488]	@ (8004b30 <HAL_DMA_IRQHandler+0xcf0>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d03b      	beq.n	80049c2 <HAL_DMA_IRQHandler+0xb82>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a79      	ldr	r2, [pc, #484]	@ (8004b34 <HAL_DMA_IRQHandler+0xcf4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d036      	beq.n	80049c2 <HAL_DMA_IRQHandler+0xb82>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a77      	ldr	r2, [pc, #476]	@ (8004b38 <HAL_DMA_IRQHandler+0xcf8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d031      	beq.n	80049c2 <HAL_DMA_IRQHandler+0xb82>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a76      	ldr	r2, [pc, #472]	@ (8004b3c <HAL_DMA_IRQHandler+0xcfc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d02c      	beq.n	80049c2 <HAL_DMA_IRQHandler+0xb82>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a74      	ldr	r2, [pc, #464]	@ (8004b40 <HAL_DMA_IRQHandler+0xd00>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d027      	beq.n	80049c2 <HAL_DMA_IRQHandler+0xb82>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a73      	ldr	r2, [pc, #460]	@ (8004b44 <HAL_DMA_IRQHandler+0xd04>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d022      	beq.n	80049c2 <HAL_DMA_IRQHandler+0xb82>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a71      	ldr	r2, [pc, #452]	@ (8004b48 <HAL_DMA_IRQHandler+0xd08>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01d      	beq.n	80049c2 <HAL_DMA_IRQHandler+0xb82>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a70      	ldr	r2, [pc, #448]	@ (8004b4c <HAL_DMA_IRQHandler+0xd0c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d018      	beq.n	80049c2 <HAL_DMA_IRQHandler+0xb82>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a6e      	ldr	r2, [pc, #440]	@ (8004b50 <HAL_DMA_IRQHandler+0xd10>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d013      	beq.n	80049c2 <HAL_DMA_IRQHandler+0xb82>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a6d      	ldr	r2, [pc, #436]	@ (8004b54 <HAL_DMA_IRQHandler+0xd14>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00e      	beq.n	80049c2 <HAL_DMA_IRQHandler+0xb82>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a6b      	ldr	r2, [pc, #428]	@ (8004b58 <HAL_DMA_IRQHandler+0xd18>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d009      	beq.n	80049c2 <HAL_DMA_IRQHandler+0xb82>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a6a      	ldr	r2, [pc, #424]	@ (8004b5c <HAL_DMA_IRQHandler+0xd1c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d004      	beq.n	80049c2 <HAL_DMA_IRQHandler+0xb82>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a68      	ldr	r2, [pc, #416]	@ (8004b60 <HAL_DMA_IRQHandler+0xd20>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d108      	bne.n	80049d4 <HAL_DMA_IRQHandler+0xb94>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0208 	bic.w	r2, r2, #8
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	e007      	b.n	80049e4 <HAL_DMA_IRQHandler+0xba4>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0204 	bic.w	r2, r2, #4
 80049e2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8165 	beq.w	8004cb8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049f6:	e15f      	b.n	8004cb8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049fc:	f003 031f 	and.w	r3, r3, #31
 8004a00:	2202      	movs	r2, #2
 8004a02:	409a      	lsls	r2, r3
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	4013      	ands	r3, r2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 80c5 	beq.w	8004b98 <HAL_DMA_IRQHandler+0xd58>
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 80bf 	beq.w	8004b98 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1e:	f003 031f 	and.w	r3, r3, #31
 8004a22:	2202      	movs	r2, #2
 8004a24:	409a      	lsls	r2, r3
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d018      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 813a 	beq.w	8004cbc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a50:	e134      	b.n	8004cbc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 8130 	beq.w	8004cbc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a64:	e12a      	b.n	8004cbc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f040 8089 	bne.w	8004b84 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a2b      	ldr	r2, [pc, #172]	@ (8004b24 <HAL_DMA_IRQHandler+0xce4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d04a      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xcd2>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a29      	ldr	r2, [pc, #164]	@ (8004b28 <HAL_DMA_IRQHandler+0xce8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d045      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xcd2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a28      	ldr	r2, [pc, #160]	@ (8004b2c <HAL_DMA_IRQHandler+0xcec>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d040      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xcd2>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a26      	ldr	r2, [pc, #152]	@ (8004b30 <HAL_DMA_IRQHandler+0xcf0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d03b      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xcd2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a25      	ldr	r2, [pc, #148]	@ (8004b34 <HAL_DMA_IRQHandler+0xcf4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d036      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xcd2>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a23      	ldr	r2, [pc, #140]	@ (8004b38 <HAL_DMA_IRQHandler+0xcf8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d031      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xcd2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a22      	ldr	r2, [pc, #136]	@ (8004b3c <HAL_DMA_IRQHandler+0xcfc>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d02c      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xcd2>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a20      	ldr	r2, [pc, #128]	@ (8004b40 <HAL_DMA_IRQHandler+0xd00>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d027      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xcd2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8004b44 <HAL_DMA_IRQHandler+0xd04>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d022      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xcd2>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b48 <HAL_DMA_IRQHandler+0xd08>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d01d      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xcd2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1c      	ldr	r2, [pc, #112]	@ (8004b4c <HAL_DMA_IRQHandler+0xd0c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d018      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xcd2>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8004b50 <HAL_DMA_IRQHandler+0xd10>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d013      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xcd2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a19      	ldr	r2, [pc, #100]	@ (8004b54 <HAL_DMA_IRQHandler+0xd14>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00e      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xcd2>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a17      	ldr	r2, [pc, #92]	@ (8004b58 <HAL_DMA_IRQHandler+0xd18>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d009      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xcd2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a16      	ldr	r2, [pc, #88]	@ (8004b5c <HAL_DMA_IRQHandler+0xd1c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d004      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xcd2>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a14      	ldr	r2, [pc, #80]	@ (8004b60 <HAL_DMA_IRQHandler+0xd20>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d128      	bne.n	8004b64 <HAL_DMA_IRQHandler+0xd24>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0214 	bic.w	r2, r2, #20
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	e027      	b.n	8004b74 <HAL_DMA_IRQHandler+0xd34>
 8004b24:	40020010 	.word	0x40020010
 8004b28:	40020028 	.word	0x40020028
 8004b2c:	40020040 	.word	0x40020040
 8004b30:	40020058 	.word	0x40020058
 8004b34:	40020070 	.word	0x40020070
 8004b38:	40020088 	.word	0x40020088
 8004b3c:	400200a0 	.word	0x400200a0
 8004b40:	400200b8 	.word	0x400200b8
 8004b44:	40020410 	.word	0x40020410
 8004b48:	40020428 	.word	0x40020428
 8004b4c:	40020440 	.word	0x40020440
 8004b50:	40020458 	.word	0x40020458
 8004b54:	40020470 	.word	0x40020470
 8004b58:	40020488 	.word	0x40020488
 8004b5c:	400204a0 	.word	0x400204a0
 8004b60:	400204b8 	.word	0x400204b8
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 020a 	bic.w	r2, r2, #10
 8004b72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 8097 	beq.w	8004cbc <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b96:	e091      	b.n	8004cbc <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	2208      	movs	r2, #8
 8004ba2:	409a      	lsls	r2, r3
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8088 	beq.w	8004cbe <HAL_DMA_IRQHandler+0xe7e>
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 8082 	beq.w	8004cbe <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a41      	ldr	r2, [pc, #260]	@ (8004cc4 <HAL_DMA_IRQHandler+0xe84>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d04a      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xe1a>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a3f      	ldr	r2, [pc, #252]	@ (8004cc8 <HAL_DMA_IRQHandler+0xe88>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d045      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xe1a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a3e      	ldr	r2, [pc, #248]	@ (8004ccc <HAL_DMA_IRQHandler+0xe8c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d040      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xe1a>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a3c      	ldr	r2, [pc, #240]	@ (8004cd0 <HAL_DMA_IRQHandler+0xe90>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d03b      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xe1a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a3b      	ldr	r2, [pc, #236]	@ (8004cd4 <HAL_DMA_IRQHandler+0xe94>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d036      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xe1a>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a39      	ldr	r2, [pc, #228]	@ (8004cd8 <HAL_DMA_IRQHandler+0xe98>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d031      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xe1a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a38      	ldr	r2, [pc, #224]	@ (8004cdc <HAL_DMA_IRQHandler+0xe9c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d02c      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xe1a>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a36      	ldr	r2, [pc, #216]	@ (8004ce0 <HAL_DMA_IRQHandler+0xea0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d027      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xe1a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a35      	ldr	r2, [pc, #212]	@ (8004ce4 <HAL_DMA_IRQHandler+0xea4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d022      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xe1a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a33      	ldr	r2, [pc, #204]	@ (8004ce8 <HAL_DMA_IRQHandler+0xea8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d01d      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xe1a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a32      	ldr	r2, [pc, #200]	@ (8004cec <HAL_DMA_IRQHandler+0xeac>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d018      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xe1a>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a30      	ldr	r2, [pc, #192]	@ (8004cf0 <HAL_DMA_IRQHandler+0xeb0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d013      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xe1a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a2f      	ldr	r2, [pc, #188]	@ (8004cf4 <HAL_DMA_IRQHandler+0xeb4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00e      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xe1a>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a2d      	ldr	r2, [pc, #180]	@ (8004cf8 <HAL_DMA_IRQHandler+0xeb8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d009      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xe1a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a2c      	ldr	r2, [pc, #176]	@ (8004cfc <HAL_DMA_IRQHandler+0xebc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d004      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xe1a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a2a      	ldr	r2, [pc, #168]	@ (8004d00 <HAL_DMA_IRQHandler+0xec0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d108      	bne.n	8004c6c <HAL_DMA_IRQHandler+0xe2c>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 021c 	bic.w	r2, r2, #28
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	e007      	b.n	8004c7c <HAL_DMA_IRQHandler+0xe3c>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 020e 	bic.w	r2, r2, #14
 8004c7a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c80:	f003 031f 	and.w	r3, r3, #31
 8004c84:	2201      	movs	r2, #1
 8004c86:	409a      	lsls	r2, r3
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	4798      	blx	r3
 8004cb2:	e004      	b.n	8004cbe <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004cb4:	bf00      	nop
 8004cb6:	e002      	b.n	8004cbe <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cb8:	bf00      	nop
 8004cba:	e000      	b.n	8004cbe <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cbc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004cbe:	3728      	adds	r7, #40	@ 0x28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40020010 	.word	0x40020010
 8004cc8:	40020028 	.word	0x40020028
 8004ccc:	40020040 	.word	0x40020040
 8004cd0:	40020058 	.word	0x40020058
 8004cd4:	40020070 	.word	0x40020070
 8004cd8:	40020088 	.word	0x40020088
 8004cdc:	400200a0 	.word	0x400200a0
 8004ce0:	400200b8 	.word	0x400200b8
 8004ce4:	40020410 	.word	0x40020410
 8004ce8:	40020428 	.word	0x40020428
 8004cec:	40020440 	.word	0x40020440
 8004cf0:	40020458 	.word	0x40020458
 8004cf4:	40020470 	.word	0x40020470
 8004cf8:	40020488 	.word	0x40020488
 8004cfc:	400204a0 	.word	0x400204a0
 8004d00:	400204b8 	.word	0x400204b8

08004d04 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d2e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d34:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a7f      	ldr	r2, [pc, #508]	@ (8004f38 <DMA_SetConfig+0x21c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d072      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a7d      	ldr	r2, [pc, #500]	@ (8004f3c <DMA_SetConfig+0x220>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d06d      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a7c      	ldr	r2, [pc, #496]	@ (8004f40 <DMA_SetConfig+0x224>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d068      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a7a      	ldr	r2, [pc, #488]	@ (8004f44 <DMA_SetConfig+0x228>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d063      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a79      	ldr	r2, [pc, #484]	@ (8004f48 <DMA_SetConfig+0x22c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d05e      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a77      	ldr	r2, [pc, #476]	@ (8004f4c <DMA_SetConfig+0x230>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d059      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a76      	ldr	r2, [pc, #472]	@ (8004f50 <DMA_SetConfig+0x234>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d054      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a74      	ldr	r2, [pc, #464]	@ (8004f54 <DMA_SetConfig+0x238>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d04f      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a73      	ldr	r2, [pc, #460]	@ (8004f58 <DMA_SetConfig+0x23c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d04a      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a71      	ldr	r2, [pc, #452]	@ (8004f5c <DMA_SetConfig+0x240>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d045      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a70      	ldr	r2, [pc, #448]	@ (8004f60 <DMA_SetConfig+0x244>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d040      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a6e      	ldr	r2, [pc, #440]	@ (8004f64 <DMA_SetConfig+0x248>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d03b      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a6d      	ldr	r2, [pc, #436]	@ (8004f68 <DMA_SetConfig+0x24c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d036      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a6b      	ldr	r2, [pc, #428]	@ (8004f6c <DMA_SetConfig+0x250>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d031      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a6a      	ldr	r2, [pc, #424]	@ (8004f70 <DMA_SetConfig+0x254>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d02c      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a68      	ldr	r2, [pc, #416]	@ (8004f74 <DMA_SetConfig+0x258>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d027      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a67      	ldr	r2, [pc, #412]	@ (8004f78 <DMA_SetConfig+0x25c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d022      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a65      	ldr	r2, [pc, #404]	@ (8004f7c <DMA_SetConfig+0x260>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d01d      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a64      	ldr	r2, [pc, #400]	@ (8004f80 <DMA_SetConfig+0x264>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d018      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a62      	ldr	r2, [pc, #392]	@ (8004f84 <DMA_SetConfig+0x268>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a61      	ldr	r2, [pc, #388]	@ (8004f88 <DMA_SetConfig+0x26c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d00e      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a5f      	ldr	r2, [pc, #380]	@ (8004f8c <DMA_SetConfig+0x270>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d009      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a5e      	ldr	r2, [pc, #376]	@ (8004f90 <DMA_SetConfig+0x274>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d004      	beq.n	8004e26 <DMA_SetConfig+0x10a>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a5c      	ldr	r2, [pc, #368]	@ (8004f94 <DMA_SetConfig+0x278>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d101      	bne.n	8004e2a <DMA_SetConfig+0x10e>
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <DMA_SetConfig+0x110>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00d      	beq.n	8004e4c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004e38:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d004      	beq.n	8004e4c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e4a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a39      	ldr	r2, [pc, #228]	@ (8004f38 <DMA_SetConfig+0x21c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d04a      	beq.n	8004eec <DMA_SetConfig+0x1d0>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a38      	ldr	r2, [pc, #224]	@ (8004f3c <DMA_SetConfig+0x220>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d045      	beq.n	8004eec <DMA_SetConfig+0x1d0>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a36      	ldr	r2, [pc, #216]	@ (8004f40 <DMA_SetConfig+0x224>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d040      	beq.n	8004eec <DMA_SetConfig+0x1d0>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a35      	ldr	r2, [pc, #212]	@ (8004f44 <DMA_SetConfig+0x228>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d03b      	beq.n	8004eec <DMA_SetConfig+0x1d0>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a33      	ldr	r2, [pc, #204]	@ (8004f48 <DMA_SetConfig+0x22c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d036      	beq.n	8004eec <DMA_SetConfig+0x1d0>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a32      	ldr	r2, [pc, #200]	@ (8004f4c <DMA_SetConfig+0x230>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d031      	beq.n	8004eec <DMA_SetConfig+0x1d0>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a30      	ldr	r2, [pc, #192]	@ (8004f50 <DMA_SetConfig+0x234>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d02c      	beq.n	8004eec <DMA_SetConfig+0x1d0>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a2f      	ldr	r2, [pc, #188]	@ (8004f54 <DMA_SetConfig+0x238>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d027      	beq.n	8004eec <DMA_SetConfig+0x1d0>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a2d      	ldr	r2, [pc, #180]	@ (8004f58 <DMA_SetConfig+0x23c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d022      	beq.n	8004eec <DMA_SetConfig+0x1d0>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a2c      	ldr	r2, [pc, #176]	@ (8004f5c <DMA_SetConfig+0x240>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d01d      	beq.n	8004eec <DMA_SetConfig+0x1d0>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a2a      	ldr	r2, [pc, #168]	@ (8004f60 <DMA_SetConfig+0x244>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d018      	beq.n	8004eec <DMA_SetConfig+0x1d0>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a29      	ldr	r2, [pc, #164]	@ (8004f64 <DMA_SetConfig+0x248>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d013      	beq.n	8004eec <DMA_SetConfig+0x1d0>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a27      	ldr	r2, [pc, #156]	@ (8004f68 <DMA_SetConfig+0x24c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00e      	beq.n	8004eec <DMA_SetConfig+0x1d0>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a26      	ldr	r2, [pc, #152]	@ (8004f6c <DMA_SetConfig+0x250>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d009      	beq.n	8004eec <DMA_SetConfig+0x1d0>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a24      	ldr	r2, [pc, #144]	@ (8004f70 <DMA_SetConfig+0x254>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d004      	beq.n	8004eec <DMA_SetConfig+0x1d0>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a23      	ldr	r2, [pc, #140]	@ (8004f74 <DMA_SetConfig+0x258>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d101      	bne.n	8004ef0 <DMA_SetConfig+0x1d4>
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <DMA_SetConfig+0x1d6>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d059      	beq.n	8004faa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004efa:	f003 031f 	and.w	r3, r3, #31
 8004efe:	223f      	movs	r2, #63	@ 0x3f
 8004f00:	409a      	lsls	r2, r3
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f14:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	2b40      	cmp	r3, #64	@ 0x40
 8004f24:	d138      	bne.n	8004f98 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f36:	e0ae      	b.n	8005096 <DMA_SetConfig+0x37a>
 8004f38:	40020010 	.word	0x40020010
 8004f3c:	40020028 	.word	0x40020028
 8004f40:	40020040 	.word	0x40020040
 8004f44:	40020058 	.word	0x40020058
 8004f48:	40020070 	.word	0x40020070
 8004f4c:	40020088 	.word	0x40020088
 8004f50:	400200a0 	.word	0x400200a0
 8004f54:	400200b8 	.word	0x400200b8
 8004f58:	40020410 	.word	0x40020410
 8004f5c:	40020428 	.word	0x40020428
 8004f60:	40020440 	.word	0x40020440
 8004f64:	40020458 	.word	0x40020458
 8004f68:	40020470 	.word	0x40020470
 8004f6c:	40020488 	.word	0x40020488
 8004f70:	400204a0 	.word	0x400204a0
 8004f74:	400204b8 	.word	0x400204b8
 8004f78:	58025408 	.word	0x58025408
 8004f7c:	5802541c 	.word	0x5802541c
 8004f80:	58025430 	.word	0x58025430
 8004f84:	58025444 	.word	0x58025444
 8004f88:	58025458 	.word	0x58025458
 8004f8c:	5802546c 	.word	0x5802546c
 8004f90:	58025480 	.word	0x58025480
 8004f94:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	60da      	str	r2, [r3, #12]
}
 8004fa8:	e075      	b.n	8005096 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a3d      	ldr	r2, [pc, #244]	@ (80050a4 <DMA_SetConfig+0x388>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d04a      	beq.n	800504a <DMA_SetConfig+0x32e>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a3b      	ldr	r2, [pc, #236]	@ (80050a8 <DMA_SetConfig+0x38c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d045      	beq.n	800504a <DMA_SetConfig+0x32e>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a3a      	ldr	r2, [pc, #232]	@ (80050ac <DMA_SetConfig+0x390>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d040      	beq.n	800504a <DMA_SetConfig+0x32e>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a38      	ldr	r2, [pc, #224]	@ (80050b0 <DMA_SetConfig+0x394>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d03b      	beq.n	800504a <DMA_SetConfig+0x32e>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a37      	ldr	r2, [pc, #220]	@ (80050b4 <DMA_SetConfig+0x398>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d036      	beq.n	800504a <DMA_SetConfig+0x32e>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a35      	ldr	r2, [pc, #212]	@ (80050b8 <DMA_SetConfig+0x39c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d031      	beq.n	800504a <DMA_SetConfig+0x32e>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a34      	ldr	r2, [pc, #208]	@ (80050bc <DMA_SetConfig+0x3a0>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d02c      	beq.n	800504a <DMA_SetConfig+0x32e>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a32      	ldr	r2, [pc, #200]	@ (80050c0 <DMA_SetConfig+0x3a4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d027      	beq.n	800504a <DMA_SetConfig+0x32e>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a31      	ldr	r2, [pc, #196]	@ (80050c4 <DMA_SetConfig+0x3a8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d022      	beq.n	800504a <DMA_SetConfig+0x32e>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a2f      	ldr	r2, [pc, #188]	@ (80050c8 <DMA_SetConfig+0x3ac>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d01d      	beq.n	800504a <DMA_SetConfig+0x32e>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a2e      	ldr	r2, [pc, #184]	@ (80050cc <DMA_SetConfig+0x3b0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d018      	beq.n	800504a <DMA_SetConfig+0x32e>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a2c      	ldr	r2, [pc, #176]	@ (80050d0 <DMA_SetConfig+0x3b4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d013      	beq.n	800504a <DMA_SetConfig+0x32e>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a2b      	ldr	r2, [pc, #172]	@ (80050d4 <DMA_SetConfig+0x3b8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00e      	beq.n	800504a <DMA_SetConfig+0x32e>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a29      	ldr	r2, [pc, #164]	@ (80050d8 <DMA_SetConfig+0x3bc>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d009      	beq.n	800504a <DMA_SetConfig+0x32e>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a28      	ldr	r2, [pc, #160]	@ (80050dc <DMA_SetConfig+0x3c0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d004      	beq.n	800504a <DMA_SetConfig+0x32e>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a26      	ldr	r2, [pc, #152]	@ (80050e0 <DMA_SetConfig+0x3c4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d101      	bne.n	800504e <DMA_SetConfig+0x332>
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <DMA_SetConfig+0x334>
 800504e:	2300      	movs	r3, #0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d020      	beq.n	8005096 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005058:	f003 031f 	and.w	r3, r3, #31
 800505c:	2201      	movs	r2, #1
 800505e:	409a      	lsls	r2, r3
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	2b40      	cmp	r3, #64	@ 0x40
 8005072:	d108      	bne.n	8005086 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	60da      	str	r2, [r3, #12]
}
 8005084:	e007      	b.n	8005096 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	60da      	str	r2, [r3, #12]
}
 8005096:	bf00      	nop
 8005098:	371c      	adds	r7, #28
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	48022c08 	.word	0x48022c08
 80050a8:	48022c1c 	.word	0x48022c1c
 80050ac:	48022c30 	.word	0x48022c30
 80050b0:	48022c44 	.word	0x48022c44
 80050b4:	48022c58 	.word	0x48022c58
 80050b8:	48022c6c 	.word	0x48022c6c
 80050bc:	48022c80 	.word	0x48022c80
 80050c0:	48022c94 	.word	0x48022c94
 80050c4:	58025408 	.word	0x58025408
 80050c8:	5802541c 	.word	0x5802541c
 80050cc:	58025430 	.word	0x58025430
 80050d0:	58025444 	.word	0x58025444
 80050d4:	58025458 	.word	0x58025458
 80050d8:	5802546c 	.word	0x5802546c
 80050dc:	58025480 	.word	0x58025480
 80050e0:	58025494 	.word	0x58025494

080050e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a42      	ldr	r2, [pc, #264]	@ (80051fc <DMA_CalcBaseAndBitshift+0x118>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d04a      	beq.n	800518c <DMA_CalcBaseAndBitshift+0xa8>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a41      	ldr	r2, [pc, #260]	@ (8005200 <DMA_CalcBaseAndBitshift+0x11c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d045      	beq.n	800518c <DMA_CalcBaseAndBitshift+0xa8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a3f      	ldr	r2, [pc, #252]	@ (8005204 <DMA_CalcBaseAndBitshift+0x120>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d040      	beq.n	800518c <DMA_CalcBaseAndBitshift+0xa8>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a3e      	ldr	r2, [pc, #248]	@ (8005208 <DMA_CalcBaseAndBitshift+0x124>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d03b      	beq.n	800518c <DMA_CalcBaseAndBitshift+0xa8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a3c      	ldr	r2, [pc, #240]	@ (800520c <DMA_CalcBaseAndBitshift+0x128>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d036      	beq.n	800518c <DMA_CalcBaseAndBitshift+0xa8>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a3b      	ldr	r2, [pc, #236]	@ (8005210 <DMA_CalcBaseAndBitshift+0x12c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d031      	beq.n	800518c <DMA_CalcBaseAndBitshift+0xa8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a39      	ldr	r2, [pc, #228]	@ (8005214 <DMA_CalcBaseAndBitshift+0x130>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d02c      	beq.n	800518c <DMA_CalcBaseAndBitshift+0xa8>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a38      	ldr	r2, [pc, #224]	@ (8005218 <DMA_CalcBaseAndBitshift+0x134>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d027      	beq.n	800518c <DMA_CalcBaseAndBitshift+0xa8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a36      	ldr	r2, [pc, #216]	@ (800521c <DMA_CalcBaseAndBitshift+0x138>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d022      	beq.n	800518c <DMA_CalcBaseAndBitshift+0xa8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a35      	ldr	r2, [pc, #212]	@ (8005220 <DMA_CalcBaseAndBitshift+0x13c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d01d      	beq.n	800518c <DMA_CalcBaseAndBitshift+0xa8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a33      	ldr	r2, [pc, #204]	@ (8005224 <DMA_CalcBaseAndBitshift+0x140>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d018      	beq.n	800518c <DMA_CalcBaseAndBitshift+0xa8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a32      	ldr	r2, [pc, #200]	@ (8005228 <DMA_CalcBaseAndBitshift+0x144>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d013      	beq.n	800518c <DMA_CalcBaseAndBitshift+0xa8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a30      	ldr	r2, [pc, #192]	@ (800522c <DMA_CalcBaseAndBitshift+0x148>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00e      	beq.n	800518c <DMA_CalcBaseAndBitshift+0xa8>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a2f      	ldr	r2, [pc, #188]	@ (8005230 <DMA_CalcBaseAndBitshift+0x14c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d009      	beq.n	800518c <DMA_CalcBaseAndBitshift+0xa8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a2d      	ldr	r2, [pc, #180]	@ (8005234 <DMA_CalcBaseAndBitshift+0x150>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d004      	beq.n	800518c <DMA_CalcBaseAndBitshift+0xa8>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a2c      	ldr	r2, [pc, #176]	@ (8005238 <DMA_CalcBaseAndBitshift+0x154>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d101      	bne.n	8005190 <DMA_CalcBaseAndBitshift+0xac>
 800518c:	2301      	movs	r3, #1
 800518e:	e000      	b.n	8005192 <DMA_CalcBaseAndBitshift+0xae>
 8005190:	2300      	movs	r3, #0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d024      	beq.n	80051e0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	b2db      	uxtb	r3, r3
 800519c:	3b10      	subs	r3, #16
 800519e:	4a27      	ldr	r2, [pc, #156]	@ (800523c <DMA_CalcBaseAndBitshift+0x158>)
 80051a0:	fba2 2303 	umull	r2, r3, r2, r3
 80051a4:	091b      	lsrs	r3, r3, #4
 80051a6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	4a24      	ldr	r2, [pc, #144]	@ (8005240 <DMA_CalcBaseAndBitshift+0x15c>)
 80051b0:	5cd3      	ldrb	r3, [r2, r3]
 80051b2:	461a      	mov	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d908      	bls.n	80051d0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005244 <DMA_CalcBaseAndBitshift+0x160>)
 80051c6:	4013      	ands	r3, r2
 80051c8:	1d1a      	adds	r2, r3, #4
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80051ce:	e00d      	b.n	80051ec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005244 <DMA_CalcBaseAndBitshift+0x160>)
 80051d8:	4013      	ands	r3, r2
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80051de:	e005      	b.n	80051ec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	40020010 	.word	0x40020010
 8005200:	40020028 	.word	0x40020028
 8005204:	40020040 	.word	0x40020040
 8005208:	40020058 	.word	0x40020058
 800520c:	40020070 	.word	0x40020070
 8005210:	40020088 	.word	0x40020088
 8005214:	400200a0 	.word	0x400200a0
 8005218:	400200b8 	.word	0x400200b8
 800521c:	40020410 	.word	0x40020410
 8005220:	40020428 	.word	0x40020428
 8005224:	40020440 	.word	0x40020440
 8005228:	40020458 	.word	0x40020458
 800522c:	40020470 	.word	0x40020470
 8005230:	40020488 	.word	0x40020488
 8005234:	400204a0 	.word	0x400204a0
 8005238:	400204b8 	.word	0x400204b8
 800523c:	aaaaaaab 	.word	0xaaaaaaab
 8005240:	08012468 	.word	0x08012468
 8005244:	fffffc00 	.word	0xfffffc00

08005248 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005250:	2300      	movs	r3, #0
 8005252:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d120      	bne.n	800529e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005260:	2b03      	cmp	r3, #3
 8005262:	d858      	bhi.n	8005316 <DMA_CheckFifoParam+0xce>
 8005264:	a201      	add	r2, pc, #4	@ (adr r2, 800526c <DMA_CheckFifoParam+0x24>)
 8005266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526a:	bf00      	nop
 800526c:	0800527d 	.word	0x0800527d
 8005270:	0800528f 	.word	0x0800528f
 8005274:	0800527d 	.word	0x0800527d
 8005278:	08005317 	.word	0x08005317
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005280:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d048      	beq.n	800531a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800528c:	e045      	b.n	800531a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005292:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005296:	d142      	bne.n	800531e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800529c:	e03f      	b.n	800531e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052a6:	d123      	bne.n	80052f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d838      	bhi.n	8005322 <DMA_CheckFifoParam+0xda>
 80052b0:	a201      	add	r2, pc, #4	@ (adr r2, 80052b8 <DMA_CheckFifoParam+0x70>)
 80052b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b6:	bf00      	nop
 80052b8:	080052c9 	.word	0x080052c9
 80052bc:	080052cf 	.word	0x080052cf
 80052c0:	080052c9 	.word	0x080052c9
 80052c4:	080052e1 	.word	0x080052e1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	73fb      	strb	r3, [r7, #15]
        break;
 80052cc:	e030      	b.n	8005330 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d025      	beq.n	8005326 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052de:	e022      	b.n	8005326 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80052e8:	d11f      	bne.n	800532a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052ee:	e01c      	b.n	800532a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d902      	bls.n	80052fe <DMA_CheckFifoParam+0xb6>
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d003      	beq.n	8005304 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80052fc:	e018      	b.n	8005330 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	73fb      	strb	r3, [r7, #15]
        break;
 8005302:	e015      	b.n	8005330 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005308:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00e      	beq.n	800532e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	73fb      	strb	r3, [r7, #15]
    break;
 8005314:	e00b      	b.n	800532e <DMA_CheckFifoParam+0xe6>
        break;
 8005316:	bf00      	nop
 8005318:	e00a      	b.n	8005330 <DMA_CheckFifoParam+0xe8>
        break;
 800531a:	bf00      	nop
 800531c:	e008      	b.n	8005330 <DMA_CheckFifoParam+0xe8>
        break;
 800531e:	bf00      	nop
 8005320:	e006      	b.n	8005330 <DMA_CheckFifoParam+0xe8>
        break;
 8005322:	bf00      	nop
 8005324:	e004      	b.n	8005330 <DMA_CheckFifoParam+0xe8>
        break;
 8005326:	bf00      	nop
 8005328:	e002      	b.n	8005330 <DMA_CheckFifoParam+0xe8>
        break;
 800532a:	bf00      	nop
 800532c:	e000      	b.n	8005330 <DMA_CheckFifoParam+0xe8>
    break;
 800532e:	bf00      	nop
    }
  }

  return status;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop

08005340 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a38      	ldr	r2, [pc, #224]	@ (8005434 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d022      	beq.n	800539e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a36      	ldr	r2, [pc, #216]	@ (8005438 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d01d      	beq.n	800539e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a35      	ldr	r2, [pc, #212]	@ (800543c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d018      	beq.n	800539e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a33      	ldr	r2, [pc, #204]	@ (8005440 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d013      	beq.n	800539e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a32      	ldr	r2, [pc, #200]	@ (8005444 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00e      	beq.n	800539e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a30      	ldr	r2, [pc, #192]	@ (8005448 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d009      	beq.n	800539e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a2f      	ldr	r2, [pc, #188]	@ (800544c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d004      	beq.n	800539e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a2d      	ldr	r2, [pc, #180]	@ (8005450 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d101      	bne.n	80053a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80053a2:	2300      	movs	r3, #0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01a      	beq.n	80053de <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	3b08      	subs	r3, #8
 80053b0:	4a28      	ldr	r2, [pc, #160]	@ (8005454 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80053b2:	fba2 2303 	umull	r2, r3, r2, r3
 80053b6:	091b      	lsrs	r3, r3, #4
 80053b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4b26      	ldr	r3, [pc, #152]	@ (8005458 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	461a      	mov	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a24      	ldr	r2, [pc, #144]	@ (800545c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80053cc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	2201      	movs	r2, #1
 80053d6:	409a      	lsls	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80053dc:	e024      	b.n	8005428 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	3b10      	subs	r3, #16
 80053e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005460 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80053e8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ec:	091b      	lsrs	r3, r3, #4
 80053ee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005464 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d806      	bhi.n	8005406 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005468 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d902      	bls.n	8005406 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3308      	adds	r3, #8
 8005404:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4b18      	ldr	r3, [pc, #96]	@ (800546c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	461a      	mov	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a16      	ldr	r2, [pc, #88]	@ (8005470 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005418:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f003 031f 	and.w	r3, r3, #31
 8005420:	2201      	movs	r2, #1
 8005422:	409a      	lsls	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005428:	bf00      	nop
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	58025408 	.word	0x58025408
 8005438:	5802541c 	.word	0x5802541c
 800543c:	58025430 	.word	0x58025430
 8005440:	58025444 	.word	0x58025444
 8005444:	58025458 	.word	0x58025458
 8005448:	5802546c 	.word	0x5802546c
 800544c:	58025480 	.word	0x58025480
 8005450:	58025494 	.word	0x58025494
 8005454:	cccccccd 	.word	0xcccccccd
 8005458:	16009600 	.word	0x16009600
 800545c:	58025880 	.word	0x58025880
 8005460:	aaaaaaab 	.word	0xaaaaaaab
 8005464:	400204b8 	.word	0x400204b8
 8005468:	4002040f 	.word	0x4002040f
 800546c:	10008200 	.word	0x10008200
 8005470:	40020880 	.word	0x40020880

08005474 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d04a      	beq.n	8005520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b08      	cmp	r3, #8
 800548e:	d847      	bhi.n	8005520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a25      	ldr	r2, [pc, #148]	@ (800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d022      	beq.n	80054e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a24      	ldr	r2, [pc, #144]	@ (8005530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d01d      	beq.n	80054e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a22      	ldr	r2, [pc, #136]	@ (8005534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d018      	beq.n	80054e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a21      	ldr	r2, [pc, #132]	@ (8005538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d013      	beq.n	80054e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a1f      	ldr	r2, [pc, #124]	@ (800553c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00e      	beq.n	80054e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d009      	beq.n	80054e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d004      	beq.n	80054e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1b      	ldr	r2, [pc, #108]	@ (8005548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d101      	bne.n	80054e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e000      	b.n	80054e6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80054e4:	2300      	movs	r3, #0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4b17      	ldr	r3, [pc, #92]	@ (800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	461a      	mov	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a15      	ldr	r2, [pc, #84]	@ (8005550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80054fc:	671a      	str	r2, [r3, #112]	@ 0x70
 80054fe:	e009      	b.n	8005514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4b14      	ldr	r3, [pc, #80]	@ (8005554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	461a      	mov	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a11      	ldr	r2, [pc, #68]	@ (8005558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005512:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3b01      	subs	r3, #1
 8005518:	2201      	movs	r2, #1
 800551a:	409a      	lsls	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005520:	bf00      	nop
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	58025408 	.word	0x58025408
 8005530:	5802541c 	.word	0x5802541c
 8005534:	58025430 	.word	0x58025430
 8005538:	58025444 	.word	0x58025444
 800553c:	58025458 	.word	0x58025458
 8005540:	5802546c 	.word	0x5802546c
 8005544:	58025480 	.word	0x58025480
 8005548:	58025494 	.word	0x58025494
 800554c:	1600963f 	.word	0x1600963f
 8005550:	58025940 	.word	0x58025940
 8005554:	1000823f 	.word	0x1000823f
 8005558:	40020940 	.word	0x40020940

0800555c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e04f      	b.n	800560e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fc fe40 	bl	8002208 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	4b20      	ldr	r3, [pc, #128]	@ (8005618 <HAL_DMA2D_Init+0xbc>)
 8005598:	4013      	ands	r3, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6851      	ldr	r1, [r2, #4]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	69d2      	ldr	r2, [r2, #28]
 80055a2:	4311      	orrs	r1, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6812      	ldr	r2, [r2, #0]
 80055a8:	430b      	orrs	r3, r1
 80055aa:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055b2:	4b1a      	ldr	r3, [pc, #104]	@ (800561c <HAL_DMA2D_Init+0xc0>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6891      	ldr	r1, [r2, #8]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6992      	ldr	r2, [r2, #24]
 80055be:	4311      	orrs	r1, r2
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6812      	ldr	r2, [r2, #0]
 80055c4:	430b      	orrs	r3, r1
 80055c6:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055ce:	4b14      	ldr	r3, [pc, #80]	@ (8005620 <HAL_DMA2D_Init+0xc4>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	68d1      	ldr	r1, [r2, #12]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6812      	ldr	r2, [r2, #0]
 80055da:	430b      	orrs	r3, r1
 80055dc:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055e4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	051a      	lsls	r2, r3, #20
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	055b      	lsls	r3, r3, #21
 80055f4:	431a      	orrs	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	fff8ffbf 	.word	0xfff8ffbf
 800561c:	fffffef8 	.word	0xfffffef8
 8005620:	ffff0000 	.word	0xffff0000

08005624 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af02      	add	r7, sp, #8
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <HAL_DMA2D_Start+0x1c>
 800563c:	2302      	movs	r3, #2
 800563e:	e018      	b.n	8005672 <HAL_DMA2D_Start+0x4e>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	68b9      	ldr	r1, [r7, #8]
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f9a4 	bl	80059a8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b086      	sub	sp, #24
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d056      	beq.n	8005744 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005696:	f7fd fa03 	bl	8002aa0 <HAL_GetTick>
 800569a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800569c:	e04b      	b.n	8005736 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d023      	beq.n	80056f8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d005      	beq.n	80056c6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056be:	f043 0202 	orr.w	r2, r3, #2
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d005      	beq.n	80056dc <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056d4:	f043 0201 	orr.w	r2, r3, #1
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2221      	movs	r2, #33	@ 0x21
 80056e2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2204      	movs	r2, #4
 80056e8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e0a5      	b.n	8005844 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fe:	d01a      	beq.n	8005736 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005700:	f7fd f9ce 	bl	8002aa0 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d302      	bcc.n	8005716 <HAL_DMA2D_PollForTransfer+0x9c>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10f      	bne.n	8005736 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800571a:	f043 0220 	orr.w	r2, r3, #32
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2203      	movs	r2, #3
 8005726:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e086      	b.n	8005844 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0ac      	beq.n	800569e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d061      	beq.n	800582a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005766:	f7fd f99b 	bl	8002aa0 <HAL_GetTick>
 800576a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800576c:	e056      	b.n	800581c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800577c:	2b00      	cmp	r3, #0
 800577e:	d02e      	beq.n	80057de <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 0308 	and.w	r3, r3, #8
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800578e:	f043 0204 	orr.w	r2, r3, #4
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057a4:	f043 0202 	orr.w	r2, r3, #2
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d005      	beq.n	80057c2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057ba:	f043 0201 	orr.w	r2, r3, #1
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2229      	movs	r2, #41	@ 0x29
 80057c8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2204      	movs	r2, #4
 80057ce:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e032      	b.n	8005844 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e4:	d01a      	beq.n	800581c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057e6:	f7fd f95b 	bl	8002aa0 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d302      	bcc.n	80057fc <HAL_DMA2D_PollForTransfer+0x182>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10f      	bne.n	800581c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005800:	f043 0220 	orr.w	r2, r3, #32
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2203      	movs	r2, #3
 800580c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e013      	b.n	8005844 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f003 0310 	and.w	r3, r3, #16
 8005826:	2b00      	cmp	r3, #0
 8005828:	d0a1      	beq.n	800576e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2212      	movs	r2, #18
 8005830:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_DMA2D_ConfigLayer+0x24>
 800586c:	2302      	movs	r3, #2
 800586e:	e092      	b.n	8005996 <HAL_DMA2D_ConfigLayer+0x14a>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	4613      	mov	r3, r2
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	1a9b      	subs	r3, r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	3328      	adds	r3, #40	@ 0x28
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	4413      	add	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	041b      	lsls	r3, r3, #16
 800589c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80058a4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80058ac:	4313      	orrs	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80058b0:	4b3c      	ldr	r3, [pc, #240]	@ (80059a4 <HAL_DMA2D_ConfigLayer+0x158>)
 80058b2:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	2b0a      	cmp	r3, #10
 80058ba:	d003      	beq.n	80058c4 <HAL_DMA2D_ConfigLayer+0x78>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	2b09      	cmp	r3, #9
 80058c2:	d107      	bne.n	80058d4 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]
 80058d2:	e005      	b.n	80058e0 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	061b      	lsls	r3, r3, #24
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d120      	bne.n	8005928 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	43db      	mvns	r3, r3
 80058f0:	ea02 0103 	and.w	r1, r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	6812      	ldr	r2, [r2, #0]
 8005906:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b0a      	cmp	r3, #10
 800590e:	d003      	beq.n	8005918 <HAL_DMA2D_ConfigLayer+0xcc>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b09      	cmp	r3, #9
 8005916:	d135      	bne.n	8005984 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005924:	629a      	str	r2, [r3, #40]	@ 0x28
 8005926:	e02d      	b.n	8005984 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b0b      	cmp	r3, #11
 800592e:	d109      	bne.n	8005944 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	049b      	lsls	r3, r3, #18
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8005942:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69da      	ldr	r2, [r3, #28]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	43db      	mvns	r3, r3
 800594e:	ea02 0103 	and.w	r1, r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	430a      	orrs	r2, r1
 800595a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b0a      	cmp	r3, #10
 800596c:	d003      	beq.n	8005976 <HAL_DMA2D_ConfigLayer+0x12a>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b09      	cmp	r3, #9
 8005974:	d106      	bne.n	8005984 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005982:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	ff33000f 	.word	0xff33000f

080059a8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b08b      	sub	sp, #44	@ 0x2c
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059bc:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	041a      	lsls	r2, r3, #16
 80059c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c6:	431a      	orrs	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059e0:	d174      	bne.n	8005acc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80059e8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80059f0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80059f8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d108      	bne.n	8005a1a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a18:	e053      	b.n	8005ac2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d106      	bne.n	8005a30 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a2e:	e048      	b.n	8005ac2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d111      	bne.n	8005a5c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	0cdb      	lsrs	r3, r3, #19
 8005a3c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	0a9b      	lsrs	r3, r3, #10
 8005a42:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	08db      	lsrs	r3, r3, #3
 8005a48:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	02db      	lsls	r3, r3, #11
 8005a52:	4313      	orrs	r3, r2
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a5a:	e032      	b.n	8005ac2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d117      	bne.n	8005a94 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	0fdb      	lsrs	r3, r3, #31
 8005a68:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	0cdb      	lsrs	r3, r3, #19
 8005a6e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	0adb      	lsrs	r3, r3, #11
 8005a74:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	08db      	lsrs	r3, r3, #3
 8005a7a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	029b      	lsls	r3, r3, #10
 8005a84:	431a      	orrs	r2, r3
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	03db      	lsls	r3, r3, #15
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a92:	e016      	b.n	8005ac2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	0f1b      	lsrs	r3, r3, #28
 8005a98:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	0d1b      	lsrs	r3, r3, #20
 8005a9e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	0b1b      	lsrs	r3, r3, #12
 8005aa4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	091b      	lsrs	r3, r3, #4
 8005aaa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	011a      	lsls	r2, r3, #4
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	031b      	lsls	r3, r3, #12
 8005aba:	4313      	orrs	r3, r2
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac8:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005aca:	e00d      	b.n	8005ae8 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ad4:	d104      	bne.n	8005ae0 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	615a      	str	r2, [r3, #20]
}
 8005ade:	e003      	b.n	8005ae8 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	60da      	str	r2, [r3, #12]
}
 8005ae8:	bf00      	nop
 8005aea:	372c      	adds	r7, #44	@ 0x2c
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b089      	sub	sp, #36	@ 0x24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b02:	4b89      	ldr	r3, [pc, #548]	@ (8005d28 <HAL_GPIO_Init+0x234>)
 8005b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b06:	e194      	b.n	8005e32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	fa01 f303 	lsl.w	r3, r1, r3
 8005b14:	4013      	ands	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 8186 	beq.w	8005e2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f003 0303 	and.w	r3, r3, #3
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d005      	beq.n	8005b38 <HAL_GPIO_Init+0x44>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f003 0303 	and.w	r3, r3, #3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d130      	bne.n	8005b9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	2203      	movs	r2, #3
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b6e:	2201      	movs	r2, #1
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	43db      	mvns	r3, r3
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	091b      	lsrs	r3, r3, #4
 8005b84:	f003 0201 	and.w	r2, r3, #1
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f003 0303 	and.w	r3, r3, #3
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d017      	beq.n	8005bd6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	2203      	movs	r2, #3
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d123      	bne.n	8005c2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	08da      	lsrs	r2, r3, #3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3208      	adds	r2, #8
 8005bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	220f      	movs	r2, #15
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	43db      	mvns	r3, r3
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	4013      	ands	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	691a      	ldr	r2, [r3, #16]
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	f003 0307 	and.w	r3, r3, #7
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	08da      	lsrs	r2, r3, #3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3208      	adds	r2, #8
 8005c24:	69b9      	ldr	r1, [r7, #24]
 8005c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	2203      	movs	r2, #3
 8005c36:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3a:	43db      	mvns	r3, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f003 0203 	and.w	r2, r3, #3
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 80e0 	beq.w	8005e2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8005d2c <HAL_GPIO_Init+0x238>)
 8005c6e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005c72:	4a2e      	ldr	r2, [pc, #184]	@ (8005d2c <HAL_GPIO_Init+0x238>)
 8005c74:	f043 0302 	orr.w	r3, r3, #2
 8005c78:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8005c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8005d2c <HAL_GPIO_Init+0x238>)
 8005c7e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c8a:	4a29      	ldr	r2, [pc, #164]	@ (8005d30 <HAL_GPIO_Init+0x23c>)
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	089b      	lsrs	r3, r3, #2
 8005c90:	3302      	adds	r3, #2
 8005c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	220f      	movs	r2, #15
 8005ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4013      	ands	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a20      	ldr	r2, [pc, #128]	@ (8005d34 <HAL_GPIO_Init+0x240>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d052      	beq.n	8005d5c <HAL_GPIO_Init+0x268>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8005d38 <HAL_GPIO_Init+0x244>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d031      	beq.n	8005d22 <HAL_GPIO_Init+0x22e>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8005d3c <HAL_GPIO_Init+0x248>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d02b      	beq.n	8005d1e <HAL_GPIO_Init+0x22a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d40 <HAL_GPIO_Init+0x24c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d025      	beq.n	8005d1a <HAL_GPIO_Init+0x226>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8005d44 <HAL_GPIO_Init+0x250>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d01f      	beq.n	8005d16 <HAL_GPIO_Init+0x222>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8005d48 <HAL_GPIO_Init+0x254>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d019      	beq.n	8005d12 <HAL_GPIO_Init+0x21e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8005d4c <HAL_GPIO_Init+0x258>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d013      	beq.n	8005d0e <HAL_GPIO_Init+0x21a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a19      	ldr	r2, [pc, #100]	@ (8005d50 <HAL_GPIO_Init+0x25c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00d      	beq.n	8005d0a <HAL_GPIO_Init+0x216>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a18      	ldr	r2, [pc, #96]	@ (8005d54 <HAL_GPIO_Init+0x260>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d007      	beq.n	8005d06 <HAL_GPIO_Init+0x212>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a17      	ldr	r2, [pc, #92]	@ (8005d58 <HAL_GPIO_Init+0x264>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d101      	bne.n	8005d02 <HAL_GPIO_Init+0x20e>
 8005cfe:	2309      	movs	r3, #9
 8005d00:	e02d      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d02:	230a      	movs	r3, #10
 8005d04:	e02b      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d06:	2308      	movs	r3, #8
 8005d08:	e029      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d0a:	2307      	movs	r3, #7
 8005d0c:	e027      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d0e:	2306      	movs	r3, #6
 8005d10:	e025      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d12:	2305      	movs	r3, #5
 8005d14:	e023      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d16:	2304      	movs	r3, #4
 8005d18:	e021      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e01f      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d1e:	2302      	movs	r3, #2
 8005d20:	e01d      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e01b      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d26:	bf00      	nop
 8005d28:	58000080 	.word	0x58000080
 8005d2c:	58024400 	.word	0x58024400
 8005d30:	58000400 	.word	0x58000400
 8005d34:	58020000 	.word	0x58020000
 8005d38:	58020400 	.word	0x58020400
 8005d3c:	58020800 	.word	0x58020800
 8005d40:	58020c00 	.word	0x58020c00
 8005d44:	58021000 	.word	0x58021000
 8005d48:	58021400 	.word	0x58021400
 8005d4c:	58021800 	.word	0x58021800
 8005d50:	58021c00 	.word	0x58021c00
 8005d54:	58022000 	.word	0x58022000
 8005d58:	58022400 	.word	0x58022400
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	69fa      	ldr	r2, [r7, #28]
 8005d60:	f002 0203 	and.w	r2, r2, #3
 8005d64:	0092      	lsls	r2, r2, #2
 8005d66:	4093      	lsls	r3, r2
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d6e:	4938      	ldr	r1, [pc, #224]	@ (8005e50 <HAL_GPIO_Init+0x35c>)
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	089b      	lsrs	r3, r3, #2
 8005d74:	3302      	adds	r3, #2
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	43db      	mvns	r3, r3
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005da2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	43db      	mvns	r3, r3
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	4013      	ands	r3, r2
 8005dba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005dd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	43db      	mvns	r3, r3
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	4013      	ands	r3, r2
 8005de6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f47f ae63 	bne.w	8005b08 <HAL_GPIO_Init+0x14>
  }
}
 8005e42:	bf00      	nop
 8005e44:	bf00      	nop
 8005e46:	3724      	adds	r7, #36	@ 0x24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	58000400 	.word	0x58000400

08005e54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	887b      	ldrh	r3, [r7, #2]
 8005e66:	4013      	ands	r3, r2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	73fb      	strb	r3, [r7, #15]
 8005e70:	e001      	b.n	8005e76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e72:	2300      	movs	r3, #0
 8005e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	807b      	strh	r3, [r7, #2]
 8005e90:	4613      	mov	r3, r2
 8005e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e94:	787b      	ldrb	r3, [r7, #1]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e9a:	887a      	ldrh	r2, [r7, #2]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ea0:	e003      	b.n	8005eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ea2:	887b      	ldrh	r3, [r7, #2]
 8005ea4:	041a      	lsls	r2, r3, #16
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	619a      	str	r2, [r3, #24]
}
 8005eaa:	bf00      	nop
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ec4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005ec8:	88fb      	ldrh	r3, [r7, #6]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d008      	beq.n	8005ee2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ed0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ed4:	88fb      	ldrh	r3, [r7, #6]
 8005ed6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005eda:	88fb      	ldrh	r3, [r7, #6]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fc f933 	bl	8002148 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005ee2:	bf00      	nop
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e070      	b.n	8005fe0 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fc f99a 	bl	800224c <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0201 	orr.w	r2, r2, #1
 8005f2e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0201 	bic.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8005f4e:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f6e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8005f7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a19      	ldr	r2, [pc, #100]	@ (8005fe8 <HAL_JPEG_Init+0xfc>)
 8005f84:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a18      	ldr	r2, [pc, #96]	@ (8005fec <HAL_JPEG_Init+0x100>)
 8005f8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fcdb 	bl	8006954 <JPEG_Set_HuffEnc_Mem>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d004      	beq.n	8005fae <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e018      	b.n	8005fe0 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fbc:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	08012650 	.word	0x08012650
 8005fec:	08012690 	.word	0x08012690

08005ff0 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <HAL_JPEG_GetInfo+0x16>
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e083      	b.n	8006112 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f003 0303 	and.w	r3, r3, #3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d103      	bne.n	8006020 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	2210      	movs	r2, #16
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	e017      	b.n	8006050 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d103      	bne.n	8006036 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2200      	movs	r2, #0
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	e00c      	b.n	8006050 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f003 0303 	and.w	r3, r3, #3
 8006040:	2b03      	cmp	r3, #3
 8006042:	d103      	bne.n	800604c <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	2230      	movs	r2, #48	@ 0x30
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	e001      	b.n	8006050 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e060      	b.n	8006112 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	0c1b      	lsrs	r3, r3, #16
 8006058:	b29a      	uxth	r2, r3
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	0c1b      	lsrs	r3, r3, #16
 8006066:	b29a      	uxth	r2, r3
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b10      	cmp	r3, #16
 8006072:	d003      	beq.n	800607c <HAL_JPEG_GetInfo+0x8c>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b30      	cmp	r3, #48	@ 0x30
 800607a:	d140      	bne.n	80060fe <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	091b      	lsrs	r3, r3, #4
 8006084:	f003 030f 	and.w	r3, r3, #15
 8006088:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	091b      	lsrs	r3, r3, #4
 8006092:	f003 030f 	and.w	r3, r3, #15
 8006096:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	091b      	lsrs	r3, r3, #4
 80060a0:	f003 030f 	and.w	r3, r3, #15
 80060a4:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d109      	bne.n	80060c0 <HAL_JPEG_GetInfo+0xd0>
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d106      	bne.n	80060c0 <HAL_JPEG_GetInfo+0xd0>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d103      	bne.n	80060c0 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2202      	movs	r2, #2
 80060bc:	605a      	str	r2, [r3, #4]
 80060be:	e01d      	b.n	80060fc <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d109      	bne.n	80060da <HAL_JPEG_GetInfo+0xea>
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d106      	bne.n	80060da <HAL_JPEG_GetInfo+0xea>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d103      	bne.n	80060da <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2200      	movs	r2, #0
 80060d6:	605a      	str	r2, [r3, #4]
 80060d8:	e010      	b.n	80060fc <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d109      	bne.n	80060f4 <HAL_JPEG_GetInfo+0x104>
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <HAL_JPEG_GetInfo+0x104>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d103      	bne.n	80060f4 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	2201      	movs	r2, #1
 80060f0:	605a      	str	r2, [r3, #4]
 80060f2:	e003      	b.n	80060fc <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2200      	movs	r2, #0
 80060f8:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80060fa:	e003      	b.n	8006104 <HAL_JPEG_GetInfo+0x114>
 80060fc:	e002      	b.n	8006104 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2200      	movs	r2, #0
 8006102:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f001 fd17 	bl	8007b38 <JPEG_GetQuality>
 800610a:	4602      	mov	r2, r0
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	607a      	str	r2, [r7, #4]
 8006126:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d005      	beq.n	800613a <HAL_JPEG_Decode_DMA+0x20>
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <HAL_JPEG_Decode_DMA+0x20>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e04c      	b.n	80061d8 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_JPEG_Decode_DMA+0x32>
 8006148:	2302      	movs	r3, #2
 800614a:	e045      	b.n	80061d8 <HAL_JPEG_Decode_DMA+0xbe>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b01      	cmp	r3, #1
 800615e:	d134      	bne.n	80061ca <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2204      	movs	r2, #4
 8006164:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800616c:	f023 020f 	bic.w	r2, r3, #15
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006178:	f043 020e 	orr.w	r2, r3, #14
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 fe57 	bl	8006e58 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f001 f978 	bl	80074a0 <JPEG_DMA_StartProcess>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00f      	beq.n	80061d6 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2206      	movs	r2, #6
 80061ba:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e006      	b.n	80061d8 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 80061d2:	2302      	movs	r3, #2
 80061d4:	e000      	b.n	80061d8 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f2:	f003 030c 	and.w	r3, r3, #12
 80061f6:	2b0c      	cmp	r3, #12
 80061f8:	d116      	bne.n	8006228 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006208:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d033      	beq.n	8006282 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	655a      	str	r2, [r3, #84]	@ 0x54
 8006226:	e02c      	b.n	8006282 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800622c:	f003 030c 	and.w	r3, r3, #12
 8006230:	2b08      	cmp	r3, #8
 8006232:	d126      	bne.n	8006282 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d009      	beq.n	8006252 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006242:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f043 0306 	orr.w	r3, r3, #6
 8006250:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d009      	beq.n	8006270 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006260:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800626e:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	43da      	mvns	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	400a      	ands	r2, r1
 8006280:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80062a8:	bf00      	nop
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80062cc:	bf00      	nop
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	3b03      	subs	r3, #3
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d813      	bhi.n	800632a <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006306:	f003 030c 	and.w	r3, r3, #12
 800630a:	2b08      	cmp	r3, #8
 800630c:	d103      	bne.n	8006316 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fe16 	bl	8006f40 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8006314:	e00b      	b.n	800632e <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800631a:	f003 030c 	and.w	r3, r3, #12
 800631e:	2b0c      	cmp	r3, #12
 8006320:	d105      	bne.n	800632e <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 f956 	bl	80075d4 <JPEG_DMA_ContinueProcess>
      break;
 8006328:	e001      	b.n	800632e <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 800632a:	bf00      	nop
 800632c:	e000      	b.n	8006330 <HAL_JPEG_IRQHandler+0x44>
      break;
 800632e:	bf00      	nop
  }
}
 8006330:	bf00      	nop
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8006338:	b480      	push	{r7}
 800633a:	b08b      	sub	sp, #44	@ 0x2c
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8006346:	2300      	movs	r3, #0
 8006348:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800634a:	2300      	movs	r3, #0
 800634c:	61fb      	str	r3, [r7, #28]
 800634e:	e020      	b.n	8006392 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	4413      	add	r3, r2
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 800635a:	6a3a      	ldr	r2, [r7, #32]
 800635c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635e:	4413      	add	r3, r2
 8006360:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006364:	d90f      	bls.n	8006386 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e055      	b.n	8006416 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	b2da      	uxtb	r2, r3
 800636e:	68b9      	ldr	r1, [r7, #8]
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	440b      	add	r3, r1
 8006374:	3201      	adds	r2, #1
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	701a      	strb	r2, [r3, #0]
      p++;
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	3301      	adds	r3, #1
 800637e:	623b      	str	r3, [r7, #32]
      i--;
 8006380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006382:	3b01      	subs	r3, #1
 8006384:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8006386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1ee      	bne.n	800636a <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	3301      	adds	r3, #1
 8006390:	61fb      	str	r3, [r7, #28]
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	2b0f      	cmp	r3, #15
 8006396:	d9db      	bls.n	8006350 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	4413      	add	r3, r2
 800639e:	2200      	movs	r2, #0
 80063a0:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	6a3a      	ldr	r2, [r7, #32]
 80063a6:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80063a8:	2300      	movs	r3, #0
 80063aa:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	617b      	str	r3, [r7, #20]
  p = 0;
 80063b2:	2300      	movs	r3, #0
 80063b4:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80063b6:	e027      	b.n	8006408 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	4413      	add	r3, r2
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	601a      	str	r2, [r3, #0]
      p++;
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	3301      	adds	r3, #1
 80063c8:	623b      	str	r3, [r7, #32]
      code++;
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	3301      	adds	r3, #1
 80063ce:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	4413      	add	r3, r2
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	4293      	cmp	r3, r2
 80063de:	d0eb      	beq.n	80063b8 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2b1f      	cmp	r3, #31
 80063e4:	d901      	bls.n	80063ea <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e015      	b.n	8006416 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80063ea:	2201      	movs	r2, #1
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	fa02 f303 	lsl.w	r3, r2, r3
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d301      	bcc.n	80063fc <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e00c      	b.n	8006416 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	61bb      	str	r3, [r7, #24]
    si++;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	3301      	adds	r3, #1
 8006406:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	4413      	add	r3, r2
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1dd      	bne.n	80063d0 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	372c      	adds	r7, #44	@ 0x2c
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8006428:	af00      	add	r7, sp, #0
 800642a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800642e:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8006432:	6018      	str	r0, [r3, #0]
 8006434:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8006438:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800643c:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800643e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8006442:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	f107 0308 	add.w	r3, r7, #8
 800644c:	f107 020c 	add.w	r2, r7, #12
 8006450:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8006454:	f7ff ff70 	bl	8006338 <JPEG_Bits_To_SizeCodes>
 8006458:	4603      	mov	r3, r0
 800645a:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 800645e:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8006466:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800646a:	e075      	b.n	8006558 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800646c:	2300      	movs	r3, #0
 800646e:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8006472:	e067      	b.n	8006544 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8006474:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8006478:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8006482:	4413      	add	r3, r2
 8006484:	3310      	adds	r3, #16
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 800648c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8006490:	2b00      	cmp	r3, #0
 8006492:	d103      	bne.n	800649c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8006494:	23a0      	movs	r3, #160	@ 0xa0
 8006496:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800649a:	e021      	b.n	80064e0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800649c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80064a0:	2bf0      	cmp	r3, #240	@ 0xf0
 80064a2:	d103      	bne.n	80064ac <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 80064a4:	23a1      	movs	r3, #161	@ 0xa1
 80064a6:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80064aa:	e019      	b.n	80064e0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80064ac:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80064b0:	091b      	lsrs	r3, r3, #4
 80064b2:	f003 030f 	and.w	r3, r3, #15
 80064b6:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 80064ba:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80064be:	f003 030f 	and.w	r3, r3, #15
 80064c2:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 80064c6:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 80064ca:	4613      	mov	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	461a      	mov	r2, r3
 80064d4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80064d8:	4413      	add	r3, r2
 80064da:	3b01      	subs	r3, #1
 80064dc:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80064e0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80064e4:	2ba1      	cmp	r3, #161	@ 0xa1
 80064e6:	d901      	bls.n	80064ec <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80064e8:	2301      	movs	r3, #1
 80064ea:	e035      	b.n	8006558 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80064ec:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80064f0:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80064f4:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 80064f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064fc:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8006500:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8006504:	6819      	ldr	r1, [r3, #0]
 8006506:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800650a:	3328      	adds	r3, #40	@ 0x28
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	440b      	add	r3, r1
 8006510:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8006512:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8006516:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800651a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800651e:	4413      	add	r3, r2
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	3b01      	subs	r3, #1
 8006524:	b2d9      	uxtb	r1, r3
 8006526:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800652a:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8006534:	4413      	add	r3, r2
 8006536:	460a      	mov	r2, r1
 8006538:	701a      	strb	r2, [r3, #0]
      k++;
 800653a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800653e:	3301      	adds	r3, #1
 8006540:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8006544:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8006548:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8006552:	429a      	cmp	r2, r3
 8006554:	d38e      	bcc.n	8006474 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8006568:	af00      	add	r7, sp, #0
 800656a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800656e:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8006572:	6018      	str	r0, [r3, #0]
 8006574:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8006578:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800657c:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800657e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8006582:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8006586:	6818      	ldr	r0, [r3, #0]
 8006588:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800658c:	f107 0208 	add.w	r2, r7, #8
 8006590:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8006594:	f7ff fed0 	bl	8006338 <JPEG_Bits_To_SizeCodes>
 8006598:	4603      	mov	r3, r0
 800659a:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 800659e:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80065a6:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 80065aa:	e048      	b.n	800663e <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 80065ac:	2300      	movs	r3, #0
 80065ae:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 80065b2:	e03d      	b.n	8006630 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 80065b4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80065b8:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80065c2:	4413      	add	r3, r2
 80065c4:	3310      	adds	r3, #16
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 80065cc:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80065d0:	2b0b      	cmp	r3, #11
 80065d2:	d901      	bls.n	80065d8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80065d4:	2301      	movs	r3, #1
 80065d6:	e032      	b.n	800663e <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80065d8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80065dc:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 80065e0:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 80065e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065e8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80065ec:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80065f0:	6819      	ldr	r1, [r3, #0]
 80065f2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80065f6:	3302      	adds	r3, #2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	440b      	add	r3, r1
 80065fc:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80065fe:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8006602:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8006606:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800660a:	4413      	add	r3, r2
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	3b01      	subs	r3, #1
 8006610:	b2d9      	uxtb	r1, r3
 8006612:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8006616:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8006620:	4413      	add	r3, r2
 8006622:	460a      	mov	r2, r1
 8006624:	701a      	strb	r2, [r3, #0]
      k++;
 8006626:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800662a:	3301      	adds	r3, #1
 800662c:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8006630:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8006634:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8006638:	429a      	cmp	r2, r3
 800663a:	d3bb      	bcc.n	80065b4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b09a      	sub	sp, #104	@ 0x68
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	429a      	cmp	r2, r3
 8006660:	d106      	bne.n	8006670 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800666a:	3318      	adds	r3, #24
 800666c:	663b      	str	r3, [r7, #96]	@ 0x60
 800666e:	e00f      	b.n	8006690 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	429a      	cmp	r2, r3
 800667c:	d106      	bne.n	800668c <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8006686:	3318      	adds	r3, #24
 8006688:	663b      	str	r3, [r7, #96]	@ 0x60
 800668a:	e001      	b.n	8006690 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e059      	b.n	8006744 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d055      	beq.n	8006742 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8006696:	f107 0314 	add.w	r3, r7, #20
 800669a:	4619      	mov	r1, r3
 800669c:	68b8      	ldr	r0, [r7, #8]
 800669e:	f7ff ff60 	bl	8006562 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 80066a2:	4603      	mov	r3, r0
 80066a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 80066a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 80066b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80066b4:	e046      	b.n	8006744 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 80066b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066b8:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 80066ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066bc:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80066c0:	601a      	str	r2, [r3, #0]
    addressDef++;
 80066c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066c4:	3304      	adds	r3, #4
 80066c6:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 80066c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066ca:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80066ce:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 80066d0:	230c      	movs	r3, #12
 80066d2:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 80066d4:	e032      	b.n	800673c <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 80066d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066d8:	3b01      	subs	r3, #1
 80066da:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 80066dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066de:	3b04      	subs	r3, #4
 80066e0:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80066e2:	f107 0214 	add.w	r2, r7, #20
 80066e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066e8:	4413      	add	r3, r2
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80066f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066f4:	3302      	adds	r3, #2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	3368      	adds	r3, #104	@ 0x68
 80066fa:	443b      	add	r3, r7
 80066fc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8006700:	b2db      	uxtb	r3, r3
 8006702:	4313      	orrs	r3, r2
 8006704:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8006706:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006708:	3b01      	subs	r3, #1
 800670a:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800670c:	f107 0214 	add.w	r2, r7, #20
 8006710:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006712:	4413      	add	r3, r2
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800671c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800671e:	3302      	adds	r3, #2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	3368      	adds	r3, #104	@ 0x68
 8006724:	443b      	add	r3, r7
 8006726:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800672a:	b2db      	uxtb	r3, r3
 800672c:	4313      	orrs	r3, r2
 800672e:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8006730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006732:	041a      	lsls	r2, r3, #16
 8006734:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006736:	431a      	orrs	r2, r3
 8006738:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800673a:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800673c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800673e:	2b01      	cmp	r3, #1
 8006740:	d8c9      	bhi.n	80066d6 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3768      	adds	r7, #104	@ 0x68
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8006752:	af00      	add	r7, sp, #0
 8006754:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006758:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800675c:	6018      	str	r0, [r3, #0]
 800675e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006762:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8006766:	6019      	str	r1, [r3, #0]
 8006768:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800676c:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8006770:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8006772:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006776:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006782:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8006786:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d10c      	bne.n	80067aa <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8006790:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006794:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067a0:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80067a4:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 80067a8:	e01d      	b.n	80067e6 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80067aa:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80067ae:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 80067ba:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80067be:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 80067c2:	6812      	ldr	r2, [r2, #0]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d10c      	bne.n	80067e2 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80067c8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80067cc:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 80067d8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80067dc:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 80067e0:	e001      	b.n	80067e6 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e0a8      	b.n	8006938 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 80067e6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80067ea:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 80a0 	beq.w	8006936 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 80067f6:	f107 0214 	add.w	r2, r7, #20
 80067fa:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80067fe:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8006802:	4611      	mov	r1, r2
 8006804:	6818      	ldr	r0, [r3, #0]
 8006806:	f7ff fe0c 	bl	8006422 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800680a:	4603      	mov	r3, r0
 800680c:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8006810:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8006818:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800681c:	e08c      	b.n	8006938 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800681e:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8006822:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8006826:	2300      	movs	r3, #0
 8006828:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800682c:	e00e      	b.n	800684c <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800682e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006832:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8006836:	601a      	str	r2, [r3, #0]
      addressDef++;
 8006838:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800683c:	3304      	adds	r3, #4
 800683e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8006842:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8006846:	3301      	adds	r3, #1
 8006848:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800684c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8006850:	2b02      	cmp	r3, #2
 8006852:	d9ec      	bls.n	800682e <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8006854:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006858:	4a3a      	ldr	r2, [pc, #232]	@ (8006944 <JPEG_Set_HuffAC_Mem+0x1f8>)
 800685a:	601a      	str	r2, [r3, #0]
    addressDef++;
 800685c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006860:	3304      	adds	r3, #4
 8006862:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8006866:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800686a:	4a37      	ldr	r2, [pc, #220]	@ (8006948 <JPEG_Set_HuffAC_Mem+0x1fc>)
 800686c:	601a      	str	r2, [r3, #0]
    addressDef++;
 800686e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006872:	3304      	adds	r3, #4
 8006874:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8006878:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800687c:	4a33      	ldr	r2, [pc, #204]	@ (800694c <JPEG_Set_HuffAC_Mem+0x200>)
 800687e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8006880:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006884:	3304      	adds	r3, #4
 8006886:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 800688a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800688e:	4a30      	ldr	r2, [pc, #192]	@ (8006950 <JPEG_Set_HuffAC_Mem+0x204>)
 8006890:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8006892:	23a2      	movs	r3, #162	@ 0xa2
 8006894:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8006898:	e049      	b.n	800692e <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800689a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800689e:	3b01      	subs	r3, #1
 80068a0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 80068a4:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80068a8:	3b04      	subs	r3, #4
 80068aa:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80068ae:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80068b2:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 80068b6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80068ba:	4413      	add	r3, r2
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	021b      	lsls	r3, r3, #8
 80068c0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80068c4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80068c8:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 80068cc:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80068d0:	3328      	adds	r3, #40	@ 0x28
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	440b      	add	r3, r1
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	4313      	orrs	r3, r2
 80068dc:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 80068e0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80068e4:	3b01      	subs	r3, #1
 80068e6:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80068ea:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80068ee:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 80068f2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80068f6:	4413      	add	r3, r2
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006900:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006904:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8006908:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800690c:	3328      	adds	r3, #40	@ 0x28
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	440b      	add	r3, r1
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	4313      	orrs	r3, r2
 8006918:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800691c:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8006920:	041a      	lsls	r2, r3, #16
 8006922:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8006926:	431a      	orrs	r2, r3
 8006928:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800692c:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800692e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8006932:	2b01      	cmp	r3, #1
 8006934:	d8b1      	bhi.n	800689a <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	0fd10fd0 	.word	0x0fd10fd0
 8006948:	0fd30fd2 	.word	0x0fd30fd2
 800694c:	0fd50fd4 	.word	0x0fd50fd4
 8006950:	0fd70fd6 	.word	0x0fd70fd6

08006954 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f84d 	bl	80069fc <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800696a:	461a      	mov	r2, r3
 800696c:	491f      	ldr	r1, [pc, #124]	@ (80069ec <JPEG_Set_HuffEnc_Mem+0x98>)
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7ff feec 	bl	800674c <JPEG_Set_HuffAC_Mem>
 8006974:	4603      	mov	r3, r0
 8006976:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8006978:	7bfb      	ldrb	r3, [r7, #15]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	e030      	b.n	80069e4 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800698a:	461a      	mov	r2, r3
 800698c:	4918      	ldr	r1, [pc, #96]	@ (80069f0 <JPEG_Set_HuffEnc_Mem+0x9c>)
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7ff fedc 	bl	800674c <JPEG_Set_HuffAC_Mem>
 8006994:	4603      	mov	r3, r0
 8006996:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8006998:	7bfb      	ldrb	r3, [r7, #15]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	e020      	b.n	80069e4 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 80069aa:	461a      	mov	r2, r3
 80069ac:	4911      	ldr	r1, [pc, #68]	@ (80069f4 <JPEG_Set_HuffEnc_Mem+0xa0>)
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7ff fe4a 	bl	8006648 <JPEG_Set_HuffDC_Mem>
 80069b4:	4603      	mov	r3, r0
 80069b6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	e010      	b.n	80069e4 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 80069ca:	461a      	mov	r2, r3
 80069cc:	490a      	ldr	r1, [pc, #40]	@ (80069f8 <JPEG_Set_HuffEnc_Mem+0xa4>)
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff fe3a 	bl	8006648 <JPEG_Set_HuffDC_Mem>
 80069d4:	4603      	mov	r3, r0
 80069d6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 80069de:	7bfb      	ldrb	r3, [r7, #15]
 80069e0:	e000      	b.n	80069e4 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	080124a8 	.word	0x080124a8
 80069f0:	0801255c 	.word	0x0801255c
 80069f4:	08012470 	.word	0x08012470
 80069f8:	0801248c 	.word	0x0801248c

080069fc <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b08b      	sub	sp, #44	@ 0x2c
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8006a04:	4b80      	ldr	r3, [pc, #512]	@ (8006c08 <JPEG_Set_Huff_DHTMem+0x20c>)
 8006a06:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8006a08:	4b80      	ldr	r3, [pc, #512]	@ (8006c0c <JPEG_Set_Huff_DHTMem+0x210>)
 8006a0a:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8006a0c:	4b80      	ldr	r3, [pc, #512]	@ (8006c10 <JPEG_Set_Huff_DHTMem+0x214>)
 8006a0e:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8006a10:	4b80      	ldr	r3, [pc, #512]	@ (8006c14 <JPEG_Set_Huff_DHTMem+0x218>)
 8006a12:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006a1c:	330c      	adds	r3, #12
 8006a1e:	623b      	str	r3, [r7, #32]
  index = 16;
 8006a20:	2310      	movs	r3, #16
 8006a22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006a24:	e01d      	b.n	8006a62 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	5cd3      	ldrb	r3, [r2, r3]
 8006a2e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8006a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a32:	3b02      	subs	r3, #2
 8006a34:	6979      	ldr	r1, [r7, #20]
 8006a36:	5ccb      	ldrb	r3, [r1, r3]
 8006a38:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006a3a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3e:	3b03      	subs	r3, #3
 8006a40:	6979      	ldr	r1, [r7, #20]
 8006a42:	5ccb      	ldrb	r3, [r1, r3]
 8006a44:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8006a46:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8006a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a4a:	3a04      	subs	r2, #4
 8006a4c:	6979      	ldr	r1, [r7, #20]
 8006a4e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8006a50:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	601a      	str	r2, [r3, #0]
    address--;
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	3b04      	subs	r3, #4
 8006a5a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5e:	3b04      	subs	r3, #4
 8006a60:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a64:	2b03      	cmp	r3, #3
 8006a66:	d8de      	bhi.n	8006a26 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006a70:	3318      	adds	r3, #24
 8006a72:	623b      	str	r3, [r7, #32]
  index = 12;
 8006a74:	230c      	movs	r3, #12
 8006a76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006a78:	e021      	b.n	8006abe <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	4413      	add	r3, r2
 8006a82:	7c1b      	ldrb	r3, [r3, #16]
 8006a84:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a88:	3b02      	subs	r3, #2
 8006a8a:	6979      	ldr	r1, [r7, #20]
 8006a8c:	440b      	add	r3, r1
 8006a8e:	7c1b      	ldrb	r3, [r3, #16]
 8006a90:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006a92:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	3b03      	subs	r3, #3
 8006a98:	6979      	ldr	r1, [r7, #20]
 8006a9a:	440b      	add	r3, r1
 8006a9c:	7c1b      	ldrb	r3, [r3, #16]
 8006a9e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8006aa0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8006aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aa4:	3a04      	subs	r2, #4
 8006aa6:	6979      	ldr	r1, [r7, #20]
 8006aa8:	440a      	add	r2, r1
 8006aaa:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8006aac:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	601a      	str	r2, [r3, #0]
    address--;
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	3b04      	subs	r3, #4
 8006ab6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aba:	3b04      	subs	r3, #4
 8006abc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac0:	2b03      	cmp	r3, #3
 8006ac2:	d8da      	bhi.n	8006a7a <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006acc:	3328      	adds	r3, #40	@ 0x28
 8006ace:	623b      	str	r3, [r7, #32]
  index = 16;
 8006ad0:	2310      	movs	r3, #16
 8006ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006ad4:	e01d      	b.n	8006b12 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	69fa      	ldr	r2, [r7, #28]
 8006adc:	5cd3      	ldrb	r3, [r2, r3]
 8006ade:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae2:	3b02      	subs	r3, #2
 8006ae4:	69f9      	ldr	r1, [r7, #28]
 8006ae6:	5ccb      	ldrb	r3, [r1, r3]
 8006ae8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006aea:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8006aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aee:	3b03      	subs	r3, #3
 8006af0:	69f9      	ldr	r1, [r7, #28]
 8006af2:	5ccb      	ldrb	r3, [r1, r3]
 8006af4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8006af6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8006af8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006afa:	3a04      	subs	r2, #4
 8006afc:	69f9      	ldr	r1, [r7, #28]
 8006afe:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8006b00:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	601a      	str	r2, [r3, #0]
    address--;
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	3b04      	subs	r3, #4
 8006b0a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0e:	3b04      	subs	r3, #4
 8006b10:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b14:	2b03      	cmp	r3, #3
 8006b16:	d8de      	bhi.n	8006ad6 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006b20:	33cc      	adds	r3, #204	@ 0xcc
 8006b22:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	4b3b      	ldr	r3, [pc, #236]	@ (8006c18 <JPEG_Set_Huff_DHTMem+0x21c>)
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8006b34:	021a      	lsls	r2, r3, #8
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	69fa      	ldr	r2, [r7, #28]
 8006b3c:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	3b04      	subs	r3, #4
 8006b4e:	623b      	str	r3, [r7, #32]
  index = 160;
 8006b50:	23a0      	movs	r3, #160	@ 0xa0
 8006b52:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006b54:	e021      	b.n	8006b9a <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	69fa      	ldr	r2, [r7, #28]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	7c1b      	ldrb	r3, [r3, #16]
 8006b60:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8006b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b64:	3b02      	subs	r3, #2
 8006b66:	69f9      	ldr	r1, [r7, #28]
 8006b68:	440b      	add	r3, r1
 8006b6a:	7c1b      	ldrb	r3, [r3, #16]
 8006b6c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006b6e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8006b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b72:	3b03      	subs	r3, #3
 8006b74:	69f9      	ldr	r1, [r7, #28]
 8006b76:	440b      	add	r3, r1
 8006b78:	7c1b      	ldrb	r3, [r3, #16]
 8006b7a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8006b7c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8006b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b80:	3a04      	subs	r2, #4
 8006b82:	69f9      	ldr	r1, [r7, #28]
 8006b84:	440a      	add	r2, r1
 8006b86:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8006b88:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	601a      	str	r2, [r3, #0]
    address--;
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	3b04      	subs	r3, #4
 8006b92:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b96:	3b04      	subs	r3, #4
 8006b98:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	d8da      	bhi.n	8006b56 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006ba8:	33cc      	adds	r3, #204	@ 0xcc
 8006baa:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	785b      	ldrb	r3, [r3, #1]
 8006bb8:	061a      	lsls	r2, r3, #24
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	431a      	orrs	r2, r3
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	041b      	lsls	r3, r3, #16
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006bd6:	33dc      	adds	r3, #220	@ 0xdc
 8006bd8:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	4b0e      	ldr	r3, [pc, #56]	@ (8006c18 <JPEG_Set_Huff_DHTMem+0x21c>)
 8006be0:	4013      	ands	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	7bdb      	ldrb	r3, [r3, #15]
 8006be8:	021a      	lsls	r2, r3, #8
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	7b92      	ldrb	r2, [r2, #14]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	3b04      	subs	r3, #4
 8006c00:	623b      	str	r3, [r7, #32]
  index = 12;
 8006c02:	230c      	movs	r3, #12
 8006c04:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006c06:	e027      	b.n	8006c58 <JPEG_Set_Huff_DHTMem+0x25c>
 8006c08:	080124a8 	.word	0x080124a8
 8006c0c:	0801255c 	.word	0x0801255c
 8006c10:	08012470 	.word	0x08012470
 8006c14:	0801248c 	.word	0x0801248c
 8006c18:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1e:	3301      	adds	r3, #1
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	5cd3      	ldrb	r3, [r2, r3]
 8006c24:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8006c26:	6939      	ldr	r1, [r7, #16]
 8006c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2a:	440b      	add	r3, r1
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006c30:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	3b01      	subs	r3, #1
 8006c36:	6939      	ldr	r1, [r7, #16]
 8006c38:	5ccb      	ldrb	r3, [r1, r3]
 8006c3a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8006c3c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8006c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c40:	3a02      	subs	r2, #2
 8006c42:	6939      	ldr	r1, [r7, #16]
 8006c44:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8006c46:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	601a      	str	r2, [r3, #0]
    address--;
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	3b04      	subs	r3, #4
 8006c50:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c54:	3b04      	subs	r3, #4
 8006c56:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d8de      	bhi.n	8006c1c <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006c66:	33dc      	adds	r3, #220	@ 0xdc
 8006c68:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	7c5b      	ldrb	r3, [r3, #17]
 8006c76:	061a      	lsls	r2, r3, #24
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	7c1b      	ldrb	r3, [r3, #16]
 8006c80:	041b      	lsls	r3, r3, #16
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006c94:	33e8      	adds	r3, #232	@ 0xe8
 8006c96:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	4b6d      	ldr	r3, [pc, #436]	@ (8006e54 <JPEG_Set_Huff_DHTMem+0x458>)
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	7edb      	ldrb	r3, [r3, #27]
 8006ca6:	021a      	lsls	r2, r3, #8
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	7e92      	ldrb	r2, [r2, #26]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	3b04      	subs	r3, #4
 8006cbe:	623b      	str	r3, [r7, #32]
  index = 8;
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006cc4:	e021      	b.n	8006d0a <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	3301      	adds	r3, #1
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	4413      	add	r3, r2
 8006cce:	7c1b      	ldrb	r3, [r3, #16]
 8006cd0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8006cd2:	6939      	ldr	r1, [r7, #16]
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd6:	440b      	add	r3, r1
 8006cd8:	3310      	adds	r3, #16
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006cde:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	6939      	ldr	r1, [r7, #16]
 8006ce6:	440b      	add	r3, r1
 8006ce8:	7c1b      	ldrb	r3, [r3, #16]
 8006cea:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8006cec:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8006cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cf0:	3a02      	subs	r2, #2
 8006cf2:	6939      	ldr	r1, [r7, #16]
 8006cf4:	440a      	add	r2, r1
 8006cf6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8006cf8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	601a      	str	r2, [r3, #0]
    address--;
 8006cfe:	6a3b      	ldr	r3, [r7, #32]
 8006d00:	3b04      	subs	r3, #4
 8006d02:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d06:	3b04      	subs	r3, #4
 8006d08:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0c:	2b03      	cmp	r3, #3
 8006d0e:	d8da      	bhi.n	8006cc6 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006d18:	33e8      	adds	r3, #232	@ 0xe8
 8006d1a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	785b      	ldrb	r3, [r3, #1]
 8006d28:	061a      	lsls	r2, r3, #24
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	041b      	lsls	r3, r3, #16
 8006d34:	4313      	orrs	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006d46:	33f8      	adds	r3, #248	@ 0xf8
 8006d48:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	4b41      	ldr	r3, [pc, #260]	@ (8006e54 <JPEG_Set_Huff_DHTMem+0x458>)
 8006d50:	4013      	ands	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	7bdb      	ldrb	r3, [r3, #15]
 8006d58:	021a      	lsls	r2, r3, #8
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	69ba      	ldr	r2, [r7, #24]
 8006d60:	7b92      	ldrb	r2, [r2, #14]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	3b04      	subs	r3, #4
 8006d70:	623b      	str	r3, [r7, #32]
  index = 12;
 8006d72:	230c      	movs	r3, #12
 8006d74:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006d76:	e01d      	b.n	8006db4 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	5cd3      	ldrb	r3, [r2, r3]
 8006d80:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8006d82:	69b9      	ldr	r1, [r7, #24]
 8006d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d86:	440b      	add	r3, r1
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006d8c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d90:	3b01      	subs	r3, #1
 8006d92:	69b9      	ldr	r1, [r7, #24]
 8006d94:	5ccb      	ldrb	r3, [r1, r3]
 8006d96:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8006d98:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8006d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d9c:	3a02      	subs	r2, #2
 8006d9e:	69b9      	ldr	r1, [r7, #24]
 8006da0:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8006da2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	601a      	str	r2, [r3, #0]
    address--;
 8006da8:	6a3b      	ldr	r3, [r7, #32]
 8006daa:	3b04      	subs	r3, #4
 8006dac:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db0:	3b04      	subs	r3, #4
 8006db2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d8de      	bhi.n	8006d78 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006dc2:	33f8      	adds	r3, #248	@ 0xf8
 8006dc4:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	7c5b      	ldrb	r3, [r3, #17]
 8006dd2:	061a      	lsls	r2, r3, #24
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	7c1b      	ldrb	r3, [r3, #16]
 8006ddc:	041b      	lsls	r3, r3, #16
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006df0:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8006df4:	623b      	str	r3, [r7, #32]
  index = 160;
 8006df6:	23a0      	movs	r3, #160	@ 0xa0
 8006df8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006dfa:	e021      	b.n	8006e40 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfe:	3301      	adds	r3, #1
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	4413      	add	r3, r2
 8006e04:	7c1b      	ldrb	r3, [r3, #16]
 8006e06:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8006e08:	69b9      	ldr	r1, [r7, #24]
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0c:	440b      	add	r3, r1
 8006e0e:	3310      	adds	r3, #16
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006e14:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8006e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	69b9      	ldr	r1, [r7, #24]
 8006e1c:	440b      	add	r3, r1
 8006e1e:	7c1b      	ldrb	r3, [r3, #16]
 8006e20:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8006e22:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8006e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e26:	3a02      	subs	r2, #2
 8006e28:	69b9      	ldr	r1, [r7, #24]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8006e2e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	601a      	str	r2, [r3, #0]
    address--;
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	3b04      	subs	r3, #4
 8006e38:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3c:	3b04      	subs	r3, #4
 8006e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d8da      	bhi.n	8006dfc <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8006e46:	bf00      	nop
 8006e48:	bf00      	nop
 8006e4a:	372c      	adds	r7, #44	@ 0x2c
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr
 8006e54:	ffff0000 	.word	0xffff0000

08006e58 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e64:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e70:	f003 0303 	and.w	r3, r3, #3
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d108      	bne.n	8006e8a <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0208 	orr.w	r2, r2, #8
 8006e86:	605a      	str	r2, [r3, #4]
 8006e88:	e007      	b.n	8006e9a <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0208 	bic.w	r2, r2, #8
 8006e98:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0201 	bic.w	r2, r2, #1
 8006ea8:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8006eb8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ec8:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ed8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006ee8:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f042 0201 	orr.w	r2, r2, #1
 8006ef8:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006efe:	f003 030c 	and.w	r3, r3, #12
 8006f02:	2b08      	cmp	r3, #8
 8006f04:	d108      	bne.n	8006f18 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8006f14:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8006f16:	e00d      	b.n	8006f34 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f1c:	f003 030c 	and.w	r3, r3, #12
 8006f20:	2b0c      	cmp	r3, #12
 8006f22:	d107      	bne.n	8006f34 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006f32:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f4c:	f003 0303 	and.w	r3, r3, #3
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d125      	bne.n	8006fa0 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d01e      	beq.n	8006fa0 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	3304      	adds	r3, #4
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff f841 	bl	8005ff0 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3304      	adds	r3, #4
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7fa f89a 	bl	80010b4 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f8e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f9e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d116      	bne.n	8006fda <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d004      	beq.n	8006fc4 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8006fba:	2108      	movs	r1, #8
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f988 	bl	80072d2 <JPEG_ReadInputData>
 8006fc2:	e00a      	b.n	8006fda <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fca:	f003 0304 	and.w	r3, r3, #4
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f97c 	bl	80072d2 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d116      	bne.n	8007014 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fec:	f003 0308 	and.w	r3, r3, #8
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d004      	beq.n	8006ffe <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8006ff4:	2108      	movs	r1, #8
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f864 	bl	80070c4 <JPEG_StoreOutputData>
 8006ffc:	e00a      	b.n	8007014 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007004:	f003 0310 	and.w	r3, r3, #16
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800700c:	2101      	movs	r1, #1
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f858 	bl	80070c4 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800701a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800701e:	2b20      	cmp	r3, #32
 8007020:	d14b      	bne.n	80070ba <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0201 	bic.w	r2, r2, #1
 8007030:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007036:	f003 030c 	and.w	r3, r3, #12
 800703a:	2b08      	cmp	r3, #8
 800703c:	d107      	bne.n	800704e <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800704c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800705c:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	69d9      	ldr	r1, [r3, #28]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800706e:	461a      	mov	r2, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7fa f869 	bl	8001148 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007080:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007086:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f003 0303 	and.w	r3, r3, #3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d103      	bne.n	80070b0 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7fa f871 	bl	8001190 <HAL_JPEG_DecodeCpltCallback>
 80070ae:	e002      	b.n	80070b6 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7ff f911 	bl	80062d8 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e000      	b.n	80070bc <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	440b      	add	r3, r1
 80070dc:	429a      	cmp	r2, r3
 80070de:	d34b      	bcc.n	8007178 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 80070e0:	2300      	movs	r3, #0
 80070e2:	617b      	str	r3, [r7, #20]
 80070e4:	e031      	b.n	800714a <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ec:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	69da      	ldr	r2, [r3, #28]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f6:	4413      	add	r3, r2
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	b2d2      	uxtb	r2, r2
 80070fc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	0a19      	lsrs	r1, r3, #8
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	69da      	ldr	r2, [r3, #28]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710a:	3301      	adds	r3, #1
 800710c:	4413      	add	r3, r2
 800710e:	b2ca      	uxtb	r2, r1
 8007110:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	0c19      	lsrs	r1, r3, #16
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	69da      	ldr	r2, [r3, #28]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711e:	3302      	adds	r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	b2ca      	uxtb	r2, r1
 8007124:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	0e19      	lsrs	r1, r3, #24
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69da      	ldr	r2, [r3, #28]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007132:	3303      	adds	r3, #3
 8007134:	4413      	add	r3, r2
 8007136:	b2ca      	uxtb	r2, r1
 8007138:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713e:	1d1a      	adds	r2, r3, #4
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	3301      	adds	r3, #1
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	429a      	cmp	r2, r3
 8007150:	d3c9      	bcc.n	80070e6 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715a:	429a      	cmp	r2, r3
 800715c:	f040 80b5 	bne.w	80072ca <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	69d9      	ldr	r1, [r3, #28]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007168:	461a      	mov	r2, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7f9 ffec 	bl	8001148 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8007176:	e0a8      	b.n	80072ca <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007180:	429a      	cmp	r2, r3
 8007182:	f240 80a2 	bls.w	80072ca <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	089b      	lsrs	r3, r3, #2
 8007192:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8007194:	2300      	movs	r3, #0
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	e031      	b.n	80071fe <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071a0:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	69da      	ldr	r2, [r3, #28]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071aa:	4413      	add	r3, r2
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	b2d2      	uxtb	r2, r2
 80071b0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	0a19      	lsrs	r1, r3, #8
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	69da      	ldr	r2, [r3, #28]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071be:	3301      	adds	r3, #1
 80071c0:	4413      	add	r3, r2
 80071c2:	b2ca      	uxtb	r2, r1
 80071c4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	0c19      	lsrs	r1, r3, #16
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	69da      	ldr	r2, [r3, #28]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d2:	3302      	adds	r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	b2ca      	uxtb	r2, r1
 80071d8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	0e19      	lsrs	r1, r3, #24
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	69da      	ldr	r2, [r3, #28]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e6:	3303      	adds	r3, #3
 80071e8:	4413      	add	r3, r2
 80071ea:	b2ca      	uxtb	r2, r1
 80071ec:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f2:	1d1a      	adds	r2, r3, #4
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	3301      	adds	r3, #1
 80071fc:	617b      	str	r3, [r7, #20]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	429a      	cmp	r2, r3
 8007204:	d3c9      	bcc.n	800719a <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720e:	429a      	cmp	r2, r3
 8007210:	d10b      	bne.n	800722a <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	69d9      	ldr	r1, [r3, #28]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721a:	461a      	mov	r2, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7f9 ff93 	bl	8001148 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007228:	e04f      	b.n	80072ca <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800723c:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800723e:	2300      	movs	r3, #0
 8007240:	617b      	str	r3, [r7, #20]
 8007242:	e015      	b.n	8007270 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	fa22 f103 	lsr.w	r1, r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	69da      	ldr	r2, [r3, #28]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725a:	4413      	add	r3, r2
 800725c:	b2ca      	uxtb	r2, r1
 800725e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	3301      	adds	r3, #1
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	429a      	cmp	r2, r3
 8007276:	d3e5      	bcc.n	8007244 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	69d9      	ldr	r1, [r3, #28]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007280:	461a      	mov	r2, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7f9 ff60 	bl	8001148 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f1c3 0304 	rsb	r3, r3, #4
 8007294:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	617b      	str	r3, [r7, #20]
 800729a:	e013      	b.n	80072c4 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	00db      	lsls	r3, r3, #3
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	fa22 f103 	lsr.w	r1, r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	69da      	ldr	r2, [r3, #28]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ae:	4413      	add	r3, r2
 80072b0:	b2ca      	uxtb	r2, r1
 80072b2:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	3301      	adds	r3, #1
 80072c2:	617b      	str	r3, [r7, #20]
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d9e8      	bls.n	800729c <JPEG_StoreOutputData+0x1d8>
}
 80072ca:	bf00      	nop
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b088      	sub	sp, #32
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 80072dc:	2300      	movs	r3, #0
 80072de:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <JPEG_ReadInputData+0x1c>
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d104      	bne.n	80072f8 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 80072ee:	2101      	movs	r1, #1
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7fe ff75 	bl	80061e0 <HAL_JPEG_Pause>
 80072f6:	e028      	b.n	800734a <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a1b      	ldr	r3, [r3, #32]
 8007300:	429a      	cmp	r2, r3
 8007302:	d906      	bls.n	8007312 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	61fb      	str	r3, [r7, #28]
 8007310:	e01b      	b.n	800734a <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	429a      	cmp	r2, r3
 800731c:	d115      	bne.n	800734a <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7f9 fed1 	bl	80010cc <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732e:	2b04      	cmp	r3, #4
 8007330:	d905      	bls.n	800733e <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007336:	f023 0203 	bic.w	r2, r3, #3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007348:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800734e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007352:	2b00      	cmp	r3, #0
 8007354:	f040 809f 	bne.w	8007496 <JPEG_ReadInputData+0x1c4>
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 809b 	beq.w	8007496 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	089b      	lsrs	r3, r3, #2
 8007364:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	429a      	cmp	r2, r3
 800736c:	d335      	bcc.n	80073da <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800736e:	2300      	movs	r3, #0
 8007370:	61bb      	str	r3, [r7, #24]
 8007372:	e02d      	b.n	80073d0 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699a      	ldr	r2, [r3, #24]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	4413      	add	r3, r2
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	699a      	ldr	r2, [r3, #24]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	3301      	adds	r3, #1
 800738e:	4413      	add	r3, r2
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007394:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6999      	ldr	r1, [r3, #24]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	3302      	adds	r3, #2
 80073a0:	440b      	add	r3, r1
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80073a6:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	699a      	ldr	r2, [r3, #24]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3303      	adds	r3, #3
 80073b2:	4413      	add	r3, r2
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80073bc:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80073be:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a1b      	ldr	r3, [r3, #32]
 80073c4:	1d1a      	adds	r2, r3, #4
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	3301      	adds	r3, #1
 80073ce:	61bb      	str	r3, [r7, #24]
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d3cd      	bcc.n	8007374 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 80073d8:	e05d      	b.n	8007496 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d035      	beq.n	800744c <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 80073e0:	2300      	movs	r3, #0
 80073e2:	61bb      	str	r3, [r7, #24]
 80073e4:	e02d      	b.n	8007442 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	699a      	ldr	r2, [r3, #24]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4413      	add	r3, r2
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699a      	ldr	r2, [r3, #24]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3301      	adds	r3, #1
 8007400:	4413      	add	r3, r2
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007406:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6999      	ldr	r1, [r3, #24]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	3302      	adds	r3, #2
 8007412:	440b      	add	r3, r1
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007418:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699a      	ldr	r2, [r3, #24]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	3303      	adds	r3, #3
 8007424:	4413      	add	r3, r2
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800742e:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007430:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	1d1a      	adds	r2, r3, #4
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	3301      	adds	r3, #1
 8007440:	61bb      	str	r3, [r7, #24]
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	429a      	cmp	r2, r3
 8007448:	d3cd      	bcc.n	80073e6 <JPEG_ReadInputData+0x114>
}
 800744a:	e024      	b.n	8007496 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800744c:	2300      	movs	r3, #0
 800744e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 8007450:	2300      	movs	r3, #0
 8007452:	61bb      	str	r3, [r7, #24]
 8007454:	e017      	b.n	8007486 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	699a      	ldr	r2, [r3, #24]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	4413      	add	r3, r2
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	f003 0303 	and.w	r3, r3, #3
 800746a:	00db      	lsls	r3, r3, #3
 800746c:	fa02 f303 	lsl.w	r3, r2, r3
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	4313      	orrs	r3, r2
 8007474:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	3301      	adds	r3, #1
 8007484:	61bb      	str	r3, [r7, #24]
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	429a      	cmp	r2, r3
 800748c:	d3e3      	bcc.n	8007456 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007496:	bf00      	nop
 8007498:	3720      	adds	r7, #32
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 80074a0:	b590      	push	{r4, r7, lr}
 80074a2:	b087      	sub	sp, #28
 80074a4:	af02      	add	r7, sp, #8
 80074a6:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ae:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b6:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d804      	bhi.n	80074cc <JPEG_DMA_StartProcess+0x2c>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d901      	bls.n	80074d0 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e074      	b.n	80075ba <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d4:	4a3b      	ldr	r2, [pc, #236]	@ (80075c4 <JPEG_DMA_StartProcess+0x124>)
 80074d6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074dc:	4a3a      	ldr	r2, [pc, #232]	@ (80075c8 <JPEG_DMA_StartProcess+0x128>)
 80074de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074e4:	4a39      	ldr	r2, [pc, #228]	@ (80075cc <JPEG_DMA_StartProcess+0x12c>)
 80074e6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074ec:	4a36      	ldr	r2, [pc, #216]	@ (80075c8 <JPEG_DMA_StartProcess+0x128>)
 80074ee:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074f4:	4a36      	ldr	r2, [pc, #216]	@ (80075d0 <JPEG_DMA_StartProcess+0x130>)
 80074f6:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <JPEG_DMA_StartProcess+0x64>
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d107      	bne.n	8007514 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007508:	f043 0204 	orr.w	r2, r3, #4
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e052      	b.n	80075ba <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751c:	68f9      	ldr	r1, [r7, #12]
 800751e:	fbb3 f1f1 	udiv	r1, r3, r1
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	fb00 f101 	mul.w	r1, r0, r1
 8007528:	1a5b      	subs	r3, r3, r1
 800752a:	1ad2      	subs	r2, r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007538:	68b9      	ldr	r1, [r7, #8]
 800753a:	fbb3 f1f1 	udiv	r1, r3, r1
 800753e:	68b8      	ldr	r0, [r7, #8]
 8007540:	fb00 f101 	mul.w	r1, r0, r1
 8007544:	1a5b      	subs	r3, r3, r1
 8007546:	1ad2      	subs	r2, r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3344      	adds	r3, #68	@ 0x44
 8007556:	4619      	mov	r1, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	461c      	mov	r4, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007562:	2201      	movs	r2, #1
 8007564:	9200      	str	r2, [sp, #0]
 8007566:	4622      	mov	r2, r4
 8007568:	f000 fbe8 	bl	8007d3c <HAL_MDMA_Start_IT>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d007      	beq.n	8007582 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007576:	f043 0204 	orr.w	r2, r3, #4
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e01b      	b.n	80075ba <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	4619      	mov	r1, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3340      	adds	r3, #64	@ 0x40
 8007592:	461c      	mov	r4, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007598:	2201      	movs	r2, #1
 800759a:	9200      	str	r2, [sp, #0]
 800759c:	4622      	mov	r2, r4
 800759e:	f000 fbcd 	bl	8007d3c <HAL_MDMA_Start_IT>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d007      	beq.n	80075b8 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ac:	f043 0204 	orr.w	r2, r3, #4
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e000      	b.n	80075ba <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd90      	pop	{r4, r7, pc}
 80075c2:	bf00      	nop
 80075c4:	080078d3 	.word	0x080078d3
 80075c8:	08007ac1 	.word	0x08007ac1
 80075cc:	080079ff 	.word	0x080079ff
 80075d0:	08007b11 	.word	0x08007b11

080075d4 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075e0:	f003 0303 	and.w	r3, r3, #3
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d125      	bne.n	8007634 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d01e      	beq.n	8007634 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3304      	adds	r3, #4
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7fe fcf7 	bl	8005ff0 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3304      	adds	r3, #4
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7f9 fd50 	bl	80010b4 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007622:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007632:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800763a:	f003 0320 	and.w	r3, r3, #32
 800763e:	2b00      	cmp	r3, #0
 8007640:	d039      	beq.n	80076b6 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007646:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 0201 	bic.w	r2, r2, #1
 800765c:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800766c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800767c:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b02      	cmp	r3, #2
 800768a:	d104      	bne.n	8007696 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007690:	4618      	mov	r0, r3
 8007692:	f000 fbd4 	bl	8007e3e <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800769a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d105      	bne.n	80076b0 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 fbc8 	bl	8007e3e <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 80076ae:	e002      	b.n	80076b6 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f804 	bl	80076be <JPEG_DMA_EndProcess>
}
 80076b6:	bf00      	nop
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80076d6:	1ad2      	subs	r2, r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d10a      	bne.n	80076fe <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	69d9      	ldr	r1, [r3, #28]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f0:	461a      	mov	r2, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7f9 fd28 	bl	8001148 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007704:	f003 0310 	and.w	r3, r3, #16
 8007708:	2b00      	cmp	r3, #0
 800770a:	d134      	bne.n	8007776 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00a      	beq.n	800772a <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	69d9      	ldr	r1, [r3, #28]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771c:	461a      	mov	r2, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7f9 fd12 	bl	8001148 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f022 0201 	bic.w	r2, r2, #1
 8007738:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800773e:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007744:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	2b02      	cmp	r3, #2
 8007764:	d103      	bne.n	800776e <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7f9 fd12 	bl	8001190 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800776c:	e00c      	b.n	8007788 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7fe fdb2 	bl	80062d8 <HAL_JPEG_EncodeCpltCallback>
}
 8007774:	e008      	b.n	8007788 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800777a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d102      	bne.n	8007788 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f804 	bl	8007790 <JPEG_DMA_PollResidualData>
}
 8007788:	bf00      	nop
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8007798:	2310      	movs	r3, #16
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	e04f      	b.n	800783e <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d146      	bne.n	8007838 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077b0:	f003 0310 	and.w	r3, r3, #16
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d03f      	beq.n	8007838 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077be:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	69da      	ldr	r2, [r3, #28]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c8:	4413      	add	r3, r2
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	b2d2      	uxtb	r2, r2
 80077ce:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	0a19      	lsrs	r1, r3, #8
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	69da      	ldr	r2, [r3, #28]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077dc:	3301      	adds	r3, #1
 80077de:	4413      	add	r3, r2
 80077e0:	b2ca      	uxtb	r2, r1
 80077e2:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	0c19      	lsrs	r1, r3, #16
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	69da      	ldr	r2, [r3, #28]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f0:	3302      	adds	r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	b2ca      	uxtb	r2, r1
 80077f6:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	0e19      	lsrs	r1, r3, #24
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	69da      	ldr	r2, [r3, #28]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007804:	3303      	adds	r3, #3
 8007806:	4413      	add	r3, r2
 8007808:	b2ca      	uxtb	r2, r1
 800780a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007810:	1d1a      	adds	r2, r3, #4
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781e:	429a      	cmp	r2, r3
 8007820:	d10a      	bne.n	8007838 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	69d9      	ldr	r1, [r3, #28]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800782a:	461a      	mov	r2, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7f9 fc8b 	bl	8001148 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	3b01      	subs	r3, #1
 800783c:	617b      	str	r3, [r7, #20]
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1ac      	bne.n	800779e <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007848:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007850:	f003 0310 	and.w	r3, r3, #16
 8007854:	2b00      	cmp	r3, #0
 8007856:	d004      	beq.n	8007862 <JPEG_DMA_PollResidualData+0xd2>
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d133      	bne.n	80078ca <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 0201 	bic.w	r2, r2, #1
 8007870:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00a      	beq.n	8007890 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	69d9      	ldr	r1, [r3, #28]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007882:	461a      	mov	r2, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7f9 fc5f 	bl	8001148 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007894:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800789a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	f003 0303 	and.w	r3, r3, #3
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d103      	bne.n	80078c4 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7f9 fc67 	bl	8001190 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 80078c2:	e002      	b.n	80078ca <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7fe fd07 	bl	80062d8 <HAL_JPEG_EncodeCpltCallback>
}
 80078ca:	bf00      	nop
 80078cc:	3718      	adds	r7, #24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 80078d2:	b590      	push	{r4, r7, lr}
 80078d4:	b087      	sub	sp, #28
 80078d6:	af02      	add	r7, sp, #8
 80078d8:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078de:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80078ee:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80078f4:	f248 030c 	movw	r3, #32780	@ 0x800c
 80078f8:	4013      	ands	r3, r2
 80078fa:	2b0c      	cmp	r3, #12
 80078fc:	d17c      	bne.n	80079f8 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007904:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8007914:	1ad2      	subs	r2, r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	4619      	mov	r1, r3
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f7f9 fbd3 	bl	80010cc <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	429a      	cmp	r2, r3
 800792e:	d81f      	bhi.n	8007970 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10d      	bne.n	8007952 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800793a:	f043 0204 	orr.w	r2, r3, #4
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2206      	movs	r2, #6
 8007946:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f7f9 fc16 	bl	800117c <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 8007950:	e052      	b.n	80079f8 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795a:	68b9      	ldr	r1, [r7, #8]
 800795c:	fbb3 f1f1 	udiv	r1, r3, r1
 8007960:	68b8      	ldr	r0, [r7, #8]
 8007962:	fb00 f101 	mul.w	r1, r0, r1
 8007966:	1a5b      	subs	r3, r3, r1
 8007968:	1ad2      	subs	r2, r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	629a      	str	r2, [r3, #40]	@ 0x28
 800796e:	e010      	b.n	8007992 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00c      	beq.n	8007992 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800797c:	f003 0303 	and.w	r3, r3, #3
 8007980:	2b00      	cmp	r3, #0
 8007982:	d006      	beq.n	8007992 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007988:	089b      	lsrs	r3, r3, #2
 800798a:	3301      	adds	r3, #1
 800798c:	009a      	lsls	r2, r3, #2
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007996:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d124      	bne.n	80079e8 <JPEG_MDMAInCpltCallback+0x116>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d020      	beq.n	80079e8 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	4619      	mov	r1, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3340      	adds	r3, #64	@ 0x40
 80079b6:	461c      	mov	r4, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079bc:	2201      	movs	r2, #1
 80079be:	9200      	str	r2, [sp, #0]
 80079c0:	4622      	mov	r2, r4
 80079c2:	f000 f9bb 	bl	8007d3c <HAL_MDMA_Start_IT>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00d      	beq.n	80079e8 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079d0:	f043 0204 	orr.w	r2, r3, #4
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2206      	movs	r2, #6
 80079dc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f7f9 fbcb 	bl	800117c <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 80079e6:	e007      	b.n	80079f8 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80079f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd90      	pop	{r4, r7, pc}

080079fe <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 80079fe:	b590      	push	{r4, r7, lr}
 8007a00:	b087      	sub	sp, #28
 8007a02:	af02      	add	r7, sp, #8
 8007a04:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0a:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007a1a:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a20:	f248 030c 	movw	r3, #32780	@ 0x800c
 8007a24:	4013      	ands	r3, r2
 8007a26:	2b0c      	cmp	r3, #12
 8007a28:	d147      	bne.n	8007aba <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a30:	f003 0320 	and.w	r3, r3, #32
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d138      	bne.n	8007aaa <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8007a46:	1ad2      	subs	r2, r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	69d9      	ldr	r1, [r3, #28]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a54:	461a      	mov	r2, r3
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f7f9 fb76 	bl	8001148 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d120      	bne.n	8007aaa <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3344      	adds	r3, #68	@ 0x44
 8007a72:	4619      	mov	r1, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	69db      	ldr	r3, [r3, #28]
 8007a78:	461c      	mov	r4, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7e:	2201      	movs	r2, #1
 8007a80:	9200      	str	r2, [sp, #0]
 8007a82:	4622      	mov	r2, r4
 8007a84:	f000 f95a 	bl	8007d3c <HAL_MDMA_Start_IT>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00d      	beq.n	8007aaa <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a92:	f043 0204 	orr.w	r2, r3, #4
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2206      	movs	r2, #6
 8007a9e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f7f9 fb6a 	bl	800117c <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 8007aa8:	e007      	b.n	8007aba <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007ab8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd90      	pop	{r4, r7, pc}

08007ac0 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007acc:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 0201 	bic.w	r2, r2, #1
 8007adc:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007aec:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007afa:	f043 0204 	orr.w	r2, r3, #4
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f7f9 fb3a 	bl	800117c <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 8007b08:	bf00      	nop
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1c:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f7ff fdc7 	bl	80076be <JPEG_DMA_EndProcess>
  }
}
 8007b30:	bf00      	nop
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b08b      	sub	sp, #44	@ 0x2c
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8007b40:	2300      	movs	r3, #0
 8007b42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3350      	adds	r3, #80	@ 0x50
 8007b4a:	61bb      	str	r3, [r7, #24]

  i = 0;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8007b50:	e042      	b.n	8007bd8 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8007b58:	2300      	movs	r3, #0
 8007b5a:	61fb      	str	r3, [r7, #28]
 8007b5c:	e033      	b.n	8007bc6 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	00db      	lsls	r3, r3, #3
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	fa22 f303 	lsr.w	r3, r2, r3
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d103      	bne.n	8007b7a <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	3364      	adds	r3, #100	@ 0x64
 8007b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b78:	e022      	b.n	8007bc0 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	2264      	movs	r2, #100	@ 0x64
 8007b7e:	fb02 f303 	mul.w	r3, r2, r3
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007b86:	6a38      	ldr	r0, [r7, #32]
 8007b88:	69f9      	ldr	r1, [r7, #28]
 8007b8a:	4401      	add	r1, r0
 8007b8c:	4818      	ldr	r0, [pc, #96]	@ (8007bf0 <JPEG_GetQuality+0xb8>)
 8007b8e:	5c41      	ldrb	r1, [r0, r1]
 8007b90:	440a      	add	r2, r1
 8007b92:	7812      	ldrb	r2, [r2, #0]
 8007b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b98:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2b64      	cmp	r3, #100	@ 0x64
 8007b9e:	d807      	bhi.n	8007bb0 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8007ba6:	085b      	lsrs	r3, r3, #1
 8007ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007baa:	4413      	add	r3, r2
 8007bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bae:	e007      	b.n	8007bc0 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8007bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bbc:	4413      	add	r3, r2
 8007bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	61fb      	str	r3, [r7, #28]
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d9c8      	bls.n	8007b5e <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	2b3c      	cmp	r3, #60	@ 0x3c
 8007bdc:	d9b9      	bls.n	8007b52 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	099b      	lsrs	r3, r3, #6
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	372c      	adds	r7, #44	@ 0x2c
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	08012610 	.word	0x08012610

08007bf4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007bfc:	f7fa ff50 	bl	8002aa0 <HAL_GetTick>
 8007c00:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d101      	bne.n	8007c0c <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e03b      	b.n	8007c84 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68da      	ldr	r2, [r3, #12]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 0201 	bic.w	r2, r2, #1
 8007c2a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007c2c:	e00f      	b.n	8007c4e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8007c2e:	f7fa ff37 	bl	8002aa0 <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	2b05      	cmp	r3, #5
 8007c3a:	d908      	bls.n	8007c4e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2240      	movs	r2, #64	@ 0x40
 8007c40:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2203      	movs	r2, #3
 8007c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e01a      	b.n	8007c84 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e8      	bne.n	8007c2e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fad9 	bl	8008214 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e048      	b.n	8007d30 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68da      	ldr	r2, [r3, #12]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f022 0201 	bic.w	r2, r2, #1
 8007cac:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2200      	movs	r2, #0
 8007cec:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	221f      	movs	r2, #31
 8007d04:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e070      	b.n	8007e36 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d101      	bne.n	8007d62 <HAL_MDMA_Start_IT+0x26>
 8007d5e:	2302      	movs	r3, #2
 8007d60:	e069      	b.n	8007e36 <HAL_MDMA_Start_IT+0xfa>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d158      	bne.n	8007e28 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2202      	movs	r2, #2
 8007d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 0201 	bic.w	r2, r2, #1
 8007d92:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	68b9      	ldr	r1, [r7, #8]
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f000 f9c8 	bl	8008134 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68da      	ldr	r2, [r3, #12]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f042 0206 	orr.w	r2, r2, #6
 8007db2:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d007      	beq.n	8007dcc <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68da      	ldr	r2, [r3, #12]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f042 0210 	orr.w	r2, r2, #16
 8007dca:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d007      	beq.n	8007de4 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68da      	ldr	r2, [r3, #12]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f042 0208 	orr.w	r2, r2, #8
 8007de2:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d007      	beq.n	8007dfc <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0220 	orr.w	r2, r2, #32
 8007dfa:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68da      	ldr	r2, [r3, #12]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f042 0201 	orr.w	r2, r2, #1
 8007e0a:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e14:	d10e      	bne.n	8007e34 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68da      	ldr	r2, [r3, #12]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007e24:	60da      	str	r2, [r3, #12]
 8007e26:	e005      	b.n	8007e34 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 8007e30:	2302      	movs	r3, #2
 8007e32:	e000      	b.n	8007e36 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b083      	sub	sp, #12
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e017      	b.n	8007e80 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d004      	beq.n	8007e66 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2280      	movs	r2, #128	@ 0x80
 8007e60:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e00c      	b.n	8007e80 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2204      	movs	r2, #4
 8007e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68da      	ldr	r2, [r3, #12]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 0201 	bic.w	r2, r2, #1
 8007e7c:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007e98:	4b91      	ldr	r3, [pc, #580]	@ (80080e0 <HAL_MDMA_IRQHandler+0x254>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a91      	ldr	r2, [pc, #580]	@ (80080e4 <HAL_MDMA_IRQHandler+0x258>)
 8007e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea2:	0a9b      	lsrs	r3, r3, #10
 8007ea4:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	4b8e      	ldr	r3, [pc, #568]	@ (80080e8 <HAL_MDMA_IRQHandler+0x25c>)
 8007eae:	4413      	add	r3, r2
 8007eb0:	099b      	lsrs	r3, r3, #6
 8007eb2:	f003 031f 	and.w	r3, r3, #31
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebc:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8007ebe:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 812d 	beq.w	8008128 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d054      	beq.n	8007f86 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d04d      	beq.n	8007f86 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68da      	ldr	r2, [r3, #12]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f022 0202 	bic.w	r2, r2, #2
 8007ef8:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d106      	bne.n	8007f1a <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f10:	f043 0201 	orr.w	r2, r3, #1
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	669a      	str	r2, [r3, #104]	@ 0x68
 8007f18:	e005      	b.n	8007f26 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f1e:	f043 0202 	orr.w	r2, r3, #2
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d005      	beq.n	8007f3c <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f34:	f043 0204 	orr.w	r2, r3, #4
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d005      	beq.n	8007f52 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f4a:	f043 0208 	orr.w	r2, r3, #8
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d005      	beq.n	8007f68 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f60:	f043 0210 	orr.w	r2, r3, #16
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d005      	beq.n	8007f7e <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f76:	f043 0220 	orr.w	r2, r3, #32
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2201      	movs	r2, #1
 8007f84:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0310 	and.w	r3, r3, #16
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d012      	beq.n	8007fba <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	f003 0320 	and.w	r3, r3, #32
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00b      	beq.n	8007fba <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2210      	movs	r2, #16
 8007fa8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0308 	and.w	r3, r3, #8
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d012      	beq.n	8007fee <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f003 0310 	and.w	r3, r3, #16
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00b      	beq.n	8007fee <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2208      	movs	r2, #8
 8007fdc:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0304 	and.w	r3, r3, #4
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d012      	beq.n	8008022 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f003 0308 	and.w	r3, r3, #8
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00b      	beq.n	8008022 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2204      	movs	r2, #4
 8008010:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008016:	2b00      	cmp	r3, #0
 8008018:	d003      	beq.n	8008022 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0302 	and.w	r3, r3, #2
 800802c:	2b00      	cmp	r3, #0
 800802e:	d039      	beq.n	80080a4 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	f003 0304 	and.w	r3, r3, #4
 800803a:	2b00      	cmp	r3, #0
 800803c:	d032      	beq.n	80080a4 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68da      	ldr	r2, [r3, #12]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800804c:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b04      	cmp	r3, #4
 8008058:	d110      	bne.n	800807c <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800806e:	2b00      	cmp	r3, #0
 8008070:	d05c      	beq.n	800812c <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	4798      	blx	r3
        }
        return;
 800807a:	e057      	b.n	800812c <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2202      	movs	r2, #2
 8008082:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008098:	2b00      	cmp	r3, #0
 800809a:	d003      	beq.n	80080a4 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d040      	beq.n	800812e <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2204      	movs	r2, #4
 80080b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68da      	ldr	r2, [r3, #12]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 0201 	bic.w	r2, r2, #1
 80080c2:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	3301      	adds	r3, #1
 80080c8:	60bb      	str	r3, [r7, #8]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d30d      	bcc.n	80080ec <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1f2      	bne.n	80080c4 <HAL_MDMA_IRQHandler+0x238>
 80080de:	e006      	b.n	80080ee <HAL_MDMA_IRQHandler+0x262>
 80080e0:	24000008 	.word	0x24000008
 80080e4:	1b4e81b5 	.word	0x1b4e81b5
 80080e8:	adffffc0 	.word	0xadffffc0
        break;
 80080ec:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f003 0301 	and.w	r3, r3, #1
 8008100:	2b00      	cmp	r3, #0
 8008102:	d004      	beq.n	800810e <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2203      	movs	r2, #3
 8008108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800810c:	e003      	b.n	8008116 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800811a:	2b00      	cmp	r3, #0
 800811c:	d007      	beq.n	800812e <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	4798      	blx	r3
 8008126:	e002      	b.n	800812e <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8008128:	bf00      	nop
 800812a:	e000      	b.n	800812e <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800812c:	bf00      	nop
    }
  }
}
 800812e:	3718      	adds	r7, #24
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8008134:	b480      	push	{r7}
 8008136:	b087      	sub	sp, #28
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
 8008140:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	695a      	ldr	r2, [r3, #20]
 8008148:	4b31      	ldr	r3, [pc, #196]	@ (8008210 <MDMA_SetConfig+0xdc>)
 800814a:	4013      	ands	r3, r2
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	f3c2 0110 	ubfx	r1, r2, #0, #17
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	6812      	ldr	r2, [r2, #0]
 8008156:	430b      	orrs	r3, r1
 8008158:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	3b01      	subs	r3, #1
 8008168:	051a      	lsls	r2, r3, #20
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	430a      	orrs	r2, r1
 8008170:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	221f      	movs	r2, #31
 8008178:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008190:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008198:	d002      	beq.n	80081a0 <MDMA_SetConfig+0x6c>
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d108      	bne.n	80081b2 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80081ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80081b0:	e007      	b.n	80081c2 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80081c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80081c8:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081d0:	d002      	beq.n	80081d8 <MDMA_SetConfig+0xa4>
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d108      	bne.n	80081ea <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80081e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80081e8:	e007      	b.n	80081fa <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80081f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008204:	bf00      	nop
 8008206:	371c      	adds	r7, #28
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	fffe0000 	.word	0xfffe0000

08008214 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68d9      	ldr	r1, [r3, #12]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	691a      	ldr	r2, [r3, #16]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	430a      	orrs	r2, r1
 800822a:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	695a      	ldr	r2, [r3, #20]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800823a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008246:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824c:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8008252:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008258:	3b01      	subs	r3, #1
 800825a:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800825c:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008268:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800826a:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008274:	d107      	bne.n	8008286 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	691a      	ldr	r2, [r3, #16]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8008284:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2200      	movs	r2, #0
 800828c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008292:	2b00      	cmp	r3, #0
 8008294:	da11      	bge.n	80082ba <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	695a      	ldr	r2, [r3, #20]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80082a4:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082aa:	425b      	negs	r3, r3
 80082ac:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	b292      	uxth	r2, r2
 80082b6:	621a      	str	r2, [r3, #32]
 80082b8:	e006      	b.n	80082c8 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082be:	461a      	mov	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	b292      	uxth	r2, r2
 80082c6:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	da15      	bge.n	80082fc <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	695a      	ldr	r2, [r3, #20]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80082de:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e4:	425b      	negs	r3, r3
 80082e6:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6a19      	ldr	r1, [r3, #32]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	041a      	lsls	r2, r3, #16
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	621a      	str	r2, [r3, #32]
 80082fa:	e009      	b.n	8008310 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6a19      	ldr	r1, [r3, #32]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008306:	041a      	lsls	r2, r3, #16
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	430a      	orrs	r2, r1
 800830e:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008318:	d006      	beq.n	8008328 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	b2d2      	uxtb	r2, r2
 8008324:	629a      	str	r2, [r3, #40]	@ 0x28
 8008326:	e003      	b.n	8008330 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2200      	movs	r2, #0
 800832e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2200      	movs	r2, #0
 8008336:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008338:	bf00      	nop
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8008350:	4b15      	ldr	r3, [pc, #84]	@ (80083a8 <HAL_PWR_EnterSTOPMode+0x64>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f023 0201 	bic.w	r2, r3, #1
 8008358:	4913      	ldr	r1, [pc, #76]	@ (80083a8 <HAL_PWR_EnterSTOPMode+0x64>)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4313      	orrs	r3, r2
 800835e:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8008360:	4b11      	ldr	r3, [pc, #68]	@ (80083a8 <HAL_PWR_EnterSTOPMode+0x64>)
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	4a10      	ldr	r2, [pc, #64]	@ (80083a8 <HAL_PWR_EnterSTOPMode+0x64>)
 8008366:	f023 0305 	bic.w	r3, r3, #5
 800836a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800836c:	4b0f      	ldr	r3, [pc, #60]	@ (80083ac <HAL_PWR_EnterSTOPMode+0x68>)
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	4a0e      	ldr	r2, [pc, #56]	@ (80083ac <HAL_PWR_EnterSTOPMode+0x68>)
 8008372:	f043 0304 	orr.w	r3, r3, #4
 8008376:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8008378:	f3bf 8f4f 	dsb	sy
}
 800837c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800837e:	f3bf 8f6f 	isb	sy
}
 8008382:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8008384:	78fb      	ldrb	r3, [r7, #3]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d101      	bne.n	800838e <HAL_PWR_EnterSTOPMode+0x4a>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800838a:	bf30      	wfi
 800838c:	e000      	b.n	8008390 <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800838e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008390:	4b06      	ldr	r3, [pc, #24]	@ (80083ac <HAL_PWR_EnterSTOPMode+0x68>)
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	4a05      	ldr	r2, [pc, #20]	@ (80083ac <HAL_PWR_EnterSTOPMode+0x68>)
 8008396:	f023 0304 	bic.w	r3, r3, #4
 800839a:	6113      	str	r3, [r2, #16]
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	58024800 	.word	0x58024800
 80083ac:	e000ed00 	.word	0xe000ed00

080083b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80083b8:	4b19      	ldr	r3, [pc, #100]	@ (8008420 <HAL_PWREx_ConfigSupply+0x70>)
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	2b04      	cmp	r3, #4
 80083c2:	d00a      	beq.n	80083da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80083c4:	4b16      	ldr	r3, [pc, #88]	@ (8008420 <HAL_PWREx_ConfigSupply+0x70>)
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f003 0307 	and.w	r3, r3, #7
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d001      	beq.n	80083d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e01f      	b.n	8008416 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	e01d      	b.n	8008416 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80083da:	4b11      	ldr	r3, [pc, #68]	@ (8008420 <HAL_PWREx_ConfigSupply+0x70>)
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f023 0207 	bic.w	r2, r3, #7
 80083e2:	490f      	ldr	r1, [pc, #60]	@ (8008420 <HAL_PWREx_ConfigSupply+0x70>)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80083ea:	f7fa fb59 	bl	8002aa0 <HAL_GetTick>
 80083ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80083f0:	e009      	b.n	8008406 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80083f2:	f7fa fb55 	bl	8002aa0 <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008400:	d901      	bls.n	8008406 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e007      	b.n	8008416 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008406:	4b06      	ldr	r3, [pc, #24]	@ (8008420 <HAL_PWREx_ConfigSupply+0x70>)
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800840e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008412:	d1ee      	bne.n	80083f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	58024800 	.word	0x58024800

08008424 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b08c      	sub	sp, #48	@ 0x30
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d102      	bne.n	8008438 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	f000 bc1f 	b.w	8008c76 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 80b3 	beq.w	80085ac <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008446:	4b95      	ldr	r3, [pc, #596]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800844e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008450:	4b92      	ldr	r3, [pc, #584]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 8008452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008454:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008458:	2b10      	cmp	r3, #16
 800845a:	d007      	beq.n	800846c <HAL_RCC_OscConfig+0x48>
 800845c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800845e:	2b18      	cmp	r3, #24
 8008460:	d112      	bne.n	8008488 <HAL_RCC_OscConfig+0x64>
 8008462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008464:	f003 0303 	and.w	r3, r3, #3
 8008468:	2b02      	cmp	r3, #2
 800846a:	d10d      	bne.n	8008488 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800846c:	4b8b      	ldr	r3, [pc, #556]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 8098 	beq.w	80085aa <HAL_RCC_OscConfig+0x186>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	f040 8093 	bne.w	80085aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e3f6      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008490:	d106      	bne.n	80084a0 <HAL_RCC_OscConfig+0x7c>
 8008492:	4b82      	ldr	r3, [pc, #520]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a81      	ldr	r2, [pc, #516]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 8008498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	e058      	b.n	8008552 <HAL_RCC_OscConfig+0x12e>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d112      	bne.n	80084ce <HAL_RCC_OscConfig+0xaa>
 80084a8:	4b7c      	ldr	r3, [pc, #496]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a7b      	ldr	r2, [pc, #492]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 80084ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084b2:	6013      	str	r3, [r2, #0]
 80084b4:	4b79      	ldr	r3, [pc, #484]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a78      	ldr	r2, [pc, #480]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 80084ba:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80084be:	6013      	str	r3, [r2, #0]
 80084c0:	4b76      	ldr	r3, [pc, #472]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a75      	ldr	r2, [pc, #468]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 80084c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084ca:	6013      	str	r3, [r2, #0]
 80084cc:	e041      	b.n	8008552 <HAL_RCC_OscConfig+0x12e>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80084d6:	d112      	bne.n	80084fe <HAL_RCC_OscConfig+0xda>
 80084d8:	4b70      	ldr	r3, [pc, #448]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a6f      	ldr	r2, [pc, #444]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 80084de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80084e2:	6013      	str	r3, [r2, #0]
 80084e4:	4b6d      	ldr	r3, [pc, #436]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a6c      	ldr	r2, [pc, #432]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 80084ea:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80084ee:	6013      	str	r3, [r2, #0]
 80084f0:	4b6a      	ldr	r3, [pc, #424]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a69      	ldr	r2, [pc, #420]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 80084f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084fa:	6013      	str	r3, [r2, #0]
 80084fc:	e029      	b.n	8008552 <HAL_RCC_OscConfig+0x12e>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8008506:	d112      	bne.n	800852e <HAL_RCC_OscConfig+0x10a>
 8008508:	4b64      	ldr	r3, [pc, #400]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a63      	ldr	r2, [pc, #396]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 800850e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008512:	6013      	str	r3, [r2, #0]
 8008514:	4b61      	ldr	r3, [pc, #388]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a60      	ldr	r2, [pc, #384]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 800851a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800851e:	6013      	str	r3, [r2, #0]
 8008520:	4b5e      	ldr	r3, [pc, #376]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a5d      	ldr	r2, [pc, #372]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 8008526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800852a:	6013      	str	r3, [r2, #0]
 800852c:	e011      	b.n	8008552 <HAL_RCC_OscConfig+0x12e>
 800852e:	4b5b      	ldr	r3, [pc, #364]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a5a      	ldr	r2, [pc, #360]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 8008534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008538:	6013      	str	r3, [r2, #0]
 800853a:	4b58      	ldr	r3, [pc, #352]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a57      	ldr	r2, [pc, #348]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 8008540:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008544:	6013      	str	r3, [r2, #0]
 8008546:	4b55      	ldr	r3, [pc, #340]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a54      	ldr	r2, [pc, #336]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 800854c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008550:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d013      	beq.n	8008582 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800855a:	f7fa faa1 	bl	8002aa0 <HAL_GetTick>
 800855e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008560:	e008      	b.n	8008574 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008562:	f7fa fa9d 	bl	8002aa0 <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	2b64      	cmp	r3, #100	@ 0x64
 800856e:	d901      	bls.n	8008574 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e380      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008574:	4b49      	ldr	r3, [pc, #292]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d0f0      	beq.n	8008562 <HAL_RCC_OscConfig+0x13e>
 8008580:	e014      	b.n	80085ac <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008582:	f7fa fa8d 	bl	8002aa0 <HAL_GetTick>
 8008586:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008588:	e008      	b.n	800859c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800858a:	f7fa fa89 	bl	8002aa0 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	2b64      	cmp	r3, #100	@ 0x64
 8008596:	d901      	bls.n	800859c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e36c      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800859c:	4b3f      	ldr	r3, [pc, #252]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1f0      	bne.n	800858a <HAL_RCC_OscConfig+0x166>
 80085a8:	e000      	b.n	80085ac <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0302 	and.w	r3, r3, #2
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 808c 	beq.w	80086d2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085ba:	4b38      	ldr	r3, [pc, #224]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80085c2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80085c4:	4b35      	ldr	r3, [pc, #212]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 80085c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80085ca:	6a3b      	ldr	r3, [r7, #32]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d007      	beq.n	80085e0 <HAL_RCC_OscConfig+0x1bc>
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	2b18      	cmp	r3, #24
 80085d4:	d137      	bne.n	8008646 <HAL_RCC_OscConfig+0x222>
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	f003 0303 	and.w	r3, r3, #3
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d132      	bne.n	8008646 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085e0:	4b2e      	ldr	r3, [pc, #184]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0304 	and.w	r3, r3, #4
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d005      	beq.n	80085f8 <HAL_RCC_OscConfig+0x1d4>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e33e      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80085f8:	4b28      	ldr	r3, [pc, #160]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f023 0219 	bic.w	r2, r3, #25
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	4925      	ldr	r1, [pc, #148]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 8008606:	4313      	orrs	r3, r2
 8008608:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800860a:	f7fa fa49 	bl	8002aa0 <HAL_GetTick>
 800860e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008610:	e008      	b.n	8008624 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008612:	f7fa fa45 	bl	8002aa0 <HAL_GetTick>
 8008616:	4602      	mov	r2, r0
 8008618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	2b02      	cmp	r3, #2
 800861e:	d901      	bls.n	8008624 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	e328      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008624:	4b1d      	ldr	r3, [pc, #116]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0304 	and.w	r3, r3, #4
 800862c:	2b00      	cmp	r3, #0
 800862e:	d0f0      	beq.n	8008612 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008630:	4b1a      	ldr	r3, [pc, #104]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	061b      	lsls	r3, r3, #24
 800863e:	4917      	ldr	r1, [pc, #92]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 8008640:	4313      	orrs	r3, r2
 8008642:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008644:	e045      	b.n	80086d2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d028      	beq.n	80086a0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800864e:	4b13      	ldr	r3, [pc, #76]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f023 0219 	bic.w	r2, r3, #25
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	4910      	ldr	r1, [pc, #64]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 800865c:	4313      	orrs	r3, r2
 800865e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008660:	f7fa fa1e 	bl	8002aa0 <HAL_GetTick>
 8008664:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008666:	e008      	b.n	800867a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008668:	f7fa fa1a 	bl	8002aa0 <HAL_GetTick>
 800866c:	4602      	mov	r2, r0
 800866e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	2b02      	cmp	r3, #2
 8008674:	d901      	bls.n	800867a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e2fd      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800867a:	4b08      	ldr	r3, [pc, #32]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0304 	and.w	r3, r3, #4
 8008682:	2b00      	cmp	r3, #0
 8008684:	d0f0      	beq.n	8008668 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008686:	4b05      	ldr	r3, [pc, #20]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	061b      	lsls	r3, r3, #24
 8008694:	4901      	ldr	r1, [pc, #4]	@ (800869c <HAL_RCC_OscConfig+0x278>)
 8008696:	4313      	orrs	r3, r2
 8008698:	604b      	str	r3, [r1, #4]
 800869a:	e01a      	b.n	80086d2 <HAL_RCC_OscConfig+0x2ae>
 800869c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086a0:	4b97      	ldr	r3, [pc, #604]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a96      	ldr	r2, [pc, #600]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 80086a6:	f023 0301 	bic.w	r3, r3, #1
 80086aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ac:	f7fa f9f8 	bl	8002aa0 <HAL_GetTick>
 80086b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80086b2:	e008      	b.n	80086c6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086b4:	f7fa f9f4 	bl	8002aa0 <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d901      	bls.n	80086c6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e2d7      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80086c6:	4b8e      	ldr	r3, [pc, #568]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0304 	and.w	r3, r3, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1f0      	bne.n	80086b4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0310 	and.w	r3, r3, #16
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d06a      	beq.n	80087b4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086de:	4b88      	ldr	r3, [pc, #544]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086e8:	4b85      	ldr	r3, [pc, #532]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 80086ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	2b08      	cmp	r3, #8
 80086f2:	d007      	beq.n	8008704 <HAL_RCC_OscConfig+0x2e0>
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	2b18      	cmp	r3, #24
 80086f8:	d11b      	bne.n	8008732 <HAL_RCC_OscConfig+0x30e>
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f003 0303 	and.w	r3, r3, #3
 8008700:	2b01      	cmp	r3, #1
 8008702:	d116      	bne.n	8008732 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008704:	4b7e      	ldr	r3, [pc, #504]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800870c:	2b00      	cmp	r3, #0
 800870e:	d005      	beq.n	800871c <HAL_RCC_OscConfig+0x2f8>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	2b80      	cmp	r3, #128	@ 0x80
 8008716:	d001      	beq.n	800871c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e2ac      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800871c:	4b78      	ldr	r3, [pc, #480]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	061b      	lsls	r3, r3, #24
 800872a:	4975      	ldr	r1, [pc, #468]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 800872c:	4313      	orrs	r3, r2
 800872e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008730:	e040      	b.n	80087b4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d023      	beq.n	8008782 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800873a:	4b71      	ldr	r3, [pc, #452]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a70      	ldr	r2, [pc, #448]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 8008740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008746:	f7fa f9ab 	bl	8002aa0 <HAL_GetTick>
 800874a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800874c:	e008      	b.n	8008760 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800874e:	f7fa f9a7 	bl	8002aa0 <HAL_GetTick>
 8008752:	4602      	mov	r2, r0
 8008754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	2b02      	cmp	r3, #2
 800875a:	d901      	bls.n	8008760 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e28a      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008760:	4b67      	ldr	r3, [pc, #412]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008768:	2b00      	cmp	r3, #0
 800876a:	d0f0      	beq.n	800874e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800876c:	4b64      	ldr	r3, [pc, #400]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a1b      	ldr	r3, [r3, #32]
 8008778:	061b      	lsls	r3, r3, #24
 800877a:	4961      	ldr	r1, [pc, #388]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 800877c:	4313      	orrs	r3, r2
 800877e:	60cb      	str	r3, [r1, #12]
 8008780:	e018      	b.n	80087b4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008782:	4b5f      	ldr	r3, [pc, #380]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a5e      	ldr	r2, [pc, #376]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 8008788:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800878c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800878e:	f7fa f987 	bl	8002aa0 <HAL_GetTick>
 8008792:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008794:	e008      	b.n	80087a8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008796:	f7fa f983 	bl	8002aa0 <HAL_GetTick>
 800879a:	4602      	mov	r2, r0
 800879c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d901      	bls.n	80087a8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e266      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80087a8:	4b55      	ldr	r3, [pc, #340]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1f0      	bne.n	8008796 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0308 	and.w	r3, r3, #8
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d036      	beq.n	800882e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d019      	beq.n	80087fc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087c8:	4b4d      	ldr	r3, [pc, #308]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 80087ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087cc:	4a4c      	ldr	r2, [pc, #304]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 80087ce:	f043 0301 	orr.w	r3, r3, #1
 80087d2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087d4:	f7fa f964 	bl	8002aa0 <HAL_GetTick>
 80087d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087da:	e008      	b.n	80087ee <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087dc:	f7fa f960 	bl	8002aa0 <HAL_GetTick>
 80087e0:	4602      	mov	r2, r0
 80087e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d901      	bls.n	80087ee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e243      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087ee:	4b44      	ldr	r3, [pc, #272]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 80087f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0f0      	beq.n	80087dc <HAL_RCC_OscConfig+0x3b8>
 80087fa:	e018      	b.n	800882e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087fc:	4b40      	ldr	r3, [pc, #256]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 80087fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008800:	4a3f      	ldr	r2, [pc, #252]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 8008802:	f023 0301 	bic.w	r3, r3, #1
 8008806:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008808:	f7fa f94a 	bl	8002aa0 <HAL_GetTick>
 800880c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800880e:	e008      	b.n	8008822 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008810:	f7fa f946 	bl	8002aa0 <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	2b02      	cmp	r3, #2
 800881c:	d901      	bls.n	8008822 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e229      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008822:	4b37      	ldr	r3, [pc, #220]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 8008824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008826:	f003 0302 	and.w	r3, r3, #2
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1f0      	bne.n	8008810 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0320 	and.w	r3, r3, #32
 8008836:	2b00      	cmp	r3, #0
 8008838:	d036      	beq.n	80088a8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d019      	beq.n	8008876 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008842:	4b2f      	ldr	r3, [pc, #188]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a2e      	ldr	r2, [pc, #184]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 8008848:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800884c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800884e:	f7fa f927 	bl	8002aa0 <HAL_GetTick>
 8008852:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008854:	e008      	b.n	8008868 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008856:	f7fa f923 	bl	8002aa0 <HAL_GetTick>
 800885a:	4602      	mov	r2, r0
 800885c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	2b02      	cmp	r3, #2
 8008862:	d901      	bls.n	8008868 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8008864:	2303      	movs	r3, #3
 8008866:	e206      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008868:	4b25      	ldr	r3, [pc, #148]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d0f0      	beq.n	8008856 <HAL_RCC_OscConfig+0x432>
 8008874:	e018      	b.n	80088a8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008876:	4b22      	ldr	r3, [pc, #136]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a21      	ldr	r2, [pc, #132]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 800887c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008880:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008882:	f7fa f90d 	bl	8002aa0 <HAL_GetTick>
 8008886:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008888:	e008      	b.n	800889c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800888a:	f7fa f909 	bl	8002aa0 <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	2b02      	cmp	r3, #2
 8008896:	d901      	bls.n	800889c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e1ec      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800889c:	4b18      	ldr	r3, [pc, #96]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1f0      	bne.n	800888a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0304 	and.w	r3, r3, #4
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 80af 	beq.w	8008a14 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80088b6:	4b13      	ldr	r3, [pc, #76]	@ (8008904 <HAL_RCC_OscConfig+0x4e0>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a12      	ldr	r2, [pc, #72]	@ (8008904 <HAL_RCC_OscConfig+0x4e0>)
 80088bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80088c2:	f7fa f8ed 	bl	8002aa0 <HAL_GetTick>
 80088c6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088c8:	e008      	b.n	80088dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088ca:	f7fa f8e9 	bl	8002aa0 <HAL_GetTick>
 80088ce:	4602      	mov	r2, r0
 80088d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	2b64      	cmp	r3, #100	@ 0x64
 80088d6:	d901      	bls.n	80088dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e1cc      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088dc:	4b09      	ldr	r3, [pc, #36]	@ (8008904 <HAL_RCC_OscConfig+0x4e0>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0f0      	beq.n	80088ca <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d10b      	bne.n	8008908 <HAL_RCC_OscConfig+0x4e4>
 80088f0:	4b03      	ldr	r3, [pc, #12]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 80088f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088f4:	4a02      	ldr	r2, [pc, #8]	@ (8008900 <HAL_RCC_OscConfig+0x4dc>)
 80088f6:	f043 0301 	orr.w	r3, r3, #1
 80088fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80088fc:	e05b      	b.n	80089b6 <HAL_RCC_OscConfig+0x592>
 80088fe:	bf00      	nop
 8008900:	58024400 	.word	0x58024400
 8008904:	58024800 	.word	0x58024800
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d112      	bne.n	8008936 <HAL_RCC_OscConfig+0x512>
 8008910:	4b9d      	ldr	r3, [pc, #628]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008914:	4a9c      	ldr	r2, [pc, #624]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008916:	f023 0301 	bic.w	r3, r3, #1
 800891a:	6713      	str	r3, [r2, #112]	@ 0x70
 800891c:	4b9a      	ldr	r3, [pc, #616]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 800891e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008920:	4a99      	ldr	r2, [pc, #612]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008922:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008926:	6713      	str	r3, [r2, #112]	@ 0x70
 8008928:	4b97      	ldr	r3, [pc, #604]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 800892a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800892c:	4a96      	ldr	r2, [pc, #600]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 800892e:	f023 0304 	bic.w	r3, r3, #4
 8008932:	6713      	str	r3, [r2, #112]	@ 0x70
 8008934:	e03f      	b.n	80089b6 <HAL_RCC_OscConfig+0x592>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	2b05      	cmp	r3, #5
 800893c:	d112      	bne.n	8008964 <HAL_RCC_OscConfig+0x540>
 800893e:	4b92      	ldr	r3, [pc, #584]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008942:	4a91      	ldr	r2, [pc, #580]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008944:	f043 0304 	orr.w	r3, r3, #4
 8008948:	6713      	str	r3, [r2, #112]	@ 0x70
 800894a:	4b8f      	ldr	r3, [pc, #572]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 800894c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800894e:	4a8e      	ldr	r2, [pc, #568]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008950:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008954:	6713      	str	r3, [r2, #112]	@ 0x70
 8008956:	4b8c      	ldr	r3, [pc, #560]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800895a:	4a8b      	ldr	r2, [pc, #556]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 800895c:	f043 0301 	orr.w	r3, r3, #1
 8008960:	6713      	str	r3, [r2, #112]	@ 0x70
 8008962:	e028      	b.n	80089b6 <HAL_RCC_OscConfig+0x592>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	2b85      	cmp	r3, #133	@ 0x85
 800896a:	d112      	bne.n	8008992 <HAL_RCC_OscConfig+0x56e>
 800896c:	4b86      	ldr	r3, [pc, #536]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 800896e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008970:	4a85      	ldr	r2, [pc, #532]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008972:	f043 0304 	orr.w	r3, r3, #4
 8008976:	6713      	str	r3, [r2, #112]	@ 0x70
 8008978:	4b83      	ldr	r3, [pc, #524]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 800897a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800897c:	4a82      	ldr	r2, [pc, #520]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 800897e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008982:	6713      	str	r3, [r2, #112]	@ 0x70
 8008984:	4b80      	ldr	r3, [pc, #512]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008988:	4a7f      	ldr	r2, [pc, #508]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 800898a:	f043 0301 	orr.w	r3, r3, #1
 800898e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008990:	e011      	b.n	80089b6 <HAL_RCC_OscConfig+0x592>
 8008992:	4b7d      	ldr	r3, [pc, #500]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008996:	4a7c      	ldr	r2, [pc, #496]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008998:	f023 0301 	bic.w	r3, r3, #1
 800899c:	6713      	str	r3, [r2, #112]	@ 0x70
 800899e:	4b7a      	ldr	r3, [pc, #488]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 80089a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089a2:	4a79      	ldr	r2, [pc, #484]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 80089a4:	f023 0304 	bic.w	r3, r3, #4
 80089a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80089aa:	4b77      	ldr	r3, [pc, #476]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 80089ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089ae:	4a76      	ldr	r2, [pc, #472]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 80089b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089b4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d015      	beq.n	80089ea <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089be:	f7fa f86f 	bl	8002aa0 <HAL_GetTick>
 80089c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089c4:	e00a      	b.n	80089dc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089c6:	f7fa f86b 	bl	8002aa0 <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d901      	bls.n	80089dc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e14c      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089dc:	4b6a      	ldr	r3, [pc, #424]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 80089de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089e0:	f003 0302 	and.w	r3, r3, #2
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d0ee      	beq.n	80089c6 <HAL_RCC_OscConfig+0x5a2>
 80089e8:	e014      	b.n	8008a14 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089ea:	f7fa f859 	bl	8002aa0 <HAL_GetTick>
 80089ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80089f0:	e00a      	b.n	8008a08 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089f2:	f7fa f855 	bl	8002aa0 <HAL_GetTick>
 80089f6:	4602      	mov	r2, r0
 80089f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d901      	bls.n	8008a08 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e136      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a08:	4b5f      	ldr	r3, [pc, #380]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a0c:	f003 0302 	and.w	r3, r3, #2
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1ee      	bne.n	80089f2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 812b 	beq.w	8008c74 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008a1e:	4b5a      	ldr	r3, [pc, #360]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a26:	2b18      	cmp	r3, #24
 8008a28:	f000 80bb 	beq.w	8008ba2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	f040 8095 	bne.w	8008b60 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a36:	4b54      	ldr	r3, [pc, #336]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a53      	ldr	r2, [pc, #332]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008a3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a42:	f7fa f82d 	bl	8002aa0 <HAL_GetTick>
 8008a46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a48:	e008      	b.n	8008a5c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a4a:	f7fa f829 	bl	8002aa0 <HAL_GetTick>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d901      	bls.n	8008a5c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e10c      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a5c:	4b4a      	ldr	r3, [pc, #296]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1f0      	bne.n	8008a4a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a68:	4b47      	ldr	r3, [pc, #284]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008a6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a6c:	4b47      	ldr	r3, [pc, #284]	@ (8008b8c <HAL_RCC_OscConfig+0x768>)
 8008a6e:	4013      	ands	r3, r2
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008a78:	0112      	lsls	r2, r2, #4
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	4942      	ldr	r1, [pc, #264]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	628b      	str	r3, [r1, #40]	@ 0x28
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a86:	3b01      	subs	r3, #1
 8008a88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a90:	3b01      	subs	r3, #1
 8008a92:	025b      	lsls	r3, r3, #9
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	431a      	orrs	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	041b      	lsls	r3, r3, #16
 8008aa0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008aa4:	431a      	orrs	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	061b      	lsls	r3, r3, #24
 8008aae:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008ab2:	4935      	ldr	r1, [pc, #212]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008ab8:	4b33      	ldr	r3, [pc, #204]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008abc:	4a32      	ldr	r2, [pc, #200]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008abe:	f023 0301 	bic.w	r3, r3, #1
 8008ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008ac4:	4b30      	ldr	r3, [pc, #192]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008ac6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ac8:	4b31      	ldr	r3, [pc, #196]	@ (8008b90 <HAL_RCC_OscConfig+0x76c>)
 8008aca:	4013      	ands	r3, r2
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008ad0:	00d2      	lsls	r2, r2, #3
 8008ad2:	492d      	ldr	r1, [pc, #180]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008adc:	f023 020c 	bic.w	r2, r3, #12
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae4:	4928      	ldr	r1, [pc, #160]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008aea:	4b27      	ldr	r3, [pc, #156]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aee:	f023 0202 	bic.w	r2, r3, #2
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008af6:	4924      	ldr	r1, [pc, #144]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008afc:	4b22      	ldr	r3, [pc, #136]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b00:	4a21      	ldr	r2, [pc, #132]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008b02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b08:	4b1f      	ldr	r3, [pc, #124]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008b14:	4b1c      	ldr	r3, [pc, #112]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b18:	4a1b      	ldr	r2, [pc, #108]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008b1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008b20:	4b19      	ldr	r3, [pc, #100]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b24:	4a18      	ldr	r2, [pc, #96]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008b26:	f043 0301 	orr.w	r3, r3, #1
 8008b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b2c:	4b16      	ldr	r3, [pc, #88]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a15      	ldr	r2, [pc, #84]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008b32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b38:	f7f9 ffb2 	bl	8002aa0 <HAL_GetTick>
 8008b3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b3e:	e008      	b.n	8008b52 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b40:	f7f9 ffae 	bl	8002aa0 <HAL_GetTick>
 8008b44:	4602      	mov	r2, r0
 8008b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d901      	bls.n	8008b52 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e091      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b52:	4b0d      	ldr	r3, [pc, #52]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d0f0      	beq.n	8008b40 <HAL_RCC_OscConfig+0x71c>
 8008b5e:	e089      	b.n	8008c74 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b60:	4b09      	ldr	r3, [pc, #36]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a08      	ldr	r2, [pc, #32]	@ (8008b88 <HAL_RCC_OscConfig+0x764>)
 8008b66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b6c:	f7f9 ff98 	bl	8002aa0 <HAL_GetTick>
 8008b70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b72:	e00f      	b.n	8008b94 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b74:	f7f9 ff94 	bl	8002aa0 <HAL_GetTick>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d908      	bls.n	8008b94 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e077      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
 8008b86:	bf00      	nop
 8008b88:	58024400 	.word	0x58024400
 8008b8c:	fffffc0c 	.word	0xfffffc0c
 8008b90:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b94:	4b3a      	ldr	r3, [pc, #232]	@ (8008c80 <HAL_RCC_OscConfig+0x85c>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1e9      	bne.n	8008b74 <HAL_RCC_OscConfig+0x750>
 8008ba0:	e068      	b.n	8008c74 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008ba2:	4b37      	ldr	r3, [pc, #220]	@ (8008c80 <HAL_RCC_OscConfig+0x85c>)
 8008ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008ba8:	4b35      	ldr	r3, [pc, #212]	@ (8008c80 <HAL_RCC_OscConfig+0x85c>)
 8008baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bac:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d031      	beq.n	8008c1a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	f003 0203 	and.w	r2, r3, #3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d12a      	bne.n	8008c1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	091b      	lsrs	r3, r3, #4
 8008bc8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d122      	bne.n	8008c1a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bde:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d11a      	bne.n	8008c1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	0a5b      	lsrs	r3, r3, #9
 8008be8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bf0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d111      	bne.n	8008c1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	0c1b      	lsrs	r3, r3, #16
 8008bfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c02:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d108      	bne.n	8008c1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	0e1b      	lsrs	r3, r3, #24
 8008c0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c14:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d001      	beq.n	8008c1e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e02b      	b.n	8008c76 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008c1e:	4b18      	ldr	r3, [pc, #96]	@ (8008c80 <HAL_RCC_OscConfig+0x85c>)
 8008c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c22:	08db      	lsrs	r3, r3, #3
 8008c24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c28:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d01f      	beq.n	8008c74 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008c34:	4b12      	ldr	r3, [pc, #72]	@ (8008c80 <HAL_RCC_OscConfig+0x85c>)
 8008c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c38:	4a11      	ldr	r2, [pc, #68]	@ (8008c80 <HAL_RCC_OscConfig+0x85c>)
 8008c3a:	f023 0301 	bic.w	r3, r3, #1
 8008c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008c40:	f7f9 ff2e 	bl	8002aa0 <HAL_GetTick>
 8008c44:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008c46:	bf00      	nop
 8008c48:	f7f9 ff2a 	bl	8002aa0 <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d0f9      	beq.n	8008c48 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008c54:	4b0a      	ldr	r3, [pc, #40]	@ (8008c80 <HAL_RCC_OscConfig+0x85c>)
 8008c56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c58:	4b0a      	ldr	r3, [pc, #40]	@ (8008c84 <HAL_RCC_OscConfig+0x860>)
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008c60:	00d2      	lsls	r2, r2, #3
 8008c62:	4907      	ldr	r1, [pc, #28]	@ (8008c80 <HAL_RCC_OscConfig+0x85c>)
 8008c64:	4313      	orrs	r3, r2
 8008c66:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008c68:	4b05      	ldr	r3, [pc, #20]	@ (8008c80 <HAL_RCC_OscConfig+0x85c>)
 8008c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c6c:	4a04      	ldr	r2, [pc, #16]	@ (8008c80 <HAL_RCC_OscConfig+0x85c>)
 8008c6e:	f043 0301 	orr.w	r3, r3, #1
 8008c72:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3730      	adds	r7, #48	@ 0x30
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	58024400 	.word	0x58024400
 8008c84:	ffff0007 	.word	0xffff0007

08008c88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d101      	bne.n	8008c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e19c      	b.n	8008fd6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c9c:	4b8a      	ldr	r3, [pc, #552]	@ (8008ec8 <HAL_RCC_ClockConfig+0x240>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 030f 	and.w	r3, r3, #15
 8008ca4:	683a      	ldr	r2, [r7, #0]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d910      	bls.n	8008ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008caa:	4b87      	ldr	r3, [pc, #540]	@ (8008ec8 <HAL_RCC_ClockConfig+0x240>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f023 020f 	bic.w	r2, r3, #15
 8008cb2:	4985      	ldr	r1, [pc, #532]	@ (8008ec8 <HAL_RCC_ClockConfig+0x240>)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cba:	4b83      	ldr	r3, [pc, #524]	@ (8008ec8 <HAL_RCC_ClockConfig+0x240>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 030f 	and.w	r3, r3, #15
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d001      	beq.n	8008ccc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e184      	b.n	8008fd6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0304 	and.w	r3, r3, #4
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d010      	beq.n	8008cfa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	691a      	ldr	r2, [r3, #16]
 8008cdc:	4b7b      	ldr	r3, [pc, #492]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d908      	bls.n	8008cfa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ce8:	4b78      	ldr	r3, [pc, #480]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	4975      	ldr	r1, [pc, #468]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0308 	and.w	r3, r3, #8
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d010      	beq.n	8008d28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	695a      	ldr	r2, [r3, #20]
 8008d0a:	4b70      	ldr	r3, [pc, #448]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008d0c:	69db      	ldr	r3, [r3, #28]
 8008d0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d908      	bls.n	8008d28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008d16:	4b6d      	ldr	r3, [pc, #436]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	496a      	ldr	r1, [pc, #424]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008d24:	4313      	orrs	r3, r2
 8008d26:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0310 	and.w	r3, r3, #16
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d010      	beq.n	8008d56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	699a      	ldr	r2, [r3, #24]
 8008d38:	4b64      	ldr	r3, [pc, #400]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008d3a:	69db      	ldr	r3, [r3, #28]
 8008d3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d908      	bls.n	8008d56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d44:	4b61      	ldr	r3, [pc, #388]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008d46:	69db      	ldr	r3, [r3, #28]
 8008d48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	495e      	ldr	r1, [pc, #376]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0320 	and.w	r3, r3, #32
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d010      	beq.n	8008d84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	69da      	ldr	r2, [r3, #28]
 8008d66:	4b59      	ldr	r3, [pc, #356]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d908      	bls.n	8008d84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008d72:	4b56      	ldr	r3, [pc, #344]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	4953      	ldr	r1, [pc, #332]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008d80:	4313      	orrs	r3, r2
 8008d82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 0302 	and.w	r3, r3, #2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d010      	beq.n	8008db2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	68da      	ldr	r2, [r3, #12]
 8008d94:	4b4d      	ldr	r3, [pc, #308]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008d96:	699b      	ldr	r3, [r3, #24]
 8008d98:	f003 030f 	and.w	r3, r3, #15
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d908      	bls.n	8008db2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008da0:	4b4a      	ldr	r3, [pc, #296]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	f023 020f 	bic.w	r2, r3, #15
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	4947      	ldr	r1, [pc, #284]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d055      	beq.n	8008e6a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008dbe:	4b43      	ldr	r3, [pc, #268]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	4940      	ldr	r1, [pc, #256]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d107      	bne.n	8008de8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008dd8:	4b3c      	ldr	r3, [pc, #240]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d121      	bne.n	8008e28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e0f6      	b.n	8008fd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d107      	bne.n	8008e00 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008df0:	4b36      	ldr	r3, [pc, #216]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d115      	bne.n	8008e28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e0ea      	b.n	8008fd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d107      	bne.n	8008e18 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e08:	4b30      	ldr	r3, [pc, #192]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d109      	bne.n	8008e28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e0de      	b.n	8008fd6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e18:	4b2c      	ldr	r3, [pc, #176]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0304 	and.w	r3, r3, #4
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e0d6      	b.n	8008fd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008e28:	4b28      	ldr	r3, [pc, #160]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	f023 0207 	bic.w	r2, r3, #7
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	4925      	ldr	r1, [pc, #148]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008e36:	4313      	orrs	r3, r2
 8008e38:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e3a:	f7f9 fe31 	bl	8002aa0 <HAL_GetTick>
 8008e3e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e40:	e00a      	b.n	8008e58 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e42:	f7f9 fe2d 	bl	8002aa0 <HAL_GetTick>
 8008e46:	4602      	mov	r2, r0
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d901      	bls.n	8008e58 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008e54:	2303      	movs	r3, #3
 8008e56:	e0be      	b.n	8008fd6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e58:	4b1c      	ldr	r3, [pc, #112]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	00db      	lsls	r3, r3, #3
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d1eb      	bne.n	8008e42 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 0302 	and.w	r3, r3, #2
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d010      	beq.n	8008e98 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68da      	ldr	r2, [r3, #12]
 8008e7a:	4b14      	ldr	r3, [pc, #80]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008e7c:	699b      	ldr	r3, [r3, #24]
 8008e7e:	f003 030f 	and.w	r3, r3, #15
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d208      	bcs.n	8008e98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e86:	4b11      	ldr	r3, [pc, #68]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	f023 020f 	bic.w	r2, r3, #15
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	490e      	ldr	r1, [pc, #56]	@ (8008ecc <HAL_RCC_ClockConfig+0x244>)
 8008e94:	4313      	orrs	r3, r2
 8008e96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e98:	4b0b      	ldr	r3, [pc, #44]	@ (8008ec8 <HAL_RCC_ClockConfig+0x240>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 030f 	and.w	r3, r3, #15
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d214      	bcs.n	8008ed0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ea6:	4b08      	ldr	r3, [pc, #32]	@ (8008ec8 <HAL_RCC_ClockConfig+0x240>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f023 020f 	bic.w	r2, r3, #15
 8008eae:	4906      	ldr	r1, [pc, #24]	@ (8008ec8 <HAL_RCC_ClockConfig+0x240>)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eb6:	4b04      	ldr	r3, [pc, #16]	@ (8008ec8 <HAL_RCC_ClockConfig+0x240>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 030f 	and.w	r3, r3, #15
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d005      	beq.n	8008ed0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e086      	b.n	8008fd6 <HAL_RCC_ClockConfig+0x34e>
 8008ec8:	52002000 	.word	0x52002000
 8008ecc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0304 	and.w	r3, r3, #4
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d010      	beq.n	8008efe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	691a      	ldr	r2, [r3, #16]
 8008ee0:	4b3f      	ldr	r3, [pc, #252]	@ (8008fe0 <HAL_RCC_ClockConfig+0x358>)
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d208      	bcs.n	8008efe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008eec:	4b3c      	ldr	r3, [pc, #240]	@ (8008fe0 <HAL_RCC_ClockConfig+0x358>)
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	4939      	ldr	r1, [pc, #228]	@ (8008fe0 <HAL_RCC_ClockConfig+0x358>)
 8008efa:	4313      	orrs	r3, r2
 8008efc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0308 	and.w	r3, r3, #8
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d010      	beq.n	8008f2c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	695a      	ldr	r2, [r3, #20]
 8008f0e:	4b34      	ldr	r3, [pc, #208]	@ (8008fe0 <HAL_RCC_ClockConfig+0x358>)
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d208      	bcs.n	8008f2c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f1a:	4b31      	ldr	r3, [pc, #196]	@ (8008fe0 <HAL_RCC_ClockConfig+0x358>)
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	492e      	ldr	r1, [pc, #184]	@ (8008fe0 <HAL_RCC_ClockConfig+0x358>)
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 0310 	and.w	r3, r3, #16
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d010      	beq.n	8008f5a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	699a      	ldr	r2, [r3, #24]
 8008f3c:	4b28      	ldr	r3, [pc, #160]	@ (8008fe0 <HAL_RCC_ClockConfig+0x358>)
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d208      	bcs.n	8008f5a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f48:	4b25      	ldr	r3, [pc, #148]	@ (8008fe0 <HAL_RCC_ClockConfig+0x358>)
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	4922      	ldr	r1, [pc, #136]	@ (8008fe0 <HAL_RCC_ClockConfig+0x358>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 0320 	and.w	r3, r3, #32
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d010      	beq.n	8008f88 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	69da      	ldr	r2, [r3, #28]
 8008f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8008fe0 <HAL_RCC_ClockConfig+0x358>)
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d208      	bcs.n	8008f88 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008f76:	4b1a      	ldr	r3, [pc, #104]	@ (8008fe0 <HAL_RCC_ClockConfig+0x358>)
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	4917      	ldr	r1, [pc, #92]	@ (8008fe0 <HAL_RCC_ClockConfig+0x358>)
 8008f84:	4313      	orrs	r3, r2
 8008f86:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8008f88:	f000 f834 	bl	8008ff4 <HAL_RCC_GetSysClockFreq>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	4b14      	ldr	r3, [pc, #80]	@ (8008fe0 <HAL_RCC_ClockConfig+0x358>)
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	0a1b      	lsrs	r3, r3, #8
 8008f94:	f003 030f 	and.w	r3, r3, #15
 8008f98:	4912      	ldr	r1, [pc, #72]	@ (8008fe4 <HAL_RCC_ClockConfig+0x35c>)
 8008f9a:	5ccb      	ldrb	r3, [r1, r3]
 8008f9c:	f003 031f 	and.w	r3, r3, #31
 8008fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8008fe0 <HAL_RCC_ClockConfig+0x358>)
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	f003 030f 	and.w	r3, r3, #15
 8008fae:	4a0d      	ldr	r2, [pc, #52]	@ (8008fe4 <HAL_RCC_ClockConfig+0x35c>)
 8008fb0:	5cd3      	ldrb	r3, [r2, r3]
 8008fb2:	f003 031f 	and.w	r3, r3, #31
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8008fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8008fe8 <HAL_RCC_ClockConfig+0x360>)
 8008fbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8008fec <HAL_RCC_ClockConfig+0x364>)
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff0 <HAL_RCC_ClockConfig+0x368>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7f9 fd1e 	bl	8002a0c <HAL_InitTick>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	58024400 	.word	0x58024400
 8008fe4:	08012458 	.word	0x08012458
 8008fe8:	2400000c 	.word	0x2400000c
 8008fec:	24000008 	.word	0x24000008
 8008ff0:	24000010 	.word	0x24000010

08008ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b089      	sub	sp, #36	@ 0x24
 8008ff8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ffa:	4bb3      	ldr	r3, [pc, #716]	@ (80092c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009002:	2b18      	cmp	r3, #24
 8009004:	f200 8155 	bhi.w	80092b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009008:	a201      	add	r2, pc, #4	@ (adr r2, 8009010 <HAL_RCC_GetSysClockFreq+0x1c>)
 800900a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900e:	bf00      	nop
 8009010:	08009075 	.word	0x08009075
 8009014:	080092b3 	.word	0x080092b3
 8009018:	080092b3 	.word	0x080092b3
 800901c:	080092b3 	.word	0x080092b3
 8009020:	080092b3 	.word	0x080092b3
 8009024:	080092b3 	.word	0x080092b3
 8009028:	080092b3 	.word	0x080092b3
 800902c:	080092b3 	.word	0x080092b3
 8009030:	0800909b 	.word	0x0800909b
 8009034:	080092b3 	.word	0x080092b3
 8009038:	080092b3 	.word	0x080092b3
 800903c:	080092b3 	.word	0x080092b3
 8009040:	080092b3 	.word	0x080092b3
 8009044:	080092b3 	.word	0x080092b3
 8009048:	080092b3 	.word	0x080092b3
 800904c:	080092b3 	.word	0x080092b3
 8009050:	080090a1 	.word	0x080090a1
 8009054:	080092b3 	.word	0x080092b3
 8009058:	080092b3 	.word	0x080092b3
 800905c:	080092b3 	.word	0x080092b3
 8009060:	080092b3 	.word	0x080092b3
 8009064:	080092b3 	.word	0x080092b3
 8009068:	080092b3 	.word	0x080092b3
 800906c:	080092b3 	.word	0x080092b3
 8009070:	080090a7 	.word	0x080090a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009074:	4b94      	ldr	r3, [pc, #592]	@ (80092c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0320 	and.w	r3, r3, #32
 800907c:	2b00      	cmp	r3, #0
 800907e:	d009      	beq.n	8009094 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009080:	4b91      	ldr	r3, [pc, #580]	@ (80092c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	08db      	lsrs	r3, r3, #3
 8009086:	f003 0303 	and.w	r3, r3, #3
 800908a:	4a90      	ldr	r2, [pc, #576]	@ (80092cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800908c:	fa22 f303 	lsr.w	r3, r2, r3
 8009090:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009092:	e111      	b.n	80092b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009094:	4b8d      	ldr	r3, [pc, #564]	@ (80092cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009096:	61bb      	str	r3, [r7, #24]
      break;
 8009098:	e10e      	b.n	80092b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800909a:	4b8d      	ldr	r3, [pc, #564]	@ (80092d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800909c:	61bb      	str	r3, [r7, #24]
      break;
 800909e:	e10b      	b.n	80092b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80090a0:	4b8c      	ldr	r3, [pc, #560]	@ (80092d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80090a2:	61bb      	str	r3, [r7, #24]
      break;
 80090a4:	e108      	b.n	80092b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090a6:	4b88      	ldr	r3, [pc, #544]	@ (80092c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090aa:	f003 0303 	and.w	r3, r3, #3
 80090ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80090b0:	4b85      	ldr	r3, [pc, #532]	@ (80092c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b4:	091b      	lsrs	r3, r3, #4
 80090b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80090bc:	4b82      	ldr	r3, [pc, #520]	@ (80092c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80090c6:	4b80      	ldr	r3, [pc, #512]	@ (80092c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ca:	08db      	lsrs	r3, r3, #3
 80090cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	fb02 f303 	mul.w	r3, r2, r3
 80090d6:	ee07 3a90 	vmov	s15, r3
 80090da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f000 80e1 	beq.w	80092ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	f000 8083 	beq.w	80091f8 <HAL_RCC_GetSysClockFreq+0x204>
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	f200 80a1 	bhi.w	800923c <HAL_RCC_GetSysClockFreq+0x248>
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d003      	beq.n	8009108 <HAL_RCC_GetSysClockFreq+0x114>
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d056      	beq.n	80091b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009106:	e099      	b.n	800923c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009108:	4b6f      	ldr	r3, [pc, #444]	@ (80092c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0320 	and.w	r3, r3, #32
 8009110:	2b00      	cmp	r3, #0
 8009112:	d02d      	beq.n	8009170 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009114:	4b6c      	ldr	r3, [pc, #432]	@ (80092c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	08db      	lsrs	r3, r3, #3
 800911a:	f003 0303 	and.w	r3, r3, #3
 800911e:	4a6b      	ldr	r2, [pc, #428]	@ (80092cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009120:	fa22 f303 	lsr.w	r3, r2, r3
 8009124:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	ee07 3a90 	vmov	s15, r3
 800912c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	ee07 3a90 	vmov	s15, r3
 8009136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800913a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800913e:	4b62      	ldr	r3, [pc, #392]	@ (80092c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009146:	ee07 3a90 	vmov	s15, r3
 800914a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800914e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009152:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80092d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800915a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800915e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800916a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800916e:	e087      	b.n	8009280 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	ee07 3a90 	vmov	s15, r3
 8009176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800917a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80092dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800917e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009182:	4b51      	ldr	r3, [pc, #324]	@ (80092c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800918a:	ee07 3a90 	vmov	s15, r3
 800918e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009192:	ed97 6a02 	vldr	s12, [r7, #8]
 8009196:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80092d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800919a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800919e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091b2:	e065      	b.n	8009280 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	ee07 3a90 	vmov	s15, r3
 80091ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80092e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80091c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091c6:	4b40      	ldr	r3, [pc, #256]	@ (80092c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ce:	ee07 3a90 	vmov	s15, r3
 80091d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80091da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80092d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091f6:	e043      	b.n	8009280 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	ee07 3a90 	vmov	s15, r3
 80091fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009202:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80092e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800920a:	4b2f      	ldr	r3, [pc, #188]	@ (80092c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800920c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800920e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009212:	ee07 3a90 	vmov	s15, r3
 8009216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800921a:	ed97 6a02 	vldr	s12, [r7, #8]
 800921e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80092d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800922a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800922e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009236:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800923a:	e021      	b.n	8009280 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	ee07 3a90 	vmov	s15, r3
 8009242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009246:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80092e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800924a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800924e:	4b1e      	ldr	r3, [pc, #120]	@ (80092c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009256:	ee07 3a90 	vmov	s15, r3
 800925a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800925e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009262:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80092d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800926a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800926e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800927a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800927e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009280:	4b11      	ldr	r3, [pc, #68]	@ (80092c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009284:	0a5b      	lsrs	r3, r3, #9
 8009286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800928a:	3301      	adds	r3, #1
 800928c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	ee07 3a90 	vmov	s15, r3
 8009294:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009298:	edd7 6a07 	vldr	s13, [r7, #28]
 800929c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092a4:	ee17 3a90 	vmov	r3, s15
 80092a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80092aa:	e005      	b.n	80092b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80092ac:	2300      	movs	r3, #0
 80092ae:	61bb      	str	r3, [r7, #24]
      break;
 80092b0:	e002      	b.n	80092b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80092b2:	4b07      	ldr	r3, [pc, #28]	@ (80092d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80092b4:	61bb      	str	r3, [r7, #24]
      break;
 80092b6:	bf00      	nop
  }

  return sysclockfreq;
 80092b8:	69bb      	ldr	r3, [r7, #24]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3724      	adds	r7, #36	@ 0x24
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	58024400 	.word	0x58024400
 80092cc:	03d09000 	.word	0x03d09000
 80092d0:	003d0900 	.word	0x003d0900
 80092d4:	017d7840 	.word	0x017d7840
 80092d8:	46000000 	.word	0x46000000
 80092dc:	4c742400 	.word	0x4c742400
 80092e0:	4a742400 	.word	0x4a742400
 80092e4:	4bbebc20 	.word	0x4bbebc20

080092e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80092ee:	f7ff fe81 	bl	8008ff4 <HAL_RCC_GetSysClockFreq>
 80092f2:	4602      	mov	r2, r0
 80092f4:	4b10      	ldr	r3, [pc, #64]	@ (8009338 <HAL_RCC_GetHCLKFreq+0x50>)
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	0a1b      	lsrs	r3, r3, #8
 80092fa:	f003 030f 	and.w	r3, r3, #15
 80092fe:	490f      	ldr	r1, [pc, #60]	@ (800933c <HAL_RCC_GetHCLKFreq+0x54>)
 8009300:	5ccb      	ldrb	r3, [r1, r3]
 8009302:	f003 031f 	and.w	r3, r3, #31
 8009306:	fa22 f303 	lsr.w	r3, r2, r3
 800930a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800930c:	4b0a      	ldr	r3, [pc, #40]	@ (8009338 <HAL_RCC_GetHCLKFreq+0x50>)
 800930e:	699b      	ldr	r3, [r3, #24]
 8009310:	f003 030f 	and.w	r3, r3, #15
 8009314:	4a09      	ldr	r2, [pc, #36]	@ (800933c <HAL_RCC_GetHCLKFreq+0x54>)
 8009316:	5cd3      	ldrb	r3, [r2, r3]
 8009318:	f003 031f 	and.w	r3, r3, #31
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	fa22 f303 	lsr.w	r3, r2, r3
 8009322:	4a07      	ldr	r2, [pc, #28]	@ (8009340 <HAL_RCC_GetHCLKFreq+0x58>)
 8009324:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009326:	4a07      	ldr	r2, [pc, #28]	@ (8009344 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800932c:	4b04      	ldr	r3, [pc, #16]	@ (8009340 <HAL_RCC_GetHCLKFreq+0x58>)
 800932e:	681b      	ldr	r3, [r3, #0]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	58024400 	.word	0x58024400
 800933c:	08012458 	.word	0x08012458
 8009340:	2400000c 	.word	0x2400000c
 8009344:	24000008 	.word	0x24000008

08009348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800934c:	f7ff ffcc 	bl	80092e8 <HAL_RCC_GetHCLKFreq>
 8009350:	4602      	mov	r2, r0
 8009352:	4b06      	ldr	r3, [pc, #24]	@ (800936c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	091b      	lsrs	r3, r3, #4
 8009358:	f003 0307 	and.w	r3, r3, #7
 800935c:	4904      	ldr	r1, [pc, #16]	@ (8009370 <HAL_RCC_GetPCLK1Freq+0x28>)
 800935e:	5ccb      	ldrb	r3, [r1, r3]
 8009360:	f003 031f 	and.w	r3, r3, #31
 8009364:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009368:	4618      	mov	r0, r3
 800936a:	bd80      	pop	{r7, pc}
 800936c:	58024400 	.word	0x58024400
 8009370:	08012458 	.word	0x08012458

08009374 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009378:	b0c8      	sub	sp, #288	@ 0x120
 800937a:	af00      	add	r7, sp, #0
 800937c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009380:	2300      	movs	r3, #0
 8009382:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009386:	2300      	movs	r3, #0
 8009388:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800938c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009394:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009398:	2500      	movs	r5, #0
 800939a:	ea54 0305 	orrs.w	r3, r4, r5
 800939e:	d049      	beq.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80093a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80093aa:	d02f      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80093ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80093b0:	d828      	bhi.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80093b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80093b6:	d01a      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80093b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80093bc:	d822      	bhi.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d003      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80093c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093c6:	d007      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80093c8:	e01c      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093ca:	4ba7      	ldr	r3, [pc, #668]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ce:	4aa6      	ldr	r2, [pc, #664]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80093d6:	e01a      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80093d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093dc:	3308      	adds	r3, #8
 80093de:	2102      	movs	r1, #2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f002 fa6d 	bl	800b8c0 <RCCEx_PLL2_Config>
 80093e6:	4603      	mov	r3, r0
 80093e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80093ec:	e00f      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80093ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093f2:	3328      	adds	r3, #40	@ 0x28
 80093f4:	2102      	movs	r1, #2
 80093f6:	4618      	mov	r0, r3
 80093f8:	f002 fb14 	bl	800ba24 <RCCEx_PLL3_Config>
 80093fc:	4603      	mov	r3, r0
 80093fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009402:	e004      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800940a:	e000      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800940c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800940e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10a      	bne.n	800942c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009416:	4b94      	ldr	r3, [pc, #592]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800941a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800941e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009424:	4a90      	ldr	r2, [pc, #576]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009426:	430b      	orrs	r3, r1
 8009428:	6513      	str	r3, [r2, #80]	@ 0x50
 800942a:	e003      	b.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800942c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009430:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009440:	f04f 0900 	mov.w	r9, #0
 8009444:	ea58 0309 	orrs.w	r3, r8, r9
 8009448:	d047      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800944a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800944e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009450:	2b04      	cmp	r3, #4
 8009452:	d82a      	bhi.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009454:	a201      	add	r2, pc, #4	@ (adr r2, 800945c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945a:	bf00      	nop
 800945c:	08009471 	.word	0x08009471
 8009460:	0800947f 	.word	0x0800947f
 8009464:	08009495 	.word	0x08009495
 8009468:	080094b3 	.word	0x080094b3
 800946c:	080094b3 	.word	0x080094b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009470:	4b7d      	ldr	r3, [pc, #500]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009474:	4a7c      	ldr	r2, [pc, #496]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800947a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800947c:	e01a      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800947e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009482:	3308      	adds	r3, #8
 8009484:	2100      	movs	r1, #0
 8009486:	4618      	mov	r0, r3
 8009488:	f002 fa1a 	bl	800b8c0 <RCCEx_PLL2_Config>
 800948c:	4603      	mov	r3, r0
 800948e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009492:	e00f      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009498:	3328      	adds	r3, #40	@ 0x28
 800949a:	2100      	movs	r1, #0
 800949c:	4618      	mov	r0, r3
 800949e:	f002 fac1 	bl	800ba24 <RCCEx_PLL3_Config>
 80094a2:	4603      	mov	r3, r0
 80094a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094a8:	e004      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80094b0:	e000      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80094b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10a      	bne.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80094bc:	4b6a      	ldr	r3, [pc, #424]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094c0:	f023 0107 	bic.w	r1, r3, #7
 80094c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ca:	4a67      	ldr	r2, [pc, #412]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094cc:	430b      	orrs	r3, r1
 80094ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80094d0:	e003      	b.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094d6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80094da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80094e6:	f04f 0b00 	mov.w	fp, #0
 80094ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80094ee:	d054      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80094f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094f6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80094fa:	d036      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80094fc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8009500:	d82f      	bhi.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009506:	d032      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800950c:	d829      	bhi.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800950e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009510:	d02f      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8009512:	2bc0      	cmp	r3, #192	@ 0xc0
 8009514:	d825      	bhi.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009516:	2b80      	cmp	r3, #128	@ 0x80
 8009518:	d018      	beq.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800951a:	2b80      	cmp	r3, #128	@ 0x80
 800951c:	d821      	bhi.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800951e:	2b00      	cmp	r3, #0
 8009520:	d002      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8009522:	2b40      	cmp	r3, #64	@ 0x40
 8009524:	d007      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8009526:	e01c      	b.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009528:	4b4f      	ldr	r3, [pc, #316]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800952a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800952c:	4a4e      	ldr	r2, [pc, #312]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800952e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009532:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8009534:	e01e      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009536:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800953a:	3308      	adds	r3, #8
 800953c:	2100      	movs	r1, #0
 800953e:	4618      	mov	r0, r3
 8009540:	f002 f9be 	bl	800b8c0 <RCCEx_PLL2_Config>
 8009544:	4603      	mov	r3, r0
 8009546:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800954a:	e013      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800954c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009550:	3328      	adds	r3, #40	@ 0x28
 8009552:	2100      	movs	r1, #0
 8009554:	4618      	mov	r0, r3
 8009556:	f002 fa65 	bl	800ba24 <RCCEx_PLL3_Config>
 800955a:	4603      	mov	r3, r0
 800955c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8009560:	e008      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009568:	e004      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800956a:	bf00      	nop
 800956c:	e002      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800956e:	bf00      	nop
 8009570:	e000      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8009572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009574:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10a      	bne.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800957c:	4b3a      	ldr	r3, [pc, #232]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800957e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009580:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009584:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800958a:	4a37      	ldr	r2, [pc, #220]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800958c:	430b      	orrs	r3, r1
 800958e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009590:	e003      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009592:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009596:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800959a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800959e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80095a6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80095aa:	2300      	movs	r3, #0
 80095ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80095b0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80095b4:	460b      	mov	r3, r1
 80095b6:	4313      	orrs	r3, r2
 80095b8:	d05c      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80095ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095c0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80095c4:	d03b      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80095c6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80095ca:	d834      	bhi.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80095cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095d0:	d037      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80095d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095d6:	d82e      	bhi.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80095d8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80095dc:	d033      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80095de:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80095e2:	d828      	bhi.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80095e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095e8:	d01a      	beq.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80095ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095ee:	d822      	bhi.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d003      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x288>
 80095f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095f8:	d007      	beq.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x296>
 80095fa:	e01c      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009600:	4a19      	ldr	r2, [pc, #100]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009602:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009606:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8009608:	e01e      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800960a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800960e:	3308      	adds	r3, #8
 8009610:	2100      	movs	r1, #0
 8009612:	4618      	mov	r0, r3
 8009614:	f002 f954 	bl	800b8c0 <RCCEx_PLL2_Config>
 8009618:	4603      	mov	r3, r0
 800961a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800961e:	e013      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009620:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009624:	3328      	adds	r3, #40	@ 0x28
 8009626:	2100      	movs	r1, #0
 8009628:	4618      	mov	r0, r3
 800962a:	f002 f9fb 	bl	800ba24 <RCCEx_PLL3_Config>
 800962e:	4603      	mov	r3, r0
 8009630:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8009634:	e008      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800963c:	e004      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800963e:	bf00      	nop
 8009640:	e002      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8009642:	bf00      	nop
 8009644:	e000      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8009646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009648:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10d      	bne.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8009650:	4b05      	ldr	r3, [pc, #20]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009654:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8009658:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800965c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800965e:	4a02      	ldr	r2, [pc, #8]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009660:	430b      	orrs	r3, r1
 8009662:	6513      	str	r3, [r2, #80]	@ 0x50
 8009664:	e006      	b.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8009666:	bf00      	nop
 8009668:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800966c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009670:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009674:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009680:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009684:	2300      	movs	r3, #0
 8009686:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800968a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800968e:	460b      	mov	r3, r1
 8009690:	4313      	orrs	r3, r2
 8009692:	d03a      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009694:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800969a:	2b30      	cmp	r3, #48	@ 0x30
 800969c:	d01f      	beq.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800969e:	2b30      	cmp	r3, #48	@ 0x30
 80096a0:	d819      	bhi.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80096a2:	2b20      	cmp	r3, #32
 80096a4:	d00c      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80096a6:	2b20      	cmp	r3, #32
 80096a8:	d815      	bhi.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d019      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80096ae:	2b10      	cmp	r3, #16
 80096b0:	d111      	bne.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096b2:	4bae      	ldr	r3, [pc, #696]	@ (800996c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80096b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096b6:	4aad      	ldr	r2, [pc, #692]	@ (800996c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80096b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80096be:	e011      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096c4:	3308      	adds	r3, #8
 80096c6:	2102      	movs	r1, #2
 80096c8:	4618      	mov	r0, r3
 80096ca:	f002 f8f9 	bl	800b8c0 <RCCEx_PLL2_Config>
 80096ce:	4603      	mov	r3, r0
 80096d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80096d4:	e006      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80096dc:	e002      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80096de:	bf00      	nop
 80096e0:	e000      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80096e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10a      	bne.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80096ec:	4b9f      	ldr	r3, [pc, #636]	@ (800996c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80096ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096f0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80096f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096fa:	4a9c      	ldr	r2, [pc, #624]	@ (800996c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80096fc:	430b      	orrs	r3, r1
 80096fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009700:	e003      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009702:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009706:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800970a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800970e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009712:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009716:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800971a:	2300      	movs	r3, #0
 800971c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009720:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009724:	460b      	mov	r3, r1
 8009726:	4313      	orrs	r3, r2
 8009728:	d051      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800972a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800972e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009730:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009734:	d035      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009736:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800973a:	d82e      	bhi.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800973c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009740:	d031      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8009742:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009746:	d828      	bhi.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009748:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800974c:	d01a      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800974e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009752:	d822      	bhi.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009754:	2b00      	cmp	r3, #0
 8009756:	d003      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8009758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800975c:	d007      	beq.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800975e:	e01c      	b.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009760:	4b82      	ldr	r3, [pc, #520]	@ (800996c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009764:	4a81      	ldr	r2, [pc, #516]	@ (800996c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800976a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800976c:	e01c      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800976e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009772:	3308      	adds	r3, #8
 8009774:	2100      	movs	r1, #0
 8009776:	4618      	mov	r0, r3
 8009778:	f002 f8a2 	bl	800b8c0 <RCCEx_PLL2_Config>
 800977c:	4603      	mov	r3, r0
 800977e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009782:	e011      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009788:	3328      	adds	r3, #40	@ 0x28
 800978a:	2100      	movs	r1, #0
 800978c:	4618      	mov	r0, r3
 800978e:	f002 f949 	bl	800ba24 <RCCEx_PLL3_Config>
 8009792:	4603      	mov	r3, r0
 8009794:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009798:	e006      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80097a0:	e002      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80097a2:	bf00      	nop
 80097a4:	e000      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80097a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10a      	bne.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80097b0:	4b6e      	ldr	r3, [pc, #440]	@ (800996c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80097b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097be:	4a6b      	ldr	r2, [pc, #428]	@ (800996c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097c0:	430b      	orrs	r3, r1
 80097c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80097c4:	e003      	b.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80097ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80097da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80097de:	2300      	movs	r3, #0
 80097e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80097e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80097e8:	460b      	mov	r3, r1
 80097ea:	4313      	orrs	r3, r2
 80097ec:	d053      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80097ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80097f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80097f8:	d033      	beq.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80097fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80097fe:	d82c      	bhi.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009800:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009804:	d02f      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8009806:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800980a:	d826      	bhi.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800980c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009810:	d02b      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009812:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009816:	d820      	bhi.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009818:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800981c:	d012      	beq.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800981e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009822:	d81a      	bhi.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009824:	2b00      	cmp	r3, #0
 8009826:	d022      	beq.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8009828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800982c:	d115      	bne.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800982e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009832:	3308      	adds	r3, #8
 8009834:	2101      	movs	r1, #1
 8009836:	4618      	mov	r0, r3
 8009838:	f002 f842 	bl	800b8c0 <RCCEx_PLL2_Config>
 800983c:	4603      	mov	r3, r0
 800983e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009842:	e015      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009844:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009848:	3328      	adds	r3, #40	@ 0x28
 800984a:	2101      	movs	r1, #1
 800984c:	4618      	mov	r0, r3
 800984e:	f002 f8e9 	bl	800ba24 <RCCEx_PLL3_Config>
 8009852:	4603      	mov	r3, r0
 8009854:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009858:	e00a      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009860:	e006      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8009862:	bf00      	nop
 8009864:	e004      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8009866:	bf00      	nop
 8009868:	e002      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800986a:	bf00      	nop
 800986c:	e000      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800986e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009870:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10a      	bne.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009878:	4b3c      	ldr	r3, [pc, #240]	@ (800996c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800987a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800987c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009884:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009886:	4a39      	ldr	r2, [pc, #228]	@ (800996c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009888:	430b      	orrs	r3, r1
 800988a:	6513      	str	r3, [r2, #80]	@ 0x50
 800988c:	e003      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800988e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009892:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009896:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80098a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80098a6:	2300      	movs	r3, #0
 80098a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80098ac:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4313      	orrs	r3, r2
 80098b4:	d060      	beq.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80098b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80098be:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80098c2:	d039      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80098c4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80098c8:	d832      	bhi.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80098ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098ce:	d035      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80098d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098d4:	d82c      	bhi.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80098d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098da:	d031      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80098dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098e0:	d826      	bhi.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80098e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80098e6:	d02d      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80098e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80098ec:	d820      	bhi.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80098ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098f2:	d012      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80098f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098f8:	d81a      	bhi.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d024      	beq.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80098fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009902:	d115      	bne.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009908:	3308      	adds	r3, #8
 800990a:	2101      	movs	r1, #1
 800990c:	4618      	mov	r0, r3
 800990e:	f001 ffd7 	bl	800b8c0 <RCCEx_PLL2_Config>
 8009912:	4603      	mov	r3, r0
 8009914:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009918:	e017      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800991a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800991e:	3328      	adds	r3, #40	@ 0x28
 8009920:	2101      	movs	r1, #1
 8009922:	4618      	mov	r0, r3
 8009924:	f002 f87e 	bl	800ba24 <RCCEx_PLL3_Config>
 8009928:	4603      	mov	r3, r0
 800992a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800992e:	e00c      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009936:	e008      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009938:	bf00      	nop
 800993a:	e006      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800993c:	bf00      	nop
 800993e:	e004      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009940:	bf00      	nop
 8009942:	e002      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009944:	bf00      	nop
 8009946:	e000      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800994a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10e      	bne.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009952:	4b06      	ldr	r3, [pc, #24]	@ (800996c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009956:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800995a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800995e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009962:	4a02      	ldr	r2, [pc, #8]	@ (800996c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009964:	430b      	orrs	r3, r1
 8009966:	6593      	str	r3, [r2, #88]	@ 0x58
 8009968:	e006      	b.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800996a:	bf00      	nop
 800996c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009970:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009974:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009980:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009984:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009988:	2300      	movs	r3, #0
 800998a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800998e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009992:	460b      	mov	r3, r1
 8009994:	4313      	orrs	r3, r2
 8009996:	d037      	beq.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009998:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800999c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800999e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099a2:	d00e      	beq.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80099a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099a8:	d816      	bhi.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d018      	beq.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80099ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099b2:	d111      	bne.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099b4:	4bc4      	ldr	r3, [pc, #784]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b8:	4ac3      	ldr	r2, [pc, #780]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80099c0:	e00f      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099c6:	3308      	adds	r3, #8
 80099c8:	2101      	movs	r1, #1
 80099ca:	4618      	mov	r0, r3
 80099cc:	f001 ff78 	bl	800b8c0 <RCCEx_PLL2_Config>
 80099d0:	4603      	mov	r3, r0
 80099d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80099d6:	e004      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80099de:	e000      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80099e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d10a      	bne.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80099ea:	4bb7      	ldr	r3, [pc, #732]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80099f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099f8:	4ab3      	ldr	r2, [pc, #716]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099fa:	430b      	orrs	r3, r1
 80099fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80099fe:	e003      	b.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a10:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009a14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a18:	2300      	movs	r3, #0
 8009a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009a1e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009a22:	460b      	mov	r3, r1
 8009a24:	4313      	orrs	r3, r2
 8009a26:	d039      	beq.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a2e:	2b03      	cmp	r3, #3
 8009a30:	d81c      	bhi.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009a32:	a201      	add	r2, pc, #4	@ (adr r2, 8009a38 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a38:	08009a75 	.word	0x08009a75
 8009a3c:	08009a49 	.word	0x08009a49
 8009a40:	08009a57 	.word	0x08009a57
 8009a44:	08009a75 	.word	0x08009a75
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a48:	4b9f      	ldr	r3, [pc, #636]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a4c:	4a9e      	ldr	r2, [pc, #632]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009a54:	e00f      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a5a:	3308      	adds	r3, #8
 8009a5c:	2102      	movs	r1, #2
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f001 ff2e 	bl	800b8c0 <RCCEx_PLL2_Config>
 8009a64:	4603      	mov	r3, r0
 8009a66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009a6a:	e004      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009a72:	e000      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10a      	bne.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009a7e:	4b92      	ldr	r3, [pc, #584]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a82:	f023 0103 	bic.w	r1, r3, #3
 8009a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a8c:	4a8e      	ldr	r2, [pc, #568]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a8e:	430b      	orrs	r3, r1
 8009a90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009a92:	e003      	b.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a98:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009aac:	2300      	movs	r3, #0
 8009aae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009ab2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	f000 8099 	beq.w	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009abe:	4b83      	ldr	r3, [pc, #524]	@ (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a82      	ldr	r2, [pc, #520]	@ (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ac8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009aca:	f7f8 ffe9 	bl	8002aa0 <HAL_GetTick>
 8009ace:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ad2:	e00b      	b.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ad4:	f7f8 ffe4 	bl	8002aa0 <HAL_GetTick>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	2b64      	cmp	r3, #100	@ 0x64
 8009ae2:	d903      	bls.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009aea:	e005      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009aec:	4b77      	ldr	r3, [pc, #476]	@ (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d0ed      	beq.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009af8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d173      	bne.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009b00:	4b71      	ldr	r3, [pc, #452]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b0c:	4053      	eors	r3, r2
 8009b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d015      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b16:	4b6c      	ldr	r3, [pc, #432]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b1e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b22:	4b69      	ldr	r3, [pc, #420]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b26:	4a68      	ldr	r2, [pc, #416]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b2c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009b2e:	4b66      	ldr	r3, [pc, #408]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b32:	4a65      	ldr	r2, [pc, #404]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b38:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009b3a:	4a63      	ldr	r2, [pc, #396]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b40:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b4e:	d118      	bne.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b50:	f7f8 ffa6 	bl	8002aa0 <HAL_GetTick>
 8009b54:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b58:	e00d      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b5a:	f7f8 ffa1 	bl	8002aa0 <HAL_GetTick>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009b64:	1ad2      	subs	r2, r2, r3
 8009b66:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d903      	bls.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8009b74:	e005      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b76:	4b54      	ldr	r3, [pc, #336]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b7a:	f003 0302 	and.w	r3, r3, #2
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d0eb      	beq.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009b82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d129      	bne.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b9a:	d10e      	bne.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009b9c:	4b4a      	ldr	r3, [pc, #296]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ba8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009bac:	091a      	lsrs	r2, r3, #4
 8009bae:	4b48      	ldr	r3, [pc, #288]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	4a45      	ldr	r2, [pc, #276]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bb4:	430b      	orrs	r3, r1
 8009bb6:	6113      	str	r3, [r2, #16]
 8009bb8:	e005      	b.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009bba:	4b43      	ldr	r3, [pc, #268]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	4a42      	ldr	r2, [pc, #264]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bc0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009bc4:	6113      	str	r3, [r2, #16]
 8009bc6:	4b40      	ldr	r3, [pc, #256]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bc8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bd6:	4a3c      	ldr	r2, [pc, #240]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bd8:	430b      	orrs	r3, r1
 8009bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8009bdc:	e008      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009bde:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009be2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8009be6:	e003      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009bec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf8:	f002 0301 	and.w	r3, r2, #1
 8009bfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c00:	2300      	movs	r3, #0
 8009c02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c06:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	f000 8090 	beq.w	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c1a:	2b28      	cmp	r3, #40	@ 0x28
 8009c1c:	d870      	bhi.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c24 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c24:	08009d09 	.word	0x08009d09
 8009c28:	08009d01 	.word	0x08009d01
 8009c2c:	08009d01 	.word	0x08009d01
 8009c30:	08009d01 	.word	0x08009d01
 8009c34:	08009d01 	.word	0x08009d01
 8009c38:	08009d01 	.word	0x08009d01
 8009c3c:	08009d01 	.word	0x08009d01
 8009c40:	08009d01 	.word	0x08009d01
 8009c44:	08009cd5 	.word	0x08009cd5
 8009c48:	08009d01 	.word	0x08009d01
 8009c4c:	08009d01 	.word	0x08009d01
 8009c50:	08009d01 	.word	0x08009d01
 8009c54:	08009d01 	.word	0x08009d01
 8009c58:	08009d01 	.word	0x08009d01
 8009c5c:	08009d01 	.word	0x08009d01
 8009c60:	08009d01 	.word	0x08009d01
 8009c64:	08009ceb 	.word	0x08009ceb
 8009c68:	08009d01 	.word	0x08009d01
 8009c6c:	08009d01 	.word	0x08009d01
 8009c70:	08009d01 	.word	0x08009d01
 8009c74:	08009d01 	.word	0x08009d01
 8009c78:	08009d01 	.word	0x08009d01
 8009c7c:	08009d01 	.word	0x08009d01
 8009c80:	08009d01 	.word	0x08009d01
 8009c84:	08009d09 	.word	0x08009d09
 8009c88:	08009d01 	.word	0x08009d01
 8009c8c:	08009d01 	.word	0x08009d01
 8009c90:	08009d01 	.word	0x08009d01
 8009c94:	08009d01 	.word	0x08009d01
 8009c98:	08009d01 	.word	0x08009d01
 8009c9c:	08009d01 	.word	0x08009d01
 8009ca0:	08009d01 	.word	0x08009d01
 8009ca4:	08009d09 	.word	0x08009d09
 8009ca8:	08009d01 	.word	0x08009d01
 8009cac:	08009d01 	.word	0x08009d01
 8009cb0:	08009d01 	.word	0x08009d01
 8009cb4:	08009d01 	.word	0x08009d01
 8009cb8:	08009d01 	.word	0x08009d01
 8009cbc:	08009d01 	.word	0x08009d01
 8009cc0:	08009d01 	.word	0x08009d01
 8009cc4:	08009d09 	.word	0x08009d09
 8009cc8:	58024400 	.word	0x58024400
 8009ccc:	58024800 	.word	0x58024800
 8009cd0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cd8:	3308      	adds	r3, #8
 8009cda:	2101      	movs	r1, #1
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f001 fdef 	bl	800b8c0 <RCCEx_PLL2_Config>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009ce8:	e00f      	b.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cee:	3328      	adds	r3, #40	@ 0x28
 8009cf0:	2101      	movs	r1, #1
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f001 fe96 	bl	800ba24 <RCCEx_PLL3_Config>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009cfe:	e004      	b.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009d06:	e000      	b.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10b      	bne.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009d12:	4bc0      	ldr	r3, [pc, #768]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d16:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d22:	4abc      	ldr	r2, [pc, #752]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d24:	430b      	orrs	r3, r1
 8009d26:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d28:	e003      	b.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d2e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3a:	f002 0302 	and.w	r3, r2, #2
 8009d3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d42:	2300      	movs	r3, #0
 8009d44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009d48:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	d043      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d5a:	2b05      	cmp	r3, #5
 8009d5c:	d824      	bhi.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8009d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d64 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8009d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d64:	08009db1 	.word	0x08009db1
 8009d68:	08009d7d 	.word	0x08009d7d
 8009d6c:	08009d93 	.word	0x08009d93
 8009d70:	08009db1 	.word	0x08009db1
 8009d74:	08009db1 	.word	0x08009db1
 8009d78:	08009db1 	.word	0x08009db1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d80:	3308      	adds	r3, #8
 8009d82:	2101      	movs	r1, #1
 8009d84:	4618      	mov	r0, r3
 8009d86:	f001 fd9b 	bl	800b8c0 <RCCEx_PLL2_Config>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009d90:	e00f      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d96:	3328      	adds	r3, #40	@ 0x28
 8009d98:	2101      	movs	r1, #1
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f001 fe42 	bl	800ba24 <RCCEx_PLL3_Config>
 8009da0:	4603      	mov	r3, r0
 8009da2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009da6:	e004      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009dae:	e000      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8009db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009db2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10b      	bne.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009dba:	4b96      	ldr	r3, [pc, #600]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dbe:	f023 0107 	bic.w	r1, r3, #7
 8009dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dca:	4a92      	ldr	r2, [pc, #584]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009dcc:	430b      	orrs	r3, r1
 8009dce:	6553      	str	r3, [r2, #84]	@ 0x54
 8009dd0:	e003      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dd2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009dd6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de2:	f002 0304 	and.w	r3, r2, #4
 8009de6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009dea:	2300      	movs	r3, #0
 8009dec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009df0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009df4:	460b      	mov	r3, r1
 8009df6:	4313      	orrs	r3, r2
 8009df8:	d043      	beq.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e02:	2b05      	cmp	r3, #5
 8009e04:	d824      	bhi.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009e06:	a201      	add	r2, pc, #4	@ (adr r2, 8009e0c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8009e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0c:	08009e59 	.word	0x08009e59
 8009e10:	08009e25 	.word	0x08009e25
 8009e14:	08009e3b 	.word	0x08009e3b
 8009e18:	08009e59 	.word	0x08009e59
 8009e1c:	08009e59 	.word	0x08009e59
 8009e20:	08009e59 	.word	0x08009e59
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e28:	3308      	adds	r3, #8
 8009e2a:	2101      	movs	r1, #1
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f001 fd47 	bl	800b8c0 <RCCEx_PLL2_Config>
 8009e32:	4603      	mov	r3, r0
 8009e34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009e38:	e00f      	b.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e3e:	3328      	adds	r3, #40	@ 0x28
 8009e40:	2101      	movs	r1, #1
 8009e42:	4618      	mov	r0, r3
 8009e44:	f001 fdee 	bl	800ba24 <RCCEx_PLL3_Config>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009e4e:	e004      	b.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e50:	2301      	movs	r3, #1
 8009e52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009e56:	e000      	b.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8009e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10b      	bne.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009e62:	4b6c      	ldr	r3, [pc, #432]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e66:	f023 0107 	bic.w	r1, r3, #7
 8009e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e72:	4a68      	ldr	r2, [pc, #416]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e74:	430b      	orrs	r3, r1
 8009e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e78:	e003      	b.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e7e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8a:	f002 0320 	and.w	r3, r2, #32
 8009e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e92:	2300      	movs	r3, #0
 8009e94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009e98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	d055      	beq.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009eae:	d033      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009eb4:	d82c      	bhi.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eba:	d02f      	beq.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ec0:	d826      	bhi.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009ec2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ec6:	d02b      	beq.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009ec8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ecc:	d820      	bhi.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009ece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ed2:	d012      	beq.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ed8:	d81a      	bhi.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d022      	beq.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009ede:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ee2:	d115      	bne.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ee8:	3308      	adds	r3, #8
 8009eea:	2100      	movs	r1, #0
 8009eec:	4618      	mov	r0, r3
 8009eee:	f001 fce7 	bl	800b8c0 <RCCEx_PLL2_Config>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009ef8:	e015      	b.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009efe:	3328      	adds	r3, #40	@ 0x28
 8009f00:	2102      	movs	r1, #2
 8009f02:	4618      	mov	r0, r3
 8009f04:	f001 fd8e 	bl	800ba24 <RCCEx_PLL3_Config>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f0e:	e00a      	b.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009f16:	e006      	b.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009f18:	bf00      	nop
 8009f1a:	e004      	b.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009f1c:	bf00      	nop
 8009f1e:	e002      	b.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009f20:	bf00      	nop
 8009f22:	e000      	b.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10b      	bne.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f2e:	4b39      	ldr	r3, [pc, #228]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f32:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f3e:	4a35      	ldr	r2, [pc, #212]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f40:	430b      	orrs	r3, r1
 8009f42:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f44:	e003      	b.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f4a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009f5e:	2300      	movs	r3, #0
 8009f60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009f64:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009f68:	460b      	mov	r3, r1
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	d058      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f76:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009f7a:	d033      	beq.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009f7c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009f80:	d82c      	bhi.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f86:	d02f      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f8c:	d826      	bhi.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009f8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f92:	d02b      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009f94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f98:	d820      	bhi.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009f9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f9e:	d012      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8009fa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009fa4:	d81a      	bhi.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d022      	beq.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8009faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fae:	d115      	bne.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fb4:	3308      	adds	r3, #8
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f001 fc81 	bl	800b8c0 <RCCEx_PLL2_Config>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009fc4:	e015      	b.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fca:	3328      	adds	r3, #40	@ 0x28
 8009fcc:	2102      	movs	r1, #2
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f001 fd28 	bl	800ba24 <RCCEx_PLL3_Config>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009fda:	e00a      	b.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009fe2:	e006      	b.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009fe4:	bf00      	nop
 8009fe6:	e004      	b.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009fe8:	bf00      	nop
 8009fea:	e002      	b.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009fec:	bf00      	nop
 8009fee:	e000      	b.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ff2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10e      	bne.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009ffa:	4b06      	ldr	r3, [pc, #24]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ffe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a006:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a00a:	4a02      	ldr	r2, [pc, #8]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a00c:	430b      	orrs	r3, r1
 800a00e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a010:	e006      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800a012:	bf00      	nop
 800a014:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a018:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a01c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a020:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a028:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a02c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a030:	2300      	movs	r3, #0
 800a032:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a036:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a03a:	460b      	mov	r3, r1
 800a03c:	4313      	orrs	r3, r2
 800a03e:	d055      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a040:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a044:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a048:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a04c:	d033      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a04e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a052:	d82c      	bhi.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a054:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a058:	d02f      	beq.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a05a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a05e:	d826      	bhi.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a060:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a064:	d02b      	beq.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a066:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a06a:	d820      	bhi.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a06c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a070:	d012      	beq.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800a072:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a076:	d81a      	bhi.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d022      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800a07c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a080:	d115      	bne.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a082:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a086:	3308      	adds	r3, #8
 800a088:	2100      	movs	r1, #0
 800a08a:	4618      	mov	r0, r3
 800a08c:	f001 fc18 	bl	800b8c0 <RCCEx_PLL2_Config>
 800a090:	4603      	mov	r3, r0
 800a092:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a096:	e015      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a09c:	3328      	adds	r3, #40	@ 0x28
 800a09e:	2102      	movs	r1, #2
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f001 fcbf 	bl	800ba24 <RCCEx_PLL3_Config>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a0ac:	e00a      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a0b4:	e006      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a0b6:	bf00      	nop
 800a0b8:	e004      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a0ba:	bf00      	nop
 800a0bc:	e002      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a0be:	bf00      	nop
 800a0c0:	e000      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a0c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10b      	bne.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a0cc:	4ba1      	ldr	r3, [pc, #644]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a0ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0d0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a0d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a0dc:	4a9d      	ldr	r2, [pc, #628]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a0de:	430b      	orrs	r3, r1
 800a0e0:	6593      	str	r3, [r2, #88]	@ 0x58
 800a0e2:	e003      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a0e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a0ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	f002 0308 	and.w	r3, r2, #8
 800a0f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a102:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a106:	460b      	mov	r3, r1
 800a108:	4313      	orrs	r3, r2
 800a10a:	d01e      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a10c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a110:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a118:	d10c      	bne.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a11a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a11e:	3328      	adds	r3, #40	@ 0x28
 800a120:	2102      	movs	r1, #2
 800a122:	4618      	mov	r0, r3
 800a124:	f001 fc7e 	bl	800ba24 <RCCEx_PLL3_Config>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d002      	beq.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a134:	4b87      	ldr	r3, [pc, #540]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a138:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a13c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a140:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a144:	4a83      	ldr	r2, [pc, #524]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a146:	430b      	orrs	r3, r1
 800a148:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a14a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a152:	f002 0310 	and.w	r3, r2, #16
 800a156:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a15a:	2300      	movs	r3, #0
 800a15c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a160:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a164:	460b      	mov	r3, r1
 800a166:	4313      	orrs	r3, r2
 800a168:	d01e      	beq.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a16a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a16e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a176:	d10c      	bne.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a178:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a17c:	3328      	adds	r3, #40	@ 0x28
 800a17e:	2102      	movs	r1, #2
 800a180:	4618      	mov	r0, r3
 800a182:	f001 fc4f 	bl	800ba24 <RCCEx_PLL3_Config>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a192:	4b70      	ldr	r3, [pc, #448]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a196:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a19a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a19e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a1a2:	4a6c      	ldr	r2, [pc, #432]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a1a4:	430b      	orrs	r3, r1
 800a1a6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a1a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a1b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a1be:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	d03e      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a1c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a1d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1d4:	d022      	beq.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800a1d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1da:	d81b      	bhi.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d003      	beq.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800a1e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1e4:	d00b      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800a1e6:	e015      	b.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1ec:	3308      	adds	r3, #8
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f001 fb65 	bl	800b8c0 <RCCEx_PLL2_Config>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a1fc:	e00f      	b.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a202:	3328      	adds	r3, #40	@ 0x28
 800a204:	2102      	movs	r1, #2
 800a206:	4618      	mov	r0, r3
 800a208:	f001 fc0c 	bl	800ba24 <RCCEx_PLL3_Config>
 800a20c:	4603      	mov	r3, r0
 800a20e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a212:	e004      	b.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a21a:	e000      	b.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800a21c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a21e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10b      	bne.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a226:	4b4b      	ldr	r3, [pc, #300]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a22a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a22e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a232:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a236:	4a47      	ldr	r2, [pc, #284]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a238:	430b      	orrs	r3, r1
 800a23a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a23c:	e003      	b.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a23e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a242:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a252:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a254:	2300      	movs	r3, #0
 800a256:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a258:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a25c:	460b      	mov	r3, r1
 800a25e:	4313      	orrs	r3, r2
 800a260:	d03b      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a262:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a26a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a26e:	d01f      	beq.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800a270:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a274:	d818      	bhi.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a276:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a27a:	d003      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800a27c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a280:	d007      	beq.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800a282:	e011      	b.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a284:	4b33      	ldr	r3, [pc, #204]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a288:	4a32      	ldr	r2, [pc, #200]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a28a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a28e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a290:	e00f      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a292:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a296:	3328      	adds	r3, #40	@ 0x28
 800a298:	2101      	movs	r1, #1
 800a29a:	4618      	mov	r0, r3
 800a29c:	f001 fbc2 	bl	800ba24 <RCCEx_PLL3_Config>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800a2a6:	e004      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a2ae:	e000      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800a2b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d10b      	bne.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a2ba:	4b26      	ldr	r3, [pc, #152]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a2bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a2c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2ca:	4a22      	ldr	r2, [pc, #136]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a2cc:	430b      	orrs	r3, r1
 800a2ce:	6553      	str	r3, [r2, #84]	@ 0x54
 800a2d0:	e003      	b.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a2d6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a2da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a2e6:	673b      	str	r3, [r7, #112]	@ 0x70
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	677b      	str	r3, [r7, #116]	@ 0x74
 800a2ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	d034      	beq.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a2f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d003      	beq.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800a300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a304:	d007      	beq.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800a306:	e011      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a308:	4b12      	ldr	r3, [pc, #72]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a30a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a30c:	4a11      	ldr	r2, [pc, #68]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a30e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a312:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a314:	e00e      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a31a:	3308      	adds	r3, #8
 800a31c:	2102      	movs	r1, #2
 800a31e:	4618      	mov	r0, r3
 800a320:	f001 face 	bl	800b8c0 <RCCEx_PLL2_Config>
 800a324:	4603      	mov	r3, r0
 800a326:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a32a:	e003      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a332:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a334:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10d      	bne.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a33c:	4b05      	ldr	r3, [pc, #20]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a33e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a340:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a34a:	4a02      	ldr	r2, [pc, #8]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a34c:	430b      	orrs	r3, r1
 800a34e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a350:	e006      	b.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800a352:	bf00      	nop
 800a354:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a358:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a35c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a360:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a368:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a36c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a36e:	2300      	movs	r3, #0
 800a370:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a372:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a376:	460b      	mov	r3, r1
 800a378:	4313      	orrs	r3, r2
 800a37a:	d00c      	beq.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a37c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a380:	3328      	adds	r3, #40	@ 0x28
 800a382:	2102      	movs	r1, #2
 800a384:	4618      	mov	r0, r3
 800a386:	f001 fb4d 	bl	800ba24 <RCCEx_PLL3_Config>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d002      	beq.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a3a2:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	667b      	str	r3, [r7, #100]	@ 0x64
 800a3a8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	d038      	beq.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a3b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3be:	d018      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800a3c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3c4:	d811      	bhi.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a3c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3ca:	d014      	beq.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800a3cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3d0:	d80b      	bhi.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d011      	beq.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800a3d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3da:	d106      	bne.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3dc:	4bc3      	ldr	r3, [pc, #780]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e0:	4ac2      	ldr	r2, [pc, #776]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a3e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a3e8:	e008      	b.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a3f0:	e004      	b.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a3f2:	bf00      	nop
 800a3f4:	e002      	b.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a3f6:	bf00      	nop
 800a3f8:	e000      	b.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a3fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a400:	2b00      	cmp	r3, #0
 800a402:	d10b      	bne.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a404:	4bb9      	ldr	r3, [pc, #740]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a408:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a40c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a414:	4ab5      	ldr	r2, [pc, #724]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a416:	430b      	orrs	r3, r1
 800a418:	6553      	str	r3, [r2, #84]	@ 0x54
 800a41a:	e003      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a41c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a420:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a430:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a432:	2300      	movs	r3, #0
 800a434:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a436:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a43a:	460b      	mov	r3, r1
 800a43c:	4313      	orrs	r3, r2
 800a43e:	d009      	beq.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a440:	4baa      	ldr	r3, [pc, #680]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a444:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a448:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a44c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a44e:	4aa7      	ldr	r2, [pc, #668]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a450:	430b      	orrs	r3, r1
 800a452:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a460:	653b      	str	r3, [r7, #80]	@ 0x50
 800a462:	2300      	movs	r3, #0
 800a464:	657b      	str	r3, [r7, #84]	@ 0x54
 800a466:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a46a:	460b      	mov	r3, r1
 800a46c:	4313      	orrs	r3, r2
 800a46e:	d009      	beq.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a470:	4b9e      	ldr	r3, [pc, #632]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a474:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a47c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a47e:	4a9b      	ldr	r2, [pc, #620]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a480:	430b      	orrs	r3, r1
 800a482:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800a484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a490:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a492:	2300      	movs	r3, #0
 800a494:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a496:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a49a:	460b      	mov	r3, r1
 800a49c:	4313      	orrs	r3, r2
 800a49e:	d009      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800a4a0:	4b92      	ldr	r3, [pc, #584]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4a4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800a4a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4ae:	4a8f      	ldr	r2, [pc, #572]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4b0:	430b      	orrs	r3, r1
 800a4b2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a4b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4bc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a4c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4c6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	d00e      	beq.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a4d0:	4b86      	ldr	r3, [pc, #536]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	4a85      	ldr	r2, [pc, #532]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a4da:	6113      	str	r3, [r2, #16]
 800a4dc:	4b83      	ldr	r3, [pc, #524]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4de:	6919      	ldr	r1, [r3, #16]
 800a4e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a4e8:	4a80      	ldr	r2, [pc, #512]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4ea:	430b      	orrs	r3, r1
 800a4ec:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a4ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a4fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a500:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a504:	460b      	mov	r3, r1
 800a506:	4313      	orrs	r3, r2
 800a508:	d009      	beq.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a50a:	4b78      	ldr	r3, [pc, #480]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a50c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a50e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a512:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a518:	4a74      	ldr	r2, [pc, #464]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a51a:	430b      	orrs	r3, r1
 800a51c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a51e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a52a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a52c:	2300      	movs	r3, #0
 800a52e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a530:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a534:	460b      	mov	r3, r1
 800a536:	4313      	orrs	r3, r2
 800a538:	d00a      	beq.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a53a:	4b6c      	ldr	r3, [pc, #432]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a53c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a53e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a542:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a546:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a54a:	4a68      	ldr	r2, [pc, #416]	@ (800a6ec <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a54c:	430b      	orrs	r3, r1
 800a54e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a558:	2100      	movs	r1, #0
 800a55a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a55c:	f003 0301 	and.w	r3, r3, #1
 800a560:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a562:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a566:	460b      	mov	r3, r1
 800a568:	4313      	orrs	r3, r2
 800a56a:	d011      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a56c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a570:	3308      	adds	r3, #8
 800a572:	2100      	movs	r1, #0
 800a574:	4618      	mov	r0, r3
 800a576:	f001 f9a3 	bl	800b8c0 <RCCEx_PLL2_Config>
 800a57a:	4603      	mov	r3, r0
 800a57c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a580:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a584:	2b00      	cmp	r3, #0
 800a586:	d003      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a588:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a58c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a590:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a598:	2100      	movs	r1, #0
 800a59a:	6239      	str	r1, [r7, #32]
 800a59c:	f003 0302 	and.w	r3, r3, #2
 800a5a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5a2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	d011      	beq.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5b0:	3308      	adds	r3, #8
 800a5b2:	2101      	movs	r1, #1
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f001 f983 	bl	800b8c0 <RCCEx_PLL2_Config>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a5c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d003      	beq.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a5cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a5d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d8:	2100      	movs	r1, #0
 800a5da:	61b9      	str	r1, [r7, #24]
 800a5dc:	f003 0304 	and.w	r3, r3, #4
 800a5e0:	61fb      	str	r3, [r7, #28]
 800a5e2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	d011      	beq.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5f0:	3308      	adds	r3, #8
 800a5f2:	2102      	movs	r1, #2
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f001 f963 	bl	800b8c0 <RCCEx_PLL2_Config>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a600:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a604:	2b00      	cmp	r3, #0
 800a606:	d003      	beq.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a608:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a60c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a618:	2100      	movs	r1, #0
 800a61a:	6139      	str	r1, [r7, #16]
 800a61c:	f003 0308 	and.w	r3, r3, #8
 800a620:	617b      	str	r3, [r7, #20]
 800a622:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a626:	460b      	mov	r3, r1
 800a628:	4313      	orrs	r3, r2
 800a62a:	d011      	beq.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a62c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a630:	3328      	adds	r3, #40	@ 0x28
 800a632:	2100      	movs	r1, #0
 800a634:	4618      	mov	r0, r3
 800a636:	f001 f9f5 	bl	800ba24 <RCCEx_PLL3_Config>
 800a63a:	4603      	mov	r3, r0
 800a63c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800a640:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a644:	2b00      	cmp	r3, #0
 800a646:	d003      	beq.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a648:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a64c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a650:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a658:	2100      	movs	r1, #0
 800a65a:	60b9      	str	r1, [r7, #8]
 800a65c:	f003 0310 	and.w	r3, r3, #16
 800a660:	60fb      	str	r3, [r7, #12]
 800a662:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a666:	460b      	mov	r3, r1
 800a668:	4313      	orrs	r3, r2
 800a66a:	d011      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a66c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a670:	3328      	adds	r3, #40	@ 0x28
 800a672:	2101      	movs	r1, #1
 800a674:	4618      	mov	r0, r3
 800a676:	f001 f9d5 	bl	800ba24 <RCCEx_PLL3_Config>
 800a67a:	4603      	mov	r3, r0
 800a67c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a680:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a684:	2b00      	cmp	r3, #0
 800a686:	d003      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a688:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a68c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a698:	2100      	movs	r1, #0
 800a69a:	6039      	str	r1, [r7, #0]
 800a69c:	f003 0320 	and.w	r3, r3, #32
 800a6a0:	607b      	str	r3, [r7, #4]
 800a6a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	d011      	beq.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6b0:	3328      	adds	r3, #40	@ 0x28
 800a6b2:	2102      	movs	r1, #2
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f001 f9b5 	bl	800ba24 <RCCEx_PLL3_Config>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a6c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d003      	beq.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800a6d0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d101      	bne.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	e000      	b.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6ea:	bf00      	nop
 800a6ec:	58024400 	.word	0x58024400

0800a6f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b090      	sub	sp, #64	@ 0x40
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a6fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6fe:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a702:	430b      	orrs	r3, r1
 800a704:	f040 8094 	bne.w	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a708:	4b97      	ldr	r3, [pc, #604]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a70a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a70c:	f003 0307 	and.w	r3, r3, #7
 800a710:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a714:	2b04      	cmp	r3, #4
 800a716:	f200 8087 	bhi.w	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a71a:	a201      	add	r2, pc, #4	@ (adr r2, 800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a720:	0800a735 	.word	0x0800a735
 800a724:	0800a75d 	.word	0x0800a75d
 800a728:	0800a785 	.word	0x0800a785
 800a72c:	0800a821 	.word	0x0800a821
 800a730:	0800a7ad 	.word	0x0800a7ad
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a734:	4b8c      	ldr	r3, [pc, #560]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a73c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a740:	d108      	bne.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a746:	4618      	mov	r0, r3
 800a748:	f000 ff68 	bl	800b61c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a750:	f000 bc97 	b.w	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a754:	2300      	movs	r3, #0
 800a756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a758:	f000 bc93 	b.w	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a75c:	4b82      	ldr	r3, [pc, #520]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a764:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a768:	d108      	bne.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a76a:	f107 0318 	add.w	r3, r7, #24
 800a76e:	4618      	mov	r0, r3
 800a770:	f000 fcac 	bl	800b0cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a778:	f000 bc83 	b.w	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a77c:	2300      	movs	r3, #0
 800a77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a780:	f000 bc7f 	b.w	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a784:	4b78      	ldr	r3, [pc, #480]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a78c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a790:	d108      	bne.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a792:	f107 030c 	add.w	r3, r7, #12
 800a796:	4618      	mov	r0, r3
 800a798:	f000 fdec 	bl	800b374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7a0:	f000 bc6f 	b.w	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7a8:	f000 bc6b 	b.w	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7ac:	4b6e      	ldr	r3, [pc, #440]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a7ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a7b4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7b6:	4b6c      	ldr	r3, [pc, #432]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 0304 	and.w	r3, r3, #4
 800a7be:	2b04      	cmp	r3, #4
 800a7c0:	d10c      	bne.n	800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a7c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d109      	bne.n	800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7c8:	4b67      	ldr	r3, [pc, #412]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	08db      	lsrs	r3, r3, #3
 800a7ce:	f003 0303 	and.w	r3, r3, #3
 800a7d2:	4a66      	ldr	r2, [pc, #408]	@ (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a7d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a7d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7da:	e01f      	b.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7dc:	4b62      	ldr	r3, [pc, #392]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7e8:	d106      	bne.n	800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a7ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7f0:	d102      	bne.n	800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a7f2:	4b5f      	ldr	r3, [pc, #380]	@ (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a7f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7f6:	e011      	b.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7f8:	4b5b      	ldr	r3, [pc, #364]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a800:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a804:	d106      	bne.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a808:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a80c:	d102      	bne.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a80e:	4b59      	ldr	r3, [pc, #356]	@ (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800a810:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a812:	e003      	b.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a814:	2300      	movs	r3, #0
 800a816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a818:	f000 bc33 	b.w	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a81c:	f000 bc31 	b.w	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a820:	4b55      	ldr	r3, [pc, #340]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a824:	f000 bc2d 	b.w	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a82c:	f000 bc29 	b.w	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800a830:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a834:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a838:	430b      	orrs	r3, r1
 800a83a:	f040 809f 	bne.w	800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800a83e:	4b4a      	ldr	r3, [pc, #296]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a842:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a846:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a84e:	d04d      	beq.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800a850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a856:	f200 8084 	bhi.w	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a85c:	2bc0      	cmp	r3, #192	@ 0xc0
 800a85e:	d07d      	beq.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800a860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a862:	2bc0      	cmp	r3, #192	@ 0xc0
 800a864:	d87d      	bhi.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a868:	2b80      	cmp	r3, #128	@ 0x80
 800a86a:	d02d      	beq.n	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800a86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a86e:	2b80      	cmp	r3, #128	@ 0x80
 800a870:	d877      	bhi.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a874:	2b00      	cmp	r3, #0
 800a876:	d003      	beq.n	800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800a878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87a:	2b40      	cmp	r3, #64	@ 0x40
 800a87c:	d012      	beq.n	800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800a87e:	e070      	b.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a880:	4b39      	ldr	r3, [pc, #228]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a888:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a88c:	d107      	bne.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a88e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a892:	4618      	mov	r0, r3
 800a894:	f000 fec2 	bl	800b61c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a89c:	e3f1      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8a2:	e3ee      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8a4:	4b30      	ldr	r3, [pc, #192]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8b0:	d107      	bne.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8b2:	f107 0318 	add.w	r3, r7, #24
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f000 fc08 	bl	800b0cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8c0:	e3df      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c6:	e3dc      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8c8:	4b27      	ldr	r3, [pc, #156]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8d4:	d107      	bne.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8d6:	f107 030c 	add.w	r3, r7, #12
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f000 fd4a 	bl	800b374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8e4:	e3cd      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ea:	e3ca      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8ec:	4b1e      	ldr	r3, [pc, #120]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a8ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8f4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8f6:	4b1c      	ldr	r3, [pc, #112]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 0304 	and.w	r3, r3, #4
 800a8fe:	2b04      	cmp	r3, #4
 800a900:	d10c      	bne.n	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800a902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a904:	2b00      	cmp	r3, #0
 800a906:	d109      	bne.n	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a908:	4b17      	ldr	r3, [pc, #92]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	08db      	lsrs	r3, r3, #3
 800a90e:	f003 0303 	and.w	r3, r3, #3
 800a912:	4a16      	ldr	r2, [pc, #88]	@ (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a914:	fa22 f303 	lsr.w	r3, r2, r3
 800a918:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a91a:	e01e      	b.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a91c:	4b12      	ldr	r3, [pc, #72]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a928:	d106      	bne.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800a92a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a92c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a930:	d102      	bne.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a932:	4b0f      	ldr	r3, [pc, #60]	@ (800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a934:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a936:	e010      	b.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a938:	4b0b      	ldr	r3, [pc, #44]	@ (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a940:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a944:	d106      	bne.n	800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a948:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a94c:	d102      	bne.n	800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a94e:	4b09      	ldr	r3, [pc, #36]	@ (800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800a950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a952:	e002      	b.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a954:	2300      	movs	r3, #0
 800a956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a958:	e393      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a95a:	e392      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a95c:	4b06      	ldr	r3, [pc, #24]	@ (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a960:	e38f      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800a962:	2300      	movs	r3, #0
 800a964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a966:	e38c      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a968:	58024400 	.word	0x58024400
 800a96c:	03d09000 	.word	0x03d09000
 800a970:	003d0900 	.word	0x003d0900
 800a974:	017d7840 	.word	0x017d7840
 800a978:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800a97c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a980:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a984:	430b      	orrs	r3, r1
 800a986:	f040 809c 	bne.w	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800a98a:	4b9e      	ldr	r3, [pc, #632]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a98c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a98e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800a992:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a996:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a99a:	d054      	beq.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800a99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a99e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9a2:	f200 808b 	bhi.w	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800a9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a9ac:	f000 8083 	beq.w	800aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800a9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a9b6:	f200 8081 	bhi.w	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9c0:	d02f      	beq.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9c8:	d878      	bhi.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800a9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d004      	beq.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800a9d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9d6:	d012      	beq.n	800a9fe <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800a9d8:	e070      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9da:	4b8a      	ldr	r3, [pc, #552]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9e6:	d107      	bne.n	800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 fe15 	bl	800b61c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9f6:	e344      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9fc:	e341      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9fe:	4b81      	ldr	r3, [pc, #516]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa0a:	d107      	bne.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa0c:	f107 0318 	add.w	r3, r7, #24
 800aa10:	4618      	mov	r0, r3
 800aa12:	f000 fb5b 	bl	800b0cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa1a:	e332      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa20:	e32f      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa22:	4b78      	ldr	r3, [pc, #480]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa2e:	d107      	bne.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa30:	f107 030c 	add.w	r3, r7, #12
 800aa34:	4618      	mov	r0, r3
 800aa36:	f000 fc9d 	bl	800b374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa3e:	e320      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa44:	e31d      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa46:	4b6f      	ldr	r3, [pc, #444]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aa48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa4e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa50:	4b6c      	ldr	r3, [pc, #432]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f003 0304 	and.w	r3, r3, #4
 800aa58:	2b04      	cmp	r3, #4
 800aa5a:	d10c      	bne.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800aa5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d109      	bne.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa62:	4b68      	ldr	r3, [pc, #416]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	08db      	lsrs	r3, r3, #3
 800aa68:	f003 0303 	and.w	r3, r3, #3
 800aa6c:	4a66      	ldr	r2, [pc, #408]	@ (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800aa6e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa74:	e01e      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa76:	4b63      	ldr	r3, [pc, #396]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa82:	d106      	bne.n	800aa92 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800aa84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa8a:	d102      	bne.n	800aa92 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa8c:	4b5f      	ldr	r3, [pc, #380]	@ (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800aa8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa90:	e010      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa92:	4b5c      	ldr	r3, [pc, #368]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa9e:	d106      	bne.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800aaa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaa6:	d102      	bne.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aaa8:	4b59      	ldr	r3, [pc, #356]	@ (800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aaaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaac:	e002      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aaae:	2300      	movs	r3, #0
 800aab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 800aab2:	e2e6      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800aab4:	e2e5      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aab6:	4b57      	ldr	r3, [pc, #348]	@ (800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaba:	e2e2      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800aabc:	2300      	movs	r3, #0
 800aabe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aac0:	e2df      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aac6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800aaca:	430b      	orrs	r3, r1
 800aacc:	f040 80a7 	bne.w	800ac1e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800aad0:	4b4c      	ldr	r3, [pc, #304]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aad4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800aad8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aadc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aae0:	d055      	beq.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800aae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aae8:	f200 8096 	bhi.w	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800aaec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aaf2:	f000 8084 	beq.w	800abfe <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800aaf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aafc:	f200 808c 	bhi.w	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800ab00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab06:	d030      	beq.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800ab08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab0e:	f200 8083 	bhi.w	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800ab12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d004      	beq.n	800ab22 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800ab18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab1e:	d012      	beq.n	800ab46 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800ab20:	e07a      	b.n	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab22:	4b38      	ldr	r3, [pc, #224]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab2e:	d107      	bne.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab34:	4618      	mov	r0, r3
 800ab36:	f000 fd71 	bl	800b61c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab3e:	e2a0      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ab40:	2300      	movs	r3, #0
 800ab42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab44:	e29d      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab46:	4b2f      	ldr	r3, [pc, #188]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab52:	d107      	bne.n	800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab54:	f107 0318 	add.w	r3, r7, #24
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f000 fab7 	bl	800b0cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab62:	e28e      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ab64:	2300      	movs	r3, #0
 800ab66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab68:	e28b      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab6a:	4b26      	ldr	r3, [pc, #152]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab76:	d107      	bne.n	800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab78:	f107 030c 	add.w	r3, r7, #12
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f000 fbf9 	bl	800b374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab86:	e27c      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab8c:	e279      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab8e:	4b1d      	ldr	r3, [pc, #116]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ab90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ab96:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab98:	4b1a      	ldr	r3, [pc, #104]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 0304 	and.w	r3, r3, #4
 800aba0:	2b04      	cmp	r3, #4
 800aba2:	d10c      	bne.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800aba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d109      	bne.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abaa:	4b16      	ldr	r3, [pc, #88]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	08db      	lsrs	r3, r3, #3
 800abb0:	f003 0303 	and.w	r3, r3, #3
 800abb4:	4a14      	ldr	r2, [pc, #80]	@ (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800abb6:	fa22 f303 	lsr.w	r3, r2, r3
 800abba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abbc:	e01e      	b.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abbe:	4b11      	ldr	r3, [pc, #68]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abca:	d106      	bne.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800abcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abd2:	d102      	bne.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800abd4:	4b0d      	ldr	r3, [pc, #52]	@ (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800abd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abd8:	e010      	b.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abda:	4b0a      	ldr	r3, [pc, #40]	@ (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abe2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abe6:	d106      	bne.n	800abf6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800abe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abee:	d102      	bne.n	800abf6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800abf0:	4b07      	ldr	r3, [pc, #28]	@ (800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800abf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abf4:	e002      	b.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800abf6:	2300      	movs	r3, #0
 800abf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800abfa:	e242      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800abfc:	e241      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800abfe:	4b05      	ldr	r3, [pc, #20]	@ (800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac02:	e23e      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ac04:	58024400 	.word	0x58024400
 800ac08:	03d09000 	.word	0x03d09000
 800ac0c:	003d0900 	.word	0x003d0900
 800ac10:	017d7840 	.word	0x017d7840
 800ac14:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac1c:	e231      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ac1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac22:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ac26:	430b      	orrs	r3, r1
 800ac28:	f040 8085 	bne.w	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ac2c:	4b9c      	ldr	r3, [pc, #624]	@ (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac30:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ac34:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ac36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ac3c:	d06b      	beq.n	800ad16 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800ac3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ac44:	d874      	bhi.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800ac46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ac4c:	d056      	beq.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800ac4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ac54:	d86c      	bhi.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800ac56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ac5c:	d03b      	beq.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800ac5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ac64:	d864      	bhi.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800ac66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac6c:	d021      	beq.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800ac6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac74:	d85c      	bhi.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800ac76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d004      	beq.n	800ac86 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac82:	d004      	beq.n	800ac8e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800ac84:	e054      	b.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ac86:	f7fe fb5f 	bl	8009348 <HAL_RCC_GetPCLK1Freq>
 800ac8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac8c:	e1f9      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac8e:	4b84      	ldr	r3, [pc, #528]	@ (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac9a:	d107      	bne.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac9c:	f107 0318 	add.w	r3, r7, #24
 800aca0:	4618      	mov	r0, r3
 800aca2:	f000 fa13 	bl	800b0cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acaa:	e1ea      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800acac:	2300      	movs	r3, #0
 800acae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acb0:	e1e7      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acb2:	4b7b      	ldr	r3, [pc, #492]	@ (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800acba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acbe:	d107      	bne.n	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acc0:	f107 030c 	add.w	r3, r7, #12
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 fb55 	bl	800b374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acce:	e1d8      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acd4:	e1d5      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800acd6:	4b72      	ldr	r3, [pc, #456]	@ (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f003 0304 	and.w	r3, r3, #4
 800acde:	2b04      	cmp	r3, #4
 800ace0:	d109      	bne.n	800acf6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ace2:	4b6f      	ldr	r3, [pc, #444]	@ (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	08db      	lsrs	r3, r3, #3
 800ace8:	f003 0303 	and.w	r3, r3, #3
 800acec:	4a6d      	ldr	r2, [pc, #436]	@ (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800acee:	fa22 f303 	lsr.w	r3, r2, r3
 800acf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acf4:	e1c5      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acfa:	e1c2      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800acfc:	4b68      	ldr	r3, [pc, #416]	@ (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad08:	d102      	bne.n	800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800ad0a:	4b67      	ldr	r3, [pc, #412]	@ (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ad0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad0e:	e1b8      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ad10:	2300      	movs	r3, #0
 800ad12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad14:	e1b5      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad16:	4b62      	ldr	r3, [pc, #392]	@ (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad22:	d102      	bne.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800ad24:	4b61      	ldr	r3, [pc, #388]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800ad26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad28:	e1ab      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad2e:	e1a8      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800ad30:	2300      	movs	r3, #0
 800ad32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad34:	e1a5      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ad36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad3a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ad3e:	430b      	orrs	r3, r1
 800ad40:	d173      	bne.n	800ae2a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ad42:	4b57      	ldr	r3, [pc, #348]	@ (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ad4a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad52:	d02f      	beq.n	800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800ad54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad5a:	d863      	bhi.n	800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800ad5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d004      	beq.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ad62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad68:	d012      	beq.n	800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800ad6a:	e05b      	b.n	800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad6c:	4b4c      	ldr	r3, [pc, #304]	@ (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad78:	d107      	bne.n	800ad8a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad7a:	f107 0318 	add.w	r3, r7, #24
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f000 f9a4 	bl	800b0cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad88:	e17b      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad8e:	e178      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad90:	4b43      	ldr	r3, [pc, #268]	@ (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad9c:	d107      	bne.n	800adae <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad9e:	f107 030c 	add.w	r3, r7, #12
 800ada2:	4618      	mov	r0, r3
 800ada4:	f000 fae6 	bl	800b374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adac:	e169      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800adae:	2300      	movs	r3, #0
 800adb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adb2:	e166      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800adb4:	4b3a      	ldr	r3, [pc, #232]	@ (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800adb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800adbc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800adbe:	4b38      	ldr	r3, [pc, #224]	@ (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 0304 	and.w	r3, r3, #4
 800adc6:	2b04      	cmp	r3, #4
 800adc8:	d10c      	bne.n	800ade4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800adca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d109      	bne.n	800ade4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800add0:	4b33      	ldr	r3, [pc, #204]	@ (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	08db      	lsrs	r3, r3, #3
 800add6:	f003 0303 	and.w	r3, r3, #3
 800adda:	4a32      	ldr	r2, [pc, #200]	@ (800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800addc:	fa22 f303 	lsr.w	r3, r2, r3
 800ade0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ade2:	e01e      	b.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ade4:	4b2e      	ldr	r3, [pc, #184]	@ (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adf0:	d106      	bne.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800adf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adf8:	d102      	bne.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800adfa:	4b2b      	ldr	r3, [pc, #172]	@ (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800adfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800adfe:	e010      	b.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae00:	4b27      	ldr	r3, [pc, #156]	@ (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae0c:	d106      	bne.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800ae0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae14:	d102      	bne.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae16:	4b25      	ldr	r3, [pc, #148]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800ae18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae1a:	e002      	b.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ae20:	e12f      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ae22:	e12e      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800ae24:	2300      	movs	r3, #0
 800ae26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae28:	e12b      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ae2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae2e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ae32:	430b      	orrs	r3, r1
 800ae34:	d13c      	bne.n	800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ae36:	4b1a      	ldr	r3, [pc, #104]	@ (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ae38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae3e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ae40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d004      	beq.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800ae46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae4c:	d012      	beq.n	800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800ae4e:	e023      	b.n	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae50:	4b13      	ldr	r3, [pc, #76]	@ (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae5c:	d107      	bne.n	800ae6e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 fbda 	bl	800b61c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae6c:	e109      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae72:	e106      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae74:	4b0a      	ldr	r3, [pc, #40]	@ (800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae80:	d107      	bne.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae82:	f107 0318 	add.w	r3, r7, #24
 800ae86:	4618      	mov	r0, r3
 800ae88:	f000 f920 	bl	800b0cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ae8c:	6a3b      	ldr	r3, [r7, #32]
 800ae8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae90:	e0f7      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ae92:	2300      	movs	r3, #0
 800ae94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae96:	e0f4      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae9c:	e0f1      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ae9e:	bf00      	nop
 800aea0:	58024400 	.word	0x58024400
 800aea4:	03d09000 	.word	0x03d09000
 800aea8:	003d0900 	.word	0x003d0900
 800aeac:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800aeb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeb4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800aeb8:	430b      	orrs	r3, r1
 800aeba:	f040 8091 	bne.w	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800aebe:	4b73      	ldr	r3, [pc, #460]	@ (800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aec2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800aec6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeca:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800aece:	f000 8081 	beq.w	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800aed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aed4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800aed8:	d87f      	bhi.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800aeda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aedc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aee0:	d06b      	beq.n	800afba <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800aee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aee8:	d877      	bhi.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800aeea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aef0:	d056      	beq.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800aef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aef8:	d86f      	bhi.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800aefa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aefc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af00:	d03b      	beq.n	800af7a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800af02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af08:	d867      	bhi.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800af0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af10:	d021      	beq.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800af12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af18:	d85f      	bhi.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800af1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d004      	beq.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800af20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af26:	d004      	beq.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800af28:	e057      	b.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800af2a:	f000 f8b9 	bl	800b0a0 <HAL_RCCEx_GetD3PCLK1Freq>
 800af2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af30:	e0a7      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af32:	4b56      	ldr	r3, [pc, #344]	@ (800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af3e:	d107      	bne.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af40:	f107 0318 	add.w	r3, r7, #24
 800af44:	4618      	mov	r0, r3
 800af46:	f000 f8c1 	bl	800b0cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af4e:	e098      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af54:	e095      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af56:	4b4d      	ldr	r3, [pc, #308]	@ (800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af62:	d107      	bne.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af64:	f107 030c 	add.w	r3, r7, #12
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 fa03 	bl	800b374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af72:	e086      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800af74:	2300      	movs	r3, #0
 800af76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af78:	e083      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af7a:	4b44      	ldr	r3, [pc, #272]	@ (800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 0304 	and.w	r3, r3, #4
 800af82:	2b04      	cmp	r3, #4
 800af84:	d109      	bne.n	800af9a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af86:	4b41      	ldr	r3, [pc, #260]	@ (800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	08db      	lsrs	r3, r3, #3
 800af8c:	f003 0303 	and.w	r3, r3, #3
 800af90:	4a3f      	ldr	r2, [pc, #252]	@ (800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800af92:	fa22 f303 	lsr.w	r3, r2, r3
 800af96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af98:	e073      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af9e:	e070      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800afa0:	4b3a      	ldr	r3, [pc, #232]	@ (800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afac:	d102      	bne.n	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800afae:	4b39      	ldr	r3, [pc, #228]	@ (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800afb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afb2:	e066      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800afb4:	2300      	movs	r3, #0
 800afb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afb8:	e063      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800afba:	4b34      	ldr	r3, [pc, #208]	@ (800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afc6:	d102      	bne.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800afc8:	4b33      	ldr	r3, [pc, #204]	@ (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800afca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afcc:	e059      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800afce:	2300      	movs	r3, #0
 800afd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afd2:	e056      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800afd4:	4b31      	ldr	r3, [pc, #196]	@ (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800afd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afd8:	e053      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afde:	e050      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800afe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afe4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800afe8:	430b      	orrs	r3, r1
 800afea:	d148      	bne.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800afec:	4b27      	ldr	r3, [pc, #156]	@ (800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800afee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aff0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aff4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800affc:	d02a      	beq.n	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800affe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b004:	d838      	bhi.n	800b078 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d004      	beq.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800b00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b00e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b012:	d00d      	beq.n	800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800b014:	e030      	b.n	800b078 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b016:	4b1d      	ldr	r3, [pc, #116]	@ (800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b01e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b022:	d102      	bne.n	800b02a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800b024:	4b1c      	ldr	r3, [pc, #112]	@ (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800b026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b028:	e02b      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b02a:	2300      	movs	r3, #0
 800b02c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b02e:	e028      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b030:	4b16      	ldr	r3, [pc, #88]	@ (800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b038:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b03c:	d107      	bne.n	800b04e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b03e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b042:	4618      	mov	r0, r3
 800b044:	f000 faea 	bl	800b61c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b04c:	e019      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b04e:	2300      	movs	r3, #0
 800b050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b052:	e016      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b054:	4b0d      	ldr	r3, [pc, #52]	@ (800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b05c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b060:	d107      	bne.n	800b072 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b062:	f107 0318 	add.w	r3, r7, #24
 800b066:	4618      	mov	r0, r3
 800b068:	f000 f830 	bl	800b0cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b070:	e007      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b072:	2300      	movs	r3, #0
 800b074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b076:	e004      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800b078:	2300      	movs	r3, #0
 800b07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b07c:	e001      	b.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800b07e:	2300      	movs	r3, #0
 800b080:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b084:	4618      	mov	r0, r3
 800b086:	3740      	adds	r7, #64	@ 0x40
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	58024400 	.word	0x58024400
 800b090:	03d09000 	.word	0x03d09000
 800b094:	003d0900 	.word	0x003d0900
 800b098:	017d7840 	.word	0x017d7840
 800b09c:	00bb8000 	.word	0x00bb8000

0800b0a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800b0a4:	f7fe f920 	bl	80092e8 <HAL_RCC_GetHCLKFreq>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	4b06      	ldr	r3, [pc, #24]	@ (800b0c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b0ac:	6a1b      	ldr	r3, [r3, #32]
 800b0ae:	091b      	lsrs	r3, r3, #4
 800b0b0:	f003 0307 	and.w	r3, r3, #7
 800b0b4:	4904      	ldr	r1, [pc, #16]	@ (800b0c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b0b6:	5ccb      	ldrb	r3, [r1, r3]
 800b0b8:	f003 031f 	and.w	r3, r3, #31
 800b0bc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	58024400 	.word	0x58024400
 800b0c8:	08012458 	.word	0x08012458

0800b0cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b089      	sub	sp, #36	@ 0x24
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0d4:	4ba1      	ldr	r3, [pc, #644]	@ (800b35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0d8:	f003 0303 	and.w	r3, r3, #3
 800b0dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b0de:	4b9f      	ldr	r3, [pc, #636]	@ (800b35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0e2:	0b1b      	lsrs	r3, r3, #12
 800b0e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b0ea:	4b9c      	ldr	r3, [pc, #624]	@ (800b35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ee:	091b      	lsrs	r3, r3, #4
 800b0f0:	f003 0301 	and.w	r3, r3, #1
 800b0f4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b0f6:	4b99      	ldr	r3, [pc, #612]	@ (800b35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0fa:	08db      	lsrs	r3, r3, #3
 800b0fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b100:	693a      	ldr	r2, [r7, #16]
 800b102:	fb02 f303 	mul.w	r3, r2, r3
 800b106:	ee07 3a90 	vmov	s15, r3
 800b10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b10e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	2b00      	cmp	r3, #0
 800b116:	f000 8111 	beq.w	800b33c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	f000 8083 	beq.w	800b228 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	2b02      	cmp	r3, #2
 800b126:	f200 80a1 	bhi.w	800b26c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d003      	beq.n	800b138 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	2b01      	cmp	r3, #1
 800b134:	d056      	beq.n	800b1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b136:	e099      	b.n	800b26c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b138:	4b88      	ldr	r3, [pc, #544]	@ (800b35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 0320 	and.w	r3, r3, #32
 800b140:	2b00      	cmp	r3, #0
 800b142:	d02d      	beq.n	800b1a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b144:	4b85      	ldr	r3, [pc, #532]	@ (800b35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	08db      	lsrs	r3, r3, #3
 800b14a:	f003 0303 	and.w	r3, r3, #3
 800b14e:	4a84      	ldr	r2, [pc, #528]	@ (800b360 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b150:	fa22 f303 	lsr.w	r3, r2, r3
 800b154:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	ee07 3a90 	vmov	s15, r3
 800b15c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	ee07 3a90 	vmov	s15, r3
 800b166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b16a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b16e:	4b7b      	ldr	r3, [pc, #492]	@ (800b35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b176:	ee07 3a90 	vmov	s15, r3
 800b17a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b17e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b182:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b18a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b18e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b19a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b19e:	e087      	b.n	800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	ee07 3a90 	vmov	s15, r3
 800b1a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b368 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b1ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1b2:	4b6a      	ldr	r3, [pc, #424]	@ (800b35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ba:	ee07 3a90 	vmov	s15, r3
 800b1be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1e2:	e065      	b.n	800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	ee07 3a90 	vmov	s15, r3
 800b1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b36c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b1f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1f6:	4b59      	ldr	r3, [pc, #356]	@ (800b35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1fe:	ee07 3a90 	vmov	s15, r3
 800b202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b206:	ed97 6a03 	vldr	s12, [r7, #12]
 800b20a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b20e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b21a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b21e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b226:	e043      	b.n	800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	ee07 3a90 	vmov	s15, r3
 800b22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b232:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b23a:	4b48      	ldr	r3, [pc, #288]	@ (800b35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b23c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b23e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b242:	ee07 3a90 	vmov	s15, r3
 800b246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b24a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b24e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b25a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b25e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b262:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b26a:	e021      	b.n	800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	ee07 3a90 	vmov	s15, r3
 800b272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b276:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b36c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b27a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b27e:	4b37      	ldr	r3, [pc, #220]	@ (800b35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b286:	ee07 3a90 	vmov	s15, r3
 800b28a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b28e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b292:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b29a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b29e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b2b0:	4b2a      	ldr	r3, [pc, #168]	@ (800b35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2b4:	0a5b      	lsrs	r3, r3, #9
 800b2b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2ba:	ee07 3a90 	vmov	s15, r3
 800b2be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2d6:	ee17 2a90 	vmov	r2, s15
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b2de:	4b1f      	ldr	r3, [pc, #124]	@ (800b35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2e2:	0c1b      	lsrs	r3, r3, #16
 800b2e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2e8:	ee07 3a90 	vmov	s15, r3
 800b2ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b304:	ee17 2a90 	vmov	r2, s15
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b30c:	4b13      	ldr	r3, [pc, #76]	@ (800b35c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b30e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b310:	0e1b      	lsrs	r3, r3, #24
 800b312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b316:	ee07 3a90 	vmov	s15, r3
 800b31a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b31e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b322:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b326:	edd7 6a07 	vldr	s13, [r7, #28]
 800b32a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b32e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b332:	ee17 2a90 	vmov	r2, s15
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b33a:	e008      	b.n	800b34e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	609a      	str	r2, [r3, #8]
}
 800b34e:	bf00      	nop
 800b350:	3724      	adds	r7, #36	@ 0x24
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	58024400 	.word	0x58024400
 800b360:	03d09000 	.word	0x03d09000
 800b364:	46000000 	.word	0x46000000
 800b368:	4c742400 	.word	0x4c742400
 800b36c:	4a742400 	.word	0x4a742400
 800b370:	4bbebc20 	.word	0x4bbebc20

0800b374 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b374:	b480      	push	{r7}
 800b376:	b089      	sub	sp, #36	@ 0x24
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b37c:	4ba1      	ldr	r3, [pc, #644]	@ (800b604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b37e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b380:	f003 0303 	and.w	r3, r3, #3
 800b384:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b386:	4b9f      	ldr	r3, [pc, #636]	@ (800b604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b38a:	0d1b      	lsrs	r3, r3, #20
 800b38c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b390:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b392:	4b9c      	ldr	r3, [pc, #624]	@ (800b604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b396:	0a1b      	lsrs	r3, r3, #8
 800b398:	f003 0301 	and.w	r3, r3, #1
 800b39c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b39e:	4b99      	ldr	r3, [pc, #612]	@ (800b604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3a2:	08db      	lsrs	r3, r3, #3
 800b3a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b3a8:	693a      	ldr	r2, [r7, #16]
 800b3aa:	fb02 f303 	mul.w	r3, r2, r3
 800b3ae:	ee07 3a90 	vmov	s15, r3
 800b3b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f000 8111 	beq.w	800b5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	2b02      	cmp	r3, #2
 800b3c6:	f000 8083 	beq.w	800b4d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	2b02      	cmp	r3, #2
 800b3ce:	f200 80a1 	bhi.w	800b514 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d003      	beq.n	800b3e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d056      	beq.n	800b48c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b3de:	e099      	b.n	800b514 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3e0:	4b88      	ldr	r3, [pc, #544]	@ (800b604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f003 0320 	and.w	r3, r3, #32
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d02d      	beq.n	800b448 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3ec:	4b85      	ldr	r3, [pc, #532]	@ (800b604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	08db      	lsrs	r3, r3, #3
 800b3f2:	f003 0303 	and.w	r3, r3, #3
 800b3f6:	4a84      	ldr	r2, [pc, #528]	@ (800b608 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b3f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b3fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	ee07 3a90 	vmov	s15, r3
 800b404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	ee07 3a90 	vmov	s15, r3
 800b40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b416:	4b7b      	ldr	r3, [pc, #492]	@ (800b604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b41a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b41e:	ee07 3a90 	vmov	s15, r3
 800b422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b426:	ed97 6a03 	vldr	s12, [r7, #12]
 800b42a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b60c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b42e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b43a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b43e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b442:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b446:	e087      	b.n	800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	ee07 3a90 	vmov	s15, r3
 800b44e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b452:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b610 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b45a:	4b6a      	ldr	r3, [pc, #424]	@ (800b604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b45c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b45e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b462:	ee07 3a90 	vmov	s15, r3
 800b466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b46a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b46e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b60c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b47a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b47e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b482:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b48a:	e065      	b.n	800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	ee07 3a90 	vmov	s15, r3
 800b492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b496:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b614 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b49a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b49e:	4b59      	ldr	r3, [pc, #356]	@ (800b604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4a6:	ee07 3a90 	vmov	s15, r3
 800b4aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b60c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4ce:	e043      	b.n	800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	ee07 3a90 	vmov	s15, r3
 800b4d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b4de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4e2:	4b48      	ldr	r3, [pc, #288]	@ (800b604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ea:	ee07 3a90 	vmov	s15, r3
 800b4ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b60c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b50a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b50e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b512:	e021      	b.n	800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	ee07 3a90 	vmov	s15, r3
 800b51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b51e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b614 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b526:	4b37      	ldr	r3, [pc, #220]	@ (800b604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b52a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b52e:	ee07 3a90 	vmov	s15, r3
 800b532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b536:	ed97 6a03 	vldr	s12, [r7, #12]
 800b53a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b60c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b53e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b546:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b54a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b54e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b552:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b556:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b558:	4b2a      	ldr	r3, [pc, #168]	@ (800b604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b55a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b55c:	0a5b      	lsrs	r3, r3, #9
 800b55e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b562:	ee07 3a90 	vmov	s15, r3
 800b566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b56a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b56e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b572:	edd7 6a07 	vldr	s13, [r7, #28]
 800b576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b57a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b57e:	ee17 2a90 	vmov	r2, s15
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b586:	4b1f      	ldr	r3, [pc, #124]	@ (800b604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b58a:	0c1b      	lsrs	r3, r3, #16
 800b58c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b590:	ee07 3a90 	vmov	s15, r3
 800b594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b598:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b59c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5ac:	ee17 2a90 	vmov	r2, s15
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b5b4:	4b13      	ldr	r3, [pc, #76]	@ (800b604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5b8:	0e1b      	lsrs	r3, r3, #24
 800b5ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5be:	ee07 3a90 	vmov	s15, r3
 800b5c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5da:	ee17 2a90 	vmov	r2, s15
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b5e2:	e008      	b.n	800b5f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	609a      	str	r2, [r3, #8]
}
 800b5f6:	bf00      	nop
 800b5f8:	3724      	adds	r7, #36	@ 0x24
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
 800b602:	bf00      	nop
 800b604:	58024400 	.word	0x58024400
 800b608:	03d09000 	.word	0x03d09000
 800b60c:	46000000 	.word	0x46000000
 800b610:	4c742400 	.word	0x4c742400
 800b614:	4a742400 	.word	0x4a742400
 800b618:	4bbebc20 	.word	0x4bbebc20

0800b61c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b089      	sub	sp, #36	@ 0x24
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b624:	4ba0      	ldr	r3, [pc, #640]	@ (800b8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b628:	f003 0303 	and.w	r3, r3, #3
 800b62c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b62e:	4b9e      	ldr	r3, [pc, #632]	@ (800b8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b632:	091b      	lsrs	r3, r3, #4
 800b634:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b638:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b63a:	4b9b      	ldr	r3, [pc, #620]	@ (800b8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b63e:	f003 0301 	and.w	r3, r3, #1
 800b642:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b644:	4b98      	ldr	r3, [pc, #608]	@ (800b8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b648:	08db      	lsrs	r3, r3, #3
 800b64a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b64e:	693a      	ldr	r2, [r7, #16]
 800b650:	fb02 f303 	mul.w	r3, r2, r3
 800b654:	ee07 3a90 	vmov	s15, r3
 800b658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b65c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	2b00      	cmp	r3, #0
 800b664:	f000 8111 	beq.w	800b88a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	2b02      	cmp	r3, #2
 800b66c:	f000 8083 	beq.w	800b776 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	2b02      	cmp	r3, #2
 800b674:	f200 80a1 	bhi.w	800b7ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d003      	beq.n	800b686 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b67e:	69bb      	ldr	r3, [r7, #24]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d056      	beq.n	800b732 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b684:	e099      	b.n	800b7ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b686:	4b88      	ldr	r3, [pc, #544]	@ (800b8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f003 0320 	and.w	r3, r3, #32
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d02d      	beq.n	800b6ee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b692:	4b85      	ldr	r3, [pc, #532]	@ (800b8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	08db      	lsrs	r3, r3, #3
 800b698:	f003 0303 	and.w	r3, r3, #3
 800b69c:	4a83      	ldr	r2, [pc, #524]	@ (800b8ac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b69e:	fa22 f303 	lsr.w	r3, r2, r3
 800b6a2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	ee07 3a90 	vmov	s15, r3
 800b6aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	ee07 3a90 	vmov	s15, r3
 800b6b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6bc:	4b7a      	ldr	r3, [pc, #488]	@ (800b8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6c4:	ee07 3a90 	vmov	s15, r3
 800b6c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6d0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b6d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6e8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b6ec:	e087      	b.n	800b7fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	ee07 3a90 	vmov	s15, r3
 800b6f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6f8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b8b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b6fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b700:	4b69      	ldr	r3, [pc, #420]	@ (800b8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b708:	ee07 3a90 	vmov	s15, r3
 800b70c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b710:	ed97 6a03 	vldr	s12, [r7, #12]
 800b714:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b71c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b720:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b72c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b730:	e065      	b.n	800b7fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	ee07 3a90 	vmov	s15, r3
 800b738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b73c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b8b8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b744:	4b58      	ldr	r3, [pc, #352]	@ (800b8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b74c:	ee07 3a90 	vmov	s15, r3
 800b750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b754:	ed97 6a03 	vldr	s12, [r7, #12]
 800b758:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b75c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b764:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b76c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b770:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b774:	e043      	b.n	800b7fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	ee07 3a90 	vmov	s15, r3
 800b77c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b780:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b788:	4b47      	ldr	r3, [pc, #284]	@ (800b8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b78a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b78c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b790:	ee07 3a90 	vmov	s15, r3
 800b794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b798:	ed97 6a03 	vldr	s12, [r7, #12]
 800b79c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7b8:	e021      	b.n	800b7fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	ee07 3a90 	vmov	s15, r3
 800b7c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b8b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b7c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7cc:	4b36      	ldr	r3, [pc, #216]	@ (800b8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7d4:	ee07 3a90 	vmov	s15, r3
 800b7d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7e0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7fc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b7fe:	4b2a      	ldr	r3, [pc, #168]	@ (800b8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b802:	0a5b      	lsrs	r3, r3, #9
 800b804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b808:	ee07 3a90 	vmov	s15, r3
 800b80c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b810:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b814:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b818:	edd7 6a07 	vldr	s13, [r7, #28]
 800b81c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b824:	ee17 2a90 	vmov	r2, s15
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b82c:	4b1e      	ldr	r3, [pc, #120]	@ (800b8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b82e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b830:	0c1b      	lsrs	r3, r3, #16
 800b832:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b836:	ee07 3a90 	vmov	s15, r3
 800b83a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b83e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b842:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b846:	edd7 6a07 	vldr	s13, [r7, #28]
 800b84a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b84e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b852:	ee17 2a90 	vmov	r2, s15
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b85a:	4b13      	ldr	r3, [pc, #76]	@ (800b8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b85c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b85e:	0e1b      	lsrs	r3, r3, #24
 800b860:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b864:	ee07 3a90 	vmov	s15, r3
 800b868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b86c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b870:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b874:	edd7 6a07 	vldr	s13, [r7, #28]
 800b878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b87c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b880:	ee17 2a90 	vmov	r2, s15
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b888:	e008      	b.n	800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	609a      	str	r2, [r3, #8]
}
 800b89c:	bf00      	nop
 800b89e:	3724      	adds	r7, #36	@ 0x24
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr
 800b8a8:	58024400 	.word	0x58024400
 800b8ac:	03d09000 	.word	0x03d09000
 800b8b0:	46000000 	.word	0x46000000
 800b8b4:	4c742400 	.word	0x4c742400
 800b8b8:	4a742400 	.word	0x4a742400
 800b8bc:	4bbebc20 	.word	0x4bbebc20

0800b8c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b8ce:	4b53      	ldr	r3, [pc, #332]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b8d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8d2:	f003 0303 	and.w	r3, r3, #3
 800b8d6:	2b03      	cmp	r3, #3
 800b8d8:	d101      	bne.n	800b8de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e099      	b.n	800ba12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b8de:	4b4f      	ldr	r3, [pc, #316]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a4e      	ldr	r2, [pc, #312]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b8e4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b8e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8ea:	f7f7 f8d9 	bl	8002aa0 <HAL_GetTick>
 800b8ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b8f0:	e008      	b.n	800b904 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b8f2:	f7f7 f8d5 	bl	8002aa0 <HAL_GetTick>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	1ad3      	subs	r3, r2, r3
 800b8fc:	2b02      	cmp	r3, #2
 800b8fe:	d901      	bls.n	800b904 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b900:	2303      	movs	r3, #3
 800b902:	e086      	b.n	800ba12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b904:	4b45      	ldr	r3, [pc, #276]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1f0      	bne.n	800b8f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b910:	4b42      	ldr	r3, [pc, #264]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b914:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	031b      	lsls	r3, r3, #12
 800b91e:	493f      	ldr	r1, [pc, #252]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b920:	4313      	orrs	r3, r2
 800b922:	628b      	str	r3, [r1, #40]	@ 0x28
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	3b01      	subs	r3, #1
 800b92a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	689b      	ldr	r3, [r3, #8]
 800b932:	3b01      	subs	r3, #1
 800b934:	025b      	lsls	r3, r3, #9
 800b936:	b29b      	uxth	r3, r3
 800b938:	431a      	orrs	r2, r3
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	3b01      	subs	r3, #1
 800b940:	041b      	lsls	r3, r3, #16
 800b942:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b946:	431a      	orrs	r2, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	691b      	ldr	r3, [r3, #16]
 800b94c:	3b01      	subs	r3, #1
 800b94e:	061b      	lsls	r3, r3, #24
 800b950:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b954:	4931      	ldr	r1, [pc, #196]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b956:	4313      	orrs	r3, r2
 800b958:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b95a:	4b30      	ldr	r3, [pc, #192]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b95e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	695b      	ldr	r3, [r3, #20]
 800b966:	492d      	ldr	r1, [pc, #180]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b968:	4313      	orrs	r3, r2
 800b96a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b96c:	4b2b      	ldr	r3, [pc, #172]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b96e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b970:	f023 0220 	bic.w	r2, r3, #32
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	699b      	ldr	r3, [r3, #24]
 800b978:	4928      	ldr	r1, [pc, #160]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b97a:	4313      	orrs	r3, r2
 800b97c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b97e:	4b27      	ldr	r3, [pc, #156]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b982:	4a26      	ldr	r2, [pc, #152]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b984:	f023 0310 	bic.w	r3, r3, #16
 800b988:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b98a:	4b24      	ldr	r3, [pc, #144]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b98c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b98e:	4b24      	ldr	r3, [pc, #144]	@ (800ba20 <RCCEx_PLL2_Config+0x160>)
 800b990:	4013      	ands	r3, r2
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	69d2      	ldr	r2, [r2, #28]
 800b996:	00d2      	lsls	r2, r2, #3
 800b998:	4920      	ldr	r1, [pc, #128]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b99a:	4313      	orrs	r3, r2
 800b99c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b99e:	4b1f      	ldr	r3, [pc, #124]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a2:	4a1e      	ldr	r2, [pc, #120]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b9a4:	f043 0310 	orr.w	r3, r3, #16
 800b9a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d106      	bne.n	800b9be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b9b0:	4b1a      	ldr	r3, [pc, #104]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b9b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9b4:	4a19      	ldr	r2, [pc, #100]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b9b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b9ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b9bc:	e00f      	b.n	800b9de <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d106      	bne.n	800b9d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b9c4:	4b15      	ldr	r3, [pc, #84]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c8:	4a14      	ldr	r2, [pc, #80]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b9ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b9ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b9d0:	e005      	b.n	800b9de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b9d2:	4b12      	ldr	r3, [pc, #72]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b9d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9d6:	4a11      	ldr	r2, [pc, #68]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b9d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b9dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b9de:	4b0f      	ldr	r3, [pc, #60]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a0e      	ldr	r2, [pc, #56]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800b9e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b9e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9ea:	f7f7 f859 	bl	8002aa0 <HAL_GetTick>
 800b9ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b9f0:	e008      	b.n	800ba04 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b9f2:	f7f7 f855 	bl	8002aa0 <HAL_GetTick>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	1ad3      	subs	r3, r2, r3
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	d901      	bls.n	800ba04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba00:	2303      	movs	r3, #3
 800ba02:	e006      	b.n	800ba12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba04:	4b05      	ldr	r3, [pc, #20]	@ (800ba1c <RCCEx_PLL2_Config+0x15c>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d0f0      	beq.n	800b9f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ba10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3710      	adds	r7, #16
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	58024400 	.word	0x58024400
 800ba20:	ffff0007 	.word	0xffff0007

0800ba24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ba32:	4b53      	ldr	r3, [pc, #332]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800ba34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba36:	f003 0303 	and.w	r3, r3, #3
 800ba3a:	2b03      	cmp	r3, #3
 800ba3c:	d101      	bne.n	800ba42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e099      	b.n	800bb76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ba42:	4b4f      	ldr	r3, [pc, #316]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a4e      	ldr	r2, [pc, #312]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800ba48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba4e:	f7f7 f827 	bl	8002aa0 <HAL_GetTick>
 800ba52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ba54:	e008      	b.n	800ba68 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba56:	f7f7 f823 	bl	8002aa0 <HAL_GetTick>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	2b02      	cmp	r3, #2
 800ba62:	d901      	bls.n	800ba68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ba64:	2303      	movs	r3, #3
 800ba66:	e086      	b.n	800bb76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ba68:	4b45      	ldr	r3, [pc, #276]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1f0      	bne.n	800ba56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ba74:	4b42      	ldr	r3, [pc, #264]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800ba76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba78:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	051b      	lsls	r3, r3, #20
 800ba82:	493f      	ldr	r1, [pc, #252]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800ba84:	4313      	orrs	r3, r2
 800ba86:	628b      	str	r3, [r1, #40]	@ 0x28
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	3b01      	subs	r3, #1
 800ba8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	3b01      	subs	r3, #1
 800ba98:	025b      	lsls	r3, r3, #9
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	431a      	orrs	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	3b01      	subs	r3, #1
 800baa4:	041b      	lsls	r3, r3, #16
 800baa6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800baaa:	431a      	orrs	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	691b      	ldr	r3, [r3, #16]
 800bab0:	3b01      	subs	r3, #1
 800bab2:	061b      	lsls	r3, r3, #24
 800bab4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bab8:	4931      	ldr	r1, [pc, #196]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800baba:	4313      	orrs	r3, r2
 800babc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800babe:	4b30      	ldr	r3, [pc, #192]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800bac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	695b      	ldr	r3, [r3, #20]
 800baca:	492d      	ldr	r1, [pc, #180]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800bacc:	4313      	orrs	r3, r2
 800bace:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bad0:	4b2b      	ldr	r3, [pc, #172]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800bad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bad4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	699b      	ldr	r3, [r3, #24]
 800badc:	4928      	ldr	r1, [pc, #160]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800bade:	4313      	orrs	r3, r2
 800bae0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bae2:	4b27      	ldr	r3, [pc, #156]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800bae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bae6:	4a26      	ldr	r2, [pc, #152]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800bae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800baec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800baee:	4b24      	ldr	r3, [pc, #144]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800baf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800baf2:	4b24      	ldr	r3, [pc, #144]	@ (800bb84 <RCCEx_PLL3_Config+0x160>)
 800baf4:	4013      	ands	r3, r2
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	69d2      	ldr	r2, [r2, #28]
 800bafa:	00d2      	lsls	r2, r2, #3
 800bafc:	4920      	ldr	r1, [pc, #128]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800bafe:	4313      	orrs	r3, r2
 800bb00:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bb02:	4b1f      	ldr	r3, [pc, #124]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800bb04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb06:	4a1e      	ldr	r2, [pc, #120]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800bb08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d106      	bne.n	800bb22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bb14:	4b1a      	ldr	r3, [pc, #104]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800bb16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb18:	4a19      	ldr	r2, [pc, #100]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800bb1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bb1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bb20:	e00f      	b.n	800bb42 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d106      	bne.n	800bb36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bb28:	4b15      	ldr	r3, [pc, #84]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800bb2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb2c:	4a14      	ldr	r2, [pc, #80]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800bb2e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bb32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bb34:	e005      	b.n	800bb42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bb36:	4b12      	ldr	r3, [pc, #72]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800bb38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb3a:	4a11      	ldr	r2, [pc, #68]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800bb3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bb40:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bb42:	4b0f      	ldr	r3, [pc, #60]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a0e      	ldr	r2, [pc, #56]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800bb48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb4e:	f7f6 ffa7 	bl	8002aa0 <HAL_GetTick>
 800bb52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bb54:	e008      	b.n	800bb68 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bb56:	f7f6 ffa3 	bl	8002aa0 <HAL_GetTick>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	2b02      	cmp	r3, #2
 800bb62:	d901      	bls.n	800bb68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bb64:	2303      	movs	r3, #3
 800bb66:	e006      	b.n	800bb76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bb68:	4b05      	ldr	r3, [pc, #20]	@ (800bb80 <RCCEx_PLL3_Config+0x15c>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d0f0      	beq.n	800bb56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bb74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	58024400 	.word	0x58024400
 800bb84:	ffff0007 	.word	0xffff0007

0800bb88 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bb90:	2301      	movs	r3, #1
 800bb92:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d074      	beq.n	800bc84 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d106      	bne.n	800bbb4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f7f6 fd72 	bl	8002698 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2202      	movs	r2, #2
 800bbb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	f003 0310 	and.w	r3, r3, #16
 800bbc6:	2b10      	cmp	r3, #16
 800bbc8:	d053      	beq.n	800bc72 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	22ca      	movs	r2, #202	@ 0xca
 800bbd0:	625a      	str	r2, [r3, #36]	@ 0x24
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2253      	movs	r2, #83	@ 0x53
 800bbd8:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 fa4e 	bl	800c07c <RTC_EnterInitMode>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800bbe4:	7bfb      	ldrb	r3, [r7, #15]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d124      	bne.n	800bc34 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	6999      	ldr	r1, [r3, #24]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	4b26      	ldr	r3, [pc, #152]	@ (800bc90 <HAL_RTC_Init+0x108>)
 800bbf6:	400b      	ands	r3, r1
 800bbf8:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	6999      	ldr	r1, [r3, #24]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	685a      	ldr	r2, [r3, #4]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	691b      	ldr	r3, [r3, #16]
 800bc08:	431a      	orrs	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	699b      	ldr	r3, [r3, #24]
 800bc0e:	431a      	orrs	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	430a      	orrs	r2, r1
 800bc16:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	0419      	lsls	r1, r3, #16
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	68da      	ldr	r2, [r3, #12]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	430a      	orrs	r2, r1
 800bc28:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 fa5c 	bl	800c0e8 <RTC_ExitInitMode>
 800bc30:	4603      	mov	r3, r0
 800bc32:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800bc34:	7bfb      	ldrb	r3, [r7, #15]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d116      	bne.n	800bc68 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	699a      	ldr	r2, [r3, #24]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f022 4260 	bic.w	r2, r2, #3758096384	@ 0xe0000000
 800bc48:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	6999      	ldr	r1, [r3, #24]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6a1a      	ldr	r2, [r3, #32]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	69db      	ldr	r3, [r3, #28]
 800bc58:	431a      	orrs	r2, r3
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	695b      	ldr	r3, [r3, #20]
 800bc5e:	431a      	orrs	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	430a      	orrs	r2, r1
 800bc66:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	22ff      	movs	r2, #255	@ 0xff
 800bc6e:	625a      	str	r2, [r3, #36]	@ 0x24
 800bc70:	e001      	b.n	800bc76 <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800bc72:	2300      	movs	r3, #0
 800bc74:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800bc76:	7bfb      	ldrb	r3, [r7, #15]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d103      	bne.n	800bc84 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  /* return status */
  return status;
 800bc84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	fb8fffbf 	.word	0xfb8fffbf

0800bc94 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bc94:	b590      	push	{r4, r7, lr}
 800bc96:	b087      	sub	sp, #28
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d101      	bne.n	800bcae <HAL_RTC_SetTime+0x1a>
 800bcaa:	2302      	movs	r3, #2
 800bcac:	e089      	b.n	800bdc2 <HAL_RTC_SetTime+0x12e>
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2202      	movs	r2, #2
 800bcba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	22ca      	movs	r2, #202	@ 0xca
 800bcc4:	625a      	str	r2, [r3, #36]	@ 0x24
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	2253      	movs	r2, #83	@ 0x53
 800bccc:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	f000 f9d4 	bl	800c07c <RTC_EnterInitMode>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800bcd8:	7cfb      	ldrb	r3, [r7, #19]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d161      	bne.n	800bda2 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d126      	bne.n	800bd32 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	699b      	ldr	r3, [r3, #24]
 800bcea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d102      	bne.n	800bcf8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f000 fa31 	bl	800c164 <RTC_ByteToBcd2>
 800bd02:	4603      	mov	r3, r0
 800bd04:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	785b      	ldrb	r3, [r3, #1]
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f000 fa2a 	bl	800c164 <RTC_ByteToBcd2>
 800bd10:	4603      	mov	r3, r0
 800bd12:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bd14:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	789b      	ldrb	r3, [r3, #2]
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f000 fa22 	bl	800c164 <RTC_ByteToBcd2>
 800bd20:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bd22:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	78db      	ldrb	r3, [r3, #3]
 800bd2a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	617b      	str	r3, [r7, #20]
 800bd30:	e018      	b.n	800bd64 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	699b      	ldr	r3, [r3, #24]
 800bd38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d102      	bne.n	800bd46 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	2200      	movs	r2, #0
 800bd44:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	785b      	ldrb	r3, [r3, #1]
 800bd50:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bd52:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800bd54:	68ba      	ldr	r2, [r7, #8]
 800bd56:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bd58:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	78db      	ldrb	r3, [r3, #3]
 800bd5e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bd60:	4313      	orrs	r3, r2
 800bd62:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	6979      	ldr	r1, [r7, #20]
 800bd6a:	4b18      	ldr	r3, [pc, #96]	@ (800bdcc <HAL_RTC_SetTime+0x138>)
 800bd6c:	400b      	ands	r3, r1
 800bd6e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	699a      	ldr	r2, [r3, #24]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800bd7e:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	6999      	ldr	r1, [r3, #24]
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	68da      	ldr	r2, [r3, #12]
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	431a      	orrs	r2, r3
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	430a      	orrs	r2, r1
 800bd96:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f000 f9a5 	bl	800c0e8 <RTC_ExitInitMode>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	22ff      	movs	r2, #255	@ 0xff
 800bda8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800bdaa:	7cfb      	ldrb	r3, [r7, #19]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d103      	bne.n	800bdb8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800bdc0:	7cfb      	ldrb	r3, [r7, #19]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	371c      	adds	r7, #28
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd90      	pop	{r4, r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	007f7f7f 	.word	0x007f7f7f

0800bdd0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b086      	sub	sp, #24
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	689a      	ldr	r2, [r3, #8]
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	691b      	ldr	r3, [r3, #16]
 800bdec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	4b22      	ldr	r3, [pc, #136]	@ (800be84 <HAL_RTC_GetTime+0xb4>)
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	0c1b      	lsrs	r3, r3, #16
 800be04:	b2db      	uxtb	r3, r3
 800be06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be0a:	b2da      	uxtb	r2, r3
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	0a1b      	lsrs	r3, r3, #8
 800be14:	b2db      	uxtb	r3, r3
 800be16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be1a:	b2da      	uxtb	r2, r3
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	b2db      	uxtb	r3, r3
 800be24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be28:	b2da      	uxtb	r2, r3
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	0d9b      	lsrs	r3, r3, #22
 800be32:	b2db      	uxtb	r3, r3
 800be34:	f003 0301 	and.w	r3, r3, #1
 800be38:	b2da      	uxtb	r2, r3
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d11a      	bne.n	800be7a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	4618      	mov	r0, r3
 800be4a:	f000 f9ab 	bl	800c1a4 <RTC_Bcd2ToByte>
 800be4e:	4603      	mov	r3, r0
 800be50:	461a      	mov	r2, r3
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	785b      	ldrb	r3, [r3, #1]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f000 f9a2 	bl	800c1a4 <RTC_Bcd2ToByte>
 800be60:	4603      	mov	r3, r0
 800be62:	461a      	mov	r2, r3
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	789b      	ldrb	r3, [r3, #2]
 800be6c:	4618      	mov	r0, r3
 800be6e:	f000 f999 	bl	800c1a4 <RTC_Bcd2ToByte>
 800be72:	4603      	mov	r3, r0
 800be74:	461a      	mov	r2, r3
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3718      	adds	r7, #24
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	007f7f7f 	.word	0x007f7f7f

0800be88 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800be88:	b590      	push	{r4, r7, lr}
 800be8a:	b087      	sub	sp, #28
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d101      	bne.n	800bea2 <HAL_RTC_SetDate+0x1a>
 800be9e:	2302      	movs	r3, #2
 800bea0:	e073      	b.n	800bf8a <HAL_RTC_SetDate+0x102>
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2201      	movs	r2, #1
 800bea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2202      	movs	r2, #2
 800beae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d10e      	bne.n	800bed6 <HAL_RTC_SetDate+0x4e>
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	785b      	ldrb	r3, [r3, #1]
 800bebc:	f003 0310 	and.w	r3, r3, #16
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d008      	beq.n	800bed6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	785b      	ldrb	r3, [r3, #1]
 800bec8:	f023 0310 	bic.w	r3, r3, #16
 800becc:	b2db      	uxtb	r3, r3
 800bece:	330a      	adds	r3, #10
 800bed0:	b2da      	uxtb	r2, r3
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d11c      	bne.n	800bf16 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	78db      	ldrb	r3, [r3, #3]
 800bee0:	4618      	mov	r0, r3
 800bee2:	f000 f93f 	bl	800c164 <RTC_ByteToBcd2>
 800bee6:	4603      	mov	r3, r0
 800bee8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	785b      	ldrb	r3, [r3, #1]
 800beee:	4618      	mov	r0, r3
 800bef0:	f000 f938 	bl	800c164 <RTC_ByteToBcd2>
 800bef4:	4603      	mov	r3, r0
 800bef6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bef8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	789b      	ldrb	r3, [r3, #2]
 800befe:	4618      	mov	r0, r3
 800bf00:	f000 f930 	bl	800c164 <RTC_ByteToBcd2>
 800bf04:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bf06:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bf10:	4313      	orrs	r3, r2
 800bf12:	617b      	str	r3, [r7, #20]
 800bf14:	e00e      	b.n	800bf34 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	78db      	ldrb	r3, [r3, #3]
 800bf1a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	785b      	ldrb	r3, [r3, #1]
 800bf20:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bf22:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bf28:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bf30:	4313      	orrs	r3, r2
 800bf32:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	22ca      	movs	r2, #202	@ 0xca
 800bf3a:	625a      	str	r2, [r3, #36]	@ 0x24
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2253      	movs	r2, #83	@ 0x53
 800bf42:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bf44:	68f8      	ldr	r0, [r7, #12]
 800bf46:	f000 f899 	bl	800c07c <RTC_EnterInitMode>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800bf4e:	7cfb      	ldrb	r3, [r7, #19]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d10a      	bne.n	800bf6a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	6979      	ldr	r1, [r7, #20]
 800bf5a:	4b0e      	ldr	r3, [pc, #56]	@ (800bf94 <HAL_RTC_SetDate+0x10c>)
 800bf5c:	400b      	ands	r3, r1
 800bf5e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bf60:	68f8      	ldr	r0, [r7, #12]
 800bf62:	f000 f8c1 	bl	800c0e8 <RTC_ExitInitMode>
 800bf66:	4603      	mov	r3, r0
 800bf68:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	22ff      	movs	r2, #255	@ 0xff
 800bf70:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800bf72:	7cfb      	ldrb	r3, [r7, #19]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d103      	bne.n	800bf80 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2200      	movs	r2, #0
 800bf84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800bf88:	7cfb      	ldrb	r3, [r7, #19]


}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	371c      	adds	r7, #28
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd90      	pop	{r4, r7, pc}
 800bf92:	bf00      	nop
 800bf94:	00ffff3f 	.word	0x00ffff3f

0800bf98 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b086      	sub	sp, #24
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	685a      	ldr	r2, [r3, #4]
 800bfaa:	4b21      	ldr	r3, [pc, #132]	@ (800c030 <HAL_RTC_GetDate+0x98>)
 800bfac:	4013      	ands	r3, r2
 800bfae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	0c1b      	lsrs	r3, r3, #16
 800bfb4:	b2da      	uxtb	r2, r3
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	0a1b      	lsrs	r3, r3, #8
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	f003 031f 	and.w	r3, r3, #31
 800bfc4:	b2da      	uxtb	r2, r3
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bfd2:	b2da      	uxtb	r2, r3
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	0b5b      	lsrs	r3, r3, #13
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	f003 0307 	and.w	r3, r3, #7
 800bfe2:	b2da      	uxtb	r2, r3
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d11a      	bne.n	800c024 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	78db      	ldrb	r3, [r3, #3]
 800bff2:	4618      	mov	r0, r3
 800bff4:	f000 f8d6 	bl	800c1a4 <RTC_Bcd2ToByte>
 800bff8:	4603      	mov	r3, r0
 800bffa:	461a      	mov	r2, r3
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	785b      	ldrb	r3, [r3, #1]
 800c004:	4618      	mov	r0, r3
 800c006:	f000 f8cd 	bl	800c1a4 <RTC_Bcd2ToByte>
 800c00a:	4603      	mov	r3, r0
 800c00c:	461a      	mov	r2, r3
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	789b      	ldrb	r3, [r3, #2]
 800c016:	4618      	mov	r0, r3
 800c018:	f000 f8c4 	bl	800c1a4 <RTC_Bcd2ToByte>
 800c01c:	4603      	mov	r3, r0
 800c01e:	461a      	mov	r2, r3
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3718      	adds	r7, #24
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	00ffff3f 	.word	0x00ffff3f

0800c034 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4a0d      	ldr	r2, [pc, #52]	@ (800c078 <HAL_RTC_WaitForSynchro+0x44>)
 800c042:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800c044:	f7f6 fd2c 	bl	8002aa0 <HAL_GetTick>
 800c048:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800c04a:	e009      	b.n	800c060 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c04c:	f7f6 fd28 	bl	8002aa0 <HAL_GetTick>
 800c050:	4602      	mov	r2, r0
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	1ad3      	subs	r3, r2, r3
 800c056:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c05a:	d901      	bls.n	800c060 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800c05c:	2303      	movs	r3, #3
 800c05e:	e007      	b.n	800c070 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	f003 0320 	and.w	r3, r3, #32
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d0ee      	beq.n	800c04c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800c06e:	2300      	movs	r3, #0
}
 800c070:	4618      	mov	r0, r3
 800c072:	3710      	adds	r7, #16
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	0001005f 	.word	0x0001005f

0800c07c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c084:	2300      	movs	r3, #0
 800c086:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	68db      	ldr	r3, [r3, #12]
 800c08e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c092:	2b00      	cmp	r3, #0
 800c094:	d123      	bne.n	800c0de <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68da      	ldr	r2, [r3, #12]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c0a4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c0a6:	f7f6 fcfb 	bl	8002aa0 <HAL_GetTick>
 800c0aa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c0ac:	e00d      	b.n	800c0ca <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c0ae:	f7f6 fcf7 	bl	8002aa0 <HAL_GetTick>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	1ad3      	subs	r3, r2, r3
 800c0b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c0bc:	d905      	bls.n	800c0ca <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800c0be:	2303      	movs	r3, #3
 800c0c0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2203      	movs	r2, #3
 800c0c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68db      	ldr	r3, [r3, #12]
 800c0d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d102      	bne.n	800c0de <RTC_EnterInitMode+0x62>
 800c0d8:	7bfb      	ldrb	r3, [r7, #15]
 800c0da:	2b03      	cmp	r3, #3
 800c0dc:	d1e7      	bne.n	800c0ae <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800c0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c0f4:	4b1a      	ldr	r3, [pc, #104]	@ (800c160 <RTC_ExitInitMode+0x78>)
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	4a19      	ldr	r2, [pc, #100]	@ (800c160 <RTC_ExitInitMode+0x78>)
 800c0fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0fe:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c100:	4b17      	ldr	r3, [pc, #92]	@ (800c160 <RTC_ExitInitMode+0x78>)
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	f003 0320 	and.w	r3, r3, #32
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10c      	bne.n	800c126 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f7ff ff91 	bl	800c034 <HAL_RTC_WaitForSynchro>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d01e      	beq.n	800c156 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2203      	movs	r2, #3
 800c11c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800c120:	2303      	movs	r3, #3
 800c122:	73fb      	strb	r3, [r7, #15]
 800c124:	e017      	b.n	800c156 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c126:	4b0e      	ldr	r3, [pc, #56]	@ (800c160 <RTC_ExitInitMode+0x78>)
 800c128:	699b      	ldr	r3, [r3, #24]
 800c12a:	4a0d      	ldr	r2, [pc, #52]	@ (800c160 <RTC_ExitInitMode+0x78>)
 800c12c:	f023 0320 	bic.w	r3, r3, #32
 800c130:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f7ff ff7e 	bl	800c034 <HAL_RTC_WaitForSynchro>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d005      	beq.n	800c14a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2203      	movs	r2, #3
 800c142:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800c146:	2303      	movs	r3, #3
 800c148:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c14a:	4b05      	ldr	r3, [pc, #20]	@ (800c160 <RTC_ExitInitMode+0x78>)
 800c14c:	699b      	ldr	r3, [r3, #24]
 800c14e:	4a04      	ldr	r2, [pc, #16]	@ (800c160 <RTC_ExitInitMode+0x78>)
 800c150:	f043 0320 	orr.w	r3, r3, #32
 800c154:	6193      	str	r3, [r2, #24]
  }

  return status;
 800c156:	7bfb      	ldrb	r3, [r7, #15]
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3710      	adds	r7, #16
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	58004000 	.word	0x58004000

0800c164 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c164:	b480      	push	{r7}
 800c166:	b085      	sub	sp, #20
 800c168:	af00      	add	r7, sp, #0
 800c16a:	4603      	mov	r3, r0
 800c16c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c16e:	2300      	movs	r3, #0
 800c170:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800c172:	79fb      	ldrb	r3, [r7, #7]
 800c174:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800c176:	e005      	b.n	800c184 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	3301      	adds	r3, #1
 800c17c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800c17e:	7afb      	ldrb	r3, [r7, #11]
 800c180:	3b0a      	subs	r3, #10
 800c182:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800c184:	7afb      	ldrb	r3, [r7, #11]
 800c186:	2b09      	cmp	r3, #9
 800c188:	d8f6      	bhi.n	800c178 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	011b      	lsls	r3, r3, #4
 800c190:	b2da      	uxtb	r2, r3
 800c192:	7afb      	ldrb	r3, [r7, #11]
 800c194:	4313      	orrs	r3, r2
 800c196:	b2db      	uxtb	r3, r3
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3714      	adds	r7, #20
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800c1ae:	79fb      	ldrb	r3, [r7, #7]
 800c1b0:	091b      	lsrs	r3, r3, #4
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	0092      	lsls	r2, r2, #2
 800c1b8:	4413      	add	r3, r2
 800c1ba:	005b      	lsls	r3, r3, #1
 800c1bc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800c1be:	79fb      	ldrb	r3, [r7, #7]
 800c1c0:	f003 030f 	and.w	r3, r3, #15
 800c1c4:	b2da      	uxtb	r2, r3
 800c1c6:	7bfb      	ldrb	r3, [r7, #15]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	b2db      	uxtb	r3, r3
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3714      	adds	r7, #20
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b08a      	sub	sp, #40	@ 0x28
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d101      	bne.n	800c1ea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e075      	b.n	800c2d6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d105      	bne.n	800c202 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f7f6 f8dd 	bl	80023bc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2204      	movs	r2, #4
 800c206:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 f868 	bl	800c2e0 <HAL_SD_InitCard>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d001      	beq.n	800c21a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c216:	2301      	movs	r3, #1
 800c218:	e05d      	b.n	800c2d6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c21a:	f107 0308 	add.w	r3, r7, #8
 800c21e:	4619      	mov	r1, r3
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 fdb5 	bl	800cd90 <HAL_SD_GetCardStatus>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d001      	beq.n	800c230 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c22c:	2301      	movs	r3, #1
 800c22e:	e052      	b.n	800c2d6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c230:	7e3b      	ldrb	r3, [r7, #24]
 800c232:	b2db      	uxtb	r3, r3
 800c234:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c236:	7e7b      	ldrb	r3, [r7, #25]
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c240:	2b01      	cmp	r3, #1
 800c242:	d10a      	bne.n	800c25a <HAL_SD_Init+0x82>
 800c244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c246:	2b00      	cmp	r3, #0
 800c248:	d102      	bne.n	800c250 <HAL_SD_Init+0x78>
 800c24a:	6a3b      	ldr	r3, [r7, #32]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d004      	beq.n	800c25a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c256:	659a      	str	r2, [r3, #88]	@ 0x58
 800c258:	e00b      	b.n	800c272 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d104      	bne.n	800c26c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c268:	659a      	str	r2, [r3, #88]	@ 0x58
 800c26a:	e002      	b.n	800c272 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2200      	movs	r2, #0
 800c270:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	4619      	mov	r1, r3
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 fe73 	bl	800cf64 <HAL_SD_ConfigWideBusOperation>
 800c27e:	4603      	mov	r3, r0
 800c280:	2b00      	cmp	r3, #0
 800c282:	d001      	beq.n	800c288 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c284:	2301      	movs	r3, #1
 800c286:	e026      	b.n	800c2d6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c288:	f7f6 fc0a 	bl	8002aa0 <HAL_GetTick>
 800c28c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c28e:	e011      	b.n	800c2b4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c290:	f7f6 fc06 	bl	8002aa0 <HAL_GetTick>
 800c294:	4602      	mov	r2, r0
 800c296:	69fb      	ldr	r3, [r7, #28]
 800c298:	1ad3      	subs	r3, r2, r3
 800c29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c29e:	d109      	bne.n	800c2b4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c2a6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800c2b0:	2303      	movs	r3, #3
 800c2b2:	e010      	b.n	800c2d6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 ff67 	bl	800d188 <HAL_SD_GetCardState>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b04      	cmp	r3, #4
 800c2be:	d1e7      	bne.n	800c290 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3728      	adds	r7, #40	@ 0x28
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
	...

0800c2e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c2e0:	b590      	push	{r4, r7, lr}
 800c2e2:	b08d      	sub	sp, #52	@ 0x34
 800c2e4:	af02      	add	r7, sp, #8
 800c2e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c2f8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c2fc:	f04f 0100 	mov.w	r1, #0
 800c300:	f7fe f9f6 	bl	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800c304:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800c306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d109      	bne.n	800c320 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c31a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c31c:	2301      	movs	r3, #1
 800c31e:	e070      	b.n	800c402 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c322:	0a1b      	lsrs	r3, r3, #8
 800c324:	4a39      	ldr	r2, [pc, #228]	@ (800c40c <HAL_SD_InitCard+0x12c>)
 800c326:	fba2 2303 	umull	r2, r3, r2, r3
 800c32a:	091b      	lsrs	r3, r3, #4
 800c32c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681c      	ldr	r4, [r3, #0]
 800c332:	466a      	mov	r2, sp
 800c334:	f107 0318 	add.w	r3, r7, #24
 800c338:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c33c:	e882 0003 	stmia.w	r2, {r0, r1}
 800c340:	f107 030c 	add.w	r3, r7, #12
 800c344:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c346:	4620      	mov	r0, r4
 800c348:	f002 f888 	bl	800e45c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4618      	mov	r0, r3
 800c352:	f002 f8cb 	bl	800e4ec <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d005      	beq.n	800c368 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	005b      	lsls	r3, r3, #1
 800c360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c362:	fbb2 f3f3 	udiv	r3, r2, r3
 800c366:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800c368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d007      	beq.n	800c37e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c36e:	4a28      	ldr	r2, [pc, #160]	@ (800c410 <HAL_SD_InitCard+0x130>)
 800c370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c372:	fbb2 f3f3 	udiv	r3, r2, r3
 800c376:	3301      	adds	r3, #1
 800c378:	4618      	mov	r0, r3
 800c37a:	f7f6 fb9d 	bl	8002ab8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 fff0 	bl	800d364 <SD_PowerON>
 800c384:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c386:	6a3b      	ldr	r3, [r7, #32]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d00b      	beq.n	800c3a4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c398:	6a3b      	ldr	r3, [r7, #32]
 800c39a:	431a      	orrs	r2, r3
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e02e      	b.n	800c402 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 ff0f 	bl	800d1c8 <SD_InitCard>
 800c3aa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c3ac:	6a3b      	ldr	r3, [r7, #32]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00b      	beq.n	800c3ca <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3be:	6a3b      	ldr	r3, [r7, #32]
 800c3c0:	431a      	orrs	r2, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e01b      	b.n	800c402 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f002 f920 	bl	800e618 <SDMMC_CmdBlockLength>
 800c3d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c3da:	6a3b      	ldr	r3, [r7, #32]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d00f      	beq.n	800c400 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a0b      	ldr	r2, [pc, #44]	@ (800c414 <HAL_SD_InitCard+0x134>)
 800c3e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3ec:	6a3b      	ldr	r3, [r7, #32]
 800c3ee:	431a      	orrs	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e000      	b.n	800c402 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c400:	2300      	movs	r3, #0
}
 800c402:	4618      	mov	r0, r3
 800c404:	372c      	adds	r7, #44	@ 0x2c
 800c406:	46bd      	mov	sp, r7
 800c408:	bd90      	pop	{r4, r7, pc}
 800c40a:	bf00      	nop
 800c40c:	014f8b59 	.word	0x014f8b59
 800c410:	00012110 	.word	0x00012110
 800c414:	1fe00fff 	.word	0x1fe00fff

0800c418 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b092      	sub	sp, #72	@ 0x48
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
 800c424:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c426:	f7f6 fb3b 	bl	8002aa0 <HAL_GetTick>
 800c42a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d107      	bne.n	800c44a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c43e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c446:	2301      	movs	r3, #1
 800c448:	e167      	b.n	800c71a <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c450:	b2db      	uxtb	r3, r3
 800c452:	2b01      	cmp	r3, #1
 800c454:	f040 815a 	bne.w	800c70c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2200      	movs	r2, #0
 800c45c:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c45e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	441a      	add	r2, r3
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c468:	429a      	cmp	r2, r3
 800c46a:	d907      	bls.n	800c47c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c470:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c478:	2301      	movs	r3, #1
 800c47a:	e14e      	b.n	800c71a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2203      	movs	r2, #3
 800c480:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2200      	movs	r2, #0
 800c48a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c490:	2b01      	cmp	r3, #1
 800c492:	d002      	beq.n	800c49a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800c494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c496:	025b      	lsls	r3, r3, #9
 800c498:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c49a:	f04f 33ff 	mov.w	r3, #4294967295
 800c49e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	025b      	lsls	r3, r3, #9
 800c4a4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c4a6:	2390      	movs	r3, #144	@ 0x90
 800c4a8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c4aa:	2302      	movs	r3, #2
 800c4ac:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f107 0214 	add.w	r2, r7, #20
 800c4be:	4611      	mov	r1, r2
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f002 f87d 	bl	800e5c0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	68da      	ldr	r2, [r3, #12]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c4d4:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d90a      	bls.n	800c4f2 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2202      	movs	r2, #2
 800c4e0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f002 f8db 	bl	800e6a4 <SDMMC_CmdReadMultiBlock>
 800c4ee:	6478      	str	r0, [r7, #68]	@ 0x44
 800c4f0:	e009      	b.n	800c506 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c4fe:	4618      	mov	r0, r3
 800c500:	f002 f8ad 	bl	800e65e <SDMMC_CmdReadSingleBlock>
 800c504:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c506:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d012      	beq.n	800c532 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a84      	ldr	r2, [pc, #528]	@ (800c724 <HAL_SD_ReadBlocks+0x30c>)
 800c512:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c51a:	431a      	orrs	r2, r3
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2201      	movs	r2, #1
 800c524:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2200      	movs	r2, #0
 800c52c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c52e:	2301      	movs	r3, #1
 800c530:	e0f3      	b.n	800c71a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800c532:	69bb      	ldr	r3, [r7, #24]
 800c534:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c536:	e058      	b.n	800c5ea <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c53e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c542:	2b00      	cmp	r3, #0
 800c544:	d033      	beq.n	800c5ae <HAL_SD_ReadBlocks+0x196>
 800c546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c548:	2b1f      	cmp	r3, #31
 800c54a:	d930      	bls.n	800c5ae <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800c54c:	2300      	movs	r3, #0
 800c54e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c550:	e027      	b.n	800c5a2 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4618      	mov	r0, r3
 800c558:	f001 ffaa 	bl	800e4b0 <SDMMC_ReadFIFO>
 800c55c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800c55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c560:	b2da      	uxtb	r2, r3
 800c562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c564:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c568:	3301      	adds	r3, #1
 800c56a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c56e:	0a1b      	lsrs	r3, r3, #8
 800c570:	b2da      	uxtb	r2, r3
 800c572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c574:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c578:	3301      	adds	r3, #1
 800c57a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c57e:	0c1b      	lsrs	r3, r3, #16
 800c580:	b2da      	uxtb	r2, r3
 800c582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c584:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c588:	3301      	adds	r3, #1
 800c58a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c58e:	0e1b      	lsrs	r3, r3, #24
 800c590:	b2da      	uxtb	r2, r3
 800c592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c594:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c598:	3301      	adds	r3, #1
 800c59a:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 800c59c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c59e:	3301      	adds	r3, #1
 800c5a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5a4:	2b07      	cmp	r3, #7
 800c5a6:	d9d4      	bls.n	800c552 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800c5a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5aa:	3b20      	subs	r3, #32
 800c5ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800c5ae:	f7f6 fa77 	bl	8002aa0 <HAL_GetTick>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b6:	1ad3      	subs	r3, r2, r3
 800c5b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d902      	bls.n	800c5c4 <HAL_SD_ReadBlocks+0x1ac>
 800c5be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d112      	bne.n	800c5ea <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a56      	ldr	r2, [pc, #344]	@ (800c724 <HAL_SD_ReadBlocks+0x30c>)
 800c5ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800c5e6:	2303      	movs	r3, #3
 800c5e8:	e097      	b.n	800c71a <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5f0:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d09f      	beq.n	800c538 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	68da      	ldr	r2, [r3, #12]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c606:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c60e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c612:	2b00      	cmp	r3, #0
 800c614:	d022      	beq.n	800c65c <HAL_SD_ReadBlocks+0x244>
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d91f      	bls.n	800c65c <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c620:	2b03      	cmp	r3, #3
 800c622:	d01b      	beq.n	800c65c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4618      	mov	r0, r3
 800c62a:	f002 f8a5 	bl	800e778 <SDMMC_CmdStopTransfer>
 800c62e:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800c630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c632:	2b00      	cmp	r3, #0
 800c634:	d012      	beq.n	800c65c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a3a      	ldr	r2, [pc, #232]	@ (800c724 <HAL_SD_ReadBlocks+0x30c>)
 800c63c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c644:	431a      	orrs	r2, r3
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2201      	movs	r2, #1
 800c64e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2200      	movs	r2, #0
 800c656:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800c658:	2301      	movs	r3, #1
 800c65a:	e05e      	b.n	800c71a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c662:	f003 0308 	and.w	r3, r3, #8
 800c666:	2b00      	cmp	r3, #0
 800c668:	d012      	beq.n	800c690 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4a2d      	ldr	r2, [pc, #180]	@ (800c724 <HAL_SD_ReadBlocks+0x30c>)
 800c670:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c676:	f043 0208 	orr.w	r2, r3, #8
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2201      	movs	r2, #1
 800c682:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2200      	movs	r2, #0
 800c68a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c68c:	2301      	movs	r3, #1
 800c68e:	e044      	b.n	800c71a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c696:	f003 0302 	and.w	r3, r3, #2
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d012      	beq.n	800c6c4 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a20      	ldr	r2, [pc, #128]	@ (800c724 <HAL_SD_ReadBlocks+0x30c>)
 800c6a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6aa:	f043 0202 	orr.w	r2, r3, #2
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e02a      	b.n	800c71a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6ca:	f003 0320 	and.w	r3, r3, #32
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d012      	beq.n	800c6f8 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4a13      	ldr	r2, [pc, #76]	@ (800c724 <HAL_SD_ReadBlocks+0x30c>)
 800c6d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6de:	f043 0220 	orr.w	r2, r3, #32
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e010      	b.n	800c71a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a0a      	ldr	r2, [pc, #40]	@ (800c728 <HAL_SD_ReadBlocks+0x310>)
 800c6fe:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2201      	movs	r2, #1
 800c704:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800c708:	2300      	movs	r3, #0
 800c70a:	e006      	b.n	800c71a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c710:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c718:	2301      	movs	r3, #1
  }
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3748      	adds	r7, #72	@ 0x48
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	1fe00fff 	.word	0x1fe00fff
 800c728:	18000f3a 	.word	0x18000f3a

0800c72c <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b092      	sub	sp, #72	@ 0x48
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	607a      	str	r2, [r7, #4]
 800c738:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c73a:	f7f6 f9b1 	bl	8002aa0 <HAL_GetTick>
 800c73e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d107      	bne.n	800c75e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c752:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c75a:	2301      	movs	r3, #1
 800c75c:	e16b      	b.n	800ca36 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c764:	b2db      	uxtb	r3, r3
 800c766:	2b01      	cmp	r3, #1
 800c768:	f040 815e 	bne.w	800ca28 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2200      	movs	r2, #0
 800c770:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c772:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	441a      	add	r2, r3
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d907      	bls.n	800c790 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c784:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c78c:	2301      	movs	r3, #1
 800c78e:	e152      	b.n	800ca36 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2203      	movs	r2, #3
 800c794:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2200      	movs	r2, #0
 800c79e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d002      	beq.n	800c7ae <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800c7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7aa:	025b      	lsls	r3, r3, #9
 800c7ac:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c7ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c7b2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	025b      	lsls	r3, r3, #9
 800c7b8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c7ba:	2390      	movs	r3, #144	@ 0x90
 800c7bc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f107 0218 	add.w	r2, r7, #24
 800c7d2:	4611      	mov	r1, r2
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f001 fef3 	bl	800e5c0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	68da      	ldr	r2, [r3, #12]
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c7e8:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d90a      	bls.n	800c806 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2220      	movs	r2, #32
 800c7f4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f001 ff97 	bl	800e730 <SDMMC_CmdWriteMultiBlock>
 800c802:	6478      	str	r0, [r7, #68]	@ 0x44
 800c804:	e009      	b.n	800c81a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2210      	movs	r2, #16
 800c80a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c812:	4618      	mov	r0, r3
 800c814:	f001 ff69 	bl	800e6ea <SDMMC_CmdWriteSingleBlock>
 800c818:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c81a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d012      	beq.n	800c846 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4a86      	ldr	r2, [pc, #536]	@ (800ca40 <HAL_SD_WriteBlocks+0x314>)
 800c826:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c82c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c82e:	431a      	orrs	r2, r3
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2201      	movs	r2, #1
 800c838:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2200      	movs	r2, #0
 800c840:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c842:	2301      	movs	r3, #1
 800c844:	e0f7      	b.n	800ca36 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800c846:	69fb      	ldr	r3, [r7, #28]
 800c848:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800c84a:	e05c      	b.n	800c906 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c856:	2b00      	cmp	r3, #0
 800c858:	d037      	beq.n	800c8ca <HAL_SD_WriteBlocks+0x19e>
 800c85a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c85c:	2b1f      	cmp	r3, #31
 800c85e:	d934      	bls.n	800c8ca <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800c860:	2300      	movs	r3, #0
 800c862:	643b      	str	r3, [r7, #64]	@ 0x40
 800c864:	e02b      	b.n	800c8be <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800c866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c86c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c86e:	3301      	adds	r3, #1
 800c870:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800c872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	021a      	lsls	r2, r3, #8
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	4313      	orrs	r3, r2
 800c87c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c87e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c880:	3301      	adds	r3, #1
 800c882:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800c884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	041a      	lsls	r2, r3, #16
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	4313      	orrs	r3, r2
 800c88e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c892:	3301      	adds	r3, #1
 800c894:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	061a      	lsls	r2, r3, #24
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c8a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f107 0214 	add.w	r2, r7, #20
 800c8b0:	4611      	mov	r1, r2
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f001 fe09 	bl	800e4ca <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800c8b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8c0:	2b07      	cmp	r3, #7
 800c8c2:	d9d0      	bls.n	800c866 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800c8c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8c6:	3b20      	subs	r3, #32
 800c8c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800c8ca:	f7f6 f8e9 	bl	8002aa0 <HAL_GetTick>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d2:	1ad3      	subs	r3, r2, r3
 800c8d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d902      	bls.n	800c8e0 <HAL_SD_WriteBlocks+0x1b4>
 800c8da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d112      	bne.n	800c906 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4a56      	ldr	r2, [pc, #344]	@ (800ca40 <HAL_SD_WriteBlocks+0x314>)
 800c8e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c8ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8ee:	431a      	orrs	r2, r3
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2200      	movs	r2, #0
 800c900:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800c902:	2303      	movs	r3, #3
 800c904:	e097      	b.n	800ca36 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c90c:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800c910:	2b00      	cmp	r3, #0
 800c912:	d09b      	beq.n	800c84c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	68da      	ldr	r2, [r3, #12]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c922:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c92a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d022      	beq.n	800c978 <HAL_SD_WriteBlocks+0x24c>
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	2b01      	cmp	r3, #1
 800c936:	d91f      	bls.n	800c978 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c93c:	2b03      	cmp	r3, #3
 800c93e:	d01b      	beq.n	800c978 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4618      	mov	r0, r3
 800c946:	f001 ff17 	bl	800e778 <SDMMC_CmdStopTransfer>
 800c94a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800c94c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d012      	beq.n	800c978 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4a3a      	ldr	r2, [pc, #232]	@ (800ca40 <HAL_SD_WriteBlocks+0x314>)
 800c958:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c95e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c960:	431a      	orrs	r2, r3
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2201      	movs	r2, #1
 800c96a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2200      	movs	r2, #0
 800c972:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800c974:	2301      	movs	r3, #1
 800c976:	e05e      	b.n	800ca36 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c97e:	f003 0308 	and.w	r3, r3, #8
 800c982:	2b00      	cmp	r3, #0
 800c984:	d012      	beq.n	800c9ac <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4a2d      	ldr	r2, [pc, #180]	@ (800ca40 <HAL_SD_WriteBlocks+0x314>)
 800c98c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c992:	f043 0208 	orr.w	r2, r3, #8
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2201      	movs	r2, #1
 800c99e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e044      	b.n	800ca36 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9b2:	f003 0302 	and.w	r3, r3, #2
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d012      	beq.n	800c9e0 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4a20      	ldr	r2, [pc, #128]	@ (800ca40 <HAL_SD_WriteBlocks+0x314>)
 800c9c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9c6:	f043 0202 	orr.w	r2, r3, #2
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e02a      	b.n	800ca36 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9e6:	f003 0310 	and.w	r3, r3, #16
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d012      	beq.n	800ca14 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4a13      	ldr	r2, [pc, #76]	@ (800ca40 <HAL_SD_WriteBlocks+0x314>)
 800c9f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9fa:	f043 0210 	orr.w	r2, r3, #16
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2201      	movs	r2, #1
 800ca06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800ca10:	2301      	movs	r3, #1
 800ca12:	e010      	b.n	800ca36 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a0a      	ldr	r2, [pc, #40]	@ (800ca44 <HAL_SD_WriteBlocks+0x318>)
 800ca1a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800ca24:	2300      	movs	r3, #0
 800ca26:	e006      	b.n	800ca36 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca2c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ca34:	2301      	movs	r3, #1
  }
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3748      	adds	r7, #72	@ 0x48
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	1fe00fff 	.word	0x1fe00fff
 800ca44:	18000f3a 	.word	0x18000f3a

0800ca48 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b083      	sub	sp, #12
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca56:	0f9b      	lsrs	r3, r3, #30
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca62:	0e9b      	lsrs	r3, r3, #26
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	f003 030f 	and.w	r3, r3, #15
 800ca6a:	b2da      	uxtb	r2, r3
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca74:	0e1b      	lsrs	r3, r3, #24
 800ca76:	b2db      	uxtb	r3, r3
 800ca78:	f003 0303 	and.w	r3, r3, #3
 800ca7c:	b2da      	uxtb	r2, r3
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca86:	0c1b      	lsrs	r3, r3, #16
 800ca88:	b2da      	uxtb	r2, r3
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca92:	0a1b      	lsrs	r3, r3, #8
 800ca94:	b2da      	uxtb	r2, r3
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800caa8:	0d1b      	lsrs	r3, r3, #20
 800caaa:	b29a      	uxth	r2, r3
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cab4:	0c1b      	lsrs	r3, r3, #16
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	f003 030f 	and.w	r3, r3, #15
 800cabc:	b2da      	uxtb	r2, r3
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cac6:	0bdb      	lsrs	r3, r3, #15
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	f003 0301 	and.w	r3, r3, #1
 800cace:	b2da      	uxtb	r2, r3
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cad8:	0b9b      	lsrs	r3, r3, #14
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	f003 0301 	and.w	r3, r3, #1
 800cae0:	b2da      	uxtb	r2, r3
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800caea:	0b5b      	lsrs	r3, r3, #13
 800caec:	b2db      	uxtb	r3, r3
 800caee:	f003 0301 	and.w	r3, r3, #1
 800caf2:	b2da      	uxtb	r2, r3
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cafc:	0b1b      	lsrs	r3, r3, #12
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	f003 0301 	and.w	r3, r3, #1
 800cb04:	b2da      	uxtb	r2, r3
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d163      	bne.n	800cbe0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb1c:	009a      	lsls	r2, r3, #2
 800cb1e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800cb22:	4013      	ands	r3, r2
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800cb28:	0f92      	lsrs	r2, r2, #30
 800cb2a:	431a      	orrs	r2, r3
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb34:	0edb      	lsrs	r3, r3, #27
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	f003 0307 	and.w	r3, r3, #7
 800cb3c:	b2da      	uxtb	r2, r3
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb46:	0e1b      	lsrs	r3, r3, #24
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	f003 0307 	and.w	r3, r3, #7
 800cb4e:	b2da      	uxtb	r2, r3
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb58:	0d5b      	lsrs	r3, r3, #21
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	f003 0307 	and.w	r3, r3, #7
 800cb60:	b2da      	uxtb	r2, r3
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb6a:	0c9b      	lsrs	r3, r3, #18
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	f003 0307 	and.w	r3, r3, #7
 800cb72:	b2da      	uxtb	r2, r3
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb7c:	0bdb      	lsrs	r3, r3, #15
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	f003 0307 	and.w	r3, r3, #7
 800cb84:	b2da      	uxtb	r2, r3
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	691b      	ldr	r3, [r3, #16]
 800cb8e:	1c5a      	adds	r2, r3, #1
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	7e1b      	ldrb	r3, [r3, #24]
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	f003 0307 	and.w	r3, r3, #7
 800cb9e:	3302      	adds	r3, #2
 800cba0:	2201      	movs	r2, #1
 800cba2:	fa02 f303 	lsl.w	r3, r2, r3
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800cbaa:	fb03 f202 	mul.w	r2, r3, r2
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	7a1b      	ldrb	r3, [r3, #8]
 800cbb6:	b2db      	uxtb	r3, r3
 800cbb8:	f003 030f 	and.w	r3, r3, #15
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	409a      	lsls	r2, r3
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800cbcc:	0a52      	lsrs	r2, r2, #9
 800cbce:	fb03 f202 	mul.w	r2, r3, r2
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cbdc:	655a      	str	r2, [r3, #84]	@ 0x54
 800cbde:	e031      	b.n	800cc44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d11d      	bne.n	800cc24 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cbec:	041b      	lsls	r3, r3, #16
 800cbee:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbf6:	0c1b      	lsrs	r3, r3, #16
 800cbf8:	431a      	orrs	r2, r3
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	691b      	ldr	r3, [r3, #16]
 800cc02:	3301      	adds	r3, #1
 800cc04:	029a      	lsls	r2, r3, #10
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc18:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	655a      	str	r2, [r3, #84]	@ 0x54
 800cc22:	e00f      	b.n	800cc44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a58      	ldr	r2, [pc, #352]	@ (800cd8c <HAL_SD_GetCardCSD+0x344>)
 800cc2a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc30:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800cc40:	2301      	movs	r3, #1
 800cc42:	e09d      	b.n	800cd80 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc48:	0b9b      	lsrs	r3, r3, #14
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	f003 0301 	and.w	r3, r3, #1
 800cc50:	b2da      	uxtb	r2, r3
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc5a:	09db      	lsrs	r3, r3, #7
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc62:	b2da      	uxtb	r2, r3
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc72:	b2da      	uxtb	r2, r3
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc7c:	0fdb      	lsrs	r3, r3, #31
 800cc7e:	b2da      	uxtb	r2, r3
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc88:	0f5b      	lsrs	r3, r3, #29
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	f003 0303 	and.w	r3, r3, #3
 800cc90:	b2da      	uxtb	r2, r3
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc9a:	0e9b      	lsrs	r3, r3, #26
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	f003 0307 	and.w	r3, r3, #7
 800cca2:	b2da      	uxtb	r2, r3
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ccac:	0d9b      	lsrs	r3, r3, #22
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	f003 030f 	and.w	r3, r3, #15
 800ccb4:	b2da      	uxtb	r2, r3
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ccbe:	0d5b      	lsrs	r3, r3, #21
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	f003 0301 	and.w	r3, r3, #1
 800ccc6:	b2da      	uxtb	r2, r3
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ccda:	0c1b      	lsrs	r3, r3, #16
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	f003 0301 	and.w	r3, r3, #1
 800cce2:	b2da      	uxtb	r2, r3
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ccee:	0bdb      	lsrs	r3, r3, #15
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	f003 0301 	and.w	r3, r3, #1
 800ccf6:	b2da      	uxtb	r2, r3
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd02:	0b9b      	lsrs	r3, r3, #14
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	f003 0301 	and.w	r3, r3, #1
 800cd0a:	b2da      	uxtb	r2, r3
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd16:	0b5b      	lsrs	r3, r3, #13
 800cd18:	b2db      	uxtb	r3, r3
 800cd1a:	f003 0301 	and.w	r3, r3, #1
 800cd1e:	b2da      	uxtb	r2, r3
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd2a:	0b1b      	lsrs	r3, r3, #12
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	f003 0301 	and.w	r3, r3, #1
 800cd32:	b2da      	uxtb	r2, r3
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd3e:	0a9b      	lsrs	r3, r3, #10
 800cd40:	b2db      	uxtb	r3, r3
 800cd42:	f003 0303 	and.w	r3, r3, #3
 800cd46:	b2da      	uxtb	r2, r3
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd52:	0a1b      	lsrs	r3, r3, #8
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	f003 0303 	and.w	r3, r3, #3
 800cd5a:	b2da      	uxtb	r2, r3
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd66:	085b      	lsrs	r3, r3, #1
 800cd68:	b2db      	uxtb	r3, r3
 800cd6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd6e:	b2da      	uxtb	r2, r3
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	2201      	movs	r2, #1
 800cd7a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	370c      	adds	r7, #12
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr
 800cd8c:	1fe00fff 	.word	0x1fe00fff

0800cd90 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b094      	sub	sp, #80	@ 0x50
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	2b03      	cmp	r3, #3
 800cdaa:	d101      	bne.n	800cdb0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800cdac:	2301      	movs	r3, #1
 800cdae:	e0a7      	b.n	800cf00 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800cdb0:	f107 0308 	add.w	r3, r7, #8
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f000 fb62 	bl	800d480 <SD_SendSDStatus>
 800cdbc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cdbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d011      	beq.n	800cde8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a4f      	ldr	r2, [pc, #316]	@ (800cf08 <HAL_SD_GetCardStatus+0x178>)
 800cdca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cdd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdd2:	431a      	orrs	r2, r3
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2201      	movs	r2, #1
 800cddc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800cde0:	2301      	movs	r3, #1
 800cde2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800cde6:	e070      	b.n	800ceca <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	099b      	lsrs	r3, r3, #6
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	f003 0303 	and.w	r3, r3, #3
 800cdf2:	b2da      	uxtb	r2, r3
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	095b      	lsrs	r3, r3, #5
 800cdfc:	b2db      	uxtb	r3, r3
 800cdfe:	f003 0301 	and.w	r3, r3, #1
 800ce02:	b2da      	uxtb	r2, r3
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	0a1b      	lsrs	r3, r3, #8
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ce12:	b29a      	uxth	r2, r3
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	0e1b      	lsrs	r3, r3, #24
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	b29a      	uxth	r2, r3
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	061a      	lsls	r2, r3, #24
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	021b      	lsls	r3, r3, #8
 800ce2a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ce2e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	0a1b      	lsrs	r3, r3, #8
 800ce34:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ce38:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	0e1b      	lsrs	r3, r3, #24
 800ce3e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	b2da      	uxtb	r2, r3
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	0a1b      	lsrs	r3, r3, #8
 800ce50:	b2da      	uxtb	r2, r3
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	0d1b      	lsrs	r3, r3, #20
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	f003 030f 	and.w	r3, r3, #15
 800ce60:	b2da      	uxtb	r2, r3
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	0c1b      	lsrs	r3, r3, #16
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ce70:	b29a      	uxth	r2, r3
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	b29b      	uxth	r3, r3
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	b29a      	uxth	r2, r3
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	0a9b      	lsrs	r3, r3, #10
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ce8c:	b2da      	uxtb	r2, r3
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	0a1b      	lsrs	r3, r3, #8
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	f003 0303 	and.w	r3, r3, #3
 800ce9c:	b2da      	uxtb	r2, r3
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	091b      	lsrs	r3, r3, #4
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	f003 030f 	and.w	r3, r3, #15
 800ceac:	b2da      	uxtb	r2, r3
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	b2db      	uxtb	r3, r3
 800ceb6:	f003 030f 	and.w	r3, r3, #15
 800ceba:	b2da      	uxtb	r2, r3
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	0e1b      	lsrs	r3, r3, #24
 800cec4:	b2da      	uxtb	r2, r3
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ced2:	4618      	mov	r0, r3
 800ced4:	f001 fba0 	bl	800e618 <SDMMC_CmdBlockLength>
 800ced8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ceda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00d      	beq.n	800cefc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a08      	ldr	r2, [pc, #32]	@ (800cf08 <HAL_SD_GetCardStatus+0x178>)
 800cee6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ceec:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2201      	movs	r2, #1
 800cef2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800cef6:	2301      	movs	r3, #1
 800cef8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800cefc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3750      	adds	r7, #80	@ 0x50
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	1fe00fff 	.word	0x1fe00fff

0800cf0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cf56:	2300      	movs	r3, #0
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	370c      	adds	r7, #12
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cf64:	b590      	push	{r4, r7, lr}
 800cf66:	b08d      	sub	sp, #52	@ 0x34
 800cf68:	af02      	add	r7, sp, #8
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2203      	movs	r2, #3
 800cf78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf80:	2b03      	cmp	r3, #3
 800cf82:	d02e      	beq.n	800cfe2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf8a:	d106      	bne.n	800cf9a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	635a      	str	r2, [r3, #52]	@ 0x34
 800cf98:	e029      	b.n	800cfee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cfa0:	d10a      	bne.n	800cfb8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 fb64 	bl	800d670 <SD_WideBus_Enable>
 800cfa8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cfae:	6a3b      	ldr	r3, [r7, #32]
 800cfb0:	431a      	orrs	r2, r3
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	635a      	str	r2, [r3, #52]	@ 0x34
 800cfb6:	e01a      	b.n	800cfee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10a      	bne.n	800cfd4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 fba1 	bl	800d706 <SD_WideBus_Disable>
 800cfc4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cfca:	6a3b      	ldr	r3, [r7, #32]
 800cfcc:	431a      	orrs	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	635a      	str	r2, [r3, #52]	@ 0x34
 800cfd2:	e00c      	b.n	800cfee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfd8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	635a      	str	r2, [r3, #52]	@ 0x34
 800cfe0:	e005      	b.n	800cfee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfe6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d007      	beq.n	800d006 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4a5f      	ldr	r2, [pc, #380]	@ (800d178 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cffc:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800cffe:	2301      	movs	r3, #1
 800d000:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d004:	e096      	b.n	800d134 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d006:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d00a:	f04f 0100 	mov.w	r1, #0
 800d00e:	f7fd fb6f 	bl	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d012:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	2b00      	cmp	r3, #0
 800d018:	f000 8083 	beq.w	800d122 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	689b      	ldr	r3, [r3, #8]
 800d026:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	691b      	ldr	r3, [r3, #16]
 800d030:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	695a      	ldr	r2, [r3, #20]
 800d036:	69fb      	ldr	r3, [r7, #28]
 800d038:	4950      	ldr	r1, [pc, #320]	@ (800d17c <HAL_SD_ConfigWideBusOperation+0x218>)
 800d03a:	fba1 1303 	umull	r1, r3, r1, r3
 800d03e:	0e1b      	lsrs	r3, r3, #24
 800d040:	429a      	cmp	r2, r3
 800d042:	d303      	bcc.n	800d04c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	695b      	ldr	r3, [r3, #20]
 800d048:	61bb      	str	r3, [r7, #24]
 800d04a:	e05a      	b.n	800d102 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d054:	d103      	bne.n	800d05e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	695b      	ldr	r3, [r3, #20]
 800d05a:	61bb      	str	r3, [r7, #24]
 800d05c:	e051      	b.n	800d102 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d066:	d126      	bne.n	800d0b6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	695b      	ldr	r3, [r3, #20]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d10e      	bne.n	800d08e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	4a43      	ldr	r2, [pc, #268]	@ (800d180 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d906      	bls.n	800d086 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	4a40      	ldr	r2, [pc, #256]	@ (800d17c <HAL_SD_ConfigWideBusOperation+0x218>)
 800d07c:	fba2 2303 	umull	r2, r3, r2, r3
 800d080:	0e5b      	lsrs	r3, r3, #25
 800d082:	61bb      	str	r3, [r7, #24]
 800d084:	e03d      	b.n	800d102 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	695b      	ldr	r3, [r3, #20]
 800d08a:	61bb      	str	r3, [r7, #24]
 800d08c:	e039      	b.n	800d102 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	695b      	ldr	r3, [r3, #20]
 800d092:	005b      	lsls	r3, r3, #1
 800d094:	69fa      	ldr	r2, [r7, #28]
 800d096:	fbb2 f3f3 	udiv	r3, r2, r3
 800d09a:	4a39      	ldr	r2, [pc, #228]	@ (800d180 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d906      	bls.n	800d0ae <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	4a36      	ldr	r2, [pc, #216]	@ (800d17c <HAL_SD_ConfigWideBusOperation+0x218>)
 800d0a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d0a8:	0e5b      	lsrs	r3, r3, #25
 800d0aa:	61bb      	str	r3, [r7, #24]
 800d0ac:	e029      	b.n	800d102 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	695b      	ldr	r3, [r3, #20]
 800d0b2:	61bb      	str	r3, [r7, #24]
 800d0b4:	e025      	b.n	800d102 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	695b      	ldr	r3, [r3, #20]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d10e      	bne.n	800d0dc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d0be:	69fb      	ldr	r3, [r7, #28]
 800d0c0:	4a30      	ldr	r2, [pc, #192]	@ (800d184 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d906      	bls.n	800d0d4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	4a2c      	ldr	r2, [pc, #176]	@ (800d17c <HAL_SD_ConfigWideBusOperation+0x218>)
 800d0ca:	fba2 2303 	umull	r2, r3, r2, r3
 800d0ce:	0e1b      	lsrs	r3, r3, #24
 800d0d0:	61bb      	str	r3, [r7, #24]
 800d0d2:	e016      	b.n	800d102 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	695b      	ldr	r3, [r3, #20]
 800d0d8:	61bb      	str	r3, [r7, #24]
 800d0da:	e012      	b.n	800d102 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	695b      	ldr	r3, [r3, #20]
 800d0e0:	005b      	lsls	r3, r3, #1
 800d0e2:	69fa      	ldr	r2, [r7, #28]
 800d0e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0e8:	4a26      	ldr	r2, [pc, #152]	@ (800d184 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d906      	bls.n	800d0fc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d0ee:	69fb      	ldr	r3, [r7, #28]
 800d0f0:	4a22      	ldr	r2, [pc, #136]	@ (800d17c <HAL_SD_ConfigWideBusOperation+0x218>)
 800d0f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d0f6:	0e1b      	lsrs	r3, r3, #24
 800d0f8:	61bb      	str	r3, [r7, #24]
 800d0fa:	e002      	b.n	800d102 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	695b      	ldr	r3, [r3, #20]
 800d100:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681c      	ldr	r4, [r3, #0]
 800d106:	466a      	mov	r2, sp
 800d108:	f107 0314 	add.w	r3, r7, #20
 800d10c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d110:	e882 0003 	stmia.w	r2, {r0, r1}
 800d114:	f107 0308 	add.w	r3, r7, #8
 800d118:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d11a:	4620      	mov	r0, r4
 800d11c:	f001 f99e 	bl	800e45c <SDMMC_Init>
 800d120:	e008      	b.n	800d134 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d126:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d13c:	4618      	mov	r0, r3
 800d13e:	f001 fa6b 	bl	800e618 <SDMMC_CmdBlockLength>
 800d142:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d144:	6a3b      	ldr	r3, [r7, #32]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d00c      	beq.n	800d164 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4a0a      	ldr	r2, [pc, #40]	@ (800d178 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d150:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d156:	6a3b      	ldr	r3, [r7, #32]
 800d158:	431a      	orrs	r2, r3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800d16c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d170:	4618      	mov	r0, r3
 800d172:	372c      	adds	r7, #44	@ 0x2c
 800d174:	46bd      	mov	sp, r7
 800d176:	bd90      	pop	{r4, r7, pc}
 800d178:	1fe00fff 	.word	0x1fe00fff
 800d17c:	55e63b89 	.word	0x55e63b89
 800d180:	02faf080 	.word	0x02faf080
 800d184:	017d7840 	.word	0x017d7840

0800d188 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b086      	sub	sp, #24
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d190:	2300      	movs	r3, #0
 800d192:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d194:	f107 030c 	add.w	r3, r7, #12
 800d198:	4619      	mov	r1, r3
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 fa40 	bl	800d620 <SD_SendStatus>
 800d1a0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d005      	beq.n	800d1b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	431a      	orrs	r2, r3
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	0a5b      	lsrs	r3, r3, #9
 800d1b8:	f003 030f 	and.w	r3, r3, #15
 800d1bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d1be:	693b      	ldr	r3, [r7, #16]
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3718      	adds	r7, #24
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b090      	sub	sp, #64	@ 0x40
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800d1d4:	f7f5 fc64 	bl	8002aa0 <HAL_GetTick>
 800d1d8:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f001 f995 	bl	800e50e <SDMMC_GetPowerState>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d102      	bne.n	800d1f0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d1ea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d1ee:	e0b5      	b.n	800d35c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1f4:	2b03      	cmp	r3, #3
 800d1f6:	d02e      	beq.n	800d256 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f001 fbe0 	bl	800e9c2 <SDMMC_CmdSendCID>
 800d202:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d206:	2b00      	cmp	r3, #0
 800d208:	d001      	beq.n	800d20e <SD_InitCard+0x46>
    {
      return errorstate;
 800d20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d20c:	e0a6      	b.n	800d35c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2100      	movs	r1, #0
 800d214:	4618      	mov	r0, r3
 800d216:	f001 f9c0 	bl	800e59a <SDMMC_GetResponse>
 800d21a:	4602      	mov	r2, r0
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	2104      	movs	r1, #4
 800d226:	4618      	mov	r0, r3
 800d228:	f001 f9b7 	bl	800e59a <SDMMC_GetResponse>
 800d22c:	4602      	mov	r2, r0
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2108      	movs	r1, #8
 800d238:	4618      	mov	r0, r3
 800d23a:	f001 f9ae 	bl	800e59a <SDMMC_GetResponse>
 800d23e:	4602      	mov	r2, r0
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	210c      	movs	r1, #12
 800d24a:	4618      	mov	r0, r3
 800d24c:	f001 f9a5 	bl	800e59a <SDMMC_GetResponse>
 800d250:	4602      	mov	r2, r0
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d25a:	2b03      	cmp	r3, #3
 800d25c:	d01d      	beq.n	800d29a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d25e:	e019      	b.n	800d294 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f107 020a 	add.w	r2, r7, #10
 800d268:	4611      	mov	r1, r2
 800d26a:	4618      	mov	r0, r3
 800d26c:	f001 fbe8 	bl	800ea40 <SDMMC_CmdSetRelAdd>
 800d270:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d274:	2b00      	cmp	r3, #0
 800d276:	d001      	beq.n	800d27c <SD_InitCard+0xb4>
      {
        return errorstate;
 800d278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d27a:	e06f      	b.n	800d35c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d27c:	f7f5 fc10 	bl	8002aa0 <HAL_GetTick>
 800d280:	4602      	mov	r2, r0
 800d282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d284:	1ad3      	subs	r3, r2, r3
 800d286:	f241 3287 	movw	r2, #4999	@ 0x1387
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d902      	bls.n	800d294 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d28e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d292:	e063      	b.n	800d35c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d294:	897b      	ldrh	r3, [r7, #10]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d0e2      	beq.n	800d260 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d29e:	2b03      	cmp	r3, #3
 800d2a0:	d036      	beq.n	800d310 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d2a2:	897b      	ldrh	r3, [r7, #10]
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2b2:	041b      	lsls	r3, r3, #16
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	4610      	mov	r0, r2
 800d2b8:	f001 fba2 	bl	800ea00 <SDMMC_CmdSendCSD>
 800d2bc:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d001      	beq.n	800d2c8 <SD_InitCard+0x100>
    {
      return errorstate;
 800d2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c6:	e049      	b.n	800d35c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	2100      	movs	r1, #0
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f001 f963 	bl	800e59a <SDMMC_GetResponse>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2104      	movs	r1, #4
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f001 f95a 	bl	800e59a <SDMMC_GetResponse>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2108      	movs	r1, #8
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f001 f951 	bl	800e59a <SDMMC_GetResponse>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	210c      	movs	r1, #12
 800d304:	4618      	mov	r0, r3
 800d306:	f001 f948 	bl	800e59a <SDMMC_GetResponse>
 800d30a:	4602      	mov	r2, r0
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	2104      	movs	r1, #4
 800d316:	4618      	mov	r0, r3
 800d318:	f001 f93f 	bl	800e59a <SDMMC_GetResponse>
 800d31c:	4603      	mov	r3, r0
 800d31e:	0d1a      	lsrs	r2, r3, #20
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d324:	f107 030c 	add.w	r3, r7, #12
 800d328:	4619      	mov	r1, r3
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f7ff fb8c 	bl	800ca48 <HAL_SD_GetCardCSD>
 800d330:	4603      	mov	r3, r0
 800d332:	2b00      	cmp	r3, #0
 800d334:	d002      	beq.n	800d33c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d336:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d33a:	e00f      	b.n	800d35c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681a      	ldr	r2, [r3, #0]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d344:	041b      	lsls	r3, r3, #16
 800d346:	4619      	mov	r1, r3
 800d348:	4610      	mov	r0, r2
 800d34a:	f001 fa51 	bl	800e7f0 <SDMMC_CmdSelDesel>
 800d34e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d352:	2b00      	cmp	r3, #0
 800d354:	d001      	beq.n	800d35a <SD_InitCard+0x192>
  {
    return errorstate;
 800d356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d358:	e000      	b.n	800d35c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d35a:	2300      	movs	r3, #0
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3740      	adds	r7, #64	@ 0x40
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b086      	sub	sp, #24
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d36c:	2300      	movs	r3, #0
 800d36e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d370:	2300      	movs	r3, #0
 800d372:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d374:	2300      	movs	r3, #0
 800d376:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4618      	mov	r0, r3
 800d37e:	f001 fa5a 	bl	800e836 <SDMMC_CmdGoIdleState>
 800d382:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d001      	beq.n	800d38e <SD_PowerON+0x2a>
  {
    return errorstate;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	e072      	b.n	800d474 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	4618      	mov	r0, r3
 800d394:	f001 fa6d 	bl	800e872 <SDMMC_CmdOperCond>
 800d398:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d3a0:	d10d      	bne.n	800d3be <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f001 fa42 	bl	800e836 <SDMMC_CmdGoIdleState>
 800d3b2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d004      	beq.n	800d3c4 <SD_PowerON+0x60>
    {
      return errorstate;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	e05a      	b.n	800d474 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d137      	bne.n	800d43c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f001 fa6d 	bl	800e8b2 <SDMMC_CmdAppCommand>
 800d3d8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d02d      	beq.n	800d43c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d3e0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d3e4:	e046      	b.n	800d474 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	2100      	movs	r1, #0
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f001 fa60 	bl	800e8b2 <SDMMC_CmdAppCommand>
 800d3f2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d001      	beq.n	800d3fe <SD_PowerON+0x9a>
    {
      return errorstate;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	e03a      	b.n	800d474 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	491e      	ldr	r1, [pc, #120]	@ (800d47c <SD_PowerON+0x118>)
 800d404:	4618      	mov	r0, r3
 800d406:	f001 fa77 	bl	800e8f8 <SDMMC_CmdAppOperCommand>
 800d40a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d002      	beq.n	800d418 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d412:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d416:	e02d      	b.n	800d474 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2100      	movs	r1, #0
 800d41e:	4618      	mov	r0, r3
 800d420:	f001 f8bb 	bl	800e59a <SDMMC_GetResponse>
 800d424:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	0fdb      	lsrs	r3, r3, #31
 800d42a:	2b01      	cmp	r3, #1
 800d42c:	d101      	bne.n	800d432 <SD_PowerON+0xce>
 800d42e:	2301      	movs	r3, #1
 800d430:	e000      	b.n	800d434 <SD_PowerON+0xd0>
 800d432:	2300      	movs	r3, #0
 800d434:	613b      	str	r3, [r7, #16]

    count++;
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	3301      	adds	r3, #1
 800d43a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d442:	4293      	cmp	r3, r2
 800d444:	d802      	bhi.n	800d44c <SD_PowerON+0xe8>
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d0cc      	beq.n	800d3e6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d452:	4293      	cmp	r3, r2
 800d454:	d902      	bls.n	800d45c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d456:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d45a:	e00b      	b.n	800d474 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2200      	movs	r2, #0
 800d460:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d002      	beq.n	800d472 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2201      	movs	r2, #1
 800d470:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d472:	2300      	movs	r3, #0
}
 800d474:	4618      	mov	r0, r3
 800d476:	3718      	adds	r7, #24
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	c1100000 	.word	0xc1100000

0800d480 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b08c      	sub	sp, #48	@ 0x30
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d48a:	f7f5 fb09 	bl	8002aa0 <HAL_GetTick>
 800d48e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2100      	movs	r1, #0
 800d49a:	4618      	mov	r0, r3
 800d49c:	f001 f87d 	bl	800e59a <SDMMC_GetResponse>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d4a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d4aa:	d102      	bne.n	800d4b2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d4ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d4b0:	e0b0      	b.n	800d614 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	2140      	movs	r1, #64	@ 0x40
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f001 f8ad 	bl	800e618 <SDMMC_CmdBlockLength>
 800d4be:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d4c0:	6a3b      	ldr	r3, [r7, #32]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d005      	beq.n	800d4d2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d4ce:	6a3b      	ldr	r3, [r7, #32]
 800d4d0:	e0a0      	b.n	800d614 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681a      	ldr	r2, [r3, #0]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4da:	041b      	lsls	r3, r3, #16
 800d4dc:	4619      	mov	r1, r3
 800d4de:	4610      	mov	r0, r2
 800d4e0:	f001 f9e7 	bl	800e8b2 <SDMMC_CmdAppCommand>
 800d4e4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d4e6:	6a3b      	ldr	r3, [r7, #32]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d005      	beq.n	800d4f8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d4f4:	6a3b      	ldr	r3, [r7, #32]
 800d4f6:	e08d      	b.n	800d614 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4fc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d4fe:	2340      	movs	r3, #64	@ 0x40
 800d500:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d502:	2360      	movs	r3, #96	@ 0x60
 800d504:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d506:	2302      	movs	r3, #2
 800d508:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d50a:	2300      	movs	r3, #0
 800d50c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d50e:	2301      	movs	r3, #1
 800d510:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f107 0208 	add.w	r2, r7, #8
 800d51a:	4611      	mov	r1, r2
 800d51c:	4618      	mov	r0, r3
 800d51e:	f001 f84f 	bl	800e5c0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	4618      	mov	r0, r3
 800d528:	f001 facf 	bl	800eaca <SDMMC_CmdStatusRegister>
 800d52c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d52e:	6a3b      	ldr	r3, [r7, #32]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d02b      	beq.n	800d58c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d53c:	6a3b      	ldr	r3, [r7, #32]
 800d53e:	e069      	b.n	800d614 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d546:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d013      	beq.n	800d576 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d54e:	2300      	movs	r3, #0
 800d550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d552:	e00d      	b.n	800d570 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4618      	mov	r0, r3
 800d55a:	f000 ffa9 	bl	800e4b0 <SDMMC_ReadFIFO>
 800d55e:	4602      	mov	r2, r0
 800d560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d562:	601a      	str	r2, [r3, #0]
        pData++;
 800d564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d566:	3304      	adds	r3, #4
 800d568:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800d56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d56c:	3301      	adds	r3, #1
 800d56e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d572:	2b07      	cmp	r3, #7
 800d574:	d9ee      	bls.n	800d554 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d576:	f7f5 fa93 	bl	8002aa0 <HAL_GetTick>
 800d57a:	4602      	mov	r2, r0
 800d57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57e:	1ad3      	subs	r3, r2, r3
 800d580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d584:	d102      	bne.n	800d58c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d586:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d58a:	e043      	b.n	800d614 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d592:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d596:	2b00      	cmp	r3, #0
 800d598:	d0d2      	beq.n	800d540 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5a0:	f003 0308 	and.w	r3, r3, #8
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d001      	beq.n	800d5ac <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d5a8:	2308      	movs	r3, #8
 800d5aa:	e033      	b.n	800d614 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5b2:	f003 0302 	and.w	r3, r3, #2
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d001      	beq.n	800d5be <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d5ba:	2302      	movs	r3, #2
 800d5bc:	e02a      	b.n	800d614 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5c4:	f003 0320 	and.w	r3, r3, #32
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d017      	beq.n	800d5fc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d5cc:	2320      	movs	r3, #32
 800d5ce:	e021      	b.n	800d614 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f000 ff6b 	bl	800e4b0 <SDMMC_ReadFIFO>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5de:	601a      	str	r2, [r3, #0]
    pData++;
 800d5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5e2:	3304      	adds	r3, #4
 800d5e4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d5e6:	f7f5 fa5b 	bl	8002aa0 <HAL_GetTick>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ee:	1ad3      	subs	r3, r2, r3
 800d5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f4:	d102      	bne.n	800d5fc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d5f6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d5fa:	e00b      	b.n	800d614 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d602:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d606:	2b00      	cmp	r3, #0
 800d608:	d1e2      	bne.n	800d5d0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	4a03      	ldr	r2, [pc, #12]	@ (800d61c <SD_SendSDStatus+0x19c>)
 800d610:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800d612:	2300      	movs	r3, #0
}
 800d614:	4618      	mov	r0, r3
 800d616:	3730      	adds	r7, #48	@ 0x30
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	18000f3a 	.word	0x18000f3a

0800d620 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d102      	bne.n	800d636 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d630:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d634:	e018      	b.n	800d668 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d63e:	041b      	lsls	r3, r3, #16
 800d640:	4619      	mov	r1, r3
 800d642:	4610      	mov	r0, r2
 800d644:	f001 fa1e 	bl	800ea84 <SDMMC_CmdSendStatus>
 800d648:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d001      	beq.n	800d654 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	e009      	b.n	800d668 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	2100      	movs	r1, #0
 800d65a:	4618      	mov	r0, r3
 800d65c:	f000 ff9d 	bl	800e59a <SDMMC_GetResponse>
 800d660:	4602      	mov	r2, r0
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d666:	2300      	movs	r3, #0
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3710      	adds	r7, #16
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b086      	sub	sp, #24
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d678:	2300      	movs	r3, #0
 800d67a:	60fb      	str	r3, [r7, #12]
 800d67c:	2300      	movs	r3, #0
 800d67e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	2100      	movs	r1, #0
 800d686:	4618      	mov	r0, r3
 800d688:	f000 ff87 	bl	800e59a <SDMMC_GetResponse>
 800d68c:	4603      	mov	r3, r0
 800d68e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d692:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d696:	d102      	bne.n	800d69e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d698:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d69c:	e02f      	b.n	800d6fe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d69e:	f107 030c 	add.w	r3, r7, #12
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f000 f879 	bl	800d79c <SD_FindSCR>
 800d6aa:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d001      	beq.n	800d6b6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	e023      	b.n	800d6fe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d01c      	beq.n	800d6fa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6c8:	041b      	lsls	r3, r3, #16
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	4610      	mov	r0, r2
 800d6ce:	f001 f8f0 	bl	800e8b2 <SDMMC_CmdAppCommand>
 800d6d2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d001      	beq.n	800d6de <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	e00f      	b.n	800d6fe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	2102      	movs	r1, #2
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f001 f927 	bl	800e938 <SDMMC_CmdBusWidth>
 800d6ea:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d001      	beq.n	800d6f6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	e003      	b.n	800d6fe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	e001      	b.n	800d6fe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d6fa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3718      	adds	r7, #24
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d706:	b580      	push	{r7, lr}
 800d708:	b086      	sub	sp, #24
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d70e:	2300      	movs	r3, #0
 800d710:	60fb      	str	r3, [r7, #12]
 800d712:	2300      	movs	r3, #0
 800d714:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	2100      	movs	r1, #0
 800d71c:	4618      	mov	r0, r3
 800d71e:	f000 ff3c 	bl	800e59a <SDMMC_GetResponse>
 800d722:	4603      	mov	r3, r0
 800d724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d728:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d72c:	d102      	bne.n	800d734 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d72e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d732:	e02f      	b.n	800d794 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d734:	f107 030c 	add.w	r3, r7, #12
 800d738:	4619      	mov	r1, r3
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 f82e 	bl	800d79c <SD_FindSCR>
 800d740:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d001      	beq.n	800d74c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	e023      	b.n	800d794 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d752:	2b00      	cmp	r3, #0
 800d754:	d01c      	beq.n	800d790 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d75e:	041b      	lsls	r3, r3, #16
 800d760:	4619      	mov	r1, r3
 800d762:	4610      	mov	r0, r2
 800d764:	f001 f8a5 	bl	800e8b2 <SDMMC_CmdAppCommand>
 800d768:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d001      	beq.n	800d774 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	e00f      	b.n	800d794 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2100      	movs	r1, #0
 800d77a:	4618      	mov	r0, r3
 800d77c:	f001 f8dc 	bl	800e938 <SDMMC_CmdBusWidth>
 800d780:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d001      	beq.n	800d78c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	e003      	b.n	800d794 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d78c:	2300      	movs	r3, #0
 800d78e:	e001      	b.n	800d794 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d790:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d794:	4618      	mov	r0, r3
 800d796:	3718      	adds	r7, #24
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b08e      	sub	sp, #56	@ 0x38
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d7a6:	f7f5 f97b 	bl	8002aa0 <HAL_GetTick>
 800d7aa:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	60bb      	str	r3, [r7, #8]
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2108      	movs	r1, #8
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 ff28 	bl	800e618 <SDMMC_CmdBlockLength>
 800d7c8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d001      	beq.n	800d7d4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d2:	e0ad      	b.n	800d930 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681a      	ldr	r2, [r3, #0]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7dc:	041b      	lsls	r3, r3, #16
 800d7de:	4619      	mov	r1, r3
 800d7e0:	4610      	mov	r0, r2
 800d7e2:	f001 f866 	bl	800e8b2 <SDMMC_CmdAppCommand>
 800d7e6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d001      	beq.n	800d7f2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7f0:	e09e      	b.n	800d930 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d7f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d7f6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d7f8:	2308      	movs	r3, #8
 800d7fa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d7fc:	2330      	movs	r3, #48	@ 0x30
 800d7fe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d800:	2302      	movs	r3, #2
 800d802:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d804:	2300      	movs	r3, #0
 800d806:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d808:	2301      	movs	r3, #1
 800d80a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f107 0210 	add.w	r2, r7, #16
 800d814:	4611      	mov	r1, r2
 800d816:	4618      	mov	r0, r3
 800d818:	f000 fed2 	bl	800e5c0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4618      	mov	r0, r3
 800d822:	f001 f8ac 	bl	800e97e <SDMMC_CmdSendSCR>
 800d826:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d027      	beq.n	800d87e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d82e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d830:	e07e      	b.n	800d930 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d838:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d113      	bne.n	800d868 <SD_FindSCR+0xcc>
 800d840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d842:	2b00      	cmp	r3, #0
 800d844:	d110      	bne.n	800d868 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f000 fe30 	bl	800e4b0 <SDMMC_ReadFIFO>
 800d850:	4603      	mov	r3, r0
 800d852:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	4618      	mov	r0, r3
 800d85a:	f000 fe29 	bl	800e4b0 <SDMMC_ReadFIFO>
 800d85e:	4603      	mov	r3, r0
 800d860:	60fb      	str	r3, [r7, #12]
      index++;
 800d862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d864:	3301      	adds	r3, #1
 800d866:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d868:	f7f5 f91a 	bl	8002aa0 <HAL_GetTick>
 800d86c:	4602      	mov	r2, r0
 800d86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d870:	1ad3      	subs	r3, r2, r3
 800d872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d876:	d102      	bne.n	800d87e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d878:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d87c:	e058      	b.n	800d930 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d884:	f240 532a 	movw	r3, #1322	@ 0x52a
 800d888:	4013      	ands	r3, r2
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d0d1      	beq.n	800d832 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d894:	f003 0308 	and.w	r3, r3, #8
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d005      	beq.n	800d8a8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2208      	movs	r2, #8
 800d8a2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d8a4:	2308      	movs	r3, #8
 800d8a6:	e043      	b.n	800d930 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8ae:	f003 0302 	and.w	r3, r3, #2
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d005      	beq.n	800d8c2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	2202      	movs	r2, #2
 800d8bc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d8be:	2302      	movs	r3, #2
 800d8c0:	e036      	b.n	800d930 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8c8:	f003 0320 	and.w	r3, r3, #32
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d005      	beq.n	800d8dc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2220      	movs	r2, #32
 800d8d6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d8d8:	2320      	movs	r3, #32
 800d8da:	e029      	b.n	800d930 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a15      	ldr	r2, [pc, #84]	@ (800d938 <SD_FindSCR+0x19c>)
 800d8e2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	061a      	lsls	r2, r3, #24
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	021b      	lsls	r3, r3, #8
 800d8ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d8f0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	0a1b      	lsrs	r3, r3, #8
 800d8f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d8fa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	0e1b      	lsrs	r3, r3, #24
 800d900:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d904:	601a      	str	r2, [r3, #0]
    scr++;
 800d906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d908:	3304      	adds	r3, #4
 800d90a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	061a      	lsls	r2, r3, #24
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	021b      	lsls	r3, r3, #8
 800d914:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d918:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	0a1b      	lsrs	r3, r3, #8
 800d91e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d922:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	0e1b      	lsrs	r3, r3, #24
 800d928:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d92e:	2300      	movs	r3, #0
}
 800d930:	4618      	mov	r0, r3
 800d932:	3738      	adds	r7, #56	@ 0x38
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	18000f3a 	.word	0x18000f3a

0800d93c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d101      	bne.n	800d94e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d94a:	2301      	movs	r3, #1
 800d94c:	e10f      	b.n	800db6e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2200      	movs	r2, #0
 800d952:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4a87      	ldr	r2, [pc, #540]	@ (800db78 <HAL_SPI_Init+0x23c>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d00f      	beq.n	800d97e <HAL_SPI_Init+0x42>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	4a86      	ldr	r2, [pc, #536]	@ (800db7c <HAL_SPI_Init+0x240>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d00a      	beq.n	800d97e <HAL_SPI_Init+0x42>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	4a84      	ldr	r2, [pc, #528]	@ (800db80 <HAL_SPI_Init+0x244>)
 800d96e:	4293      	cmp	r3, r2
 800d970:	d005      	beq.n	800d97e <HAL_SPI_Init+0x42>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	68db      	ldr	r3, [r3, #12]
 800d976:	2b0f      	cmp	r3, #15
 800d978:	d901      	bls.n	800d97e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d97a:	2301      	movs	r3, #1
 800d97c:	e0f7      	b.n	800db6e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f000 fd50 	bl	800e424 <SPI_GetPacketSize>
 800d984:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a7b      	ldr	r2, [pc, #492]	@ (800db78 <HAL_SPI_Init+0x23c>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d00c      	beq.n	800d9aa <HAL_SPI_Init+0x6e>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a79      	ldr	r2, [pc, #484]	@ (800db7c <HAL_SPI_Init+0x240>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d007      	beq.n	800d9aa <HAL_SPI_Init+0x6e>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4a78      	ldr	r2, [pc, #480]	@ (800db80 <HAL_SPI_Init+0x244>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d002      	beq.n	800d9aa <HAL_SPI_Init+0x6e>
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2b08      	cmp	r3, #8
 800d9a8:	d811      	bhi.n	800d9ce <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d9ae:	4a72      	ldr	r2, [pc, #456]	@ (800db78 <HAL_SPI_Init+0x23c>)
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d009      	beq.n	800d9c8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a70      	ldr	r2, [pc, #448]	@ (800db7c <HAL_SPI_Init+0x240>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d004      	beq.n	800d9c8 <HAL_SPI_Init+0x8c>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4a6f      	ldr	r2, [pc, #444]	@ (800db80 <HAL_SPI_Init+0x244>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d104      	bne.n	800d9d2 <HAL_SPI_Init+0x96>
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2b10      	cmp	r3, #16
 800d9cc:	d901      	bls.n	800d9d2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	e0cd      	b.n	800db6e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d106      	bne.n	800d9ec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f7f4 fdb4 	bl	8002554 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2202      	movs	r2, #2
 800d9f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f022 0201 	bic.w	r2, r2, #1
 800da02:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	689b      	ldr	r3, [r3, #8]
 800da0a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800da0e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	699b      	ldr	r3, [r3, #24]
 800da14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800da18:	d119      	bne.n	800da4e <HAL_SPI_Init+0x112>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800da22:	d103      	bne.n	800da2c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d008      	beq.n	800da3e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800da30:	2b00      	cmp	r3, #0
 800da32:	d10c      	bne.n	800da4e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800da38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800da3c:	d107      	bne.n	800da4e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800da4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800da56:	2b00      	cmp	r3, #0
 800da58:	d00f      	beq.n	800da7a <HAL_SPI_Init+0x13e>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	2b06      	cmp	r3, #6
 800da60:	d90b      	bls.n	800da7a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	430a      	orrs	r2, r1
 800da76:	601a      	str	r2, [r3, #0]
 800da78:	e007      	b.n	800da8a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800da88:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	69da      	ldr	r2, [r3, #28]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da92:	431a      	orrs	r2, r3
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	431a      	orrs	r2, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da9c:	ea42 0103 	orr.w	r1, r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	68da      	ldr	r2, [r3, #12]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	430a      	orrs	r2, r1
 800daaa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dab4:	431a      	orrs	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daba:	431a      	orrs	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	699b      	ldr	r3, [r3, #24]
 800dac0:	431a      	orrs	r2, r3
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	691b      	ldr	r3, [r3, #16]
 800dac6:	431a      	orrs	r2, r3
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	695b      	ldr	r3, [r3, #20]
 800dacc:	431a      	orrs	r2, r3
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6a1b      	ldr	r3, [r3, #32]
 800dad2:	431a      	orrs	r2, r3
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	431a      	orrs	r2, r3
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dade:	431a      	orrs	r2, r3
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	689b      	ldr	r3, [r3, #8]
 800dae4:	431a      	orrs	r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800daea:	ea42 0103 	orr.w	r1, r2, r3
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	430a      	orrs	r2, r1
 800daf8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d113      	bne.n	800db2a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800db14:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	689b      	ldr	r3, [r3, #8]
 800db1c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800db28:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f022 0201 	bic.w	r2, r2, #1
 800db38:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800db42:	2b00      	cmp	r3, #0
 800db44:	d00a      	beq.n	800db5c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	68db      	ldr	r3, [r3, #12]
 800db4c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	430a      	orrs	r2, r1
 800db5a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2200      	movs	r2, #0
 800db60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2201      	movs	r2, #1
 800db68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800db6c:	2300      	movs	r3, #0
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3710      	adds	r7, #16
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	40013000 	.word	0x40013000
 800db7c:	40003800 	.word	0x40003800
 800db80:	40003c00 	.word	0x40003c00

0800db84 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b084      	sub	sp, #16
 800db88:	af00      	add	r7, sp, #0
 800db8a:	60f8      	str	r0, [r7, #12]
 800db8c:	60b9      	str	r1, [r7, #8]
 800db8e:	4613      	mov	r3, r2
 800db90:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d001      	beq.n	800dba2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800db9e:	2302      	movs	r3, #2
 800dba0:	e126      	b.n	800ddf0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d002      	beq.n	800dbae <HAL_SPI_Transmit_DMA+0x2a>
 800dba8:	88fb      	ldrh	r3, [r7, #6]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d101      	bne.n	800dbb2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	e11e      	b.n	800ddf0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	d101      	bne.n	800dbc0 <HAL_SPI_Transmit_DMA+0x3c>
 800dbbc:	2302      	movs	r3, #2
 800dbbe:	e117      	b.n	800ddf0 <HAL_SPI_Transmit_DMA+0x26c>
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2203      	movs	r2, #3
 800dbcc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	68ba      	ldr	r2, [r7, #8]
 800dbdc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	88fa      	ldrh	r2, [r7, #6]
 800dbe2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	88fa      	ldrh	r2, [r7, #6]
 800dbea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	2200      	movs	r2, #0
 800dc04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	689b      	ldr	r3, [r3, #8]
 800dc14:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800dc18:	d108      	bne.n	800dc2c <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	681a      	ldr	r2, [r3, #0]
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dc28:	601a      	str	r2, [r3, #0]
 800dc2a:	e009      	b.n	800dc40 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	68db      	ldr	r3, [r3, #12]
 800dc32:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800dc3e:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	2b0f      	cmp	r3, #15
 800dc46:	d905      	bls.n	800dc54 <HAL_SPI_Transmit_DMA+0xd0>
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dc4c:	699b      	ldr	r3, [r3, #24]
 800dc4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dc52:	d10f      	bne.n	800dc74 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800dc58:	2b07      	cmp	r3, #7
 800dc5a:	d911      	bls.n	800dc80 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dc60:	699b      	ldr	r3, [r3, #24]
 800dc62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dc66:	d00b      	beq.n	800dc80 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dc6c:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800dc6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dc72:	d005      	beq.n	800dc80 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2200      	movs	r2, #0
 800dc78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	e0b7      	b.n	800ddf0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	68db      	ldr	r3, [r3, #12]
 800dc84:	2b07      	cmp	r3, #7
 800dc86:	d820      	bhi.n	800dcca <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dc8c:	699b      	ldr	r3, [r3, #24]
 800dc8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dc92:	d109      	bne.n	800dca8 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	105b      	asrs	r3, r3, #1
 800dca0:	b29a      	uxth	r2, r3
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dcac:	699b      	ldr	r3, [r3, #24]
 800dcae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dcb2:	d11e      	bne.n	800dcf2 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	3303      	adds	r3, #3
 800dcbe:	109b      	asrs	r3, r3, #2
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800dcc8:	e013      	b.n	800dcf2 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	68db      	ldr	r3, [r3, #12]
 800dcce:	2b0f      	cmp	r3, #15
 800dcd0:	d80f      	bhi.n	800dcf2 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dcd6:	699b      	ldr	r3, [r3, #24]
 800dcd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dcdc:	d109      	bne.n	800dcf2 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	3301      	adds	r3, #1
 800dce8:	105b      	asrs	r3, r3, #1
 800dcea:	b29a      	uxth	r2, r3
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dcf6:	4a40      	ldr	r2, [pc, #256]	@ (800ddf8 <HAL_SPI_Transmit_DMA+0x274>)
 800dcf8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dcfe:	4a3f      	ldr	r2, [pc, #252]	@ (800ddfc <HAL_SPI_Transmit_DMA+0x278>)
 800dd00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd06:	4a3e      	ldr	r2, [pc, #248]	@ (800de00 <HAL_SPI_Transmit_DMA+0x27c>)
 800dd08:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd0e:	2200      	movs	r2, #0
 800dd10:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	689a      	ldr	r2, [r3, #8]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800dd20:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	3320      	adds	r3, #32
 800dd32:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dd3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800dd3c:	f7f5 fbd0 	bl	80034e0 <HAL_DMA_Start_IT>
 800dd40:	4603      	mov	r3, r0
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d011      	beq.n	800dd6a <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dd4c:	f043 0210 	orr.w	r2, r3, #16
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	2201      	movs	r2, #1
 800dd5a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2200      	movs	r2, #0
 800dd62:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800dd66:	2301      	movs	r3, #1
 800dd68:	e042      	b.n	800ddf0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd6e:	69db      	ldr	r3, [r3, #28]
 800dd70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd74:	d108      	bne.n	800dd88 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	6859      	ldr	r1, [r3, #4]
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	4b20      	ldr	r3, [pc, #128]	@ (800de04 <HAL_SPI_Transmit_DMA+0x280>)
 800dd82:	400b      	ands	r3, r1
 800dd84:	6053      	str	r3, [r2, #4]
 800dd86:	e009      	b.n	800dd9c <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	685a      	ldr	r2, [r3, #4]
 800dd8e:	4b1d      	ldr	r3, [pc, #116]	@ (800de04 <HAL_SPI_Transmit_DMA+0x280>)
 800dd90:	4013      	ands	r3, r2
 800dd92:	88f9      	ldrh	r1, [r7, #6]
 800dd94:	68fa      	ldr	r2, [r7, #12]
 800dd96:	6812      	ldr	r2, [r2, #0]
 800dd98:	430b      	orrs	r3, r1
 800dd9a:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	689a      	ldr	r2, [r3, #8]
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ddaa:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	691a      	ldr	r2, [r3, #16]
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 800ddba:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	681a      	ldr	r2, [r3, #0]
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f042 0201 	orr.w	r2, r2, #1
 800ddca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ddd4:	d107      	bne.n	800dde6 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dde4:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2200      	movs	r2, #0
 800ddea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800ddee:	2300      	movs	r3, #0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3710      	adds	r7, #16
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	0800e24f 	.word	0x0800e24f
 800ddfc:	0800e209 	.word	0x0800e209
 800de00:	0800e26b 	.word	0x0800e26b
 800de04:	ffff0000 	.word	0xffff0000

0800de08 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b08a      	sub	sp, #40	@ 0x28
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	691b      	ldr	r3, [r3, #16]
 800de16:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	695b      	ldr	r3, [r3, #20]
 800de1e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800de20:	6a3a      	ldr	r2, [r7, #32]
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	4013      	ands	r3, r2
 800de26:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800de30:	2300      	movs	r3, #0
 800de32:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800de3a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	3330      	adds	r3, #48	@ 0x30
 800de42:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800de44:	69fb      	ldr	r3, [r7, #28]
 800de46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d010      	beq.n	800de70 <HAL_SPI_IRQHandler+0x68>
 800de4e:	6a3b      	ldr	r3, [r7, #32]
 800de50:	f003 0308 	and.w	r3, r3, #8
 800de54:	2b00      	cmp	r3, #0
 800de56:	d00b      	beq.n	800de70 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	699a      	ldr	r2, [r3, #24]
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800de66:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f000 f9c3 	bl	800e1f4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800de6e:	e192      	b.n	800e196 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800de70:	69bb      	ldr	r3, [r7, #24]
 800de72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de76:	2b00      	cmp	r3, #0
 800de78:	d113      	bne.n	800dea2 <HAL_SPI_IRQHandler+0x9a>
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	f003 0320 	and.w	r3, r3, #32
 800de80:	2b00      	cmp	r3, #0
 800de82:	d10e      	bne.n	800dea2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800de84:	69bb      	ldr	r3, [r7, #24]
 800de86:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d009      	beq.n	800dea2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	4798      	blx	r3
    hspi->RxISR(hspi);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	4798      	blx	r3
    handled = 1UL;
 800de9e:	2301      	movs	r3, #1
 800dea0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d10f      	bne.n	800decc <HAL_SPI_IRQHandler+0xc4>
 800deac:	69bb      	ldr	r3, [r7, #24]
 800deae:	f003 0301 	and.w	r3, r3, #1
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d00a      	beq.n	800decc <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800deb6:	69bb      	ldr	r3, [r7, #24]
 800deb8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800debc:	2b00      	cmp	r3, #0
 800debe:	d105      	bne.n	800decc <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	4798      	blx	r3
    handled = 1UL;
 800dec8:	2301      	movs	r3, #1
 800deca:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800decc:	69bb      	ldr	r3, [r7, #24]
 800dece:	f003 0320 	and.w	r3, r3, #32
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d10f      	bne.n	800def6 <HAL_SPI_IRQHandler+0xee>
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	f003 0302 	and.w	r3, r3, #2
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d00a      	beq.n	800def6 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d105      	bne.n	800def6 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	4798      	blx	r3
    handled = 1UL;
 800def2:	2301      	movs	r3, #1
 800def4:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800def6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800def8:	2b00      	cmp	r3, #0
 800defa:	f040 8147 	bne.w	800e18c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	f003 0308 	and.w	r3, r3, #8
 800df04:	2b00      	cmp	r3, #0
 800df06:	f000 808b 	beq.w	800e020 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	699a      	ldr	r2, [r3, #24]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f042 0208 	orr.w	r2, r2, #8
 800df18:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	699a      	ldr	r2, [r3, #24]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f042 0210 	orr.w	r2, r2, #16
 800df28:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	699a      	ldr	r2, [r3, #24]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800df38:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	691a      	ldr	r2, [r3, #16]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f022 0208 	bic.w	r2, r2, #8
 800df48:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	689b      	ldr	r3, [r3, #8]
 800df50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800df54:	2b00      	cmp	r3, #0
 800df56:	d13d      	bne.n	800dfd4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800df58:	e036      	b.n	800dfc8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	2b0f      	cmp	r3, #15
 800df60:	d90b      	bls.n	800df7a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681a      	ldr	r2, [r3, #0]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df6a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800df6c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df72:	1d1a      	adds	r2, r3, #4
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	665a      	str	r2, [r3, #100]	@ 0x64
 800df78:	e01d      	b.n	800dfb6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	2b07      	cmp	r3, #7
 800df80:	d90b      	bls.n	800df9a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df86:	68fa      	ldr	r2, [r7, #12]
 800df88:	8812      	ldrh	r2, [r2, #0]
 800df8a:	b292      	uxth	r2, r2
 800df8c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df92:	1c9a      	adds	r2, r3, #2
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	665a      	str	r2, [r3, #100]	@ 0x64
 800df98:	e00d      	b.n	800dfb6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dfa6:	7812      	ldrb	r2, [r2, #0]
 800dfa8:	b2d2      	uxtb	r2, r2
 800dfaa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dfb0:	1c5a      	adds	r2, r3, #1
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	3b01      	subs	r3, #1
 800dfc0:	b29a      	uxth	r2, r3
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d1c2      	bne.n	800df5a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f000 f985 	bl	800e2e4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2201      	movs	r2, #1
 800dfde:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d003      	beq.n	800dff4 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f000 f8f7 	bl	800e1e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800dff2:	e0d0      	b.n	800e196 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800dff4:	7cfb      	ldrb	r3, [r7, #19]
 800dff6:	2b05      	cmp	r3, #5
 800dff8:	d103      	bne.n	800e002 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f000 f8dc 	bl	800e1b8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800e000:	e0c6      	b.n	800e190 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800e002:	7cfb      	ldrb	r3, [r7, #19]
 800e004:	2b04      	cmp	r3, #4
 800e006:	d103      	bne.n	800e010 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 f8cb 	bl	800e1a4 <HAL_SPI_RxCpltCallback>
    return;
 800e00e:	e0bf      	b.n	800e190 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800e010:	7cfb      	ldrb	r3, [r7, #19]
 800e012:	2b03      	cmp	r3, #3
 800e014:	f040 80bc 	bne.w	800e190 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f7f4 f8cb 	bl	80021b4 <HAL_SPI_TxCpltCallback>
    return;
 800e01e:	e0b7      	b.n	800e190 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800e026:	2b00      	cmp	r3, #0
 800e028:	f000 80b5 	beq.w	800e196 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800e02c:	69bb      	ldr	r3, [r7, #24]
 800e02e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e032:	2b00      	cmp	r3, #0
 800e034:	d00f      	beq.n	800e056 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e03c:	f043 0204 	orr.w	r2, r3, #4
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	699a      	ldr	r2, [r3, #24]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e054:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800e056:	69bb      	ldr	r3, [r7, #24]
 800e058:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d00f      	beq.n	800e080 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e066:	f043 0201 	orr.w	r2, r3, #1
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	699a      	ldr	r2, [r3, #24]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e07e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800e080:	69bb      	ldr	r3, [r7, #24]
 800e082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e086:	2b00      	cmp	r3, #0
 800e088:	d00f      	beq.n	800e0aa <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e090:	f043 0208 	orr.w	r2, r3, #8
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	699a      	ldr	r2, [r3, #24]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e0a8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800e0aa:	69bb      	ldr	r3, [r7, #24]
 800e0ac:	f003 0320 	and.w	r3, r3, #32
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d00f      	beq.n	800e0d4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e0ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	699a      	ldr	r2, [r3, #24]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f042 0220 	orr.w	r2, r2, #32
 800e0d2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d05a      	beq.n	800e194 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	681a      	ldr	r2, [r3, #0]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f022 0201 	bic.w	r2, r2, #1
 800e0ec:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	6919      	ldr	r1, [r3, #16]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681a      	ldr	r2, [r3, #0]
 800e0f8:	4b28      	ldr	r3, [pc, #160]	@ (800e19c <HAL_SPI_IRQHandler+0x394>)
 800e0fa:	400b      	ands	r3, r1
 800e0fc:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e104:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e108:	d138      	bne.n	800e17c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	689a      	ldr	r2, [r3, #8]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e118:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d013      	beq.n	800e14a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e126:	4a1e      	ldr	r2, [pc, #120]	@ (800e1a0 <HAL_SPI_IRQHandler+0x398>)
 800e128:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e12e:	4618      	mov	r0, r3
 800e130:	f7f5 fc40 	bl	80039b4 <HAL_DMA_Abort_IT>
 800e134:	4603      	mov	r3, r0
 800e136:	2b00      	cmp	r3, #0
 800e138:	d007      	beq.n	800e14a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e140:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d020      	beq.n	800e194 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e156:	4a12      	ldr	r2, [pc, #72]	@ (800e1a0 <HAL_SPI_IRQHandler+0x398>)
 800e158:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e15e:	4618      	mov	r0, r3
 800e160:	f7f5 fc28 	bl	80039b4 <HAL_DMA_Abort_IT>
 800e164:	4603      	mov	r3, r0
 800e166:	2b00      	cmp	r3, #0
 800e168:	d014      	beq.n	800e194 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e170:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e17a:	e00b      	b.n	800e194 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2201      	movs	r2, #1
 800e180:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f000 f82b 	bl	800e1e0 <HAL_SPI_ErrorCallback>
    return;
 800e18a:	e003      	b.n	800e194 <HAL_SPI_IRQHandler+0x38c>
    return;
 800e18c:	bf00      	nop
 800e18e:	e002      	b.n	800e196 <HAL_SPI_IRQHandler+0x38e>
    return;
 800e190:	bf00      	nop
 800e192:	e000      	b.n	800e196 <HAL_SPI_IRQHandler+0x38e>
    return;
 800e194:	bf00      	nop
  }
}
 800e196:	3728      	adds	r7, #40	@ 0x28
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}
 800e19c:	fffffc94 	.word	0xfffffc94
 800e1a0:	0800e2b1 	.word	0x0800e2b1

0800e1a4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b083      	sub	sp, #12
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800e1ac:	bf00      	nop
 800e1ae:	370c      	adds	r7, #12
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr

0800e1b8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b083      	sub	sp, #12
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e1c0:	bf00      	nop
 800e1c2:	370c      	adds	r7, #12
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr

0800e1cc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b083      	sub	sp, #12
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800e1d4:	bf00      	nop
 800e1d6:	370c      	adds	r7, #12
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr

0800e1e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e1e8:	bf00      	nop
 800e1ea:	370c      	adds	r7, #12
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f2:	4770      	bx	lr

0800e1f4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b083      	sub	sp, #12
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800e1fc:	bf00      	nop
 800e1fe:	370c      	adds	r7, #12
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	4770      	bx	lr

0800e208 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b084      	sub	sp, #16
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e214:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	2b07      	cmp	r3, #7
 800e220:	d011      	beq.n	800e246 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e226:	69db      	ldr	r3, [r3, #28]
 800e228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e22c:	d103      	bne.n	800e236 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800e22e:	68f8      	ldr	r0, [r7, #12]
 800e230:	f7f3 ffc0 	bl	80021b4 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800e234:	e007      	b.n	800e246 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	691a      	ldr	r2, [r3, #16]
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f042 0208 	orr.w	r2, r2, #8
 800e244:	611a      	str	r2, [r3, #16]
}
 800e246:	bf00      	nop
 800e248:	3710      	adds	r7, #16
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}

0800e24e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e24e:	b580      	push	{r7, lr}
 800e250:	b084      	sub	sp, #16
 800e252:	af00      	add	r7, sp, #0
 800e254:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e25a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800e25c:	68f8      	ldr	r0, [r7, #12]
 800e25e:	f7ff ffb5 	bl	800e1cc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e262:	bf00      	nop
 800e264:	3710      	adds	r7, #16
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}

0800e26a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e26a:	b580      	push	{r7, lr}
 800e26c:	b084      	sub	sp, #16
 800e26e:	af00      	add	r7, sp, #0
 800e270:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e276:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f7f6 fd43 	bl	8004d04 <HAL_DMA_GetError>
 800e27e:	4603      	mov	r3, r0
 800e280:	2b02      	cmp	r3, #2
 800e282:	d011      	beq.n	800e2a8 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800e284:	68f8      	ldr	r0, [r7, #12]
 800e286:	f000 f82d 	bl	800e2e4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e290:	f043 0210 	orr.w	r2, r3, #16
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2201      	movs	r2, #1
 800e29e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800e2a2:	68f8      	ldr	r0, [r7, #12]
 800e2a4:	f7ff ff9c 	bl	800e1e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800e2a8:	bf00      	nop
 800e2aa:	3710      	adds	r7, #16
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b084      	sub	sp, #16
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e2d6:	68f8      	ldr	r0, [r7, #12]
 800e2d8:	f7ff ff82 	bl	800e1e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e2dc:	bf00      	nop
 800e2de:	3710      	adds	r7, #16
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b085      	sub	sp, #20
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	695b      	ldr	r3, [r3, #20]
 800e2f2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	699a      	ldr	r2, [r3, #24]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f042 0208 	orr.w	r2, r2, #8
 800e302:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	699a      	ldr	r2, [r3, #24]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f042 0210 	orr.w	r2, r2, #16
 800e312:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f022 0201 	bic.w	r2, r2, #1
 800e322:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	6919      	ldr	r1, [r3, #16]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681a      	ldr	r2, [r3, #0]
 800e32e:	4b3c      	ldr	r3, [pc, #240]	@ (800e420 <SPI_CloseTransfer+0x13c>)
 800e330:	400b      	ands	r3, r1
 800e332:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	689a      	ldr	r2, [r3, #8]
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e342:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	2b04      	cmp	r3, #4
 800e34e:	d014      	beq.n	800e37a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	f003 0320 	and.w	r3, r3, #32
 800e356:	2b00      	cmp	r3, #0
 800e358:	d00f      	beq.n	800e37a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e360:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	699a      	ldr	r2, [r3, #24]
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f042 0220 	orr.w	r2, r2, #32
 800e378:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e380:	b2db      	uxtb	r3, r3
 800e382:	2b03      	cmp	r3, #3
 800e384:	d014      	beq.n	800e3b0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d00f      	beq.n	800e3b0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e396:	f043 0204 	orr.w	r2, r3, #4
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	699a      	ldr	r2, [r3, #24]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e3ae:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00f      	beq.n	800e3da <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e3c0:	f043 0201 	orr.w	r2, r3, #1
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	699a      	ldr	r2, [r3, #24]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e3d8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d00f      	beq.n	800e404 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e3ea:	f043 0208 	orr.w	r2, r3, #8
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	699a      	ldr	r2, [r3, #24]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e402:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2200      	movs	r2, #0
 800e408:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2200      	movs	r2, #0
 800e410:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800e414:	bf00      	nop
 800e416:	3714      	adds	r7, #20
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr
 800e420:	fffffc90 	.word	0xfffffc90

0800e424 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e424:	b480      	push	{r7}
 800e426:	b085      	sub	sp, #20
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e430:	095b      	lsrs	r3, r3, #5
 800e432:	3301      	adds	r3, #1
 800e434:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	68db      	ldr	r3, [r3, #12]
 800e43a:	3301      	adds	r3, #1
 800e43c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	3307      	adds	r3, #7
 800e442:	08db      	lsrs	r3, r3, #3
 800e444:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	68fa      	ldr	r2, [r7, #12]
 800e44a:	fb02 f303 	mul.w	r3, r2, r3
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3714      	adds	r7, #20
 800e452:	46bd      	mov	sp, r7
 800e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e458:	4770      	bx	lr
	...

0800e45c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e45c:	b084      	sub	sp, #16
 800e45e:	b480      	push	{r7}
 800e460:	b085      	sub	sp, #20
 800e462:	af00      	add	r7, sp, #0
 800e464:	6078      	str	r0, [r7, #4]
 800e466:	f107 001c 	add.w	r0, r7, #28
 800e46a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e46e:	2300      	movs	r3, #0
 800e470:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800e472:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800e474:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800e476:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800e478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800e47a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800e47c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800e47e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800e482:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800e484:	68fa      	ldr	r2, [r7, #12]
 800e486:	4313      	orrs	r3, r2
 800e488:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	685a      	ldr	r2, [r3, #4]
 800e48e:	4b07      	ldr	r3, [pc, #28]	@ (800e4ac <SDMMC_Init+0x50>)
 800e490:	4013      	ands	r3, r2
 800e492:	68fa      	ldr	r2, [r7, #12]
 800e494:	431a      	orrs	r2, r3
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e49a:	2300      	movs	r3, #0
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3714      	adds	r7, #20
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a6:	b004      	add	sp, #16
 800e4a8:	4770      	bx	lr
 800e4aa:	bf00      	nop
 800e4ac:	ffc02c00 	.word	0xffc02c00

0800e4b0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	370c      	adds	r7, #12
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c8:	4770      	bx	lr

0800e4ca <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800e4ca:	b480      	push	{r7}
 800e4cc:	b083      	sub	sp, #12
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
 800e4d2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800e4de:	2300      	movs	r3, #0
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	370c      	adds	r7, #12
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr

0800e4ec <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f043 0203 	orr.w	r2, r3, #3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e500:	2300      	movs	r3, #0
}
 800e502:	4618      	mov	r0, r3
 800e504:	370c      	adds	r7, #12
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr

0800e50e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800e50e:	b480      	push	{r7}
 800e510:	b083      	sub	sp, #12
 800e512:	af00      	add	r7, sp, #0
 800e514:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f003 0303 	and.w	r3, r3, #3
}
 800e51e:	4618      	mov	r0, r3
 800e520:	370c      	adds	r7, #12
 800e522:	46bd      	mov	sp, r7
 800e524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e528:	4770      	bx	lr
	...

0800e52c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e52c:	b480      	push	{r7}
 800e52e:	b085      	sub	sp, #20
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e536:	2300      	movs	r3, #0
 800e538:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e54a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800e550:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800e556:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e558:	68fa      	ldr	r2, [r7, #12]
 800e55a:	4313      	orrs	r3, r2
 800e55c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	68da      	ldr	r2, [r3, #12]
 800e562:	4b06      	ldr	r3, [pc, #24]	@ (800e57c <SDMMC_SendCommand+0x50>)
 800e564:	4013      	ands	r3, r2
 800e566:	68fa      	ldr	r2, [r7, #12]
 800e568:	431a      	orrs	r2, r3
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e56e:	2300      	movs	r3, #0
}
 800e570:	4618      	mov	r0, r3
 800e572:	3714      	adds	r7, #20
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr
 800e57c:	fffee0c0 	.word	0xfffee0c0

0800e580 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	691b      	ldr	r3, [r3, #16]
 800e58c:	b2db      	uxtb	r3, r3
}
 800e58e:	4618      	mov	r0, r3
 800e590:	370c      	adds	r7, #12
 800e592:	46bd      	mov	sp, r7
 800e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e598:	4770      	bx	lr

0800e59a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e59a:	b480      	push	{r7}
 800e59c:	b085      	sub	sp, #20
 800e59e:	af00      	add	r7, sp, #0
 800e5a0:	6078      	str	r0, [r7, #4]
 800e5a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	3314      	adds	r3, #20
 800e5a8:	461a      	mov	r2, r3
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	4413      	add	r3, r2
 800e5ae:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3714      	adds	r7, #20
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr

0800e5c0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b085      	sub	sp, #20
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	681a      	ldr	r2, [r3, #0]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	685a      	ldr	r2, [r3, #4]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e5e6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800e5ec:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800e5f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e5f4:	68fa      	ldr	r2, [r7, #12]
 800e5f6:	4313      	orrs	r3, r2
 800e5f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	431a      	orrs	r2, r3
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e60a:	2300      	movs	r3, #0

}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3714      	adds	r7, #20
 800e610:	46bd      	mov	sp, r7
 800e612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e616:	4770      	bx	lr

0800e618 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b088      	sub	sp, #32
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e626:	2310      	movs	r3, #16
 800e628:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e62a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e62e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e630:	2300      	movs	r3, #0
 800e632:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e638:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e63a:	f107 0308 	add.w	r3, r7, #8
 800e63e:	4619      	mov	r1, r3
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f7ff ff73 	bl	800e52c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e64a:	2110      	movs	r1, #16
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f000 fa5f 	bl	800eb10 <SDMMC_GetCmdResp1>
 800e652:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e654:	69fb      	ldr	r3, [r7, #28]
}
 800e656:	4618      	mov	r0, r3
 800e658:	3720      	adds	r7, #32
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e65e:	b580      	push	{r7, lr}
 800e660:	b088      	sub	sp, #32
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
 800e666:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e66c:	2311      	movs	r3, #17
 800e66e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e670:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e674:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e676:	2300      	movs	r3, #0
 800e678:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e67a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e67e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e680:	f107 0308 	add.w	r3, r7, #8
 800e684:	4619      	mov	r1, r3
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f7ff ff50 	bl	800e52c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e68c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e690:	2111      	movs	r1, #17
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f000 fa3c 	bl	800eb10 <SDMMC_GetCmdResp1>
 800e698:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e69a:	69fb      	ldr	r3, [r7, #28]
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3720      	adds	r7, #32
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b088      	sub	sp, #32
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e6b2:	2312      	movs	r3, #18
 800e6b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e6ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e6c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6c6:	f107 0308 	add.w	r3, r7, #8
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7ff ff2d 	bl	800e52c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e6d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e6d6:	2112      	movs	r1, #18
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 fa19 	bl	800eb10 <SDMMC_GetCmdResp1>
 800e6de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6e0:	69fb      	ldr	r3, [r7, #28]
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3720      	adds	r7, #32
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e6ea:	b580      	push	{r7, lr}
 800e6ec:	b088      	sub	sp, #32
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
 800e6f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e6f8:	2318      	movs	r3, #24
 800e6fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e700:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e702:	2300      	movs	r3, #0
 800e704:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e70a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e70c:	f107 0308 	add.w	r3, r7, #8
 800e710:	4619      	mov	r1, r3
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f7ff ff0a 	bl	800e52c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e71c:	2118      	movs	r1, #24
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 f9f6 	bl	800eb10 <SDMMC_GetCmdResp1>
 800e724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e726:	69fb      	ldr	r3, [r7, #28]
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3720      	adds	r7, #32
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b088      	sub	sp, #32
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e73e:	2319      	movs	r3, #25
 800e740:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e742:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e746:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e748:	2300      	movs	r3, #0
 800e74a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e74c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e750:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e752:	f107 0308 	add.w	r3, r7, #8
 800e756:	4619      	mov	r1, r3
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f7ff fee7 	bl	800e52c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e75e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e762:	2119      	movs	r1, #25
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f000 f9d3 	bl	800eb10 <SDMMC_GetCmdResp1>
 800e76a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e76c:	69fb      	ldr	r3, [r7, #28]
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3720      	adds	r7, #32
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
	...

0800e778 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b088      	sub	sp, #32
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e780:	2300      	movs	r3, #0
 800e782:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e784:	230c      	movs	r3, #12
 800e786:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e788:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e78c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e78e:	2300      	movs	r3, #0
 800e790:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e792:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e796:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	68db      	ldr	r3, [r3, #12]
 800e79c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	68db      	ldr	r3, [r3, #12]
 800e7a8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e7b0:	f107 0308 	add.w	r3, r7, #8
 800e7b4:	4619      	mov	r1, r3
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7ff feb8 	bl	800e52c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e7bc:	4a0b      	ldr	r2, [pc, #44]	@ (800e7ec <SDMMC_CmdStopTransfer+0x74>)
 800e7be:	210c      	movs	r1, #12
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f000 f9a5 	bl	800eb10 <SDMMC_GetCmdResp1>
 800e7c6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	68db      	ldr	r3, [r3, #12]
 800e7cc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e7d4:	69fb      	ldr	r3, [r7, #28]
 800e7d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e7da:	d101      	bne.n	800e7e0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800e7e0:	69fb      	ldr	r3, [r7, #28]
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	3720      	adds	r7, #32
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}
 800e7ea:	bf00      	nop
 800e7ec:	05f5e100 	.word	0x05f5e100

0800e7f0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b088      	sub	sp, #32
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e7fe:	2307      	movs	r3, #7
 800e800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e802:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e806:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e808:	2300      	movs	r3, #0
 800e80a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e80c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e810:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e812:	f107 0308 	add.w	r3, r7, #8
 800e816:	4619      	mov	r1, r3
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f7ff fe87 	bl	800e52c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e81e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e822:	2107      	movs	r1, #7
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 f973 	bl	800eb10 <SDMMC_GetCmdResp1>
 800e82a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e82c:	69fb      	ldr	r3, [r7, #28]
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3720      	adds	r7, #32
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e836:	b580      	push	{r7, lr}
 800e838:	b088      	sub	sp, #32
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e83e:	2300      	movs	r3, #0
 800e840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e842:	2300      	movs	r3, #0
 800e844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e846:	2300      	movs	r3, #0
 800e848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e84a:	2300      	movs	r3, #0
 800e84c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e84e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e852:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e854:	f107 0308 	add.w	r3, r7, #8
 800e858:	4619      	mov	r1, r3
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f7ff fe66 	bl	800e52c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f000 fb97 	bl	800ef94 <SDMMC_GetCmdError>
 800e866:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e868:	69fb      	ldr	r3, [r7, #28]
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3720      	adds	r7, #32
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e872:	b580      	push	{r7, lr}
 800e874:	b088      	sub	sp, #32
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e87a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800e87e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e880:	2308      	movs	r3, #8
 800e882:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e884:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e888:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e88a:	2300      	movs	r3, #0
 800e88c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e88e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e892:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e894:	f107 0308 	add.w	r3, r7, #8
 800e898:	4619      	mov	r1, r3
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f7ff fe46 	bl	800e52c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f000 fb29 	bl	800eef8 <SDMMC_GetCmdResp7>
 800e8a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8a8:	69fb      	ldr	r3, [r7, #28]
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3720      	adds	r7, #32
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}

0800e8b2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e8b2:	b580      	push	{r7, lr}
 800e8b4:	b088      	sub	sp, #32
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
 800e8ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e8c0:	2337      	movs	r3, #55	@ 0x37
 800e8c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e8c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e8c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e8ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e8d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e8d4:	f107 0308 	add.w	r3, r7, #8
 800e8d8:	4619      	mov	r1, r3
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f7ff fe26 	bl	800e52c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e8e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e8e4:	2137      	movs	r1, #55	@ 0x37
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f000 f912 	bl	800eb10 <SDMMC_GetCmdResp1>
 800e8ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8ee:	69fb      	ldr	r3, [r7, #28]
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3720      	adds	r7, #32
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b088      	sub	sp, #32
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e906:	2329      	movs	r3, #41	@ 0x29
 800e908:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e90a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e90e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e910:	2300      	movs	r3, #0
 800e912:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e914:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e918:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e91a:	f107 0308 	add.w	r3, r7, #8
 800e91e:	4619      	mov	r1, r3
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f7ff fe03 	bl	800e52c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f000 fa2e 	bl	800ed88 <SDMMC_GetCmdResp3>
 800e92c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e92e:	69fb      	ldr	r3, [r7, #28]
}
 800e930:	4618      	mov	r0, r3
 800e932:	3720      	adds	r7, #32
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}

0800e938 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b088      	sub	sp, #32
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e946:	2306      	movs	r3, #6
 800e948:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e94a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e94e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e950:	2300      	movs	r3, #0
 800e952:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e954:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e958:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e95a:	f107 0308 	add.w	r3, r7, #8
 800e95e:	4619      	mov	r1, r3
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f7ff fde3 	bl	800e52c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e96a:	2106      	movs	r1, #6
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f000 f8cf 	bl	800eb10 <SDMMC_GetCmdResp1>
 800e972:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e974:	69fb      	ldr	r3, [r7, #28]
}
 800e976:	4618      	mov	r0, r3
 800e978:	3720      	adds	r7, #32
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e97e:	b580      	push	{r7, lr}
 800e980:	b088      	sub	sp, #32
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e986:	2300      	movs	r3, #0
 800e988:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e98a:	2333      	movs	r3, #51	@ 0x33
 800e98c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e98e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e992:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e994:	2300      	movs	r3, #0
 800e996:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e998:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e99c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e99e:	f107 0308 	add.w	r3, r7, #8
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7ff fdc1 	bl	800e52c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e9aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e9ae:	2133      	movs	r1, #51	@ 0x33
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f000 f8ad 	bl	800eb10 <SDMMC_GetCmdResp1>
 800e9b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9b8:	69fb      	ldr	r3, [r7, #28]
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3720      	adds	r7, #32
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b088      	sub	sp, #32
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e9ce:	2302      	movs	r3, #2
 800e9d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e9d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e9d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e9dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e9e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e9e2:	f107 0308 	add.w	r3, r7, #8
 800e9e6:	4619      	mov	r1, r3
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f7ff fd9f 	bl	800e52c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f000 f980 	bl	800ecf4 <SDMMC_GetCmdResp2>
 800e9f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9f6:	69fb      	ldr	r3, [r7, #28]
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3720      	adds	r7, #32
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b088      	sub	sp, #32
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ea0e:	2309      	movs	r3, #9
 800ea10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ea12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ea16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ea20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea22:	f107 0308 	add.w	r3, r7, #8
 800ea26:	4619      	mov	r1, r3
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f7ff fd7f 	bl	800e52c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 f960 	bl	800ecf4 <SDMMC_GetCmdResp2>
 800ea34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea36:	69fb      	ldr	r3, [r7, #28]
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3720      	adds	r7, #32
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b088      	sub	sp, #32
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ea4e:	2303      	movs	r3, #3
 800ea50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ea52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ea56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ea60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea62:	f107 0308 	add.w	r3, r7, #8
 800ea66:	4619      	mov	r1, r3
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f7ff fd5f 	bl	800e52c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ea6e:	683a      	ldr	r2, [r7, #0]
 800ea70:	2103      	movs	r1, #3
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f000 f9c8 	bl	800ee08 <SDMMC_GetCmdResp6>
 800ea78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea7a:	69fb      	ldr	r3, [r7, #28]
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3720      	adds	r7, #32
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b088      	sub	sp, #32
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ea92:	230d      	movs	r3, #13
 800ea94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ea96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ea9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eaa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eaa4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eaa6:	f107 0308 	add.w	r3, r7, #8
 800eaaa:	4619      	mov	r1, r3
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	f7ff fd3d 	bl	800e52c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800eab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eab6:	210d      	movs	r1, #13
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f000 f829 	bl	800eb10 <SDMMC_GetCmdResp1>
 800eabe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eac0:	69fb      	ldr	r3, [r7, #28]
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3720      	adds	r7, #32
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b088      	sub	sp, #32
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ead2:	2300      	movs	r3, #0
 800ead4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ead6:	230d      	movs	r3, #13
 800ead8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eada:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eade:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eae0:	2300      	movs	r3, #0
 800eae2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eae8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eaea:	f107 0308 	add.w	r3, r7, #8
 800eaee:	4619      	mov	r1, r3
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f7ff fd1b 	bl	800e52c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800eaf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eafa:	210d      	movs	r1, #13
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f000 f807 	bl	800eb10 <SDMMC_GetCmdResp1>
 800eb02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb04:	69fb      	ldr	r3, [r7, #28]
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3720      	adds	r7, #32
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
	...

0800eb10 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b088      	sub	sp, #32
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	60f8      	str	r0, [r7, #12]
 800eb18:	460b      	mov	r3, r1
 800eb1a:	607a      	str	r2, [r7, #4]
 800eb1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800eb1e:	4b70      	ldr	r3, [pc, #448]	@ (800ece0 <SDMMC_GetCmdResp1+0x1d0>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	4a70      	ldr	r2, [pc, #448]	@ (800ece4 <SDMMC_GetCmdResp1+0x1d4>)
 800eb24:	fba2 2303 	umull	r2, r3, r2, r3
 800eb28:	0a5a      	lsrs	r2, r3, #9
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	fb02 f303 	mul.w	r3, r2, r3
 800eb30:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800eb32:	69fb      	ldr	r3, [r7, #28]
 800eb34:	1e5a      	subs	r2, r3, #1
 800eb36:	61fa      	str	r2, [r7, #28]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d102      	bne.n	800eb42 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb3c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800eb40:	e0c9      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb46:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800eb48:	69ba      	ldr	r2, [r7, #24]
 800eb4a:	4b67      	ldr	r3, [pc, #412]	@ (800ece8 <SDMMC_GetCmdResp1+0x1d8>)
 800eb4c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d0ef      	beq.n	800eb32 <SDMMC_GetCmdResp1+0x22>
 800eb52:	69bb      	ldr	r3, [r7, #24]
 800eb54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1ea      	bne.n	800eb32 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb60:	f003 0304 	and.w	r3, r3, #4
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d004      	beq.n	800eb72 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2204      	movs	r2, #4
 800eb6c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb6e:	2304      	movs	r3, #4
 800eb70:	e0b1      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb76:	f003 0301 	and.w	r3, r3, #1
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d004      	beq.n	800eb88 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2201      	movs	r2, #1
 800eb82:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eb84:	2301      	movs	r3, #1
 800eb86:	e0a6      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	4a58      	ldr	r2, [pc, #352]	@ (800ecec <SDMMC_GetCmdResp1+0x1dc>)
 800eb8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800eb8e:	68f8      	ldr	r0, [r7, #12]
 800eb90:	f7ff fcf6 	bl	800e580 <SDMMC_GetCommandResponse>
 800eb94:	4603      	mov	r3, r0
 800eb96:	461a      	mov	r2, r3
 800eb98:	7afb      	ldrb	r3, [r7, #11]
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d001      	beq.n	800eba2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eb9e:	2301      	movs	r3, #1
 800eba0:	e099      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800eba2:	2100      	movs	r1, #0
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	f7ff fcf8 	bl	800e59a <SDMMC_GetResponse>
 800ebaa:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ebac:	697a      	ldr	r2, [r7, #20]
 800ebae:	4b50      	ldr	r3, [pc, #320]	@ (800ecf0 <SDMMC_GetCmdResp1+0x1e0>)
 800ebb0:	4013      	ands	r3, r2
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d101      	bne.n	800ebba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	e08d      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	da02      	bge.n	800ebc6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ebc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ebc4:	e087      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d001      	beq.n	800ebd4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ebd0:	2340      	movs	r3, #64	@ 0x40
 800ebd2:	e080      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d001      	beq.n	800ebe2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ebde:	2380      	movs	r3, #128	@ 0x80
 800ebe0:	e079      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d002      	beq.n	800ebf2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ebec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ebf0:	e071      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d002      	beq.n	800ec02 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ebfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ec00:	e069      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d002      	beq.n	800ec12 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ec0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec10:	e061      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d002      	beq.n	800ec22 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ec1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ec20:	e059      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d002      	beq.n	800ec32 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ec2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ec30:	e051      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d002      	beq.n	800ec42 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ec3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ec40:	e049      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d002      	beq.n	800ec52 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ec4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ec50:	e041      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d002      	beq.n	800ec62 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ec5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ec60:	e039      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d002      	beq.n	800ec72 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ec6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ec70:	e031      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d002      	beq.n	800ec82 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ec7c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ec80:	e029      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d002      	beq.n	800ec92 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ec8c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ec90:	e021      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d002      	beq.n	800eca2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ec9c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800eca0:	e019      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d002      	beq.n	800ecb2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ecac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ecb0:	e011      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d002      	beq.n	800ecc2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ecbc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ecc0:	e009      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	f003 0308 	and.w	r3, r3, #8
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d002      	beq.n	800ecd2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800eccc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800ecd0:	e001      	b.n	800ecd6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ecd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3720      	adds	r7, #32
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	24000008 	.word	0x24000008
 800ece4:	10624dd3 	.word	0x10624dd3
 800ece8:	00200045 	.word	0x00200045
 800ecec:	002000c5 	.word	0x002000c5
 800ecf0:	fdffe008 	.word	0xfdffe008

0800ecf4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b085      	sub	sp, #20
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ecfc:	4b1f      	ldr	r3, [pc, #124]	@ (800ed7c <SDMMC_GetCmdResp2+0x88>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4a1f      	ldr	r2, [pc, #124]	@ (800ed80 <SDMMC_GetCmdResp2+0x8c>)
 800ed02:	fba2 2303 	umull	r2, r3, r2, r3
 800ed06:	0a5b      	lsrs	r3, r3, #9
 800ed08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed0c:	fb02 f303 	mul.w	r3, r2, r3
 800ed10:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	1e5a      	subs	r2, r3, #1
 800ed16:	60fa      	str	r2, [r7, #12]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d102      	bne.n	800ed22 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed1c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ed20:	e026      	b.n	800ed70 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed26:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d0ef      	beq.n	800ed12 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d1ea      	bne.n	800ed12 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed40:	f003 0304 	and.w	r3, r3, #4
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d004      	beq.n	800ed52 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2204      	movs	r2, #4
 800ed4c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ed4e:	2304      	movs	r3, #4
 800ed50:	e00e      	b.n	800ed70 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed56:	f003 0301 	and.w	r3, r3, #1
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d004      	beq.n	800ed68 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2201      	movs	r2, #1
 800ed62:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed64:	2301      	movs	r3, #1
 800ed66:	e003      	b.n	800ed70 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	4a06      	ldr	r2, [pc, #24]	@ (800ed84 <SDMMC_GetCmdResp2+0x90>)
 800ed6c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ed6e:	2300      	movs	r3, #0
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3714      	adds	r7, #20
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr
 800ed7c:	24000008 	.word	0x24000008
 800ed80:	10624dd3 	.word	0x10624dd3
 800ed84:	002000c5 	.word	0x002000c5

0800ed88 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ed88:	b480      	push	{r7}
 800ed8a:	b085      	sub	sp, #20
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ed90:	4b1a      	ldr	r3, [pc, #104]	@ (800edfc <SDMMC_GetCmdResp3+0x74>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4a1a      	ldr	r2, [pc, #104]	@ (800ee00 <SDMMC_GetCmdResp3+0x78>)
 800ed96:	fba2 2303 	umull	r2, r3, r2, r3
 800ed9a:	0a5b      	lsrs	r3, r3, #9
 800ed9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eda0:	fb02 f303 	mul.w	r3, r2, r3
 800eda4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	1e5a      	subs	r2, r3, #1
 800edaa:	60fa      	str	r2, [r7, #12]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d102      	bne.n	800edb6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800edb0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800edb4:	e01b      	b.n	800edee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d0ef      	beq.n	800eda6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d1ea      	bne.n	800eda6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edd4:	f003 0304 	and.w	r3, r3, #4
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d004      	beq.n	800ede6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2204      	movs	r2, #4
 800ede0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ede2:	2304      	movs	r3, #4
 800ede4:	e003      	b.n	800edee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	4a06      	ldr	r2, [pc, #24]	@ (800ee04 <SDMMC_GetCmdResp3+0x7c>)
 800edea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800edec:	2300      	movs	r3, #0
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3714      	adds	r7, #20
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr
 800edfa:	bf00      	nop
 800edfc:	24000008 	.word	0x24000008
 800ee00:	10624dd3 	.word	0x10624dd3
 800ee04:	002000c5 	.word	0x002000c5

0800ee08 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b088      	sub	sp, #32
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	60f8      	str	r0, [r7, #12]
 800ee10:	460b      	mov	r3, r1
 800ee12:	607a      	str	r2, [r7, #4]
 800ee14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ee16:	4b35      	ldr	r3, [pc, #212]	@ (800eeec <SDMMC_GetCmdResp6+0xe4>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	4a35      	ldr	r2, [pc, #212]	@ (800eef0 <SDMMC_GetCmdResp6+0xe8>)
 800ee1c:	fba2 2303 	umull	r2, r3, r2, r3
 800ee20:	0a5b      	lsrs	r3, r3, #9
 800ee22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee26:	fb02 f303 	mul.w	r3, r2, r3
 800ee2a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ee2c:	69fb      	ldr	r3, [r7, #28]
 800ee2e:	1e5a      	subs	r2, r3, #1
 800ee30:	61fa      	str	r2, [r7, #28]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d102      	bne.n	800ee3c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ee36:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ee3a:	e052      	b.n	800eee2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee40:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ee42:	69bb      	ldr	r3, [r7, #24]
 800ee44:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d0ef      	beq.n	800ee2c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ee4c:	69bb      	ldr	r3, [r7, #24]
 800ee4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d1ea      	bne.n	800ee2c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee5a:	f003 0304 	and.w	r3, r3, #4
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d004      	beq.n	800ee6c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2204      	movs	r2, #4
 800ee66:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ee68:	2304      	movs	r3, #4
 800ee6a:	e03a      	b.n	800eee2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee70:	f003 0301 	and.w	r3, r3, #1
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d004      	beq.n	800ee82 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ee7e:	2301      	movs	r3, #1
 800ee80:	e02f      	b.n	800eee2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ee82:	68f8      	ldr	r0, [r7, #12]
 800ee84:	f7ff fb7c 	bl	800e580 <SDMMC_GetCommandResponse>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	7afb      	ldrb	r3, [r7, #11]
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	d001      	beq.n	800ee96 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ee92:	2301      	movs	r3, #1
 800ee94:	e025      	b.n	800eee2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	4a16      	ldr	r2, [pc, #88]	@ (800eef4 <SDMMC_GetCmdResp6+0xec>)
 800ee9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ee9c:	2100      	movs	r1, #0
 800ee9e:	68f8      	ldr	r0, [r7, #12]
 800eea0:	f7ff fb7b 	bl	800e59a <SDMMC_GetResponse>
 800eea4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d106      	bne.n	800eebe <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	0c1b      	lsrs	r3, r3, #16
 800eeb4:	b29a      	uxth	r2, r3
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800eeba:	2300      	movs	r3, #0
 800eebc:	e011      	b.n	800eee2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d002      	beq.n	800eece <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eec8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800eecc:	e009      	b.n	800eee2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d002      	beq.n	800eede <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800eed8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eedc:	e001      	b.n	800eee2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eede:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3720      	adds	r7, #32
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
 800eeea:	bf00      	nop
 800eeec:	24000008 	.word	0x24000008
 800eef0:	10624dd3 	.word	0x10624dd3
 800eef4:	002000c5 	.word	0x002000c5

0800eef8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b085      	sub	sp, #20
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ef00:	4b22      	ldr	r3, [pc, #136]	@ (800ef8c <SDMMC_GetCmdResp7+0x94>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a22      	ldr	r2, [pc, #136]	@ (800ef90 <SDMMC_GetCmdResp7+0x98>)
 800ef06:	fba2 2303 	umull	r2, r3, r2, r3
 800ef0a:	0a5b      	lsrs	r3, r3, #9
 800ef0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef10:	fb02 f303 	mul.w	r3, r2, r3
 800ef14:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	1e5a      	subs	r2, r3, #1
 800ef1a:	60fa      	str	r2, [r7, #12]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d102      	bne.n	800ef26 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ef20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ef24:	e02c      	b.n	800ef80 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef2a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d0ef      	beq.n	800ef16 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d1ea      	bne.n	800ef16 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef44:	f003 0304 	and.w	r3, r3, #4
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d004      	beq.n	800ef56 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2204      	movs	r2, #4
 800ef50:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ef52:	2304      	movs	r3, #4
 800ef54:	e014      	b.n	800ef80 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef5a:	f003 0301 	and.w	r3, r3, #1
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d004      	beq.n	800ef6c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2201      	movs	r2, #1
 800ef66:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef68:	2301      	movs	r3, #1
 800ef6a:	e009      	b.n	800ef80 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d002      	beq.n	800ef7e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2240      	movs	r2, #64	@ 0x40
 800ef7c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ef7e:	2300      	movs	r3, #0

}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3714      	adds	r7, #20
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr
 800ef8c:	24000008 	.word	0x24000008
 800ef90:	10624dd3 	.word	0x10624dd3

0800ef94 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b085      	sub	sp, #20
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ef9c:	4b11      	ldr	r3, [pc, #68]	@ (800efe4 <SDMMC_GetCmdError+0x50>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4a11      	ldr	r2, [pc, #68]	@ (800efe8 <SDMMC_GetCmdError+0x54>)
 800efa2:	fba2 2303 	umull	r2, r3, r2, r3
 800efa6:	0a5b      	lsrs	r3, r3, #9
 800efa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800efac:	fb02 f303 	mul.w	r3, r2, r3
 800efb0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	1e5a      	subs	r2, r3, #1
 800efb6:	60fa      	str	r2, [r7, #12]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d102      	bne.n	800efc2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800efbc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800efc0:	e009      	b.n	800efd6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d0f1      	beq.n	800efb2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	4a06      	ldr	r2, [pc, #24]	@ (800efec <SDMMC_GetCmdError+0x58>)
 800efd2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800efd4:	2300      	movs	r3, #0
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3714      	adds	r7, #20
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr
 800efe2:	bf00      	nop
 800efe4:	24000008 	.word	0x24000008
 800efe8:	10624dd3 	.word	0x10624dd3
 800efec:	002000c5 	.word	0x002000c5

0800eff0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800eff0:	b480      	push	{r7}
 800eff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800eff4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr

0800f000 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f006:	2300      	movs	r3, #0
 800f008:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f00a:	f000 f879 	bl	800f100 <BSP_SD_IsDetected>
 800f00e:	4603      	mov	r3, r0
 800f010:	2b01      	cmp	r3, #1
 800f012:	d001      	beq.n	800f018 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f014:	2302      	movs	r3, #2
 800f016:	e012      	b.n	800f03e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f018:	480b      	ldr	r0, [pc, #44]	@ (800f048 <BSP_SD_Init+0x48>)
 800f01a:	f7fd f8dd 	bl	800c1d8 <HAL_SD_Init>
 800f01e:	4603      	mov	r3, r0
 800f020:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f022:	79fb      	ldrb	r3, [r7, #7]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d109      	bne.n	800f03c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f028:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800f02c:	4806      	ldr	r0, [pc, #24]	@ (800f048 <BSP_SD_Init+0x48>)
 800f02e:	f7fd ff99 	bl	800cf64 <HAL_SD_ConfigWideBusOperation>
 800f032:	4603      	mov	r3, r0
 800f034:	2b00      	cmp	r3, #0
 800f036:	d001      	beq.n	800f03c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f038:	2301      	movs	r3, #1
 800f03a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f03c:	79fb      	ldrb	r3, [r7, #7]
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3708      	adds	r7, #8
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	2400009c 	.word	0x2400009c

0800f04c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b088      	sub	sp, #32
 800f050:	af02      	add	r7, sp, #8
 800f052:	60f8      	str	r0, [r7, #12]
 800f054:	60b9      	str	r1, [r7, #8]
 800f056:	607a      	str	r2, [r7, #4]
 800f058:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f05a:	2300      	movs	r3, #0
 800f05c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	9300      	str	r3, [sp, #0]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	68ba      	ldr	r2, [r7, #8]
 800f066:	68f9      	ldr	r1, [r7, #12]
 800f068:	4806      	ldr	r0, [pc, #24]	@ (800f084 <BSP_SD_ReadBlocks+0x38>)
 800f06a:	f7fd f9d5 	bl	800c418 <HAL_SD_ReadBlocks>
 800f06e:	4603      	mov	r3, r0
 800f070:	2b00      	cmp	r3, #0
 800f072:	d001      	beq.n	800f078 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f074:	2301      	movs	r3, #1
 800f076:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f078:	7dfb      	ldrb	r3, [r7, #23]
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3718      	adds	r7, #24
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
 800f082:	bf00      	nop
 800f084:	2400009c 	.word	0x2400009c

0800f088 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b088      	sub	sp, #32
 800f08c:	af02      	add	r7, sp, #8
 800f08e:	60f8      	str	r0, [r7, #12]
 800f090:	60b9      	str	r1, [r7, #8]
 800f092:	607a      	str	r2, [r7, #4]
 800f094:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f096:	2300      	movs	r3, #0
 800f098:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	9300      	str	r3, [sp, #0]
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	68ba      	ldr	r2, [r7, #8]
 800f0a2:	68f9      	ldr	r1, [r7, #12]
 800f0a4:	4806      	ldr	r0, [pc, #24]	@ (800f0c0 <BSP_SD_WriteBlocks+0x38>)
 800f0a6:	f7fd fb41 	bl	800c72c <HAL_SD_WriteBlocks>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d001      	beq.n	800f0b4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f0b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3718      	adds	r7, #24
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	2400009c 	.word	0x2400009c

0800f0c4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f0c8:	4805      	ldr	r0, [pc, #20]	@ (800f0e0 <BSP_SD_GetCardState+0x1c>)
 800f0ca:	f7fe f85d 	bl	800d188 <HAL_SD_GetCardState>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b04      	cmp	r3, #4
 800f0d2:	bf14      	ite	ne
 800f0d4:	2301      	movne	r3, #1
 800f0d6:	2300      	moveq	r3, #0
 800f0d8:	b2db      	uxtb	r3, r3
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	bd80      	pop	{r7, pc}
 800f0de:	bf00      	nop
 800f0e0:	2400009c 	.word	0x2400009c

0800f0e4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f0ec:	6879      	ldr	r1, [r7, #4]
 800f0ee:	4803      	ldr	r0, [pc, #12]	@ (800f0fc <BSP_SD_GetCardInfo+0x18>)
 800f0f0:	f7fd ff0c 	bl	800cf0c <HAL_SD_GetCardInfo>
}
 800f0f4:	bf00      	nop
 800f0f6:	3708      	adds	r7, #8
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}
 800f0fc:	2400009c 	.word	0x2400009c

0800f100 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b082      	sub	sp, #8
 800f104:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f106:	2301      	movs	r3, #1
 800f108:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f10a:	f000 f80b 	bl	800f124 <BSP_PlatformIsDetected>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b00      	cmp	r3, #0
 800f112:	d101      	bne.n	800f118 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f114:	2300      	movs	r3, #0
 800f116:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f118:	79fb      	ldrb	r3, [r7, #7]
 800f11a:	b2db      	uxtb	r3, r3
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3708      	adds	r7, #8
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f124:	b580      	push	{r7, lr}
 800f126:	b082      	sub	sp, #8
 800f128:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f12a:	2301      	movs	r3, #1
 800f12c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f12e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800f132:	4806      	ldr	r0, [pc, #24]	@ (800f14c <BSP_PlatformIsDetected+0x28>)
 800f134:	f7f6 fe8e 	bl	8005e54 <HAL_GPIO_ReadPin>
 800f138:	4603      	mov	r3, r0
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d001      	beq.n	800f142 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f13e:	2300      	movs	r3, #0
 800f140:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f142:	79fb      	ldrb	r3, [r7, #7]
}
 800f144:	4618      	mov	r0, r3
 800f146:	3708      	adds	r7, #8
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	58020000 	.word	0x58020000

0800f150 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b082      	sub	sp, #8
 800f154:	af00      	add	r7, sp, #0
 800f156:	4603      	mov	r3, r0
 800f158:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f15a:	4b0b      	ldr	r3, [pc, #44]	@ (800f188 <SD_CheckStatus+0x38>)
 800f15c:	2201      	movs	r2, #1
 800f15e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f160:	f7ff ffb0 	bl	800f0c4 <BSP_SD_GetCardState>
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d107      	bne.n	800f17a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f16a:	4b07      	ldr	r3, [pc, #28]	@ (800f188 <SD_CheckStatus+0x38>)
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	f023 0301 	bic.w	r3, r3, #1
 800f174:	b2da      	uxtb	r2, r3
 800f176:	4b04      	ldr	r3, [pc, #16]	@ (800f188 <SD_CheckStatus+0x38>)
 800f178:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f17a:	4b03      	ldr	r3, [pc, #12]	@ (800f188 <SD_CheckStatus+0x38>)
 800f17c:	781b      	ldrb	r3, [r3, #0]
 800f17e:	b2db      	uxtb	r3, r3
}
 800f180:	4618      	mov	r0, r3
 800f182:	3708      	adds	r7, #8
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}
 800f188:	24000015 	.word	0x24000015

0800f18c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b082      	sub	sp, #8
 800f190:	af00      	add	r7, sp, #0
 800f192:	4603      	mov	r3, r0
 800f194:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f196:	4b0b      	ldr	r3, [pc, #44]	@ (800f1c4 <SD_initialize+0x38>)
 800f198:	2201      	movs	r2, #1
 800f19a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f19c:	f7ff ff30 	bl	800f000 <BSP_SD_Init>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d107      	bne.n	800f1b6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800f1a6:	79fb      	ldrb	r3, [r7, #7]
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7ff ffd1 	bl	800f150 <SD_CheckStatus>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	4b04      	ldr	r3, [pc, #16]	@ (800f1c4 <SD_initialize+0x38>)
 800f1b4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f1b6:	4b03      	ldr	r3, [pc, #12]	@ (800f1c4 <SD_initialize+0x38>)
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	b2db      	uxtb	r3, r3
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3708      	adds	r7, #8
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}
 800f1c4:	24000015 	.word	0x24000015

0800f1c8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f1d2:	79fb      	ldrb	r3, [r7, #7]
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7ff ffbb 	bl	800f150 <SD_CheckStatus>
 800f1da:	4603      	mov	r3, r0
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	3708      	adds	r7, #8
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}

0800f1e4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b086      	sub	sp, #24
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	60b9      	str	r1, [r7, #8]
 800f1ec:	607a      	str	r2, [r7, #4]
 800f1ee:	603b      	str	r3, [r7, #0]
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800f1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f1fc:	683a      	ldr	r2, [r7, #0]
 800f1fe:	6879      	ldr	r1, [r7, #4]
 800f200:	68b8      	ldr	r0, [r7, #8]
 800f202:	f7ff ff23 	bl	800f04c <BSP_SD_ReadBlocks>
 800f206:	4603      	mov	r3, r0
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d107      	bne.n	800f21c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f20c:	bf00      	nop
 800f20e:	f7ff ff59 	bl	800f0c4 <BSP_SD_GetCardState>
 800f212:	4603      	mov	r3, r0
 800f214:	2b00      	cmp	r3, #0
 800f216:	d1fa      	bne.n	800f20e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800f218:	2300      	movs	r3, #0
 800f21a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f21c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3718      	adds	r7, #24
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}

0800f226 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f226:	b580      	push	{r7, lr}
 800f228:	b086      	sub	sp, #24
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	60b9      	str	r1, [r7, #8]
 800f22e:	607a      	str	r2, [r7, #4]
 800f230:	603b      	str	r3, [r7, #0]
 800f232:	4603      	mov	r3, r0
 800f234:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f236:	2301      	movs	r3, #1
 800f238:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800f23a:	f04f 33ff 	mov.w	r3, #4294967295
 800f23e:	683a      	ldr	r2, [r7, #0]
 800f240:	6879      	ldr	r1, [r7, #4]
 800f242:	68b8      	ldr	r0, [r7, #8]
 800f244:	f7ff ff20 	bl	800f088 <BSP_SD_WriteBlocks>
 800f248:	4603      	mov	r3, r0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d107      	bne.n	800f25e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800f24e:	bf00      	nop
 800f250:	f7ff ff38 	bl	800f0c4 <BSP_SD_GetCardState>
 800f254:	4603      	mov	r3, r0
 800f256:	2b00      	cmp	r3, #0
 800f258:	d1fa      	bne.n	800f250 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800f25a:	2300      	movs	r3, #0
 800f25c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f25e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f260:	4618      	mov	r0, r3
 800f262:	3718      	adds	r7, #24
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b08c      	sub	sp, #48	@ 0x30
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	4603      	mov	r3, r0
 800f270:	603a      	str	r2, [r7, #0]
 800f272:	71fb      	strb	r3, [r7, #7]
 800f274:	460b      	mov	r3, r1
 800f276:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f278:	2301      	movs	r3, #1
 800f27a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f27e:	4b25      	ldr	r3, [pc, #148]	@ (800f314 <SD_ioctl+0xac>)
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	b2db      	uxtb	r3, r3
 800f284:	f003 0301 	and.w	r3, r3, #1
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d001      	beq.n	800f290 <SD_ioctl+0x28>
 800f28c:	2303      	movs	r3, #3
 800f28e:	e03c      	b.n	800f30a <SD_ioctl+0xa2>

  switch (cmd)
 800f290:	79bb      	ldrb	r3, [r7, #6]
 800f292:	2b03      	cmp	r3, #3
 800f294:	d834      	bhi.n	800f300 <SD_ioctl+0x98>
 800f296:	a201      	add	r2, pc, #4	@ (adr r2, 800f29c <SD_ioctl+0x34>)
 800f298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f29c:	0800f2ad 	.word	0x0800f2ad
 800f2a0:	0800f2b5 	.word	0x0800f2b5
 800f2a4:	0800f2cd 	.word	0x0800f2cd
 800f2a8:	0800f2e7 	.word	0x0800f2e7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f2b2:	e028      	b.n	800f306 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f2b4:	f107 0308 	add.w	r3, r7, #8
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7ff ff13 	bl	800f0e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f2be:	6a3a      	ldr	r2, [r7, #32]
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f2ca:	e01c      	b.n	800f306 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f2cc:	f107 0308 	add.w	r3, r7, #8
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7ff ff07 	bl	800f0e4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2d8:	b29a      	uxth	r2, r3
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f2e4:	e00f      	b.n	800f306 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f2e6:	f107 0308 	add.w	r3, r7, #8
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7ff fefa 	bl	800f0e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2f2:	0a5a      	lsrs	r2, r3, #9
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f2fe:	e002      	b.n	800f306 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f300:	2304      	movs	r3, #4
 800f302:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f306:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3730      	adds	r7, #48	@ 0x30
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	24000015 	.word	0x24000015

0800f318 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b084      	sub	sp, #16
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	4603      	mov	r3, r0
 800f320:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f322:	79fb      	ldrb	r3, [r7, #7]
 800f324:	4a08      	ldr	r2, [pc, #32]	@ (800f348 <disk_status+0x30>)
 800f326:	009b      	lsls	r3, r3, #2
 800f328:	4413      	add	r3, r2
 800f32a:	685b      	ldr	r3, [r3, #4]
 800f32c:	685b      	ldr	r3, [r3, #4]
 800f32e:	79fa      	ldrb	r2, [r7, #7]
 800f330:	4905      	ldr	r1, [pc, #20]	@ (800f348 <disk_status+0x30>)
 800f332:	440a      	add	r2, r1
 800f334:	7a12      	ldrb	r2, [r2, #8]
 800f336:	4610      	mov	r0, r2
 800f338:	4798      	blx	r3
 800f33a:	4603      	mov	r3, r0
 800f33c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f340:	4618      	mov	r0, r3
 800f342:	3710      	adds	r7, #16
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	240bc120 	.word	0x240bc120

0800f34c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b084      	sub	sp, #16
 800f350:	af00      	add	r7, sp, #0
 800f352:	4603      	mov	r3, r0
 800f354:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f356:	2300      	movs	r3, #0
 800f358:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f35a:	79fb      	ldrb	r3, [r7, #7]
 800f35c:	4a0e      	ldr	r2, [pc, #56]	@ (800f398 <disk_initialize+0x4c>)
 800f35e:	5cd3      	ldrb	r3, [r2, r3]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d114      	bne.n	800f38e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f364:	79fb      	ldrb	r3, [r7, #7]
 800f366:	4a0c      	ldr	r2, [pc, #48]	@ (800f398 <disk_initialize+0x4c>)
 800f368:	009b      	lsls	r3, r3, #2
 800f36a:	4413      	add	r3, r2
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	79fa      	ldrb	r2, [r7, #7]
 800f372:	4909      	ldr	r1, [pc, #36]	@ (800f398 <disk_initialize+0x4c>)
 800f374:	440a      	add	r2, r1
 800f376:	7a12      	ldrb	r2, [r2, #8]
 800f378:	4610      	mov	r0, r2
 800f37a:	4798      	blx	r3
 800f37c:	4603      	mov	r3, r0
 800f37e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800f380:	7bfb      	ldrb	r3, [r7, #15]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d103      	bne.n	800f38e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800f386:	79fb      	ldrb	r3, [r7, #7]
 800f388:	4a03      	ldr	r2, [pc, #12]	@ (800f398 <disk_initialize+0x4c>)
 800f38a:	2101      	movs	r1, #1
 800f38c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800f38e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f390:	4618      	mov	r0, r3
 800f392:	3710      	adds	r7, #16
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}
 800f398:	240bc120 	.word	0x240bc120

0800f39c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f39c:	b590      	push	{r4, r7, lr}
 800f39e:	b087      	sub	sp, #28
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	60b9      	str	r1, [r7, #8]
 800f3a4:	607a      	str	r2, [r7, #4]
 800f3a6:	603b      	str	r3, [r7, #0]
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f3ac:	7bfb      	ldrb	r3, [r7, #15]
 800f3ae:	4a0a      	ldr	r2, [pc, #40]	@ (800f3d8 <disk_read+0x3c>)
 800f3b0:	009b      	lsls	r3, r3, #2
 800f3b2:	4413      	add	r3, r2
 800f3b4:	685b      	ldr	r3, [r3, #4]
 800f3b6:	689c      	ldr	r4, [r3, #8]
 800f3b8:	7bfb      	ldrb	r3, [r7, #15]
 800f3ba:	4a07      	ldr	r2, [pc, #28]	@ (800f3d8 <disk_read+0x3c>)
 800f3bc:	4413      	add	r3, r2
 800f3be:	7a18      	ldrb	r0, [r3, #8]
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	68b9      	ldr	r1, [r7, #8]
 800f3c6:	47a0      	blx	r4
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	75fb      	strb	r3, [r7, #23]
  return res;
 800f3cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	371c      	adds	r7, #28
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd90      	pop	{r4, r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	240bc120 	.word	0x240bc120

0800f3dc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f3dc:	b590      	push	{r4, r7, lr}
 800f3de:	b087      	sub	sp, #28
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	60b9      	str	r1, [r7, #8]
 800f3e4:	607a      	str	r2, [r7, #4]
 800f3e6:	603b      	str	r3, [r7, #0]
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f3ec:	7bfb      	ldrb	r3, [r7, #15]
 800f3ee:	4a0a      	ldr	r2, [pc, #40]	@ (800f418 <disk_write+0x3c>)
 800f3f0:	009b      	lsls	r3, r3, #2
 800f3f2:	4413      	add	r3, r2
 800f3f4:	685b      	ldr	r3, [r3, #4]
 800f3f6:	68dc      	ldr	r4, [r3, #12]
 800f3f8:	7bfb      	ldrb	r3, [r7, #15]
 800f3fa:	4a07      	ldr	r2, [pc, #28]	@ (800f418 <disk_write+0x3c>)
 800f3fc:	4413      	add	r3, r2
 800f3fe:	7a18      	ldrb	r0, [r3, #8]
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	687a      	ldr	r2, [r7, #4]
 800f404:	68b9      	ldr	r1, [r7, #8]
 800f406:	47a0      	blx	r4
 800f408:	4603      	mov	r3, r0
 800f40a:	75fb      	strb	r3, [r7, #23]
  return res;
 800f40c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f40e:	4618      	mov	r0, r3
 800f410:	371c      	adds	r7, #28
 800f412:	46bd      	mov	sp, r7
 800f414:	bd90      	pop	{r4, r7, pc}
 800f416:	bf00      	nop
 800f418:	240bc120 	.word	0x240bc120

0800f41c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b084      	sub	sp, #16
 800f420:	af00      	add	r7, sp, #0
 800f422:	4603      	mov	r3, r0
 800f424:	603a      	str	r2, [r7, #0]
 800f426:	71fb      	strb	r3, [r7, #7]
 800f428:	460b      	mov	r3, r1
 800f42a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f42c:	79fb      	ldrb	r3, [r7, #7]
 800f42e:	4a09      	ldr	r2, [pc, #36]	@ (800f454 <disk_ioctl+0x38>)
 800f430:	009b      	lsls	r3, r3, #2
 800f432:	4413      	add	r3, r2
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	691b      	ldr	r3, [r3, #16]
 800f438:	79fa      	ldrb	r2, [r7, #7]
 800f43a:	4906      	ldr	r1, [pc, #24]	@ (800f454 <disk_ioctl+0x38>)
 800f43c:	440a      	add	r2, r1
 800f43e:	7a10      	ldrb	r0, [r2, #8]
 800f440:	79b9      	ldrb	r1, [r7, #6]
 800f442:	683a      	ldr	r2, [r7, #0]
 800f444:	4798      	blx	r3
 800f446:	4603      	mov	r3, r0
 800f448:	73fb      	strb	r3, [r7, #15]
  return res;
 800f44a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3710      	adds	r7, #16
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}
 800f454:	240bc120 	.word	0x240bc120

0800f458 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f458:	b480      	push	{r7}
 800f45a:	b085      	sub	sp, #20
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	3301      	adds	r3, #1
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f468:	89fb      	ldrh	r3, [r7, #14]
 800f46a:	021b      	lsls	r3, r3, #8
 800f46c:	b21a      	sxth	r2, r3
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	b21b      	sxth	r3, r3
 800f474:	4313      	orrs	r3, r2
 800f476:	b21b      	sxth	r3, r3
 800f478:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f47a:	89fb      	ldrh	r3, [r7, #14]
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	3714      	adds	r7, #20
 800f480:	46bd      	mov	sp, r7
 800f482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f486:	4770      	bx	lr

0800f488 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f488:	b480      	push	{r7}
 800f48a:	b085      	sub	sp, #20
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	3303      	adds	r3, #3
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	021b      	lsls	r3, r3, #8
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	3202      	adds	r2, #2
 800f4a0:	7812      	ldrb	r2, [r2, #0]
 800f4a2:	4313      	orrs	r3, r2
 800f4a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	021b      	lsls	r3, r3, #8
 800f4aa:	687a      	ldr	r2, [r7, #4]
 800f4ac:	3201      	adds	r2, #1
 800f4ae:	7812      	ldrb	r2, [r2, #0]
 800f4b0:	4313      	orrs	r3, r2
 800f4b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	021b      	lsls	r3, r3, #8
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	7812      	ldrb	r2, [r2, #0]
 800f4bc:	4313      	orrs	r3, r2
 800f4be:	60fb      	str	r3, [r7, #12]
	return rv;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	3714      	adds	r7, #20
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4cc:	4770      	bx	lr

0800f4ce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f4ce:	b480      	push	{r7}
 800f4d0:	b083      	sub	sp, #12
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	6078      	str	r0, [r7, #4]
 800f4d6:	460b      	mov	r3, r1
 800f4d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	1c5a      	adds	r2, r3, #1
 800f4de:	607a      	str	r2, [r7, #4]
 800f4e0:	887a      	ldrh	r2, [r7, #2]
 800f4e2:	b2d2      	uxtb	r2, r2
 800f4e4:	701a      	strb	r2, [r3, #0]
 800f4e6:	887b      	ldrh	r3, [r7, #2]
 800f4e8:	0a1b      	lsrs	r3, r3, #8
 800f4ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	1c5a      	adds	r2, r3, #1
 800f4f0:	607a      	str	r2, [r7, #4]
 800f4f2:	887a      	ldrh	r2, [r7, #2]
 800f4f4:	b2d2      	uxtb	r2, r2
 800f4f6:	701a      	strb	r2, [r3, #0]
}
 800f4f8:	bf00      	nop
 800f4fa:	370c      	adds	r7, #12
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr

0800f504 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f504:	b480      	push	{r7}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	1c5a      	adds	r2, r3, #1
 800f512:	607a      	str	r2, [r7, #4]
 800f514:	683a      	ldr	r2, [r7, #0]
 800f516:	b2d2      	uxtb	r2, r2
 800f518:	701a      	strb	r2, [r3, #0]
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	0a1b      	lsrs	r3, r3, #8
 800f51e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	1c5a      	adds	r2, r3, #1
 800f524:	607a      	str	r2, [r7, #4]
 800f526:	683a      	ldr	r2, [r7, #0]
 800f528:	b2d2      	uxtb	r2, r2
 800f52a:	701a      	strb	r2, [r3, #0]
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	0a1b      	lsrs	r3, r3, #8
 800f530:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	1c5a      	adds	r2, r3, #1
 800f536:	607a      	str	r2, [r7, #4]
 800f538:	683a      	ldr	r2, [r7, #0]
 800f53a:	b2d2      	uxtb	r2, r2
 800f53c:	701a      	strb	r2, [r3, #0]
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	0a1b      	lsrs	r3, r3, #8
 800f542:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	1c5a      	adds	r2, r3, #1
 800f548:	607a      	str	r2, [r7, #4]
 800f54a:	683a      	ldr	r2, [r7, #0]
 800f54c:	b2d2      	uxtb	r2, r2
 800f54e:	701a      	strb	r2, [r3, #0]
}
 800f550:	bf00      	nop
 800f552:	370c      	adds	r7, #12
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr

0800f55c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f55c:	b480      	push	{r7}
 800f55e:	b087      	sub	sp, #28
 800f560:	af00      	add	r7, sp, #0
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	60b9      	str	r1, [r7, #8]
 800f566:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d00d      	beq.n	800f592 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f576:	693a      	ldr	r2, [r7, #16]
 800f578:	1c53      	adds	r3, r2, #1
 800f57a:	613b      	str	r3, [r7, #16]
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	1c59      	adds	r1, r3, #1
 800f580:	6179      	str	r1, [r7, #20]
 800f582:	7812      	ldrb	r2, [r2, #0]
 800f584:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	3b01      	subs	r3, #1
 800f58a:	607b      	str	r3, [r7, #4]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d1f1      	bne.n	800f576 <mem_cpy+0x1a>
	}
}
 800f592:	bf00      	nop
 800f594:	371c      	adds	r7, #28
 800f596:	46bd      	mov	sp, r7
 800f598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59c:	4770      	bx	lr

0800f59e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f59e:	b480      	push	{r7}
 800f5a0:	b087      	sub	sp, #28
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	60f8      	str	r0, [r7, #12]
 800f5a6:	60b9      	str	r1, [r7, #8]
 800f5a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	1c5a      	adds	r2, r3, #1
 800f5b2:	617a      	str	r2, [r7, #20]
 800f5b4:	68ba      	ldr	r2, [r7, #8]
 800f5b6:	b2d2      	uxtb	r2, r2
 800f5b8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	3b01      	subs	r3, #1
 800f5be:	607b      	str	r3, [r7, #4]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d1f3      	bne.n	800f5ae <mem_set+0x10>
}
 800f5c6:	bf00      	nop
 800f5c8:	bf00      	nop
 800f5ca:	371c      	adds	r7, #28
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d2:	4770      	bx	lr

0800f5d4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f5d4:	b480      	push	{r7}
 800f5d6:	b089      	sub	sp, #36	@ 0x24
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	61fb      	str	r3, [r7, #28]
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	1c5a      	adds	r2, r3, #1
 800f5f0:	61fa      	str	r2, [r7, #28]
 800f5f2:	781b      	ldrb	r3, [r3, #0]
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	69bb      	ldr	r3, [r7, #24]
 800f5f8:	1c5a      	adds	r2, r3, #1
 800f5fa:	61ba      	str	r2, [r7, #24]
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	1acb      	subs	r3, r1, r3
 800f600:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	3b01      	subs	r3, #1
 800f606:	607b      	str	r3, [r7, #4]
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d002      	beq.n	800f614 <mem_cmp+0x40>
 800f60e:	697b      	ldr	r3, [r7, #20]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d0eb      	beq.n	800f5ec <mem_cmp+0x18>

	return r;
 800f614:	697b      	ldr	r3, [r7, #20]
}
 800f616:	4618      	mov	r0, r3
 800f618:	3724      	adds	r7, #36	@ 0x24
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr

0800f622 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f622:	b480      	push	{r7}
 800f624:	b083      	sub	sp, #12
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
 800f62a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f62c:	e002      	b.n	800f634 <chk_chr+0x12>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	3301      	adds	r3, #1
 800f632:	607b      	str	r3, [r7, #4]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d005      	beq.n	800f648 <chk_chr+0x26>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	461a      	mov	r2, r3
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	4293      	cmp	r3, r2
 800f646:	d1f2      	bne.n	800f62e <chk_chr+0xc>
	return *str;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	781b      	ldrb	r3, [r3, #0]
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	370c      	adds	r7, #12
 800f650:	46bd      	mov	sp, r7
 800f652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f656:	4770      	bx	lr

0800f658 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f658:	b480      	push	{r7}
 800f65a:	b085      	sub	sp, #20
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f662:	2300      	movs	r3, #0
 800f664:	60bb      	str	r3, [r7, #8]
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	60fb      	str	r3, [r7, #12]
 800f66a:	e029      	b.n	800f6c0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f66c:	4a27      	ldr	r2, [pc, #156]	@ (800f70c <chk_lock+0xb4>)
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	011b      	lsls	r3, r3, #4
 800f672:	4413      	add	r3, r2
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d01d      	beq.n	800f6b6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f67a:	4a24      	ldr	r2, [pc, #144]	@ (800f70c <chk_lock+0xb4>)
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	011b      	lsls	r3, r3, #4
 800f680:	4413      	add	r3, r2
 800f682:	681a      	ldr	r2, [r3, #0]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	429a      	cmp	r2, r3
 800f68a:	d116      	bne.n	800f6ba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f68c:	4a1f      	ldr	r2, [pc, #124]	@ (800f70c <chk_lock+0xb4>)
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	011b      	lsls	r3, r3, #4
 800f692:	4413      	add	r3, r2
 800f694:	3304      	adds	r3, #4
 800f696:	681a      	ldr	r2, [r3, #0]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d10c      	bne.n	800f6ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f6a0:	4a1a      	ldr	r2, [pc, #104]	@ (800f70c <chk_lock+0xb4>)
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	011b      	lsls	r3, r3, #4
 800f6a6:	4413      	add	r3, r2
 800f6a8:	3308      	adds	r3, #8
 800f6aa:	681a      	ldr	r2, [r3, #0]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d102      	bne.n	800f6ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f6b4:	e007      	b.n	800f6c6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f6b6:	2301      	movs	r3, #1
 800f6b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	3301      	adds	r3, #1
 800f6be:	60fb      	str	r3, [r7, #12]
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d9d2      	bls.n	800f66c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2b02      	cmp	r3, #2
 800f6ca:	d109      	bne.n	800f6e0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d102      	bne.n	800f6d8 <chk_lock+0x80>
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	2b02      	cmp	r3, #2
 800f6d6:	d101      	bne.n	800f6dc <chk_lock+0x84>
 800f6d8:	2300      	movs	r3, #0
 800f6da:	e010      	b.n	800f6fe <chk_lock+0xa6>
 800f6dc:	2312      	movs	r3, #18
 800f6de:	e00e      	b.n	800f6fe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d108      	bne.n	800f6f8 <chk_lock+0xa0>
 800f6e6:	4a09      	ldr	r2, [pc, #36]	@ (800f70c <chk_lock+0xb4>)
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	011b      	lsls	r3, r3, #4
 800f6ec:	4413      	add	r3, r2
 800f6ee:	330c      	adds	r3, #12
 800f6f0:	881b      	ldrh	r3, [r3, #0]
 800f6f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f6f6:	d101      	bne.n	800f6fc <chk_lock+0xa4>
 800f6f8:	2310      	movs	r3, #16
 800f6fa:	e000      	b.n	800f6fe <chk_lock+0xa6>
 800f6fc:	2300      	movs	r3, #0
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	3714      	adds	r7, #20
 800f702:	46bd      	mov	sp, r7
 800f704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f708:	4770      	bx	lr
 800f70a:	bf00      	nop
 800f70c:	240bc100 	.word	0x240bc100

0800f710 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f710:	b480      	push	{r7}
 800f712:	b083      	sub	sp, #12
 800f714:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f716:	2300      	movs	r3, #0
 800f718:	607b      	str	r3, [r7, #4]
 800f71a:	e002      	b.n	800f722 <enq_lock+0x12>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	3301      	adds	r3, #1
 800f720:	607b      	str	r3, [r7, #4]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2b01      	cmp	r3, #1
 800f726:	d806      	bhi.n	800f736 <enq_lock+0x26>
 800f728:	4a09      	ldr	r2, [pc, #36]	@ (800f750 <enq_lock+0x40>)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	011b      	lsls	r3, r3, #4
 800f72e:	4413      	add	r3, r2
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d1f2      	bne.n	800f71c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2b02      	cmp	r3, #2
 800f73a:	bf14      	ite	ne
 800f73c:	2301      	movne	r3, #1
 800f73e:	2300      	moveq	r3, #0
 800f740:	b2db      	uxtb	r3, r3
}
 800f742:	4618      	mov	r0, r3
 800f744:	370c      	adds	r7, #12
 800f746:	46bd      	mov	sp, r7
 800f748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74c:	4770      	bx	lr
 800f74e:	bf00      	nop
 800f750:	240bc100 	.word	0x240bc100

0800f754 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f754:	b480      	push	{r7}
 800f756:	b085      	sub	sp, #20
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f75e:	2300      	movs	r3, #0
 800f760:	60fb      	str	r3, [r7, #12]
 800f762:	e01f      	b.n	800f7a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f764:	4a41      	ldr	r2, [pc, #260]	@ (800f86c <inc_lock+0x118>)
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	011b      	lsls	r3, r3, #4
 800f76a:	4413      	add	r3, r2
 800f76c:	681a      	ldr	r2, [r3, #0]
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	429a      	cmp	r2, r3
 800f774:	d113      	bne.n	800f79e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f776:	4a3d      	ldr	r2, [pc, #244]	@ (800f86c <inc_lock+0x118>)
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	011b      	lsls	r3, r3, #4
 800f77c:	4413      	add	r3, r2
 800f77e:	3304      	adds	r3, #4
 800f780:	681a      	ldr	r2, [r3, #0]
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f786:	429a      	cmp	r2, r3
 800f788:	d109      	bne.n	800f79e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f78a:	4a38      	ldr	r2, [pc, #224]	@ (800f86c <inc_lock+0x118>)
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	011b      	lsls	r3, r3, #4
 800f790:	4413      	add	r3, r2
 800f792:	3308      	adds	r3, #8
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d006      	beq.n	800f7ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	3301      	adds	r3, #1
 800f7a2:	60fb      	str	r3, [r7, #12]
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d9dc      	bls.n	800f764 <inc_lock+0x10>
 800f7aa:	e000      	b.n	800f7ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f7ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	2b02      	cmp	r3, #2
 800f7b2:	d132      	bne.n	800f81a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	60fb      	str	r3, [r7, #12]
 800f7b8:	e002      	b.n	800f7c0 <inc_lock+0x6c>
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	3301      	adds	r3, #1
 800f7be:	60fb      	str	r3, [r7, #12]
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	2b01      	cmp	r3, #1
 800f7c4:	d806      	bhi.n	800f7d4 <inc_lock+0x80>
 800f7c6:	4a29      	ldr	r2, [pc, #164]	@ (800f86c <inc_lock+0x118>)
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	011b      	lsls	r3, r3, #4
 800f7cc:	4413      	add	r3, r2
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d1f2      	bne.n	800f7ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	2b02      	cmp	r3, #2
 800f7d8:	d101      	bne.n	800f7de <inc_lock+0x8a>
 800f7da:	2300      	movs	r3, #0
 800f7dc:	e040      	b.n	800f860 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681a      	ldr	r2, [r3, #0]
 800f7e2:	4922      	ldr	r1, [pc, #136]	@ (800f86c <inc_lock+0x118>)
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	011b      	lsls	r3, r3, #4
 800f7e8:	440b      	add	r3, r1
 800f7ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	689a      	ldr	r2, [r3, #8]
 800f7f0:	491e      	ldr	r1, [pc, #120]	@ (800f86c <inc_lock+0x118>)
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	011b      	lsls	r3, r3, #4
 800f7f6:	440b      	add	r3, r1
 800f7f8:	3304      	adds	r3, #4
 800f7fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	695a      	ldr	r2, [r3, #20]
 800f800:	491a      	ldr	r1, [pc, #104]	@ (800f86c <inc_lock+0x118>)
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	011b      	lsls	r3, r3, #4
 800f806:	440b      	add	r3, r1
 800f808:	3308      	adds	r3, #8
 800f80a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f80c:	4a17      	ldr	r2, [pc, #92]	@ (800f86c <inc_lock+0x118>)
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	011b      	lsls	r3, r3, #4
 800f812:	4413      	add	r3, r2
 800f814:	330c      	adds	r3, #12
 800f816:	2200      	movs	r2, #0
 800f818:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d009      	beq.n	800f834 <inc_lock+0xe0>
 800f820:	4a12      	ldr	r2, [pc, #72]	@ (800f86c <inc_lock+0x118>)
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	011b      	lsls	r3, r3, #4
 800f826:	4413      	add	r3, r2
 800f828:	330c      	adds	r3, #12
 800f82a:	881b      	ldrh	r3, [r3, #0]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d001      	beq.n	800f834 <inc_lock+0xe0>
 800f830:	2300      	movs	r3, #0
 800f832:	e015      	b.n	800f860 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d108      	bne.n	800f84c <inc_lock+0xf8>
 800f83a:	4a0c      	ldr	r2, [pc, #48]	@ (800f86c <inc_lock+0x118>)
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	011b      	lsls	r3, r3, #4
 800f840:	4413      	add	r3, r2
 800f842:	330c      	adds	r3, #12
 800f844:	881b      	ldrh	r3, [r3, #0]
 800f846:	3301      	adds	r3, #1
 800f848:	b29a      	uxth	r2, r3
 800f84a:	e001      	b.n	800f850 <inc_lock+0xfc>
 800f84c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f850:	4906      	ldr	r1, [pc, #24]	@ (800f86c <inc_lock+0x118>)
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	011b      	lsls	r3, r3, #4
 800f856:	440b      	add	r3, r1
 800f858:	330c      	adds	r3, #12
 800f85a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	3301      	adds	r3, #1
}
 800f860:	4618      	mov	r0, r3
 800f862:	3714      	adds	r7, #20
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr
 800f86c:	240bc100 	.word	0x240bc100

0800f870 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f870:	b480      	push	{r7}
 800f872:	b085      	sub	sp, #20
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	3b01      	subs	r3, #1
 800f87c:	607b      	str	r3, [r7, #4]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2b01      	cmp	r3, #1
 800f882:	d825      	bhi.n	800f8d0 <dec_lock+0x60>
		n = Files[i].ctr;
 800f884:	4a17      	ldr	r2, [pc, #92]	@ (800f8e4 <dec_lock+0x74>)
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	011b      	lsls	r3, r3, #4
 800f88a:	4413      	add	r3, r2
 800f88c:	330c      	adds	r3, #12
 800f88e:	881b      	ldrh	r3, [r3, #0]
 800f890:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f892:	89fb      	ldrh	r3, [r7, #14]
 800f894:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f898:	d101      	bne.n	800f89e <dec_lock+0x2e>
 800f89a:	2300      	movs	r3, #0
 800f89c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f89e:	89fb      	ldrh	r3, [r7, #14]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d002      	beq.n	800f8aa <dec_lock+0x3a>
 800f8a4:	89fb      	ldrh	r3, [r7, #14]
 800f8a6:	3b01      	subs	r3, #1
 800f8a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f8aa:	4a0e      	ldr	r2, [pc, #56]	@ (800f8e4 <dec_lock+0x74>)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	011b      	lsls	r3, r3, #4
 800f8b0:	4413      	add	r3, r2
 800f8b2:	330c      	adds	r3, #12
 800f8b4:	89fa      	ldrh	r2, [r7, #14]
 800f8b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f8b8:	89fb      	ldrh	r3, [r7, #14]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d105      	bne.n	800f8ca <dec_lock+0x5a>
 800f8be:	4a09      	ldr	r2, [pc, #36]	@ (800f8e4 <dec_lock+0x74>)
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	011b      	lsls	r3, r3, #4
 800f8c4:	4413      	add	r3, r2
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	737b      	strb	r3, [r7, #13]
 800f8ce:	e001      	b.n	800f8d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f8d0:	2302      	movs	r3, #2
 800f8d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f8d4:	7b7b      	ldrb	r3, [r7, #13]
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3714      	adds	r7, #20
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e0:	4770      	bx	lr
 800f8e2:	bf00      	nop
 800f8e4:	240bc100 	.word	0x240bc100

0800f8e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b085      	sub	sp, #20
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	60fb      	str	r3, [r7, #12]
 800f8f4:	e010      	b.n	800f918 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f8f6:	4a0d      	ldr	r2, [pc, #52]	@ (800f92c <clear_lock+0x44>)
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	011b      	lsls	r3, r3, #4
 800f8fc:	4413      	add	r3, r2
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	687a      	ldr	r2, [r7, #4]
 800f902:	429a      	cmp	r2, r3
 800f904:	d105      	bne.n	800f912 <clear_lock+0x2a>
 800f906:	4a09      	ldr	r2, [pc, #36]	@ (800f92c <clear_lock+0x44>)
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	011b      	lsls	r3, r3, #4
 800f90c:	4413      	add	r3, r2
 800f90e:	2200      	movs	r2, #0
 800f910:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	3301      	adds	r3, #1
 800f916:	60fb      	str	r3, [r7, #12]
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d9eb      	bls.n	800f8f6 <clear_lock+0xe>
	}
}
 800f91e:	bf00      	nop
 800f920:	bf00      	nop
 800f922:	3714      	adds	r7, #20
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr
 800f92c:	240bc100 	.word	0x240bc100

0800f930 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b086      	sub	sp, #24
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f938:	2300      	movs	r3, #0
 800f93a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	78db      	ldrb	r3, [r3, #3]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d034      	beq.n	800f9ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f948:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	7858      	ldrb	r0, [r3, #1]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f954:	2301      	movs	r3, #1
 800f956:	697a      	ldr	r2, [r7, #20]
 800f958:	f7ff fd40 	bl	800f3dc <disk_write>
 800f95c:	4603      	mov	r3, r0
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d002      	beq.n	800f968 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f962:	2301      	movs	r3, #1
 800f964:	73fb      	strb	r3, [r7, #15]
 800f966:	e022      	b.n	800f9ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2200      	movs	r2, #0
 800f96c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6a1b      	ldr	r3, [r3, #32]
 800f972:	697a      	ldr	r2, [r7, #20]
 800f974:	1ad2      	subs	r2, r2, r3
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	699b      	ldr	r3, [r3, #24]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d217      	bcs.n	800f9ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	789b      	ldrb	r3, [r3, #2]
 800f982:	613b      	str	r3, [r7, #16]
 800f984:	e010      	b.n	800f9a8 <sync_window+0x78>
					wsect += fs->fsize;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	699b      	ldr	r3, [r3, #24]
 800f98a:	697a      	ldr	r2, [r7, #20]
 800f98c:	4413      	add	r3, r2
 800f98e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	7858      	ldrb	r0, [r3, #1]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f99a:	2301      	movs	r3, #1
 800f99c:	697a      	ldr	r2, [r7, #20]
 800f99e:	f7ff fd1d 	bl	800f3dc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	3b01      	subs	r3, #1
 800f9a6:	613b      	str	r3, [r7, #16]
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	2b01      	cmp	r3, #1
 800f9ac:	d8eb      	bhi.n	800f986 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3718      	adds	r7, #24
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b084      	sub	sp, #16
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9ca:	683a      	ldr	r2, [r7, #0]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d01b      	beq.n	800fa08 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f7ff ffad 	bl	800f930 <sync_window>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f9da:	7bfb      	ldrb	r3, [r7, #15]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d113      	bne.n	800fa08 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	7858      	ldrb	r0, [r3, #1]
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	683a      	ldr	r2, [r7, #0]
 800f9ee:	f7ff fcd5 	bl	800f39c <disk_read>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d004      	beq.n	800fa02 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f9fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f9fe:	2301      	movs	r3, #1
 800fa00:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	683a      	ldr	r2, [r7, #0]
 800fa06:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800fa08:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3710      	adds	r7, #16
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}
	...

0800fa14 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b084      	sub	sp, #16
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f7ff ff87 	bl	800f930 <sync_window>
 800fa22:	4603      	mov	r3, r0
 800fa24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fa26:	7bfb      	ldrb	r3, [r7, #15]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d158      	bne.n	800fade <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	2b03      	cmp	r3, #3
 800fa32:	d148      	bne.n	800fac6 <sync_fs+0xb2>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	791b      	ldrb	r3, [r3, #4]
 800fa38:	2b01      	cmp	r3, #1
 800fa3a:	d144      	bne.n	800fac6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	3330      	adds	r3, #48	@ 0x30
 800fa40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fa44:	2100      	movs	r1, #0
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7ff fda9 	bl	800f59e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	3330      	adds	r3, #48	@ 0x30
 800fa50:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fa54:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7ff fd38 	bl	800f4ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	3330      	adds	r3, #48	@ 0x30
 800fa62:	4921      	ldr	r1, [pc, #132]	@ (800fae8 <sync_fs+0xd4>)
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7ff fd4d 	bl	800f504 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	3330      	adds	r3, #48	@ 0x30
 800fa6e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fa72:	491e      	ldr	r1, [pc, #120]	@ (800faec <sync_fs+0xd8>)
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7ff fd45 	bl	800f504 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	3330      	adds	r3, #48	@ 0x30
 800fa7e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	691b      	ldr	r3, [r3, #16]
 800fa86:	4619      	mov	r1, r3
 800fa88:	4610      	mov	r0, r2
 800fa8a:	f7ff fd3b 	bl	800f504 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	3330      	adds	r3, #48	@ 0x30
 800fa92:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	68db      	ldr	r3, [r3, #12]
 800fa9a:	4619      	mov	r1, r3
 800fa9c:	4610      	mov	r0, r2
 800fa9e:	f7ff fd31 	bl	800f504 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	69db      	ldr	r3, [r3, #28]
 800faa6:	1c5a      	adds	r2, r3, #1
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	7858      	ldrb	r0, [r3, #1]
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800faba:	2301      	movs	r3, #1
 800fabc:	f7ff fc8e 	bl	800f3dc <disk_write>
			fs->fsi_flag = 0;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2200      	movs	r2, #0
 800fac4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	785b      	ldrb	r3, [r3, #1]
 800faca:	2200      	movs	r2, #0
 800facc:	2100      	movs	r1, #0
 800face:	4618      	mov	r0, r3
 800fad0:	f7ff fca4 	bl	800f41c <disk_ioctl>
 800fad4:	4603      	mov	r3, r0
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d001      	beq.n	800fade <sync_fs+0xca>
 800fada:	2301      	movs	r3, #1
 800fadc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fade:	7bfb      	ldrb	r3, [r7, #15]
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3710      	adds	r7, #16
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	41615252 	.word	0x41615252
 800faec:	61417272 	.word	0x61417272

0800faf0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800faf0:	b480      	push	{r7}
 800faf2:	b083      	sub	sp, #12
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	3b02      	subs	r3, #2
 800fafe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	695b      	ldr	r3, [r3, #20]
 800fb04:	3b02      	subs	r3, #2
 800fb06:	683a      	ldr	r2, [r7, #0]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d301      	bcc.n	800fb10 <clust2sect+0x20>
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	e008      	b.n	800fb22 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	895b      	ldrh	r3, [r3, #10]
 800fb14:	461a      	mov	r2, r3
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	fb03 f202 	mul.w	r2, r3, r2
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb20:	4413      	add	r3, r2
}
 800fb22:	4618      	mov	r0, r3
 800fb24:	370c      	adds	r7, #12
 800fb26:	46bd      	mov	sp, r7
 800fb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2c:	4770      	bx	lr

0800fb2e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fb2e:	b580      	push	{r7, lr}
 800fb30:	b086      	sub	sp, #24
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]
 800fb36:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	2b01      	cmp	r3, #1
 800fb42:	d904      	bls.n	800fb4e <get_fat+0x20>
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	695b      	ldr	r3, [r3, #20]
 800fb48:	683a      	ldr	r2, [r7, #0]
 800fb4a:	429a      	cmp	r2, r3
 800fb4c:	d302      	bcc.n	800fb54 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fb4e:	2301      	movs	r3, #1
 800fb50:	617b      	str	r3, [r7, #20]
 800fb52:	e08e      	b.n	800fc72 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fb54:	f04f 33ff 	mov.w	r3, #4294967295
 800fb58:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	2b03      	cmp	r3, #3
 800fb60:	d061      	beq.n	800fc26 <get_fat+0xf8>
 800fb62:	2b03      	cmp	r3, #3
 800fb64:	dc7b      	bgt.n	800fc5e <get_fat+0x130>
 800fb66:	2b01      	cmp	r3, #1
 800fb68:	d002      	beq.n	800fb70 <get_fat+0x42>
 800fb6a:	2b02      	cmp	r3, #2
 800fb6c:	d041      	beq.n	800fbf2 <get_fat+0xc4>
 800fb6e:	e076      	b.n	800fc5e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	60fb      	str	r3, [r7, #12]
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	085b      	lsrs	r3, r3, #1
 800fb78:	68fa      	ldr	r2, [r7, #12]
 800fb7a:	4413      	add	r3, r2
 800fb7c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	6a1a      	ldr	r2, [r3, #32]
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	0a5b      	lsrs	r3, r3, #9
 800fb86:	4413      	add	r3, r2
 800fb88:	4619      	mov	r1, r3
 800fb8a:	6938      	ldr	r0, [r7, #16]
 800fb8c:	f7ff ff14 	bl	800f9b8 <move_window>
 800fb90:	4603      	mov	r3, r0
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d166      	bne.n	800fc64 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	1c5a      	adds	r2, r3, #1
 800fb9a:	60fa      	str	r2, [r7, #12]
 800fb9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fba0:	693a      	ldr	r2, [r7, #16]
 800fba2:	4413      	add	r3, r2
 800fba4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fba8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fbaa:	693b      	ldr	r3, [r7, #16]
 800fbac:	6a1a      	ldr	r2, [r3, #32]
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	0a5b      	lsrs	r3, r3, #9
 800fbb2:	4413      	add	r3, r2
 800fbb4:	4619      	mov	r1, r3
 800fbb6:	6938      	ldr	r0, [r7, #16]
 800fbb8:	f7ff fefe 	bl	800f9b8 <move_window>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d152      	bne.n	800fc68 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbc8:	693a      	ldr	r2, [r7, #16]
 800fbca:	4413      	add	r3, r2
 800fbcc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fbd0:	021b      	lsls	r3, r3, #8
 800fbd2:	68ba      	ldr	r2, [r7, #8]
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	f003 0301 	and.w	r3, r3, #1
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d002      	beq.n	800fbe8 <get_fat+0xba>
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	091b      	lsrs	r3, r3, #4
 800fbe6:	e002      	b.n	800fbee <get_fat+0xc0>
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fbee:	617b      	str	r3, [r7, #20]
			break;
 800fbf0:	e03f      	b.n	800fc72 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	6a1a      	ldr	r2, [r3, #32]
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	0a1b      	lsrs	r3, r3, #8
 800fbfa:	4413      	add	r3, r2
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	6938      	ldr	r0, [r7, #16]
 800fc00:	f7ff feda 	bl	800f9b8 <move_window>
 800fc04:	4603      	mov	r3, r0
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d130      	bne.n	800fc6c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fc0a:	693b      	ldr	r3, [r7, #16]
 800fc0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	005b      	lsls	r3, r3, #1
 800fc14:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fc18:	4413      	add	r3, r2
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7ff fc1c 	bl	800f458 <ld_word>
 800fc20:	4603      	mov	r3, r0
 800fc22:	617b      	str	r3, [r7, #20]
			break;
 800fc24:	e025      	b.n	800fc72 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	6a1a      	ldr	r2, [r3, #32]
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	09db      	lsrs	r3, r3, #7
 800fc2e:	4413      	add	r3, r2
 800fc30:	4619      	mov	r1, r3
 800fc32:	6938      	ldr	r0, [r7, #16]
 800fc34:	f7ff fec0 	bl	800f9b8 <move_window>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d118      	bne.n	800fc70 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	009b      	lsls	r3, r3, #2
 800fc48:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fc4c:	4413      	add	r3, r2
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f7ff fc1a 	bl	800f488 <ld_dword>
 800fc54:	4603      	mov	r3, r0
 800fc56:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800fc5a:	617b      	str	r3, [r7, #20]
			break;
 800fc5c:	e009      	b.n	800fc72 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fc5e:	2301      	movs	r3, #1
 800fc60:	617b      	str	r3, [r7, #20]
 800fc62:	e006      	b.n	800fc72 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fc64:	bf00      	nop
 800fc66:	e004      	b.n	800fc72 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fc68:	bf00      	nop
 800fc6a:	e002      	b.n	800fc72 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fc6c:	bf00      	nop
 800fc6e:	e000      	b.n	800fc72 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fc70:	bf00      	nop
		}
	}

	return val;
 800fc72:	697b      	ldr	r3, [r7, #20]
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3718      	adds	r7, #24
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}

0800fc7c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fc7c:	b590      	push	{r4, r7, lr}
 800fc7e:	b089      	sub	sp, #36	@ 0x24
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	60f8      	str	r0, [r7, #12]
 800fc84:	60b9      	str	r1, [r7, #8]
 800fc86:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fc88:	2302      	movs	r3, #2
 800fc8a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	2b01      	cmp	r3, #1
 800fc90:	f240 80d9 	bls.w	800fe46 <put_fat+0x1ca>
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	695b      	ldr	r3, [r3, #20]
 800fc98:	68ba      	ldr	r2, [r7, #8]
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	f080 80d3 	bcs.w	800fe46 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	2b03      	cmp	r3, #3
 800fca6:	f000 8096 	beq.w	800fdd6 <put_fat+0x15a>
 800fcaa:	2b03      	cmp	r3, #3
 800fcac:	f300 80cb 	bgt.w	800fe46 <put_fat+0x1ca>
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	d002      	beq.n	800fcba <put_fat+0x3e>
 800fcb4:	2b02      	cmp	r3, #2
 800fcb6:	d06e      	beq.n	800fd96 <put_fat+0x11a>
 800fcb8:	e0c5      	b.n	800fe46 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	61bb      	str	r3, [r7, #24]
 800fcbe:	69bb      	ldr	r3, [r7, #24]
 800fcc0:	085b      	lsrs	r3, r3, #1
 800fcc2:	69ba      	ldr	r2, [r7, #24]
 800fcc4:	4413      	add	r3, r2
 800fcc6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	6a1a      	ldr	r2, [r3, #32]
 800fccc:	69bb      	ldr	r3, [r7, #24]
 800fcce:	0a5b      	lsrs	r3, r3, #9
 800fcd0:	4413      	add	r3, r2
 800fcd2:	4619      	mov	r1, r3
 800fcd4:	68f8      	ldr	r0, [r7, #12]
 800fcd6:	f7ff fe6f 	bl	800f9b8 <move_window>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fcde:	7ffb      	ldrb	r3, [r7, #31]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	f040 80a9 	bne.w	800fe38 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fcec:	69bb      	ldr	r3, [r7, #24]
 800fcee:	1c59      	adds	r1, r3, #1
 800fcf0:	61b9      	str	r1, [r7, #24]
 800fcf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcf6:	4413      	add	r3, r2
 800fcf8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	f003 0301 	and.w	r3, r3, #1
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d00d      	beq.n	800fd20 <put_fat+0xa4>
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	781b      	ldrb	r3, [r3, #0]
 800fd08:	b25b      	sxtb	r3, r3
 800fd0a:	f003 030f 	and.w	r3, r3, #15
 800fd0e:	b25a      	sxtb	r2, r3
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	b2db      	uxtb	r3, r3
 800fd14:	011b      	lsls	r3, r3, #4
 800fd16:	b25b      	sxtb	r3, r3
 800fd18:	4313      	orrs	r3, r2
 800fd1a:	b25b      	sxtb	r3, r3
 800fd1c:	b2db      	uxtb	r3, r3
 800fd1e:	e001      	b.n	800fd24 <put_fat+0xa8>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	b2db      	uxtb	r3, r3
 800fd24:	697a      	ldr	r2, [r7, #20]
 800fd26:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	2201      	movs	r2, #1
 800fd2c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	6a1a      	ldr	r2, [r3, #32]
 800fd32:	69bb      	ldr	r3, [r7, #24]
 800fd34:	0a5b      	lsrs	r3, r3, #9
 800fd36:	4413      	add	r3, r2
 800fd38:	4619      	mov	r1, r3
 800fd3a:	68f8      	ldr	r0, [r7, #12]
 800fd3c:	f7ff fe3c 	bl	800f9b8 <move_window>
 800fd40:	4603      	mov	r3, r0
 800fd42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fd44:	7ffb      	ldrb	r3, [r7, #31]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d178      	bne.n	800fe3c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fd50:	69bb      	ldr	r3, [r7, #24]
 800fd52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd56:	4413      	add	r3, r2
 800fd58:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	f003 0301 	and.w	r3, r3, #1
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d003      	beq.n	800fd6c <put_fat+0xf0>
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	091b      	lsrs	r3, r3, #4
 800fd68:	b2db      	uxtb	r3, r3
 800fd6a:	e00e      	b.n	800fd8a <put_fat+0x10e>
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	b25b      	sxtb	r3, r3
 800fd72:	f023 030f 	bic.w	r3, r3, #15
 800fd76:	b25a      	sxtb	r2, r3
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	0a1b      	lsrs	r3, r3, #8
 800fd7c:	b25b      	sxtb	r3, r3
 800fd7e:	f003 030f 	and.w	r3, r3, #15
 800fd82:	b25b      	sxtb	r3, r3
 800fd84:	4313      	orrs	r3, r2
 800fd86:	b25b      	sxtb	r3, r3
 800fd88:	b2db      	uxtb	r3, r3
 800fd8a:	697a      	ldr	r2, [r7, #20]
 800fd8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2201      	movs	r2, #1
 800fd92:	70da      	strb	r2, [r3, #3]
			break;
 800fd94:	e057      	b.n	800fe46 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	6a1a      	ldr	r2, [r3, #32]
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	0a1b      	lsrs	r3, r3, #8
 800fd9e:	4413      	add	r3, r2
 800fda0:	4619      	mov	r1, r3
 800fda2:	68f8      	ldr	r0, [r7, #12]
 800fda4:	f7ff fe08 	bl	800f9b8 <move_window>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fdac:	7ffb      	ldrb	r3, [r7, #31]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d146      	bne.n	800fe40 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	005b      	lsls	r3, r3, #1
 800fdbc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fdc0:	4413      	add	r3, r2
 800fdc2:	687a      	ldr	r2, [r7, #4]
 800fdc4:	b292      	uxth	r2, r2
 800fdc6:	4611      	mov	r1, r2
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f7ff fb80 	bl	800f4ce <st_word>
			fs->wflag = 1;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	2201      	movs	r2, #1
 800fdd2:	70da      	strb	r2, [r3, #3]
			break;
 800fdd4:	e037      	b.n	800fe46 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	6a1a      	ldr	r2, [r3, #32]
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	09db      	lsrs	r3, r3, #7
 800fdde:	4413      	add	r3, r2
 800fde0:	4619      	mov	r1, r3
 800fde2:	68f8      	ldr	r0, [r7, #12]
 800fde4:	f7ff fde8 	bl	800f9b8 <move_window>
 800fde8:	4603      	mov	r3, r0
 800fdea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fdec:	7ffb      	ldrb	r3, [r7, #31]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d128      	bne.n	800fe44 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	009b      	lsls	r3, r3, #2
 800fe02:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fe06:	4413      	add	r3, r2
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7ff fb3d 	bl	800f488 <ld_dword>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800fe14:	4323      	orrs	r3, r4
 800fe16:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	009b      	lsls	r3, r3, #2
 800fe22:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fe26:	4413      	add	r3, r2
 800fe28:	6879      	ldr	r1, [r7, #4]
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7ff fb6a 	bl	800f504 <st_dword>
			fs->wflag = 1;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	2201      	movs	r2, #1
 800fe34:	70da      	strb	r2, [r3, #3]
			break;
 800fe36:	e006      	b.n	800fe46 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fe38:	bf00      	nop
 800fe3a:	e004      	b.n	800fe46 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fe3c:	bf00      	nop
 800fe3e:	e002      	b.n	800fe46 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fe40:	bf00      	nop
 800fe42:	e000      	b.n	800fe46 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fe44:	bf00      	nop
		}
	}
	return res;
 800fe46:	7ffb      	ldrb	r3, [r7, #31]
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3724      	adds	r7, #36	@ 0x24
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd90      	pop	{r4, r7, pc}

0800fe50 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b088      	sub	sp, #32
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	60f8      	str	r0, [r7, #12]
 800fe58:	60b9      	str	r1, [r7, #8]
 800fe5a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	2b01      	cmp	r3, #1
 800fe6a:	d904      	bls.n	800fe76 <remove_chain+0x26>
 800fe6c:	69bb      	ldr	r3, [r7, #24]
 800fe6e:	695b      	ldr	r3, [r3, #20]
 800fe70:	68ba      	ldr	r2, [r7, #8]
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d301      	bcc.n	800fe7a <remove_chain+0x2a>
 800fe76:	2302      	movs	r3, #2
 800fe78:	e04b      	b.n	800ff12 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d00c      	beq.n	800fe9a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fe80:	f04f 32ff 	mov.w	r2, #4294967295
 800fe84:	6879      	ldr	r1, [r7, #4]
 800fe86:	69b8      	ldr	r0, [r7, #24]
 800fe88:	f7ff fef8 	bl	800fc7c <put_fat>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fe90:	7ffb      	ldrb	r3, [r7, #31]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d001      	beq.n	800fe9a <remove_chain+0x4a>
 800fe96:	7ffb      	ldrb	r3, [r7, #31]
 800fe98:	e03b      	b.n	800ff12 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fe9a:	68b9      	ldr	r1, [r7, #8]
 800fe9c:	68f8      	ldr	r0, [r7, #12]
 800fe9e:	f7ff fe46 	bl	800fb2e <get_fat>
 800fea2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d031      	beq.n	800ff0e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	2b01      	cmp	r3, #1
 800feae:	d101      	bne.n	800feb4 <remove_chain+0x64>
 800feb0:	2302      	movs	r3, #2
 800feb2:	e02e      	b.n	800ff12 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800feba:	d101      	bne.n	800fec0 <remove_chain+0x70>
 800febc:	2301      	movs	r3, #1
 800febe:	e028      	b.n	800ff12 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fec0:	2200      	movs	r2, #0
 800fec2:	68b9      	ldr	r1, [r7, #8]
 800fec4:	69b8      	ldr	r0, [r7, #24]
 800fec6:	f7ff fed9 	bl	800fc7c <put_fat>
 800feca:	4603      	mov	r3, r0
 800fecc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fece:	7ffb      	ldrb	r3, [r7, #31]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d001      	beq.n	800fed8 <remove_chain+0x88>
 800fed4:	7ffb      	ldrb	r3, [r7, #31]
 800fed6:	e01c      	b.n	800ff12 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fed8:	69bb      	ldr	r3, [r7, #24]
 800feda:	691a      	ldr	r2, [r3, #16]
 800fedc:	69bb      	ldr	r3, [r7, #24]
 800fede:	695b      	ldr	r3, [r3, #20]
 800fee0:	3b02      	subs	r3, #2
 800fee2:	429a      	cmp	r2, r3
 800fee4:	d20b      	bcs.n	800fefe <remove_chain+0xae>
			fs->free_clst++;
 800fee6:	69bb      	ldr	r3, [r7, #24]
 800fee8:	691b      	ldr	r3, [r3, #16]
 800feea:	1c5a      	adds	r2, r3, #1
 800feec:	69bb      	ldr	r3, [r7, #24]
 800feee:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800fef0:	69bb      	ldr	r3, [r7, #24]
 800fef2:	791b      	ldrb	r3, [r3, #4]
 800fef4:	f043 0301 	orr.w	r3, r3, #1
 800fef8:	b2da      	uxtb	r2, r3
 800fefa:	69bb      	ldr	r3, [r7, #24]
 800fefc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ff02:	69bb      	ldr	r3, [r7, #24]
 800ff04:	695b      	ldr	r3, [r3, #20]
 800ff06:	68ba      	ldr	r2, [r7, #8]
 800ff08:	429a      	cmp	r2, r3
 800ff0a:	d3c6      	bcc.n	800fe9a <remove_chain+0x4a>
 800ff0c:	e000      	b.n	800ff10 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ff0e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ff10:	2300      	movs	r3, #0
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	3720      	adds	r7, #32
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}

0800ff1a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ff1a:	b580      	push	{r7, lr}
 800ff1c:	b088      	sub	sp, #32
 800ff1e:	af00      	add	r7, sp, #0
 800ff20:	6078      	str	r0, [r7, #4]
 800ff22:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d10d      	bne.n	800ff4c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ff30:	693b      	ldr	r3, [r7, #16]
 800ff32:	68db      	ldr	r3, [r3, #12]
 800ff34:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ff36:	69bb      	ldr	r3, [r7, #24]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d004      	beq.n	800ff46 <create_chain+0x2c>
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	695b      	ldr	r3, [r3, #20]
 800ff40:	69ba      	ldr	r2, [r7, #24]
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d31b      	bcc.n	800ff7e <create_chain+0x64>
 800ff46:	2301      	movs	r3, #1
 800ff48:	61bb      	str	r3, [r7, #24]
 800ff4a:	e018      	b.n	800ff7e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ff4c:	6839      	ldr	r1, [r7, #0]
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f7ff fded 	bl	800fb2e <get_fat>
 800ff54:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	2b01      	cmp	r3, #1
 800ff5a:	d801      	bhi.n	800ff60 <create_chain+0x46>
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	e070      	b.n	8010042 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff66:	d101      	bne.n	800ff6c <create_chain+0x52>
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	e06a      	b.n	8010042 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	695b      	ldr	r3, [r3, #20]
 800ff70:	68fa      	ldr	r2, [r7, #12]
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d201      	bcs.n	800ff7a <create_chain+0x60>
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	e063      	b.n	8010042 <create_chain+0x128>
		scl = clst;
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ff7e:	69bb      	ldr	r3, [r7, #24]
 800ff80:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ff82:	69fb      	ldr	r3, [r7, #28]
 800ff84:	3301      	adds	r3, #1
 800ff86:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ff88:	693b      	ldr	r3, [r7, #16]
 800ff8a:	695b      	ldr	r3, [r3, #20]
 800ff8c:	69fa      	ldr	r2, [r7, #28]
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d307      	bcc.n	800ffa2 <create_chain+0x88>
				ncl = 2;
 800ff92:	2302      	movs	r3, #2
 800ff94:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ff96:	69fa      	ldr	r2, [r7, #28]
 800ff98:	69bb      	ldr	r3, [r7, #24]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d901      	bls.n	800ffa2 <create_chain+0x88>
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	e04f      	b.n	8010042 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ffa2:	69f9      	ldr	r1, [r7, #28]
 800ffa4:	6878      	ldr	r0, [r7, #4]
 800ffa6:	f7ff fdc2 	bl	800fb2e <get_fat>
 800ffaa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d00e      	beq.n	800ffd0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d003      	beq.n	800ffc0 <create_chain+0xa6>
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffbe:	d101      	bne.n	800ffc4 <create_chain+0xaa>
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	e03e      	b.n	8010042 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ffc4:	69fa      	ldr	r2, [r7, #28]
 800ffc6:	69bb      	ldr	r3, [r7, #24]
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d1da      	bne.n	800ff82 <create_chain+0x68>
 800ffcc:	2300      	movs	r3, #0
 800ffce:	e038      	b.n	8010042 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ffd0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ffd2:	f04f 32ff 	mov.w	r2, #4294967295
 800ffd6:	69f9      	ldr	r1, [r7, #28]
 800ffd8:	6938      	ldr	r0, [r7, #16]
 800ffda:	f7ff fe4f 	bl	800fc7c <put_fat>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ffe2:	7dfb      	ldrb	r3, [r7, #23]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d109      	bne.n	800fffc <create_chain+0xe2>
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d006      	beq.n	800fffc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ffee:	69fa      	ldr	r2, [r7, #28]
 800fff0:	6839      	ldr	r1, [r7, #0]
 800fff2:	6938      	ldr	r0, [r7, #16]
 800fff4:	f7ff fe42 	bl	800fc7c <put_fat>
 800fff8:	4603      	mov	r3, r0
 800fffa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fffc:	7dfb      	ldrb	r3, [r7, #23]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d116      	bne.n	8010030 <create_chain+0x116>
		fs->last_clst = ncl;
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	69fa      	ldr	r2, [r7, #28]
 8010006:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	691a      	ldr	r2, [r3, #16]
 801000c:	693b      	ldr	r3, [r7, #16]
 801000e:	695b      	ldr	r3, [r3, #20]
 8010010:	3b02      	subs	r3, #2
 8010012:	429a      	cmp	r2, r3
 8010014:	d804      	bhi.n	8010020 <create_chain+0x106>
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	691b      	ldr	r3, [r3, #16]
 801001a:	1e5a      	subs	r2, r3, #1
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	791b      	ldrb	r3, [r3, #4]
 8010024:	f043 0301 	orr.w	r3, r3, #1
 8010028:	b2da      	uxtb	r2, r3
 801002a:	693b      	ldr	r3, [r7, #16]
 801002c:	711a      	strb	r2, [r3, #4]
 801002e:	e007      	b.n	8010040 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010030:	7dfb      	ldrb	r3, [r7, #23]
 8010032:	2b01      	cmp	r3, #1
 8010034:	d102      	bne.n	801003c <create_chain+0x122>
 8010036:	f04f 33ff 	mov.w	r3, #4294967295
 801003a:	e000      	b.n	801003e <create_chain+0x124>
 801003c:	2301      	movs	r3, #1
 801003e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010040:	69fb      	ldr	r3, [r7, #28]
}
 8010042:	4618      	mov	r0, r3
 8010044:	3720      	adds	r7, #32
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}

0801004a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801004a:	b480      	push	{r7}
 801004c:	b087      	sub	sp, #28
 801004e:	af00      	add	r7, sp, #0
 8010050:	6078      	str	r0, [r7, #4]
 8010052:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801005e:	3304      	adds	r3, #4
 8010060:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	0a5b      	lsrs	r3, r3, #9
 8010066:	68fa      	ldr	r2, [r7, #12]
 8010068:	8952      	ldrh	r2, [r2, #10]
 801006a:	fbb3 f3f2 	udiv	r3, r3, r2
 801006e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	1d1a      	adds	r2, r3, #4
 8010074:	613a      	str	r2, [r7, #16]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d101      	bne.n	8010084 <clmt_clust+0x3a>
 8010080:	2300      	movs	r3, #0
 8010082:	e010      	b.n	80100a6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010084:	697a      	ldr	r2, [r7, #20]
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	429a      	cmp	r2, r3
 801008a:	d307      	bcc.n	801009c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801008c:	697a      	ldr	r2, [r7, #20]
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	1ad3      	subs	r3, r2, r3
 8010092:	617b      	str	r3, [r7, #20]
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	3304      	adds	r3, #4
 8010098:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801009a:	e7e9      	b.n	8010070 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801009c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	681a      	ldr	r2, [r3, #0]
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	4413      	add	r3, r2
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	371c      	adds	r7, #28
 80100aa:	46bd      	mov	sp, r7
 80100ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b0:	4770      	bx	lr

080100b2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80100b2:	b580      	push	{r7, lr}
 80100b4:	b086      	sub	sp, #24
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	6078      	str	r0, [r7, #4]
 80100ba:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80100c8:	d204      	bcs.n	80100d4 <dir_sdi+0x22>
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	f003 031f 	and.w	r3, r3, #31
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d001      	beq.n	80100d8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80100d4:	2302      	movs	r3, #2
 80100d6:	e063      	b.n	80101a0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	683a      	ldr	r2, [r7, #0]
 80100dc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	689b      	ldr	r3, [r3, #8]
 80100e2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d106      	bne.n	80100f8 <dir_sdi+0x46>
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	781b      	ldrb	r3, [r3, #0]
 80100ee:	2b02      	cmp	r3, #2
 80100f0:	d902      	bls.n	80100f8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80100f2:	693b      	ldr	r3, [r7, #16]
 80100f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100f6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80100f8:	697b      	ldr	r3, [r7, #20]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d10c      	bne.n	8010118 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	095b      	lsrs	r3, r3, #5
 8010102:	693a      	ldr	r2, [r7, #16]
 8010104:	8912      	ldrh	r2, [r2, #8]
 8010106:	4293      	cmp	r3, r2
 8010108:	d301      	bcc.n	801010e <dir_sdi+0x5c>
 801010a:	2302      	movs	r3, #2
 801010c:	e048      	b.n	80101a0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	61da      	str	r2, [r3, #28]
 8010116:	e029      	b.n	801016c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	895b      	ldrh	r3, [r3, #10]
 801011c:	025b      	lsls	r3, r3, #9
 801011e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010120:	e019      	b.n	8010156 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6979      	ldr	r1, [r7, #20]
 8010126:	4618      	mov	r0, r3
 8010128:	f7ff fd01 	bl	800fb2e <get_fat>
 801012c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010134:	d101      	bne.n	801013a <dir_sdi+0x88>
 8010136:	2301      	movs	r3, #1
 8010138:	e032      	b.n	80101a0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	2b01      	cmp	r3, #1
 801013e:	d904      	bls.n	801014a <dir_sdi+0x98>
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	695b      	ldr	r3, [r3, #20]
 8010144:	697a      	ldr	r2, [r7, #20]
 8010146:	429a      	cmp	r2, r3
 8010148:	d301      	bcc.n	801014e <dir_sdi+0x9c>
 801014a:	2302      	movs	r3, #2
 801014c:	e028      	b.n	80101a0 <dir_sdi+0xee>
			ofs -= csz;
 801014e:	683a      	ldr	r2, [r7, #0]
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	1ad3      	subs	r3, r2, r3
 8010154:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010156:	683a      	ldr	r2, [r7, #0]
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	429a      	cmp	r2, r3
 801015c:	d2e1      	bcs.n	8010122 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801015e:	6979      	ldr	r1, [r7, #20]
 8010160:	6938      	ldr	r0, [r7, #16]
 8010162:	f7ff fcc5 	bl	800faf0 <clust2sect>
 8010166:	4602      	mov	r2, r0
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	697a      	ldr	r2, [r7, #20]
 8010170:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	69db      	ldr	r3, [r3, #28]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d101      	bne.n	801017e <dir_sdi+0xcc>
 801017a:	2302      	movs	r3, #2
 801017c:	e010      	b.n	80101a0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	69da      	ldr	r2, [r3, #28]
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	0a5b      	lsrs	r3, r3, #9
 8010186:	441a      	add	r2, r3
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801018c:	693b      	ldr	r3, [r7, #16]
 801018e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010198:	441a      	add	r2, r3
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801019e:	2300      	movs	r3, #0
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	3718      	adds	r7, #24
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}

080101a8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b086      	sub	sp, #24
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
 80101b0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	695b      	ldr	r3, [r3, #20]
 80101bc:	3320      	adds	r3, #32
 80101be:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	69db      	ldr	r3, [r3, #28]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d003      	beq.n	80101d0 <dir_next+0x28>
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80101ce:	d301      	bcc.n	80101d4 <dir_next+0x2c>
 80101d0:	2304      	movs	r3, #4
 80101d2:	e0aa      	b.n	801032a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101da:	2b00      	cmp	r3, #0
 80101dc:	f040 8098 	bne.w	8010310 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	69db      	ldr	r3, [r3, #28]
 80101e4:	1c5a      	adds	r2, r3, #1
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	699b      	ldr	r3, [r3, #24]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d10b      	bne.n	801020a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80101f2:	68bb      	ldr	r3, [r7, #8]
 80101f4:	095b      	lsrs	r3, r3, #5
 80101f6:	68fa      	ldr	r2, [r7, #12]
 80101f8:	8912      	ldrh	r2, [r2, #8]
 80101fa:	4293      	cmp	r3, r2
 80101fc:	f0c0 8088 	bcc.w	8010310 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	2200      	movs	r2, #0
 8010204:	61da      	str	r2, [r3, #28]
 8010206:	2304      	movs	r3, #4
 8010208:	e08f      	b.n	801032a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	0a5b      	lsrs	r3, r3, #9
 801020e:	68fa      	ldr	r2, [r7, #12]
 8010210:	8952      	ldrh	r2, [r2, #10]
 8010212:	3a01      	subs	r2, #1
 8010214:	4013      	ands	r3, r2
 8010216:	2b00      	cmp	r3, #0
 8010218:	d17a      	bne.n	8010310 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801021a:	687a      	ldr	r2, [r7, #4]
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	699b      	ldr	r3, [r3, #24]
 8010220:	4619      	mov	r1, r3
 8010222:	4610      	mov	r0, r2
 8010224:	f7ff fc83 	bl	800fb2e <get_fat>
 8010228:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	2b01      	cmp	r3, #1
 801022e:	d801      	bhi.n	8010234 <dir_next+0x8c>
 8010230:	2302      	movs	r3, #2
 8010232:	e07a      	b.n	801032a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	f1b3 3fff 	cmp.w	r3, #4294967295
 801023a:	d101      	bne.n	8010240 <dir_next+0x98>
 801023c:	2301      	movs	r3, #1
 801023e:	e074      	b.n	801032a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	695b      	ldr	r3, [r3, #20]
 8010244:	697a      	ldr	r2, [r7, #20]
 8010246:	429a      	cmp	r2, r3
 8010248:	d358      	bcc.n	80102fc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d104      	bne.n	801025a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2200      	movs	r2, #0
 8010254:	61da      	str	r2, [r3, #28]
 8010256:	2304      	movs	r3, #4
 8010258:	e067      	b.n	801032a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801025a:	687a      	ldr	r2, [r7, #4]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	699b      	ldr	r3, [r3, #24]
 8010260:	4619      	mov	r1, r3
 8010262:	4610      	mov	r0, r2
 8010264:	f7ff fe59 	bl	800ff1a <create_chain>
 8010268:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d101      	bne.n	8010274 <dir_next+0xcc>
 8010270:	2307      	movs	r3, #7
 8010272:	e05a      	b.n	801032a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	2b01      	cmp	r3, #1
 8010278:	d101      	bne.n	801027e <dir_next+0xd6>
 801027a:	2302      	movs	r3, #2
 801027c:	e055      	b.n	801032a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010284:	d101      	bne.n	801028a <dir_next+0xe2>
 8010286:	2301      	movs	r3, #1
 8010288:	e04f      	b.n	801032a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801028a:	68f8      	ldr	r0, [r7, #12]
 801028c:	f7ff fb50 	bl	800f930 <sync_window>
 8010290:	4603      	mov	r3, r0
 8010292:	2b00      	cmp	r3, #0
 8010294:	d001      	beq.n	801029a <dir_next+0xf2>
 8010296:	2301      	movs	r3, #1
 8010298:	e047      	b.n	801032a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	3330      	adds	r3, #48	@ 0x30
 801029e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80102a2:	2100      	movs	r1, #0
 80102a4:	4618      	mov	r0, r3
 80102a6:	f7ff f97a 	bl	800f59e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80102aa:	2300      	movs	r3, #0
 80102ac:	613b      	str	r3, [r7, #16]
 80102ae:	6979      	ldr	r1, [r7, #20]
 80102b0:	68f8      	ldr	r0, [r7, #12]
 80102b2:	f7ff fc1d 	bl	800faf0 <clust2sect>
 80102b6:	4602      	mov	r2, r0
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80102bc:	e012      	b.n	80102e4 <dir_next+0x13c>
						fs->wflag = 1;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2201      	movs	r2, #1
 80102c2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80102c4:	68f8      	ldr	r0, [r7, #12]
 80102c6:	f7ff fb33 	bl	800f930 <sync_window>
 80102ca:	4603      	mov	r3, r0
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d001      	beq.n	80102d4 <dir_next+0x12c>
 80102d0:	2301      	movs	r3, #1
 80102d2:	e02a      	b.n	801032a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	3301      	adds	r3, #1
 80102d8:	613b      	str	r3, [r7, #16]
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102de:	1c5a      	adds	r2, r3, #1
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	895b      	ldrh	r3, [r3, #10]
 80102e8:	461a      	mov	r2, r3
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d3e6      	bcc.n	80102be <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	1ad2      	subs	r2, r2, r3
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	697a      	ldr	r2, [r7, #20]
 8010300:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010302:	6979      	ldr	r1, [r7, #20]
 8010304:	68f8      	ldr	r0, [r7, #12]
 8010306:	f7ff fbf3 	bl	800faf0 <clust2sect>
 801030a:	4602      	mov	r2, r0
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	68ba      	ldr	r2, [r7, #8]
 8010314:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010322:	441a      	add	r2, r3
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010328:	2300      	movs	r3, #0
}
 801032a:	4618      	mov	r0, r3
 801032c:	3718      	adds	r7, #24
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}

08010332 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010332:	b580      	push	{r7, lr}
 8010334:	b086      	sub	sp, #24
 8010336:	af00      	add	r7, sp, #0
 8010338:	6078      	str	r0, [r7, #4]
 801033a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010342:	2100      	movs	r1, #0
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f7ff feb4 	bl	80100b2 <dir_sdi>
 801034a:	4603      	mov	r3, r0
 801034c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801034e:	7dfb      	ldrb	r3, [r7, #23]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d12b      	bne.n	80103ac <dir_alloc+0x7a>
		n = 0;
 8010354:	2300      	movs	r3, #0
 8010356:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	69db      	ldr	r3, [r3, #28]
 801035c:	4619      	mov	r1, r3
 801035e:	68f8      	ldr	r0, [r7, #12]
 8010360:	f7ff fb2a 	bl	800f9b8 <move_window>
 8010364:	4603      	mov	r3, r0
 8010366:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010368:	7dfb      	ldrb	r3, [r7, #23]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d11d      	bne.n	80103aa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6a1b      	ldr	r3, [r3, #32]
 8010372:	781b      	ldrb	r3, [r3, #0]
 8010374:	2be5      	cmp	r3, #229	@ 0xe5
 8010376:	d004      	beq.n	8010382 <dir_alloc+0x50>
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6a1b      	ldr	r3, [r3, #32]
 801037c:	781b      	ldrb	r3, [r3, #0]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d107      	bne.n	8010392 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	3301      	adds	r3, #1
 8010386:	613b      	str	r3, [r7, #16]
 8010388:	693a      	ldr	r2, [r7, #16]
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	429a      	cmp	r2, r3
 801038e:	d102      	bne.n	8010396 <dir_alloc+0x64>
 8010390:	e00c      	b.n	80103ac <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010392:	2300      	movs	r3, #0
 8010394:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010396:	2101      	movs	r1, #1
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f7ff ff05 	bl	80101a8 <dir_next>
 801039e:	4603      	mov	r3, r0
 80103a0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80103a2:	7dfb      	ldrb	r3, [r7, #23]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d0d7      	beq.n	8010358 <dir_alloc+0x26>
 80103a8:	e000      	b.n	80103ac <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80103aa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80103ac:	7dfb      	ldrb	r3, [r7, #23]
 80103ae:	2b04      	cmp	r3, #4
 80103b0:	d101      	bne.n	80103b6 <dir_alloc+0x84>
 80103b2:	2307      	movs	r3, #7
 80103b4:	75fb      	strb	r3, [r7, #23]
	return res;
 80103b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3718      	adds	r7, #24
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b084      	sub	sp, #16
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	331a      	adds	r3, #26
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7ff f842 	bl	800f458 <ld_word>
 80103d4:	4603      	mov	r3, r0
 80103d6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	781b      	ldrb	r3, [r3, #0]
 80103dc:	2b03      	cmp	r3, #3
 80103de:	d109      	bne.n	80103f4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	3314      	adds	r3, #20
 80103e4:	4618      	mov	r0, r3
 80103e6:	f7ff f837 	bl	800f458 <ld_word>
 80103ea:	4603      	mov	r3, r0
 80103ec:	041b      	lsls	r3, r3, #16
 80103ee:	68fa      	ldr	r2, [r7, #12]
 80103f0:	4313      	orrs	r3, r2
 80103f2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80103f4:	68fb      	ldr	r3, [r7, #12]
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	3710      	adds	r7, #16
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}

080103fe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80103fe:	b580      	push	{r7, lr}
 8010400:	b084      	sub	sp, #16
 8010402:	af00      	add	r7, sp, #0
 8010404:	60f8      	str	r0, [r7, #12]
 8010406:	60b9      	str	r1, [r7, #8]
 8010408:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	331a      	adds	r3, #26
 801040e:	687a      	ldr	r2, [r7, #4]
 8010410:	b292      	uxth	r2, r2
 8010412:	4611      	mov	r1, r2
 8010414:	4618      	mov	r0, r3
 8010416:	f7ff f85a 	bl	800f4ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	781b      	ldrb	r3, [r3, #0]
 801041e:	2b03      	cmp	r3, #3
 8010420:	d109      	bne.n	8010436 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	f103 0214 	add.w	r2, r3, #20
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	0c1b      	lsrs	r3, r3, #16
 801042c:	b29b      	uxth	r3, r3
 801042e:	4619      	mov	r1, r3
 8010430:	4610      	mov	r0, r2
 8010432:	f7ff f84c 	bl	800f4ce <st_word>
	}
}
 8010436:	bf00      	nop
 8010438:	3710      	adds	r7, #16
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}

0801043e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801043e:	b580      	push	{r7, lr}
 8010440:	b086      	sub	sp, #24
 8010442:	af00      	add	r7, sp, #0
 8010444:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801044c:	2100      	movs	r1, #0
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f7ff fe2f 	bl	80100b2 <dir_sdi>
 8010454:	4603      	mov	r3, r0
 8010456:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010458:	7dfb      	ldrb	r3, [r7, #23]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d001      	beq.n	8010462 <dir_find+0x24>
 801045e:	7dfb      	ldrb	r3, [r7, #23]
 8010460:	e03e      	b.n	80104e0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	69db      	ldr	r3, [r3, #28]
 8010466:	4619      	mov	r1, r3
 8010468:	6938      	ldr	r0, [r7, #16]
 801046a:	f7ff faa5 	bl	800f9b8 <move_window>
 801046e:	4603      	mov	r3, r0
 8010470:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010472:	7dfb      	ldrb	r3, [r7, #23]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d12f      	bne.n	80104d8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6a1b      	ldr	r3, [r3, #32]
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010480:	7bfb      	ldrb	r3, [r7, #15]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d102      	bne.n	801048c <dir_find+0x4e>
 8010486:	2304      	movs	r3, #4
 8010488:	75fb      	strb	r3, [r7, #23]
 801048a:	e028      	b.n	80104de <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6a1b      	ldr	r3, [r3, #32]
 8010490:	330b      	adds	r3, #11
 8010492:	781b      	ldrb	r3, [r3, #0]
 8010494:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010498:	b2da      	uxtb	r2, r3
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6a1b      	ldr	r3, [r3, #32]
 80104a2:	330b      	adds	r3, #11
 80104a4:	781b      	ldrb	r3, [r3, #0]
 80104a6:	f003 0308 	and.w	r3, r3, #8
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d10a      	bne.n	80104c4 <dir_find+0x86>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6a18      	ldr	r0, [r3, #32]
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	3324      	adds	r3, #36	@ 0x24
 80104b6:	220b      	movs	r2, #11
 80104b8:	4619      	mov	r1, r3
 80104ba:	f7ff f88b 	bl	800f5d4 <mem_cmp>
 80104be:	4603      	mov	r3, r0
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d00b      	beq.n	80104dc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80104c4:	2100      	movs	r1, #0
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f7ff fe6e 	bl	80101a8 <dir_next>
 80104cc:	4603      	mov	r3, r0
 80104ce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80104d0:	7dfb      	ldrb	r3, [r7, #23]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d0c5      	beq.n	8010462 <dir_find+0x24>
 80104d6:	e002      	b.n	80104de <dir_find+0xa0>
		if (res != FR_OK) break;
 80104d8:	bf00      	nop
 80104da:	e000      	b.n	80104de <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80104dc:	bf00      	nop

	return res;
 80104de:	7dfb      	ldrb	r3, [r7, #23]
}
 80104e0:	4618      	mov	r0, r3
 80104e2:	3718      	adds	r7, #24
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}

080104e8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b084      	sub	sp, #16
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80104f6:	2101      	movs	r1, #1
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f7ff ff1a 	bl	8010332 <dir_alloc>
 80104fe:	4603      	mov	r3, r0
 8010500:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010502:	7bfb      	ldrb	r3, [r7, #15]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d11c      	bne.n	8010542 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	69db      	ldr	r3, [r3, #28]
 801050c:	4619      	mov	r1, r3
 801050e:	68b8      	ldr	r0, [r7, #8]
 8010510:	f7ff fa52 	bl	800f9b8 <move_window>
 8010514:	4603      	mov	r3, r0
 8010516:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010518:	7bfb      	ldrb	r3, [r7, #15]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d111      	bne.n	8010542 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6a1b      	ldr	r3, [r3, #32]
 8010522:	2220      	movs	r2, #32
 8010524:	2100      	movs	r1, #0
 8010526:	4618      	mov	r0, r3
 8010528:	f7ff f839 	bl	800f59e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6a18      	ldr	r0, [r3, #32]
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	3324      	adds	r3, #36	@ 0x24
 8010534:	220b      	movs	r2, #11
 8010536:	4619      	mov	r1, r3
 8010538:	f7ff f810 	bl	800f55c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	2201      	movs	r2, #1
 8010540:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010542:	7bfb      	ldrb	r3, [r7, #15]
}
 8010544:	4618      	mov	r0, r3
 8010546:	3710      	adds	r7, #16
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b088      	sub	sp, #32
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	60fb      	str	r3, [r7, #12]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	3324      	adds	r3, #36	@ 0x24
 8010560:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010562:	220b      	movs	r2, #11
 8010564:	2120      	movs	r1, #32
 8010566:	68b8      	ldr	r0, [r7, #8]
 8010568:	f7ff f819 	bl	800f59e <mem_set>
	si = i = 0; ni = 8;
 801056c:	2300      	movs	r3, #0
 801056e:	613b      	str	r3, [r7, #16]
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	61fb      	str	r3, [r7, #28]
 8010574:	2308      	movs	r3, #8
 8010576:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010578:	69fb      	ldr	r3, [r7, #28]
 801057a:	1c5a      	adds	r2, r3, #1
 801057c:	61fa      	str	r2, [r7, #28]
 801057e:	68fa      	ldr	r2, [r7, #12]
 8010580:	4413      	add	r3, r2
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010586:	7efb      	ldrb	r3, [r7, #27]
 8010588:	2b20      	cmp	r3, #32
 801058a:	d94e      	bls.n	801062a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801058c:	7efb      	ldrb	r3, [r7, #27]
 801058e:	2b2f      	cmp	r3, #47	@ 0x2f
 8010590:	d006      	beq.n	80105a0 <create_name+0x54>
 8010592:	7efb      	ldrb	r3, [r7, #27]
 8010594:	2b5c      	cmp	r3, #92	@ 0x5c
 8010596:	d110      	bne.n	80105ba <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010598:	e002      	b.n	80105a0 <create_name+0x54>
 801059a:	69fb      	ldr	r3, [r7, #28]
 801059c:	3301      	adds	r3, #1
 801059e:	61fb      	str	r3, [r7, #28]
 80105a0:	68fa      	ldr	r2, [r7, #12]
 80105a2:	69fb      	ldr	r3, [r7, #28]
 80105a4:	4413      	add	r3, r2
 80105a6:	781b      	ldrb	r3, [r3, #0]
 80105a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80105aa:	d0f6      	beq.n	801059a <create_name+0x4e>
 80105ac:	68fa      	ldr	r2, [r7, #12]
 80105ae:	69fb      	ldr	r3, [r7, #28]
 80105b0:	4413      	add	r3, r2
 80105b2:	781b      	ldrb	r3, [r3, #0]
 80105b4:	2b5c      	cmp	r3, #92	@ 0x5c
 80105b6:	d0f0      	beq.n	801059a <create_name+0x4e>
			break;
 80105b8:	e038      	b.n	801062c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80105ba:	7efb      	ldrb	r3, [r7, #27]
 80105bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80105be:	d003      	beq.n	80105c8 <create_name+0x7c>
 80105c0:	693a      	ldr	r2, [r7, #16]
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d30c      	bcc.n	80105e2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	2b0b      	cmp	r3, #11
 80105cc:	d002      	beq.n	80105d4 <create_name+0x88>
 80105ce:	7efb      	ldrb	r3, [r7, #27]
 80105d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80105d2:	d001      	beq.n	80105d8 <create_name+0x8c>
 80105d4:	2306      	movs	r3, #6
 80105d6:	e044      	b.n	8010662 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80105d8:	2308      	movs	r3, #8
 80105da:	613b      	str	r3, [r7, #16]
 80105dc:	230b      	movs	r3, #11
 80105de:	617b      	str	r3, [r7, #20]
			continue;
 80105e0:	e022      	b.n	8010628 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80105e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	da04      	bge.n	80105f4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80105ea:	7efb      	ldrb	r3, [r7, #27]
 80105ec:	3b80      	subs	r3, #128	@ 0x80
 80105ee:	4a1f      	ldr	r2, [pc, #124]	@ (801066c <create_name+0x120>)
 80105f0:	5cd3      	ldrb	r3, [r2, r3]
 80105f2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80105f4:	7efb      	ldrb	r3, [r7, #27]
 80105f6:	4619      	mov	r1, r3
 80105f8:	481d      	ldr	r0, [pc, #116]	@ (8010670 <create_name+0x124>)
 80105fa:	f7ff f812 	bl	800f622 <chk_chr>
 80105fe:	4603      	mov	r3, r0
 8010600:	2b00      	cmp	r3, #0
 8010602:	d001      	beq.n	8010608 <create_name+0xbc>
 8010604:	2306      	movs	r3, #6
 8010606:	e02c      	b.n	8010662 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010608:	7efb      	ldrb	r3, [r7, #27]
 801060a:	2b60      	cmp	r3, #96	@ 0x60
 801060c:	d905      	bls.n	801061a <create_name+0xce>
 801060e:	7efb      	ldrb	r3, [r7, #27]
 8010610:	2b7a      	cmp	r3, #122	@ 0x7a
 8010612:	d802      	bhi.n	801061a <create_name+0xce>
 8010614:	7efb      	ldrb	r3, [r7, #27]
 8010616:	3b20      	subs	r3, #32
 8010618:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801061a:	693b      	ldr	r3, [r7, #16]
 801061c:	1c5a      	adds	r2, r3, #1
 801061e:	613a      	str	r2, [r7, #16]
 8010620:	68ba      	ldr	r2, [r7, #8]
 8010622:	4413      	add	r3, r2
 8010624:	7efa      	ldrb	r2, [r7, #27]
 8010626:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010628:	e7a6      	b.n	8010578 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801062a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801062c:	68fa      	ldr	r2, [r7, #12]
 801062e:	69fb      	ldr	r3, [r7, #28]
 8010630:	441a      	add	r2, r3
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010636:	693b      	ldr	r3, [r7, #16]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d101      	bne.n	8010640 <create_name+0xf4>
 801063c:	2306      	movs	r3, #6
 801063e:	e010      	b.n	8010662 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	2be5      	cmp	r3, #229	@ 0xe5
 8010646:	d102      	bne.n	801064e <create_name+0x102>
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	2205      	movs	r2, #5
 801064c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801064e:	7efb      	ldrb	r3, [r7, #27]
 8010650:	2b20      	cmp	r3, #32
 8010652:	d801      	bhi.n	8010658 <create_name+0x10c>
 8010654:	2204      	movs	r2, #4
 8010656:	e000      	b.n	801065a <create_name+0x10e>
 8010658:	2200      	movs	r2, #0
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	330b      	adds	r3, #11
 801065e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010660:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010662:	4618      	mov	r0, r3
 8010664:	3720      	adds	r7, #32
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}
 801066a:	bf00      	nop
 801066c:	080126e4 	.word	0x080126e4
 8010670:	08012414 	.word	0x08012414

08010674 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b086      	sub	sp, #24
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
 801067c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010682:	693b      	ldr	r3, [r7, #16]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010688:	e002      	b.n	8010690 <follow_path+0x1c>
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	3301      	adds	r3, #1
 801068e:	603b      	str	r3, [r7, #0]
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	2b2f      	cmp	r3, #47	@ 0x2f
 8010696:	d0f8      	beq.n	801068a <follow_path+0x16>
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	781b      	ldrb	r3, [r3, #0]
 801069c:	2b5c      	cmp	r3, #92	@ 0x5c
 801069e:	d0f4      	beq.n	801068a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80106a0:	693b      	ldr	r3, [r7, #16]
 80106a2:	2200      	movs	r2, #0
 80106a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	2b1f      	cmp	r3, #31
 80106ac:	d80a      	bhi.n	80106c4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2280      	movs	r2, #128	@ 0x80
 80106b2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80106b6:	2100      	movs	r1, #0
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f7ff fcfa 	bl	80100b2 <dir_sdi>
 80106be:	4603      	mov	r3, r0
 80106c0:	75fb      	strb	r3, [r7, #23]
 80106c2:	e043      	b.n	801074c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80106c4:	463b      	mov	r3, r7
 80106c6:	4619      	mov	r1, r3
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f7ff ff3f 	bl	801054c <create_name>
 80106ce:	4603      	mov	r3, r0
 80106d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80106d2:	7dfb      	ldrb	r3, [r7, #23]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d134      	bne.n	8010742 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f7ff feb0 	bl	801043e <dir_find>
 80106de:	4603      	mov	r3, r0
 80106e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80106e8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80106ea:	7dfb      	ldrb	r3, [r7, #23]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d00a      	beq.n	8010706 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80106f0:	7dfb      	ldrb	r3, [r7, #23]
 80106f2:	2b04      	cmp	r3, #4
 80106f4:	d127      	bne.n	8010746 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80106f6:	7afb      	ldrb	r3, [r7, #11]
 80106f8:	f003 0304 	and.w	r3, r3, #4
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d122      	bne.n	8010746 <follow_path+0xd2>
 8010700:	2305      	movs	r3, #5
 8010702:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010704:	e01f      	b.n	8010746 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010706:	7afb      	ldrb	r3, [r7, #11]
 8010708:	f003 0304 	and.w	r3, r3, #4
 801070c:	2b00      	cmp	r3, #0
 801070e:	d11c      	bne.n	801074a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010710:	693b      	ldr	r3, [r7, #16]
 8010712:	799b      	ldrb	r3, [r3, #6]
 8010714:	f003 0310 	and.w	r3, r3, #16
 8010718:	2b00      	cmp	r3, #0
 801071a:	d102      	bne.n	8010722 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801071c:	2305      	movs	r3, #5
 801071e:	75fb      	strb	r3, [r7, #23]
 8010720:	e014      	b.n	801074c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	695b      	ldr	r3, [r3, #20]
 801072c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010730:	4413      	add	r3, r2
 8010732:	4619      	mov	r1, r3
 8010734:	68f8      	ldr	r0, [r7, #12]
 8010736:	f7ff fe43 	bl	80103c0 <ld_clust>
 801073a:	4602      	mov	r2, r0
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010740:	e7c0      	b.n	80106c4 <follow_path+0x50>
			if (res != FR_OK) break;
 8010742:	bf00      	nop
 8010744:	e002      	b.n	801074c <follow_path+0xd8>
				break;
 8010746:	bf00      	nop
 8010748:	e000      	b.n	801074c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801074a:	bf00      	nop
			}
		}
	}

	return res;
 801074c:	7dfb      	ldrb	r3, [r7, #23]
}
 801074e:	4618      	mov	r0, r3
 8010750:	3718      	adds	r7, #24
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}

08010756 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010756:	b480      	push	{r7}
 8010758:	b087      	sub	sp, #28
 801075a:	af00      	add	r7, sp, #0
 801075c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801075e:	f04f 33ff 	mov.w	r3, #4294967295
 8010762:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d031      	beq.n	80107d0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	617b      	str	r3, [r7, #20]
 8010772:	e002      	b.n	801077a <get_ldnumber+0x24>
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	3301      	adds	r3, #1
 8010778:	617b      	str	r3, [r7, #20]
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	2b20      	cmp	r3, #32
 8010780:	d903      	bls.n	801078a <get_ldnumber+0x34>
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	781b      	ldrb	r3, [r3, #0]
 8010786:	2b3a      	cmp	r3, #58	@ 0x3a
 8010788:	d1f4      	bne.n	8010774 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	781b      	ldrb	r3, [r3, #0]
 801078e:	2b3a      	cmp	r3, #58	@ 0x3a
 8010790:	d11c      	bne.n	80107cc <get_ldnumber+0x76>
			tp = *path;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	1c5a      	adds	r2, r3, #1
 801079c:	60fa      	str	r2, [r7, #12]
 801079e:	781b      	ldrb	r3, [r3, #0]
 80107a0:	3b30      	subs	r3, #48	@ 0x30
 80107a2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	2b09      	cmp	r3, #9
 80107a8:	d80e      	bhi.n	80107c8 <get_ldnumber+0x72>
 80107aa:	68fa      	ldr	r2, [r7, #12]
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d10a      	bne.n	80107c8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d107      	bne.n	80107c8 <get_ldnumber+0x72>
					vol = (int)i;
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	3301      	adds	r3, #1
 80107c0:	617b      	str	r3, [r7, #20]
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	697a      	ldr	r2, [r7, #20]
 80107c6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	e002      	b.n	80107d2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80107cc:	2300      	movs	r3, #0
 80107ce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80107d0:	693b      	ldr	r3, [r7, #16]
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	371c      	adds	r7, #28
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr
	...

080107e0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2200      	movs	r2, #0
 80107ee:	70da      	strb	r2, [r3, #3]
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f04f 32ff 	mov.w	r2, #4294967295
 80107f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80107f8:	6839      	ldr	r1, [r7, #0]
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f7ff f8dc 	bl	800f9b8 <move_window>
 8010800:	4603      	mov	r3, r0
 8010802:	2b00      	cmp	r3, #0
 8010804:	d001      	beq.n	801080a <check_fs+0x2a>
 8010806:	2304      	movs	r3, #4
 8010808:	e038      	b.n	801087c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	3330      	adds	r3, #48	@ 0x30
 801080e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010812:	4618      	mov	r0, r3
 8010814:	f7fe fe20 	bl	800f458 <ld_word>
 8010818:	4603      	mov	r3, r0
 801081a:	461a      	mov	r2, r3
 801081c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010820:	429a      	cmp	r2, r3
 8010822:	d001      	beq.n	8010828 <check_fs+0x48>
 8010824:	2303      	movs	r3, #3
 8010826:	e029      	b.n	801087c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801082e:	2be9      	cmp	r3, #233	@ 0xe9
 8010830:	d009      	beq.n	8010846 <check_fs+0x66>
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010838:	2beb      	cmp	r3, #235	@ 0xeb
 801083a:	d11e      	bne.n	801087a <check_fs+0x9a>
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8010842:	2b90      	cmp	r3, #144	@ 0x90
 8010844:	d119      	bne.n	801087a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	3330      	adds	r3, #48	@ 0x30
 801084a:	3336      	adds	r3, #54	@ 0x36
 801084c:	4618      	mov	r0, r3
 801084e:	f7fe fe1b 	bl	800f488 <ld_dword>
 8010852:	4603      	mov	r3, r0
 8010854:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010858:	4a0a      	ldr	r2, [pc, #40]	@ (8010884 <check_fs+0xa4>)
 801085a:	4293      	cmp	r3, r2
 801085c:	d101      	bne.n	8010862 <check_fs+0x82>
 801085e:	2300      	movs	r3, #0
 8010860:	e00c      	b.n	801087c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	3330      	adds	r3, #48	@ 0x30
 8010866:	3352      	adds	r3, #82	@ 0x52
 8010868:	4618      	mov	r0, r3
 801086a:	f7fe fe0d 	bl	800f488 <ld_dword>
 801086e:	4603      	mov	r3, r0
 8010870:	4a05      	ldr	r2, [pc, #20]	@ (8010888 <check_fs+0xa8>)
 8010872:	4293      	cmp	r3, r2
 8010874:	d101      	bne.n	801087a <check_fs+0x9a>
 8010876:	2300      	movs	r3, #0
 8010878:	e000      	b.n	801087c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801087a:	2302      	movs	r3, #2
}
 801087c:	4618      	mov	r0, r3
 801087e:	3708      	adds	r7, #8
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}
 8010884:	00544146 	.word	0x00544146
 8010888:	33544146 	.word	0x33544146

0801088c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b096      	sub	sp, #88	@ 0x58
 8010890:	af00      	add	r7, sp, #0
 8010892:	60f8      	str	r0, [r7, #12]
 8010894:	60b9      	str	r1, [r7, #8]
 8010896:	4613      	mov	r3, r2
 8010898:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	2200      	movs	r2, #0
 801089e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80108a0:	68f8      	ldr	r0, [r7, #12]
 80108a2:	f7ff ff58 	bl	8010756 <get_ldnumber>
 80108a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80108a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	da01      	bge.n	80108b2 <find_volume+0x26>
 80108ae:	230b      	movs	r3, #11
 80108b0:	e22d      	b.n	8010d0e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80108b2:	4aa1      	ldr	r2, [pc, #644]	@ (8010b38 <find_volume+0x2ac>)
 80108b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80108bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d101      	bne.n	80108c6 <find_volume+0x3a>
 80108c2:	230c      	movs	r3, #12
 80108c4:	e223      	b.n	8010d0e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80108ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80108cc:	79fb      	ldrb	r3, [r7, #7]
 80108ce:	f023 0301 	bic.w	r3, r3, #1
 80108d2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80108d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d01a      	beq.n	8010912 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80108dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108de:	785b      	ldrb	r3, [r3, #1]
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7fe fd19 	bl	800f318 <disk_status>
 80108e6:	4603      	mov	r3, r0
 80108e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80108ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80108f0:	f003 0301 	and.w	r3, r3, #1
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d10c      	bne.n	8010912 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80108f8:	79fb      	ldrb	r3, [r7, #7]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d007      	beq.n	801090e <find_volume+0x82>
 80108fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010902:	f003 0304 	and.w	r3, r3, #4
 8010906:	2b00      	cmp	r3, #0
 8010908:	d001      	beq.n	801090e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801090a:	230a      	movs	r3, #10
 801090c:	e1ff      	b.n	8010d0e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801090e:	2300      	movs	r3, #0
 8010910:	e1fd      	b.n	8010d0e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010914:	2200      	movs	r2, #0
 8010916:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801091a:	b2da      	uxtb	r2, r3
 801091c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801091e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010922:	785b      	ldrb	r3, [r3, #1]
 8010924:	4618      	mov	r0, r3
 8010926:	f7fe fd11 	bl	800f34c <disk_initialize>
 801092a:	4603      	mov	r3, r0
 801092c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010930:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010934:	f003 0301 	and.w	r3, r3, #1
 8010938:	2b00      	cmp	r3, #0
 801093a:	d001      	beq.n	8010940 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801093c:	2303      	movs	r3, #3
 801093e:	e1e6      	b.n	8010d0e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010940:	79fb      	ldrb	r3, [r7, #7]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d007      	beq.n	8010956 <find_volume+0xca>
 8010946:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801094a:	f003 0304 	and.w	r3, r3, #4
 801094e:	2b00      	cmp	r3, #0
 8010950:	d001      	beq.n	8010956 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010952:	230a      	movs	r3, #10
 8010954:	e1db      	b.n	8010d0e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010956:	2300      	movs	r3, #0
 8010958:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801095a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801095c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801095e:	f7ff ff3f 	bl	80107e0 <check_fs>
 8010962:	4603      	mov	r3, r0
 8010964:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010968:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801096c:	2b02      	cmp	r3, #2
 801096e:	d149      	bne.n	8010a04 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010970:	2300      	movs	r3, #0
 8010972:	643b      	str	r3, [r7, #64]	@ 0x40
 8010974:	e01e      	b.n	80109b4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010978:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801097c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801097e:	011b      	lsls	r3, r3, #4
 8010980:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010984:	4413      	add	r3, r2
 8010986:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801098a:	3304      	adds	r3, #4
 801098c:	781b      	ldrb	r3, [r3, #0]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d006      	beq.n	80109a0 <find_volume+0x114>
 8010992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010994:	3308      	adds	r3, #8
 8010996:	4618      	mov	r0, r3
 8010998:	f7fe fd76 	bl	800f488 <ld_dword>
 801099c:	4602      	mov	r2, r0
 801099e:	e000      	b.n	80109a2 <find_volume+0x116>
 80109a0:	2200      	movs	r2, #0
 80109a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109a4:	009b      	lsls	r3, r3, #2
 80109a6:	3358      	adds	r3, #88	@ 0x58
 80109a8:	443b      	add	r3, r7
 80109aa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80109ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109b0:	3301      	adds	r3, #1
 80109b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80109b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109b6:	2b03      	cmp	r3, #3
 80109b8:	d9dd      	bls.n	8010976 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80109ba:	2300      	movs	r3, #0
 80109bc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80109be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d002      	beq.n	80109ca <find_volume+0x13e>
 80109c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109c6:	3b01      	subs	r3, #1
 80109c8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80109ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109cc:	009b      	lsls	r3, r3, #2
 80109ce:	3358      	adds	r3, #88	@ 0x58
 80109d0:	443b      	add	r3, r7
 80109d2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80109d6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80109d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d005      	beq.n	80109ea <find_volume+0x15e>
 80109de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80109e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80109e2:	f7ff fefd 	bl	80107e0 <check_fs>
 80109e6:	4603      	mov	r3, r0
 80109e8:	e000      	b.n	80109ec <find_volume+0x160>
 80109ea:	2303      	movs	r3, #3
 80109ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80109f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80109f4:	2b01      	cmp	r3, #1
 80109f6:	d905      	bls.n	8010a04 <find_volume+0x178>
 80109f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109fa:	3301      	adds	r3, #1
 80109fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80109fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a00:	2b03      	cmp	r3, #3
 8010a02:	d9e2      	bls.n	80109ca <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010a04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010a08:	2b04      	cmp	r3, #4
 8010a0a:	d101      	bne.n	8010a10 <find_volume+0x184>
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	e17e      	b.n	8010d0e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010a10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010a14:	2b01      	cmp	r3, #1
 8010a16:	d901      	bls.n	8010a1c <find_volume+0x190>
 8010a18:	230d      	movs	r3, #13
 8010a1a:	e178      	b.n	8010d0e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a1e:	3330      	adds	r3, #48	@ 0x30
 8010a20:	330b      	adds	r3, #11
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7fe fd18 	bl	800f458 <ld_word>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a2e:	d001      	beq.n	8010a34 <find_volume+0x1a8>
 8010a30:	230d      	movs	r3, #13
 8010a32:	e16c      	b.n	8010d0e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a36:	3330      	adds	r3, #48	@ 0x30
 8010a38:	3316      	adds	r3, #22
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7fe fd0c 	bl	800f458 <ld_word>
 8010a40:	4603      	mov	r3, r0
 8010a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d106      	bne.n	8010a58 <find_volume+0x1cc>
 8010a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a4c:	3330      	adds	r3, #48	@ 0x30
 8010a4e:	3324      	adds	r3, #36	@ 0x24
 8010a50:	4618      	mov	r0, r3
 8010a52:	f7fe fd19 	bl	800f488 <ld_dword>
 8010a56:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010a5c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a60:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8010a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a66:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a6a:	789b      	ldrb	r3, [r3, #2]
 8010a6c:	2b01      	cmp	r3, #1
 8010a6e:	d005      	beq.n	8010a7c <find_volume+0x1f0>
 8010a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a72:	789b      	ldrb	r3, [r3, #2]
 8010a74:	2b02      	cmp	r3, #2
 8010a76:	d001      	beq.n	8010a7c <find_volume+0x1f0>
 8010a78:	230d      	movs	r3, #13
 8010a7a:	e148      	b.n	8010d0e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a7e:	789b      	ldrb	r3, [r3, #2]
 8010a80:	461a      	mov	r2, r3
 8010a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a84:	fb02 f303 	mul.w	r3, r2, r3
 8010a88:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010a90:	461a      	mov	r2, r3
 8010a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a94:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a98:	895b      	ldrh	r3, [r3, #10]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d008      	beq.n	8010ab0 <find_volume+0x224>
 8010a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aa0:	895b      	ldrh	r3, [r3, #10]
 8010aa2:	461a      	mov	r2, r3
 8010aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aa6:	895b      	ldrh	r3, [r3, #10]
 8010aa8:	3b01      	subs	r3, #1
 8010aaa:	4013      	ands	r3, r2
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d001      	beq.n	8010ab4 <find_volume+0x228>
 8010ab0:	230d      	movs	r3, #13
 8010ab2:	e12c      	b.n	8010d0e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ab6:	3330      	adds	r3, #48	@ 0x30
 8010ab8:	3311      	adds	r3, #17
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7fe fccc 	bl	800f458 <ld_word>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	461a      	mov	r2, r3
 8010ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ac6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aca:	891b      	ldrh	r3, [r3, #8]
 8010acc:	f003 030f 	and.w	r3, r3, #15
 8010ad0:	b29b      	uxth	r3, r3
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d001      	beq.n	8010ada <find_volume+0x24e>
 8010ad6:	230d      	movs	r3, #13
 8010ad8:	e119      	b.n	8010d0e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010adc:	3330      	adds	r3, #48	@ 0x30
 8010ade:	3313      	adds	r3, #19
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f7fe fcb9 	bl	800f458 <ld_word>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d106      	bne.n	8010afe <find_volume+0x272>
 8010af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010af2:	3330      	adds	r3, #48	@ 0x30
 8010af4:	3320      	adds	r3, #32
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7fe fcc6 	bl	800f488 <ld_dword>
 8010afc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b00:	3330      	adds	r3, #48	@ 0x30
 8010b02:	330e      	adds	r3, #14
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7fe fca7 	bl	800f458 <ld_word>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010b0e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d101      	bne.n	8010b18 <find_volume+0x28c>
 8010b14:	230d      	movs	r3, #13
 8010b16:	e0fa      	b.n	8010d0e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010b18:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010b1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b1c:	4413      	add	r3, r2
 8010b1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010b20:	8912      	ldrh	r2, [r2, #8]
 8010b22:	0912      	lsrs	r2, r2, #4
 8010b24:	b292      	uxth	r2, r2
 8010b26:	4413      	add	r3, r2
 8010b28:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010b2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	d204      	bcs.n	8010b3c <find_volume+0x2b0>
 8010b32:	230d      	movs	r3, #13
 8010b34:	e0eb      	b.n	8010d0e <find_volume+0x482>
 8010b36:	bf00      	nop
 8010b38:	240bc0f8 	.word	0x240bc0f8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010b3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b40:	1ad3      	subs	r3, r2, r3
 8010b42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010b44:	8952      	ldrh	r2, [r2, #10]
 8010b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b4a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d101      	bne.n	8010b56 <find_volume+0x2ca>
 8010b52:	230d      	movs	r3, #13
 8010b54:	e0db      	b.n	8010d0e <find_volume+0x482>
		fmt = FS_FAT32;
 8010b56:	2303      	movs	r3, #3
 8010b58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b5e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010b62:	4293      	cmp	r3, r2
 8010b64:	d802      	bhi.n	8010b6c <find_volume+0x2e0>
 8010b66:	2302      	movs	r3, #2
 8010b68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b6e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010b72:	4293      	cmp	r3, r2
 8010b74:	d802      	bhi.n	8010b7c <find_volume+0x2f0>
 8010b76:	2301      	movs	r3, #1
 8010b78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b7e:	1c9a      	adds	r2, r3, #2
 8010b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b82:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8010b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010b88:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010b8a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010b8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b8e:	441a      	add	r2, r3
 8010b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b92:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8010b94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b98:	441a      	add	r2, r3
 8010b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b9c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8010b9e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010ba2:	2b03      	cmp	r3, #3
 8010ba4:	d11e      	bne.n	8010be4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ba8:	3330      	adds	r3, #48	@ 0x30
 8010baa:	332a      	adds	r3, #42	@ 0x2a
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7fe fc53 	bl	800f458 <ld_word>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d001      	beq.n	8010bbc <find_volume+0x330>
 8010bb8:	230d      	movs	r3, #13
 8010bba:	e0a8      	b.n	8010d0e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bbe:	891b      	ldrh	r3, [r3, #8]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d001      	beq.n	8010bc8 <find_volume+0x33c>
 8010bc4:	230d      	movs	r3, #13
 8010bc6:	e0a2      	b.n	8010d0e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bca:	3330      	adds	r3, #48	@ 0x30
 8010bcc:	332c      	adds	r3, #44	@ 0x2c
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7fe fc5a 	bl	800f488 <ld_dword>
 8010bd4:	4602      	mov	r2, r0
 8010bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bd8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bdc:	695b      	ldr	r3, [r3, #20]
 8010bde:	009b      	lsls	r3, r3, #2
 8010be0:	647b      	str	r3, [r7, #68]	@ 0x44
 8010be2:	e01f      	b.n	8010c24 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010be6:	891b      	ldrh	r3, [r3, #8]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d101      	bne.n	8010bf0 <find_volume+0x364>
 8010bec:	230d      	movs	r3, #13
 8010bee:	e08e      	b.n	8010d0e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bf2:	6a1a      	ldr	r2, [r3, #32]
 8010bf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010bf6:	441a      	add	r2, r3
 8010bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bfa:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010c00:	2b02      	cmp	r3, #2
 8010c02:	d103      	bne.n	8010c0c <find_volume+0x380>
 8010c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c06:	695b      	ldr	r3, [r3, #20]
 8010c08:	005b      	lsls	r3, r3, #1
 8010c0a:	e00a      	b.n	8010c22 <find_volume+0x396>
 8010c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c0e:	695a      	ldr	r2, [r3, #20]
 8010c10:	4613      	mov	r3, r2
 8010c12:	005b      	lsls	r3, r3, #1
 8010c14:	4413      	add	r3, r2
 8010c16:	085a      	lsrs	r2, r3, #1
 8010c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c1a:	695b      	ldr	r3, [r3, #20]
 8010c1c:	f003 0301 	and.w	r3, r3, #1
 8010c20:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010c22:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c26:	699a      	ldr	r2, [r3, #24]
 8010c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c2a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010c2e:	0a5b      	lsrs	r3, r3, #9
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d201      	bcs.n	8010c38 <find_volume+0x3ac>
 8010c34:	230d      	movs	r3, #13
 8010c36:	e06a      	b.n	8010d0e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8010c3e:	611a      	str	r2, [r3, #16]
 8010c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c42:	691a      	ldr	r2, [r3, #16]
 8010c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c46:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8010c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c4a:	2280      	movs	r2, #128	@ 0x80
 8010c4c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010c4e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010c52:	2b03      	cmp	r3, #3
 8010c54:	d149      	bne.n	8010cea <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c58:	3330      	adds	r3, #48	@ 0x30
 8010c5a:	3330      	adds	r3, #48	@ 0x30
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7fe fbfb 	bl	800f458 <ld_word>
 8010c62:	4603      	mov	r3, r0
 8010c64:	2b01      	cmp	r3, #1
 8010c66:	d140      	bne.n	8010cea <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010c68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c6a:	3301      	adds	r3, #1
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010c70:	f7fe fea2 	bl	800f9b8 <move_window>
 8010c74:	4603      	mov	r3, r0
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d137      	bne.n	8010cea <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8010c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c82:	3330      	adds	r3, #48	@ 0x30
 8010c84:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7fe fbe5 	bl	800f458 <ld_word>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	461a      	mov	r2, r3
 8010c92:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d127      	bne.n	8010cea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c9c:	3330      	adds	r3, #48	@ 0x30
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7fe fbf2 	bl	800f488 <ld_dword>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8010d18 <find_volume+0x48c>)
 8010ca8:	4293      	cmp	r3, r2
 8010caa:	d11e      	bne.n	8010cea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cae:	3330      	adds	r3, #48	@ 0x30
 8010cb0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f7fe fbe7 	bl	800f488 <ld_dword>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	4a17      	ldr	r2, [pc, #92]	@ (8010d1c <find_volume+0x490>)
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	d113      	bne.n	8010cea <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cc4:	3330      	adds	r3, #48	@ 0x30
 8010cc6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7fe fbdc 	bl	800f488 <ld_dword>
 8010cd0:	4602      	mov	r2, r0
 8010cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cd4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cd8:	3330      	adds	r3, #48	@ 0x30
 8010cda:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7fe fbd2 	bl	800f488 <ld_dword>
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ce8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cec:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8010cf0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8010d20 <find_volume+0x494>)
 8010cf4:	881b      	ldrh	r3, [r3, #0]
 8010cf6:	3301      	adds	r3, #1
 8010cf8:	b29a      	uxth	r2, r3
 8010cfa:	4b09      	ldr	r3, [pc, #36]	@ (8010d20 <find_volume+0x494>)
 8010cfc:	801a      	strh	r2, [r3, #0]
 8010cfe:	4b08      	ldr	r3, [pc, #32]	@ (8010d20 <find_volume+0x494>)
 8010d00:	881a      	ldrh	r2, [r3, #0]
 8010d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d04:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010d06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010d08:	f7fe fdee 	bl	800f8e8 <clear_lock>
#endif
	return FR_OK;
 8010d0c:	2300      	movs	r3, #0
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3758      	adds	r7, #88	@ 0x58
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
 8010d16:	bf00      	nop
 8010d18:	41615252 	.word	0x41615252
 8010d1c:	61417272 	.word	0x61417272
 8010d20:	240bc0fc 	.word	0x240bc0fc

08010d24 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b084      	sub	sp, #16
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010d2e:	2309      	movs	r3, #9
 8010d30:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d01c      	beq.n	8010d72 <validate+0x4e>
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d018      	beq.n	8010d72 <validate+0x4e>
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d013      	beq.n	8010d72 <validate+0x4e>
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	889a      	ldrh	r2, [r3, #4]
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	88db      	ldrh	r3, [r3, #6]
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d10c      	bne.n	8010d72 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	785b      	ldrb	r3, [r3, #1]
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7fe fada 	bl	800f318 <disk_status>
 8010d64:	4603      	mov	r3, r0
 8010d66:	f003 0301 	and.w	r3, r3, #1
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d101      	bne.n	8010d72 <validate+0x4e>
			res = FR_OK;
 8010d6e:	2300      	movs	r3, #0
 8010d70:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010d72:	7bfb      	ldrb	r3, [r7, #15]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d102      	bne.n	8010d7e <validate+0x5a>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	e000      	b.n	8010d80 <validate+0x5c>
 8010d7e:	2300      	movs	r3, #0
 8010d80:	683a      	ldr	r2, [r7, #0]
 8010d82:	6013      	str	r3, [r2, #0]
	return res;
 8010d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3710      	adds	r7, #16
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}
	...

08010d90 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b088      	sub	sp, #32
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	60f8      	str	r0, [r7, #12]
 8010d98:	60b9      	str	r1, [r7, #8]
 8010d9a:	4613      	mov	r3, r2
 8010d9c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010da2:	f107 0310 	add.w	r3, r7, #16
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7ff fcd5 	bl	8010756 <get_ldnumber>
 8010dac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010dae:	69fb      	ldr	r3, [r7, #28]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	da01      	bge.n	8010db8 <f_mount+0x28>
 8010db4:	230b      	movs	r3, #11
 8010db6:	e02b      	b.n	8010e10 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010db8:	4a17      	ldr	r2, [pc, #92]	@ (8010e18 <f_mount+0x88>)
 8010dba:	69fb      	ldr	r3, [r7, #28]
 8010dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010dc0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010dc2:	69bb      	ldr	r3, [r7, #24]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d005      	beq.n	8010dd4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010dc8:	69b8      	ldr	r0, [r7, #24]
 8010dca:	f7fe fd8d 	bl	800f8e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010dce:	69bb      	ldr	r3, [r7, #24]
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d002      	beq.n	8010de0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	2200      	movs	r2, #0
 8010dde:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010de0:	68fa      	ldr	r2, [r7, #12]
 8010de2:	490d      	ldr	r1, [pc, #52]	@ (8010e18 <f_mount+0x88>)
 8010de4:	69fb      	ldr	r3, [r7, #28]
 8010de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d002      	beq.n	8010df6 <f_mount+0x66>
 8010df0:	79fb      	ldrb	r3, [r7, #7]
 8010df2:	2b01      	cmp	r3, #1
 8010df4:	d001      	beq.n	8010dfa <f_mount+0x6a>
 8010df6:	2300      	movs	r3, #0
 8010df8:	e00a      	b.n	8010e10 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010dfa:	f107 010c 	add.w	r1, r7, #12
 8010dfe:	f107 0308 	add.w	r3, r7, #8
 8010e02:	2200      	movs	r2, #0
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7ff fd41 	bl	801088c <find_volume>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3720      	adds	r7, #32
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}
 8010e18:	240bc0f8 	.word	0x240bc0f8

08010e1c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b098      	sub	sp, #96	@ 0x60
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	60f8      	str	r0, [r7, #12]
 8010e24:	60b9      	str	r1, [r7, #8]
 8010e26:	4613      	mov	r3, r2
 8010e28:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d101      	bne.n	8010e34 <f_open+0x18>
 8010e30:	2309      	movs	r3, #9
 8010e32:	e1a9      	b.n	8011188 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010e34:	79fb      	ldrb	r3, [r7, #7]
 8010e36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010e3a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010e3c:	79fa      	ldrb	r2, [r7, #7]
 8010e3e:	f107 0110 	add.w	r1, r7, #16
 8010e42:	f107 0308 	add.w	r3, r7, #8
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7ff fd20 	bl	801088c <find_volume>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8010e52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	f040 818d 	bne.w	8011176 <f_open+0x35a>
		dj.obj.fs = fs;
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010e60:	68ba      	ldr	r2, [r7, #8]
 8010e62:	f107 0314 	add.w	r3, r7, #20
 8010e66:	4611      	mov	r1, r2
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7ff fc03 	bl	8010674 <follow_path>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010e74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d118      	bne.n	8010eae <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010e7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010e80:	b25b      	sxtb	r3, r3
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	da03      	bge.n	8010e8e <f_open+0x72>
				res = FR_INVALID_NAME;
 8010e86:	2306      	movs	r3, #6
 8010e88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010e8c:	e00f      	b.n	8010eae <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010e8e:	79fb      	ldrb	r3, [r7, #7]
 8010e90:	2b01      	cmp	r3, #1
 8010e92:	bf8c      	ite	hi
 8010e94:	2301      	movhi	r3, #1
 8010e96:	2300      	movls	r3, #0
 8010e98:	b2db      	uxtb	r3, r3
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	f107 0314 	add.w	r3, r7, #20
 8010ea0:	4611      	mov	r1, r2
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7fe fbd8 	bl	800f658 <chk_lock>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010eae:	79fb      	ldrb	r3, [r7, #7]
 8010eb0:	f003 031c 	and.w	r3, r3, #28
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d07f      	beq.n	8010fb8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8010eb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d017      	beq.n	8010ef0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010ec0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010ec4:	2b04      	cmp	r3, #4
 8010ec6:	d10e      	bne.n	8010ee6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010ec8:	f7fe fc22 	bl	800f710 <enq_lock>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d006      	beq.n	8010ee0 <f_open+0xc4>
 8010ed2:	f107 0314 	add.w	r3, r7, #20
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7ff fb06 	bl	80104e8 <dir_register>
 8010edc:	4603      	mov	r3, r0
 8010ede:	e000      	b.n	8010ee2 <f_open+0xc6>
 8010ee0:	2312      	movs	r3, #18
 8010ee2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010ee6:	79fb      	ldrb	r3, [r7, #7]
 8010ee8:	f043 0308 	orr.w	r3, r3, #8
 8010eec:	71fb      	strb	r3, [r7, #7]
 8010eee:	e010      	b.n	8010f12 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010ef0:	7ebb      	ldrb	r3, [r7, #26]
 8010ef2:	f003 0311 	and.w	r3, r3, #17
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d003      	beq.n	8010f02 <f_open+0xe6>
					res = FR_DENIED;
 8010efa:	2307      	movs	r3, #7
 8010efc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010f00:	e007      	b.n	8010f12 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010f02:	79fb      	ldrb	r3, [r7, #7]
 8010f04:	f003 0304 	and.w	r3, r3, #4
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d002      	beq.n	8010f12 <f_open+0xf6>
 8010f0c:	2308      	movs	r3, #8
 8010f0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010f12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d168      	bne.n	8010fec <f_open+0x1d0>
 8010f1a:	79fb      	ldrb	r3, [r7, #7]
 8010f1c:	f003 0308 	and.w	r3, r3, #8
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d063      	beq.n	8010fec <f_open+0x1d0>
				dw = GET_FATTIME();
 8010f24:	f7fe f864 	bl	800eff0 <get_fattime>
 8010f28:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f2c:	330e      	adds	r3, #14
 8010f2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7fe fae7 	bl	800f504 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f38:	3316      	adds	r3, #22
 8010f3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f7fe fae1 	bl	800f504 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f44:	330b      	adds	r3, #11
 8010f46:	2220      	movs	r2, #32
 8010f48:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010f4a:	693b      	ldr	r3, [r7, #16]
 8010f4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010f4e:	4611      	mov	r1, r2
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7ff fa35 	bl	80103c0 <ld_clust>
 8010f56:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010f58:	693b      	ldr	r3, [r7, #16]
 8010f5a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7ff fa4d 	bl	80103fe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f66:	331c      	adds	r3, #28
 8010f68:	2100      	movs	r1, #0
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7fe faca 	bl	800f504 <st_dword>
					fs->wflag = 1;
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	2201      	movs	r2, #1
 8010f74:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d037      	beq.n	8010fec <f_open+0x1d0>
						dw = fs->winsect;
 8010f7c:	693b      	ldr	r3, [r7, #16]
 8010f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f80:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010f82:	f107 0314 	add.w	r3, r7, #20
 8010f86:	2200      	movs	r2, #0
 8010f88:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7fe ff60 	bl	800fe50 <remove_chain>
 8010f90:	4603      	mov	r3, r0
 8010f92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8010f96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d126      	bne.n	8010fec <f_open+0x1d0>
							res = move_window(fs, dw);
 8010f9e:	693b      	ldr	r3, [r7, #16]
 8010fa0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7fe fd08 	bl	800f9b8 <move_window>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010fb2:	3a01      	subs	r2, #1
 8010fb4:	60da      	str	r2, [r3, #12]
 8010fb6:	e019      	b.n	8010fec <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010fb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d115      	bne.n	8010fec <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010fc0:	7ebb      	ldrb	r3, [r7, #26]
 8010fc2:	f003 0310 	and.w	r3, r3, #16
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d003      	beq.n	8010fd2 <f_open+0x1b6>
					res = FR_NO_FILE;
 8010fca:	2304      	movs	r3, #4
 8010fcc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010fd0:	e00c      	b.n	8010fec <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010fd2:	79fb      	ldrb	r3, [r7, #7]
 8010fd4:	f003 0302 	and.w	r3, r3, #2
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d007      	beq.n	8010fec <f_open+0x1d0>
 8010fdc:	7ebb      	ldrb	r3, [r7, #26]
 8010fde:	f003 0301 	and.w	r3, r3, #1
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d002      	beq.n	8010fec <f_open+0x1d0>
						res = FR_DENIED;
 8010fe6:	2307      	movs	r3, #7
 8010fe8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010fec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d126      	bne.n	8011042 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010ff4:	79fb      	ldrb	r3, [r7, #7]
 8010ff6:	f003 0308 	and.w	r3, r3, #8
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d003      	beq.n	8011006 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8010ffe:	79fb      	ldrb	r3, [r7, #7]
 8011000:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011004:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011006:	693b      	ldr	r3, [r7, #16]
 8011008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801100e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011014:	79fb      	ldrb	r3, [r7, #7]
 8011016:	2b01      	cmp	r3, #1
 8011018:	bf8c      	ite	hi
 801101a:	2301      	movhi	r3, #1
 801101c:	2300      	movls	r3, #0
 801101e:	b2db      	uxtb	r3, r3
 8011020:	461a      	mov	r2, r3
 8011022:	f107 0314 	add.w	r3, r7, #20
 8011026:	4611      	mov	r1, r2
 8011028:	4618      	mov	r0, r3
 801102a:	f7fe fb93 	bl	800f754 <inc_lock>
 801102e:	4602      	mov	r2, r0
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	691b      	ldr	r3, [r3, #16]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d102      	bne.n	8011042 <f_open+0x226>
 801103c:	2302      	movs	r3, #2
 801103e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011042:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011046:	2b00      	cmp	r3, #0
 8011048:	f040 8095 	bne.w	8011176 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011050:	4611      	mov	r1, r2
 8011052:	4618      	mov	r0, r3
 8011054:	f7ff f9b4 	bl	80103c0 <ld_clust>
 8011058:	4602      	mov	r2, r0
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801105e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011060:	331c      	adds	r3, #28
 8011062:	4618      	mov	r0, r3
 8011064:	f7fe fa10 	bl	800f488 <ld_dword>
 8011068:	4602      	mov	r2, r0
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	2200      	movs	r2, #0
 8011072:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011074:	693a      	ldr	r2, [r7, #16]
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	88da      	ldrh	r2, [r3, #6]
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	79fa      	ldrb	r2, [r7, #7]
 8011086:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	2200      	movs	r2, #0
 801108c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	2200      	movs	r2, #0
 8011092:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	2200      	movs	r2, #0
 8011098:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	3330      	adds	r3, #48	@ 0x30
 801109e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80110a2:	2100      	movs	r1, #0
 80110a4:	4618      	mov	r0, r3
 80110a6:	f7fe fa7a 	bl	800f59e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80110aa:	79fb      	ldrb	r3, [r7, #7]
 80110ac:	f003 0320 	and.w	r3, r3, #32
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d060      	beq.n	8011176 <f_open+0x35a>
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	68db      	ldr	r3, [r3, #12]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d05c      	beq.n	8011176 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	68da      	ldr	r2, [r3, #12]
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	895b      	ldrh	r3, [r3, #10]
 80110c8:	025b      	lsls	r3, r3, #9
 80110ca:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	689b      	ldr	r3, [r3, #8]
 80110d0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	68db      	ldr	r3, [r3, #12]
 80110d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80110d8:	e016      	b.n	8011108 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80110de:	4618      	mov	r0, r3
 80110e0:	f7fe fd25 	bl	800fb2e <get_fat>
 80110e4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80110e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80110e8:	2b01      	cmp	r3, #1
 80110ea:	d802      	bhi.n	80110f2 <f_open+0x2d6>
 80110ec:	2302      	movs	r3, #2
 80110ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80110f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80110f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110f8:	d102      	bne.n	8011100 <f_open+0x2e4>
 80110fa:	2301      	movs	r3, #1
 80110fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011100:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011104:	1ad3      	subs	r3, r2, r3
 8011106:	657b      	str	r3, [r7, #84]	@ 0x54
 8011108:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801110c:	2b00      	cmp	r3, #0
 801110e:	d103      	bne.n	8011118 <f_open+0x2fc>
 8011110:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011114:	429a      	cmp	r2, r3
 8011116:	d8e0      	bhi.n	80110da <f_open+0x2be>
				}
				fp->clust = clst;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801111c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801111e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011122:	2b00      	cmp	r3, #0
 8011124:	d127      	bne.n	8011176 <f_open+0x35a>
 8011126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801112c:	2b00      	cmp	r3, #0
 801112e:	d022      	beq.n	8011176 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011130:	693b      	ldr	r3, [r7, #16]
 8011132:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011134:	4618      	mov	r0, r3
 8011136:	f7fe fcdb 	bl	800faf0 <clust2sect>
 801113a:	6478      	str	r0, [r7, #68]	@ 0x44
 801113c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801113e:	2b00      	cmp	r3, #0
 8011140:	d103      	bne.n	801114a <f_open+0x32e>
						res = FR_INT_ERR;
 8011142:	2302      	movs	r3, #2
 8011144:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011148:	e015      	b.n	8011176 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801114a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801114c:	0a5a      	lsrs	r2, r3, #9
 801114e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011150:	441a      	add	r2, r3
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011156:	693b      	ldr	r3, [r7, #16]
 8011158:	7858      	ldrb	r0, [r3, #1]
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	6a1a      	ldr	r2, [r3, #32]
 8011164:	2301      	movs	r3, #1
 8011166:	f7fe f919 	bl	800f39c <disk_read>
 801116a:	4603      	mov	r3, r0
 801116c:	2b00      	cmp	r3, #0
 801116e:	d002      	beq.n	8011176 <f_open+0x35a>
 8011170:	2301      	movs	r3, #1
 8011172:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011176:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801117a:	2b00      	cmp	r3, #0
 801117c:	d002      	beq.n	8011184 <f_open+0x368>
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	2200      	movs	r2, #0
 8011182:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011184:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8011188:	4618      	mov	r0, r3
 801118a:	3760      	adds	r7, #96	@ 0x60
 801118c:	46bd      	mov	sp, r7
 801118e:	bd80      	pop	{r7, pc}

08011190 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b08e      	sub	sp, #56	@ 0x38
 8011194:	af00      	add	r7, sp, #0
 8011196:	60f8      	str	r0, [r7, #12]
 8011198:	60b9      	str	r1, [r7, #8]
 801119a:	607a      	str	r2, [r7, #4]
 801119c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801119e:	68bb      	ldr	r3, [r7, #8]
 80111a0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	2200      	movs	r2, #0
 80111a6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	f107 0214 	add.w	r2, r7, #20
 80111ae:	4611      	mov	r1, r2
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7ff fdb7 	bl	8010d24 <validate>
 80111b6:	4603      	mov	r3, r0
 80111b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80111bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d107      	bne.n	80111d4 <f_read+0x44>
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	7d5b      	ldrb	r3, [r3, #21]
 80111c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80111cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d002      	beq.n	80111da <f_read+0x4a>
 80111d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80111d8:	e115      	b.n	8011406 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	7d1b      	ldrb	r3, [r3, #20]
 80111de:	f003 0301 	and.w	r3, r3, #1
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d101      	bne.n	80111ea <f_read+0x5a>
 80111e6:	2307      	movs	r3, #7
 80111e8:	e10d      	b.n	8011406 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	68da      	ldr	r2, [r3, #12]
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	699b      	ldr	r3, [r3, #24]
 80111f2:	1ad3      	subs	r3, r2, r3
 80111f4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80111f6:	687a      	ldr	r2, [r7, #4]
 80111f8:	6a3b      	ldr	r3, [r7, #32]
 80111fa:	429a      	cmp	r2, r3
 80111fc:	f240 80fe 	bls.w	80113fc <f_read+0x26c>
 8011200:	6a3b      	ldr	r3, [r7, #32]
 8011202:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011204:	e0fa      	b.n	80113fc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	699b      	ldr	r3, [r3, #24]
 801120a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801120e:	2b00      	cmp	r3, #0
 8011210:	f040 80c6 	bne.w	80113a0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	699b      	ldr	r3, [r3, #24]
 8011218:	0a5b      	lsrs	r3, r3, #9
 801121a:	697a      	ldr	r2, [r7, #20]
 801121c:	8952      	ldrh	r2, [r2, #10]
 801121e:	3a01      	subs	r2, #1
 8011220:	4013      	ands	r3, r2
 8011222:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011224:	69fb      	ldr	r3, [r7, #28]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d12f      	bne.n	801128a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	699b      	ldr	r3, [r3, #24]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d103      	bne.n	801123a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	689b      	ldr	r3, [r3, #8]
 8011236:	633b      	str	r3, [r7, #48]	@ 0x30
 8011238:	e013      	b.n	8011262 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801123e:	2b00      	cmp	r3, #0
 8011240:	d007      	beq.n	8011252 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	699b      	ldr	r3, [r3, #24]
 8011246:	4619      	mov	r1, r3
 8011248:	68f8      	ldr	r0, [r7, #12]
 801124a:	f7fe fefe 	bl	801004a <clmt_clust>
 801124e:	6338      	str	r0, [r7, #48]	@ 0x30
 8011250:	e007      	b.n	8011262 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011252:	68fa      	ldr	r2, [r7, #12]
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	69db      	ldr	r3, [r3, #28]
 8011258:	4619      	mov	r1, r3
 801125a:	4610      	mov	r0, r2
 801125c:	f7fe fc67 	bl	800fb2e <get_fat>
 8011260:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011264:	2b01      	cmp	r3, #1
 8011266:	d804      	bhi.n	8011272 <f_read+0xe2>
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	2202      	movs	r2, #2
 801126c:	755a      	strb	r2, [r3, #21]
 801126e:	2302      	movs	r3, #2
 8011270:	e0c9      	b.n	8011406 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011278:	d104      	bne.n	8011284 <f_read+0xf4>
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	2201      	movs	r2, #1
 801127e:	755a      	strb	r2, [r3, #21]
 8011280:	2301      	movs	r3, #1
 8011282:	e0c0      	b.n	8011406 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011288:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801128a:	697a      	ldr	r2, [r7, #20]
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	69db      	ldr	r3, [r3, #28]
 8011290:	4619      	mov	r1, r3
 8011292:	4610      	mov	r0, r2
 8011294:	f7fe fc2c 	bl	800faf0 <clust2sect>
 8011298:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801129a:	69bb      	ldr	r3, [r7, #24]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d104      	bne.n	80112aa <f_read+0x11a>
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	2202      	movs	r2, #2
 80112a4:	755a      	strb	r2, [r3, #21]
 80112a6:	2302      	movs	r3, #2
 80112a8:	e0ad      	b.n	8011406 <f_read+0x276>
			sect += csect;
 80112aa:	69ba      	ldr	r2, [r7, #24]
 80112ac:	69fb      	ldr	r3, [r7, #28]
 80112ae:	4413      	add	r3, r2
 80112b0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	0a5b      	lsrs	r3, r3, #9
 80112b6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80112b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d039      	beq.n	8011332 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80112be:	69fa      	ldr	r2, [r7, #28]
 80112c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112c2:	4413      	add	r3, r2
 80112c4:	697a      	ldr	r2, [r7, #20]
 80112c6:	8952      	ldrh	r2, [r2, #10]
 80112c8:	4293      	cmp	r3, r2
 80112ca:	d905      	bls.n	80112d8 <f_read+0x148>
					cc = fs->csize - csect;
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	895b      	ldrh	r3, [r3, #10]
 80112d0:	461a      	mov	r2, r3
 80112d2:	69fb      	ldr	r3, [r7, #28]
 80112d4:	1ad3      	subs	r3, r2, r3
 80112d6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	7858      	ldrb	r0, [r3, #1]
 80112dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112de:	69ba      	ldr	r2, [r7, #24]
 80112e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80112e2:	f7fe f85b 	bl	800f39c <disk_read>
 80112e6:	4603      	mov	r3, r0
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d004      	beq.n	80112f6 <f_read+0x166>
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	2201      	movs	r2, #1
 80112f0:	755a      	strb	r2, [r3, #21]
 80112f2:	2301      	movs	r3, #1
 80112f4:	e087      	b.n	8011406 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	7d1b      	ldrb	r3, [r3, #20]
 80112fa:	b25b      	sxtb	r3, r3
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	da14      	bge.n	801132a <f_read+0x19a>
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	6a1a      	ldr	r2, [r3, #32]
 8011304:	69bb      	ldr	r3, [r7, #24]
 8011306:	1ad3      	subs	r3, r2, r3
 8011308:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801130a:	429a      	cmp	r2, r3
 801130c:	d90d      	bls.n	801132a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	6a1a      	ldr	r2, [r3, #32]
 8011312:	69bb      	ldr	r3, [r7, #24]
 8011314:	1ad3      	subs	r3, r2, r3
 8011316:	025b      	lsls	r3, r3, #9
 8011318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801131a:	18d0      	adds	r0, r2, r3
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	3330      	adds	r3, #48	@ 0x30
 8011320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011324:	4619      	mov	r1, r3
 8011326:	f7fe f919 	bl	800f55c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801132a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801132c:	025b      	lsls	r3, r3, #9
 801132e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8011330:	e050      	b.n	80113d4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	6a1b      	ldr	r3, [r3, #32]
 8011336:	69ba      	ldr	r2, [r7, #24]
 8011338:	429a      	cmp	r2, r3
 801133a:	d02e      	beq.n	801139a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	7d1b      	ldrb	r3, [r3, #20]
 8011340:	b25b      	sxtb	r3, r3
 8011342:	2b00      	cmp	r3, #0
 8011344:	da18      	bge.n	8011378 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	7858      	ldrb	r0, [r3, #1]
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	6a1a      	ldr	r2, [r3, #32]
 8011354:	2301      	movs	r3, #1
 8011356:	f7fe f841 	bl	800f3dc <disk_write>
 801135a:	4603      	mov	r3, r0
 801135c:	2b00      	cmp	r3, #0
 801135e:	d004      	beq.n	801136a <f_read+0x1da>
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	2201      	movs	r2, #1
 8011364:	755a      	strb	r2, [r3, #21]
 8011366:	2301      	movs	r3, #1
 8011368:	e04d      	b.n	8011406 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	7d1b      	ldrb	r3, [r3, #20]
 801136e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011372:	b2da      	uxtb	r2, r3
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	7858      	ldrb	r0, [r3, #1]
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011382:	2301      	movs	r3, #1
 8011384:	69ba      	ldr	r2, [r7, #24]
 8011386:	f7fe f809 	bl	800f39c <disk_read>
 801138a:	4603      	mov	r3, r0
 801138c:	2b00      	cmp	r3, #0
 801138e:	d004      	beq.n	801139a <f_read+0x20a>
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	2201      	movs	r2, #1
 8011394:	755a      	strb	r2, [r3, #21]
 8011396:	2301      	movs	r3, #1
 8011398:	e035      	b.n	8011406 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	69ba      	ldr	r2, [r7, #24]
 801139e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	699b      	ldr	r3, [r3, #24]
 80113a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113a8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80113ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80113ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	429a      	cmp	r2, r3
 80113b4:	d901      	bls.n	80113ba <f_read+0x22a>
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	699b      	ldr	r3, [r3, #24]
 80113c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113c8:	4413      	add	r3, r2
 80113ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80113cc:	4619      	mov	r1, r3
 80113ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80113d0:	f7fe f8c4 	bl	800f55c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80113d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80113d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113d8:	4413      	add	r3, r2
 80113da:	627b      	str	r3, [r7, #36]	@ 0x24
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	699a      	ldr	r2, [r3, #24]
 80113e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113e2:	441a      	add	r2, r3
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	619a      	str	r2, [r3, #24]
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	681a      	ldr	r2, [r3, #0]
 80113ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ee:	441a      	add	r2, r3
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	601a      	str	r2, [r3, #0]
 80113f4:	687a      	ldr	r2, [r7, #4]
 80113f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113f8:	1ad3      	subs	r3, r2, r3
 80113fa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	f47f af01 	bne.w	8011206 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011404:	2300      	movs	r3, #0
}
 8011406:	4618      	mov	r0, r3
 8011408:	3738      	adds	r7, #56	@ 0x38
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}

0801140e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801140e:	b580      	push	{r7, lr}
 8011410:	b086      	sub	sp, #24
 8011412:	af00      	add	r7, sp, #0
 8011414:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f107 0208 	add.w	r2, r7, #8
 801141c:	4611      	mov	r1, r2
 801141e:	4618      	mov	r0, r3
 8011420:	f7ff fc80 	bl	8010d24 <validate>
 8011424:	4603      	mov	r3, r0
 8011426:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011428:	7dfb      	ldrb	r3, [r7, #23]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d168      	bne.n	8011500 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	7d1b      	ldrb	r3, [r3, #20]
 8011432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011436:	2b00      	cmp	r3, #0
 8011438:	d062      	beq.n	8011500 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	7d1b      	ldrb	r3, [r3, #20]
 801143e:	b25b      	sxtb	r3, r3
 8011440:	2b00      	cmp	r3, #0
 8011442:	da15      	bge.n	8011470 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	7858      	ldrb	r0, [r3, #1]
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6a1a      	ldr	r2, [r3, #32]
 8011452:	2301      	movs	r3, #1
 8011454:	f7fd ffc2 	bl	800f3dc <disk_write>
 8011458:	4603      	mov	r3, r0
 801145a:	2b00      	cmp	r3, #0
 801145c:	d001      	beq.n	8011462 <f_sync+0x54>
 801145e:	2301      	movs	r3, #1
 8011460:	e04f      	b.n	8011502 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	7d1b      	ldrb	r3, [r3, #20]
 8011466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801146a:	b2da      	uxtb	r2, r3
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011470:	f7fd fdbe 	bl	800eff0 <get_fattime>
 8011474:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011476:	68ba      	ldr	r2, [r7, #8]
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801147c:	4619      	mov	r1, r3
 801147e:	4610      	mov	r0, r2
 8011480:	f7fe fa9a 	bl	800f9b8 <move_window>
 8011484:	4603      	mov	r3, r0
 8011486:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011488:	7dfb      	ldrb	r3, [r7, #23]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d138      	bne.n	8011500 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011492:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	330b      	adds	r3, #11
 8011498:	781a      	ldrb	r2, [r3, #0]
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	330b      	adds	r3, #11
 801149e:	f042 0220 	orr.w	r2, r2, #32
 80114a2:	b2d2      	uxtb	r2, r2
 80114a4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6818      	ldr	r0, [r3, #0]
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	689b      	ldr	r3, [r3, #8]
 80114ae:	461a      	mov	r2, r3
 80114b0:	68f9      	ldr	r1, [r7, #12]
 80114b2:	f7fe ffa4 	bl	80103fe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	f103 021c 	add.w	r2, r3, #28
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	68db      	ldr	r3, [r3, #12]
 80114c0:	4619      	mov	r1, r3
 80114c2:	4610      	mov	r0, r2
 80114c4:	f7fe f81e 	bl	800f504 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	3316      	adds	r3, #22
 80114cc:	6939      	ldr	r1, [r7, #16]
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7fe f818 	bl	800f504 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	3312      	adds	r3, #18
 80114d8:	2100      	movs	r1, #0
 80114da:	4618      	mov	r0, r3
 80114dc:	f7fd fff7 	bl	800f4ce <st_word>
					fs->wflag = 1;
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	2201      	movs	r2, #1
 80114e4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	4618      	mov	r0, r3
 80114ea:	f7fe fa93 	bl	800fa14 <sync_fs>
 80114ee:	4603      	mov	r3, r0
 80114f0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	7d1b      	ldrb	r3, [r3, #20]
 80114f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80114fa:	b2da      	uxtb	r2, r3
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011500:	7dfb      	ldrb	r3, [r7, #23]
}
 8011502:	4618      	mov	r0, r3
 8011504:	3718      	adds	r7, #24
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}

0801150a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801150a:	b580      	push	{r7, lr}
 801150c:	b084      	sub	sp, #16
 801150e:	af00      	add	r7, sp, #0
 8011510:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011512:	6878      	ldr	r0, [r7, #4]
 8011514:	f7ff ff7b 	bl	801140e <f_sync>
 8011518:	4603      	mov	r3, r0
 801151a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801151c:	7bfb      	ldrb	r3, [r7, #15]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d118      	bne.n	8011554 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f107 0208 	add.w	r2, r7, #8
 8011528:	4611      	mov	r1, r2
 801152a:	4618      	mov	r0, r3
 801152c:	f7ff fbfa 	bl	8010d24 <validate>
 8011530:	4603      	mov	r3, r0
 8011532:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011534:	7bfb      	ldrb	r3, [r7, #15]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d10c      	bne.n	8011554 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	691b      	ldr	r3, [r3, #16]
 801153e:	4618      	mov	r0, r3
 8011540:	f7fe f996 	bl	800f870 <dec_lock>
 8011544:	4603      	mov	r3, r0
 8011546:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011548:	7bfb      	ldrb	r3, [r7, #15]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d102      	bne.n	8011554 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	2200      	movs	r2, #0
 8011552:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011554:	7bfb      	ldrb	r3, [r7, #15]
}
 8011556:	4618      	mov	r0, r3
 8011558:	3710      	adds	r7, #16
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}

0801155e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801155e:	b580      	push	{r7, lr}
 8011560:	b090      	sub	sp, #64	@ 0x40
 8011562:	af00      	add	r7, sp, #0
 8011564:	6078      	str	r0, [r7, #4]
 8011566:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f107 0208 	add.w	r2, r7, #8
 801156e:	4611      	mov	r1, r2
 8011570:	4618      	mov	r0, r3
 8011572:	f7ff fbd7 	bl	8010d24 <validate>
 8011576:	4603      	mov	r3, r0
 8011578:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801157c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011580:	2b00      	cmp	r3, #0
 8011582:	d103      	bne.n	801158c <f_lseek+0x2e>
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	7d5b      	ldrb	r3, [r3, #21]
 8011588:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801158c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011590:	2b00      	cmp	r3, #0
 8011592:	d002      	beq.n	801159a <f_lseek+0x3c>
 8011594:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011598:	e1e6      	b.n	8011968 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801159e:	2b00      	cmp	r3, #0
 80115a0:	f000 80d1 	beq.w	8011746 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115aa:	d15a      	bne.n	8011662 <f_lseek+0x104>
			tbl = fp->cltbl;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115b0:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80115b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b4:	1d1a      	adds	r2, r3, #4
 80115b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	617b      	str	r3, [r7, #20]
 80115bc:	2302      	movs	r3, #2
 80115be:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	689b      	ldr	r3, [r3, #8]
 80115c4:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80115c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d03a      	beq.n	8011642 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80115cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115ce:	613b      	str	r3, [r7, #16]
 80115d0:	2300      	movs	r3, #0
 80115d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80115d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115d6:	3302      	adds	r3, #2
 80115d8:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80115da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115dc:	60fb      	str	r3, [r7, #12]
 80115de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115e0:	3301      	adds	r3, #1
 80115e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7fe faa0 	bl	800fb2e <get_fat>
 80115ee:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80115f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115f2:	2b01      	cmp	r3, #1
 80115f4:	d804      	bhi.n	8011600 <f_lseek+0xa2>
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2202      	movs	r2, #2
 80115fa:	755a      	strb	r2, [r3, #21]
 80115fc:	2302      	movs	r3, #2
 80115fe:	e1b3      	b.n	8011968 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011606:	d104      	bne.n	8011612 <f_lseek+0xb4>
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2201      	movs	r2, #1
 801160c:	755a      	strb	r2, [r3, #21]
 801160e:	2301      	movs	r3, #1
 8011610:	e1aa      	b.n	8011968 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	3301      	adds	r3, #1
 8011616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011618:	429a      	cmp	r2, r3
 801161a:	d0de      	beq.n	80115da <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801161c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	429a      	cmp	r2, r3
 8011622:	d809      	bhi.n	8011638 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8011624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011626:	1d1a      	adds	r2, r3, #4
 8011628:	627a      	str	r2, [r7, #36]	@ 0x24
 801162a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801162c:	601a      	str	r2, [r3, #0]
 801162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011630:	1d1a      	adds	r2, r3, #4
 8011632:	627a      	str	r2, [r7, #36]	@ 0x24
 8011634:	693a      	ldr	r2, [r7, #16]
 8011636:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	695b      	ldr	r3, [r3, #20]
 801163c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801163e:	429a      	cmp	r2, r3
 8011640:	d3c4      	bcc.n	80115cc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011646:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011648:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801164a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801164c:	697b      	ldr	r3, [r7, #20]
 801164e:	429a      	cmp	r2, r3
 8011650:	d803      	bhi.n	801165a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011654:	2200      	movs	r2, #0
 8011656:	601a      	str	r2, [r3, #0]
 8011658:	e184      	b.n	8011964 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801165a:	2311      	movs	r3, #17
 801165c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011660:	e180      	b.n	8011964 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	68db      	ldr	r3, [r3, #12]
 8011666:	683a      	ldr	r2, [r7, #0]
 8011668:	429a      	cmp	r2, r3
 801166a:	d902      	bls.n	8011672 <f_lseek+0x114>
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	68db      	ldr	r3, [r3, #12]
 8011670:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	683a      	ldr	r2, [r7, #0]
 8011676:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	2b00      	cmp	r3, #0
 801167c:	f000 8172 	beq.w	8011964 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	3b01      	subs	r3, #1
 8011684:	4619      	mov	r1, r3
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f7fe fcdf 	bl	801004a <clmt_clust>
 801168c:	4602      	mov	r2, r0
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011692:	68ba      	ldr	r2, [r7, #8]
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	69db      	ldr	r3, [r3, #28]
 8011698:	4619      	mov	r1, r3
 801169a:	4610      	mov	r0, r2
 801169c:	f7fe fa28 	bl	800faf0 <clust2sect>
 80116a0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80116a2:	69bb      	ldr	r3, [r7, #24]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d104      	bne.n	80116b2 <f_lseek+0x154>
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	2202      	movs	r2, #2
 80116ac:	755a      	strb	r2, [r3, #21]
 80116ae:	2302      	movs	r3, #2
 80116b0:	e15a      	b.n	8011968 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	3b01      	subs	r3, #1
 80116b6:	0a5b      	lsrs	r3, r3, #9
 80116b8:	68ba      	ldr	r2, [r7, #8]
 80116ba:	8952      	ldrh	r2, [r2, #10]
 80116bc:	3a01      	subs	r2, #1
 80116be:	4013      	ands	r3, r2
 80116c0:	69ba      	ldr	r2, [r7, #24]
 80116c2:	4413      	add	r3, r2
 80116c4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	699b      	ldr	r3, [r3, #24]
 80116ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	f000 8148 	beq.w	8011964 <f_lseek+0x406>
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	6a1b      	ldr	r3, [r3, #32]
 80116d8:	69ba      	ldr	r2, [r7, #24]
 80116da:	429a      	cmp	r2, r3
 80116dc:	f000 8142 	beq.w	8011964 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	7d1b      	ldrb	r3, [r3, #20]
 80116e4:	b25b      	sxtb	r3, r3
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	da18      	bge.n	801171c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	7858      	ldrb	r0, [r3, #1]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	6a1a      	ldr	r2, [r3, #32]
 80116f8:	2301      	movs	r3, #1
 80116fa:	f7fd fe6f 	bl	800f3dc <disk_write>
 80116fe:	4603      	mov	r3, r0
 8011700:	2b00      	cmp	r3, #0
 8011702:	d004      	beq.n	801170e <f_lseek+0x1b0>
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2201      	movs	r2, #1
 8011708:	755a      	strb	r2, [r3, #21]
 801170a:	2301      	movs	r3, #1
 801170c:	e12c      	b.n	8011968 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	7d1b      	ldrb	r3, [r3, #20]
 8011712:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011716:	b2da      	uxtb	r2, r3
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	7858      	ldrb	r0, [r3, #1]
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011726:	2301      	movs	r3, #1
 8011728:	69ba      	ldr	r2, [r7, #24]
 801172a:	f7fd fe37 	bl	800f39c <disk_read>
 801172e:	4603      	mov	r3, r0
 8011730:	2b00      	cmp	r3, #0
 8011732:	d004      	beq.n	801173e <f_lseek+0x1e0>
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2201      	movs	r2, #1
 8011738:	755a      	strb	r2, [r3, #21]
 801173a:	2301      	movs	r3, #1
 801173c:	e114      	b.n	8011968 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	69ba      	ldr	r2, [r7, #24]
 8011742:	621a      	str	r2, [r3, #32]
 8011744:	e10e      	b.n	8011964 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	68db      	ldr	r3, [r3, #12]
 801174a:	683a      	ldr	r2, [r7, #0]
 801174c:	429a      	cmp	r2, r3
 801174e:	d908      	bls.n	8011762 <f_lseek+0x204>
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	7d1b      	ldrb	r3, [r3, #20]
 8011754:	f003 0302 	and.w	r3, r3, #2
 8011758:	2b00      	cmp	r3, #0
 801175a:	d102      	bne.n	8011762 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	68db      	ldr	r3, [r3, #12]
 8011760:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	699b      	ldr	r3, [r3, #24]
 8011766:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011768:	2300      	movs	r3, #0
 801176a:	637b      	str	r3, [r7, #52]	@ 0x34
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011770:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	2b00      	cmp	r3, #0
 8011776:	f000 80a7 	beq.w	80118c8 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	895b      	ldrh	r3, [r3, #10]
 801177e:	025b      	lsls	r3, r3, #9
 8011780:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011782:	6a3b      	ldr	r3, [r7, #32]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d01b      	beq.n	80117c0 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	1e5a      	subs	r2, r3, #1
 801178c:	69fb      	ldr	r3, [r7, #28]
 801178e:	fbb2 f2f3 	udiv	r2, r2, r3
 8011792:	6a3b      	ldr	r3, [r7, #32]
 8011794:	1e59      	subs	r1, r3, #1
 8011796:	69fb      	ldr	r3, [r7, #28]
 8011798:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801179c:	429a      	cmp	r2, r3
 801179e:	d30f      	bcc.n	80117c0 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80117a0:	6a3b      	ldr	r3, [r7, #32]
 80117a2:	1e5a      	subs	r2, r3, #1
 80117a4:	69fb      	ldr	r3, [r7, #28]
 80117a6:	425b      	negs	r3, r3
 80117a8:	401a      	ands	r2, r3
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	699b      	ldr	r3, [r3, #24]
 80117b2:	683a      	ldr	r2, [r7, #0]
 80117b4:	1ad3      	subs	r3, r2, r3
 80117b6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	69db      	ldr	r3, [r3, #28]
 80117bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80117be:	e022      	b.n	8011806 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	689b      	ldr	r3, [r3, #8]
 80117c4:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80117c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d119      	bne.n	8011800 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2100      	movs	r1, #0
 80117d0:	4618      	mov	r0, r3
 80117d2:	f7fe fba2 	bl	800ff1a <create_chain>
 80117d6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80117d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117da:	2b01      	cmp	r3, #1
 80117dc:	d104      	bne.n	80117e8 <f_lseek+0x28a>
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2202      	movs	r2, #2
 80117e2:	755a      	strb	r2, [r3, #21]
 80117e4:	2302      	movs	r3, #2
 80117e6:	e0bf      	b.n	8011968 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80117e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117ee:	d104      	bne.n	80117fa <f_lseek+0x29c>
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2201      	movs	r2, #1
 80117f4:	755a      	strb	r2, [r3, #21]
 80117f6:	2301      	movs	r3, #1
 80117f8:	e0b6      	b.n	8011968 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80117fe:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011804:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011808:	2b00      	cmp	r3, #0
 801180a:	d05d      	beq.n	80118c8 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 801180c:	e03a      	b.n	8011884 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801180e:	683a      	ldr	r2, [r7, #0]
 8011810:	69fb      	ldr	r3, [r7, #28]
 8011812:	1ad3      	subs	r3, r2, r3
 8011814:	603b      	str	r3, [r7, #0]
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	699a      	ldr	r2, [r3, #24]
 801181a:	69fb      	ldr	r3, [r7, #28]
 801181c:	441a      	add	r2, r3
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	7d1b      	ldrb	r3, [r3, #20]
 8011826:	f003 0302 	and.w	r3, r3, #2
 801182a:	2b00      	cmp	r3, #0
 801182c:	d00b      	beq.n	8011846 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011832:	4618      	mov	r0, r3
 8011834:	f7fe fb71 	bl	800ff1a <create_chain>
 8011838:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801183a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801183c:	2b00      	cmp	r3, #0
 801183e:	d108      	bne.n	8011852 <f_lseek+0x2f4>
							ofs = 0; break;
 8011840:	2300      	movs	r3, #0
 8011842:	603b      	str	r3, [r7, #0]
 8011844:	e022      	b.n	801188c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801184a:	4618      	mov	r0, r3
 801184c:	f7fe f96f 	bl	800fb2e <get_fat>
 8011850:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011858:	d104      	bne.n	8011864 <f_lseek+0x306>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2201      	movs	r2, #1
 801185e:	755a      	strb	r2, [r3, #21]
 8011860:	2301      	movs	r3, #1
 8011862:	e081      	b.n	8011968 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011866:	2b01      	cmp	r3, #1
 8011868:	d904      	bls.n	8011874 <f_lseek+0x316>
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	695b      	ldr	r3, [r3, #20]
 801186e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011870:	429a      	cmp	r2, r3
 8011872:	d304      	bcc.n	801187e <f_lseek+0x320>
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2202      	movs	r2, #2
 8011878:	755a      	strb	r2, [r3, #21]
 801187a:	2302      	movs	r3, #2
 801187c:	e074      	b.n	8011968 <f_lseek+0x40a>
					fp->clust = clst;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011882:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011884:	683a      	ldr	r2, [r7, #0]
 8011886:	69fb      	ldr	r3, [r7, #28]
 8011888:	429a      	cmp	r2, r3
 801188a:	d8c0      	bhi.n	801180e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	699a      	ldr	r2, [r3, #24]
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	441a      	add	r2, r3
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d012      	beq.n	80118c8 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80118a6:	4618      	mov	r0, r3
 80118a8:	f7fe f922 	bl	800faf0 <clust2sect>
 80118ac:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80118ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d104      	bne.n	80118be <f_lseek+0x360>
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2202      	movs	r2, #2
 80118b8:	755a      	strb	r2, [r3, #21]
 80118ba:	2302      	movs	r3, #2
 80118bc:	e054      	b.n	8011968 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	0a5b      	lsrs	r3, r3, #9
 80118c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80118c4:	4413      	add	r3, r2
 80118c6:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	699a      	ldr	r2, [r3, #24]
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	68db      	ldr	r3, [r3, #12]
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d90a      	bls.n	80118ea <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	699a      	ldr	r2, [r3, #24]
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	7d1b      	ldrb	r3, [r3, #20]
 80118e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80118e4:	b2da      	uxtb	r2, r3
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	699b      	ldr	r3, [r3, #24]
 80118ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d036      	beq.n	8011964 <f_lseek+0x406>
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6a1b      	ldr	r3, [r3, #32]
 80118fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d031      	beq.n	8011964 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	7d1b      	ldrb	r3, [r3, #20]
 8011904:	b25b      	sxtb	r3, r3
 8011906:	2b00      	cmp	r3, #0
 8011908:	da18      	bge.n	801193c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801190a:	68bb      	ldr	r3, [r7, #8]
 801190c:	7858      	ldrb	r0, [r3, #1]
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6a1a      	ldr	r2, [r3, #32]
 8011918:	2301      	movs	r3, #1
 801191a:	f7fd fd5f 	bl	800f3dc <disk_write>
 801191e:	4603      	mov	r3, r0
 8011920:	2b00      	cmp	r3, #0
 8011922:	d004      	beq.n	801192e <f_lseek+0x3d0>
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2201      	movs	r2, #1
 8011928:	755a      	strb	r2, [r3, #21]
 801192a:	2301      	movs	r3, #1
 801192c:	e01c      	b.n	8011968 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	7d1b      	ldrb	r3, [r3, #20]
 8011932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011936:	b2da      	uxtb	r2, r3
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801193c:	68bb      	ldr	r3, [r7, #8]
 801193e:	7858      	ldrb	r0, [r3, #1]
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011946:	2301      	movs	r3, #1
 8011948:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801194a:	f7fd fd27 	bl	800f39c <disk_read>
 801194e:	4603      	mov	r3, r0
 8011950:	2b00      	cmp	r3, #0
 8011952:	d004      	beq.n	801195e <f_lseek+0x400>
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2201      	movs	r2, #1
 8011958:	755a      	strb	r2, [r3, #21]
 801195a:	2301      	movs	r3, #1
 801195c:	e004      	b.n	8011968 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011962:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011964:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8011968:	4618      	mov	r0, r3
 801196a:	3740      	adds	r7, #64	@ 0x40
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}

08011970 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011970:	b480      	push	{r7}
 8011972:	b087      	sub	sp, #28
 8011974:	af00      	add	r7, sp, #0
 8011976:	60f8      	str	r0, [r7, #12]
 8011978:	60b9      	str	r1, [r7, #8]
 801197a:	4613      	mov	r3, r2
 801197c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801197e:	2301      	movs	r3, #1
 8011980:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011982:	2300      	movs	r3, #0
 8011984:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011986:	4b1f      	ldr	r3, [pc, #124]	@ (8011a04 <FATFS_LinkDriverEx+0x94>)
 8011988:	7a5b      	ldrb	r3, [r3, #9]
 801198a:	b2db      	uxtb	r3, r3
 801198c:	2b00      	cmp	r3, #0
 801198e:	d131      	bne.n	80119f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011990:	4b1c      	ldr	r3, [pc, #112]	@ (8011a04 <FATFS_LinkDriverEx+0x94>)
 8011992:	7a5b      	ldrb	r3, [r3, #9]
 8011994:	b2db      	uxtb	r3, r3
 8011996:	461a      	mov	r2, r3
 8011998:	4b1a      	ldr	r3, [pc, #104]	@ (8011a04 <FATFS_LinkDriverEx+0x94>)
 801199a:	2100      	movs	r1, #0
 801199c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801199e:	4b19      	ldr	r3, [pc, #100]	@ (8011a04 <FATFS_LinkDriverEx+0x94>)
 80119a0:	7a5b      	ldrb	r3, [r3, #9]
 80119a2:	b2db      	uxtb	r3, r3
 80119a4:	4a17      	ldr	r2, [pc, #92]	@ (8011a04 <FATFS_LinkDriverEx+0x94>)
 80119a6:	009b      	lsls	r3, r3, #2
 80119a8:	4413      	add	r3, r2
 80119aa:	68fa      	ldr	r2, [r7, #12]
 80119ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80119ae:	4b15      	ldr	r3, [pc, #84]	@ (8011a04 <FATFS_LinkDriverEx+0x94>)
 80119b0:	7a5b      	ldrb	r3, [r3, #9]
 80119b2:	b2db      	uxtb	r3, r3
 80119b4:	461a      	mov	r2, r3
 80119b6:	4b13      	ldr	r3, [pc, #76]	@ (8011a04 <FATFS_LinkDriverEx+0x94>)
 80119b8:	4413      	add	r3, r2
 80119ba:	79fa      	ldrb	r2, [r7, #7]
 80119bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80119be:	4b11      	ldr	r3, [pc, #68]	@ (8011a04 <FATFS_LinkDriverEx+0x94>)
 80119c0:	7a5b      	ldrb	r3, [r3, #9]
 80119c2:	b2db      	uxtb	r3, r3
 80119c4:	1c5a      	adds	r2, r3, #1
 80119c6:	b2d1      	uxtb	r1, r2
 80119c8:	4a0e      	ldr	r2, [pc, #56]	@ (8011a04 <FATFS_LinkDriverEx+0x94>)
 80119ca:	7251      	strb	r1, [r2, #9]
 80119cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80119ce:	7dbb      	ldrb	r3, [r7, #22]
 80119d0:	3330      	adds	r3, #48	@ 0x30
 80119d2:	b2da      	uxtb	r2, r3
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	3301      	adds	r3, #1
 80119dc:	223a      	movs	r2, #58	@ 0x3a
 80119de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80119e0:	68bb      	ldr	r3, [r7, #8]
 80119e2:	3302      	adds	r3, #2
 80119e4:	222f      	movs	r2, #47	@ 0x2f
 80119e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	3303      	adds	r3, #3
 80119ec:	2200      	movs	r2, #0
 80119ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80119f0:	2300      	movs	r3, #0
 80119f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80119f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80119f6:	4618      	mov	r0, r3
 80119f8:	371c      	adds	r7, #28
 80119fa:	46bd      	mov	sp, r7
 80119fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a00:	4770      	bx	lr
 8011a02:	bf00      	nop
 8011a04:	240bc120 	.word	0x240bc120

08011a08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b082      	sub	sp, #8
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011a12:	2200      	movs	r2, #0
 8011a14:	6839      	ldr	r1, [r7, #0]
 8011a16:	6878      	ldr	r0, [r7, #4]
 8011a18:	f7ff ffaa 	bl	8011970 <FATFS_LinkDriverEx>
 8011a1c:	4603      	mov	r3, r0
}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	3708      	adds	r7, #8
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}
	...

08011a28 <sniprintf>:
 8011a28:	b40c      	push	{r2, r3}
 8011a2a:	b530      	push	{r4, r5, lr}
 8011a2c:	4b17      	ldr	r3, [pc, #92]	@ (8011a8c <sniprintf+0x64>)
 8011a2e:	1e0c      	subs	r4, r1, #0
 8011a30:	681d      	ldr	r5, [r3, #0]
 8011a32:	b09d      	sub	sp, #116	@ 0x74
 8011a34:	da08      	bge.n	8011a48 <sniprintf+0x20>
 8011a36:	238b      	movs	r3, #139	@ 0x8b
 8011a38:	602b      	str	r3, [r5, #0]
 8011a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a3e:	b01d      	add	sp, #116	@ 0x74
 8011a40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a44:	b002      	add	sp, #8
 8011a46:	4770      	bx	lr
 8011a48:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011a4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011a50:	bf14      	ite	ne
 8011a52:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011a56:	4623      	moveq	r3, r4
 8011a58:	9304      	str	r3, [sp, #16]
 8011a5a:	9307      	str	r3, [sp, #28]
 8011a5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011a60:	9002      	str	r0, [sp, #8]
 8011a62:	9006      	str	r0, [sp, #24]
 8011a64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011a68:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011a6a:	ab21      	add	r3, sp, #132	@ 0x84
 8011a6c:	a902      	add	r1, sp, #8
 8011a6e:	4628      	mov	r0, r5
 8011a70:	9301      	str	r3, [sp, #4]
 8011a72:	f000 f995 	bl	8011da0 <_svfiprintf_r>
 8011a76:	1c43      	adds	r3, r0, #1
 8011a78:	bfbc      	itt	lt
 8011a7a:	238b      	movlt	r3, #139	@ 0x8b
 8011a7c:	602b      	strlt	r3, [r5, #0]
 8011a7e:	2c00      	cmp	r4, #0
 8011a80:	d0dd      	beq.n	8011a3e <sniprintf+0x16>
 8011a82:	9b02      	ldr	r3, [sp, #8]
 8011a84:	2200      	movs	r2, #0
 8011a86:	701a      	strb	r2, [r3, #0]
 8011a88:	e7d9      	b.n	8011a3e <sniprintf+0x16>
 8011a8a:	bf00      	nop
 8011a8c:	24000018 	.word	0x24000018

08011a90 <memset>:
 8011a90:	4402      	add	r2, r0
 8011a92:	4603      	mov	r3, r0
 8011a94:	4293      	cmp	r3, r2
 8011a96:	d100      	bne.n	8011a9a <memset+0xa>
 8011a98:	4770      	bx	lr
 8011a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8011a9e:	e7f9      	b.n	8011a94 <memset+0x4>

08011aa0 <__errno>:
 8011aa0:	4b01      	ldr	r3, [pc, #4]	@ (8011aa8 <__errno+0x8>)
 8011aa2:	6818      	ldr	r0, [r3, #0]
 8011aa4:	4770      	bx	lr
 8011aa6:	bf00      	nop
 8011aa8:	24000018 	.word	0x24000018

08011aac <__libc_init_array>:
 8011aac:	b570      	push	{r4, r5, r6, lr}
 8011aae:	4d0d      	ldr	r5, [pc, #52]	@ (8011ae4 <__libc_init_array+0x38>)
 8011ab0:	4c0d      	ldr	r4, [pc, #52]	@ (8011ae8 <__libc_init_array+0x3c>)
 8011ab2:	1b64      	subs	r4, r4, r5
 8011ab4:	10a4      	asrs	r4, r4, #2
 8011ab6:	2600      	movs	r6, #0
 8011ab8:	42a6      	cmp	r6, r4
 8011aba:	d109      	bne.n	8011ad0 <__libc_init_array+0x24>
 8011abc:	4d0b      	ldr	r5, [pc, #44]	@ (8011aec <__libc_init_array+0x40>)
 8011abe:	4c0c      	ldr	r4, [pc, #48]	@ (8011af0 <__libc_init_array+0x44>)
 8011ac0:	f000 fc66 	bl	8012390 <_init>
 8011ac4:	1b64      	subs	r4, r4, r5
 8011ac6:	10a4      	asrs	r4, r4, #2
 8011ac8:	2600      	movs	r6, #0
 8011aca:	42a6      	cmp	r6, r4
 8011acc:	d105      	bne.n	8011ada <__libc_init_array+0x2e>
 8011ace:	bd70      	pop	{r4, r5, r6, pc}
 8011ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ad4:	4798      	blx	r3
 8011ad6:	3601      	adds	r6, #1
 8011ad8:	e7ee      	b.n	8011ab8 <__libc_init_array+0xc>
 8011ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ade:	4798      	blx	r3
 8011ae0:	3601      	adds	r6, #1
 8011ae2:	e7f2      	b.n	8011aca <__libc_init_array+0x1e>
 8011ae4:	080127a0 	.word	0x080127a0
 8011ae8:	080127a0 	.word	0x080127a0
 8011aec:	080127a0 	.word	0x080127a0
 8011af0:	080127a4 	.word	0x080127a4

08011af4 <__retarget_lock_acquire_recursive>:
 8011af4:	4770      	bx	lr

08011af6 <__retarget_lock_release_recursive>:
 8011af6:	4770      	bx	lr

08011af8 <_free_r>:
 8011af8:	b538      	push	{r3, r4, r5, lr}
 8011afa:	4605      	mov	r5, r0
 8011afc:	2900      	cmp	r1, #0
 8011afe:	d041      	beq.n	8011b84 <_free_r+0x8c>
 8011b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b04:	1f0c      	subs	r4, r1, #4
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	bfb8      	it	lt
 8011b0a:	18e4      	addlt	r4, r4, r3
 8011b0c:	f000 f8e0 	bl	8011cd0 <__malloc_lock>
 8011b10:	4a1d      	ldr	r2, [pc, #116]	@ (8011b88 <_free_r+0x90>)
 8011b12:	6813      	ldr	r3, [r2, #0]
 8011b14:	b933      	cbnz	r3, 8011b24 <_free_r+0x2c>
 8011b16:	6063      	str	r3, [r4, #4]
 8011b18:	6014      	str	r4, [r2, #0]
 8011b1a:	4628      	mov	r0, r5
 8011b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b20:	f000 b8dc 	b.w	8011cdc <__malloc_unlock>
 8011b24:	42a3      	cmp	r3, r4
 8011b26:	d908      	bls.n	8011b3a <_free_r+0x42>
 8011b28:	6820      	ldr	r0, [r4, #0]
 8011b2a:	1821      	adds	r1, r4, r0
 8011b2c:	428b      	cmp	r3, r1
 8011b2e:	bf01      	itttt	eq
 8011b30:	6819      	ldreq	r1, [r3, #0]
 8011b32:	685b      	ldreq	r3, [r3, #4]
 8011b34:	1809      	addeq	r1, r1, r0
 8011b36:	6021      	streq	r1, [r4, #0]
 8011b38:	e7ed      	b.n	8011b16 <_free_r+0x1e>
 8011b3a:	461a      	mov	r2, r3
 8011b3c:	685b      	ldr	r3, [r3, #4]
 8011b3e:	b10b      	cbz	r3, 8011b44 <_free_r+0x4c>
 8011b40:	42a3      	cmp	r3, r4
 8011b42:	d9fa      	bls.n	8011b3a <_free_r+0x42>
 8011b44:	6811      	ldr	r1, [r2, #0]
 8011b46:	1850      	adds	r0, r2, r1
 8011b48:	42a0      	cmp	r0, r4
 8011b4a:	d10b      	bne.n	8011b64 <_free_r+0x6c>
 8011b4c:	6820      	ldr	r0, [r4, #0]
 8011b4e:	4401      	add	r1, r0
 8011b50:	1850      	adds	r0, r2, r1
 8011b52:	4283      	cmp	r3, r0
 8011b54:	6011      	str	r1, [r2, #0]
 8011b56:	d1e0      	bne.n	8011b1a <_free_r+0x22>
 8011b58:	6818      	ldr	r0, [r3, #0]
 8011b5a:	685b      	ldr	r3, [r3, #4]
 8011b5c:	6053      	str	r3, [r2, #4]
 8011b5e:	4408      	add	r0, r1
 8011b60:	6010      	str	r0, [r2, #0]
 8011b62:	e7da      	b.n	8011b1a <_free_r+0x22>
 8011b64:	d902      	bls.n	8011b6c <_free_r+0x74>
 8011b66:	230c      	movs	r3, #12
 8011b68:	602b      	str	r3, [r5, #0]
 8011b6a:	e7d6      	b.n	8011b1a <_free_r+0x22>
 8011b6c:	6820      	ldr	r0, [r4, #0]
 8011b6e:	1821      	adds	r1, r4, r0
 8011b70:	428b      	cmp	r3, r1
 8011b72:	bf04      	itt	eq
 8011b74:	6819      	ldreq	r1, [r3, #0]
 8011b76:	685b      	ldreq	r3, [r3, #4]
 8011b78:	6063      	str	r3, [r4, #4]
 8011b7a:	bf04      	itt	eq
 8011b7c:	1809      	addeq	r1, r1, r0
 8011b7e:	6021      	streq	r1, [r4, #0]
 8011b80:	6054      	str	r4, [r2, #4]
 8011b82:	e7ca      	b.n	8011b1a <_free_r+0x22>
 8011b84:	bd38      	pop	{r3, r4, r5, pc}
 8011b86:	bf00      	nop
 8011b88:	240bc270 	.word	0x240bc270

08011b8c <sbrk_aligned>:
 8011b8c:	b570      	push	{r4, r5, r6, lr}
 8011b8e:	4e0f      	ldr	r6, [pc, #60]	@ (8011bcc <sbrk_aligned+0x40>)
 8011b90:	460c      	mov	r4, r1
 8011b92:	6831      	ldr	r1, [r6, #0]
 8011b94:	4605      	mov	r5, r0
 8011b96:	b911      	cbnz	r1, 8011b9e <sbrk_aligned+0x12>
 8011b98:	f000 fba6 	bl	80122e8 <_sbrk_r>
 8011b9c:	6030      	str	r0, [r6, #0]
 8011b9e:	4621      	mov	r1, r4
 8011ba0:	4628      	mov	r0, r5
 8011ba2:	f000 fba1 	bl	80122e8 <_sbrk_r>
 8011ba6:	1c43      	adds	r3, r0, #1
 8011ba8:	d103      	bne.n	8011bb2 <sbrk_aligned+0x26>
 8011baa:	f04f 34ff 	mov.w	r4, #4294967295
 8011bae:	4620      	mov	r0, r4
 8011bb0:	bd70      	pop	{r4, r5, r6, pc}
 8011bb2:	1cc4      	adds	r4, r0, #3
 8011bb4:	f024 0403 	bic.w	r4, r4, #3
 8011bb8:	42a0      	cmp	r0, r4
 8011bba:	d0f8      	beq.n	8011bae <sbrk_aligned+0x22>
 8011bbc:	1a21      	subs	r1, r4, r0
 8011bbe:	4628      	mov	r0, r5
 8011bc0:	f000 fb92 	bl	80122e8 <_sbrk_r>
 8011bc4:	3001      	adds	r0, #1
 8011bc6:	d1f2      	bne.n	8011bae <sbrk_aligned+0x22>
 8011bc8:	e7ef      	b.n	8011baa <sbrk_aligned+0x1e>
 8011bca:	bf00      	nop
 8011bcc:	240bc26c 	.word	0x240bc26c

08011bd0 <_malloc_r>:
 8011bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bd4:	1ccd      	adds	r5, r1, #3
 8011bd6:	f025 0503 	bic.w	r5, r5, #3
 8011bda:	3508      	adds	r5, #8
 8011bdc:	2d0c      	cmp	r5, #12
 8011bde:	bf38      	it	cc
 8011be0:	250c      	movcc	r5, #12
 8011be2:	2d00      	cmp	r5, #0
 8011be4:	4606      	mov	r6, r0
 8011be6:	db01      	blt.n	8011bec <_malloc_r+0x1c>
 8011be8:	42a9      	cmp	r1, r5
 8011bea:	d904      	bls.n	8011bf6 <_malloc_r+0x26>
 8011bec:	230c      	movs	r3, #12
 8011bee:	6033      	str	r3, [r6, #0]
 8011bf0:	2000      	movs	r0, #0
 8011bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011ccc <_malloc_r+0xfc>
 8011bfa:	f000 f869 	bl	8011cd0 <__malloc_lock>
 8011bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8011c02:	461c      	mov	r4, r3
 8011c04:	bb44      	cbnz	r4, 8011c58 <_malloc_r+0x88>
 8011c06:	4629      	mov	r1, r5
 8011c08:	4630      	mov	r0, r6
 8011c0a:	f7ff ffbf 	bl	8011b8c <sbrk_aligned>
 8011c0e:	1c43      	adds	r3, r0, #1
 8011c10:	4604      	mov	r4, r0
 8011c12:	d158      	bne.n	8011cc6 <_malloc_r+0xf6>
 8011c14:	f8d8 4000 	ldr.w	r4, [r8]
 8011c18:	4627      	mov	r7, r4
 8011c1a:	2f00      	cmp	r7, #0
 8011c1c:	d143      	bne.n	8011ca6 <_malloc_r+0xd6>
 8011c1e:	2c00      	cmp	r4, #0
 8011c20:	d04b      	beq.n	8011cba <_malloc_r+0xea>
 8011c22:	6823      	ldr	r3, [r4, #0]
 8011c24:	4639      	mov	r1, r7
 8011c26:	4630      	mov	r0, r6
 8011c28:	eb04 0903 	add.w	r9, r4, r3
 8011c2c:	f000 fb5c 	bl	80122e8 <_sbrk_r>
 8011c30:	4581      	cmp	r9, r0
 8011c32:	d142      	bne.n	8011cba <_malloc_r+0xea>
 8011c34:	6821      	ldr	r1, [r4, #0]
 8011c36:	1a6d      	subs	r5, r5, r1
 8011c38:	4629      	mov	r1, r5
 8011c3a:	4630      	mov	r0, r6
 8011c3c:	f7ff ffa6 	bl	8011b8c <sbrk_aligned>
 8011c40:	3001      	adds	r0, #1
 8011c42:	d03a      	beq.n	8011cba <_malloc_r+0xea>
 8011c44:	6823      	ldr	r3, [r4, #0]
 8011c46:	442b      	add	r3, r5
 8011c48:	6023      	str	r3, [r4, #0]
 8011c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8011c4e:	685a      	ldr	r2, [r3, #4]
 8011c50:	bb62      	cbnz	r2, 8011cac <_malloc_r+0xdc>
 8011c52:	f8c8 7000 	str.w	r7, [r8]
 8011c56:	e00f      	b.n	8011c78 <_malloc_r+0xa8>
 8011c58:	6822      	ldr	r2, [r4, #0]
 8011c5a:	1b52      	subs	r2, r2, r5
 8011c5c:	d420      	bmi.n	8011ca0 <_malloc_r+0xd0>
 8011c5e:	2a0b      	cmp	r2, #11
 8011c60:	d917      	bls.n	8011c92 <_malloc_r+0xc2>
 8011c62:	1961      	adds	r1, r4, r5
 8011c64:	42a3      	cmp	r3, r4
 8011c66:	6025      	str	r5, [r4, #0]
 8011c68:	bf18      	it	ne
 8011c6a:	6059      	strne	r1, [r3, #4]
 8011c6c:	6863      	ldr	r3, [r4, #4]
 8011c6e:	bf08      	it	eq
 8011c70:	f8c8 1000 	streq.w	r1, [r8]
 8011c74:	5162      	str	r2, [r4, r5]
 8011c76:	604b      	str	r3, [r1, #4]
 8011c78:	4630      	mov	r0, r6
 8011c7a:	f000 f82f 	bl	8011cdc <__malloc_unlock>
 8011c7e:	f104 000b 	add.w	r0, r4, #11
 8011c82:	1d23      	adds	r3, r4, #4
 8011c84:	f020 0007 	bic.w	r0, r0, #7
 8011c88:	1ac2      	subs	r2, r0, r3
 8011c8a:	bf1c      	itt	ne
 8011c8c:	1a1b      	subne	r3, r3, r0
 8011c8e:	50a3      	strne	r3, [r4, r2]
 8011c90:	e7af      	b.n	8011bf2 <_malloc_r+0x22>
 8011c92:	6862      	ldr	r2, [r4, #4]
 8011c94:	42a3      	cmp	r3, r4
 8011c96:	bf0c      	ite	eq
 8011c98:	f8c8 2000 	streq.w	r2, [r8]
 8011c9c:	605a      	strne	r2, [r3, #4]
 8011c9e:	e7eb      	b.n	8011c78 <_malloc_r+0xa8>
 8011ca0:	4623      	mov	r3, r4
 8011ca2:	6864      	ldr	r4, [r4, #4]
 8011ca4:	e7ae      	b.n	8011c04 <_malloc_r+0x34>
 8011ca6:	463c      	mov	r4, r7
 8011ca8:	687f      	ldr	r7, [r7, #4]
 8011caa:	e7b6      	b.n	8011c1a <_malloc_r+0x4a>
 8011cac:	461a      	mov	r2, r3
 8011cae:	685b      	ldr	r3, [r3, #4]
 8011cb0:	42a3      	cmp	r3, r4
 8011cb2:	d1fb      	bne.n	8011cac <_malloc_r+0xdc>
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	6053      	str	r3, [r2, #4]
 8011cb8:	e7de      	b.n	8011c78 <_malloc_r+0xa8>
 8011cba:	230c      	movs	r3, #12
 8011cbc:	6033      	str	r3, [r6, #0]
 8011cbe:	4630      	mov	r0, r6
 8011cc0:	f000 f80c 	bl	8011cdc <__malloc_unlock>
 8011cc4:	e794      	b.n	8011bf0 <_malloc_r+0x20>
 8011cc6:	6005      	str	r5, [r0, #0]
 8011cc8:	e7d6      	b.n	8011c78 <_malloc_r+0xa8>
 8011cca:	bf00      	nop
 8011ccc:	240bc270 	.word	0x240bc270

08011cd0 <__malloc_lock>:
 8011cd0:	4801      	ldr	r0, [pc, #4]	@ (8011cd8 <__malloc_lock+0x8>)
 8011cd2:	f7ff bf0f 	b.w	8011af4 <__retarget_lock_acquire_recursive>
 8011cd6:	bf00      	nop
 8011cd8:	240bc268 	.word	0x240bc268

08011cdc <__malloc_unlock>:
 8011cdc:	4801      	ldr	r0, [pc, #4]	@ (8011ce4 <__malloc_unlock+0x8>)
 8011cde:	f7ff bf0a 	b.w	8011af6 <__retarget_lock_release_recursive>
 8011ce2:	bf00      	nop
 8011ce4:	240bc268 	.word	0x240bc268

08011ce8 <__ssputs_r>:
 8011ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cec:	688e      	ldr	r6, [r1, #8]
 8011cee:	461f      	mov	r7, r3
 8011cf0:	42be      	cmp	r6, r7
 8011cf2:	680b      	ldr	r3, [r1, #0]
 8011cf4:	4682      	mov	sl, r0
 8011cf6:	460c      	mov	r4, r1
 8011cf8:	4690      	mov	r8, r2
 8011cfa:	d82d      	bhi.n	8011d58 <__ssputs_r+0x70>
 8011cfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011d00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011d04:	d026      	beq.n	8011d54 <__ssputs_r+0x6c>
 8011d06:	6965      	ldr	r5, [r4, #20]
 8011d08:	6909      	ldr	r1, [r1, #16]
 8011d0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d0e:	eba3 0901 	sub.w	r9, r3, r1
 8011d12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011d16:	1c7b      	adds	r3, r7, #1
 8011d18:	444b      	add	r3, r9
 8011d1a:	106d      	asrs	r5, r5, #1
 8011d1c:	429d      	cmp	r5, r3
 8011d1e:	bf38      	it	cc
 8011d20:	461d      	movcc	r5, r3
 8011d22:	0553      	lsls	r3, r2, #21
 8011d24:	d527      	bpl.n	8011d76 <__ssputs_r+0x8e>
 8011d26:	4629      	mov	r1, r5
 8011d28:	f7ff ff52 	bl	8011bd0 <_malloc_r>
 8011d2c:	4606      	mov	r6, r0
 8011d2e:	b360      	cbz	r0, 8011d8a <__ssputs_r+0xa2>
 8011d30:	6921      	ldr	r1, [r4, #16]
 8011d32:	464a      	mov	r2, r9
 8011d34:	f000 fae8 	bl	8012308 <memcpy>
 8011d38:	89a3      	ldrh	r3, [r4, #12]
 8011d3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d42:	81a3      	strh	r3, [r4, #12]
 8011d44:	6126      	str	r6, [r4, #16]
 8011d46:	6165      	str	r5, [r4, #20]
 8011d48:	444e      	add	r6, r9
 8011d4a:	eba5 0509 	sub.w	r5, r5, r9
 8011d4e:	6026      	str	r6, [r4, #0]
 8011d50:	60a5      	str	r5, [r4, #8]
 8011d52:	463e      	mov	r6, r7
 8011d54:	42be      	cmp	r6, r7
 8011d56:	d900      	bls.n	8011d5a <__ssputs_r+0x72>
 8011d58:	463e      	mov	r6, r7
 8011d5a:	6820      	ldr	r0, [r4, #0]
 8011d5c:	4632      	mov	r2, r6
 8011d5e:	4641      	mov	r1, r8
 8011d60:	f000 faa8 	bl	80122b4 <memmove>
 8011d64:	68a3      	ldr	r3, [r4, #8]
 8011d66:	1b9b      	subs	r3, r3, r6
 8011d68:	60a3      	str	r3, [r4, #8]
 8011d6a:	6823      	ldr	r3, [r4, #0]
 8011d6c:	4433      	add	r3, r6
 8011d6e:	6023      	str	r3, [r4, #0]
 8011d70:	2000      	movs	r0, #0
 8011d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d76:	462a      	mov	r2, r5
 8011d78:	f000 fad4 	bl	8012324 <_realloc_r>
 8011d7c:	4606      	mov	r6, r0
 8011d7e:	2800      	cmp	r0, #0
 8011d80:	d1e0      	bne.n	8011d44 <__ssputs_r+0x5c>
 8011d82:	6921      	ldr	r1, [r4, #16]
 8011d84:	4650      	mov	r0, sl
 8011d86:	f7ff feb7 	bl	8011af8 <_free_r>
 8011d8a:	230c      	movs	r3, #12
 8011d8c:	f8ca 3000 	str.w	r3, [sl]
 8011d90:	89a3      	ldrh	r3, [r4, #12]
 8011d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d96:	81a3      	strh	r3, [r4, #12]
 8011d98:	f04f 30ff 	mov.w	r0, #4294967295
 8011d9c:	e7e9      	b.n	8011d72 <__ssputs_r+0x8a>
	...

08011da0 <_svfiprintf_r>:
 8011da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011da4:	4698      	mov	r8, r3
 8011da6:	898b      	ldrh	r3, [r1, #12]
 8011da8:	061b      	lsls	r3, r3, #24
 8011daa:	b09d      	sub	sp, #116	@ 0x74
 8011dac:	4607      	mov	r7, r0
 8011dae:	460d      	mov	r5, r1
 8011db0:	4614      	mov	r4, r2
 8011db2:	d510      	bpl.n	8011dd6 <_svfiprintf_r+0x36>
 8011db4:	690b      	ldr	r3, [r1, #16]
 8011db6:	b973      	cbnz	r3, 8011dd6 <_svfiprintf_r+0x36>
 8011db8:	2140      	movs	r1, #64	@ 0x40
 8011dba:	f7ff ff09 	bl	8011bd0 <_malloc_r>
 8011dbe:	6028      	str	r0, [r5, #0]
 8011dc0:	6128      	str	r0, [r5, #16]
 8011dc2:	b930      	cbnz	r0, 8011dd2 <_svfiprintf_r+0x32>
 8011dc4:	230c      	movs	r3, #12
 8011dc6:	603b      	str	r3, [r7, #0]
 8011dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8011dcc:	b01d      	add	sp, #116	@ 0x74
 8011dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dd2:	2340      	movs	r3, #64	@ 0x40
 8011dd4:	616b      	str	r3, [r5, #20]
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8011dda:	2320      	movs	r3, #32
 8011ddc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011de0:	f8cd 800c 	str.w	r8, [sp, #12]
 8011de4:	2330      	movs	r3, #48	@ 0x30
 8011de6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011f84 <_svfiprintf_r+0x1e4>
 8011dea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011dee:	f04f 0901 	mov.w	r9, #1
 8011df2:	4623      	mov	r3, r4
 8011df4:	469a      	mov	sl, r3
 8011df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011dfa:	b10a      	cbz	r2, 8011e00 <_svfiprintf_r+0x60>
 8011dfc:	2a25      	cmp	r2, #37	@ 0x25
 8011dfe:	d1f9      	bne.n	8011df4 <_svfiprintf_r+0x54>
 8011e00:	ebba 0b04 	subs.w	fp, sl, r4
 8011e04:	d00b      	beq.n	8011e1e <_svfiprintf_r+0x7e>
 8011e06:	465b      	mov	r3, fp
 8011e08:	4622      	mov	r2, r4
 8011e0a:	4629      	mov	r1, r5
 8011e0c:	4638      	mov	r0, r7
 8011e0e:	f7ff ff6b 	bl	8011ce8 <__ssputs_r>
 8011e12:	3001      	adds	r0, #1
 8011e14:	f000 80a7 	beq.w	8011f66 <_svfiprintf_r+0x1c6>
 8011e18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e1a:	445a      	add	r2, fp
 8011e1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	f000 809f 	beq.w	8011f66 <_svfiprintf_r+0x1c6>
 8011e28:	2300      	movs	r3, #0
 8011e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8011e2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e32:	f10a 0a01 	add.w	sl, sl, #1
 8011e36:	9304      	str	r3, [sp, #16]
 8011e38:	9307      	str	r3, [sp, #28]
 8011e3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011e3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011e40:	4654      	mov	r4, sl
 8011e42:	2205      	movs	r2, #5
 8011e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e48:	484e      	ldr	r0, [pc, #312]	@ (8011f84 <_svfiprintf_r+0x1e4>)
 8011e4a:	f7ee fa51 	bl	80002f0 <memchr>
 8011e4e:	9a04      	ldr	r2, [sp, #16]
 8011e50:	b9d8      	cbnz	r0, 8011e8a <_svfiprintf_r+0xea>
 8011e52:	06d0      	lsls	r0, r2, #27
 8011e54:	bf44      	itt	mi
 8011e56:	2320      	movmi	r3, #32
 8011e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e5c:	0711      	lsls	r1, r2, #28
 8011e5e:	bf44      	itt	mi
 8011e60:	232b      	movmi	r3, #43	@ 0x2b
 8011e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e66:	f89a 3000 	ldrb.w	r3, [sl]
 8011e6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e6c:	d015      	beq.n	8011e9a <_svfiprintf_r+0xfa>
 8011e6e:	9a07      	ldr	r2, [sp, #28]
 8011e70:	4654      	mov	r4, sl
 8011e72:	2000      	movs	r0, #0
 8011e74:	f04f 0c0a 	mov.w	ip, #10
 8011e78:	4621      	mov	r1, r4
 8011e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e7e:	3b30      	subs	r3, #48	@ 0x30
 8011e80:	2b09      	cmp	r3, #9
 8011e82:	d94b      	bls.n	8011f1c <_svfiprintf_r+0x17c>
 8011e84:	b1b0      	cbz	r0, 8011eb4 <_svfiprintf_r+0x114>
 8011e86:	9207      	str	r2, [sp, #28]
 8011e88:	e014      	b.n	8011eb4 <_svfiprintf_r+0x114>
 8011e8a:	eba0 0308 	sub.w	r3, r0, r8
 8011e8e:	fa09 f303 	lsl.w	r3, r9, r3
 8011e92:	4313      	orrs	r3, r2
 8011e94:	9304      	str	r3, [sp, #16]
 8011e96:	46a2      	mov	sl, r4
 8011e98:	e7d2      	b.n	8011e40 <_svfiprintf_r+0xa0>
 8011e9a:	9b03      	ldr	r3, [sp, #12]
 8011e9c:	1d19      	adds	r1, r3, #4
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	9103      	str	r1, [sp, #12]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	bfbb      	ittet	lt
 8011ea6:	425b      	neglt	r3, r3
 8011ea8:	f042 0202 	orrlt.w	r2, r2, #2
 8011eac:	9307      	strge	r3, [sp, #28]
 8011eae:	9307      	strlt	r3, [sp, #28]
 8011eb0:	bfb8      	it	lt
 8011eb2:	9204      	strlt	r2, [sp, #16]
 8011eb4:	7823      	ldrb	r3, [r4, #0]
 8011eb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8011eb8:	d10a      	bne.n	8011ed0 <_svfiprintf_r+0x130>
 8011eba:	7863      	ldrb	r3, [r4, #1]
 8011ebc:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ebe:	d132      	bne.n	8011f26 <_svfiprintf_r+0x186>
 8011ec0:	9b03      	ldr	r3, [sp, #12]
 8011ec2:	1d1a      	adds	r2, r3, #4
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	9203      	str	r2, [sp, #12]
 8011ec8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011ecc:	3402      	adds	r4, #2
 8011ece:	9305      	str	r3, [sp, #20]
 8011ed0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011f94 <_svfiprintf_r+0x1f4>
 8011ed4:	7821      	ldrb	r1, [r4, #0]
 8011ed6:	2203      	movs	r2, #3
 8011ed8:	4650      	mov	r0, sl
 8011eda:	f7ee fa09 	bl	80002f0 <memchr>
 8011ede:	b138      	cbz	r0, 8011ef0 <_svfiprintf_r+0x150>
 8011ee0:	9b04      	ldr	r3, [sp, #16]
 8011ee2:	eba0 000a 	sub.w	r0, r0, sl
 8011ee6:	2240      	movs	r2, #64	@ 0x40
 8011ee8:	4082      	lsls	r2, r0
 8011eea:	4313      	orrs	r3, r2
 8011eec:	3401      	adds	r4, #1
 8011eee:	9304      	str	r3, [sp, #16]
 8011ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ef4:	4824      	ldr	r0, [pc, #144]	@ (8011f88 <_svfiprintf_r+0x1e8>)
 8011ef6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011efa:	2206      	movs	r2, #6
 8011efc:	f7ee f9f8 	bl	80002f0 <memchr>
 8011f00:	2800      	cmp	r0, #0
 8011f02:	d036      	beq.n	8011f72 <_svfiprintf_r+0x1d2>
 8011f04:	4b21      	ldr	r3, [pc, #132]	@ (8011f8c <_svfiprintf_r+0x1ec>)
 8011f06:	bb1b      	cbnz	r3, 8011f50 <_svfiprintf_r+0x1b0>
 8011f08:	9b03      	ldr	r3, [sp, #12]
 8011f0a:	3307      	adds	r3, #7
 8011f0c:	f023 0307 	bic.w	r3, r3, #7
 8011f10:	3308      	adds	r3, #8
 8011f12:	9303      	str	r3, [sp, #12]
 8011f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f16:	4433      	add	r3, r6
 8011f18:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f1a:	e76a      	b.n	8011df2 <_svfiprintf_r+0x52>
 8011f1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f20:	460c      	mov	r4, r1
 8011f22:	2001      	movs	r0, #1
 8011f24:	e7a8      	b.n	8011e78 <_svfiprintf_r+0xd8>
 8011f26:	2300      	movs	r3, #0
 8011f28:	3401      	adds	r4, #1
 8011f2a:	9305      	str	r3, [sp, #20]
 8011f2c:	4619      	mov	r1, r3
 8011f2e:	f04f 0c0a 	mov.w	ip, #10
 8011f32:	4620      	mov	r0, r4
 8011f34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f38:	3a30      	subs	r2, #48	@ 0x30
 8011f3a:	2a09      	cmp	r2, #9
 8011f3c:	d903      	bls.n	8011f46 <_svfiprintf_r+0x1a6>
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d0c6      	beq.n	8011ed0 <_svfiprintf_r+0x130>
 8011f42:	9105      	str	r1, [sp, #20]
 8011f44:	e7c4      	b.n	8011ed0 <_svfiprintf_r+0x130>
 8011f46:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f4a:	4604      	mov	r4, r0
 8011f4c:	2301      	movs	r3, #1
 8011f4e:	e7f0      	b.n	8011f32 <_svfiprintf_r+0x192>
 8011f50:	ab03      	add	r3, sp, #12
 8011f52:	9300      	str	r3, [sp, #0]
 8011f54:	462a      	mov	r2, r5
 8011f56:	4b0e      	ldr	r3, [pc, #56]	@ (8011f90 <_svfiprintf_r+0x1f0>)
 8011f58:	a904      	add	r1, sp, #16
 8011f5a:	4638      	mov	r0, r7
 8011f5c:	f3af 8000 	nop.w
 8011f60:	1c42      	adds	r2, r0, #1
 8011f62:	4606      	mov	r6, r0
 8011f64:	d1d6      	bne.n	8011f14 <_svfiprintf_r+0x174>
 8011f66:	89ab      	ldrh	r3, [r5, #12]
 8011f68:	065b      	lsls	r3, r3, #25
 8011f6a:	f53f af2d 	bmi.w	8011dc8 <_svfiprintf_r+0x28>
 8011f6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011f70:	e72c      	b.n	8011dcc <_svfiprintf_r+0x2c>
 8011f72:	ab03      	add	r3, sp, #12
 8011f74:	9300      	str	r3, [sp, #0]
 8011f76:	462a      	mov	r2, r5
 8011f78:	4b05      	ldr	r3, [pc, #20]	@ (8011f90 <_svfiprintf_r+0x1f0>)
 8011f7a:	a904      	add	r1, sp, #16
 8011f7c:	4638      	mov	r0, r7
 8011f7e:	f000 f879 	bl	8012074 <_printf_i>
 8011f82:	e7ed      	b.n	8011f60 <_svfiprintf_r+0x1c0>
 8011f84:	08012764 	.word	0x08012764
 8011f88:	0801276e 	.word	0x0801276e
 8011f8c:	00000000 	.word	0x00000000
 8011f90:	08011ce9 	.word	0x08011ce9
 8011f94:	0801276a 	.word	0x0801276a

08011f98 <_printf_common>:
 8011f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f9c:	4616      	mov	r6, r2
 8011f9e:	4698      	mov	r8, r3
 8011fa0:	688a      	ldr	r2, [r1, #8]
 8011fa2:	690b      	ldr	r3, [r1, #16]
 8011fa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011fa8:	4293      	cmp	r3, r2
 8011faa:	bfb8      	it	lt
 8011fac:	4613      	movlt	r3, r2
 8011fae:	6033      	str	r3, [r6, #0]
 8011fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011fb4:	4607      	mov	r7, r0
 8011fb6:	460c      	mov	r4, r1
 8011fb8:	b10a      	cbz	r2, 8011fbe <_printf_common+0x26>
 8011fba:	3301      	adds	r3, #1
 8011fbc:	6033      	str	r3, [r6, #0]
 8011fbe:	6823      	ldr	r3, [r4, #0]
 8011fc0:	0699      	lsls	r1, r3, #26
 8011fc2:	bf42      	ittt	mi
 8011fc4:	6833      	ldrmi	r3, [r6, #0]
 8011fc6:	3302      	addmi	r3, #2
 8011fc8:	6033      	strmi	r3, [r6, #0]
 8011fca:	6825      	ldr	r5, [r4, #0]
 8011fcc:	f015 0506 	ands.w	r5, r5, #6
 8011fd0:	d106      	bne.n	8011fe0 <_printf_common+0x48>
 8011fd2:	f104 0a19 	add.w	sl, r4, #25
 8011fd6:	68e3      	ldr	r3, [r4, #12]
 8011fd8:	6832      	ldr	r2, [r6, #0]
 8011fda:	1a9b      	subs	r3, r3, r2
 8011fdc:	42ab      	cmp	r3, r5
 8011fde:	dc26      	bgt.n	801202e <_printf_common+0x96>
 8011fe0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011fe4:	6822      	ldr	r2, [r4, #0]
 8011fe6:	3b00      	subs	r3, #0
 8011fe8:	bf18      	it	ne
 8011fea:	2301      	movne	r3, #1
 8011fec:	0692      	lsls	r2, r2, #26
 8011fee:	d42b      	bmi.n	8012048 <_printf_common+0xb0>
 8011ff0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011ff4:	4641      	mov	r1, r8
 8011ff6:	4638      	mov	r0, r7
 8011ff8:	47c8      	blx	r9
 8011ffa:	3001      	adds	r0, #1
 8011ffc:	d01e      	beq.n	801203c <_printf_common+0xa4>
 8011ffe:	6823      	ldr	r3, [r4, #0]
 8012000:	6922      	ldr	r2, [r4, #16]
 8012002:	f003 0306 	and.w	r3, r3, #6
 8012006:	2b04      	cmp	r3, #4
 8012008:	bf02      	ittt	eq
 801200a:	68e5      	ldreq	r5, [r4, #12]
 801200c:	6833      	ldreq	r3, [r6, #0]
 801200e:	1aed      	subeq	r5, r5, r3
 8012010:	68a3      	ldr	r3, [r4, #8]
 8012012:	bf0c      	ite	eq
 8012014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012018:	2500      	movne	r5, #0
 801201a:	4293      	cmp	r3, r2
 801201c:	bfc4      	itt	gt
 801201e:	1a9b      	subgt	r3, r3, r2
 8012020:	18ed      	addgt	r5, r5, r3
 8012022:	2600      	movs	r6, #0
 8012024:	341a      	adds	r4, #26
 8012026:	42b5      	cmp	r5, r6
 8012028:	d11a      	bne.n	8012060 <_printf_common+0xc8>
 801202a:	2000      	movs	r0, #0
 801202c:	e008      	b.n	8012040 <_printf_common+0xa8>
 801202e:	2301      	movs	r3, #1
 8012030:	4652      	mov	r2, sl
 8012032:	4641      	mov	r1, r8
 8012034:	4638      	mov	r0, r7
 8012036:	47c8      	blx	r9
 8012038:	3001      	adds	r0, #1
 801203a:	d103      	bne.n	8012044 <_printf_common+0xac>
 801203c:	f04f 30ff 	mov.w	r0, #4294967295
 8012040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012044:	3501      	adds	r5, #1
 8012046:	e7c6      	b.n	8011fd6 <_printf_common+0x3e>
 8012048:	18e1      	adds	r1, r4, r3
 801204a:	1c5a      	adds	r2, r3, #1
 801204c:	2030      	movs	r0, #48	@ 0x30
 801204e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012052:	4422      	add	r2, r4
 8012054:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012058:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801205c:	3302      	adds	r3, #2
 801205e:	e7c7      	b.n	8011ff0 <_printf_common+0x58>
 8012060:	2301      	movs	r3, #1
 8012062:	4622      	mov	r2, r4
 8012064:	4641      	mov	r1, r8
 8012066:	4638      	mov	r0, r7
 8012068:	47c8      	blx	r9
 801206a:	3001      	adds	r0, #1
 801206c:	d0e6      	beq.n	801203c <_printf_common+0xa4>
 801206e:	3601      	adds	r6, #1
 8012070:	e7d9      	b.n	8012026 <_printf_common+0x8e>
	...

08012074 <_printf_i>:
 8012074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012078:	7e0f      	ldrb	r7, [r1, #24]
 801207a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801207c:	2f78      	cmp	r7, #120	@ 0x78
 801207e:	4691      	mov	r9, r2
 8012080:	4680      	mov	r8, r0
 8012082:	460c      	mov	r4, r1
 8012084:	469a      	mov	sl, r3
 8012086:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801208a:	d807      	bhi.n	801209c <_printf_i+0x28>
 801208c:	2f62      	cmp	r7, #98	@ 0x62
 801208e:	d80a      	bhi.n	80120a6 <_printf_i+0x32>
 8012090:	2f00      	cmp	r7, #0
 8012092:	f000 80d2 	beq.w	801223a <_printf_i+0x1c6>
 8012096:	2f58      	cmp	r7, #88	@ 0x58
 8012098:	f000 80b9 	beq.w	801220e <_printf_i+0x19a>
 801209c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80120a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80120a4:	e03a      	b.n	801211c <_printf_i+0xa8>
 80120a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80120aa:	2b15      	cmp	r3, #21
 80120ac:	d8f6      	bhi.n	801209c <_printf_i+0x28>
 80120ae:	a101      	add	r1, pc, #4	@ (adr r1, 80120b4 <_printf_i+0x40>)
 80120b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80120b4:	0801210d 	.word	0x0801210d
 80120b8:	08012121 	.word	0x08012121
 80120bc:	0801209d 	.word	0x0801209d
 80120c0:	0801209d 	.word	0x0801209d
 80120c4:	0801209d 	.word	0x0801209d
 80120c8:	0801209d 	.word	0x0801209d
 80120cc:	08012121 	.word	0x08012121
 80120d0:	0801209d 	.word	0x0801209d
 80120d4:	0801209d 	.word	0x0801209d
 80120d8:	0801209d 	.word	0x0801209d
 80120dc:	0801209d 	.word	0x0801209d
 80120e0:	08012221 	.word	0x08012221
 80120e4:	0801214b 	.word	0x0801214b
 80120e8:	080121db 	.word	0x080121db
 80120ec:	0801209d 	.word	0x0801209d
 80120f0:	0801209d 	.word	0x0801209d
 80120f4:	08012243 	.word	0x08012243
 80120f8:	0801209d 	.word	0x0801209d
 80120fc:	0801214b 	.word	0x0801214b
 8012100:	0801209d 	.word	0x0801209d
 8012104:	0801209d 	.word	0x0801209d
 8012108:	080121e3 	.word	0x080121e3
 801210c:	6833      	ldr	r3, [r6, #0]
 801210e:	1d1a      	adds	r2, r3, #4
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	6032      	str	r2, [r6, #0]
 8012114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012118:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801211c:	2301      	movs	r3, #1
 801211e:	e09d      	b.n	801225c <_printf_i+0x1e8>
 8012120:	6833      	ldr	r3, [r6, #0]
 8012122:	6820      	ldr	r0, [r4, #0]
 8012124:	1d19      	adds	r1, r3, #4
 8012126:	6031      	str	r1, [r6, #0]
 8012128:	0606      	lsls	r6, r0, #24
 801212a:	d501      	bpl.n	8012130 <_printf_i+0xbc>
 801212c:	681d      	ldr	r5, [r3, #0]
 801212e:	e003      	b.n	8012138 <_printf_i+0xc4>
 8012130:	0645      	lsls	r5, r0, #25
 8012132:	d5fb      	bpl.n	801212c <_printf_i+0xb8>
 8012134:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012138:	2d00      	cmp	r5, #0
 801213a:	da03      	bge.n	8012144 <_printf_i+0xd0>
 801213c:	232d      	movs	r3, #45	@ 0x2d
 801213e:	426d      	negs	r5, r5
 8012140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012144:	4859      	ldr	r0, [pc, #356]	@ (80122ac <_printf_i+0x238>)
 8012146:	230a      	movs	r3, #10
 8012148:	e011      	b.n	801216e <_printf_i+0xfa>
 801214a:	6821      	ldr	r1, [r4, #0]
 801214c:	6833      	ldr	r3, [r6, #0]
 801214e:	0608      	lsls	r0, r1, #24
 8012150:	f853 5b04 	ldr.w	r5, [r3], #4
 8012154:	d402      	bmi.n	801215c <_printf_i+0xe8>
 8012156:	0649      	lsls	r1, r1, #25
 8012158:	bf48      	it	mi
 801215a:	b2ad      	uxthmi	r5, r5
 801215c:	2f6f      	cmp	r7, #111	@ 0x6f
 801215e:	4853      	ldr	r0, [pc, #332]	@ (80122ac <_printf_i+0x238>)
 8012160:	6033      	str	r3, [r6, #0]
 8012162:	bf14      	ite	ne
 8012164:	230a      	movne	r3, #10
 8012166:	2308      	moveq	r3, #8
 8012168:	2100      	movs	r1, #0
 801216a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801216e:	6866      	ldr	r6, [r4, #4]
 8012170:	60a6      	str	r6, [r4, #8]
 8012172:	2e00      	cmp	r6, #0
 8012174:	bfa2      	ittt	ge
 8012176:	6821      	ldrge	r1, [r4, #0]
 8012178:	f021 0104 	bicge.w	r1, r1, #4
 801217c:	6021      	strge	r1, [r4, #0]
 801217e:	b90d      	cbnz	r5, 8012184 <_printf_i+0x110>
 8012180:	2e00      	cmp	r6, #0
 8012182:	d04b      	beq.n	801221c <_printf_i+0x1a8>
 8012184:	4616      	mov	r6, r2
 8012186:	fbb5 f1f3 	udiv	r1, r5, r3
 801218a:	fb03 5711 	mls	r7, r3, r1, r5
 801218e:	5dc7      	ldrb	r7, [r0, r7]
 8012190:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012194:	462f      	mov	r7, r5
 8012196:	42bb      	cmp	r3, r7
 8012198:	460d      	mov	r5, r1
 801219a:	d9f4      	bls.n	8012186 <_printf_i+0x112>
 801219c:	2b08      	cmp	r3, #8
 801219e:	d10b      	bne.n	80121b8 <_printf_i+0x144>
 80121a0:	6823      	ldr	r3, [r4, #0]
 80121a2:	07df      	lsls	r7, r3, #31
 80121a4:	d508      	bpl.n	80121b8 <_printf_i+0x144>
 80121a6:	6923      	ldr	r3, [r4, #16]
 80121a8:	6861      	ldr	r1, [r4, #4]
 80121aa:	4299      	cmp	r1, r3
 80121ac:	bfde      	ittt	le
 80121ae:	2330      	movle	r3, #48	@ 0x30
 80121b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80121b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80121b8:	1b92      	subs	r2, r2, r6
 80121ba:	6122      	str	r2, [r4, #16]
 80121bc:	f8cd a000 	str.w	sl, [sp]
 80121c0:	464b      	mov	r3, r9
 80121c2:	aa03      	add	r2, sp, #12
 80121c4:	4621      	mov	r1, r4
 80121c6:	4640      	mov	r0, r8
 80121c8:	f7ff fee6 	bl	8011f98 <_printf_common>
 80121cc:	3001      	adds	r0, #1
 80121ce:	d14a      	bne.n	8012266 <_printf_i+0x1f2>
 80121d0:	f04f 30ff 	mov.w	r0, #4294967295
 80121d4:	b004      	add	sp, #16
 80121d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121da:	6823      	ldr	r3, [r4, #0]
 80121dc:	f043 0320 	orr.w	r3, r3, #32
 80121e0:	6023      	str	r3, [r4, #0]
 80121e2:	4833      	ldr	r0, [pc, #204]	@ (80122b0 <_printf_i+0x23c>)
 80121e4:	2778      	movs	r7, #120	@ 0x78
 80121e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80121ea:	6823      	ldr	r3, [r4, #0]
 80121ec:	6831      	ldr	r1, [r6, #0]
 80121ee:	061f      	lsls	r7, r3, #24
 80121f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80121f4:	d402      	bmi.n	80121fc <_printf_i+0x188>
 80121f6:	065f      	lsls	r7, r3, #25
 80121f8:	bf48      	it	mi
 80121fa:	b2ad      	uxthmi	r5, r5
 80121fc:	6031      	str	r1, [r6, #0]
 80121fe:	07d9      	lsls	r1, r3, #31
 8012200:	bf44      	itt	mi
 8012202:	f043 0320 	orrmi.w	r3, r3, #32
 8012206:	6023      	strmi	r3, [r4, #0]
 8012208:	b11d      	cbz	r5, 8012212 <_printf_i+0x19e>
 801220a:	2310      	movs	r3, #16
 801220c:	e7ac      	b.n	8012168 <_printf_i+0xf4>
 801220e:	4827      	ldr	r0, [pc, #156]	@ (80122ac <_printf_i+0x238>)
 8012210:	e7e9      	b.n	80121e6 <_printf_i+0x172>
 8012212:	6823      	ldr	r3, [r4, #0]
 8012214:	f023 0320 	bic.w	r3, r3, #32
 8012218:	6023      	str	r3, [r4, #0]
 801221a:	e7f6      	b.n	801220a <_printf_i+0x196>
 801221c:	4616      	mov	r6, r2
 801221e:	e7bd      	b.n	801219c <_printf_i+0x128>
 8012220:	6833      	ldr	r3, [r6, #0]
 8012222:	6825      	ldr	r5, [r4, #0]
 8012224:	6961      	ldr	r1, [r4, #20]
 8012226:	1d18      	adds	r0, r3, #4
 8012228:	6030      	str	r0, [r6, #0]
 801222a:	062e      	lsls	r6, r5, #24
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	d501      	bpl.n	8012234 <_printf_i+0x1c0>
 8012230:	6019      	str	r1, [r3, #0]
 8012232:	e002      	b.n	801223a <_printf_i+0x1c6>
 8012234:	0668      	lsls	r0, r5, #25
 8012236:	d5fb      	bpl.n	8012230 <_printf_i+0x1bc>
 8012238:	8019      	strh	r1, [r3, #0]
 801223a:	2300      	movs	r3, #0
 801223c:	6123      	str	r3, [r4, #16]
 801223e:	4616      	mov	r6, r2
 8012240:	e7bc      	b.n	80121bc <_printf_i+0x148>
 8012242:	6833      	ldr	r3, [r6, #0]
 8012244:	1d1a      	adds	r2, r3, #4
 8012246:	6032      	str	r2, [r6, #0]
 8012248:	681e      	ldr	r6, [r3, #0]
 801224a:	6862      	ldr	r2, [r4, #4]
 801224c:	2100      	movs	r1, #0
 801224e:	4630      	mov	r0, r6
 8012250:	f7ee f84e 	bl	80002f0 <memchr>
 8012254:	b108      	cbz	r0, 801225a <_printf_i+0x1e6>
 8012256:	1b80      	subs	r0, r0, r6
 8012258:	6060      	str	r0, [r4, #4]
 801225a:	6863      	ldr	r3, [r4, #4]
 801225c:	6123      	str	r3, [r4, #16]
 801225e:	2300      	movs	r3, #0
 8012260:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012264:	e7aa      	b.n	80121bc <_printf_i+0x148>
 8012266:	6923      	ldr	r3, [r4, #16]
 8012268:	4632      	mov	r2, r6
 801226a:	4649      	mov	r1, r9
 801226c:	4640      	mov	r0, r8
 801226e:	47d0      	blx	sl
 8012270:	3001      	adds	r0, #1
 8012272:	d0ad      	beq.n	80121d0 <_printf_i+0x15c>
 8012274:	6823      	ldr	r3, [r4, #0]
 8012276:	079b      	lsls	r3, r3, #30
 8012278:	d413      	bmi.n	80122a2 <_printf_i+0x22e>
 801227a:	68e0      	ldr	r0, [r4, #12]
 801227c:	9b03      	ldr	r3, [sp, #12]
 801227e:	4298      	cmp	r0, r3
 8012280:	bfb8      	it	lt
 8012282:	4618      	movlt	r0, r3
 8012284:	e7a6      	b.n	80121d4 <_printf_i+0x160>
 8012286:	2301      	movs	r3, #1
 8012288:	4632      	mov	r2, r6
 801228a:	4649      	mov	r1, r9
 801228c:	4640      	mov	r0, r8
 801228e:	47d0      	blx	sl
 8012290:	3001      	adds	r0, #1
 8012292:	d09d      	beq.n	80121d0 <_printf_i+0x15c>
 8012294:	3501      	adds	r5, #1
 8012296:	68e3      	ldr	r3, [r4, #12]
 8012298:	9903      	ldr	r1, [sp, #12]
 801229a:	1a5b      	subs	r3, r3, r1
 801229c:	42ab      	cmp	r3, r5
 801229e:	dcf2      	bgt.n	8012286 <_printf_i+0x212>
 80122a0:	e7eb      	b.n	801227a <_printf_i+0x206>
 80122a2:	2500      	movs	r5, #0
 80122a4:	f104 0619 	add.w	r6, r4, #25
 80122a8:	e7f5      	b.n	8012296 <_printf_i+0x222>
 80122aa:	bf00      	nop
 80122ac:	08012775 	.word	0x08012775
 80122b0:	08012786 	.word	0x08012786

080122b4 <memmove>:
 80122b4:	4288      	cmp	r0, r1
 80122b6:	b510      	push	{r4, lr}
 80122b8:	eb01 0402 	add.w	r4, r1, r2
 80122bc:	d902      	bls.n	80122c4 <memmove+0x10>
 80122be:	4284      	cmp	r4, r0
 80122c0:	4623      	mov	r3, r4
 80122c2:	d807      	bhi.n	80122d4 <memmove+0x20>
 80122c4:	1e43      	subs	r3, r0, #1
 80122c6:	42a1      	cmp	r1, r4
 80122c8:	d008      	beq.n	80122dc <memmove+0x28>
 80122ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80122ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80122d2:	e7f8      	b.n	80122c6 <memmove+0x12>
 80122d4:	4402      	add	r2, r0
 80122d6:	4601      	mov	r1, r0
 80122d8:	428a      	cmp	r2, r1
 80122da:	d100      	bne.n	80122de <memmove+0x2a>
 80122dc:	bd10      	pop	{r4, pc}
 80122de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80122e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80122e6:	e7f7      	b.n	80122d8 <memmove+0x24>

080122e8 <_sbrk_r>:
 80122e8:	b538      	push	{r3, r4, r5, lr}
 80122ea:	4d06      	ldr	r5, [pc, #24]	@ (8012304 <_sbrk_r+0x1c>)
 80122ec:	2300      	movs	r3, #0
 80122ee:	4604      	mov	r4, r0
 80122f0:	4608      	mov	r0, r1
 80122f2:	602b      	str	r3, [r5, #0]
 80122f4:	f7f0 fa76 	bl	80027e4 <_sbrk>
 80122f8:	1c43      	adds	r3, r0, #1
 80122fa:	d102      	bne.n	8012302 <_sbrk_r+0x1a>
 80122fc:	682b      	ldr	r3, [r5, #0]
 80122fe:	b103      	cbz	r3, 8012302 <_sbrk_r+0x1a>
 8012300:	6023      	str	r3, [r4, #0]
 8012302:	bd38      	pop	{r3, r4, r5, pc}
 8012304:	240bc264 	.word	0x240bc264

08012308 <memcpy>:
 8012308:	440a      	add	r2, r1
 801230a:	4291      	cmp	r1, r2
 801230c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012310:	d100      	bne.n	8012314 <memcpy+0xc>
 8012312:	4770      	bx	lr
 8012314:	b510      	push	{r4, lr}
 8012316:	f811 4b01 	ldrb.w	r4, [r1], #1
 801231a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801231e:	4291      	cmp	r1, r2
 8012320:	d1f9      	bne.n	8012316 <memcpy+0xe>
 8012322:	bd10      	pop	{r4, pc}

08012324 <_realloc_r>:
 8012324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012328:	4680      	mov	r8, r0
 801232a:	4615      	mov	r5, r2
 801232c:	460c      	mov	r4, r1
 801232e:	b921      	cbnz	r1, 801233a <_realloc_r+0x16>
 8012330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012334:	4611      	mov	r1, r2
 8012336:	f7ff bc4b 	b.w	8011bd0 <_malloc_r>
 801233a:	b92a      	cbnz	r2, 8012348 <_realloc_r+0x24>
 801233c:	f7ff fbdc 	bl	8011af8 <_free_r>
 8012340:	2400      	movs	r4, #0
 8012342:	4620      	mov	r0, r4
 8012344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012348:	f000 f81a 	bl	8012380 <_malloc_usable_size_r>
 801234c:	4285      	cmp	r5, r0
 801234e:	4606      	mov	r6, r0
 8012350:	d802      	bhi.n	8012358 <_realloc_r+0x34>
 8012352:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012356:	d8f4      	bhi.n	8012342 <_realloc_r+0x1e>
 8012358:	4629      	mov	r1, r5
 801235a:	4640      	mov	r0, r8
 801235c:	f7ff fc38 	bl	8011bd0 <_malloc_r>
 8012360:	4607      	mov	r7, r0
 8012362:	2800      	cmp	r0, #0
 8012364:	d0ec      	beq.n	8012340 <_realloc_r+0x1c>
 8012366:	42b5      	cmp	r5, r6
 8012368:	462a      	mov	r2, r5
 801236a:	4621      	mov	r1, r4
 801236c:	bf28      	it	cs
 801236e:	4632      	movcs	r2, r6
 8012370:	f7ff ffca 	bl	8012308 <memcpy>
 8012374:	4621      	mov	r1, r4
 8012376:	4640      	mov	r0, r8
 8012378:	f7ff fbbe 	bl	8011af8 <_free_r>
 801237c:	463c      	mov	r4, r7
 801237e:	e7e0      	b.n	8012342 <_realloc_r+0x1e>

08012380 <_malloc_usable_size_r>:
 8012380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012384:	1f18      	subs	r0, r3, #4
 8012386:	2b00      	cmp	r3, #0
 8012388:	bfbc      	itt	lt
 801238a:	580b      	ldrlt	r3, [r1, r0]
 801238c:	18c0      	addlt	r0, r0, r3
 801238e:	4770      	bx	lr

08012390 <_init>:
 8012390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012392:	bf00      	nop
 8012394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012396:	bc08      	pop	{r3}
 8012398:	469e      	mov	lr, r3
 801239a:	4770      	bx	lr

0801239c <_fini>:
 801239c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801239e:	bf00      	nop
 80123a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123a2:	bc08      	pop	{r3}
 80123a4:	469e      	mov	lr, r3
 80123a6:	4770      	bx	lr
