
digital_watch_v02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec10  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800eec0  0800eec0  0000fec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f2cc  0800f2cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f2d4  0800f2d4  000102d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f2d8  0800f2d8  000102d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800f2dc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0008a148  24000064  0800f340  00011064  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  2408a1ac  0800f340  000111ac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00011064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ba07  00000000  00000000  00011092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003de5  00000000  00000000  0002ca99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001558  00000000  00000000  00030880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000103b  00000000  00000000  00031dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000344c0  00000000  00000000  00032e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f6e4  00000000  00000000  000672d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013f0c0  00000000  00000000  000869b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c5a77  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ce4  00000000  00000000  001c5abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007d  00000000  00000000  001cb7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000064 	.word	0x24000064
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800eea8 	.word	0x0800eea8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000068 	.word	0x24000068
 80002ec:	0800eea8 	.word	0x0800eea8

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__AVI_SearchID>:
  * @param  size:
  * @param  id:
  * @retval ID
  */
uint32_t __AVI_SearchID(uint8_t* buf,  uint32_t size, uint8_t *id)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b087      	sub	sp, #28
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
 uint16_t i;
  size-=4;
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	3b04      	subs	r3, #4
 80003b0:	60bb      	str	r3, [r7, #8]
  for(i=0;i<size;i++)
 80003b2:	2300      	movs	r3, #0
 80003b4:	82fb      	strh	r3, [r7, #22]
 80003b6:	e02a      	b.n	800040e <__AVI_SearchID+0x6e>
  {
    if(buf[i] == id[0])
 80003b8:	8afb      	ldrh	r3, [r7, #22]
 80003ba:	68fa      	ldr	r2, [r7, #12]
 80003bc:	4413      	add	r3, r2
 80003be:	781a      	ldrb	r2, [r3, #0]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d11f      	bne.n	8000408 <__AVI_SearchID+0x68>
      if(buf[i+1] == id[1])
 80003c8:	8afb      	ldrh	r3, [r7, #22]
 80003ca:	3301      	adds	r3, #1
 80003cc:	68fa      	ldr	r2, [r7, #12]
 80003ce:	4413      	add	r3, r2
 80003d0:	781a      	ldrb	r2, [r3, #0]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	3301      	adds	r3, #1
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	429a      	cmp	r2, r3
 80003da:	d115      	bne.n	8000408 <__AVI_SearchID+0x68>
        if(buf[i+2] == id[2])  
 80003dc:	8afb      	ldrh	r3, [r7, #22]
 80003de:	3302      	adds	r3, #2
 80003e0:	68fa      	ldr	r2, [r7, #12]
 80003e2:	4413      	add	r3, r2
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	3302      	adds	r3, #2
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d10b      	bne.n	8000408 <__AVI_SearchID+0x68>
          if(buf[i+3] == id[3])
 80003f0:	8afb      	ldrh	r3, [r7, #22]
 80003f2:	3303      	adds	r3, #3
 80003f4:	68fa      	ldr	r2, [r7, #12]
 80003f6:	4413      	add	r3, r2
 80003f8:	781a      	ldrb	r2, [r3, #0]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3303      	adds	r3, #3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	429a      	cmp	r2, r3
 8000402:	d101      	bne.n	8000408 <__AVI_SearchID+0x68>
            return i;  
 8000404:	8afb      	ldrh	r3, [r7, #22]
 8000406:	e007      	b.n	8000418 <__AVI_SearchID+0x78>
  for(i=0;i<size;i++)
 8000408:	8afb      	ldrh	r3, [r7, #22]
 800040a:	3301      	adds	r3, #1
 800040c:	82fb      	strh	r3, [r7, #22]
 800040e:	8afb      	ldrh	r3, [r7, #22]
 8000410:	68ba      	ldr	r2, [r7, #8]
 8000412:	429a      	cmp	r2, r3
 8000414:	d8d0      	bhi.n	80003b8 <__AVI_SearchID+0x18>
  }
  return 0;    
 8000416:	2300      	movs	r3, #0
}
 8000418:	4618      	mov	r0, r3
 800041a:	371c      	adds	r7, #28
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <__AVI_GetStreamInfo>:
  * @param  havi: AVI handle
  * @param  buf:   
  * @retval AVI status
  */
AVISTATUS __AVI_GetStreamInfo( AVI_CONTEXT * pavi, uint8_t* buf)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
  
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	3302      	adds	r3, #2
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	021b      	lsls	r3, r3, #8
 8000436:	b21a      	sxth	r2, r3
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	3303      	adds	r3, #3
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	b21b      	sxth	r3, r3
 8000440:	4313      	orrs	r3, r2
 8000442:	b21b      	sxth	r3, r3
 8000444:	b29a      	uxth	r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	83da      	strh	r2, [r3, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	3304      	adds	r3, #4
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	461a      	mov	r2, r3
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	3305      	adds	r3, #5
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	021b      	lsls	r3, r3, #8
 800045a:	431a      	orrs	r2, r3
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	3306      	adds	r3, #6
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	041b      	lsls	r3, r3, #16
 8000464:	431a      	orrs	r2, r3
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	3307      	adds	r3, #7
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	061b      	lsls	r3, r3, #24
 800046e:	4313      	orrs	r3, r2
 8000470:	461a      	mov	r2, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	621a      	str	r2, [r3, #32]
  
  if(pavi->aviInfo.StreamSize%2)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	6a1b      	ldr	r3, [r3, #32]
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	2b00      	cmp	r3, #0
 8000480:	d004      	beq.n	800048c <__AVI_GetStreamInfo+0x68>
    pavi->aviInfo.StreamSize++;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	6a1b      	ldr	r3, [r3, #32]
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	621a      	str	r2, [r3, #32]
  
  if((pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG) || (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG))
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	8bdb      	ldrh	r3, [r3, #30]
 8000490:	f246 4263 	movw	r2, #25699	@ 0x6463
 8000494:	4293      	cmp	r3, r2
 8000496:	d005      	beq.n	80004a4 <__AVI_GetStreamInfo+0x80>
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	8bdb      	ldrh	r3, [r3, #30]
 800049c:	f247 7262 	movw	r2, #30562	@ 0x7762
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d101      	bne.n	80004a8 <__AVI_GetStreamInfo+0x84>
  {
    return AVI_OK;
 80004a4:	2300      	movs	r3, #0
 80004a6:	e000      	b.n	80004aa <__AVI_GetStreamInfo+0x86>
  }
  
  return AVI_STREAM_ERR;  
 80004a8:	230b      	movs	r3, #11
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
	...

080004b8 <__AVI_Init>:
  * @param  buf:
  * @param  size: AVI file size     
  * @retval AVI status
  */
AVISTATUS __AVI_Init( AVI_CONTEXT * pavi, uint8_t *buf, uint32_t size)     
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08e      	sub	sp, #56	@ 0x38
 80004bc:	af00      	add	r7, sp, #0
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	60b9      	str	r1, [r7, #8]
 80004c2:	607a      	str	r2, [r7, #4]
  uint16_t offset;
  uint8_t *tbuf;
  AVISTATUS   res = AVI_OK;
 80004c4:	2300      	movs	r3, #0
 80004c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  STRH_HEADER *strhheader; 
  
  STRF_BMPHEADER *bmpheader; 
  STRF_WAVHEADER *wavheader; 
  
  tbuf=buf;
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	633b      	str	r3, [r7, #48]	@ 0x30
  aviheader=(AVI_HEADER*)buf; 
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(aviheader->RiffID != AVI_RIFF_ID)
 80004d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a87      	ldr	r2, [pc, #540]	@ (80006f4 <__AVI_Init+0x23c>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d001      	beq.n	80004e0 <__AVI_Init+0x28>
  {
    return AVI_RIFF_ERR;
 80004dc:	2301      	movs	r3, #1
 80004de:	e170      	b.n	80007c2 <__AVI_Init+0x30a>
  }
  
  if(aviheader->AviID != AVI_AVI_ID)
 80004e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	4a84      	ldr	r2, [pc, #528]	@ (80006f8 <__AVI_Init+0x240>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d001      	beq.n	80004ee <__AVI_Init+0x36>
  {
    return AVI_AVI_ERR;  
 80004ea:	2302      	movs	r3, #2
 80004ec:	e169      	b.n	80007c2 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(AVI_HEADER);            
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	330c      	adds	r3, #12
 80004f2:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf);
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 80004f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a7f      	ldr	r2, [pc, #508]	@ (80006fc <__AVI_Init+0x244>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d001      	beq.n	8000506 <__AVI_Init+0x4e>
  {
    return AVI_LIST_ERR;
 8000502:	2303      	movs	r3, #3
 8000504:	e15d      	b.n	80007c2 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_HDRL_ID)
 8000506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	4a7d      	ldr	r2, [pc, #500]	@ (8000700 <__AVI_Init+0x248>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d001      	beq.n	8000514 <__AVI_Init+0x5c>
  {
    return AVI_HDRL_ERR;
 8000510:	2304      	movs	r3, #4
 8000512:	e156      	b.n	80007c2 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(LIST_HEADER);            
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	330c      	adds	r3, #12
 8000518:	60bb      	str	r3, [r7, #8]
  avihheader=(AVIH_HEADER*)(buf);                                   
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	627b      	str	r3, [r7, #36]	@ 0x24
  if(avihheader->BlockID != AVI_AVIH_ID)
 800051e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a78      	ldr	r2, [pc, #480]	@ (8000704 <__AVI_Init+0x24c>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d001      	beq.n	800052c <__AVI_Init+0x74>
  {
    return AVI_AVIH_ERR;
 8000528:	2305      	movs	r3, #5
 800052a:	e14a      	b.n	80007c2 <__AVI_Init+0x30a>
  }
  
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 800052c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800052e:	689a      	ldr	r2, [r3, #8]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	601a      	str	r2, [r3, #0]
  pavi->aviInfo.TotalFrame=avihheader->TotalFrame;          
 8000534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000536:	699a      	ldr	r2, [r3, #24]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	605a      	str	r2, [r3, #4]
  buf+=avihheader->BlockSize+8;            
 800053c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	3308      	adds	r3, #8
 8000542:	68ba      	ldr	r2, [r7, #8]
 8000544:	4413      	add	r3, r2
 8000546:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf); 
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800054c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a6a      	ldr	r2, [pc, #424]	@ (80006fc <__AVI_Init+0x244>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d001      	beq.n	800055a <__AVI_Init+0xa2>
  {
    return AVI_LIST_ERR;
 8000556:	2303      	movs	r3, #3
 8000558:	e133      	b.n	80007c2 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_STRL_ID)
 800055a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	4a6a      	ldr	r2, [pc, #424]	@ (8000708 <__AVI_Init+0x250>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d001      	beq.n	8000568 <__AVI_Init+0xb0>
  {
    return AVI_STRL_ERR;
 8000564:	2306      	movs	r3, #6
 8000566:	e12c      	b.n	80007c2 <__AVI_Init+0x30a>
  }
  
  strhheader=(STRH_HEADER*)(buf+12);                                
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	330c      	adds	r3, #12
 800056c:	623b      	str	r3, [r7, #32]
  if(strhheader->BlockID != AVI_STRH_ID)
 800056e:	6a3b      	ldr	r3, [r7, #32]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a66      	ldr	r2, [pc, #408]	@ (800070c <__AVI_Init+0x254>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d001      	beq.n	800057c <__AVI_Init+0xc4>
  {
    return AVI_STRH_ERR;
 8000578:	2307      	movs	r3, #7
 800057a:	e122      	b.n	80007c2 <__AVI_Init+0x30a>
  }
  
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 800057c:	6a3b      	ldr	r3, [r7, #32]
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	4a63      	ldr	r2, [pc, #396]	@ (8000710 <__AVI_Init+0x258>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d16a      	bne.n	800065c <__AVI_Init+0x1a4>
  {
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 8000586:	6a3b      	ldr	r3, [r7, #32]
 8000588:	68db      	ldr	r3, [r3, #12]
 800058a:	4a62      	ldr	r2, [pc, #392]	@ (8000714 <__AVI_Init+0x25c>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d001      	beq.n	8000594 <__AVI_Init+0xdc>
    {
      return AVI_FORMAT_ERR;
 8000590:	230a      	movs	r3, #10
 8000592:	e116      	b.n	80007c2 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 8000594:	4a60      	ldr	r2, [pc, #384]	@ (8000718 <__AVI_Init+0x260>)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 800059a:	4a60      	ldr	r2, [pc, #384]	@ (800071c <__AVI_Init+0x264>)
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	629a      	str	r2, [r3, #40]	@ 0x28
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 80005a0:	6a3b      	ldr	r3, [r7, #32]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	3314      	adds	r3, #20
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	4413      	add	r3, r2
 80005aa:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 80005ac:	69bb      	ldr	r3, [r7, #24]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a5b      	ldr	r2, [pc, #364]	@ (8000720 <__AVI_Init+0x268>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d001      	beq.n	80005ba <__AVI_Init+0x102>
    {
      return AVI_STRF_ERR;
 80005b6:	2308      	movs	r3, #8
 80005b8:	e103      	b.n	80007c2 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 80005ba:	69bb      	ldr	r3, [r7, #24]
 80005bc:	68da      	ldr	r2, [r3, #12]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height; 
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	691a      	ldr	r2, [r3, #16]
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	611a      	str	r2, [r3, #16]
    buf+=listheader->BlockSize+8;          
 80005ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	3308      	adds	r3, #8
 80005d0:	68ba      	ldr	r2, [r7, #8]
 80005d2:	4413      	add	r3, r2
 80005d4:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 80005da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a47      	ldr	r2, [pc, #284]	@ (80006fc <__AVI_Init+0x244>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d009      	beq.n	80005f8 <__AVI_Init+0x140>
    {
      pavi->aviInfo.SampleRate=0;          
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=0;          
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2200      	movs	r2, #0
 80005ee:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=0;          
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2200      	movs	r2, #0
 80005f4:	839a      	strh	r2, [r3, #28]
 80005f6:	e0b7      	b.n	8000768 <__AVI_Init+0x2b0>
      
    }else
    {      
      if(listheader->ListType != AVI_STRL_ID)
 80005f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	4a42      	ldr	r2, [pc, #264]	@ (8000708 <__AVI_Init+0x250>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d001      	beq.n	8000606 <__AVI_Init+0x14e>
      {
        return AVI_STRL_ERR;    
 8000602:	2306      	movs	r3, #6
 8000604:	e0dd      	b.n	80007c2 <__AVI_Init+0x30a>
      }
      
      strhheader=(STRH_HEADER*)(buf+12);
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	330c      	adds	r3, #12
 800060a:	623b      	str	r3, [r7, #32]
      if(strhheader->BlockID != AVI_STRH_ID)
 800060c:	6a3b      	ldr	r3, [r7, #32]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a3e      	ldr	r2, [pc, #248]	@ (800070c <__AVI_Init+0x254>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d001      	beq.n	800061a <__AVI_Init+0x162>
      {
        return AVI_STRH_ERR;
 8000616:	2307      	movs	r3, #7
 8000618:	e0d3      	b.n	80007c2 <__AVI_Init+0x30a>
      }
      
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 800061a:	6a3b      	ldr	r3, [r7, #32]
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	4a41      	ldr	r2, [pc, #260]	@ (8000724 <__AVI_Init+0x26c>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d001      	beq.n	8000628 <__AVI_Init+0x170>
      {
        return AVI_FORMAT_ERR;
 8000624:	230a      	movs	r3, #10
 8000626:	e0cc      	b.n	80007c2 <__AVI_Init+0x30a>
      }
      
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 8000628:	6a3b      	ldr	r3, [r7, #32]
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	3314      	adds	r3, #20
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	4413      	add	r3, r2
 8000632:	61fb      	str	r3, [r7, #28]
      if(wavheader->BlockID != AVI_STRF_ID)
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a39      	ldr	r2, [pc, #228]	@ (8000720 <__AVI_Init+0x268>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d001      	beq.n	8000642 <__AVI_Init+0x18a>
      {
        return AVI_STRF_ERR;
 800063e:	2308      	movs	r3, #8
 8000640:	e0bf      	b.n	80007c2 <__AVI_Init+0x30a>
      }
      
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	68da      	ldr	r2, [r3, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	895a      	ldrh	r2, [r3, #10]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	891a      	ldrh	r2, [r3, #8]
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	839a      	strh	r2, [r3, #28]
 800065a:	e085      	b.n	8000768 <__AVI_Init+0x2b0>
    }
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 800065c:	6a3b      	ldr	r3, [r7, #32]
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	4a30      	ldr	r2, [pc, #192]	@ (8000724 <__AVI_Init+0x26c>)
 8000662:	4293      	cmp	r3, r2
 8000664:	f040 8080 	bne.w	8000768 <__AVI_Init+0x2b0>
  { 
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 8000668:	4a2f      	ldr	r2, [pc, #188]	@ (8000728 <__AVI_Init+0x270>)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 800066e:	4a2f      	ldr	r2, [pc, #188]	@ (800072c <__AVI_Init+0x274>)
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	629a      	str	r2, [r3, #40]	@ 0x28
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 8000674:	6a3b      	ldr	r3, [r7, #32]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	3314      	adds	r3, #20
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	4413      	add	r3, r2
 800067e:	61fb      	str	r3, [r7, #28]
    if(wavheader->BlockID != AVI_STRF_ID)
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a26      	ldr	r2, [pc, #152]	@ (8000720 <__AVI_Init+0x268>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d001      	beq.n	800068e <__AVI_Init+0x1d6>
    {
      return AVI_STRF_ERR;
 800068a:	2308      	movs	r3, #8
 800068c:	e099      	b.n	80007c2 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	615a      	str	r2, [r3, #20]
    pavi->aviInfo.Channels=wavheader->Channels;        
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	895a      	ldrh	r2, [r3, #10]
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	831a      	strh	r2, [r3, #24]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	891a      	ldrh	r2, [r3, #8]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	839a      	strh	r2, [r3, #28]
    buf+=listheader->BlockSize+8;          
 80006a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	3308      	adds	r3, #8
 80006ac:	68ba      	ldr	r2, [r7, #8]
 80006ae:	4413      	add	r3, r2
 80006b0:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 80006b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a10      	ldr	r2, [pc, #64]	@ (80006fc <__AVI_Init+0x244>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d001      	beq.n	80006c4 <__AVI_Init+0x20c>
    {
      return AVI_LIST_ERR;  
 80006c0:	2303      	movs	r3, #3
 80006c2:	e07e      	b.n	80007c2 <__AVI_Init+0x30a>
    }
    
    if(listheader->ListType != AVI_STRL_ID)
 80006c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000708 <__AVI_Init+0x250>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d001      	beq.n	80006d2 <__AVI_Init+0x21a>
    {
      return AVI_STRL_ERR;  
 80006ce:	2306      	movs	r3, #6
 80006d0:	e077      	b.n	80007c2 <__AVI_Init+0x30a>
    }
    
    strhheader=(STRH_HEADER*)(buf+12);
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	330c      	adds	r3, #12
 80006d6:	623b      	str	r3, [r7, #32]
    if(strhheader->BlockID != AVI_STRH_ID)
 80006d8:	6a3b      	ldr	r3, [r7, #32]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a0b      	ldr	r2, [pc, #44]	@ (800070c <__AVI_Init+0x254>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d001      	beq.n	80006e6 <__AVI_Init+0x22e>
    {
      return AVI_STRH_ERR;
 80006e2:	2307      	movs	r3, #7
 80006e4:	e06d      	b.n	80007c2 <__AVI_Init+0x30a>
    }
    
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 80006e6:	6a3b      	ldr	r3, [r7, #32]
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	4a09      	ldr	r2, [pc, #36]	@ (8000710 <__AVI_Init+0x258>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d01f      	beq.n	8000730 <__AVI_Init+0x278>
    {
      return AVI_FORMAT_ERR;
 80006f0:	230a      	movs	r3, #10
 80006f2:	e066      	b.n	80007c2 <__AVI_Init+0x30a>
 80006f4:	46464952 	.word	0x46464952
 80006f8:	20495641 	.word	0x20495641
 80006fc:	5453494c 	.word	0x5453494c
 8000700:	6c726468 	.word	0x6c726468
 8000704:	68697661 	.word	0x68697661
 8000708:	6c727473 	.word	0x6c727473
 800070c:	68727473 	.word	0x68727473
 8000710:	73646976 	.word	0x73646976
 8000714:	47504a4d 	.word	0x47504a4d
 8000718:	0800eec0 	.word	0x0800eec0
 800071c:	0800eed8 	.word	0x0800eed8
 8000720:	66727473 	.word	0x66727473
 8000724:	73647561 	.word	0x73647561
 8000728:	0800eec8 	.word	0x0800eec8
 800072c:	0800eed0 	.word	0x0800eed0
    }
    
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 8000730:	6a3b      	ldr	r3, [r7, #32]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	3314      	adds	r3, #20
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	4413      	add	r3, r2
 800073a:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a22      	ldr	r2, [pc, #136]	@ (80007cc <__AVI_Init+0x314>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d001      	beq.n	800074a <__AVI_Init+0x292>
    {
      return AVI_STRF_ERR;  
 8000746:	2308      	movs	r3, #8
 8000748:	e03b      	b.n	80007c2 <__AVI_Init+0x30a>
    }
    
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	4a20      	ldr	r2, [pc, #128]	@ (80007d0 <__AVI_Init+0x318>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d001      	beq.n	8000758 <__AVI_Init+0x2a0>
    {
      return AVI_FORMAT_ERR;
 8000754:	230a      	movs	r3, #10
 8000756:	e034      	b.n	80007c2 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	68da      	ldr	r2, [r3, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height;   
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	691a      	ldr	r2, [r3, #16]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	611a      	str	r2, [r3, #16]
  }
  offset= __AVI_SearchID(tbuf,size,(uint8_t*)"movi");
 8000768:	4a1a      	ldr	r2, [pc, #104]	@ (80007d4 <__AVI_Init+0x31c>)
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800076e:	f7ff fe17 	bl	80003a0 <__AVI_SearchID>
 8000772:	4603      	mov	r3, r0
 8000774:	82fb      	strh	r3, [r7, #22]
  if(offset == 0)
 8000776:	8afb      	ldrh	r3, [r7, #22]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d101      	bne.n	8000780 <__AVI_Init+0x2c8>
  {
    return AVI_MOVI_ERR;
 800077c:	2309      	movs	r3, #9
 800077e:	e020      	b.n	80007c2 <__AVI_Init+0x30a>
  }
  
  if(pavi->aviInfo.SampleRate)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d01a      	beq.n	80007be <__AVI_Init+0x306>
  {
    tbuf+=offset;
 8000788:	8afb      	ldrh	r3, [r7, #22]
 800078a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800078c:	4413      	add	r3, r2
 800078e:	633b      	str	r3, [r7, #48]	@ 0x30
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000794:	461a      	mov	r2, r3
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800079a:	f7ff fe01 	bl	80003a0 <__AVI_SearchID>
 800079e:	4603      	mov	r3, r0
 80007a0:	82fb      	strh	r3, [r7, #22]
    if(offset == 0)
 80007a2:	8afb      	ldrh	r3, [r7, #22]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d101      	bne.n	80007ac <__AVI_Init+0x2f4>
    {
      return AVI_STREAM_ERR;
 80007a8:	230b      	movs	r3, #11
 80007aa:	e00a      	b.n	80007c2 <__AVI_Init+0x30a>
    }
    
    tbuf+=offset+4;
 80007ac:	8afb      	ldrh	r3, [r7, #22]
 80007ae:	3304      	adds	r3, #4
 80007b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80007b2:	4413      	add	r3, r2
 80007b4:	633b      	str	r3, [r7, #48]	@ 0x30
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 80007b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007b8:	881a      	ldrh	r2, [r3, #0]
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	835a      	strh	r2, [r3, #26]
  }
  
  return res;
 80007be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3738      	adds	r7, #56	@ 0x38
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	66727473 	.word	0x66727473
 80007d0:	47504a4d 	.word	0x47504a4d
 80007d4:	0800eee0 	.word	0x0800eee0

080007d8 <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT * pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
 80007e4:	603b      	str	r3, [r7, #0]
  uint32_t readSize= 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  
  pavi->pVideoBuffer = pVideoBuffer;
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	635a      	str	r2, [r3, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	639a      	str	r2, [r3, #56]	@ 0x38

  pavi->pAudioBuffer = pAudioBuffer;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	6a3a      	ldr	r2, [r7, #32]
 80007fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  pavi->AudioBufferSize = AudioBufferSize;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000800:	641a      	str	r2, [r3, #64]	@ 0x40
  
  f_lseek(file, 0 );
 8000802:	2100      	movs	r1, #0
 8000804:	68b8      	ldr	r0, [r7, #8]
 8000806:	f00d fc35 	bl	800e074 <f_lseek>
  
  f_read(file, pavi->pVideoBuffer, VideoBufferSize,(UINT*) &readSize );
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	683a      	ldr	r2, [r7, #0]
 8000814:	68b8      	ldr	r0, [r7, #8]
 8000816:	f00d f8d1 	bl	800d9bc <f_read>
  if(readSize != VideoBufferSize)
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	683a      	ldr	r2, [r7, #0]
 800081e:	429a      	cmp	r2, r3
 8000820:	d001      	beq.n	8000826 <AVI_ParserInit+0x4e>
  {
    return 1;
 8000822:	2301      	movs	r3, #1
 8000824:	e013      	b.n	800084e <AVI_ParserInit+0x76>
  }
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800082a:	683a      	ldr	r2, [r7, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	68f8      	ldr	r0, [r7, #12]
 8000830:	f7ff fe42 	bl	80004b8 <__AVI_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <AVI_ParserInit+0x66>
  {
    return 1;    
 800083a:	2301      	movs	r3, #1
 800083c:	e007      	b.n	800084e <AVI_ParserInit+0x76>
  }

  pavi->FileSize= f_size(file);
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	68da      	ldr	r2, [r3, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	645a      	str	r2, [r3, #68]	@ 0x44
  pavi->CurrentImage=0;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2200      	movs	r2, #0
 800084a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  return  0;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT * pavi, FIL *file, uint8_t skipFlag)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	4613      	mov	r3, r2
 8000864:	71fb      	strb	r3, [r7, #7]
  uint32_t  offset ;
  uint32_t readSize = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  
  if(pavi->CurrentImage== 0 )
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800086e:	2b00      	cmp	r3, #0
 8000870:	d124      	bne.n	80008bc <AVI_GetFrame+0x64>
  {
    
    f_lseek(file, 0 ); /* Go to the file start */
 8000872:	2100      	movs	r1, #0
 8000874:	68b8      	ldr	r0, [r7, #8]
 8000876:	f00d fbfd 	bl	800e074 <f_lseek>
    /* Read data*/
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000882:	f107 0310 	add.w	r3, r7, #16
 8000886:	68b8      	ldr	r0, [r7, #8]
 8000888:	f00d f898 	bl	800d9bc <f_read>
    
    /* Check for "movi" tag */
    offset = __AVI_SearchID(pavi->pVideoBuffer,pavi->VideoBufferSize,(uint8_t*)"movi");
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000894:	4a49      	ldr	r2, [pc, #292]	@ (80009bc <AVI_GetFrame+0x164>)
 8000896:	4619      	mov	r1, r3
 8000898:	f7ff fd82 	bl	80003a0 <__AVI_SearchID>
 800089c:	6178      	str	r0, [r7, #20]
    /* Read first Frame info*/
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	3304      	adds	r3, #4
 80008a6:	4413      	add	r3, r2
 80008a8:	4619      	mov	r1, r3
 80008aa:	68f8      	ldr	r0, [r7, #12]
 80008ac:	f7ff fdba 	bl	8000424 <__AVI_GetStreamInfo>
    /* go to the first frame offset in the avi file*/
    f_lseek(file, offset + 12 );
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	330c      	adds	r3, #12
 80008b4:	4619      	mov	r1, r3
 80008b6:	68b8      	ldr	r0, [r7, #8]
 80008b8:	f00d fbdc 	bl	800e074 <f_lseek>
    
  }

  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	8bdb      	ldrh	r3, [r3, #30]
 80008c0:	f246 4263 	movw	r2, #25699	@ 0x6463
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d158      	bne.n	800097a <AVI_GetFrame+0x122>
  {
    /* the Frame is a Video Frame */
       
	if(skipFlag == 1)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d11b      	bne.n	8000906 <AVI_GetFrame+0xae>
	{

		/* Get the current frame size */
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	6a1a      	ldr	r2, [r3, #32]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	631a      	str	r2, [r3, #48]	@ 0x30

		f_lseek(file, f_tell(file) + pavi->FrameSize);
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	699a      	ldr	r2, [r3, #24]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4413      	add	r3, r2
 80008e0:	4619      	mov	r1, r3
 80008e2:	68b8      	ldr	r0, [r7, #8]
 80008e4:	f00d fbc6 	bl	800e074 <f_lseek>

	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	2208      	movs	r2, #8
 80008f2:	68b8      	ldr	r0, [r7, #8]
 80008f4:	f00d f862 	bl	800d9bc <f_read>

	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008fc:	4619      	mov	r1, r3
 80008fe:	68f8      	ldr	r0, [r7, #12]
 8000900:	f7ff fd90 	bl	8000424 <__AVI_GetStreamInfo>
 8000904:	e037      	b.n	8000976 <AVI_GetFrame+0x11e>

	}
	else if(skipFlag == 2)
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d11c      	bne.n	8000946 <AVI_GetFrame+0xee>
	{

		f_lseek(file, f_tell(file) - pavi->FrameSize - 8 - 8);
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	699a      	ldr	r2, [r3, #24]
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	3b10      	subs	r3, #16
 8000918:	4619      	mov	r1, r3
 800091a:	68b8      	ldr	r0, [r7, #8]
 800091c:	f00d fbaa 	bl	800e074 <f_lseek>

	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	2208      	movs	r2, #8
 800092a:	68b8      	ldr	r0, [r7, #8]
 800092c:	f00d f846 	bl	800d9bc <f_read>

	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000934:	4619      	mov	r1, r3
 8000936:	68f8      	ldr	r0, [r7, #12]
 8000938:	f7ff fd74 	bl	8000424 <__AVI_GetStreamInfo>

		// Get the previous frame size
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	6a1a      	ldr	r2, [r3, #32]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	631a      	str	r2, [r3, #48]	@ 0x30
 8000944:	e017      	b.n	8000976 <AVI_GetFrame+0x11e>
	}
	else
	{

		/* Get the current frame size */
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	6a1a      	ldr	r2, [r3, #32]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Read The current frame + the header of the next frame (8 bytes) */
		f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	f103 0208 	add.w	r2, r3, #8
 800095a:	f107 0310 	add.w	r3, r7, #16
 800095e:	68b8      	ldr	r0, [r7, #8]
 8000960:	f00d f82c 	bl	800d9bc <f_read>

		/* Get the info of the next frame */
		__AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	6a1b      	ldr	r3, [r3, #32]
 800096c:	4413      	add	r3, r2
 800096e:	4619      	mov	r1, r3
 8000970:	68f8      	ldr	r0, [r7, #12]
 8000972:	f7ff fd57 	bl	8000424 <__AVI_GetStreamInfo>
    	/* Return VIDEO frame */

	}
    
    return AVI_VIDEO_FRAME;
 8000976:	2301      	movs	r3, #1
 8000978:	e01c      	b.n	80009b4 <AVI_GetFrame+0x15c>
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	8bdb      	ldrh	r3, [r3, #30]
 800097e:	f247 7262 	movw	r2, #30562	@ 0x7762
 8000982:	4293      	cmp	r3, r2
 8000984:	d115      	bne.n	80009b2 <AVI_GetFrame+0x15a>
  { /* the Frame is an Audio Frame */
    
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	f103 0208 	add.w	r2, r3, #8
 8000992:	f107 0310 	add.w	r3, r7, #16
 8000996:	68b8      	ldr	r0, [r7, #8]
 8000998:	f00d f810 	bl	800d9bc <f_read>

    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	6a1b      	ldr	r3, [r3, #32]
 80009a4:	4413      	add	r3, r2
 80009a6:	4619      	mov	r1, r3
 80009a8:	68f8      	ldr	r0, [r7, #12]
 80009aa:	f7ff fd3b 	bl	8000424 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
 80009ae:	2302      	movs	r3, #2
 80009b0:	e000      	b.n	80009b4 <AVI_GetFrame+0x15c>
    
  }
  
  return 0;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	0800eee0 	.word	0x0800eee0

080009c0 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d105      	bne.n	80009dc <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2104      	movs	r1, #4
 80009d4:	4806      	ldr	r0, [pc, #24]	@ (80009f0 <GC9A01_set_reset+0x30>)
 80009d6:	f002 fb77 	bl	80030c8 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 80009da:	e004      	b.n	80009e6 <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	2104      	movs	r1, #4
 80009e0:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <GC9A01_set_reset+0x30>)
 80009e2:	f002 fb71 	bl	80030c8 <HAL_GPIO_WritePin>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	58020400 	.word	0x58020400

080009f4 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d105      	bne.n	8000a10 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2102      	movs	r1, #2
 8000a08:	4806      	ldr	r0, [pc, #24]	@ (8000a24 <GC9A01_set_data_command+0x30>)
 8000a0a:	f002 fb5d 	bl	80030c8 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 8000a0e:	e004      	b.n	8000a1a <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2102      	movs	r1, #2
 8000a14:	4803      	ldr	r0, [pc, #12]	@ (8000a24 <GC9A01_set_data_command+0x30>)
 8000a16:	f002 fb57 	bl	80030c8 <HAL_GPIO_WritePin>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	58020400 	.word	0x58020400

08000a28 <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d105      	bne.n	8000a44 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	4806      	ldr	r0, [pc, #24]	@ (8000a58 <GC9A01_set_chip_select+0x30>)
 8000a3e:	f002 fb43 	bl	80030c8 <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000a42:	e004      	b.n	8000a4e <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2101      	movs	r1, #1
 8000a48:	4803      	ldr	r0, [pc, #12]	@ (8000a58 <GC9A01_set_chip_select+0x30>)
 8000a4a:	f002 fb3d 	bl	80030c8 <HAL_GPIO_WritePin>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	58020400 	.word	0x58020400

08000a5c <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff ffc4 	bl	80009f4 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff ffdb 	bl	8000a28 <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	2101      	movs	r1, #1
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 faae 	bl	8000fd8 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f7ff ffd3 	bl	8000a28 <GC9A01_set_chip_select>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 8000a94:	2001      	movs	r0, #1
 8000a96:	f7ff ffad 	bl	80009f4 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff ffc4 	bl	8000a28 <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f000 fa96 	bl	8000fd8 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff ffbb 	bl	8000a28 <GC9A01_set_chip_select>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000ac4:	1dfb      	adds	r3, r7, #7
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ffde 	bl	8000a8a <GC9A01_write_data>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <GC9A01_init>:
void GC9A01_write_continue(uint8_t *data, size_t len) {
    GC9A01_write_command(MEM_WR_CONT);
    GC9A01_write_data(data, len);
}

void GC9A01_init(void) {
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 8000ada:	2001      	movs	r0, #1
 8000adc:	f7ff ffa4 	bl	8000a28 <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000ae0:	2005      	movs	r0, #5
 8000ae2:	f001 fd29 	bl	8002538 <HAL_Delay>
    GC9A01_set_reset(OFF);
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f7ff ff6a 	bl	80009c0 <GC9A01_set_reset>
    HAL_Delay(10);
 8000aec:	200a      	movs	r0, #10
 8000aee:	f001 fd23 	bl	8002538 <HAL_Delay>
    GC9A01_set_reset(ON);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f7ff ff64 	bl	80009c0 <GC9A01_set_reset>
    HAL_Delay(120);
 8000af8:	2078      	movs	r0, #120	@ 0x78
 8000afa:	f001 fd1d 	bl	8002538 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000afe:	20ef      	movs	r0, #239	@ 0xef
 8000b00:	f7ff ffac 	bl	8000a5c <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000b04:	20eb      	movs	r0, #235	@ 0xeb
 8000b06:	f7ff ffa9 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000b0a:	2014      	movs	r0, #20
 8000b0c:	f7ff ffd5 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000b10:	20fe      	movs	r0, #254	@ 0xfe
 8000b12:	f7ff ffa3 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 8000b16:	20ef      	movs	r0, #239	@ 0xef
 8000b18:	f7ff ffa0 	bl	8000a5c <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000b1c:	20eb      	movs	r0, #235	@ 0xeb
 8000b1e:	f7ff ff9d 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000b22:	2014      	movs	r0, #20
 8000b24:	f7ff ffc9 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 8000b28:	2084      	movs	r0, #132	@ 0x84
 8000b2a:	f7ff ff97 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 8000b2e:	2040      	movs	r0, #64	@ 0x40
 8000b30:	f7ff ffc3 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 8000b34:	2085      	movs	r0, #133	@ 0x85
 8000b36:	f7ff ff91 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000b3a:	20ff      	movs	r0, #255	@ 0xff
 8000b3c:	f7ff ffbd 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 8000b40:	2086      	movs	r0, #134	@ 0x86
 8000b42:	f7ff ff8b 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000b46:	20ff      	movs	r0, #255	@ 0xff
 8000b48:	f7ff ffb7 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 8000b4c:	2087      	movs	r0, #135	@ 0x87
 8000b4e:	f7ff ff85 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000b52:	20ff      	movs	r0, #255	@ 0xff
 8000b54:	f7ff ffb1 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 8000b58:	2088      	movs	r0, #136	@ 0x88
 8000b5a:	f7ff ff7f 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 8000b5e:	200a      	movs	r0, #10
 8000b60:	f7ff ffab 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 8000b64:	2089      	movs	r0, #137	@ 0x89
 8000b66:	f7ff ff79 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000b6a:	2021      	movs	r0, #33	@ 0x21
 8000b6c:	f7ff ffa5 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 8000b70:	208a      	movs	r0, #138	@ 0x8a
 8000b72:	f7ff ff73 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f7ff ff9f 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 8000b7c:	208b      	movs	r0, #139	@ 0x8b
 8000b7e:	f7ff ff6d 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000b82:	2080      	movs	r0, #128	@ 0x80
 8000b84:	f7ff ff99 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 8000b88:	208c      	movs	r0, #140	@ 0x8c
 8000b8a:	f7ff ff67 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f7ff ff93 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 8000b94:	208d      	movs	r0, #141	@ 0x8d
 8000b96:	f7ff ff61 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff ff8d 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 8000ba0:	208e      	movs	r0, #142	@ 0x8e
 8000ba2:	f7ff ff5b 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000ba6:	20ff      	movs	r0, #255	@ 0xff
 8000ba8:	f7ff ff87 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 8000bac:	208f      	movs	r0, #143	@ 0x8f
 8000bae:	f7ff ff55 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000bb2:	20ff      	movs	r0, #255	@ 0xff
 8000bb4:	f7ff ff81 	bl	8000aba <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 8000bb8:	20b6      	movs	r0, #182	@ 0xb6
 8000bba:	f7ff ff4f 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff ff7b 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f7ff ff78 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 8000bca:	2036      	movs	r0, #54	@ 0x36
 8000bcc:	f7ff ff46 	bl	8000a5c <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 8000bd0:	2048      	movs	r0, #72	@ 0x48
 8000bd2:	f7ff ff72 	bl	8000aba <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 8000bd6:	203a      	movs	r0, #58	@ 0x3a
 8000bd8:	f7ff ff40 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000bdc:	2005      	movs	r0, #5
 8000bde:	f7ff ff6c 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000be2:	2090      	movs	r0, #144	@ 0x90
 8000be4:	f7ff ff3a 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 8000be8:	2008      	movs	r0, #8
 8000bea:	f7ff ff66 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000bee:	2008      	movs	r0, #8
 8000bf0:	f7ff ff63 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000bf4:	2008      	movs	r0, #8
 8000bf6:	f7ff ff60 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000bfa:	2008      	movs	r0, #8
 8000bfc:	f7ff ff5d 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000c00:	20bd      	movs	r0, #189	@ 0xbd
 8000c02:	f7ff ff2b 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 8000c06:	2006      	movs	r0, #6
 8000c08:	f7ff ff57 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000c0c:	20bc      	movs	r0, #188	@ 0xbc
 8000c0e:	f7ff ff25 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff ff51 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 8000c18:	20ff      	movs	r0, #255	@ 0xff
 8000c1a:	f7ff ff1f 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000c1e:	2060      	movs	r0, #96	@ 0x60
 8000c20:	f7ff ff4b 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f7ff ff48 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8000c2a:	2004      	movs	r0, #4
 8000c2c:	f7ff ff45 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 8000c30:	20c3      	movs	r0, #195	@ 0xc3
 8000c32:	f7ff ff13 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000c36:	2013      	movs	r0, #19
 8000c38:	f7ff ff3f 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 8000c3c:	20c4      	movs	r0, #196	@ 0xc4
 8000c3e:	f7ff ff0d 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000c42:	2013      	movs	r0, #19
 8000c44:	f7ff ff39 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 8000c48:	20c9      	movs	r0, #201	@ 0xc9
 8000c4a:	f7ff ff07 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 8000c4e:	2022      	movs	r0, #34	@ 0x22
 8000c50:	f7ff ff33 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 8000c54:	20be      	movs	r0, #190	@ 0xbe
 8000c56:	f7ff ff01 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 8000c5a:	2011      	movs	r0, #17
 8000c5c:	f7ff ff2d 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 8000c60:	20e1      	movs	r0, #225	@ 0xe1
 8000c62:	f7ff fefb 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000c66:	2010      	movs	r0, #16
 8000c68:	f7ff ff27 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8000c6c:	200e      	movs	r0, #14
 8000c6e:	f7ff ff24 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 8000c72:	20df      	movs	r0, #223	@ 0xdf
 8000c74:	f7ff fef2 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000c78:	2021      	movs	r0, #33	@ 0x21
 8000c7a:	f7ff ff1e 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 8000c7e:	200c      	movs	r0, #12
 8000c80:	f7ff ff1b 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 8000c84:	2002      	movs	r0, #2
 8000c86:	f7ff ff18 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 8000c8a:	20f0      	movs	r0, #240	@ 0xf0
 8000c8c:	f7ff fee6 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000c90:	2045      	movs	r0, #69	@ 0x45
 8000c92:	f7ff ff12 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000c96:	2009      	movs	r0, #9
 8000c98:	f7ff ff0f 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000c9c:	2008      	movs	r0, #8
 8000c9e:	f7ff ff0c 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000ca2:	2008      	movs	r0, #8
 8000ca4:	f7ff ff09 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000ca8:	2026      	movs	r0, #38	@ 0x26
 8000caa:	f7ff ff06 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000cae:	202a      	movs	r0, #42	@ 0x2a
 8000cb0:	f7ff ff03 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 8000cb4:	20f1      	movs	r0, #241	@ 0xf1
 8000cb6:	f7ff fed1 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000cba:	2043      	movs	r0, #67	@ 0x43
 8000cbc:	f7ff fefd 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000cc0:	2070      	movs	r0, #112	@ 0x70
 8000cc2:	f7ff fefa 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000cc6:	2072      	movs	r0, #114	@ 0x72
 8000cc8:	f7ff fef7 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000ccc:	2036      	movs	r0, #54	@ 0x36
 8000cce:	f7ff fef4 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000cd2:	2037      	movs	r0, #55	@ 0x37
 8000cd4:	f7ff fef1 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000cd8:	206f      	movs	r0, #111	@ 0x6f
 8000cda:	f7ff feee 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000cde:	20f2      	movs	r0, #242	@ 0xf2
 8000ce0:	f7ff febc 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000ce4:	2045      	movs	r0, #69	@ 0x45
 8000ce6:	f7ff fee8 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000cea:	2009      	movs	r0, #9
 8000cec:	f7ff fee5 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000cf0:	2008      	movs	r0, #8
 8000cf2:	f7ff fee2 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000cf6:	2008      	movs	r0, #8
 8000cf8:	f7ff fedf 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000cfc:	2026      	movs	r0, #38	@ 0x26
 8000cfe:	f7ff fedc 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000d02:	202a      	movs	r0, #42	@ 0x2a
 8000d04:	f7ff fed9 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 8000d08:	20f3      	movs	r0, #243	@ 0xf3
 8000d0a:	f7ff fea7 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000d0e:	2043      	movs	r0, #67	@ 0x43
 8000d10:	f7ff fed3 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000d14:	2070      	movs	r0, #112	@ 0x70
 8000d16:	f7ff fed0 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000d1a:	2072      	movs	r0, #114	@ 0x72
 8000d1c:	f7ff fecd 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000d20:	2036      	movs	r0, #54	@ 0x36
 8000d22:	f7ff feca 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000d26:	2037      	movs	r0, #55	@ 0x37
 8000d28:	f7ff fec7 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000d2c:	206f      	movs	r0, #111	@ 0x6f
 8000d2e:	f7ff fec4 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 8000d32:	20ed      	movs	r0, #237	@ 0xed
 8000d34:	f7ff fe92 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 8000d38:	201b      	movs	r0, #27
 8000d3a:	f7ff febe 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 8000d3e:	200b      	movs	r0, #11
 8000d40:	f7ff febb 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 8000d44:	20ae      	movs	r0, #174	@ 0xae
 8000d46:	f7ff fe89 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 8000d4a:	2077      	movs	r0, #119	@ 0x77
 8000d4c:	f7ff feb5 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 8000d50:	20cd      	movs	r0, #205	@ 0xcd
 8000d52:	f7ff fe83 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 8000d56:	2063      	movs	r0, #99	@ 0x63
 8000d58:	f7ff feaf 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 8000d5c:	2070      	movs	r0, #112	@ 0x70
 8000d5e:	f7ff fe7d 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 8000d62:	2007      	movs	r0, #7
 8000d64:	f7ff fea9 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000d68:	2007      	movs	r0, #7
 8000d6a:	f7ff fea6 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8000d6e:	2004      	movs	r0, #4
 8000d70:	f7ff fea3 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8000d74:	200e      	movs	r0, #14
 8000d76:	f7ff fea0 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000d7a:	200f      	movs	r0, #15
 8000d7c:	f7ff fe9d 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000d80:	2009      	movs	r0, #9
 8000d82:	f7ff fe9a 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000d86:	2007      	movs	r0, #7
 8000d88:	f7ff fe97 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000d8c:	2008      	movs	r0, #8
 8000d8e:	f7ff fe94 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 8000d92:	2003      	movs	r0, #3
 8000d94:	f7ff fe91 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 8000d98:	20e8      	movs	r0, #232	@ 0xe8
 8000d9a:	f7ff fe5f 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 8000d9e:	2034      	movs	r0, #52	@ 0x34
 8000da0:	f7ff fe8b 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 8000da4:	2062      	movs	r0, #98	@ 0x62
 8000da6:	f7ff fe59 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000daa:	2018      	movs	r0, #24
 8000dac:	f7ff fe85 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 8000db0:	200d      	movs	r0, #13
 8000db2:	f7ff fe82 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000db6:	2071      	movs	r0, #113	@ 0x71
 8000db8:	f7ff fe7f 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 8000dbc:	20ed      	movs	r0, #237	@ 0xed
 8000dbe:	f7ff fe7c 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000dc2:	2070      	movs	r0, #112	@ 0x70
 8000dc4:	f7ff fe79 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000dc8:	2070      	movs	r0, #112	@ 0x70
 8000dca:	f7ff fe76 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000dce:	2018      	movs	r0, #24
 8000dd0:	f7ff fe73 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000dd4:	200f      	movs	r0, #15
 8000dd6:	f7ff fe70 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000dda:	2071      	movs	r0, #113	@ 0x71
 8000ddc:	f7ff fe6d 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 8000de0:	20ef      	movs	r0, #239	@ 0xef
 8000de2:	f7ff fe6a 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000de6:	2070      	movs	r0, #112	@ 0x70
 8000de8:	f7ff fe67 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000dec:	2070      	movs	r0, #112	@ 0x70
 8000dee:	f7ff fe64 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8000df2:	2063      	movs	r0, #99	@ 0x63
 8000df4:	f7ff fe32 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000df8:	2018      	movs	r0, #24
 8000dfa:	f7ff fe5e 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8000dfe:	2011      	movs	r0, #17
 8000e00:	f7ff fe5b 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000e04:	2071      	movs	r0, #113	@ 0x71
 8000e06:	f7ff fe58 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000e0a:	20f1      	movs	r0, #241	@ 0xf1
 8000e0c:	f7ff fe55 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000e10:	2070      	movs	r0, #112	@ 0x70
 8000e12:	f7ff fe52 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000e16:	2070      	movs	r0, #112	@ 0x70
 8000e18:	f7ff fe4f 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000e1c:	2018      	movs	r0, #24
 8000e1e:	f7ff fe4c 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 8000e22:	2013      	movs	r0, #19
 8000e24:	f7ff fe49 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000e28:	2071      	movs	r0, #113	@ 0x71
 8000e2a:	f7ff fe46 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 8000e2e:	20f3      	movs	r0, #243	@ 0xf3
 8000e30:	f7ff fe43 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000e34:	2070      	movs	r0, #112	@ 0x70
 8000e36:	f7ff fe40 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000e3a:	2070      	movs	r0, #112	@ 0x70
 8000e3c:	f7ff fe3d 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 8000e40:	2064      	movs	r0, #100	@ 0x64
 8000e42:	f7ff fe0b 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 8000e46:	2028      	movs	r0, #40	@ 0x28
 8000e48:	f7ff fe37 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 8000e4c:	2029      	movs	r0, #41	@ 0x29
 8000e4e:	f7ff fe34 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000e52:	20f1      	movs	r0, #241	@ 0xf1
 8000e54:	f7ff fe31 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f7ff fe2e 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000e5e:	20f1      	movs	r0, #241	@ 0xf1
 8000e60:	f7ff fe2b 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000e64:	2000      	movs	r0, #0
 8000e66:	f7ff fe28 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000e6a:	2007      	movs	r0, #7
 8000e6c:	f7ff fe25 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 8000e70:	2066      	movs	r0, #102	@ 0x66
 8000e72:	f7ff fdf3 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 8000e76:	203c      	movs	r0, #60	@ 0x3c
 8000e78:	f7ff fe1f 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff fe1c 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 8000e82:	20cd      	movs	r0, #205	@ 0xcd
 8000e84:	f7ff fe19 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 8000e88:	2067      	movs	r0, #103	@ 0x67
 8000e8a:	f7ff fe16 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000e8e:	2045      	movs	r0, #69	@ 0x45
 8000e90:	f7ff fe13 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000e94:	2045      	movs	r0, #69	@ 0x45
 8000e96:	f7ff fe10 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000e9a:	2010      	movs	r0, #16
 8000e9c:	f7ff fe0d 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f7ff fe0a 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff fe07 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff fe04 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 8000eb2:	2067      	movs	r0, #103	@ 0x67
 8000eb4:	f7ff fdd2 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f7ff fdfe 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 8000ebe:	203c      	movs	r0, #60	@ 0x3c
 8000ec0:	f7ff fdfb 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f7ff fdf8 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f7ff fdf5 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff fdf2 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f7ff fdef 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 8000edc:	2054      	movs	r0, #84	@ 0x54
 8000ede:	f7ff fdec 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000ee2:	2010      	movs	r0, #16
 8000ee4:	f7ff fde9 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 8000ee8:	2032      	movs	r0, #50	@ 0x32
 8000eea:	f7ff fde6 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8000eee:	2098      	movs	r0, #152	@ 0x98
 8000ef0:	f7ff fde3 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8000ef4:	2074      	movs	r0, #116	@ 0x74
 8000ef6:	f7ff fdb1 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000efa:	2010      	movs	r0, #16
 8000efc:	f7ff fddd 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8000f00:	2085      	movs	r0, #133	@ 0x85
 8000f02:	f7ff fdda 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 8000f06:	2080      	movs	r0, #128	@ 0x80
 8000f08:	f7ff fdd7 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f7ff fdd4 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f7ff fdd1 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 8000f18:	204e      	movs	r0, #78	@ 0x4e
 8000f1a:	f7ff fdce 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f7ff fdcb 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 8000f24:	2098      	movs	r0, #152	@ 0x98
 8000f26:	f7ff fd99 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 8000f2a:	203e      	movs	r0, #62	@ 0x3e
 8000f2c:	f7ff fdc5 	bl	8000aba <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000f30:	2007      	movs	r0, #7
 8000f32:	f7ff fdc2 	bl	8000aba <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 8000f36:	2035      	movs	r0, #53	@ 0x35
 8000f38:	f7ff fd90 	bl	8000a5c <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8000f3c:	2021      	movs	r0, #33	@ 0x21
 8000f3e:	f7ff fd8d 	bl	8000a5c <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 8000f42:	2011      	movs	r0, #17
 8000f44:	f7ff fd8a 	bl	8000a5c <GC9A01_write_command>
    HAL_Delay(120);
 8000f48:	2078      	movs	r0, #120	@ 0x78
 8000f4a:	f001 faf5 	bl	8002538 <HAL_Delay>
    GC9A01_write_command(0x29);
 8000f4e:	2029      	movs	r0, #41	@ 0x29
 8000f50:	f7ff fd84 	bl	8000a5c <GC9A01_write_command>
    HAL_Delay(20);
 8000f54:	2014      	movs	r0, #20
 8000f56:	f001 faef 	bl	8002538 <HAL_Delay>
    
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <GC9A01_set_frame>:

void GC9A01_set_frame(struct GC9A01_frame frame) {
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b084      	sub	sp, #16
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	463b      	mov	r3, r7
 8000f66:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t data[4];
    
    GC9A01_write_command(COL_ADDR_SET);
 8000f6a:	202a      	movs	r0, #42	@ 0x2a
 8000f6c:	f7ff fd76 	bl	8000a5c <GC9A01_write_command>
    data[0] = (frame.start.X >> 8) & 0xFF;
 8000f70:	883b      	ldrh	r3, [r7, #0]
 8000f72:	0a1b      	lsrs	r3, r3, #8
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.X & 0xFF;
 8000f7a:	883b      	ldrh	r3, [r7, #0]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.X >> 8) & 0xFF;
 8000f80:	88bb      	ldrh	r3, [r7, #4]
 8000f82:	0a1b      	lsrs	r3, r3, #8
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.X & 0xFF;
 8000f8a:	88bb      	ldrh	r3, [r7, #4]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2104      	movs	r1, #4
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fd77 	bl	8000a8a <GC9A01_write_data>

    GC9A01_write_command(ROW_ADDR_SET);
 8000f9c:	202b      	movs	r0, #43	@ 0x2b
 8000f9e:	f7ff fd5d 	bl	8000a5c <GC9A01_write_command>
    data[0] = (frame.start.Y >> 8) & 0xFF;
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.Y & 0xFF;
 8000fac:	887b      	ldrh	r3, [r7, #2]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.Y >> 8) & 0xFF;
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.Y & 0xFF;
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	2104      	movs	r1, #4
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fd5e 	bl	8000a8a <GC9A01_write_data>
    
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
int GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000fe4:	887a      	ldrh	r2, [r7, #2]
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	4809      	ldr	r0, [pc, #36]	@ (8001014 <GC9A01_spi_tx+0x3c>)
 8000fee:	f009 fb73 	bl	800a6d8 <HAL_SPI_Transmit>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <GC9A01_spi_tx+0x40>)
 8000ff8:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 8000ffa:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <GC9A01_spi_tx+0x40>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <GC9A01_spi_tx+0x30>
		return -1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e000      	b.n	800100a <GC9A01_spi_tx+0x32>

	return 1;
 8001008:	2301      	movs	r3, #1

}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	24000114 	.word	0x24000114
 8001018:	24000080 	.word	0x24000080

0800101c <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
int JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af02      	add	r7, sp, #8
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
  JPEGSourceAddress =  FrameSourceAddress ;
 800102a:	4a14      	ldr	r2, [pc, #80]	@ (800107c <JPEG_Decode_DMA+0x60>)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 8001030:	4a13      	ldr	r2, [pc, #76]	@ (8001080 <JPEG_Decode_DMA+0x64>)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	6013      	str	r3, [r2, #0]
  Input_frameIndex=0;
 8001036:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <JPEG_Decode_DMA+0x68>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
  Input_frameSize = FrameSize;
 800103c:	4a12      	ldr	r2, [pc, #72]	@ (8001088 <JPEG_Decode_DMA+0x6c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]

  Jpeg_HWDecodingEnd = 0;
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <JPEG_Decode_DMA+0x70>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
  
  /* Start JPEG decoding with DMA method */
  if(HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT) != HAL_OK)
 8001048:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <JPEG_Decode_DMA+0x60>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <JPEG_Decode_DMA+0x64>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	4613      	mov	r3, r2
 800105c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f002 f962 	bl	800332a <HAL_JPEG_Decode_DMA>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d002      	beq.n	8001072 <JPEG_Decode_DMA+0x56>
	  return -1;
 800106c:	f04f 33ff 	mov.w	r3, #4294967295
 8001070:	e000      	b.n	8001074 <JPEG_Decode_DMA+0x58>
  
  
  return 1;
 8001072:	2301      	movs	r3, #1
  
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2400008c 	.word	0x2400008c
 8001080:	24000088 	.word	0x24000088
 8001084:	24000094 	.word	0x24000094
 8001088:	24000090 	.word	0x24000090
 800108c:	24000084 	.word	0x24000084

08001090 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 80010b2:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <HAL_JPEG_GetDataCallback+0x70>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a17      	ldr	r2, [pc, #92]	@ (8001118 <HAL_JPEG_GetDataCallback+0x70>)
 80010bc:	6013      	str	r3, [r2, #0]
  if( Input_frameIndex < Input_frameSize)
 80010be:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <HAL_JPEG_GetDataCallback+0x70>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b16      	ldr	r3, [pc, #88]	@ (800111c <HAL_JPEG_GetDataCallback+0x74>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d218      	bcs.n	80010fc <HAL_JPEG_GetDataCallback+0x54>
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 80010ca:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <HAL_JPEG_GetDataCallback+0x78>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a13      	ldr	r2, [pc, #76]	@ (8001120 <HAL_JPEG_GetDataCallback+0x78>)
 80010d4:	6013      	str	r3, [r2, #0]
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 80010d6:	4b11      	ldr	r3, [pc, #68]	@ (800111c <HAL_JPEG_GetDataCallback+0x74>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <HAL_JPEG_GetDataCallback+0x70>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010e4:	d303      	bcc.n	80010ee <HAL_JPEG_GetDataCallback+0x46>
    {
      inDataLength = CHUNK_SIZE_IN;
 80010e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	e008      	b.n	8001100 <HAL_JPEG_GetDataCallback+0x58>
    }
    else
    {
      inDataLength = Input_frameSize - Input_frameIndex;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <HAL_JPEG_GetDataCallback+0x74>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <HAL_JPEG_GetDataCallback+0x70>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	e001      	b.n	8001100 <HAL_JPEG_GetDataCallback+0x58>
    }    
  }
  else
  {
    inDataLength = 0; 
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 8001100:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <HAL_JPEG_GetDataCallback+0x78>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4619      	mov	r1, r3
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f002 f9c9 	bl	80034a0 <HAL_JPEG_ConfigInputBuffer>
  
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	24000094 	.word	0x24000094
 800111c:	24000090 	.word	0x24000090
 8001120:	2400008c 	.word	0x2400008c

08001124 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <HAL_JPEG_DataReadyCallback+0x30>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4413      	add	r3, r2
 8001138:	4a06      	ldr	r2, [pc, #24]	@ (8001154 <HAL_JPEG_DataReadyCallback+0x30>)
 800113a:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 800113c:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <HAL_JPEG_DataReadyCallback+0x30>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001144:	4619      	mov	r1, r3
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f002 f9bc 	bl	80034c4 <HAL_JPEG_ConfigOutputBuffer>
}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	24000088 	.word	0x24000088

08001158 <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  Error_Handler();
 8001160:	f000 fae4 	bl	800172c <Error_Handler>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1; 
 8001174:	4b04      	ldr	r3, [pc, #16]	@ (8001188 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	24000084 	.word	0x24000084

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001190:	4b2c      	ldr	r3, [pc, #176]	@ (8001244 <main+0xb8>)
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d11b      	bne.n	80011d4 <main+0x48>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800119c:	f3bf 8f4f 	dsb	sy
}
 80011a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011a2:	f3bf 8f6f 	isb	sy
}
 80011a6:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a8:	4b26      	ldr	r3, [pc, #152]	@ (8001244 <main+0xb8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011b0:	f3bf 8f4f 	dsb	sy
}
 80011b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b6:	f3bf 8f6f 	isb	sy
}
 80011ba:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011bc:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <main+0xb8>)
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	4a20      	ldr	r2, [pc, #128]	@ (8001244 <main+0xb8>)
 80011c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80011c8:	f3bf 8f4f 	dsb	sy
}
 80011cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011ce:	f3bf 8f6f 	isb	sy
}
 80011d2:	e000      	b.n	80011d6 <main+0x4a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d4:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d6:	f001 f91d 	bl	8002414 <HAL_Init>

  HAL_Delay(500);
 80011da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011de:	f001 f9ab 	bl	8002538 <HAL_Delay>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e2:	f000 f835 	bl	8001250 <SystemClock_Config>

  HAL_Delay(500);
 80011e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011ea:	f001 f9a5 	bl	8002538 <HAL_Delay>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ee:	f000 f969 	bl	80014c4 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80011f2:	f000 f8a3 	bl	800133c <MX_DMA2D_Init>
  MX_SDMMC1_SD_Init();
 80011f6:	f000 f8ef 	bl	80013d8 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80011fa:	f000 f90d 	bl	8001418 <MX_SPI1_Init>
  //MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 80011fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001202:	f001 f999 	bl	8002538 <HAL_Delay>
  JPEG_Handle.Instance = JPEG;
 8001206:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <main+0xbc>)
 8001208:	4a10      	ldr	r2, [pc, #64]	@ (800124c <main+0xc0>)
 800120a:	601a      	str	r2, [r3, #0]
  MX_JPEG_Init();
 800120c:	f000 f8d0 	bl	80013b0 <MX_JPEG_Init>

  HAL_Delay(500);
 8001210:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001214:	f001 f990 	bl	8002538 <HAL_Delay>
  GC9A01_init();
 8001218:	f7ff fc5d 	bl	8000ad6 <GC9A01_init>
  HAL_Delay(500);
 800121c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001220:	f001 f98a 	bl	8002538 <HAL_Delay>

  smart_watch_init();
 8001224:	f000 fa88 	bl	8001738 <smart_watch_init>

  HAL_Delay(500);
 8001228:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800122c:	f001 f984 	bl	8002538 <HAL_Delay>
  }
  else
  {


	  if(test_process() < 0)
 8001230:	f000 f9d0 	bl	80015d4 <test_process>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	da02      	bge.n	8001240 <main+0xb4>
		  Error_Handler();
 800123a:	f000 fa77 	bl	800172c <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <main+0xb4>
 8001244:	e000ed00 	.word	0xe000ed00
 8001248:	2400019c 	.word	0x2400019c
 800124c:	52003000 	.word	0x52003000

08001250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b09c      	sub	sp, #112	@ 0x70
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800125a:	224c      	movs	r2, #76	@ 0x4c
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f00d f9a2 	bl	800e5a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2220      	movs	r2, #32
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f00d f99c 	bl	800e5a8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001270:	4b30      	ldr	r3, [pc, #192]	@ (8001334 <SystemClock_Config+0xe4>)
 8001272:	f04f 32ff 	mov.w	r2, #4294967295
 8001276:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800127a:	2002      	movs	r0, #2
 800127c:	f004 f96a 	bl	8005554 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001280:	2300      	movs	r3, #0
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	4b2c      	ldr	r3, [pc, #176]	@ (8001338 <SystemClock_Config+0xe8>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a2b      	ldr	r2, [pc, #172]	@ (8001338 <SystemClock_Config+0xe8>)
 800128a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b29      	ldr	r3, [pc, #164]	@ (8001338 <SystemClock_Config+0xe8>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800129c:	bf00      	nop
 800129e:	4b26      	ldr	r3, [pc, #152]	@ (8001338 <SystemClock_Config+0xe8>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012aa:	d1f8      	bne.n	800129e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ac:	2302      	movs	r3, #2
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80012b4:	2340      	movs	r3, #64	@ 0x40
 80012b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b8:	2302      	movs	r3, #2
 80012ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012bc:	2300      	movs	r3, #0
 80012be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012c0:	2304      	movs	r3, #4
 80012c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 80012c4:	2319      	movs	r3, #25
 80012c6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80012c8:	2302      	movs	r3, #2
 80012ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80012cc:	2308      	movs	r3, #8
 80012ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80012d4:	230c      	movs	r3, #12
 80012d6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80012d8:	2300      	movs	r3, #0
 80012da:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e4:	4618      	mov	r0, r3
 80012e6:	f004 f96f 	bl	80055c8 <HAL_RCC_OscConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80012f0:	f000 fa1c 	bl	800172c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f4:	233f      	movs	r3, #63	@ 0x3f
 80012f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f8:	2303      	movs	r3, #3
 80012fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001300:	2308      	movs	r3, #8
 8001302:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001304:	2340      	movs	r3, #64	@ 0x40
 8001306:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001308:	2340      	movs	r3, #64	@ 0x40
 800130a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800130c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001310:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001312:	2340      	movs	r3, #64	@ 0x40
 8001314:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2105      	movs	r1, #5
 800131a:	4618      	mov	r0, r3
 800131c:	f004 fd86 	bl	8005e2c <HAL_RCC_ClockConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001326:	f000 fa01 	bl	800172c <Error_Handler>
  }
}
 800132a:	bf00      	nop
 800132c:	3770      	adds	r7, #112	@ 0x70
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	58024400 	.word	0x58024400
 8001338:	58024800 	.word	0x58024800

0800133c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  DMA2D_Handle.Instance = DMA2D;
 8001340:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <MX_DMA2D_Init+0x6c>)
 8001342:	4a1a      	ldr	r2, [pc, #104]	@ (80013ac <MX_DMA2D_Init+0x70>)
 8001344:	601a      	str	r2, [r3, #0]
  DMA2D_Handle.Init.Mode = DMA2D_M2M;
 8001346:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <MX_DMA2D_Init+0x6c>)
 8001348:	2200      	movs	r2, #0
 800134a:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800134c:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <MX_DMA2D_Init+0x6c>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = 0;
 8001352:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <MX_DMA2D_Init+0x6c>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.LayerCfg[1].InputOffset = 0;
 8001358:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <MX_DMA2D_Init+0x6c>)
 800135a:	2200      	movs	r2, #0
 800135c:	645a      	str	r2, [r3, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800135e:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <MX_DMA2D_Init+0x6c>)
 8001360:	2200      	movs	r2, #0
 8001362:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001364:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <MX_DMA2D_Init+0x6c>)
 8001366:	2200      	movs	r2, #0
 8001368:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0;
 800136a:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <MX_DMA2D_Init+0x6c>)
 800136c:	2200      	movs	r2, #0
 800136e:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001370:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <MX_DMA2D_Init+0x6c>)
 8001372:	2200      	movs	r2, #0
 8001374:	655a      	str	r2, [r3, #84]	@ 0x54
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001376:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <MX_DMA2D_Init+0x6c>)
 8001378:	2200      	movs	r2, #0
 800137a:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <MX_DMA2D_Init+0x6c>)
 800137e:	2200      	movs	r2, #0
 8001380:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&DMA2D_Handle) != HAL_OK)
 8001382:	4809      	ldr	r0, [pc, #36]	@ (80013a8 <MX_DMA2D_Init+0x6c>)
 8001384:	f001 fa0c 	bl	80027a0 <HAL_DMA2D_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800138e:	f000 f9cd 	bl	800172c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1) != HAL_OK)
 8001392:	2101      	movs	r1, #1
 8001394:	4804      	ldr	r0, [pc, #16]	@ (80013a8 <MX_DMA2D_Init+0x6c>)
 8001396:	f001 fb7b 	bl	8002a90 <HAL_DMA2D_ConfigLayer>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 80013a0:	f000 f9c4 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	240001f4 	.word	0x240001f4
 80013ac:	52001000 	.word	0x52001000

080013b0 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  JPEG_Handle.Instance = JPEG;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <MX_JPEG_Init+0x20>)
 80013b6:	4a07      	ldr	r2, [pc, #28]	@ (80013d4 <MX_JPEG_Init+0x24>)
 80013b8:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&JPEG_Handle) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <MX_JPEG_Init+0x20>)
 80013bc:	f001 fe9e 	bl	80030fc <HAL_JPEG_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 80013c6:	f000 f9b1 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2400019c 	.word	0x2400019c
 80013d4:	52003000 	.word	0x52003000

080013d8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <MX_SDMMC1_SD_Init+0x38>)
 80013de:	4a0d      	ldr	r2, [pc, #52]	@ (8001414 <MX_SDMMC1_SD_Init+0x3c>)
 80013e0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <MX_SDMMC1_SD_Init+0x38>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80013e8:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <MX_SDMMC1_SD_Init+0x38>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80013ee:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <MX_SDMMC1_SD_Init+0x38>)
 80013f0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013f4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <MX_SDMMC1_SD_Init+0x38>)
 80013f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013fc:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80013fe:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <MX_SDMMC1_SD_Init+0x38>)
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	24000098 	.word	0x24000098
 8001414:	52007000 	.word	0x52007000

08001418 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800141c:	4b27      	ldr	r3, [pc, #156]	@ (80014bc <MX_SPI1_Init+0xa4>)
 800141e:	4a28      	ldr	r2, [pc, #160]	@ (80014c0 <MX_SPI1_Init+0xa8>)
 8001420:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001422:	4b26      	ldr	r3, [pc, #152]	@ (80014bc <MX_SPI1_Init+0xa4>)
 8001424:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001428:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800142a:	4b24      	ldr	r3, [pc, #144]	@ (80014bc <MX_SPI1_Init+0xa4>)
 800142c:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8001430:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001432:	4b22      	ldr	r3, [pc, #136]	@ (80014bc <MX_SPI1_Init+0xa4>)
 8001434:	2207      	movs	r2, #7
 8001436:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001438:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <MX_SPI1_Init+0xa4>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800143e:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <MX_SPI1_Init+0xa4>)
 8001440:	2200      	movs	r2, #0
 8001442:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001444:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <MX_SPI1_Init+0xa4>)
 8001446:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800144a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800144c:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <MX_SPI1_Init+0xa4>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <MX_SPI1_Init+0xa4>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001458:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <MX_SPI1_Init+0xa4>)
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800145e:	4b17      	ldr	r3, [pc, #92]	@ (80014bc <MX_SPI1_Init+0xa4>)
 8001460:	2200      	movs	r2, #0
 8001462:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001464:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <MX_SPI1_Init+0xa4>)
 8001466:	2200      	movs	r2, #0
 8001468:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800146a:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <MX_SPI1_Init+0xa4>)
 800146c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001470:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001472:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <MX_SPI1_Init+0xa4>)
 8001474:	2200      	movs	r2, #0
 8001476:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001478:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <MX_SPI1_Init+0xa4>)
 800147a:	2200      	movs	r2, #0
 800147c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800147e:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_SPI1_Init+0xa4>)
 8001480:	2200      	movs	r2, #0
 8001482:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001484:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <MX_SPI1_Init+0xa4>)
 8001486:	2200      	movs	r2, #0
 8001488:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <MX_SPI1_Init+0xa4>)
 800148c:	2200      	movs	r2, #0
 800148e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001490:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <MX_SPI1_Init+0xa4>)
 8001492:	2200      	movs	r2, #0
 8001494:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_SPI1_Init+0xa4>)
 8001498:	2200      	movs	r2, #0
 800149a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <MX_SPI1_Init+0xa4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_SPI1_Init+0xa4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_SPI1_Init+0xa4>)
 80014aa:	f008 fff1 	bl	800a490 <HAL_SPI_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80014b4:	f000 f93a 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	24000114 	.word	0x24000114
 80014c0:	40013000 	.word	0x40013000

080014c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	@ 0x28
 80014c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014da:	4b3b      	ldr	r3, [pc, #236]	@ (80015c8 <MX_GPIO_Init+0x104>)
 80014dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014e0:	4a39      	ldr	r2, [pc, #228]	@ (80015c8 <MX_GPIO_Init+0x104>)
 80014e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014e6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80014ea:	4b37      	ldr	r3, [pc, #220]	@ (80015c8 <MX_GPIO_Init+0x104>)
 80014ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b33      	ldr	r3, [pc, #204]	@ (80015c8 <MX_GPIO_Init+0x104>)
 80014fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014fe:	4a32      	ldr	r2, [pc, #200]	@ (80015c8 <MX_GPIO_Init+0x104>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001508:	4b2f      	ldr	r3, [pc, #188]	@ (80015c8 <MX_GPIO_Init+0x104>)
 800150a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	4b2c      	ldr	r3, [pc, #176]	@ (80015c8 <MX_GPIO_Init+0x104>)
 8001518:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800151c:	4a2a      	ldr	r2, [pc, #168]	@ (80015c8 <MX_GPIO_Init+0x104>)
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001526:	4b28      	ldr	r3, [pc, #160]	@ (80015c8 <MX_GPIO_Init+0x104>)
 8001528:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001534:	4b24      	ldr	r3, [pc, #144]	@ (80015c8 <MX_GPIO_Init+0x104>)
 8001536:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800153a:	4a23      	ldr	r2, [pc, #140]	@ (80015c8 <MX_GPIO_Init+0x104>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001544:	4b20      	ldr	r3, [pc, #128]	@ (80015c8 <MX_GPIO_Init+0x104>)
 8001546:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001552:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <MX_GPIO_Init+0x104>)
 8001554:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001558:	4a1b      	ldr	r2, [pc, #108]	@ (80015c8 <MX_GPIO_Init+0x104>)
 800155a:	f043 0308 	orr.w	r3, r3, #8
 800155e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001562:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <MX_GPIO_Init+0x104>)
 8001564:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001570:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	4811      	ldr	r0, [pc, #68]	@ (80015cc <MX_GPIO_Init+0x108>)
 8001586:	f001 fbd7 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GC9A01_CS_Pin|GC9A01_DC_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	2103      	movs	r1, #3
 800158e:	4810      	ldr	r0, [pc, #64]	@ (80015d0 <MX_GPIO_Init+0x10c>)
 8001590:	f001 fd9a 	bl	80030c8 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GC9A01_RST_Pin|GC9A01_BL_Pin, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	f240 4104 	movw	r1, #1028	@ 0x404
 800159a:	480d      	ldr	r0, [pc, #52]	@ (80015d0 <MX_GPIO_Init+0x10c>)
 800159c:	f001 fd94 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GC9A01_CS_Pin GC9A01_DC_Pin GC9A01_RST_Pin GC9A01_BL_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin|GC9A01_BL_Pin;
 80015a0:	f240 4307 	movw	r3, #1031	@ 0x407
 80015a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <MX_GPIO_Init+0x10c>)
 80015ba:	f001 fbbd 	bl	8002d38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015be:	bf00      	nop
 80015c0:	3728      	adds	r7, #40	@ 0x28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	58024400 	.word	0x58024400
 80015cc:	58020000 	.word	0x58020000
 80015d0:	58020400 	.word	0x58020400

080015d4 <test_process>:

/* USER CODE BEGIN 4 */
static int test_process(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 80015da:	af00      	add	r7, sp, #0

	 test_pass_t pass = {0};
 80015dc:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 80015e0:	2100      	movs	r1, #0
 80015e2:	460a      	mov	r2, r1
 80015e4:	801a      	strh	r2, [r3, #0]
 80015e6:	460a      	mov	r2, r1
 80015e8:	709a      	strb	r2, [r3, #2]

	 if(TEST_DISPLAY)
		 // Sends data to the display to show an image
		 pass.display_pass = (TEST_STATUS_t)smart_watch_test_display();
	 else
		 pass.display_pass = NA;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f887 3235 	strb.w	r3, [r7, #565]	@ 0x235
	 if(TEST_SD)
		 // Reads all the data from a file caled a000.avi and re-writes them in out.avi
		 // Requires few minutes to complete
		 pass.sd_pass = (TEST_STATUS_t)smart_watch_test_sd();
	 else
		 pass.sd_pass = NA;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f887 3234 	strb.w	r3, [r7, #564]	@ 0x234

	 if(TEST_MJPEG)
		 /* IN PROGRESS */
		 pass.mjpeg_pass = (TEST_STATUS_t)smart_watch_test_mjpeg();
 80015f6:	f000 f8c5 	bl	8001784 <smart_watch_test_mjpeg>
 80015fa:	4603      	mov	r3, r0
 80015fc:	b25b      	sxtb	r3, r3
 80015fe:	f887 3236 	strb.w	r3, [r7, #566]	@ 0x236
	 else
		 pass.mjpeg_pass = NA;


	 if(f_open(&log, "log.txt", ( FA_WRITE | FA_CREATE_ALWAYS )) != FR_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	220a      	movs	r2, #10
 8001606:	4914      	ldr	r1, [pc, #80]	@ (8001658 <test_process+0x84>)
 8001608:	4618      	mov	r0, r3
 800160a:	f00c f81d 	bl	800d648 <f_open>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d002      	beq.n	800161a <test_process+0x46>
		 return -1;
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
 8001618:	e019      	b.n	800164e <test_process+0x7a>

	 print_log(&log, pass.display_pass, "DISPLAY_TEST");
 800161a:	f997 1235 	ldrsb.w	r1, [r7, #565]	@ 0x235
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4a0e      	ldr	r2, [pc, #56]	@ (800165c <test_process+0x88>)
 8001622:	4618      	mov	r0, r3
 8001624:	f000 f820 	bl	8001668 <print_log>
	 print_log(&log, pass.sd_pass, "SD_TEST");
 8001628:	f997 1234 	ldrsb.w	r1, [r7, #564]	@ 0x234
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	4a0c      	ldr	r2, [pc, #48]	@ (8001660 <test_process+0x8c>)
 8001630:	4618      	mov	r0, r3
 8001632:	f000 f819 	bl	8001668 <print_log>
	 print_log(&log, pass.mjpeg_pass, "MJPEG_TEST");
 8001636:	f997 1236 	ldrsb.w	r1, [r7, #566]	@ 0x236
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	4a09      	ldr	r2, [pc, #36]	@ (8001664 <test_process+0x90>)
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f812 	bl	8001668 <print_log>

 	 f_close(&log);
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	4618      	mov	r0, r3
 8001648:	f00c fcea 	bl	800e020 <f_close>

 	 return 1;
 800164c:	2301      	movs	r3, #1

}
 800164e:	4618      	mov	r0, r3
 8001650:	f507 770e 	add.w	r7, r7, #568	@ 0x238
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	0800eee8 	.word	0x0800eee8
 800165c:	0800eef0 	.word	0x0800eef0
 8001660:	0800ef00 	.word	0x0800ef00
 8001664:	0800ef08 	.word	0x0800ef08

08001668 <print_log>:


static int print_log(FIL *log_file, TEST_STATUS_t status, char *test_name)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b09a      	sub	sp, #104	@ 0x68
 800166c:	af02      	add	r7, sp, #8
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	460b      	mov	r3, r1
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	72fb      	strb	r3, [r7, #11]

	 char buff[50];
	 char res[20];
	 unsigned int bw = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
	 unsigned int btw = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	65fb      	str	r3, [r7, #92]	@ 0x5c

	 if(status == NA)
 800167e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d111      	bne.n	80016aa <print_log+0x42>
	 {

		 snprintf(res, sizeof(res), "%s", "NA");
 8001686:	f107 0014 	add.w	r0, r7, #20
 800168a:	4b23      	ldr	r3, [pc, #140]	@ (8001718 <print_log+0xb0>)
 800168c:	4a23      	ldr	r2, [pc, #140]	@ (800171c <print_log+0xb4>)
 800168e:	2114      	movs	r1, #20
 8001690:	f00c ff56 	bl	800e540 <sniprintf>
		 snprintf(buff, sizeof(buff), "%-20s%20s\n\n", test_name, res);
 8001694:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001720 <print_log+0xb8>)
 80016a2:	2132      	movs	r1, #50	@ 0x32
 80016a4:	f00c ff4c 	bl	800e540 <sniprintf>
 80016a8:	e016      	b.n	80016d8 <print_log+0x70>

	 }
	 else
	 {

		 snprintf(res, sizeof(res), "%s", ( status == PASSED ) ? "PASSED" : "NOT PASSED");
 80016aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <print_log+0x4e>
 80016b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <print_log+0xbc>)
 80016b4:	e000      	b.n	80016b8 <print_log+0x50>
 80016b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <print_log+0xc0>)
 80016b8:	f107 0014 	add.w	r0, r7, #20
 80016bc:	4a17      	ldr	r2, [pc, #92]	@ (800171c <print_log+0xb4>)
 80016be:	2114      	movs	r1, #20
 80016c0:	f00c ff3e 	bl	800e540 <sniprintf>
		 snprintf(buff, sizeof(buff), "%-20s%20s\n\n", test_name, res);
 80016c4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a13      	ldr	r2, [pc, #76]	@ (8001720 <print_log+0xb8>)
 80016d2:	2132      	movs	r1, #50	@ 0x32
 80016d4:	f00c ff34 	bl	800e540 <sniprintf>

	 }

 	 btw = strlen(buff);
 80016d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fe07 	bl	80002f0 <strlen>
 80016e2:	65f8      	str	r0, [r7, #92]	@ 0x5c
 	 if(f_write(log_file, buff, btw, &bw) != FR_OK)
 80016e4:	f107 0310 	add.w	r3, r7, #16
 80016e8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80016ec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f00c faa3 	bl	800dc3a <f_write>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <print_log+0x98>
 		return -1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	e007      	b.n	8001710 <print_log+0xa8>

 	 if(bw != btw)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001704:	429a      	cmp	r2, r3
 8001706:	d002      	beq.n	800170e <print_log+0xa6>
 		return -1;
 8001708:	f04f 33ff 	mov.w	r3, #4294967295
 800170c:	e000      	b.n	8001710 <print_log+0xa8>

 	 return 1;
 800170e:	2301      	movs	r3, #1

}
 8001710:	4618      	mov	r0, r3
 8001712:	3760      	adds	r7, #96	@ 0x60
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	0800ef14 	.word	0x0800ef14
 800171c:	0800ef18 	.word	0x0800ef18
 8001720:	0800ef1c 	.word	0x0800ef1c
 8001724:	0800ef28 	.word	0x0800ef28
 8001728:	0800ef30 	.word	0x0800ef30

0800172c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001730:	b672      	cpsid	i
}
 8001732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <Error_Handler+0x8>

08001738 <smart_watch_init>:
// Output data buffer (format RGB565)
uint8_t output_data[200*1024];


void smart_watch_init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0

	parameters_reset();
 800173c:	f000 fa2a 	bl	8001b94 <parameters_reset>

	// First time setting
	video.video_mode = SETTING_MODE;
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <smart_watch_init+0x3c>)
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	// SD card initialization
	// Link the micro SD disk I/O driver
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8001748:	490b      	ldr	r1, [pc, #44]	@ (8001778 <smart_watch_init+0x40>)
 800174a:	480c      	ldr	r0, [pc, #48]	@ (800177c <smart_watch_init+0x44>)
 800174c:	f00c fee8 	bl	800e520 <FATFS_LinkDriver>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10b      	bne.n	800176e <smart_watch_init+0x36>
	{

		// Init the SD Card
	    SD_Initialize();
 8001756:	f000 fb0d 	bl	8001d74 <SD_Initialize>

	    // Register the file system object to the FatFs module
	    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 800175a:	2200      	movs	r2, #0
 800175c:	4906      	ldr	r1, [pc, #24]	@ (8001778 <smart_watch_init+0x40>)
 800175e:	4808      	ldr	r0, [pc, #32]	@ (8001780 <smart_watch_init+0x48>)
 8001760:	f00b ff2c 	bl	800d5bc <f_mount>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <smart_watch_init+0x38>
	    {

	    	while(1);
 800176a:	bf00      	nop
 800176c:	e7fd      	b.n	800176a <smart_watch_init+0x32>

  	}
	else
	{

		while(1);
 800176e:	e7fe      	b.n	800176e <smart_watch_init+0x36>

	}

}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2400cf18 	.word	0x2400cf18
 8001778:	2408a02c 	.word	0x2408a02c
 800177c:	0800f204 	.word	0x0800f204
 8001780:	2400ca70 	.word	0x2400ca70

08001784 <smart_watch_test_mjpeg>:

}


int smart_watch_test_mjpeg(void)
{
 8001784:	b5b0      	push	{r4, r5, r7, lr}
 8001786:	b08a      	sub	sp, #40	@ 0x28
 8001788:	af02      	add	r7, sp, #8
	unsigned long tempStart;
	unsigned long tempStop;
	unsigned long tempDiff[3];


	file_handler(0);
 800178a:	2000      	movs	r0, #0
 800178c:	f000 f9bc 	bl	8001b08 <file_handler>

	for(int i = 0 ; i < 100 ; i++)
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
 8001794:	e0c6      	b.n	8001924 <smart_watch_test_mjpeg+0x1a0>
	{

		video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	4968      	ldr	r1, [pc, #416]	@ (800193c <smart_watch_test_mjpeg+0x1b8>)
 800179a:	4869      	ldr	r0, [pc, #420]	@ (8001940 <smart_watch_test_mjpeg+0x1bc>)
 800179c:	f7ff f85c 	bl	8000858 <AVI_GetFrame>
 80017a0:	4603      	mov	r3, r0
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	4b67      	ldr	r3, [pc, #412]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 80017a6:	70da      	strb	r2, [r3, #3]

		if(video.FrameType == AVI_VIDEO_FRAME)
 80017a8:	4b66      	ldr	r3, [pc, #408]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 80017aa:	78db      	ldrb	r3, [r3, #3]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	f040 80a5 	bne.w	80018fc <smart_watch_test_mjpeg+0x178>
		{

			AVI_Handel.CurrentImage++;
 80017b2:	4b63      	ldr	r3, [pc, #396]	@ (8001940 <smart_watch_test_mjpeg+0x1bc>)
 80017b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b6:	3301      	adds	r3, #1
 80017b8:	4a61      	ldr	r2, [pc, #388]	@ (8001940 <smart_watch_test_mjpeg+0x1bc>)
 80017ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
			video.frameCount++;
 80017bc:	4b61      	ldr	r3, [pc, #388]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	3301      	adds	r3, #1
 80017c2:	4a60      	ldr	r2, [pc, #384]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 80017c4:	60d3      	str	r3, [r2, #12]

			// Decode the frame inside MJPEG_VideoBuffer and put it into jpegOutDataAdreess in the format YCrCb
			if(JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess) < 0)
 80017c6:	4960      	ldr	r1, [pc, #384]	@ (8001948 <smart_watch_test_mjpeg+0x1c4>)
 80017c8:	4b5d      	ldr	r3, [pc, #372]	@ (8001940 <smart_watch_test_mjpeg+0x1bc>)
 80017ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017cc:	4b5d      	ldr	r3, [pc, #372]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	485e      	ldr	r0, [pc, #376]	@ (800194c <smart_watch_test_mjpeg+0x1c8>)
 80017d2:	f7ff fc23 	bl	800101c <JPEG_Decode_DMA>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	da05      	bge.n	80017e8 <smart_watch_test_mjpeg+0x64>
			{

				f_close(&MJPEG_File);
 80017dc:	4857      	ldr	r0, [pc, #348]	@ (800193c <smart_watch_test_mjpeg+0x1b8>)
 80017de:	f00c fc1f 	bl	800e020 <f_close>

				return -1;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	e0a5      	b.n	8001934 <smart_watch_test_mjpeg+0x1b0>

			}

			while(Jpeg_HWDecodingEnd == 0);
 80017e8:	bf00      	nop
 80017ea:	4b59      	ldr	r3, [pc, #356]	@ (8001950 <smart_watch_test_mjpeg+0x1cc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0fb      	beq.n	80017ea <smart_watch_test_mjpeg+0x66>

			if(video.isfirstFrame == 1)
 80017f2:	4b54      	ldr	r3, [pc, #336]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 80017f4:	789b      	ldrb	r3, [r3, #2]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d136      	bne.n	8001868 <smart_watch_test_mjpeg+0xe4>
			{

				video.isfirstFrame = 0;
 80017fa:	4b52      	ldr	r3, [pc, #328]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	709a      	strb	r2, [r3, #2]

				HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8001800:	4954      	ldr	r1, [pc, #336]	@ (8001954 <smart_watch_test_mjpeg+0x1d0>)
 8001802:	4852      	ldr	r0, [pc, #328]	@ (800194c <smart_watch_test_mjpeg+0x1c8>)
 8001804:	f001 fcfc 	bl	8003200 <HAL_JPEG_GetInfo>

				DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 8001808:	4b52      	ldr	r3, [pc, #328]	@ (8001954 <smart_watch_test_mjpeg+0x1d0>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4a51      	ldr	r2, [pc, #324]	@ (8001954 <smart_watch_test_mjpeg+0x1d0>)
 8001810:	6892      	ldr	r2, [r2, #8]
 8001812:	b291      	uxth	r1, r2
 8001814:	4a4f      	ldr	r2, [pc, #316]	@ (8001954 <smart_watch_test_mjpeg+0x1d0>)
 8001816:	6852      	ldr	r2, [r2, #4]
 8001818:	4618      	mov	r0, r3
 800181a:	f000 f9f3 	bl	8001c04 <DMA2D_Init>

				video.width = JPEG_Info.ImageWidth;
 800181e:	4b4d      	ldr	r3, [pc, #308]	@ (8001954 <smart_watch_test_mjpeg+0x1d0>)
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	b29a      	uxth	r2, r3
 8001824:	4b47      	ldr	r3, [pc, #284]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 8001826:	809a      	strh	r2, [r3, #4]
				video.height = JPEG_Info.ImageHeight;
 8001828:	4b4a      	ldr	r3, [pc, #296]	@ (8001954 <smart_watch_test_mjpeg+0x1d0>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	b29a      	uxth	r2, r3
 800182e:	4b45      	ldr	r3, [pc, #276]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 8001830:	80da      	strh	r2, [r3, #6]
				video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 8001832:	4b44      	ldr	r3, [pc, #272]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 8001834:	889b      	ldrh	r3, [r3, #4]
 8001836:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800183a:	2b00      	cmp	r3, #0
 800183c:	da00      	bge.n	8001840 <smart_watch_test_mjpeg+0xbc>
 800183e:	3301      	adds	r3, #1
 8001840:	105b      	asrs	r3, r3, #1
 8001842:	b29a      	uxth	r2, r3
 8001844:	4b3f      	ldr	r3, [pc, #252]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 8001846:	811a      	strh	r2, [r3, #8]
				video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 8001848:	4b3e      	ldr	r3, [pc, #248]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 800184a:	88db      	ldrh	r3, [r3, #6]
 800184c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001850:	2b00      	cmp	r3, #0
 8001852:	da00      	bge.n	8001856 <smart_watch_test_mjpeg+0xd2>
 8001854:	3301      	adds	r3, #1
 8001856:	105b      	asrs	r3, r3, #1
 8001858:	b29a      	uxth	r2, r3
 800185a:	4b3a      	ldr	r3, [pc, #232]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 800185c:	815a      	strh	r2, [r3, #10]

				video.frame_time = AVI_Handel.aviInfo.SecPerFrame;
 800185e:	4b38      	ldr	r3, [pc, #224]	@ (8001940 <smart_watch_test_mjpeg+0x1bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	b29a      	uxth	r2, r3
 8001864:	4b37      	ldr	r3, [pc, #220]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 8001866:	829a      	strh	r2, [r3, #20]

			}

			// Copies the output frame into LCD_FRAME_BUFFER and does the conversion from YCrCb to RGB888
			DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)output_data, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8001868:	4b36      	ldr	r3, [pc, #216]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	4618      	mov	r0, r3
 800186e:	4b39      	ldr	r3, [pc, #228]	@ (8001954 <smart_watch_test_mjpeg+0x1d0>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	b29a      	uxth	r2, r3
 8001874:	4b37      	ldr	r3, [pc, #220]	@ (8001954 <smart_watch_test_mjpeg+0x1d0>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4937      	ldr	r1, [pc, #220]	@ (8001958 <smart_watch_test_mjpeg+0x1d4>)
 800187c:	f000 fa40 	bl	8001d00 <DMA2D_CopyBuffer>

			doubleFormat pOut;
			pOut.u8Arr = (uint8_t *)output_data;
 8001880:	4b35      	ldr	r3, [pc, #212]	@ (8001958 <smart_watch_test_mjpeg+0x1d4>)
 8001882:	607b      	str	r3, [r7, #4]

			tempStart = HAL_GetTick();
 8001884:	f000 fe4c 	bl	8002520 <HAL_GetTick>
 8001888:	61b8      	str	r0, [r7, #24]

			depth24To16(&pOut, ( video.width * video.height ), 3, swap);
 800188a:	4b2e      	ldr	r3, [pc, #184]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 800188c:	889a      	ldrh	r2, [r3, #4]
 800188e:	4b2d      	ldr	r3, [pc, #180]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 8001890:	88db      	ldrh	r3, [r3, #6]
 8001892:	fb12 f303 	smulbb	r3, r2, r3
 8001896:	b299      	uxth	r1, r3
 8001898:	4b30      	ldr	r3, [pc, #192]	@ (800195c <smart_watch_test_mjpeg+0x1d8>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	1d38      	adds	r0, r7, #4
 800189e:	2203      	movs	r2, #3
 80018a0:	f000 f8ac 	bl	80019fc <depth24To16>

			tempStop = HAL_GetTick();
 80018a4:	f000 fe3c 	bl	8002520 <HAL_GetTick>
 80018a8:	6178      	str	r0, [r7, #20]
			tempDiff[0] = ( ( tempStop - tempStart ) );
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	60bb      	str	r3, [r7, #8]

			if(lcd_draw(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr, swap) < 0)
 80018b2:	4b24      	ldr	r3, [pc, #144]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 80018b4:	8918      	ldrh	r0, [r3, #8]
 80018b6:	4b23      	ldr	r3, [pc, #140]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 80018b8:	8959      	ldrh	r1, [r3, #10]
 80018ba:	4b22      	ldr	r3, [pc, #136]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 80018bc:	889c      	ldrh	r4, [r3, #4]
 80018be:	4b21      	ldr	r3, [pc, #132]	@ (8001944 <smart_watch_test_mjpeg+0x1c0>)
 80018c0:	88dd      	ldrh	r5, [r3, #6]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a25      	ldr	r2, [pc, #148]	@ (800195c <smart_watch_test_mjpeg+0x1d8>)
 80018c6:	7812      	ldrb	r2, [r2, #0]
 80018c8:	9201      	str	r2, [sp, #4]
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	462b      	mov	r3, r5
 80018ce:	4622      	mov	r2, r4
 80018d0:	f000 f846 	bl	8001960 <lcd_draw>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	da05      	bge.n	80018e6 <smart_watch_test_mjpeg+0x162>
			{

				f_close(&MJPEG_File);
 80018da:	4818      	ldr	r0, [pc, #96]	@ (800193c <smart_watch_test_mjpeg+0x1b8>)
 80018dc:	f00c fba0 	bl	800e020 <f_close>

				return -1;
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295
 80018e4:	e026      	b.n	8001934 <smart_watch_test_mjpeg+0x1b0>

			}

			swap = ( ( swap ) ? 0 : 1 );
 80018e6:	4b1d      	ldr	r3, [pc, #116]	@ (800195c <smart_watch_test_mjpeg+0x1d8>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	bf0c      	ite	eq
 80018ee:	2301      	moveq	r3, #1
 80018f0:	2300      	movne	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b19      	ldr	r3, [pc, #100]	@ (800195c <smart_watch_test_mjpeg+0x1d8>)
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	e005      	b.n	8001908 <smart_watch_test_mjpeg+0x184>

		}
		else
		{

			f_close(&MJPEG_File);
 80018fc:	480f      	ldr	r0, [pc, #60]	@ (800193c <smart_watch_test_mjpeg+0x1b8>)
 80018fe:	f00c fb8f 	bl	800e020 <f_close>

			return -1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e015      	b.n	8001934 <smart_watch_test_mjpeg+0x1b0>

		}

		tempStop = HAL_GetTick();
 8001908:	f000 fe0a 	bl	8002520 <HAL_GetTick>
 800190c:	6178      	str	r0, [r7, #20]
		tempDiff[1] = ( ( tempStop - tempStart ) - tempDiff[0]);
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	1ad2      	subs	r2, r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	60fb      	str	r3, [r7, #12]

		tempDiff[2] = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
	for(int i = 0 ; i < 100 ; i++)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3301      	adds	r3, #1
 8001922:	61fb      	str	r3, [r7, #28]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	2b63      	cmp	r3, #99	@ 0x63
 8001928:	f77f af35 	ble.w	8001796 <smart_watch_test_mjpeg+0x12>

	}

	f_close(&MJPEG_File);
 800192c:	4803      	ldr	r0, [pc, #12]	@ (800193c <smart_watch_test_mjpeg+0x1b8>)
 800192e:	f00c fb77 	bl	800e020 <f_close>

	return 1;
 8001932:	2301      	movs	r3, #1

}
 8001934:	4618      	mov	r0, r3
 8001936:	3720      	adds	r7, #32
 8001938:	46bd      	mov	sp, r7
 800193a:	bdb0      	pop	{r4, r5, r7, pc}
 800193c:	2400cca0 	.word	0x2400cca0
 8001940:	2400ced0 	.word	0x2400ced0
 8001944:	2400cf18 	.word	0x2400cf18
 8001948:	24000270 	.word	0x24000270
 800194c:	2400019c 	.word	0x2400019c
 8001950:	24000084 	.word	0x24000084
 8001954:	2400025c 	.word	0x2400025c
 8001958:	24057f48 	.word	0x24057f48
 800195c:	24089f48 	.word	0x24089f48

08001960 <lcd_draw>:


int lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data, uint8_t swap)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	4604      	mov	r4, r0
 8001968:	4608      	mov	r0, r1
 800196a:	4611      	mov	r1, r2
 800196c:	461a      	mov	r2, r3
 800196e:	4623      	mov	r3, r4
 8001970:	80fb      	strh	r3, [r7, #6]
 8001972:	4603      	mov	r3, r0
 8001974:	80bb      	strh	r3, [r7, #4]
 8001976:	460b      	mov	r3, r1
 8001978:	807b      	strh	r3, [r7, #2]
 800197a:	4613      	mov	r3, r2
 800197c:	803b      	strh	r3, [r7, #0]

	   struct GC9A01_frame frame;

	   int ret = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]


	   // Only half of the frame is handled per time
	   // Alternate the top and bottom half every cycle
	   if(swap)
 8001982:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001986:	2b00      	cmp	r3, #0
 8001988:	d008      	beq.n	800199c <lcd_draw+0x3c>
	   {

	       frame.start.X = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	813b      	strh	r3, [r7, #8]
	       frame.start.Y = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	817b      	strh	r3, [r7, #10]
	       frame.end.X = 239;
 8001992:	23ef      	movs	r3, #239	@ 0xef
 8001994:	81bb      	strh	r3, [r7, #12]
	       frame.end.Y = 119;
 8001996:	2377      	movs	r3, #119	@ 0x77
 8001998:	81fb      	strh	r3, [r7, #14]
 800199a:	e00b      	b.n	80019b4 <lcd_draw+0x54>

	   }
	   else
	   {

		   data += ( 240 * 240 );
 800199c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800199e:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 80019a2:	62bb      	str	r3, [r7, #40]	@ 0x28

	       frame.start.X = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	813b      	strh	r3, [r7, #8]
	       frame.start.Y = 120;
 80019a8:	2378      	movs	r3, #120	@ 0x78
 80019aa:	817b      	strh	r3, [r7, #10]
	       frame.end.X = 239;
 80019ac:	23ef      	movs	r3, #239	@ 0xef
 80019ae:	81bb      	strh	r3, [r7, #12]
	       frame.end.Y = 239;
 80019b0:	23ef      	movs	r3, #239	@ 0xef
 80019b2:	81fb      	strh	r3, [r7, #14]

	   }

	   // Sends the block of data in a single time

	   GC9A01_set_frame(frame);
 80019b4:	f107 0308 	add.w	r3, r7, #8
 80019b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019bc:	f7ff facf 	bl	8000f5e <GC9A01_set_frame>
	   GC9A01_write_command(MEM_WR);
 80019c0:	202c      	movs	r0, #44	@ 0x2c
 80019c2:	f7ff f84b 	bl	8000a5c <GC9A01_write_command>

	   GC9A01_set_data_command(ON);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f7ff f814 	bl	80009f4 <GC9A01_set_data_command>
	   GC9A01_set_chip_select(OFF);
 80019cc:	2000      	movs	r0, #0
 80019ce:	f7ff f82b 	bl	8000a28 <GC9A01_set_chip_select>

	   uint32_t total_bytes = wd * ht;		// 2 byte per pixel
 80019d2:	887b      	ldrh	r3, [r7, #2]
 80019d4:	883a      	ldrh	r2, [r7, #0]
 80019d6:	fb02 f303 	mul.w	r3, r2, r3
 80019da:	613b      	str	r3, [r7, #16]
	   ret = GC9A01_spi_tx(data, total_bytes);
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4619      	mov	r1, r3
 80019e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80019e4:	f7ff faf8 	bl	8000fd8 <GC9A01_spi_tx>
 80019e8:	6178      	str	r0, [r7, #20]

	   GC9A01_set_chip_select(ON);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f7ff f81c 	bl	8000a28 <GC9A01_set_chip_select>

	   return ret;
 80019f0:	697b      	ldr	r3, [r7, #20]

}
 80019f2:	4618      	mov	r0, r3
 80019f4:	371c      	adds	r7, #28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd90      	pop	{r4, r7, pc}
	...

080019fc <depth24To16>:


////////////////////////////////////////////////////// PRIVATE FUNCTIONS

static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx, uint8_t swap)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	4608      	mov	r0, r1
 8001a06:	4611      	mov	r1, r2
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	807b      	strh	r3, [r7, #2]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	707b      	strb	r3, [r7, #1]
 8001a12:	4613      	mov	r3, r2
 8001a14:	703b      	strb	r3, [r7, #0]

	uint8_t b;
	uint8_t g;
	uint8_t r;

	int i = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]

	// Only half of the frame is handled per time
	// Alternate the top and bottom half every cycle
    if(swap)
 8001a1a:	783b      	ldrb	r3, [r7, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d009      	beq.n	8001a34 <depth24To16+0x38>
    {

    	i = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
    	length /= 2;
 8001a24:	887b      	ldrh	r3, [r7, #2]
 8001a26:	085b      	lsrs	r3, r3, #1
 8001a28:	807b      	strh	r3, [r7, #2]
    	length += 1000;
 8001a2a:	887b      	ldrh	r3, [r7, #2]
 8001a2c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001a30:	807b      	strh	r3, [r7, #2]
 8001a32:	e05b      	b.n	8001aec <depth24To16+0xf0>

    }
    else
    {

    	i = ( length / 2 ) - 2000;
 8001a34:	887b      	ldrh	r3, [r7, #2]
 8001a36:	085b      	lsrs	r3, r3, #1
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001a3e:	60fb      	str	r3, [r7, #12]

    }

	for( ; i < length ; i++)
 8001a40:	e054      	b.n	8001aec <depth24To16+0xf0>
	{

		b = pxArr->u8Arr[i*bpx];
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	787a      	ldrb	r2, [r7, #1]
 8001a48:	68f9      	ldr	r1, [r7, #12]
 8001a4a:	fb01 f202 	mul.w	r2, r1, r2
 8001a4e:	4413      	add	r3, r2
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	72fb      	strb	r3, [r7, #11]
		g = pxArr->u8Arr[i*bpx+1];
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	787b      	ldrb	r3, [r7, #1]
 8001a5a:	68f9      	ldr	r1, [r7, #12]
 8001a5c:	fb01 f303 	mul.w	r3, r1, r3
 8001a60:	3301      	adds	r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	72bb      	strb	r3, [r7, #10]
		r = pxArr->u8Arr[i*bpx+2];
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	787b      	ldrb	r3, [r7, #1]
 8001a6e:	68f9      	ldr	r1, [r7, #12]
 8001a70:	fb01 f303 	mul.w	r3, r1, r3
 8001a74:	3302      	adds	r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	727b      	strb	r3, [r7, #9]

		pxArr->u16Arr[i] = color565(r, g, b);
 8001a7c:	7a7b      	ldrb	r3, [r7, #9]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	4b20      	ldr	r3, [pc, #128]	@ (8001b04 <depth24To16+0x108>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	b21a      	sxth	r2, r3
 8001a88:	7abb      	ldrb	r3, [r7, #10]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	b21b      	sxth	r3, r3
 8001a8e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001a92:	b21b      	sxth	r3, r3
 8001a94:	4313      	orrs	r3, r2
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	7afb      	ldrb	r3, [r7, #11]
 8001a9a:	08db      	lsrs	r3, r3, #3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b219      	sxth	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	b28a      	uxth	r2, r1
 8001ab0:	801a      	strh	r2, [r3, #0]
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	b21a      	sxth	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6819      	ldr	r1, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	440b      	add	r3, r1
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	0a1b      	lsrs	r3, r3, #8
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	b219      	sxth	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b28a      	uxth	r2, r1
 8001ae4:	801a      	strh	r2, [r3, #0]
	for( ; i < length ; i++)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	887b      	ldrh	r3, [r7, #2]
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dba6      	blt.n	8001a42 <depth24To16+0x46>

	}

}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	fffff800 	.word	0xfffff800

08001b08 <file_handler>:

}


static void file_handler(uint8_t openFile)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
	  // Each file takes 30m

     static uint8_t  new_file_flag = 1;


     if(new_file_flag || openFile)
 8001b12:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <file_handler+0x70>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <file_handler+0x18>
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d024      	beq.n	8001b6a <file_handler+0x62>
     {

    	 if(openFile)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <file_handler+0x24>
    		 f_close(&MJPEG_File);
 8001b26:	4815      	ldr	r0, [pc, #84]	@ (8001b7c <file_handler+0x74>)
 8001b28:	f00c fa7a 	bl	800e020 <f_close>

    	 new_file_flag = 0;
 8001b2c:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <file_handler+0x70>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]

    	 // Open the MJPEG avi file with read access
    	 if(f_open(&MJPEG_File, "a000.avi", FA_READ) == FR_OK)
 8001b32:	2201      	movs	r2, #1
 8001b34:	4912      	ldr	r1, [pc, #72]	@ (8001b80 <file_handler+0x78>)
 8001b36:	4811      	ldr	r0, [pc, #68]	@ (8001b7c <file_handler+0x74>)
 8001b38:	f00b fd86 	bl	800d648 <f_open>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d112      	bne.n	8001b68 <file_handler+0x60>
    	 {

    		 video.isfirstFrame = 1;
 8001b42:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <file_handler+0x7c>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	709a      	strb	r2, [r3, #2]

    		 // parse the AVI file Header
    		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b88 <file_handler+0x80>)
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8001b54:	4a0d      	ldr	r2, [pc, #52]	@ (8001b8c <file_handler+0x84>)
 8001b56:	4909      	ldr	r1, [pc, #36]	@ (8001b7c <file_handler+0x74>)
 8001b58:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <file_handler+0x88>)
 8001b5a:	f7fe fe3d 	bl	80007d8 <AVI_ParserInit>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <file_handler+0x62>
    			 while(1);
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <file_handler+0x5c>

    	 }
    	 else
    	 {

    		 while(1);
 8001b68:	e7fe      	b.n	8001b68 <file_handler+0x60>

     }

     //f_close(&MJPEG_File);

     new_file_flag = 1;
 8001b6a:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <file_handler+0x70>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]

}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	24000000 	.word	0x24000000
 8001b7c:	2400cca0 	.word	0x2400cca0
 8001b80:	0800ef3c 	.word	0x0800ef3c
 8001b84:	2400cf18 	.word	0x2400cf18
 8001b88:	2400ca70 	.word	0x2400ca70
 8001b8c:	24000270 	.word	0x24000270
 8001b90:	2400ced0 	.word	0x2400ced0

08001b94 <parameters_reset>:


static void parameters_reset(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

	video.width = 0;
 8001b98:	4b18      	ldr	r3, [pc, #96]	@ (8001bfc <parameters_reset+0x68>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	809a      	strh	r2, [r3, #4]
	video.height = 0;
 8001b9e:	4b17      	ldr	r3, [pc, #92]	@ (8001bfc <parameters_reset+0x68>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	80da      	strh	r2, [r3, #6]
	video.xPos = 0;
 8001ba4:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <parameters_reset+0x68>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	811a      	strh	r2, [r3, #8]
	video.yPos = 0;
 8001baa:	4b14      	ldr	r3, [pc, #80]	@ (8001bfc <parameters_reset+0x68>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	815a      	strh	r2, [r3, #10]

	video.file_idx = 0;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	@ (8001bfc <parameters_reset+0x68>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	801a      	strh	r2, [r3, #0]
	video.FrameType = 0;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	@ (8001bfc <parameters_reset+0x68>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	70da      	strb	r2, [r3, #3]

	video.frameToSkip = 0;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001bfc <parameters_reset+0x68>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
	video.frame_time = 0;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bfc <parameters_reset+0x68>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	829a      	strh	r2, [r3, #20]
	video.actual_time = 0;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bfc <parameters_reset+0x68>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	619a      	str	r2, [r3, #24]
	video.tick_offset = 0;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <parameters_reset+0x68>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	61da      	str	r2, [r3, #28]
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c00 <parameters_reset+0x6c>)
 8001bd6:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <parameters_reset+0x68>)
 8001bd8:	621a      	str	r2, [r3, #32]

	video.display_status = DISPLAY_ON;
 8001bda:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <parameters_reset+0x68>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

	video.frameCount = 0;
 8001be2:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <parameters_reset+0x68>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	60da      	str	r2, [r3, #12]

	//video.video_mode = NORMAL_MODE;
	video.set = SET_IDLE;
 8001be8:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <parameters_reset+0x68>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	2400cf18 	.word	0x2400cf18
 8001c00:	2400cf48 	.word	0x2400cf48

08001c04 <DMA2D_Init>:

static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	603a      	str	r2, [r7, #0]
 8001c0e:	80fb      	strh	r3, [r7, #6]
 8001c10:	460b      	mov	r3, r1
 8001c12:	80bb      	strh	r3, [r7, #4]

  uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 8001c14:	2301      	movs	r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]


  HAL_DMA2D_MspInit(&DMA2D_Handle);
 8001c1c:	4836      	ldr	r0, [pc, #216]	@ (8001cf8 <DMA2D_Init+0xf4>)
 8001c1e:	f000 f8c9 	bl	8001db4 <HAL_DMA2D_MspInit>

  if(ChromaSampling == JPEG_420_SUBSAMPLING)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d10d      	bne.n	8001c44 <DMA2D_Init+0x40>
  {

    cssMode = DMA2D_CSS_420;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 8001c2c:	88fb      	ldrh	r3, [r7, #6]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d025      	beq.n	8001c86 <DMA2D_Init+0x82>
    {

      inputLineOffset = 16 - inputLineOffset;
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f1c3 0310 	rsb	r3, r3, #16
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	e020      	b.n	8001c86 <DMA2D_Init+0x82>

    }

  }
  else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10d      	bne.n	8001c66 <DMA2D_Init+0x62>
  {

    cssMode = DMA2D_NO_CSS;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 8;
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d014      	beq.n	8001c86 <DMA2D_Init+0x82>
    {

      inputLineOffset = 8 - inputLineOffset;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f1c3 0308 	rsb	r3, r3, #8
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	e00f      	b.n	8001c86 <DMA2D_Init+0x82>

    }

  }
  else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d10c      	bne.n	8001c86 <DMA2D_Init+0x82>
  {

    cssMode = DMA2D_CSS_422;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <DMA2D_Init+0x82>
    {

      inputLineOffset = 16 - inputLineOffset;
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f1c3 0310 	rsb	r3, r3, #16
 8001c84:	60bb      	str	r3, [r7, #8]
    }

  }

  // Configure the DMA2D Mode, Color Mode and output offset
  DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 8001c86:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <DMA2D_Init+0xf4>)
 8001c88:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c8c:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf8 <DMA2D_Init+0xf4>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b16      	ldr	r3, [pc, #88]	@ (8001cf8 <DMA2D_Init+0xf4>)
 8001c9e:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  // No Output Alpha Inversion
 8001ca0:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <DMA2D_Init+0xf4>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     // No Output Red & Blue swap
 8001ca6:	4b14      	ldr	r3, [pc, #80]	@ (8001cf8 <DMA2D_Init+0xf4>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	615a      	str	r2, [r3, #20]

  // DMA2D Callbacks Configuration
  DMA2D_Handle.XferCpltCallback  = NULL;
 8001cac:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <DMA2D_Init+0xf4>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	621a      	str	r2, [r3, #32]

  // Foreground Configuration
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <DMA2D_Init+0xf4>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <DMA2D_Init+0xf4>)
 8001cba:	22ff      	movs	r2, #255	@ 0xff
 8001cbc:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf8 <DMA2D_Init+0xf4>)
 8001cc0:	220b      	movs	r2, #11
 8001cc2:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 8001cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf8 <DMA2D_Init+0xf4>)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	65d3      	str	r3, [r2, #92]	@ 0x5c
  DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 8001cca:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf8 <DMA2D_Init+0xf4>)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	6453      	str	r3, [r2, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; 		// No ForeGround Red/Blue swap
 8001cd0:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <DMA2D_Init+0xf4>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion
 8001cd6:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <DMA2D_Init+0xf4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	655a      	str	r2, [r3, #84]	@ 0x54

  DMA2D_Handle.Instance = DMA2D;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <DMA2D_Init+0xf4>)
 8001cde:	4a07      	ldr	r2, [pc, #28]	@ (8001cfc <DMA2D_Init+0xf8>)
 8001ce0:	601a      	str	r2, [r3, #0]

  // DMA2D Initialization
  HAL_DMA2D_Init(&DMA2D_Handle);
 8001ce2:	4805      	ldr	r0, [pc, #20]	@ (8001cf8 <DMA2D_Init+0xf4>)
 8001ce4:	f000 fd5c 	bl	80027a0 <HAL_DMA2D_Init>
  HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4803      	ldr	r0, [pc, #12]	@ (8001cf8 <DMA2D_Init+0xf4>)
 8001cec:	f000 fed0 	bl	8002a90 <HAL_DMA2D_ConfigLayer>

}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	240001f4 	.word	0x240001f4
 8001cfc:	52001000 	.word	0x52001000

08001d00 <DMA2D_CopyBuffer>:


static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t ImageWidth, uint16_t ImageHeight)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	@ 0x28
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	460b      	mov	r3, r1
 8001d10:	80fb      	strh	r3, [r7, #6]
 8001d12:	4613      	mov	r3, r2
 8001d14:	80bb      	strh	r3, [r7, #4]

  uint32_t xPos, yPos, destination;


  // calculate the destination transfer address
  xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 8001d16:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <DMA2D_CopyBuffer+0x6c>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001d1e:	085b      	lsrs	r3, r3, #1
 8001d20:	61fb      	str	r3, [r7, #28]
  yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 8001d22:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <DMA2D_CopyBuffer+0x6c>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001d2a:	085b      	lsrs	r3, r3, #1
 8001d2c:	61bb      	str	r3, [r7, #24]

  destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4613      	mov	r3, r2
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	1a9b      	subs	r3, r3, r2
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	461a      	mov	r2, r3
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009a      	lsls	r2, r3, #2
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	4413      	add	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]

  // wait for the DMA2D transfer to ends
  HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8001d46:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4a:	4809      	ldr	r0, [pc, #36]	@ (8001d70 <DMA2D_CopyBuffer+0x70>)
 8001d4c:	f000 fdb7 	bl	80028be <HAL_DMA2D_PollForTransfer>
  // copy the new decoded frame to the LCD Frame buffer
  HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 8001d50:	68f9      	ldr	r1, [r7, #12]
 8001d52:	88fa      	ldrh	r2, [r7, #6]
 8001d54:	88bb      	ldrh	r3, [r7, #4]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4804      	ldr	r0, [pc, #16]	@ (8001d70 <DMA2D_CopyBuffer+0x70>)
 8001d5e:	f000 fd83 	bl	8002868 <HAL_DMA2D_Start>

}
 8001d62:	bf00      	nop
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2400025c 	.word	0x2400025c
 8001d70:	240001f4 	.word	0x240001f4

08001d74 <SD_Initialize>:


static void SD_Initialize(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0

  BSP_SD_Init();
 8001d78:	f009 fd58 	bl	800b82c <BSP_SD_Init>

}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d86:	4b0a      	ldr	r3, [pc, #40]	@ (8001db0 <HAL_MspInit+0x30>)
 8001d88:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001d8c:	4a08      	ldr	r2, [pc, #32]	@ (8001db0 <HAL_MspInit+0x30>)
 8001d8e:	f043 0302 	orr.w	r3, r3, #2
 8001d92:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <HAL_MspInit+0x30>)
 8001d98:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	58024400 	.word	0x58024400

08001db4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8001df0 <HAL_DMA2D_MspInit+0x3c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d10e      	bne.n	8001de4 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <HAL_DMA2D_MspInit+0x40>)
 8001dc8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001dcc:	4a09      	ldr	r2, [pc, #36]	@ (8001df4 <HAL_DMA2D_MspInit+0x40>)
 8001dce:	f043 0310 	orr.w	r3, r3, #16
 8001dd2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8001dd6:	4b07      	ldr	r3, [pc, #28]	@ (8001df4 <HAL_DMA2D_MspInit+0x40>)
 8001dd8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	52001000 	.word	0x52001000
 8001df4:	58024400 	.word	0x58024400

08001df8 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	  static MDMA_HandleTypeDef   hmdmaIn;
	  static MDMA_HandleTypeDef   hmdmaOut;


	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8001e00:	4b54      	ldr	r3, [pc, #336]	@ (8001f54 <HAL_JPEG_MspInit+0x15c>)
 8001e02:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001e06:	4a53      	ldr	r2, [pc, #332]	@ (8001f54 <HAL_JPEG_MspInit+0x15c>)
 8001e08:	f043 0320 	orr.w	r3, r3, #32
 8001e0c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8001e10:	4b50      	ldr	r3, [pc, #320]	@ (8001f54 <HAL_JPEG_MspInit+0x15c>)
 8001e12:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]

	  __HAL_RCC_MDMA_CLK_ENABLE();
 8001e1e:	4b4d      	ldr	r3, [pc, #308]	@ (8001f54 <HAL_JPEG_MspInit+0x15c>)
 8001e20:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001e24:	4a4b      	ldr	r2, [pc, #300]	@ (8001f54 <HAL_JPEG_MspInit+0x15c>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8001e2e:	4b49      	ldr	r3, [pc, #292]	@ (8001f54 <HAL_JPEG_MspInit+0x15c>)
 8001e30:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]

	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 8001e3c:	220f      	movs	r2, #15
 8001e3e:	2107      	movs	r1, #7
 8001e40:	2079      	movs	r0, #121	@ 0x79
 8001e42:	f000 fc78 	bl	8002736 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001e46:	2079      	movs	r0, #121	@ 0x79
 8001e48:	f000 fc8f 	bl	800276a <HAL_NVIC_EnableIRQ>

	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 8001e4c:	4b42      	ldr	r3, [pc, #264]	@ (8001f58 <HAL_JPEG_MspInit+0x160>)
 8001e4e:	2280      	movs	r2, #128	@ 0x80
 8001e50:	60da      	str	r2, [r3, #12]
	  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001e52:	4b41      	ldr	r3, [pc, #260]	@ (8001f58 <HAL_JPEG_MspInit+0x160>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
	  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 8001e58:	4b3f      	ldr	r3, [pc, #252]	@ (8001f58 <HAL_JPEG_MspInit+0x160>)
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	615a      	str	r2, [r3, #20]
	  hmdmaIn.Init.DestinationInc     = MDMA_DEST_INC_DISABLE;
 8001e5e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f58 <HAL_JPEG_MspInit+0x160>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
	  hmdmaIn.Init.SourceDataSize     = MDMA_SRC_DATASIZE_BYTE;
 8001e64:	4b3c      	ldr	r3, [pc, #240]	@ (8001f58 <HAL_JPEG_MspInit+0x160>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
	  hmdmaIn.Init.DestDataSize       = MDMA_DEST_DATASIZE_WORD;
 8001e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f58 <HAL_JPEG_MspInit+0x160>)
 8001e6c:	2280      	movs	r2, #128	@ 0x80
 8001e6e:	621a      	str	r2, [r3, #32]
	  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;
 8001e70:	4b39      	ldr	r3, [pc, #228]	@ (8001f58 <HAL_JPEG_MspInit+0x160>)
 8001e72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e76:	625a      	str	r2, [r3, #36]	@ 0x24
	  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 8001e78:	4b37      	ldr	r3, [pc, #220]	@ (8001f58 <HAL_JPEG_MspInit+0x160>)
 8001e7a:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8001e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hmdmaIn.Init.DestBurst          = MDMA_DEST_BURST_16BEATS;
 8001e80:	4b35      	ldr	r3, [pc, #212]	@ (8001f58 <HAL_JPEG_MspInit+0x160>)
 8001e82:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e86:	631a      	str	r2, [r3, #48]	@ 0x30
	  hmdmaIn.Init.SourceBlockAddressOffset = 0;
 8001e88:	4b33      	ldr	r3, [pc, #204]	@ (8001f58 <HAL_JPEG_MspInit+0x160>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	635a      	str	r2, [r3, #52]	@ 0x34
	  hmdmaIn.Init.DestBlockAddressOffset  = 0;
 8001e8e:	4b32      	ldr	r3, [pc, #200]	@ (8001f58 <HAL_JPEG_MspInit+0x160>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	639a      	str	r2, [r3, #56]	@ 0x38

	  hmdmaIn.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001e94:	4b30      	ldr	r3, [pc, #192]	@ (8001f58 <HAL_JPEG_MspInit+0x160>)
 8001e96:	2211      	movs	r2, #17
 8001e98:	605a      	str	r2, [r3, #4]
	  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f58 <HAL_JPEG_MspInit+0x160>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
	  hmdmaIn.Init.BufferTransferLength = 32;
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8001f58 <HAL_JPEG_MspInit+0x160>)
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	629a      	str	r2, [r3, #40]	@ 0x28

	  hmdmaIn.Instance = MDMA_Channel1;
 8001ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8001f58 <HAL_JPEG_MspInit+0x160>)
 8001ea8:	4a2c      	ldr	r2, [pc, #176]	@ (8001f5c <HAL_JPEG_MspInit+0x164>)
 8001eaa:	601a      	str	r2, [r3, #0]

	  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a2a      	ldr	r2, [pc, #168]	@ (8001f58 <HAL_JPEG_MspInit+0x160>)
 8001eb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001eb2:	4a29      	ldr	r2, [pc, #164]	@ (8001f58 <HAL_JPEG_MspInit+0x160>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6413      	str	r3, [r2, #64]	@ 0x40

	  HAL_MDMA_DeInit(&hmdmaIn);
 8001eb8:	4827      	ldr	r0, [pc, #156]	@ (8001f58 <HAL_JPEG_MspInit+0x160>)
 8001eba:	f002 ffef 	bl	8004e9c <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaIn);
 8001ebe:	4826      	ldr	r0, [pc, #152]	@ (8001f58 <HAL_JPEG_MspInit+0x160>)
 8001ec0:	f002 ffa0 	bl	8004e04 <HAL_MDMA_Init>

	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 8001ec4:	4b26      	ldr	r3, [pc, #152]	@ (8001f60 <HAL_JPEG_MspInit+0x168>)
 8001ec6:	22c0      	movs	r2, #192	@ 0xc0
 8001ec8:	60da      	str	r2, [r3, #12]
	  hmdmaOut.Init.Endianness      = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001eca:	4b25      	ldr	r3, [pc, #148]	@ (8001f60 <HAL_JPEG_MspInit+0x168>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
	  hmdmaOut.Init.SourceInc       = MDMA_SRC_INC_DISABLE;
 8001ed0:	4b23      	ldr	r3, [pc, #140]	@ (8001f60 <HAL_JPEG_MspInit+0x168>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	615a      	str	r2, [r3, #20]
	  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
 8001ed6:	4b22      	ldr	r3, [pc, #136]	@ (8001f60 <HAL_JPEG_MspInit+0x168>)
 8001ed8:	2208      	movs	r2, #8
 8001eda:	619a      	str	r2, [r3, #24]
	  hmdmaOut.Init.SourceDataSize  = MDMA_SRC_DATASIZE_WORD;
 8001edc:	4b20      	ldr	r3, [pc, #128]	@ (8001f60 <HAL_JPEG_MspInit+0x168>)
 8001ede:	2220      	movs	r2, #32
 8001ee0:	61da      	str	r2, [r3, #28]
	  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <HAL_JPEG_MspInit+0x168>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
	  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <HAL_JPEG_MspInit+0x168>)
 8001eea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eee:	625a      	str	r2, [r3, #36]	@ 0x24
	  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f60 <HAL_JPEG_MspInit+0x168>)
 8001ef2:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8001ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;
 8001ef8:	4b19      	ldr	r3, [pc, #100]	@ (8001f60 <HAL_JPEG_MspInit+0x168>)
 8001efa:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 8001efe:	631a      	str	r2, [r3, #48]	@ 0x30
	  hmdmaOut.Init.SourceBlockAddressOffset = 0;
 8001f00:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <HAL_JPEG_MspInit+0x168>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	635a      	str	r2, [r3, #52]	@ 0x34
	  hmdmaOut.Init.DestBlockAddressOffset  = 0;
 8001f06:	4b16      	ldr	r3, [pc, #88]	@ (8001f60 <HAL_JPEG_MspInit+0x168>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	639a      	str	r2, [r3, #56]	@ 0x38

	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8001f0c:	4b14      	ldr	r3, [pc, #80]	@ (8001f60 <HAL_JPEG_MspInit+0x168>)
 8001f0e:	2213      	movs	r2, #19
 8001f10:	605a      	str	r2, [r3, #4]
	  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;
 8001f12:	4b13      	ldr	r3, [pc, #76]	@ (8001f60 <HAL_JPEG_MspInit+0x168>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
	  hmdmaOut.Init.BufferTransferLength = 32;
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <HAL_JPEG_MspInit+0x168>)
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	629a      	str	r2, [r3, #40]	@ 0x28

	  hmdmaOut.Instance = MDMA_Channel0;
 8001f1e:	4b10      	ldr	r3, [pc, #64]	@ (8001f60 <HAL_JPEG_MspInit+0x168>)
 8001f20:	4a10      	ldr	r2, [pc, #64]	@ (8001f64 <HAL_JPEG_MspInit+0x16c>)
 8001f22:	601a      	str	r2, [r3, #0]

	  HAL_MDMA_DeInit(&hmdmaOut);
 8001f24:	480e      	ldr	r0, [pc, #56]	@ (8001f60 <HAL_JPEG_MspInit+0x168>)
 8001f26:	f002 ffb9 	bl	8004e9c <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaOut);
 8001f2a:	480d      	ldr	r0, [pc, #52]	@ (8001f60 <HAL_JPEG_MspInit+0x168>)
 8001f2c:	f002 ff6a 	bl	8004e04 <HAL_MDMA_Init>

	  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a0b      	ldr	r2, [pc, #44]	@ (8001f60 <HAL_JPEG_MspInit+0x168>)
 8001f34:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f36:	4a0a      	ldr	r2, [pc, #40]	@ (8001f60 <HAL_JPEG_MspInit+0x168>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6413      	str	r3, [r2, #64]	@ 0x40


	  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 8001f3c:	220f      	movs	r2, #15
 8001f3e:	2108      	movs	r1, #8
 8001f40:	207a      	movs	r0, #122	@ 0x7a
 8001f42:	f000 fbf8 	bl	8002736 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001f46:	207a      	movs	r0, #122	@ 0x7a
 8001f48:	f000 fc0f 	bl	800276a <HAL_NVIC_EnableIRQ>
}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	58024400 	.word	0x58024400
 8001f58:	24089f4c 	.word	0x24089f4c
 8001f5c:	52000080 	.word	0x52000080
 8001f60:	24089fb8 	.word	0x24089fb8
 8001f64:	52000040 	.word	0x52000040

08001f68 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b0bc      	sub	sp, #240	@ 0xf0
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f80:	f107 0318 	add.w	r3, r7, #24
 8001f84:	22c0      	movs	r2, #192	@ 0xc0
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f00c fb0d 	bl	800e5a8 <memset>
  if(hsd->Instance==SDMMC1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a56      	ldr	r2, [pc, #344]	@ (80020ec <HAL_SD_MspInit+0x184>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	f040 80a5 	bne.w	80020e4 <HAL_SD_MspInit+0x17c>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001f9a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001faa:	f107 0318 	add.w	r3, r7, #24
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 fab2 	bl	8006518 <HAL_RCCEx_PeriphCLKConfig>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8001fba:	f7ff fbb7 	bl	800172c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001fbe:	4b4c      	ldr	r3, [pc, #304]	@ (80020f0 <HAL_SD_MspInit+0x188>)
 8001fc0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001fc4:	4a4a      	ldr	r2, [pc, #296]	@ (80020f0 <HAL_SD_MspInit+0x188>)
 8001fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fca:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8001fce:	4b48      	ldr	r3, [pc, #288]	@ (80020f0 <HAL_SD_MspInit+0x188>)
 8001fd0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fdc:	4b44      	ldr	r3, [pc, #272]	@ (80020f0 <HAL_SD_MspInit+0x188>)
 8001fde:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fe2:	4a43      	ldr	r2, [pc, #268]	@ (80020f0 <HAL_SD_MspInit+0x188>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001fec:	4b40      	ldr	r3, [pc, #256]	@ (80020f0 <HAL_SD_MspInit+0x188>)
 8001fee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffa:	4b3d      	ldr	r3, [pc, #244]	@ (80020f0 <HAL_SD_MspInit+0x188>)
 8001ffc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002000:	4a3b      	ldr	r2, [pc, #236]	@ (80020f0 <HAL_SD_MspInit+0x188>)
 8002002:	f043 0304 	orr.w	r3, r3, #4
 8002006:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800200a:	4b39      	ldr	r3, [pc, #228]	@ (80020f0 <HAL_SD_MspInit+0x188>)
 800200c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002018:	4b35      	ldr	r3, [pc, #212]	@ (80020f0 <HAL_SD_MspInit+0x188>)
 800201a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800201e:	4a34      	ldr	r2, [pc, #208]	@ (80020f0 <HAL_SD_MspInit+0x188>)
 8002020:	f043 0308 	orr.w	r3, r3, #8
 8002024:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002028:	4b31      	ldr	r3, [pc, #196]	@ (80020f0 <HAL_SD_MspInit+0x188>)
 800202a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002036:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800203a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002044:	2301      	movs	r3, #1
 8002046:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002050:	230c      	movs	r3, #12
 8002052:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002056:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800205a:	4619      	mov	r1, r3
 800205c:	4825      	ldr	r0, [pc, #148]	@ (80020f4 <HAL_SD_MspInit+0x18c>)
 800205e:	f000 fe6b 	bl	8002d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002062:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8002066:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002070:	2301      	movs	r3, #1
 8002072:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800207c:	230c      	movs	r3, #12
 800207e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002082:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002086:	4619      	mov	r1, r3
 8002088:	481b      	ldr	r0, [pc, #108]	@ (80020f8 <HAL_SD_MspInit+0x190>)
 800208a:	f000 fe55 	bl	8002d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800208e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002092:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020a8:	230c      	movs	r3, #12
 80020aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80020b2:	4619      	mov	r1, r3
 80020b4:	4810      	ldr	r0, [pc, #64]	@ (80020f8 <HAL_SD_MspInit+0x190>)
 80020b6:	f000 fe3f 	bl	8002d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020ba:	2304      	movs	r3, #4
 80020bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020c6:	2301      	movs	r3, #1
 80020c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020cc:	2303      	movs	r3, #3
 80020ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020d2:	230c      	movs	r3, #12
 80020d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80020dc:	4619      	mov	r1, r3
 80020de:	4807      	ldr	r0, [pc, #28]	@ (80020fc <HAL_SD_MspInit+0x194>)
 80020e0:	f000 fe2a 	bl	8002d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80020e4:	bf00      	nop
 80020e6:	37f0      	adds	r7, #240	@ 0xf0
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	52007000 	.word	0x52007000
 80020f0:	58024400 	.word	0x58024400
 80020f4:	58020400 	.word	0x58020400
 80020f8:	58020800 	.word	0x58020800
 80020fc:	58020c00 	.word	0x58020c00

08002100 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b0ba      	sub	sp, #232	@ 0xe8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002118:	f107 0310 	add.w	r3, r7, #16
 800211c:	22c0      	movs	r2, #192	@ 0xc0
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f00c fa41 	bl	800e5a8 <memset>
  if(hspi->Instance==SPI1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a26      	ldr	r2, [pc, #152]	@ (80021c4 <HAL_SPI_MspInit+0xc4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d144      	bne.n	80021ba <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002130:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800213c:	2300      	movs	r3, #0
 800213e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002140:	f107 0310 	add.w	r3, r7, #16
 8002144:	4618      	mov	r0, r3
 8002146:	f004 f9e7 	bl	8006518 <HAL_RCCEx_PeriphCLKConfig>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002150:	f7ff faec 	bl	800172c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002154:	4b1c      	ldr	r3, [pc, #112]	@ (80021c8 <HAL_SPI_MspInit+0xc8>)
 8002156:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800215a:	4a1b      	ldr	r2, [pc, #108]	@ (80021c8 <HAL_SPI_MspInit+0xc8>)
 800215c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002160:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002164:	4b18      	ldr	r3, [pc, #96]	@ (80021c8 <HAL_SPI_MspInit+0xc8>)
 8002166:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800216a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	4b15      	ldr	r3, [pc, #84]	@ (80021c8 <HAL_SPI_MspInit+0xc8>)
 8002174:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002178:	4a13      	ldr	r2, [pc, #76]	@ (80021c8 <HAL_SPI_MspInit+0xc8>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002182:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <HAL_SPI_MspInit+0xc8>)
 8002184:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002190:	23a0      	movs	r3, #160	@ 0xa0
 8002192:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021a8:	2305      	movs	r3, #5
 80021aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021b2:	4619      	mov	r1, r3
 80021b4:	4805      	ldr	r0, [pc, #20]	@ (80021cc <HAL_SPI_MspInit+0xcc>)
 80021b6:	f000 fdbf 	bl	8002d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021ba:	bf00      	nop
 80021bc:	37e8      	adds	r7, #232	@ 0xe8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40013000 	.word	0x40013000
 80021c8:	58024400 	.word	0x58024400
 80021cc:	58020000 	.word	0x58020000

080021d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <NMI_Handler+0x4>

080021d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021dc:	bf00      	nop
 80021de:	e7fd      	b.n	80021dc <HardFault_Handler+0x4>

080021e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <MemManage_Handler+0x4>

080021e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <BusFault_Handler+0x4>

080021f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f4:	bf00      	nop
 80021f6:	e7fd      	b.n	80021f4 <UsageFault_Handler+0x4>

080021f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002226:	f000 f967 	bl	80024f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <JPEG_IRQHandler>:
/* please refer to the startup file (startup_stm32h7xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void JPEG_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  HAL_JPEG_IRQHandler(&JPEG_Handle);
 8002234:	4802      	ldr	r0, [pc, #8]	@ (8002240 <JPEG_IRQHandler+0x10>)
 8002236:	f001 f961 	bl	80034fc <HAL_JPEG_IRQHandler>
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	2400019c 	.word	0x2400019c

08002244 <MDMA_IRQHandler>:


void MDMA_IRQHandler()
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Check the interrupt and clear flag */
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmain);
 8002248:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <MDMA_IRQHandler+0x1c>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224c:	4618      	mov	r0, r3
 800224e:	f002 ff25 	bl	800509c <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);
 8002252:	4b03      	ldr	r3, [pc, #12]	@ (8002260 <MDMA_IRQHandler+0x1c>)
 8002254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002256:	4618      	mov	r0, r3
 8002258:	f002 ff20 	bl	800509c <HAL_MDMA_IRQHandler>
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}
 8002260:	2400019c 	.word	0x2400019c

08002264 <_sbrk>:
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	4a14      	ldr	r2, [pc, #80]	@ (80022c0 <_sbrk+0x5c>)
 800226e:	4b15      	ldr	r3, [pc, #84]	@ (80022c4 <_sbrk+0x60>)
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	4b13      	ldr	r3, [pc, #76]	@ (80022c8 <_sbrk+0x64>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d102      	bne.n	8002286 <_sbrk+0x22>
 8002280:	4b11      	ldr	r3, [pc, #68]	@ (80022c8 <_sbrk+0x64>)
 8002282:	4a12      	ldr	r2, [pc, #72]	@ (80022cc <_sbrk+0x68>)
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <_sbrk+0x64>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	429a      	cmp	r2, r3
 8002292:	d207      	bcs.n	80022a4 <_sbrk+0x40>
 8002294:	f00c f990 	bl	800e5b8 <__errno>
 8002298:	4603      	mov	r3, r0
 800229a:	220c      	movs	r2, #12
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
 80022a2:	e009      	b.n	80022b8 <_sbrk+0x54>
 80022a4:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <_sbrk+0x64>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	4b07      	ldr	r3, [pc, #28]	@ (80022c8 <_sbrk+0x64>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	4a05      	ldr	r2, [pc, #20]	@ (80022c8 <_sbrk+0x64>)
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	24100000 	.word	0x24100000
 80022c4:	00000800 	.word	0x00000800
 80022c8:	2408a024 	.word	0x2408a024
 80022cc:	2408a1b0 	.word	0x2408a1b0

080022d0 <SystemInit>:
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4b32      	ldr	r3, [pc, #200]	@ (80023a0 <SystemInit+0xd0>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022da:	4a31      	ldr	r2, [pc, #196]	@ (80023a0 <SystemInit+0xd0>)
 80022dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80022e4:	4b2f      	ldr	r3, [pc, #188]	@ (80023a4 <SystemInit+0xd4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d807      	bhi.n	8002300 <SystemInit+0x30>
 80022f0:	4b2c      	ldr	r3, [pc, #176]	@ (80023a4 <SystemInit+0xd4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 030f 	bic.w	r3, r3, #15
 80022f8:	4a2a      	ldr	r2, [pc, #168]	@ (80023a4 <SystemInit+0xd4>)
 80022fa:	f043 0303 	orr.w	r3, r3, #3
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	4b29      	ldr	r3, [pc, #164]	@ (80023a8 <SystemInit+0xd8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a28      	ldr	r2, [pc, #160]	@ (80023a8 <SystemInit+0xd8>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b26      	ldr	r3, [pc, #152]	@ (80023a8 <SystemInit+0xd8>)
 800230e:	2200      	movs	r2, #0
 8002310:	611a      	str	r2, [r3, #16]
 8002312:	4b25      	ldr	r3, [pc, #148]	@ (80023a8 <SystemInit+0xd8>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4924      	ldr	r1, [pc, #144]	@ (80023a8 <SystemInit+0xd8>)
 8002318:	4b24      	ldr	r3, [pc, #144]	@ (80023ac <SystemInit+0xdc>)
 800231a:	4013      	ands	r3, r2
 800231c:	600b      	str	r3, [r1, #0]
 800231e:	4b21      	ldr	r3, [pc, #132]	@ (80023a4 <SystemInit+0xd4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b00      	cmp	r3, #0
 8002328:	d007      	beq.n	800233a <SystemInit+0x6a>
 800232a:	4b1e      	ldr	r3, [pc, #120]	@ (80023a4 <SystemInit+0xd4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 030f 	bic.w	r3, r3, #15
 8002332:	4a1c      	ldr	r2, [pc, #112]	@ (80023a4 <SystemInit+0xd4>)
 8002334:	f043 0303 	orr.w	r3, r3, #3
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b1b      	ldr	r3, [pc, #108]	@ (80023a8 <SystemInit+0xd8>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
 8002340:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <SystemInit+0xd8>)
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
 8002346:	4b18      	ldr	r3, [pc, #96]	@ (80023a8 <SystemInit+0xd8>)
 8002348:	2200      	movs	r2, #0
 800234a:	621a      	str	r2, [r3, #32]
 800234c:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <SystemInit+0xd8>)
 800234e:	4a18      	ldr	r2, [pc, #96]	@ (80023b0 <SystemInit+0xe0>)
 8002350:	629a      	str	r2, [r3, #40]	@ 0x28
 8002352:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <SystemInit+0xd8>)
 8002354:	4a17      	ldr	r2, [pc, #92]	@ (80023b4 <SystemInit+0xe4>)
 8002356:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002358:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <SystemInit+0xd8>)
 800235a:	4a17      	ldr	r2, [pc, #92]	@ (80023b8 <SystemInit+0xe8>)
 800235c:	631a      	str	r2, [r3, #48]	@ 0x30
 800235e:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <SystemInit+0xd8>)
 8002360:	2200      	movs	r2, #0
 8002362:	635a      	str	r2, [r3, #52]	@ 0x34
 8002364:	4b10      	ldr	r3, [pc, #64]	@ (80023a8 <SystemInit+0xd8>)
 8002366:	4a14      	ldr	r2, [pc, #80]	@ (80023b8 <SystemInit+0xe8>)
 8002368:	639a      	str	r2, [r3, #56]	@ 0x38
 800236a:	4b0f      	ldr	r3, [pc, #60]	@ (80023a8 <SystemInit+0xd8>)
 800236c:	2200      	movs	r2, #0
 800236e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002370:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <SystemInit+0xd8>)
 8002372:	4a11      	ldr	r2, [pc, #68]	@ (80023b8 <SystemInit+0xe8>)
 8002374:	641a      	str	r2, [r3, #64]	@ 0x40
 8002376:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <SystemInit+0xd8>)
 8002378:	2200      	movs	r2, #0
 800237a:	645a      	str	r2, [r3, #68]	@ 0x44
 800237c:	4b0a      	ldr	r3, [pc, #40]	@ (80023a8 <SystemInit+0xd8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a09      	ldr	r2, [pc, #36]	@ (80023a8 <SystemInit+0xd8>)
 8002382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	4b07      	ldr	r3, [pc, #28]	@ (80023a8 <SystemInit+0xd8>)
 800238a:	2200      	movs	r2, #0
 800238c:	661a      	str	r2, [r3, #96]	@ 0x60
 800238e:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <SystemInit+0xec>)
 8002390:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	bf00      	nop
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00
 80023a4:	52002000 	.word	0x52002000
 80023a8:	58024400 	.word	0x58024400
 80023ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80023b0:	02020200 	.word	0x02020200
 80023b4:	01ff0000 	.word	0x01ff0000
 80023b8:	01010280 	.word	0x01010280
 80023bc:	52004000 	.word	0x52004000

080023c0 <Reset_Handler>:
 80023c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023f8 <LoopFillZerobss+0xe>
 80023c4:	f7ff ff84 	bl	80022d0 <SystemInit>
 80023c8:	480c      	ldr	r0, [pc, #48]	@ (80023fc <LoopFillZerobss+0x12>)
 80023ca:	490d      	ldr	r1, [pc, #52]	@ (8002400 <LoopFillZerobss+0x16>)
 80023cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002404 <LoopFillZerobss+0x1a>)
 80023ce:	2300      	movs	r3, #0
 80023d0:	e002      	b.n	80023d8 <LoopCopyDataInit>

080023d2 <CopyDataInit>:
 80023d2:	58d4      	ldr	r4, [r2, r3]
 80023d4:	50c4      	str	r4, [r0, r3]
 80023d6:	3304      	adds	r3, #4

080023d8 <LoopCopyDataInit>:
 80023d8:	18c4      	adds	r4, r0, r3
 80023da:	428c      	cmp	r4, r1
 80023dc:	d3f9      	bcc.n	80023d2 <CopyDataInit>
 80023de:	4a0a      	ldr	r2, [pc, #40]	@ (8002408 <LoopFillZerobss+0x1e>)
 80023e0:	4c0a      	ldr	r4, [pc, #40]	@ (800240c <LoopFillZerobss+0x22>)
 80023e2:	2300      	movs	r3, #0
 80023e4:	e001      	b.n	80023ea <LoopFillZerobss>

080023e6 <FillZerobss>:
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	3204      	adds	r2, #4

080023ea <LoopFillZerobss>:
 80023ea:	42a2      	cmp	r2, r4
 80023ec:	d3fb      	bcc.n	80023e6 <FillZerobss>
 80023ee:	f00c f8e9 	bl	800e5c4 <__libc_init_array>
 80023f2:	f7fe fecb 	bl	800118c <main>
 80023f6:	4770      	bx	lr
 80023f8:	24100000 	.word	0x24100000
 80023fc:	24000000 	.word	0x24000000
 8002400:	24000064 	.word	0x24000064
 8002404:	0800f2dc 	.word	0x0800f2dc
 8002408:	24000064 	.word	0x24000064
 800240c:	2408a1ac 	.word	0x2408a1ac

08002410 <ADC_IRQHandler>:
 8002410:	e7fe      	b.n	8002410 <ADC_IRQHandler>
	...

08002414 <HAL_Init>:
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	2003      	movs	r0, #3
 800241c:	f000 f980 	bl	8002720 <HAL_NVIC_SetPriorityGrouping>
 8002420:	f003 feba 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 8002424:	4602      	mov	r2, r0
 8002426:	4b15      	ldr	r3, [pc, #84]	@ (800247c <HAL_Init+0x68>)
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	0a1b      	lsrs	r3, r3, #8
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	4913      	ldr	r1, [pc, #76]	@ (8002480 <HAL_Init+0x6c>)
 8002432:	5ccb      	ldrb	r3, [r1, r3]
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
 800243c:	607b      	str	r3, [r7, #4]
 800243e:	4b0f      	ldr	r3, [pc, #60]	@ (800247c <HAL_Init+0x68>)
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	4a0e      	ldr	r2, [pc, #56]	@ (8002480 <HAL_Init+0x6c>)
 8002448:	5cd3      	ldrb	r3, [r2, r3]
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
 8002454:	4a0b      	ldr	r2, [pc, #44]	@ (8002484 <HAL_Init+0x70>)
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	4a0b      	ldr	r2, [pc, #44]	@ (8002488 <HAL_Init+0x74>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	200f      	movs	r0, #15
 8002460:	f000 f814 	bl	800248c <HAL_InitTick>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_Init+0x5a>
 800246a:	2301      	movs	r3, #1
 800246c:	e002      	b.n	8002474 <HAL_Init+0x60>
 800246e:	f7ff fc87 	bl	8001d80 <HAL_MspInit>
 8002472:	2300      	movs	r3, #0
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	58024400 	.word	0x58024400
 8002480:	0800ef94 	.word	0x0800ef94
 8002484:	24000008 	.word	0x24000008
 8002488:	24000004 	.word	0x24000004

0800248c <HAL_InitTick>:
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <HAL_InitTick+0x60>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_InitTick+0x14>
 800249c:	2301      	movs	r3, #1
 800249e:	e021      	b.n	80024e4 <HAL_InitTick+0x58>
 80024a0:	4b13      	ldr	r3, [pc, #76]	@ (80024f0 <HAL_InitTick+0x64>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4b11      	ldr	r3, [pc, #68]	@ (80024ec <HAL_InitTick+0x60>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4619      	mov	r1, r3
 80024aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80024b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f965 	bl	8002786 <HAL_SYSTICK_Config>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_InitTick+0x3a>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e00e      	b.n	80024e4 <HAL_InitTick+0x58>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b0f      	cmp	r3, #15
 80024ca:	d80a      	bhi.n	80024e2 <HAL_InitTick+0x56>
 80024cc:	2200      	movs	r2, #0
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295
 80024d4:	f000 f92f 	bl	8002736 <HAL_NVIC_SetPriority>
 80024d8:	4a06      	ldr	r2, [pc, #24]	@ (80024f4 <HAL_InitTick+0x68>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	2300      	movs	r3, #0
 80024e0:	e000      	b.n	80024e4 <HAL_InitTick+0x58>
 80024e2:	2301      	movs	r3, #1
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	24000010 	.word	0x24000010
 80024f0:	24000004 	.word	0x24000004
 80024f4:	2400000c 	.word	0x2400000c

080024f8 <HAL_IncTick>:
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <HAL_IncTick+0x20>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	4b06      	ldr	r3, [pc, #24]	@ (800251c <HAL_IncTick+0x24>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4413      	add	r3, r2
 8002508:	4a04      	ldr	r2, [pc, #16]	@ (800251c <HAL_IncTick+0x24>)
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	24000010 	.word	0x24000010
 800251c:	2408a028 	.word	0x2408a028

08002520 <HAL_GetTick>:
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
 8002524:	4b03      	ldr	r3, [pc, #12]	@ (8002534 <HAL_GetTick+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	2408a028 	.word	0x2408a028

08002538 <HAL_Delay>:
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	f7ff ffee 	bl	8002520 <HAL_GetTick>
 8002544:	60b8      	str	r0, [r7, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d005      	beq.n	800255e <HAL_Delay+0x26>
 8002552:	4b0a      	ldr	r3, [pc, #40]	@ (800257c <HAL_Delay+0x44>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4413      	add	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	bf00      	nop
 8002560:	f7ff ffde 	bl	8002520 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	429a      	cmp	r2, r3
 800256e:	d8f7      	bhi.n	8002560 <HAL_Delay+0x28>
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	24000010 	.word	0x24000010

08002580 <__NVIC_SetPriorityGrouping>:
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <__NVIC_SetPriorityGrouping+0x40>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800259c:	4013      	ands	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	021a      	lsls	r2, r3, #8
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	4a04      	ldr	r2, [pc, #16]	@ (80025c0 <__NVIC_SetPriorityGrouping+0x40>)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	60d3      	str	r3, [r2, #12]
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00
 80025c4:	05fa0000 	.word	0x05fa0000

080025c8 <__NVIC_GetPriorityGrouping>:
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4b04      	ldr	r3, [pc, #16]	@ (80025e0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_EnableIRQ>:
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	80fb      	strh	r3, [r7, #6]
 80025ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	db0b      	blt.n	800260e <__NVIC_EnableIRQ+0x2a>
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	4907      	ldr	r1, [pc, #28]	@ (800261c <__NVIC_EnableIRQ+0x38>)
 80025fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2001      	movs	r0, #1
 8002606:	fa00 f202 	lsl.w	r2, r0, r2
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000e100 	.word	0xe000e100

08002620 <__NVIC_SetPriority>:
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	80fb      	strh	r3, [r7, #6]
 800262c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002630:	2b00      	cmp	r3, #0
 8002632:	db0a      	blt.n	800264a <__NVIC_SetPriority+0x2a>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	490c      	ldr	r1, [pc, #48]	@ (800266c <__NVIC_SetPriority+0x4c>)
 800263a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	440b      	add	r3, r1
 8002644:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8002648:	e00a      	b.n	8002660 <__NVIC_SetPriority+0x40>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4908      	ldr	r1, [pc, #32]	@ (8002670 <__NVIC_SetPriority+0x50>)
 8002650:	88fb      	ldrh	r3, [r7, #6]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	3b04      	subs	r3, #4
 8002658:	0112      	lsls	r2, r2, #4
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	440b      	add	r3, r1
 800265e:	761a      	strb	r2, [r3, #24]
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000e100 	.word	0xe000e100
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <NVIC_EncodePriority>:
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	@ 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f1c3 0307 	rsb	r3, r3, #7
 800268e:	2b04      	cmp	r3, #4
 8002690:	bf28      	it	cs
 8002692:	2304      	movcs	r3, #4
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3304      	adds	r3, #4
 800269a:	2b06      	cmp	r3, #6
 800269c:	d902      	bls.n	80026a4 <NVIC_EncodePriority+0x30>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3b03      	subs	r3, #3
 80026a2:	e000      	b.n	80026a6 <NVIC_EncodePriority+0x32>
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	401a      	ands	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	409a      	lsls	r2, r3
 80026bc:	f04f 31ff 	mov.w	r1, #4294967295
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43d9      	mvns	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	400b      	ands	r3, r1
 80026cc:	4313      	orrs	r3, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	3724      	adds	r7, #36	@ 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <SysTick_Config>:
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026ec:	d301      	bcc.n	80026f2 <SysTick_Config+0x16>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e00f      	b.n	8002712 <SysTick_Config+0x36>
 80026f2:	4a0a      	ldr	r2, [pc, #40]	@ (800271c <SysTick_Config+0x40>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	6053      	str	r3, [r2, #4]
 80026fa:	210f      	movs	r1, #15
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002700:	f7ff ff8e 	bl	8002620 <__NVIC_SetPriority>
 8002704:	4b05      	ldr	r3, [pc, #20]	@ (800271c <SysTick_Config+0x40>)
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	4b04      	ldr	r3, [pc, #16]	@ (800271c <SysTick_Config+0x40>)
 800270c:	2207      	movs	r2, #7
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	2300      	movs	r3, #0
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	e000e010 	.word	0xe000e010

08002720 <HAL_NVIC_SetPriorityGrouping>:
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ff29 	bl	8002580 <__NVIC_SetPriorityGrouping>
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_NVIC_SetPriority>:
 8002736:	b580      	push	{r7, lr}
 8002738:	b086      	sub	sp, #24
 800273a:	af00      	add	r7, sp, #0
 800273c:	4603      	mov	r3, r0
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	81fb      	strh	r3, [r7, #14]
 8002744:	f7ff ff40 	bl	80025c8 <__NVIC_GetPriorityGrouping>
 8002748:	6178      	str	r0, [r7, #20]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	6978      	ldr	r0, [r7, #20]
 8002750:	f7ff ff90 	bl	8002674 <NVIC_EncodePriority>
 8002754:	4602      	mov	r2, r0
 8002756:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff5f 	bl	8002620 <__NVIC_SetPriority>
 8002762:	bf00      	nop
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_NVIC_EnableIRQ>:
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	80fb      	strh	r3, [r7, #6]
 8002774:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff33 	bl	80025e4 <__NVIC_EnableIRQ>
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_SYSTICK_Config>:
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ffa4 	bl	80026dc <SysTick_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <HAL_DMA2D_Init>:
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_DMA2D_Init+0x12>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e04f      	b.n	8002852 <HAL_DMA2D_Init+0xb2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_DMA2D_Init+0x2c>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff faf4 	bl	8001db4 <HAL_DMA2D_MspInit>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	4b20      	ldr	r3, [pc, #128]	@ (800285c <HAL_DMA2D_Init+0xbc>)
 80027dc:	4013      	ands	r3, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6851      	ldr	r1, [r2, #4]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	69d2      	ldr	r2, [r2, #28]
 80027e6:	4311      	orrs	r1, r2
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	430b      	orrs	r3, r1
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002860 <HAL_DMA2D_Init+0xc0>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6891      	ldr	r1, [r2, #8]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6992      	ldr	r2, [r2, #24]
 8002802:	4311      	orrs	r1, r2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	430b      	orrs	r3, r1
 800280a:	6353      	str	r3, [r2, #52]	@ 0x34
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002812:	4b14      	ldr	r3, [pc, #80]	@ (8002864 <HAL_DMA2D_Init+0xc4>)
 8002814:	4013      	ands	r3, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68d1      	ldr	r1, [r2, #12]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	430b      	orrs	r3, r1
 8002820:	6413      	str	r3, [r2, #64]	@ 0x40
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002828:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	051a      	lsls	r2, r3, #20
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	055b      	lsls	r3, r3, #21
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	635a      	str	r2, [r3, #52]	@ 0x34
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	665a      	str	r2, [r3, #100]	@ 0x64
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8002850:	2300      	movs	r3, #0
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	fff8ffbf 	.word	0xfff8ffbf
 8002860:	fffffef8 	.word	0xfffffef8
 8002864:	ffff0000 	.word	0xffff0000

08002868 <HAL_DMA2D_Start>:
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_DMA2D_Start+0x1c>
 8002880:	2302      	movs	r3, #2
 8002882:	e018      	b.n	80028b6 <HAL_DMA2D_Start+0x4e>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f9a4 	bl	8002bec <DMA2D_SetConfig>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	2300      	movs	r3, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_DMA2D_PollForTransfer>:
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d056      	beq.n	8002988 <HAL_DMA2D_PollForTransfer+0xca>
 80028da:	f7ff fe21 	bl	8002520 <HAL_GetTick>
 80028de:	6178      	str	r0, [r7, #20]
 80028e0:	e04b      	b.n	800297a <HAL_DMA2D_PollForTransfer+0xbc>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d023      	beq.n	800293c <HAL_DMA2D_PollForTransfer+0x7e>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_DMA2D_PollForTransfer+0x4c>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002902:	f043 0202 	orr.w	r2, r3, #2
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	665a      	str	r2, [r3, #100]	@ 0x64
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_DMA2D_PollForTransfer+0x62>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002918:	f043 0201 	orr.w	r2, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	665a      	str	r2, [r3, #100]	@ 0x64
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2221      	movs	r2, #33	@ 0x21
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2204      	movs	r2, #4
 800292c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 8002938:	2301      	movs	r3, #1
 800293a:	e0a5      	b.n	8002a88 <HAL_DMA2D_PollForTransfer+0x1ca>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002942:	d01a      	beq.n	800297a <HAL_DMA2D_PollForTransfer+0xbc>
 8002944:	f7ff fdec 	bl	8002520 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d302      	bcc.n	800295a <HAL_DMA2D_PollForTransfer+0x9c>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10f      	bne.n	800297a <HAL_DMA2D_PollForTransfer+0xbc>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800295e:	f043 0220 	orr.w	r2, r3, #32
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	665a      	str	r2, [r3, #100]	@ 0x64
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2203      	movs	r2, #3
 800296a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 8002976:	2303      	movs	r3, #3
 8002978:	e086      	b.n	8002a88 <HAL_DMA2D_PollForTransfer+0x1ca>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0ac      	beq.n	80028e2 <HAL_DMA2D_PollForTransfer+0x24>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d061      	beq.n	8002a6e <HAL_DMA2D_PollForTransfer+0x1b0>
 80029aa:	f7ff fdb9 	bl	8002520 <HAL_GetTick>
 80029ae:	6178      	str	r0, [r7, #20]
 80029b0:	e056      	b.n	8002a60 <HAL_DMA2D_PollForTransfer+0x1a2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d02e      	beq.n	8002a22 <HAL_DMA2D_PollForTransfer+0x164>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_DMA2D_PollForTransfer+0x11c>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029d2:	f043 0204 	orr.w	r2, r3, #4
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	665a      	str	r2, [r3, #100]	@ 0x64
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_DMA2D_PollForTransfer+0x132>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029e8:	f043 0202 	orr.w	r2, r3, #2
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	665a      	str	r2, [r3, #100]	@ 0x64
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <HAL_DMA2D_PollForTransfer+0x148>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	665a      	str	r2, [r3, #100]	@ 0x64
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2229      	movs	r2, #41	@ 0x29
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2204      	movs	r2, #4
 8002a12:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e032      	b.n	8002a88 <HAL_DMA2D_PollForTransfer+0x1ca>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a28:	d01a      	beq.n	8002a60 <HAL_DMA2D_PollForTransfer+0x1a2>
 8002a2a:	f7ff fd79 	bl	8002520 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d302      	bcc.n	8002a40 <HAL_DMA2D_PollForTransfer+0x182>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10f      	bne.n	8002a60 <HAL_DMA2D_PollForTransfer+0x1a2>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a44:	f043 0220 	orr.w	r2, r3, #32
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	665a      	str	r2, [r3, #100]	@ 0x64
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2203      	movs	r2, #3
 8002a50:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e013      	b.n	8002a88 <HAL_DMA2D_PollForTransfer+0x1ca>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0a1      	beq.n	80029b2 <HAL_DMA2D_PollForTransfer+0xf4>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2212      	movs	r2, #18
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 8002a86:	2300      	movs	r3, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_DMA2D_ConfigLayer>:
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_DMA2D_ConfigLayer+0x24>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e092      	b.n	8002bda <HAL_DMA2D_ConfigLayer+0x14a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	3328      	adds	r3, #40	@ 0x28
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	041b      	lsls	r3, r3, #16
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	051b      	lsls	r3, r3, #20
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	055b      	lsls	r3, r3, #21
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	4b3c      	ldr	r3, [pc, #240]	@ (8002be8 <HAL_DMA2D_ConfigLayer+0x158>)
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b0a      	cmp	r3, #10
 8002afe:	d003      	beq.n	8002b08 <HAL_DMA2D_ConfigLayer+0x78>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b09      	cmp	r3, #9
 8002b06:	d107      	bne.n	8002b18 <HAL_DMA2D_ConfigLayer+0x88>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	e005      	b.n	8002b24 <HAL_DMA2D_ConfigLayer+0x94>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	061b      	lsls	r3, r3, #24
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d120      	bne.n	8002b6c <HAL_DMA2D_ConfigLayer+0xdc>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	43db      	mvns	r3, r3
 8002b34:	ea02 0103 	and.w	r1, r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	619a      	str	r2, [r3, #24]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b0a      	cmp	r3, #10
 8002b52:	d003      	beq.n	8002b5c <HAL_DMA2D_ConfigLayer+0xcc>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b09      	cmp	r3, #9
 8002b5a:	d135      	bne.n	8002bc8 <HAL_DMA2D_ConfigLayer+0x138>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002b68:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b6a:	e02d      	b.n	8002bc8 <HAL_DMA2D_ConfigLayer+0x138>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b0b      	cmp	r3, #11
 8002b72:	d109      	bne.n	8002b88 <HAL_DMA2D_ConfigLayer+0xf8>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	049b      	lsls	r3, r3, #18
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69da      	ldr	r2, [r3, #28]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	ea02 0103 	and.w	r1, r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	61da      	str	r2, [r3, #28]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	611a      	str	r2, [r3, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b0a      	cmp	r3, #10
 8002bb0:	d003      	beq.n	8002bba <HAL_DMA2D_ConfigLayer+0x12a>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b09      	cmp	r3, #9
 8002bb8:	d106      	bne.n	8002bc8 <HAL_DMA2D_ConfigLayer+0x138>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002bc6:	621a      	str	r2, [r3, #32]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 8002bd8:	2300      	movs	r3, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	ff33000f 	.word	0xff33000f

08002bec <DMA2D_SetConfig>:
 8002bec:	b480      	push	{r7}
 8002bee:	b08b      	sub	sp, #44	@ 0x2c
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c00:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	041a      	lsls	r2, r3, #16
 8002c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c24:	d174      	bne.n	8002d10 <DMA2D_SetConfig+0x124>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002c2c:	623b      	str	r3, [r7, #32]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d108      	bne.n	8002c5e <DMA2D_SetConfig+0x72>
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c5c:	e053      	b.n	8002d06 <DMA2D_SetConfig+0x11a>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d106      	bne.n	8002c74 <DMA2D_SetConfig+0x88>
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c72:	e048      	b.n	8002d06 <DMA2D_SetConfig+0x11a>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d111      	bne.n	8002ca0 <DMA2D_SetConfig+0xb4>
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	0cdb      	lsrs	r3, r3, #19
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	0a9b      	lsrs	r3, r3, #10
 8002c86:	61bb      	str	r3, [r7, #24]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	08db      	lsrs	r3, r3, #3
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	02db      	lsls	r3, r3, #11
 8002c96:	4313      	orrs	r3, r2
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c9e:	e032      	b.n	8002d06 <DMA2D_SetConfig+0x11a>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d117      	bne.n	8002cd8 <DMA2D_SetConfig+0xec>
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	0fdb      	lsrs	r3, r3, #31
 8002cac:	623b      	str	r3, [r7, #32]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	0cdb      	lsrs	r3, r3, #19
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	0adb      	lsrs	r3, r3, #11
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	08db      	lsrs	r3, r3, #3
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	015a      	lsls	r2, r3, #5
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	029b      	lsls	r3, r3, #10
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	03db      	lsls	r3, r3, #15
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd6:	e016      	b.n	8002d06 <DMA2D_SetConfig+0x11a>
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	0f1b      	lsrs	r3, r3, #28
 8002cdc:	623b      	str	r3, [r7, #32]
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	0d1b      	lsrs	r3, r3, #20
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	0b1b      	lsrs	r3, r3, #12
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	011a      	lsls	r2, r3, #4
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	031b      	lsls	r3, r3, #12
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d0c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d0e:	e00d      	b.n	8002d2c <DMA2D_SetConfig+0x140>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d18:	d104      	bne.n	8002d24 <DMA2D_SetConfig+0x138>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	615a      	str	r2, [r3, #20]
 8002d22:	e003      	b.n	8002d2c <DMA2D_SetConfig+0x140>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	60da      	str	r2, [r3, #12]
 8002d2c:	bf00      	nop
 8002d2e:	372c      	adds	r7, #44	@ 0x2c
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_GPIO_Init>:
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	@ 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	4b89      	ldr	r3, [pc, #548]	@ (8002f6c <HAL_GPIO_Init+0x234>)
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	e194      	b.n	8003076 <HAL_GPIO_Init+0x33e>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	2101      	movs	r1, #1
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	fa01 f303 	lsl.w	r3, r1, r3
 8002d58:	4013      	ands	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8186 	beq.w	8003070 <HAL_GPIO_Init+0x338>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d005      	beq.n	8002d7c <HAL_GPIO_Init+0x44>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d130      	bne.n	8002dde <HAL_GPIO_Init+0xa6>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	2203      	movs	r2, #3
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	2201      	movs	r2, #1
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	f003 0201 	and.w	r2, r3, #1
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d017      	beq.n	8002e1a <HAL_GPIO_Init+0xe2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	2203      	movs	r2, #3
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d123      	bne.n	8002e6e <HAL_GPIO_Init+0x136>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	08da      	lsrs	r2, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3208      	adds	r2, #8
 8002e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	220f      	movs	r2, #15
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	08da      	lsrs	r2, r3, #3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3208      	adds	r2, #8
 8002e68:	69b9      	ldr	r1, [r7, #24]
 8002e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	2203      	movs	r2, #3
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f003 0203 	and.w	r2, r3, #3
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 80e0 	beq.w	8003070 <HAL_GPIO_Init+0x338>
 8002eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8002f70 <HAL_GPIO_Init+0x238>)
 8002eb2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002eb6:	4a2e      	ldr	r2, [pc, #184]	@ (8002f70 <HAL_GPIO_Init+0x238>)
 8002eb8:	f043 0302 	orr.w	r3, r3, #2
 8002ebc:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8002f70 <HAL_GPIO_Init+0x238>)
 8002ec2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a29      	ldr	r2, [pc, #164]	@ (8002f74 <HAL_GPIO_Init+0x23c>)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	089b      	lsrs	r3, r3, #2
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eda:	61bb      	str	r3, [r7, #24]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	220f      	movs	r2, #15
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a20      	ldr	r2, [pc, #128]	@ (8002f78 <HAL_GPIO_Init+0x240>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d052      	beq.n	8002fa0 <HAL_GPIO_Init+0x268>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a1f      	ldr	r2, [pc, #124]	@ (8002f7c <HAL_GPIO_Init+0x244>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d031      	beq.n	8002f66 <HAL_GPIO_Init+0x22e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a1e      	ldr	r2, [pc, #120]	@ (8002f80 <HAL_GPIO_Init+0x248>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d02b      	beq.n	8002f62 <HAL_GPIO_Init+0x22a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002f84 <HAL_GPIO_Init+0x24c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d025      	beq.n	8002f5e <HAL_GPIO_Init+0x226>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a1c      	ldr	r2, [pc, #112]	@ (8002f88 <HAL_GPIO_Init+0x250>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01f      	beq.n	8002f5a <HAL_GPIO_Init+0x222>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8002f8c <HAL_GPIO_Init+0x254>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d019      	beq.n	8002f56 <HAL_GPIO_Init+0x21e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a1a      	ldr	r2, [pc, #104]	@ (8002f90 <HAL_GPIO_Init+0x258>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d013      	beq.n	8002f52 <HAL_GPIO_Init+0x21a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a19      	ldr	r2, [pc, #100]	@ (8002f94 <HAL_GPIO_Init+0x25c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00d      	beq.n	8002f4e <HAL_GPIO_Init+0x216>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a18      	ldr	r2, [pc, #96]	@ (8002f98 <HAL_GPIO_Init+0x260>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d007      	beq.n	8002f4a <HAL_GPIO_Init+0x212>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a17      	ldr	r2, [pc, #92]	@ (8002f9c <HAL_GPIO_Init+0x264>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d101      	bne.n	8002f46 <HAL_GPIO_Init+0x20e>
 8002f42:	2309      	movs	r3, #9
 8002f44:	e02d      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f46:	230a      	movs	r3, #10
 8002f48:	e02b      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	e029      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f4e:	2307      	movs	r3, #7
 8002f50:	e027      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f52:	2306      	movs	r3, #6
 8002f54:	e025      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f56:	2305      	movs	r3, #5
 8002f58:	e023      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	e021      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e01f      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e01d      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e01b      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f6a:	bf00      	nop
 8002f6c:	58000080 	.word	0x58000080
 8002f70:	58024400 	.word	0x58024400
 8002f74:	58000400 	.word	0x58000400
 8002f78:	58020000 	.word	0x58020000
 8002f7c:	58020400 	.word	0x58020400
 8002f80:	58020800 	.word	0x58020800
 8002f84:	58020c00 	.word	0x58020c00
 8002f88:	58021000 	.word	0x58021000
 8002f8c:	58021400 	.word	0x58021400
 8002f90:	58021800 	.word	0x58021800
 8002f94:	58021c00 	.word	0x58021c00
 8002f98:	58022000 	.word	0x58022000
 8002f9c:	58022400 	.word	0x58022400
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	f002 0203 	and.w	r2, r2, #3
 8002fa8:	0092      	lsls	r2, r2, #2
 8002faa:	4093      	lsls	r3, r2
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	4938      	ldr	r1, [pc, #224]	@ (8003094 <HAL_GPIO_Init+0x35c>)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	3302      	adds	r3, #2
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x2ae>
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_GPIO_Init+0x2dc>
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
 8003014:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	6053      	str	r3, [r2, #4]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_GPIO_Init+0x308>
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	61bb      	str	r3, [r7, #24]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	43db      	mvns	r3, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4013      	ands	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_Init+0x332>
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	3301      	adds	r3, #1
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	fa22 f303 	lsr.w	r3, r2, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	f47f ae63 	bne.w	8002d4c <HAL_GPIO_Init+0x14>
 8003086:	bf00      	nop
 8003088:	bf00      	nop
 800308a:	3724      	adds	r7, #36	@ 0x24
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	58000400 	.word	0x58000400

08003098 <HAL_GPIO_ReadPin>:
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	887b      	ldrh	r3, [r7, #2]
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <HAL_GPIO_ReadPin+0x1e>
 80030b0:	2301      	movs	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
 80030b4:	e001      	b.n	80030ba <HAL_GPIO_ReadPin+0x22>
 80030b6:	2300      	movs	r3, #0
 80030b8:	73fb      	strb	r3, [r7, #15]
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_GPIO_WritePin>:
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	807b      	strh	r3, [r7, #2]
 80030d4:	4613      	mov	r3, r2
 80030d6:	707b      	strb	r3, [r7, #1]
 80030d8:	787b      	ldrb	r3, [r7, #1]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_WritePin+0x1e>
 80030de:	887a      	ldrh	r2, [r7, #2]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	619a      	str	r2, [r3, #24]
 80030e4:	e003      	b.n	80030ee <HAL_GPIO_WritePin+0x26>
 80030e6:	887b      	ldrh	r3, [r7, #2]
 80030e8:	041a      	lsls	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	619a      	str	r2, [r3, #24]
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
	...

080030fc <HAL_JPEG_Init>:
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_JPEG_Init+0x12>
 800310a:	2301      	movs	r3, #1
 800310c:	e070      	b.n	80031f0 <HAL_JPEG_Init+0xf4>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_JPEG_Init+0x2c>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fe fe68 	bl	8001df8 <HAL_JPEG_MspInit>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0201 	bic.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800315e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800316e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800317e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800318e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a19      	ldr	r2, [pc, #100]	@ (80031f8 <HAL_JPEG_Init+0xfc>)
 8003194:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a18      	ldr	r2, [pc, #96]	@ (80031fc <HAL_JPEG_Init+0x100>)
 800319a:	641a      	str	r2, [r3, #64]	@ 0x40
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	649a      	str	r2, [r3, #72]	@ 0x48
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fcdb 	bl	8003b64 <JPEG_Set_HuffEnc_Mem>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d004      	beq.n	80031be <HAL_JPEG_Init+0xc2>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80031ba:	2301      	movs	r3, #1
 80031bc:	e018      	b.n	80031f0 <HAL_JPEG_Init+0xf4>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	621a      	str	r2, [r3, #32]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	655a      	str	r2, [r3, #84]	@ 0x54
 80031ee:	2300      	movs	r3, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	0800f184 	.word	0x0800f184
 80031fc:	0800f1c4 	.word	0x0800f1c4

08003200 <HAL_JPEG_GetInfo>:
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <HAL_JPEG_GetInfo+0x16>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_JPEG_GetInfo+0x1a>
 8003216:	2301      	movs	r3, #1
 8003218:	e083      	b.n	8003322 <HAL_JPEG_GetInfo+0x122>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d103      	bne.n	8003230 <HAL_JPEG_GetInfo+0x30>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	2210      	movs	r2, #16
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	e017      	b.n	8003260 <HAL_JPEG_GetInfo+0x60>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d103      	bne.n	8003246 <HAL_JPEG_GetInfo+0x46>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e00c      	b.n	8003260 <HAL_JPEG_GetInfo+0x60>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	2b03      	cmp	r3, #3
 8003252:	d103      	bne.n	800325c <HAL_JPEG_GetInfo+0x5c>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2230      	movs	r2, #48	@ 0x30
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e001      	b.n	8003260 <HAL_JPEG_GetInfo+0x60>
 800325c:	2301      	movs	r3, #1
 800325e:	e060      	b.n	8003322 <HAL_JPEG_GetInfo+0x122>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	0c1b      	lsrs	r3, r3, #16
 8003268:	b29a      	uxth	r2, r3
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	609a      	str	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	0c1b      	lsrs	r3, r3, #16
 8003276:	b29a      	uxth	r2, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	60da      	str	r2, [r3, #12]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b10      	cmp	r3, #16
 8003282:	d003      	beq.n	800328c <HAL_JPEG_GetInfo+0x8c>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b30      	cmp	r3, #48	@ 0x30
 800328a:	d140      	bne.n	800330e <HAL_JPEG_GetInfo+0x10e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	091b      	lsrs	r3, r3, #4
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	091b      	lsrs	r3, r3, #4
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d109      	bne.n	80032d0 <HAL_JPEG_GetInfo+0xd0>
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_JPEG_GetInfo+0xd0>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d103      	bne.n	80032d0 <HAL_JPEG_GetInfo+0xd0>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2202      	movs	r2, #2
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	e01d      	b.n	800330c <HAL_JPEG_GetInfo+0x10c>
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <HAL_JPEG_GetInfo+0xea>
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d106      	bne.n	80032ea <HAL_JPEG_GetInfo+0xea>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <HAL_JPEG_GetInfo+0xea>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2200      	movs	r2, #0
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	e010      	b.n	800330c <HAL_JPEG_GetInfo+0x10c>
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d109      	bne.n	8003304 <HAL_JPEG_GetInfo+0x104>
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_JPEG_GetInfo+0x104>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d103      	bne.n	8003304 <HAL_JPEG_GetInfo+0x104>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2201      	movs	r2, #1
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	e003      	b.n	800330c <HAL_JPEG_GetInfo+0x10c>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2200      	movs	r2, #0
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	e003      	b.n	8003314 <HAL_JPEG_GetInfo+0x114>
 800330c:	e002      	b.n	8003314 <HAL_JPEG_GetInfo+0x114>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2200      	movs	r2, #0
 8003312:	605a      	str	r2, [r3, #4]
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f001 fd17 	bl	8004d48 <JPEG_GetQuality>
 800331a:	4602      	mov	r2, r0
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	611a      	str	r2, [r3, #16]
 8003320:	2300      	movs	r3, #0
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_JPEG_Decode_DMA>:
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	607a      	str	r2, [r7, #4]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d005      	beq.n	800334a <HAL_JPEG_Decode_DMA+0x20>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <HAL_JPEG_Decode_DMA+0x20>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_JPEG_Decode_DMA+0x24>
 800334a:	2301      	movs	r3, #1
 800334c:	e04c      	b.n	80033e8 <HAL_JPEG_Decode_DMA+0xbe>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_JPEG_Decode_DMA+0x32>
 8003358:	2302      	movs	r3, #2
 800335a:	e045      	b.n	80033e8 <HAL_JPEG_Decode_DMA+0xbe>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d134      	bne.n	80033da <HAL_JPEG_Decode_DMA+0xb0>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2204      	movs	r2, #4
 8003374:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800337c:	f023 020f 	bic.w	r2, r3, #15
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	655a      	str	r2, [r3, #84]	@ 0x54
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003388:	f043 020e 	orr.w	r2, r3, #14
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	619a      	str	r2, [r3, #24]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	61da      	str	r2, [r3, #28]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	621a      	str	r2, [r3, #32]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 fe57 	bl	8004068 <JPEG_Init_Process>
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f001 f978 	bl	80046b0 <JPEG_DMA_StartProcess>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00f      	beq.n	80033e6 <HAL_JPEG_Decode_DMA+0xbc>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2206      	movs	r2, #6
 80033ca:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 80033d6:	2301      	movs	r3, #1
 80033d8:	e006      	b.n	80033e8 <HAL_JPEG_Decode_DMA+0xbe>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 80033e2:	2302      	movs	r3, #2
 80033e4:	e000      	b.n	80033e8 <HAL_JPEG_Decode_DMA+0xbe>
 80033e6:	2300      	movs	r3, #0
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_JPEG_Pause>:
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b0c      	cmp	r3, #12
 8003408:	d116      	bne.n	8003438 <HAL_JPEG_Pause+0x48>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_JPEG_Pause+0x30>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003418:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d033      	beq.n	8003492 <HAL_JPEG_Pause+0xa2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	655a      	str	r2, [r3, #84]	@ 0x54
 8003436:	e02c      	b.n	8003492 <HAL_JPEG_Pause+0xa2>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343c:	f003 030c 	and.w	r3, r3, #12
 8003440:	2b08      	cmp	r3, #8
 8003442:	d126      	bne.n	8003492 <HAL_JPEG_Pause+0xa2>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_JPEG_Pause+0x72>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003452:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	655a      	str	r2, [r3, #84]	@ 0x54
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f043 0306 	orr.w	r3, r3, #6
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d009      	beq.n	8003480 <HAL_JPEG_Pause+0x90>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003470:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	655a      	str	r2, [r3, #84]	@ 0x54
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	43da      	mvns	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	400a      	ands	r2, r1
 8003490:	631a      	str	r2, [r3, #48]	@ 0x30
 8003492:	2300      	movs	r3, #0
 8003494:	4618      	mov	r0, r3
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_JPEG_ConfigInputBuffer>:
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	619a      	str	r2, [r3, #24]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_JPEG_ConfigOutputBuffer>:
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	61da      	str	r2, [r3, #28]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	62da      	str	r2, [r3, #44]	@ 0x2c
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_JPEG_EncodeCpltCallback>:
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_JPEG_IRQHandler>:
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800350a:	b2db      	uxtb	r3, r3
 800350c:	3b03      	subs	r3, #3
 800350e:	2b01      	cmp	r3, #1
 8003510:	d813      	bhi.n	800353a <HAL_JPEG_IRQHandler+0x3e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b08      	cmp	r3, #8
 800351c:	d103      	bne.n	8003526 <HAL_JPEG_IRQHandler+0x2a>
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fe16 	bl	8004150 <JPEG_Process>
 8003524:	e00b      	b.n	800353e <HAL_JPEG_IRQHandler+0x42>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b0c      	cmp	r3, #12
 8003530:	d105      	bne.n	800353e <HAL_JPEG_IRQHandler+0x42>
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f001 f956 	bl	80047e4 <JPEG_DMA_ContinueProcess>
 8003538:	e001      	b.n	800353e <HAL_JPEG_IRQHandler+0x42>
 800353a:	bf00      	nop
 800353c:	e000      	b.n	8003540 <HAL_JPEG_IRQHandler+0x44>
 800353e:	bf00      	nop
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <JPEG_Bits_To_SizeCodes>:
 8003548:	b480      	push	{r7}
 800354a:	b08b      	sub	sp, #44	@ 0x2c
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	2300      	movs	r3, #0
 8003558:	623b      	str	r3, [r7, #32]
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	e020      	b.n	80035a2 <JPEG_Bits_To_SizeCodes+0x5a>
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	4413      	add	r3, r2
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	627b      	str	r3, [r7, #36]	@ 0x24
 800356a:	6a3a      	ldr	r2, [r7, #32]
 800356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356e:	4413      	add	r3, r2
 8003570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003574:	d90f      	bls.n	8003596 <JPEG_Bits_To_SizeCodes+0x4e>
 8003576:	2301      	movs	r3, #1
 8003578:	e055      	b.n	8003626 <JPEG_Bits_To_SizeCodes+0xde>
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	440b      	add	r3, r1
 8003584:	3201      	adds	r2, #1
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	701a      	strb	r2, [r3, #0]
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	3301      	adds	r3, #1
 800358e:	623b      	str	r3, [r7, #32]
 8003590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003592:	3b01      	subs	r3, #1
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ee      	bne.n	800357a <JPEG_Bits_To_SizeCodes+0x32>
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	3301      	adds	r3, #1
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	2b0f      	cmp	r3, #15
 80035a6:	d9db      	bls.n	8003560 <JPEG_Bits_To_SizeCodes+0x18>
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	4413      	add	r3, r2
 80035ae:	2200      	movs	r2, #0
 80035b0:	701a      	strb	r2, [r3, #0]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6a3a      	ldr	r2, [r7, #32]
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	2300      	movs	r3, #0
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	2300      	movs	r3, #0
 80035c4:	623b      	str	r3, [r7, #32]
 80035c6:	e027      	b.n	8003618 <JPEG_Bits_To_SizeCodes+0xd0>
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	4413      	add	r3, r2
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	3301      	adds	r3, #1
 80035d8:	623b      	str	r3, [r7, #32]
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	3301      	adds	r3, #1
 80035de:	61bb      	str	r3, [r7, #24]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	4413      	add	r3, r2
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d0eb      	beq.n	80035c8 <JPEG_Bits_To_SizeCodes+0x80>
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2b1f      	cmp	r3, #31
 80035f4:	d901      	bls.n	80035fa <JPEG_Bits_To_SizeCodes+0xb2>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e015      	b.n	8003626 <JPEG_Bits_To_SizeCodes+0xde>
 80035fa:	2201      	movs	r2, #1
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	429a      	cmp	r2, r3
 8003606:	d301      	bcc.n	800360c <JPEG_Bits_To_SizeCodes+0xc4>
 8003608:	2301      	movs	r3, #1
 800360a:	e00c      	b.n	8003626 <JPEG_Bits_To_SizeCodes+0xde>
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	61bb      	str	r3, [r7, #24]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	3301      	adds	r3, #1
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	4413      	add	r3, r2
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1dd      	bne.n	80035e0 <JPEG_Bits_To_SizeCodes+0x98>
 8003624:	2300      	movs	r3, #0
 8003626:	4618      	mov	r0, r3
 8003628:	372c      	adds	r7, #44	@ 0x2c
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
 8003632:	b580      	push	{r7, lr}
 8003634:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8003638:	af00      	add	r7, sp, #0
 800363a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800363e:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8003642:	6018      	str	r0, [r3, #0]
 8003644:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003648:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800364c:	6019      	str	r1, [r3, #0]
 800364e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003652:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	f107 0308 	add.w	r3, r7, #8
 800365c:	f107 020c 	add.w	r2, r7, #12
 8003660:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8003664:	f7ff ff70 	bl	8003548 <JPEG_Bits_To_SizeCodes>
 8003668:	4603      	mov	r3, r0
 800366a:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
 800366e:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
 8003676:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800367a:	e075      	b.n	8003768 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
 800367c:	2300      	movs	r3, #0
 800367e:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 8003682:	e067      	b.n	8003754 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
 8003684:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003688:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8003692:	4413      	add	r3, r2
 8003694:	3310      	adds	r3, #16
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800369c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d103      	bne.n	80036ac <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
 80036a4:	23a0      	movs	r3, #160	@ 0xa0
 80036a6:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80036aa:	e021      	b.n	80036f0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
 80036ac:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80036b0:	2bf0      	cmp	r3, #240	@ 0xf0
 80036b2:	d103      	bne.n	80036bc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
 80036b4:	23a1      	movs	r3, #161	@ 0xa1
 80036b6:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80036ba:	e019      	b.n	80036f0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
 80036bc:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
 80036ca:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 80036d6:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	461a      	mov	r2, r3
 80036e4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80036e8:	4413      	add	r3, r2
 80036ea:	3b01      	subs	r3, #1
 80036ec:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80036f0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80036f4:	2ba1      	cmp	r3, #161	@ 0xa1
 80036f6:	d901      	bls.n	80036fc <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e035      	b.n	8003768 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
 80036fc:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003700:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003704:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8003708:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800370c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003710:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8003714:	6819      	ldr	r1, [r3, #0]
 8003716:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800371a:	3328      	adds	r3, #40	@ 0x28
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003726:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800372a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800372e:	4413      	add	r3, r2
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	3b01      	subs	r3, #1
 8003734:	b2d9      	uxtb	r1, r3
 8003736:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800373a:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8003744:	4413      	add	r3, r2
 8003746:	460a      	mov	r2, r1
 8003748:	701a      	strb	r2, [r3, #0]
 800374a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800374e:	3301      	adds	r3, #1
 8003750:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 8003754:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8003758:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8003762:	429a      	cmp	r2, r3
 8003764:	d38e      	bcc.n	8003684 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
 8003766:	2300      	movs	r3, #0
 8003768:	4618      	mov	r0, r3
 800376a:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
 8003772:	b580      	push	{r7, lr}
 8003774:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8003778:	af00      	add	r7, sp, #0
 800377a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800377e:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003782:	6018      	str	r0, [r3, #0]
 8003784:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003788:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800378c:	6019      	str	r1, [r3, #0]
 800378e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003792:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800379c:	f107 0208 	add.w	r2, r7, #8
 80037a0:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 80037a4:	f7ff fed0 	bl	8003548 <JPEG_Bits_To_SizeCodes>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
 80037ae:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
 80037b6:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 80037ba:	e048      	b.n	800384e <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
 80037bc:	2300      	movs	r3, #0
 80037be:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 80037c2:	e03d      	b.n	8003840 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
 80037c4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80037c8:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80037d2:	4413      	add	r3, r2
 80037d4:	3310      	adds	r3, #16
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 80037dc:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80037e0:	2b0b      	cmp	r3, #11
 80037e2:	d901      	bls.n	80037e8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e032      	b.n	800384e <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
 80037e8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80037ec:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 80037f0:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 80037f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80037f8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80037fc:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8003800:	6819      	ldr	r1, [r3, #0]
 8003802:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003806:	3302      	adds	r3, #2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003812:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8003816:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800381a:	4413      	add	r3, r2
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	3b01      	subs	r3, #1
 8003820:	b2d9      	uxtb	r1, r3
 8003822:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003826:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8003830:	4413      	add	r3, r2
 8003832:	460a      	mov	r2, r1
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800383a:	3301      	adds	r3, #1
 800383c:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 8003840:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8003844:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8003848:	429a      	cmp	r2, r3
 800384a:	d3bb      	bcc.n	80037c4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
 800384c:	2300      	movs	r3, #0
 800384e:	4618      	mov	r0, r3
 8003850:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <JPEG_Set_HuffDC_Mem>:
 8003858:	b580      	push	{r7, lr}
 800385a:	b09a      	sub	sp, #104	@ 0x68
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d106      	bne.n	8003880 <JPEG_Set_HuffDC_Mem+0x28>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800387a:	3318      	adds	r3, #24
 800387c:	663b      	str	r3, [r7, #96]	@ 0x60
 800387e:	e00f      	b.n	80038a0 <JPEG_Set_HuffDC_Mem+0x48>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	429a      	cmp	r2, r3
 800388c:	d106      	bne.n	800389c <JPEG_Set_HuffDC_Mem+0x44>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8003896:	3318      	adds	r3, #24
 8003898:	663b      	str	r3, [r7, #96]	@ 0x60
 800389a:	e001      	b.n	80038a0 <JPEG_Set_HuffDC_Mem+0x48>
 800389c:	2301      	movs	r3, #1
 800389e:	e059      	b.n	8003954 <JPEG_Set_HuffDC_Mem+0xfc>
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d055      	beq.n	8003952 <JPEG_Set_HuffDC_Mem+0xfa>
 80038a6:	f107 0314 	add.w	r3, r7, #20
 80038aa:	4619      	mov	r1, r3
 80038ac:	68b8      	ldr	r0, [r7, #8]
 80038ae:	f7ff ff60 	bl	8003772 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 80038b2:	4603      	mov	r3, r0
 80038b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80038b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <JPEG_Set_HuffDC_Mem+0x6e>
 80038c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80038c4:	e046      	b.n	8003954 <JPEG_Set_HuffDC_Mem+0xfc>
 80038c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038cc:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038d4:	3304      	adds	r3, #4
 80038d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038da:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	230c      	movs	r3, #12
 80038e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80038e4:	e032      	b.n	800394c <JPEG_Set_HuffDC_Mem+0xf4>
 80038e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038e8:	3b01      	subs	r3, #1
 80038ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80038ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038ee:	3b04      	subs	r3, #4
 80038f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80038f2:	f107 0214 	add.w	r2, r7, #20
 80038f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038f8:	4413      	add	r3, r2
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003902:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003904:	3302      	adds	r3, #2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	3368      	adds	r3, #104	@ 0x68
 800390a:	443b      	add	r3, r7
 800390c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	4313      	orrs	r3, r2
 8003914:	657b      	str	r3, [r7, #84]	@ 0x54
 8003916:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003918:	3b01      	subs	r3, #1
 800391a:	667b      	str	r3, [r7, #100]	@ 0x64
 800391c:	f107 0214 	add.w	r2, r7, #20
 8003920:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003922:	4413      	add	r3, r2
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800392c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800392e:	3302      	adds	r3, #2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	3368      	adds	r3, #104	@ 0x68
 8003934:	443b      	add	r3, r7
 8003936:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	4313      	orrs	r3, r2
 800393e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003942:	041a      	lsls	r2, r3, #16
 8003944:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003946:	431a      	orrs	r2, r3
 8003948:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800394e:	2b01      	cmp	r3, #1
 8003950:	d8c9      	bhi.n	80038e6 <JPEG_Set_HuffDC_Mem+0x8e>
 8003952:	2300      	movs	r3, #0
 8003954:	4618      	mov	r0, r3
 8003956:	3768      	adds	r7, #104	@ 0x68
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <JPEG_Set_HuffAC_Mem>:
 800395c:	b580      	push	{r7, lr}
 800395e:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8003962:	af00      	add	r7, sp, #0
 8003964:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003968:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800396c:	6018      	str	r0, [r3, #0]
 800396e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003972:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003976:	6019      	str	r1, [r3, #0]
 8003978:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800397c:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003986:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003992:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8003996:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d10c      	bne.n	80039ba <JPEG_Set_HuffAC_Mem+0x5e>
 80039a0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80039a4:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039b0:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80039b4:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 80039b8:	e01d      	b.n	80039f6 <JPEG_Set_HuffAC_Mem+0x9a>
 80039ba:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80039be:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 80039ca:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80039ce:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d10c      	bne.n	80039f2 <JPEG_Set_HuffAC_Mem+0x96>
 80039d8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80039dc:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 80039e8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80039ec:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 80039f0:	e001      	b.n	80039f6 <JPEG_Set_HuffAC_Mem+0x9a>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0a8      	b.n	8003b48 <JPEG_Set_HuffAC_Mem+0x1ec>
 80039f6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80039fa:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80a0 	beq.w	8003b46 <JPEG_Set_HuffAC_Mem+0x1ea>
 8003a06:	f107 0214 	add.w	r2, r7, #20
 8003a0a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003a0e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003a12:	4611      	mov	r1, r2
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	f7ff fe0c 	bl	8003632 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
 8003a20:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <JPEG_Set_HuffAC_Mem+0xd2>
 8003a28:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8003a2c:	e08c      	b.n	8003b48 <JPEG_Set_HuffAC_Mem+0x1ec>
 8003a2e:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003a32:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8003a36:	2300      	movs	r3, #0
 8003a38:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8003a3c:	e00e      	b.n	8003a5c <JPEG_Set_HuffAC_Mem+0x100>
 8003a3e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003a42:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8003a52:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003a56:	3301      	adds	r3, #1
 8003a58:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8003a5c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d9ec      	bls.n	8003a3e <JPEG_Set_HuffAC_Mem+0xe2>
 8003a64:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003a68:	4a3a      	ldr	r2, [pc, #232]	@ (8003b54 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003a70:	3304      	adds	r3, #4
 8003a72:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8003a76:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003a7a:	4a37      	ldr	r2, [pc, #220]	@ (8003b58 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003a82:	3304      	adds	r3, #4
 8003a84:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8003a88:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003a8c:	4a33      	ldr	r2, [pc, #204]	@ (8003b5c <JPEG_Set_HuffAC_Mem+0x200>)
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003a94:	3304      	adds	r3, #4
 8003a96:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8003a9a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003a9e:	4a30      	ldr	r2, [pc, #192]	@ (8003b60 <JPEG_Set_HuffAC_Mem+0x204>)
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	23a2      	movs	r3, #162	@ 0xa2
 8003aa4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8003aa8:	e049      	b.n	8003b3e <JPEG_Set_HuffAC_Mem+0x1e2>
 8003aaa:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8003ab4:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003ab8:	3b04      	subs	r3, #4
 8003aba:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8003abe:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003ac2:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8003ac6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003aca:	4413      	add	r3, r2
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003ad4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003ad8:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8003adc:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003ae0:	3328      	adds	r3, #40	@ 0x28
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8003af0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003af4:	3b01      	subs	r3, #1
 8003af6:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8003afa:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003afe:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8003b02:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003b06:	4413      	add	r3, r2
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003b10:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8003b14:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8003b18:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003b1c:	3328      	adds	r3, #40	@ 0x28
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 8003b2c:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8003b30:	041a      	lsls	r2, r3, #16
 8003b32:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8003b36:	431a      	orrs	r2, r3
 8003b38:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d8b1      	bhi.n	8003aaa <JPEG_Set_HuffAC_Mem+0x14e>
 8003b46:	2300      	movs	r3, #0
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	0fd10fd0 	.word	0x0fd10fd0
 8003b58:	0fd30fd2 	.word	0x0fd30fd2
 8003b5c:	0fd50fd4 	.word	0x0fd50fd4
 8003b60:	0fd70fd6 	.word	0x0fd70fd6

08003b64 <JPEG_Set_HuffEnc_Mem>:
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f84d 	bl	8003c0c <JPEG_Set_Huff_DHTMem>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	491f      	ldr	r1, [pc, #124]	@ (8003bfc <JPEG_Set_HuffEnc_Mem+0x98>)
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff feec 	bl	800395c <JPEG_Set_HuffAC_Mem>
 8003b84:	4603      	mov	r3, r0
 8003b86:	73fb      	strb	r3, [r7, #15]
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <JPEG_Set_HuffEnc_Mem+0x2e>
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	e030      	b.n	8003bf4 <JPEG_Set_HuffEnc_Mem+0x90>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4918      	ldr	r1, [pc, #96]	@ (8003c00 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff fedc 	bl	800395c <JPEG_Set_HuffAC_Mem>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	73fb      	strb	r3, [r7, #15]
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <JPEG_Set_HuffEnc_Mem+0x4e>
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
 8003bb0:	e020      	b.n	8003bf4 <JPEG_Set_HuffEnc_Mem+0x90>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4911      	ldr	r1, [pc, #68]	@ (8003c04 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff fe4a 	bl	8003858 <JPEG_Set_HuffDC_Mem>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	73fb      	strb	r3, [r7, #15]
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <JPEG_Set_HuffEnc_Mem+0x6e>
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	e010      	b.n	8003bf4 <JPEG_Set_HuffEnc_Mem+0x90>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8003bda:	461a      	mov	r2, r3
 8003bdc:	490a      	ldr	r1, [pc, #40]	@ (8003c08 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff fe3a 	bl	8003858 <JPEG_Set_HuffDC_Mem>
 8003be4:	4603      	mov	r3, r0
 8003be6:	73fb      	strb	r3, [r7, #15]
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <JPEG_Set_HuffEnc_Mem+0x8e>
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	e000      	b.n	8003bf4 <JPEG_Set_HuffEnc_Mem+0x90>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	0800efdc 	.word	0x0800efdc
 8003c00:	0800f090 	.word	0x0800f090
 8003c04:	0800efa4 	.word	0x0800efa4
 8003c08:	0800efc0 	.word	0x0800efc0

08003c0c <JPEG_Set_Huff_DHTMem>:
 8003c0c:	b480      	push	{r7}
 8003c0e:	b08b      	sub	sp, #44	@ 0x2c
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	4b80      	ldr	r3, [pc, #512]	@ (8003e18 <JPEG_Set_Huff_DHTMem+0x20c>)
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	4b80      	ldr	r3, [pc, #512]	@ (8003e1c <JPEG_Set_Huff_DHTMem+0x210>)
 8003c1a:	61bb      	str	r3, [r7, #24]
 8003c1c:	4b80      	ldr	r3, [pc, #512]	@ (8003e20 <JPEG_Set_Huff_DHTMem+0x214>)
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	4b80      	ldr	r3, [pc, #512]	@ (8003e24 <JPEG_Set_Huff_DHTMem+0x218>)
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003c2c:	330c      	adds	r3, #12
 8003c2e:	623b      	str	r3, [r7, #32]
 8003c30:	2310      	movs	r3, #16
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c34:	e01d      	b.n	8003c72 <JPEG_Set_Huff_DHTMem+0x66>
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	5cd3      	ldrb	r3, [r2, r3]
 8003c3e:	061a      	lsls	r2, r3, #24
 8003c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c42:	3b02      	subs	r3, #2
 8003c44:	6979      	ldr	r1, [r7, #20]
 8003c46:	5ccb      	ldrb	r3, [r1, r3]
 8003c48:	041b      	lsls	r3, r3, #16
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4e:	3b03      	subs	r3, #3
 8003c50:	6979      	ldr	r1, [r7, #20]
 8003c52:	5ccb      	ldrb	r3, [r1, r3]
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	4313      	orrs	r3, r2
 8003c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c5a:	3a04      	subs	r2, #4
 8003c5c:	6979      	ldr	r1, [r7, #20]
 8003c5e:	5c8a      	ldrb	r2, [r1, r2]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	3b04      	subs	r3, #4
 8003c6a:	623b      	str	r3, [r7, #32]
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	3b04      	subs	r3, #4
 8003c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d8de      	bhi.n	8003c36 <JPEG_Set_Huff_DHTMem+0x2a>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003c80:	3318      	adds	r3, #24
 8003c82:	623b      	str	r3, [r7, #32]
 8003c84:	230c      	movs	r3, #12
 8003c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c88:	e021      	b.n	8003cce <JPEG_Set_Huff_DHTMem+0xc2>
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4413      	add	r3, r2
 8003c92:	7c1b      	ldrb	r3, [r3, #16]
 8003c94:	061a      	lsls	r2, r3, #24
 8003c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c98:	3b02      	subs	r3, #2
 8003c9a:	6979      	ldr	r1, [r7, #20]
 8003c9c:	440b      	add	r3, r1
 8003c9e:	7c1b      	ldrb	r3, [r3, #16]
 8003ca0:	041b      	lsls	r3, r3, #16
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca6:	3b03      	subs	r3, #3
 8003ca8:	6979      	ldr	r1, [r7, #20]
 8003caa:	440b      	add	r3, r1
 8003cac:	7c1b      	ldrb	r3, [r3, #16]
 8003cae:	021b      	lsls	r3, r3, #8
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cb4:	3a04      	subs	r2, #4
 8003cb6:	6979      	ldr	r1, [r7, #20]
 8003cb8:	440a      	add	r2, r1
 8003cba:	7c12      	ldrb	r2, [r2, #16]
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	3b04      	subs	r3, #4
 8003cc6:	623b      	str	r3, [r7, #32]
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cca:	3b04      	subs	r3, #4
 8003ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d8da      	bhi.n	8003c8a <JPEG_Set_Huff_DHTMem+0x7e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003cdc:	3328      	adds	r3, #40	@ 0x28
 8003cde:	623b      	str	r3, [r7, #32]
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce4:	e01d      	b.n	8003d22 <JPEG_Set_Huff_DHTMem+0x116>
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	5cd3      	ldrb	r3, [r2, r3]
 8003cee:	061a      	lsls	r2, r3, #24
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	3b02      	subs	r3, #2
 8003cf4:	69f9      	ldr	r1, [r7, #28]
 8003cf6:	5ccb      	ldrb	r3, [r1, r3]
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	3b03      	subs	r3, #3
 8003d00:	69f9      	ldr	r1, [r7, #28]
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	021b      	lsls	r3, r3, #8
 8003d06:	4313      	orrs	r3, r2
 8003d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d0a:	3a04      	subs	r2, #4
 8003d0c:	69f9      	ldr	r1, [r7, #28]
 8003d0e:	5c8a      	ldrb	r2, [r1, r2]
 8003d10:	431a      	orrs	r2, r3
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	3b04      	subs	r3, #4
 8003d1a:	623b      	str	r3, [r7, #32]
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1e:	3b04      	subs	r3, #4
 8003d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d8de      	bhi.n	8003ce6 <JPEG_Set_Huff_DHTMem+0xda>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003d30:	33cc      	adds	r3, #204	@ 0xcc
 8003d32:	623b      	str	r3, [r7, #32]
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b3b      	ldr	r3, [pc, #236]	@ (8003e28 <JPEG_Set_Huff_DHTMem+0x21c>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8003d44:	021a      	lsls	r2, r3, #8
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	3b04      	subs	r3, #4
 8003d5e:	623b      	str	r3, [r7, #32]
 8003d60:	23a0      	movs	r3, #160	@ 0xa0
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d64:	e021      	b.n	8003daa <JPEG_Set_Huff_DHTMem+0x19e>
 8003d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	7c1b      	ldrb	r3, [r3, #16]
 8003d70:	061a      	lsls	r2, r3, #24
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	3b02      	subs	r3, #2
 8003d76:	69f9      	ldr	r1, [r7, #28]
 8003d78:	440b      	add	r3, r1
 8003d7a:	7c1b      	ldrb	r3, [r3, #16]
 8003d7c:	041b      	lsls	r3, r3, #16
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d82:	3b03      	subs	r3, #3
 8003d84:	69f9      	ldr	r1, [r7, #28]
 8003d86:	440b      	add	r3, r1
 8003d88:	7c1b      	ldrb	r3, [r3, #16]
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d90:	3a04      	subs	r2, #4
 8003d92:	69f9      	ldr	r1, [r7, #28]
 8003d94:	440a      	add	r2, r1
 8003d96:	7c12      	ldrb	r2, [r2, #16]
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	3b04      	subs	r3, #4
 8003da2:	623b      	str	r3, [r7, #32]
 8003da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da6:	3b04      	subs	r3, #4
 8003da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d8da      	bhi.n	8003d66 <JPEG_Set_Huff_DHTMem+0x15a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003db8:	33cc      	adds	r3, #204	@ 0xcc
 8003dba:	623b      	str	r3, [r7, #32]
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	785b      	ldrb	r3, [r3, #1]
 8003dc8:	061a      	lsls	r2, r3, #24
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	041b      	lsls	r3, r3, #16
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003de6:	33dc      	adds	r3, #220	@ 0xdc
 8003de8:	623b      	str	r3, [r7, #32]
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4b0e      	ldr	r3, [pc, #56]	@ (8003e28 <JPEG_Set_Huff_DHTMem+0x21c>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	7bdb      	ldrb	r3, [r3, #15]
 8003df8:	021a      	lsls	r2, r3, #8
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	7b92      	ldrb	r2, [r2, #14]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	3b04      	subs	r3, #4
 8003e10:	623b      	str	r3, [r7, #32]
 8003e12:	230c      	movs	r3, #12
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e16:	e027      	b.n	8003e68 <JPEG_Set_Huff_DHTMem+0x25c>
 8003e18:	0800efdc 	.word	0x0800efdc
 8003e1c:	0800f090 	.word	0x0800f090
 8003e20:	0800efa4 	.word	0x0800efa4
 8003e24:	0800efc0 	.word	0x0800efc0
 8003e28:	ffff0000 	.word	0xffff0000
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2e:	3301      	adds	r3, #1
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	5cd3      	ldrb	r3, [r2, r3]
 8003e34:	061a      	lsls	r2, r3, #24
 8003e36:	6939      	ldr	r1, [r7, #16]
 8003e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3a:	440b      	add	r3, r1
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	041b      	lsls	r3, r3, #16
 8003e40:	431a      	orrs	r2, r3
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	3b01      	subs	r3, #1
 8003e46:	6939      	ldr	r1, [r7, #16]
 8003e48:	5ccb      	ldrb	r3, [r1, r3]
 8003e4a:	021b      	lsls	r3, r3, #8
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e50:	3a02      	subs	r2, #2
 8003e52:	6939      	ldr	r1, [r7, #16]
 8003e54:	5c8a      	ldrb	r2, [r1, r2]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	3b04      	subs	r3, #4
 8003e60:	623b      	str	r3, [r7, #32]
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	3b04      	subs	r3, #4
 8003e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d8de      	bhi.n	8003e2c <JPEG_Set_Huff_DHTMem+0x220>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003e76:	33dc      	adds	r3, #220	@ 0xdc
 8003e78:	623b      	str	r3, [r7, #32]
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	7c5b      	ldrb	r3, [r3, #17]
 8003e86:	061a      	lsls	r2, r3, #24
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	7c1b      	ldrb	r3, [r3, #16]
 8003e90:	041b      	lsls	r3, r3, #16
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003ea4:	33e8      	adds	r3, #232	@ 0xe8
 8003ea6:	623b      	str	r3, [r7, #32]
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b6d      	ldr	r3, [pc, #436]	@ (8004064 <JPEG_Set_Huff_DHTMem+0x458>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	7edb      	ldrb	r3, [r3, #27]
 8003eb6:	021a      	lsls	r2, r3, #8
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	7e92      	ldrb	r2, [r2, #26]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	3b04      	subs	r3, #4
 8003ece:	623b      	str	r3, [r7, #32]
 8003ed0:	2308      	movs	r3, #8
 8003ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed4:	e021      	b.n	8003f1a <JPEG_Set_Huff_DHTMem+0x30e>
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed8:	3301      	adds	r3, #1
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4413      	add	r3, r2
 8003ede:	7c1b      	ldrb	r3, [r3, #16]
 8003ee0:	061a      	lsls	r2, r3, #24
 8003ee2:	6939      	ldr	r1, [r7, #16]
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	440b      	add	r3, r1
 8003ee8:	3310      	adds	r3, #16
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	041b      	lsls	r3, r3, #16
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	6939      	ldr	r1, [r7, #16]
 8003ef6:	440b      	add	r3, r1
 8003ef8:	7c1b      	ldrb	r3, [r3, #16]
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	4313      	orrs	r3, r2
 8003efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f00:	3a02      	subs	r2, #2
 8003f02:	6939      	ldr	r1, [r7, #16]
 8003f04:	440a      	add	r2, r1
 8003f06:	7c12      	ldrb	r2, [r2, #16]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	3b04      	subs	r3, #4
 8003f12:	623b      	str	r3, [r7, #32]
 8003f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f16:	3b04      	subs	r3, #4
 8003f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d8da      	bhi.n	8003ed6 <JPEG_Set_Huff_DHTMem+0x2ca>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003f28:	33e8      	adds	r3, #232	@ 0xe8
 8003f2a:	623b      	str	r3, [r7, #32]
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	785b      	ldrb	r3, [r3, #1]
 8003f38:	061a      	lsls	r2, r3, #24
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	041b      	lsls	r3, r3, #16
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003f56:	33f8      	adds	r3, #248	@ 0xf8
 8003f58:	623b      	str	r3, [r7, #32]
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4b41      	ldr	r3, [pc, #260]	@ (8004064 <JPEG_Set_Huff_DHTMem+0x458>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	7bdb      	ldrb	r3, [r3, #15]
 8003f68:	021a      	lsls	r2, r3, #8
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	7b92      	ldrb	r2, [r2, #14]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	3b04      	subs	r3, #4
 8003f80:	623b      	str	r3, [r7, #32]
 8003f82:	230c      	movs	r3, #12
 8003f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f86:	e01d      	b.n	8003fc4 <JPEG_Set_Huff_DHTMem+0x3b8>
 8003f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	5cd3      	ldrb	r3, [r2, r3]
 8003f90:	061a      	lsls	r2, r3, #24
 8003f92:	69b9      	ldr	r1, [r7, #24]
 8003f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f96:	440b      	add	r3, r1
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	041b      	lsls	r3, r3, #16
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	69b9      	ldr	r1, [r7, #24]
 8003fa4:	5ccb      	ldrb	r3, [r1, r3]
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fac:	3a02      	subs	r2, #2
 8003fae:	69b9      	ldr	r1, [r7, #24]
 8003fb0:	5c8a      	ldrb	r2, [r1, r2]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	3b04      	subs	r3, #4
 8003fbc:	623b      	str	r3, [r7, #32]
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	3b04      	subs	r3, #4
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	d8de      	bhi.n	8003f88 <JPEG_Set_Huff_DHTMem+0x37c>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003fd2:	33f8      	adds	r3, #248	@ 0xf8
 8003fd4:	623b      	str	r3, [r7, #32]
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	7c5b      	ldrb	r3, [r3, #17]
 8003fe2:	061a      	lsls	r2, r3, #24
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	7c1b      	ldrb	r3, [r3, #16]
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8004000:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8004004:	623b      	str	r3, [r7, #32]
 8004006:	23a0      	movs	r3, #160	@ 0xa0
 8004008:	627b      	str	r3, [r7, #36]	@ 0x24
 800400a:	e021      	b.n	8004050 <JPEG_Set_Huff_DHTMem+0x444>
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	3301      	adds	r3, #1
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4413      	add	r3, r2
 8004014:	7c1b      	ldrb	r3, [r3, #16]
 8004016:	061a      	lsls	r2, r3, #24
 8004018:	69b9      	ldr	r1, [r7, #24]
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	440b      	add	r3, r1
 800401e:	3310      	adds	r3, #16
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	041b      	lsls	r3, r3, #16
 8004024:	431a      	orrs	r2, r3
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	3b01      	subs	r3, #1
 800402a:	69b9      	ldr	r1, [r7, #24]
 800402c:	440b      	add	r3, r1
 800402e:	7c1b      	ldrb	r3, [r3, #16]
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	4313      	orrs	r3, r2
 8004034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004036:	3a02      	subs	r2, #2
 8004038:	69b9      	ldr	r1, [r7, #24]
 800403a:	440a      	add	r2, r1
 800403c:	7c12      	ldrb	r2, [r2, #16]
 800403e:	431a      	orrs	r2, r3
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	3b04      	subs	r3, #4
 8004048:	623b      	str	r3, [r7, #32]
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	3b04      	subs	r3, #4
 800404e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004052:	2b03      	cmp	r3, #3
 8004054:	d8da      	bhi.n	800400c <JPEG_Set_Huff_DHTMem+0x400>
 8004056:	bf00      	nop
 8004058:	bf00      	nop
 800405a:	372c      	adds	r7, #44	@ 0x2c
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	ffff0000 	.word	0xffff0000

08004068 <JPEG_Init_Process>:
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004074:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	655a      	str	r2, [r3, #84]	@ 0x54
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d108      	bne.n	800409a <JPEG_Init_Process+0x32>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0208 	orr.w	r2, r2, #8
 8004096:	605a      	str	r2, [r3, #4]
 8004098:	e007      	b.n	80040aa <JPEG_Init_Process+0x42>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0208 	bic.w	r2, r2, #8
 80040a8:	605a      	str	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0201 	bic.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80040c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80040f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0201 	orr.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410e:	f003 030c 	and.w	r3, r3, #12
 8004112:	2b08      	cmp	r3, #8
 8004114:	d108      	bne.n	8004128 <JPEG_Init_Process+0xc0>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8004124:	631a      	str	r2, [r3, #48]	@ 0x30
 8004126:	e00d      	b.n	8004144 <JPEG_Init_Process+0xdc>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800412c:	f003 030c 	and.w	r3, r3, #12
 8004130:	2b0c      	cmp	r3, #12
 8004132:	d107      	bne.n	8004144 <JPEG_Init_Process+0xdc>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004142:	631a      	str	r2, [r3, #48]	@ 0x30
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <JPEG_Process>:
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d125      	bne.n	80041b0 <JPEG_Process+0x60>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800416a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01e      	beq.n	80041b0 <JPEG_Process+0x60>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3304      	adds	r3, #4
 8004176:	4619      	mov	r1, r3
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff f841 	bl	8003200 <HAL_JPEG_GetInfo>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	615a      	str	r2, [r3, #20]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3304      	adds	r3, #4
 8004188:	4619      	mov	r1, r3
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fc ff80 	bl	8001090 <HAL_JPEG_InfoReadyCallback>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800419e:	631a      	str	r2, [r3, #48]	@ 0x30
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d116      	bne.n	80041ea <JPEG_Process+0x9a>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d004      	beq.n	80041d4 <JPEG_Process+0x84>
 80041ca:	2108      	movs	r1, #8
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f988 	bl	80044e2 <JPEG_ReadInputData>
 80041d2:	e00a      	b.n	80041ea <JPEG_Process+0x9a>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <JPEG_Process+0x9a>
 80041e2:	2101      	movs	r1, #1
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f97c 	bl	80044e2 <JPEG_ReadInputData>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d116      	bne.n	8004224 <JPEG_Process+0xd4>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d004      	beq.n	800420e <JPEG_Process+0xbe>
 8004204:	2108      	movs	r1, #8
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f864 	bl	80042d4 <JPEG_StoreOutputData>
 800420c:	e00a      	b.n	8004224 <JPEG_Process+0xd4>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <JPEG_Process+0xd4>
 800421c:	2101      	movs	r1, #1
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f858 	bl	80042d4 <JPEG_StoreOutputData>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800422e:	2b20      	cmp	r3, #32
 8004230:	d14b      	bne.n	80042ca <JPEG_Process+0x17a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004246:	f003 030c 	and.w	r3, r3, #12
 800424a:	2b08      	cmp	r3, #8
 800424c:	d107      	bne.n	800425e <JPEG_Process+0x10e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800425c:	631a      	str	r2, [r3, #48]	@ 0x30
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800426c:	639a      	str	r2, [r3, #56]	@ 0x38
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <JPEG_Process+0x13c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69d9      	ldr	r1, [r3, #28]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	461a      	mov	r2, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7fc ff4f 	bl	8001124 <HAL_JPEG_DataReadyCallback>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	625a      	str	r2, [r3, #36]	@ 0x24
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004296:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	655a      	str	r2, [r3, #84]	@ 0x54
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d103      	bne.n	80042c0 <JPEG_Process+0x170>
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7fc ff57 	bl	800116c <HAL_JPEG_DecodeCpltCallback>
 80042be:	e002      	b.n	80042c6 <JPEG_Process+0x176>
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff f911 	bl	80034e8 <HAL_JPEG_EncodeCpltCallback>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <JPEG_Process+0x17c>
 80042ca:	2300      	movs	r3, #0
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <JPEG_StoreOutputData>:
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d34b      	bcc.n	8004388 <JPEG_StoreOutputData+0xb4>
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	e031      	b.n	800435a <JPEG_StoreOutputData+0x86>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fc:	60bb      	str	r3, [r7, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69da      	ldr	r2, [r3, #28]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004306:	4413      	add	r3, r2
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	0a19      	lsrs	r1, r3, #8
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69da      	ldr	r2, [r3, #28]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431a:	3301      	adds	r3, #1
 800431c:	4413      	add	r3, r2
 800431e:	b2ca      	uxtb	r2, r1
 8004320:	701a      	strb	r2, [r3, #0]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	0c19      	lsrs	r1, r3, #16
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69da      	ldr	r2, [r3, #28]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	3302      	adds	r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	b2ca      	uxtb	r2, r1
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	0e19      	lsrs	r1, r3, #24
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69da      	ldr	r2, [r3, #28]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004342:	3303      	adds	r3, #3
 8004344:	4413      	add	r3, r2
 8004346:	b2ca      	uxtb	r2, r1
 8004348:	701a      	strb	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434e:	1d1a      	adds	r2, r3, #4
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	625a      	str	r2, [r3, #36]	@ 0x24
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	3301      	adds	r3, #1
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d3c9      	bcc.n	80042f6 <JPEG_StoreOutputData+0x22>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436a:	429a      	cmp	r2, r3
 800436c:	f040 80b5 	bne.w	80044da <JPEG_StoreOutputData+0x206>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69d9      	ldr	r1, [r3, #28]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004378:	461a      	mov	r2, r3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fc fed2 	bl	8001124 <HAL_JPEG_DataReadyCallback>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	625a      	str	r2, [r3, #36]	@ 0x24
 8004386:	e0a8      	b.n	80044da <JPEG_StoreOutputData+0x206>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004390:	429a      	cmp	r2, r3
 8004392:	f240 80a2 	bls.w	80044da <JPEG_StoreOutputData+0x206>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	089b      	lsrs	r3, r3, #2
 80043a2:	613b      	str	r3, [r7, #16]
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	e031      	b.n	800440e <JPEG_StoreOutputData+0x13a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69da      	ldr	r2, [r3, #28]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ba:	4413      	add	r3, r2
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	0a19      	lsrs	r1, r3, #8
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69da      	ldr	r2, [r3, #28]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ce:	3301      	adds	r3, #1
 80043d0:	4413      	add	r3, r2
 80043d2:	b2ca      	uxtb	r2, r1
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	0c19      	lsrs	r1, r3, #16
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e2:	3302      	adds	r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	b2ca      	uxtb	r2, r1
 80043e8:	701a      	strb	r2, [r3, #0]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	0e19      	lsrs	r1, r3, #24
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69da      	ldr	r2, [r3, #28]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f6:	3303      	adds	r3, #3
 80043f8:	4413      	add	r3, r2
 80043fa:	b2ca      	uxtb	r2, r1
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004402:	1d1a      	adds	r2, r3, #4
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	625a      	str	r2, [r3, #36]	@ 0x24
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	3301      	adds	r3, #1
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	429a      	cmp	r2, r3
 8004414:	d3c9      	bcc.n	80043aa <JPEG_StoreOutputData+0xd6>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441e:	429a      	cmp	r2, r3
 8004420:	d10b      	bne.n	800443a <JPEG_StoreOutputData+0x166>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69d9      	ldr	r1, [r3, #28]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442a:	461a      	mov	r2, r3
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7fc fe79 	bl	8001124 <HAL_JPEG_DataReadyCallback>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	625a      	str	r2, [r3, #36]	@ 0x24
 8004438:	e04f      	b.n	80044da <JPEG_StoreOutputData+0x206>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	e015      	b.n	8004480 <JPEG_StoreOutputData+0x1ac>
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	fa22 f103 	lsr.w	r1, r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69da      	ldr	r2, [r3, #28]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446a:	4413      	add	r3, r2
 800446c:	b2ca      	uxtb	r2, r1
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	625a      	str	r2, [r3, #36]	@ 0x24
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	3301      	adds	r3, #1
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	429a      	cmp	r2, r3
 8004486:	d3e5      	bcc.n	8004454 <JPEG_StoreOutputData+0x180>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69d9      	ldr	r1, [r3, #28]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004490:	461a      	mov	r2, r3
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fc fe46 	bl	8001124 <HAL_JPEG_DataReadyCallback>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	625a      	str	r2, [r3, #36]	@ 0x24
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f1c3 0304 	rsb	r3, r3, #4
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	e013      	b.n	80044d4 <JPEG_StoreOutputData+0x200>
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	fa22 f103 	lsr.w	r1, r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69da      	ldr	r2, [r3, #28]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	4413      	add	r3, r2
 80044c0:	b2ca      	uxtb	r2, r1
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	3301      	adds	r3, #1
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d9e8      	bls.n	80044ac <JPEG_StoreOutputData+0x1d8>
 80044da:	bf00      	nop
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <JPEG_ReadInputData>:
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b088      	sub	sp, #32
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]
 80044ec:	2300      	movs	r3, #0
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <JPEG_ReadInputData+0x1c>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d104      	bne.n	8004508 <JPEG_ReadInputData+0x26>
 80044fe:	2101      	movs	r1, #1
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7fe ff75 	bl	80033f0 <HAL_JPEG_Pause>
 8004506:	e028      	b.n	800455a <JPEG_ReadInputData+0x78>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	429a      	cmp	r2, r3
 8004512:	d906      	bls.n	8004522 <JPEG_ReadInputData+0x40>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	61fb      	str	r3, [r7, #28]
 8004520:	e01b      	b.n	800455a <JPEG_ReadInputData+0x78>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	429a      	cmp	r2, r3
 800452c:	d115      	bne.n	800455a <JPEG_ReadInputData+0x78>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	4619      	mov	r1, r3
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7fc fdb7 	bl	80010a8 <HAL_JPEG_GetDataCallback>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453e:	2b04      	cmp	r3, #4
 8004540:	d905      	bls.n	800454e <JPEG_ReadInputData+0x6c>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004546:	f023 0203 	bic.w	r2, r3, #3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	629a      	str	r2, [r3, #40]	@ 0x28
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	621a      	str	r2, [r3, #32]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004558:	61fb      	str	r3, [r7, #28]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004562:	2b00      	cmp	r3, #0
 8004564:	f040 809f 	bne.w	80046a6 <JPEG_ReadInputData+0x1c4>
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 809b 	beq.w	80046a6 <JPEG_ReadInputData+0x1c4>
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	089b      	lsrs	r3, r3, #2
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d335      	bcc.n	80045ea <JPEG_ReadInputData+0x108>
 800457e:	2300      	movs	r3, #0
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	e02d      	b.n	80045e0 <JPEG_ReadInputData+0xfe>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4413      	add	r3, r2
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	4619      	mov	r1, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699a      	ldr	r2, [r3, #24]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3301      	adds	r3, #1
 800459e:	4413      	add	r3, r2
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	ea41 0203 	orr.w	r2, r1, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6999      	ldr	r1, [r3, #24]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	3302      	adds	r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	041b      	lsls	r3, r3, #16
 80045b6:	ea42 0103 	orr.w	r1, r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3303      	adds	r3, #3
 80045c2:	4413      	add	r3, r2
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	061a      	lsls	r2, r3, #24
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	1d1a      	adds	r2, r3, #4
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	621a      	str	r2, [r3, #32]
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	3301      	adds	r3, #1
 80045de:	61bb      	str	r3, [r7, #24]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d3cd      	bcc.n	8004584 <JPEG_ReadInputData+0xa2>
 80045e8:	e05d      	b.n	80046a6 <JPEG_ReadInputData+0x1c4>
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d035      	beq.n	800465c <JPEG_ReadInputData+0x17a>
 80045f0:	2300      	movs	r3, #0
 80045f2:	61bb      	str	r3, [r7, #24]
 80045f4:	e02d      	b.n	8004652 <JPEG_ReadInputData+0x170>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699a      	ldr	r2, [r3, #24]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	4619      	mov	r1, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699a      	ldr	r2, [r3, #24]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3301      	adds	r3, #1
 8004610:	4413      	add	r3, r2
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	021b      	lsls	r3, r3, #8
 8004616:	ea41 0203 	orr.w	r2, r1, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6999      	ldr	r1, [r3, #24]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3302      	adds	r3, #2
 8004622:	440b      	add	r3, r1
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	041b      	lsls	r3, r3, #16
 8004628:	ea42 0103 	orr.w	r1, r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699a      	ldr	r2, [r3, #24]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3303      	adds	r3, #3
 8004634:	4413      	add	r3, r2
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	061a      	lsls	r2, r3, #24
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	641a      	str	r2, [r3, #64]	@ 0x40
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	1d1a      	adds	r2, r3, #4
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	621a      	str	r2, [r3, #32]
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	3301      	adds	r3, #1
 8004650:	61bb      	str	r3, [r7, #24]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	429a      	cmp	r2, r3
 8004658:	d3cd      	bcc.n	80045f6 <JPEG_ReadInputData+0x114>
 800465a:	e024      	b.n	80046a6 <JPEG_ReadInputData+0x1c4>
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	2300      	movs	r3, #0
 8004662:	61bb      	str	r3, [r7, #24]
 8004664:	e017      	b.n	8004696 <JPEG_ReadInputData+0x1b4>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	4413      	add	r3, r2
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	621a      	str	r2, [r3, #32]
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	3301      	adds	r3, #1
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	429a      	cmp	r2, r3
 800469c:	d3e3      	bcc.n	8004666 <JPEG_ReadInputData+0x184>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80046a6:	bf00      	nop
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <JPEG_DMA_StartProcess>:
 80046b0:	b590      	push	{r4, r7, lr}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c6:	60bb      	str	r3, [r7, #8]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d804      	bhi.n	80046dc <JPEG_DMA_StartProcess+0x2c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d901      	bls.n	80046e0 <JPEG_DMA_StartProcess+0x30>
 80046dc:	2301      	movs	r3, #1
 80046de:	e074      	b.n	80047ca <JPEG_DMA_StartProcess+0x11a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e4:	4a3b      	ldr	r2, [pc, #236]	@ (80047d4 <JPEG_DMA_StartProcess+0x124>)
 80046e6:	645a      	str	r2, [r3, #68]	@ 0x44
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ec:	4a3a      	ldr	r2, [pc, #232]	@ (80047d8 <JPEG_DMA_StartProcess+0x128>)
 80046ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f4:	4a39      	ldr	r2, [pc, #228]	@ (80047dc <JPEG_DMA_StartProcess+0x12c>)
 80046f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046fc:	4a36      	ldr	r2, [pc, #216]	@ (80047d8 <JPEG_DMA_StartProcess+0x128>)
 80046fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004704:	4a36      	ldr	r2, [pc, #216]	@ (80047e0 <JPEG_DMA_StartProcess+0x130>)
 8004706:	659a      	str	r2, [r3, #88]	@ 0x58
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <JPEG_DMA_StartProcess+0x64>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d107      	bne.n	8004724 <JPEG_DMA_StartProcess+0x74>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004718:	f043 0204 	orr.w	r2, r3, #4
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004720:	2301      	movs	r3, #1
 8004722:	e052      	b.n	80047ca <JPEG_DMA_StartProcess+0x11a>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472c:	68f9      	ldr	r1, [r7, #12]
 800472e:	fbb3 f1f1 	udiv	r1, r3, r1
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	fb00 f101 	mul.w	r1, r0, r1
 8004738:	1a5b      	subs	r3, r3, r1
 800473a:	1ad2      	subs	r2, r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004748:	68b9      	ldr	r1, [r7, #8]
 800474a:	fbb3 f1f1 	udiv	r1, r3, r1
 800474e:	68b8      	ldr	r0, [r7, #8]
 8004750:	fb00 f101 	mul.w	r1, r0, r1
 8004754:	1a5b      	subs	r3, r3, r1
 8004756:	1ad2      	subs	r2, r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3344      	adds	r3, #68	@ 0x44
 8004766:	4619      	mov	r1, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	461c      	mov	r4, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004772:	2201      	movs	r2, #1
 8004774:	9200      	str	r2, [sp, #0]
 8004776:	4622      	mov	r2, r4
 8004778:	f000 fbe8 	bl	8004f4c <HAL_MDMA_Start_IT>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d007      	beq.n	8004792 <JPEG_DMA_StartProcess+0xe2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004786:	f043 0204 	orr.w	r2, r3, #4
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	651a      	str	r2, [r3, #80]	@ 0x50
 800478e:	2301      	movs	r3, #1
 8004790:	e01b      	b.n	80047ca <JPEG_DMA_StartProcess+0x11a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	4619      	mov	r1, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3340      	adds	r3, #64	@ 0x40
 80047a2:	461c      	mov	r4, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a8:	2201      	movs	r2, #1
 80047aa:	9200      	str	r2, [sp, #0]
 80047ac:	4622      	mov	r2, r4
 80047ae:	f000 fbcd 	bl	8004f4c <HAL_MDMA_Start_IT>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <JPEG_DMA_StartProcess+0x118>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047bc:	f043 0204 	orr.w	r2, r3, #4
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <JPEG_DMA_StartProcess+0x11a>
 80047c8:	2300      	movs	r3, #0
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd90      	pop	{r4, r7, pc}
 80047d2:	bf00      	nop
 80047d4:	08004ae3 	.word	0x08004ae3
 80047d8:	08004cd1 	.word	0x08004cd1
 80047dc:	08004c0f 	.word	0x08004c0f
 80047e0:	08004d21 	.word	0x08004d21

080047e4 <JPEG_DMA_ContinueProcess>:
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f0:	f003 0303 	and.w	r3, r3, #3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d125      	bne.n	8004844 <JPEG_DMA_ContinueProcess+0x60>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004802:	2b00      	cmp	r3, #0
 8004804:	d01e      	beq.n	8004844 <JPEG_DMA_ContinueProcess+0x60>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	3304      	adds	r3, #4
 800480a:	4619      	mov	r1, r3
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7fe fcf7 	bl	8003200 <HAL_JPEG_GetInfo>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	615a      	str	r2, [r3, #20]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3304      	adds	r3, #4
 800481c:	4619      	mov	r1, r3
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fc fc36 	bl	8001090 <HAL_JPEG_InfoReadyCallback>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004832:	631a      	str	r2, [r3, #48]	@ 0x30
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004842:	639a      	str	r2, [r3, #56]	@ 0x38
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d039      	beq.n	80048c6 <JPEG_DMA_ContinueProcess+0xe2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004856:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	655a      	str	r2, [r3, #84]	@ 0x54
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0201 	bic.w	r2, r2, #1
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800487c:	631a      	str	r2, [r3, #48]	@ 0x30
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800488c:	639a      	str	r2, [r3, #56]	@ 0x38
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d104      	bne.n	80048a6 <JPEG_DMA_ContinueProcess+0xc2>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fbd4 	bl	800504e <HAL_MDMA_Abort_IT>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d105      	bne.n	80048c0 <JPEG_DMA_ContinueProcess+0xdc>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fbc8 	bl	800504e <HAL_MDMA_Abort_IT>
 80048be:	e002      	b.n	80048c6 <JPEG_DMA_ContinueProcess+0xe2>
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f804 	bl	80048ce <JPEG_DMA_EndProcess>
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <JPEG_DMA_EndProcess>:
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b084      	sub	sp, #16
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80048e6:	1ad2      	subs	r2, r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d10a      	bne.n	800490e <JPEG_DMA_EndProcess+0x40>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	69d9      	ldr	r1, [r3, #28]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004900:	461a      	mov	r2, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fc fc0e 	bl	8001124 <HAL_JPEG_DataReadyCallback>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	625a      	str	r2, [r3, #36]	@ 0x24
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b00      	cmp	r3, #0
 800491a:	d134      	bne.n	8004986 <JPEG_DMA_EndProcess+0xb8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <JPEG_DMA_EndProcess+0x6c>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69d9      	ldr	r1, [r3, #28]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492c:	461a      	mov	r2, r3
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fc fbf8 	bl	8001124 <HAL_JPEG_DataReadyCallback>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	625a      	str	r2, [r3, #36]	@ 0x24
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0201 	bic.w	r2, r2, #1
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004954:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	655a      	str	r2, [r3, #84]	@ 0x54
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d103      	bne.n	800497e <JPEG_DMA_EndProcess+0xb0>
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fc fbf8 	bl	800116c <HAL_JPEG_DecodeCpltCallback>
 800497c:	e00c      	b.n	8004998 <JPEG_DMA_EndProcess+0xca>
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fe fdb2 	bl	80034e8 <HAL_JPEG_EncodeCpltCallback>
 8004984:	e008      	b.n	8004998 <JPEG_DMA_EndProcess+0xca>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800498a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <JPEG_DMA_EndProcess+0xca>
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f804 	bl	80049a0 <JPEG_DMA_PollResidualData>
 8004998:	bf00      	nop
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <JPEG_DMA_PollResidualData>:
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	2310      	movs	r3, #16
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	e04f      	b.n	8004a4e <JPEG_DMA_PollResidualData+0xae>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d146      	bne.n	8004a48 <JPEG_DMA_PollResidualData+0xa8>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d03f      	beq.n	8004a48 <JPEG_DMA_PollResidualData+0xa8>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	69da      	ldr	r2, [r3, #28]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d8:	4413      	add	r3, r2
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	0a19      	lsrs	r1, r3, #8
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69da      	ldr	r2, [r3, #28]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ec:	3301      	adds	r3, #1
 80049ee:	4413      	add	r3, r2
 80049f0:	b2ca      	uxtb	r2, r1
 80049f2:	701a      	strb	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	0c19      	lsrs	r1, r3, #16
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	69da      	ldr	r2, [r3, #28]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	3302      	adds	r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	b2ca      	uxtb	r2, r1
 8004a06:	701a      	strb	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	0e19      	lsrs	r1, r3, #24
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69da      	ldr	r2, [r3, #28]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	3303      	adds	r3, #3
 8004a16:	4413      	add	r3, r2
 8004a18:	b2ca      	uxtb	r2, r1
 8004a1a:	701a      	strb	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	1d1a      	adds	r2, r3, #4
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d10a      	bne.n	8004a48 <JPEG_DMA_PollResidualData+0xa8>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69d9      	ldr	r1, [r3, #28]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7fc fb71 	bl	8001124 <HAL_JPEG_DataReadyCallback>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1ac      	bne.n	80049ae <JPEG_DMA_PollResidualData+0xe>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d004      	beq.n	8004a72 <JPEG_DMA_PollResidualData+0xd2>
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d133      	bne.n	8004ada <JPEG_DMA_PollResidualData+0x13a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0201 	bic.w	r2, r2, #1
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <JPEG_DMA_PollResidualData+0x100>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69d9      	ldr	r1, [r3, #28]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a92:	461a      	mov	r2, r3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7fc fb45 	bl	8001124 <HAL_JPEG_DataReadyCallback>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aaa:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	655a      	str	r2, [r3, #84]	@ 0x54
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f003 0303 	and.w	r3, r3, #3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d103      	bne.n	8004ad4 <JPEG_DMA_PollResidualData+0x134>
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7fc fb4d 	bl	800116c <HAL_JPEG_DecodeCpltCallback>
 8004ad2:	e002      	b.n	8004ada <JPEG_DMA_PollResidualData+0x13a>
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7fe fd07 	bl	80034e8 <HAL_JPEG_EncodeCpltCallback>
 8004ada:	bf00      	nop
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <JPEG_MDMAInCpltCallback>:
 8004ae2:	b590      	push	{r4, r7, lr}
 8004ae4:	b087      	sub	sp, #28
 8004ae6:	af02      	add	r7, sp, #8
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004afe:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b04:	f248 030c 	movw	r3, #32780	@ 0x800c
 8004b08:	4013      	ands	r3, r2
 8004b0a:	2b0c      	cmp	r3, #12
 8004b0c:	d17c      	bne.n	8004c08 <JPEG_MDMAInCpltCallback+0x126>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004b24:	1ad2      	subs	r2, r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	621a      	str	r2, [r3, #32]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f7fc fab9 	bl	80010a8 <HAL_JPEG_GetDataCallback>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d81f      	bhi.n	8004b80 <JPEG_MDMAInCpltCallback+0x9e>
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10d      	bne.n	8004b62 <JPEG_MDMAInCpltCallback+0x80>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b4a:	f043 0204 	orr.w	r2, r3, #4
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	651a      	str	r2, [r3, #80]	@ 0x50
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2206      	movs	r2, #6
 8004b56:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f7fc fafc 	bl	8001158 <HAL_JPEG_ErrorCallback>
 8004b60:	e052      	b.n	8004c08 <JPEG_MDMAInCpltCallback+0x126>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	fbb3 f1f1 	udiv	r1, r3, r1
 8004b70:	68b8      	ldr	r0, [r7, #8]
 8004b72:	fb00 f101 	mul.w	r1, r0, r1
 8004b76:	1a5b      	subs	r3, r3, r1
 8004b78:	1ad2      	subs	r2, r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b7e:	e010      	b.n	8004ba2 <JPEG_MDMAInCpltCallback+0xc0>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00c      	beq.n	8004ba2 <JPEG_MDMAInCpltCallback+0xc0>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d006      	beq.n	8004ba2 <JPEG_MDMAInCpltCallback+0xc0>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b98:	089b      	lsrs	r3, r3, #2
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	009a      	lsls	r2, r3, #2
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d124      	bne.n	8004bf8 <JPEG_MDMAInCpltCallback+0x116>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d020      	beq.n	8004bf8 <JPEG_MDMAInCpltCallback+0x116>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3340      	adds	r3, #64	@ 0x40
 8004bc6:	461c      	mov	r4, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bcc:	2201      	movs	r2, #1
 8004bce:	9200      	str	r2, [sp, #0]
 8004bd0:	4622      	mov	r2, r4
 8004bd2:	f000 f9bb 	bl	8004f4c <HAL_MDMA_Start_IT>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00d      	beq.n	8004bf8 <JPEG_MDMAInCpltCallback+0x116>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be0:	f043 0204 	orr.w	r2, r3, #4
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	651a      	str	r2, [r3, #80]	@ 0x50
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2206      	movs	r2, #6
 8004bec:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f7fc fab1 	bl	8001158 <HAL_JPEG_ErrorCallback>
 8004bf6:	e007      	b.n	8004c08 <JPEG_MDMAInCpltCallback+0x126>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004c06:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd90      	pop	{r4, r7, pc}

08004c0e <JPEG_MDMAOutCpltCallback>:
 8004c0e:	b590      	push	{r4, r7, lr}
 8004c10:	b087      	sub	sp, #28
 8004c12:	af02      	add	r7, sp, #8
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004c2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c30:	f248 030c 	movw	r3, #32780	@ 0x800c
 8004c34:	4013      	ands	r3, r2
 8004c36:	2b0c      	cmp	r3, #12
 8004c38:	d147      	bne.n	8004cca <JPEG_MDMAOutCpltCallback+0xbc>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c40:	f003 0320 	and.w	r3, r3, #32
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d138      	bne.n	8004cba <JPEG_MDMAOutCpltCallback+0xac>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004c56:	1ad2      	subs	r2, r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	69d9      	ldr	r1, [r3, #28]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c64:	461a      	mov	r2, r3
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f7fc fa5c 	bl	8001124 <HAL_JPEG_DataReadyCallback>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d120      	bne.n	8004cba <JPEG_MDMAOutCpltCallback+0xac>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3344      	adds	r3, #68	@ 0x44
 8004c82:	4619      	mov	r1, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	461c      	mov	r4, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8e:	2201      	movs	r2, #1
 8004c90:	9200      	str	r2, [sp, #0]
 8004c92:	4622      	mov	r2, r4
 8004c94:	f000 f95a 	bl	8004f4c <HAL_MDMA_Start_IT>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00d      	beq.n	8004cba <JPEG_MDMAOutCpltCallback+0xac>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ca2:	f043 0204 	orr.w	r2, r3, #4
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	651a      	str	r2, [r3, #80]	@ 0x50
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2206      	movs	r2, #6
 8004cae:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f7fc fa50 	bl	8001158 <HAL_JPEG_ErrorCallback>
 8004cb8:	e007      	b.n	8004cca <JPEG_MDMAOutCpltCallback+0xbc>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004cc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd90      	pop	{r4, r7, pc}

08004cd0 <JPEG_MDMAErrorCallback>:
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0201 	bic.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004cfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d0a:	f043 0204 	orr.w	r2, r3, #4
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f7fc fa20 	bl	8001158 <HAL_JPEG_ErrorCallback>
 8004d18:	bf00      	nop
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <JPEG_MDMAOutAbortCallback>:
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <JPEG_MDMAOutAbortCallback+0x20>
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f7ff fdc7 	bl	80048ce <JPEG_DMA_EndProcess>
 8004d40:	bf00      	nop
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <JPEG_GetQuality>:
 8004d48:	b480      	push	{r7}
 8004d4a:	b08b      	sub	sp, #44	@ 0x2c
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	2300      	movs	r3, #0
 8004d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3350      	adds	r3, #80	@ 0x50
 8004d5a:	61bb      	str	r3, [r7, #24]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	623b      	str	r3, [r7, #32]
 8004d60:	e042      	b.n	8004de8 <JPEG_GetQuality+0xa0>
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	61fb      	str	r3, [r7, #28]
 8004d6c:	e033      	b.n	8004dd6 <JPEG_GetQuality+0x8e>
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	fa22 f303 	lsr.w	r3, r2, r3
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d103      	bne.n	8004d8a <JPEG_GetQuality+0x42>
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	3364      	adds	r3, #100	@ 0x64
 8004d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d88:	e022      	b.n	8004dd0 <JPEG_GetQuality+0x88>
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2264      	movs	r2, #100	@ 0x64
 8004d8e:	fb02 f303 	mul.w	r3, r2, r3
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d96:	6a38      	ldr	r0, [r7, #32]
 8004d98:	69f9      	ldr	r1, [r7, #28]
 8004d9a:	4401      	add	r1, r0
 8004d9c:	4818      	ldr	r0, [pc, #96]	@ (8004e00 <JPEG_GetQuality+0xb8>)
 8004d9e:	5c41      	ldrb	r1, [r0, r1]
 8004da0:	440a      	add	r2, r1
 8004da2:	7812      	ldrb	r2, [r2, #0]
 8004da4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b64      	cmp	r3, #100	@ 0x64
 8004dae:	d807      	bhi.n	8004dc0 <JPEG_GetQuality+0x78>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8004db6:	085b      	lsrs	r3, r3, #1
 8004db8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dba:	4413      	add	r3, r2
 8004dbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dbe:	e007      	b.n	8004dd0 <JPEG_GetQuality+0x88>
 8004dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dcc:	4413      	add	r3, r2
 8004dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	61fb      	str	r3, [r7, #28]
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d9c8      	bls.n	8004d6e <JPEG_GetQuality+0x26>
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	3304      	adds	r3, #4
 8004de0:	623b      	str	r3, [r7, #32]
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	3304      	adds	r3, #4
 8004de6:	61bb      	str	r3, [r7, #24]
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	2b3c      	cmp	r3, #60	@ 0x3c
 8004dec:	d9b9      	bls.n	8004d62 <JPEG_GetQuality+0x1a>
 8004dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df0:	099b      	lsrs	r3, r3, #6
 8004df2:	4618      	mov	r0, r3
 8004df4:	372c      	adds	r7, #44	@ 0x2c
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	0800f144 	.word	0x0800f144

08004e04 <HAL_MDMA_Init>:
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	f7fd fb88 	bl	8002520 <HAL_GetTick>
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_MDMA_Init+0x18>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e03b      	b.n	8004e94 <HAL_MDMA_Init+0x90>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0201 	bic.w	r2, r2, #1
 8004e3a:	60da      	str	r2, [r3, #12]
 8004e3c:	e00f      	b.n	8004e5e <HAL_MDMA_Init+0x5a>
 8004e3e:	f7fd fb6f 	bl	8002520 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b05      	cmp	r3, #5
 8004e4a:	d908      	bls.n	8004e5e <HAL_MDMA_Init+0x5a>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2240      	movs	r2, #64	@ 0x40
 8004e50:	669a      	str	r2, [r3, #104]	@ 0x68
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2203      	movs	r2, #3
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e01a      	b.n	8004e94 <HAL_MDMA_Init+0x90>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e8      	bne.n	8004e3e <HAL_MDMA_Init+0x3a>
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fad9 	bl	8005424 <MDMA_Init>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	661a      	str	r2, [r3, #96]	@ 0x60
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	665a      	str	r2, [r3, #100]	@ 0x64
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	669a      	str	r2, [r3, #104]	@ 0x68
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e92:	2300      	movs	r3, #0
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_MDMA_DeInit>:
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_MDMA_DeInit+0x12>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e048      	b.n	8004f40 <HAL_MDMA_DeInit+0xa4>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0201 	bic.w	r2, r2, #1
 8004ebc:	60da      	str	r2, [r3, #12]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	60da      	str	r2, [r3, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	611a      	str	r2, [r3, #16]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	615a      	str	r2, [r3, #20]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2200      	movs	r2, #0
 8004edc:	619a      	str	r2, [r3, #24]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	61da      	str	r2, [r3, #28]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2200      	movs	r2, #0
 8004eec:	621a      	str	r2, [r3, #32]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	625a      	str	r2, [r3, #36]	@ 0x24
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2200      	movs	r2, #0
 8004efc:	629a      	str	r2, [r3, #40]	@ 0x28
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2200      	movs	r2, #0
 8004f04:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	221f      	movs	r2, #31
 8004f14:	605a      	str	r2, [r3, #4]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	661a      	str	r2, [r3, #96]	@ 0x60
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	665a      	str	r2, [r3, #100]	@ 0x64
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	669a      	str	r2, [r3, #104]	@ 0x68
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004f3e:	2300      	movs	r3, #0
 8004f40:	4618      	mov	r0, r3
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_MDMA_Start_IT>:
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_MDMA_Start_IT+0x18>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e070      	b.n	8005046 <HAL_MDMA_Start_IT+0xfa>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d101      	bne.n	8004f72 <HAL_MDMA_Start_IT+0x26>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e069      	b.n	8005046 <HAL_MDMA_Start_IT+0xfa>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d158      	bne.n	8005038 <HAL_MDMA_Start_IT+0xec>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2202      	movs	r2, #2
 8004f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	669a      	str	r2, [r3, #104]	@ 0x68
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0201 	bic.w	r2, r2, #1
 8004fa2:	60da      	str	r2, [r3, #12]
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f9c8 	bl	8005344 <MDMA_SetConfig>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0206 	orr.w	r2, r2, #6
 8004fc2:	60da      	str	r2, [r3, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <HAL_MDMA_Start_IT+0x90>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0210 	orr.w	r2, r2, #16
 8004fda:	60da      	str	r2, [r3, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d007      	beq.n	8004ff4 <HAL_MDMA_Start_IT+0xa8>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0208 	orr.w	r2, r2, #8
 8004ff2:	60da      	str	r2, [r3, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d007      	beq.n	800500c <HAL_MDMA_Start_IT+0xc0>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0220 	orr.w	r2, r2, #32
 800500a:	60da      	str	r2, [r3, #12]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0201 	orr.w	r2, r2, #1
 800501a:	60da      	str	r2, [r3, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005024:	d10e      	bne.n	8005044 <HAL_MDMA_Start_IT+0xf8>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005034:	60da      	str	r2, [r3, #12]
 8005036:	e005      	b.n	8005044 <HAL_MDMA_Start_IT+0xf8>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005040:	2302      	movs	r3, #2
 8005042:	e000      	b.n	8005046 <HAL_MDMA_Start_IT+0xfa>
 8005044:	2300      	movs	r3, #0
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_MDMA_Abort_IT>:
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_MDMA_Abort_IT+0x12>
 800505c:	2301      	movs	r3, #1
 800505e:	e017      	b.n	8005090 <HAL_MDMA_Abort_IT+0x42>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d004      	beq.n	8005076 <HAL_MDMA_Abort_IT+0x28>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2280      	movs	r2, #128	@ 0x80
 8005070:	669a      	str	r2, [r3, #104]	@ 0x68
 8005072:	2301      	movs	r3, #1
 8005074:	e00c      	b.n	8005090 <HAL_MDMA_Abort_IT+0x42>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2204      	movs	r2, #4
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0201 	bic.w	r2, r2, #1
 800508c:	60da      	str	r2, [r3, #12]
 800508e:	2300      	movs	r3, #0
 8005090:	4618      	mov	r0, r3
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_MDMA_IRQHandler>:
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	2300      	movs	r3, #0
 80050a6:	60bb      	str	r3, [r7, #8]
 80050a8:	4b91      	ldr	r3, [pc, #580]	@ (80052f0 <HAL_MDMA_IRQHandler+0x254>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a91      	ldr	r2, [pc, #580]	@ (80052f4 <HAL_MDMA_IRQHandler+0x258>)
 80050ae:	fba2 2303 	umull	r2, r3, r2, r3
 80050b2:	0a9b      	lsrs	r3, r3, #10
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	4b8e      	ldr	r3, [pc, #568]	@ (80052f8 <HAL_MDMA_IRQHandler+0x25c>)
 80050be:	4413      	add	r3, r2
 80050c0:	099b      	lsrs	r3, r3, #6
 80050c2:	f003 031f 	and.w	r3, r3, #31
 80050c6:	2201      	movs	r2, #1
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 812d 	beq.w	8005338 <HAL_MDMA_IRQHandler+0x29c>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d054      	beq.n	8005196 <HAL_MDMA_IRQHandler+0xfa>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d04d      	beq.n	8005196 <HAL_MDMA_IRQHandler+0xfa>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0202 	bic.w	r2, r2, #2
 8005108:	60da      	str	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005118:	2b00      	cmp	r3, #0
 800511a:	d106      	bne.n	800512a <HAL_MDMA_IRQHandler+0x8e>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005120:	f043 0201 	orr.w	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	669a      	str	r2, [r3, #104]	@ 0x68
 8005128:	e005      	b.n	8005136 <HAL_MDMA_IRQHandler+0x9a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800512e:	f043 0202 	orr.w	r2, r3, #2
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	669a      	str	r2, [r3, #104]	@ 0x68
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800513c:	2b00      	cmp	r3, #0
 800513e:	d005      	beq.n	800514c <HAL_MDMA_IRQHandler+0xb0>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005144:	f043 0204 	orr.w	r2, r3, #4
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	669a      	str	r2, [r3, #104]	@ 0x68
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005152:	2b00      	cmp	r3, #0
 8005154:	d005      	beq.n	8005162 <HAL_MDMA_IRQHandler+0xc6>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800515a:	f043 0208 	orr.w	r2, r3, #8
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	669a      	str	r2, [r3, #104]	@ 0x68
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_MDMA_IRQHandler+0xdc>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005170:	f043 0210 	orr.w	r2, r3, #16
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	669a      	str	r2, [r3, #104]	@ 0x68
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_MDMA_IRQHandler+0xf2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005186:	f043 0220 	orr.w	r2, r3, #32
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	669a      	str	r2, [r3, #104]	@ 0x68
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2201      	movs	r2, #1
 8005194:	605a      	str	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d012      	beq.n	80051ca <HAL_MDMA_IRQHandler+0x12e>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00b      	beq.n	80051ca <HAL_MDMA_IRQHandler+0x12e>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2210      	movs	r2, #16
 80051b8:	605a      	str	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_MDMA_IRQHandler+0x12e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	4798      	blx	r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0308 	and.w	r3, r3, #8
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d012      	beq.n	80051fe <HAL_MDMA_IRQHandler+0x162>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f003 0310 	and.w	r3, r3, #16
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00b      	beq.n	80051fe <HAL_MDMA_IRQHandler+0x162>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2208      	movs	r2, #8
 80051ec:	605a      	str	r2, [r3, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_MDMA_IRQHandler+0x162>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	4798      	blx	r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d012      	beq.n	8005232 <HAL_MDMA_IRQHandler+0x196>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00b      	beq.n	8005232 <HAL_MDMA_IRQHandler+0x196>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2204      	movs	r2, #4
 8005220:	605a      	str	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_MDMA_IRQHandler+0x196>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	4798      	blx	r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d039      	beq.n	80052b4 <HAL_MDMA_IRQHandler+0x218>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	2b00      	cmp	r3, #0
 800524c:	d032      	beq.n	80052b4 <HAL_MDMA_IRQHandler+0x218>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800525c:	60da      	str	r2, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b04      	cmp	r3, #4
 8005268:	d110      	bne.n	800528c <HAL_MDMA_IRQHandler+0x1f0>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800527e:	2b00      	cmp	r3, #0
 8005280:	d05c      	beq.n	800533c <HAL_MDMA_IRQHandler+0x2a0>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	4798      	blx	r3
 800528a:	e057      	b.n	800533c <HAL_MDMA_IRQHandler+0x2a0>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2202      	movs	r2, #2
 8005292:	605a      	str	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <HAL_MDMA_IRQHandler+0x218>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	4798      	blx	r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d040      	beq.n	800533e <HAL_MDMA_IRQHandler+0x2a2>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2204      	movs	r2, #4
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0201 	bic.w	r2, r2, #1
 80052d2:	60da      	str	r2, [r3, #12]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	3301      	adds	r3, #1
 80052d8:	60bb      	str	r3, [r7, #8]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d30d      	bcc.n	80052fc <HAL_MDMA_IRQHandler+0x260>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f2      	bne.n	80052d4 <HAL_MDMA_IRQHandler+0x238>
 80052ee:	e006      	b.n	80052fe <HAL_MDMA_IRQHandler+0x262>
 80052f0:	24000004 	.word	0x24000004
 80052f4:	1b4e81b5 	.word	0x1b4e81b5
 80052f8:	adffffc0 	.word	0xadffffc0
 80052fc:	bf00      	nop
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d004      	beq.n	800531e <HAL_MDMA_IRQHandler+0x282>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2203      	movs	r2, #3
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800531c:	e003      	b.n	8005326 <HAL_MDMA_IRQHandler+0x28a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800532a:	2b00      	cmp	r3, #0
 800532c:	d007      	beq.n	800533e <HAL_MDMA_IRQHandler+0x2a2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	4798      	blx	r3
 8005336:	e002      	b.n	800533e <HAL_MDMA_IRQHandler+0x2a2>
 8005338:	bf00      	nop
 800533a:	e000      	b.n	800533e <HAL_MDMA_IRQHandler+0x2a2>
 800533c:	bf00      	nop
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <MDMA_SetConfig>:
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695a      	ldr	r2, [r3, #20]
 8005358:	4b31      	ldr	r3, [pc, #196]	@ (8005420 <MDMA_SetConfig+0xdc>)
 800535a:	4013      	ands	r3, r2
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	f3c2 0110 	ubfx	r1, r2, #0, #17
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	430b      	orrs	r3, r1
 8005368:	6153      	str	r3, [r2, #20]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	3b01      	subs	r3, #1
 8005378:	051a      	lsls	r2, r3, #20
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	615a      	str	r2, [r3, #20]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	221f      	movs	r2, #31
 8005388:	605a      	str	r2, [r3, #4]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	61da      	str	r2, [r3, #28]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	619a      	str	r2, [r3, #24]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053a8:	d002      	beq.n	80053b0 <MDMA_SetConfig+0x6c>
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d108      	bne.n	80053c2 <MDMA_SetConfig+0x7e>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80053be:	629a      	str	r2, [r3, #40]	@ 0x28
 80053c0:	e007      	b.n	80053d2 <MDMA_SetConfig+0x8e>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80053d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053e0:	d002      	beq.n	80053e8 <MDMA_SetConfig+0xa4>
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d108      	bne.n	80053fa <MDMA_SetConfig+0xb6>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80053f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80053f8:	e007      	b.n	800540a <MDMA_SetConfig+0xc6>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005408:	629a      	str	r2, [r3, #40]	@ 0x28
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	625a      	str	r2, [r3, #36]	@ 0x24
 8005414:	bf00      	nop
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	fffe0000 	.word	0xfffe0000

08005424 <MDMA_Init>:
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68d9      	ldr	r1, [r3, #12]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	60da      	str	r2, [r3, #12]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	695a      	ldr	r2, [r3, #20]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	431a      	orrs	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005468:	3b01      	subs	r3, #1
 800546a:	049b      	lsls	r3, r3, #18
 800546c:	ea42 0103 	orr.w	r1, r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	611a      	str	r2, [r3, #16]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005484:	d107      	bne.n	8005496 <MDMA_Init+0x72>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691a      	ldr	r2, [r3, #16]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8005494:	611a      	str	r2, [r3, #16]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2200      	movs	r2, #0
 800549c:	615a      	str	r2, [r3, #20]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	da11      	bge.n	80054ca <MDMA_Init+0xa6>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695a      	ldr	r2, [r3, #20]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80054b4:	615a      	str	r2, [r3, #20]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ba:	425b      	negs	r3, r3
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	b292      	uxth	r2, r2
 80054c6:	621a      	str	r2, [r3, #32]
 80054c8:	e006      	b.n	80054d8 <MDMA_Init+0xb4>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ce:	461a      	mov	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	b292      	uxth	r2, r2
 80054d6:	621a      	str	r2, [r3, #32]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054dc:	2b00      	cmp	r3, #0
 80054de:	da15      	bge.n	800550c <MDMA_Init+0xe8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	695a      	ldr	r2, [r3, #20]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80054ee:	615a      	str	r2, [r3, #20]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f4:	425b      	negs	r3, r3
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6a19      	ldr	r1, [r3, #32]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	041a      	lsls	r2, r3, #16
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	621a      	str	r2, [r3, #32]
 800550a:	e009      	b.n	8005520 <MDMA_Init+0xfc>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6a19      	ldr	r1, [r3, #32]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005516:	041a      	lsls	r2, r3, #16
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	621a      	str	r2, [r3, #32]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005528:	d006      	beq.n	8005538 <MDMA_Init+0x114>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	629a      	str	r2, [r3, #40]	@ 0x28
 8005536:	e003      	b.n	8005540 <MDMA_Init+0x11c>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2200      	movs	r2, #0
 800553e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2200      	movs	r2, #0
 8005546:	625a      	str	r2, [r3, #36]	@ 0x24
 8005548:	bf00      	nop
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_PWREx_ConfigSupply>:
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	4b19      	ldr	r3, [pc, #100]	@ (80055c4 <HAL_PWREx_ConfigSupply+0x70>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b04      	cmp	r3, #4
 8005566:	d00a      	beq.n	800557e <HAL_PWREx_ConfigSupply+0x2a>
 8005568:	4b16      	ldr	r3, [pc, #88]	@ (80055c4 <HAL_PWREx_ConfigSupply+0x70>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	429a      	cmp	r2, r3
 8005574:	d001      	beq.n	800557a <HAL_PWREx_ConfigSupply+0x26>
 8005576:	2301      	movs	r3, #1
 8005578:	e01f      	b.n	80055ba <HAL_PWREx_ConfigSupply+0x66>
 800557a:	2300      	movs	r3, #0
 800557c:	e01d      	b.n	80055ba <HAL_PWREx_ConfigSupply+0x66>
 800557e:	4b11      	ldr	r3, [pc, #68]	@ (80055c4 <HAL_PWREx_ConfigSupply+0x70>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f023 0207 	bic.w	r2, r3, #7
 8005586:	490f      	ldr	r1, [pc, #60]	@ (80055c4 <HAL_PWREx_ConfigSupply+0x70>)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4313      	orrs	r3, r2
 800558c:	60cb      	str	r3, [r1, #12]
 800558e:	f7fc ffc7 	bl	8002520 <HAL_GetTick>
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	e009      	b.n	80055aa <HAL_PWREx_ConfigSupply+0x56>
 8005596:	f7fc ffc3 	bl	8002520 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80055a4:	d901      	bls.n	80055aa <HAL_PWREx_ConfigSupply+0x56>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e007      	b.n	80055ba <HAL_PWREx_ConfigSupply+0x66>
 80055aa:	4b06      	ldr	r3, [pc, #24]	@ (80055c4 <HAL_PWREx_ConfigSupply+0x70>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055b6:	d1ee      	bne.n	8005596 <HAL_PWREx_ConfigSupply+0x42>
 80055b8:	2300      	movs	r3, #0
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	58024800 	.word	0x58024800

080055c8 <HAL_RCC_OscConfig>:
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08c      	sub	sp, #48	@ 0x30
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d102      	bne.n	80055dc <HAL_RCC_OscConfig+0x14>
 80055d6:	2301      	movs	r3, #1
 80055d8:	f000 bc1f 	b.w	8005e1a <HAL_RCC_OscConfig+0x852>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 80b3 	beq.w	8005750 <HAL_RCC_OscConfig+0x188>
 80055ea:	4b95      	ldr	r3, [pc, #596]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055f4:	4b92      	ldr	r3, [pc, #584]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80055f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fc:	2b10      	cmp	r3, #16
 80055fe:	d007      	beq.n	8005610 <HAL_RCC_OscConfig+0x48>
 8005600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005602:	2b18      	cmp	r3, #24
 8005604:	d112      	bne.n	800562c <HAL_RCC_OscConfig+0x64>
 8005606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005608:	f003 0303 	and.w	r3, r3, #3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d10d      	bne.n	800562c <HAL_RCC_OscConfig+0x64>
 8005610:	4b8b      	ldr	r3, [pc, #556]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8098 	beq.w	800574e <HAL_RCC_OscConfig+0x186>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	f040 8093 	bne.w	800574e <HAL_RCC_OscConfig+0x186>
 8005628:	2301      	movs	r3, #1
 800562a:	e3f6      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005634:	d106      	bne.n	8005644 <HAL_RCC_OscConfig+0x7c>
 8005636:	4b82      	ldr	r3, [pc, #520]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a81      	ldr	r2, [pc, #516]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 800563c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	e058      	b.n	80056f6 <HAL_RCC_OscConfig+0x12e>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d112      	bne.n	8005672 <HAL_RCC_OscConfig+0xaa>
 800564c:	4b7c      	ldr	r3, [pc, #496]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a7b      	ldr	r2, [pc, #492]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 8005652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	4b79      	ldr	r3, [pc, #484]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a78      	ldr	r2, [pc, #480]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 800565e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	4b76      	ldr	r3, [pc, #472]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a75      	ldr	r2, [pc, #468]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 800566a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	e041      	b.n	80056f6 <HAL_RCC_OscConfig+0x12e>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800567a:	d112      	bne.n	80056a2 <HAL_RCC_OscConfig+0xda>
 800567c:	4b70      	ldr	r3, [pc, #448]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a6f      	ldr	r2, [pc, #444]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 8005682:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	4b6d      	ldr	r3, [pc, #436]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a6c      	ldr	r2, [pc, #432]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 800568e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	4b6a      	ldr	r3, [pc, #424]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a69      	ldr	r2, [pc, #420]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 800569a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	e029      	b.n	80056f6 <HAL_RCC_OscConfig+0x12e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80056aa:	d112      	bne.n	80056d2 <HAL_RCC_OscConfig+0x10a>
 80056ac:	4b64      	ldr	r3, [pc, #400]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a63      	ldr	r2, [pc, #396]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80056b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	4b61      	ldr	r3, [pc, #388]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a60      	ldr	r2, [pc, #384]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80056be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	4b5e      	ldr	r3, [pc, #376]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a5d      	ldr	r2, [pc, #372]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80056ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	e011      	b.n	80056f6 <HAL_RCC_OscConfig+0x12e>
 80056d2:	4b5b      	ldr	r3, [pc, #364]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a5a      	ldr	r2, [pc, #360]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80056d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	4b58      	ldr	r3, [pc, #352]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a57      	ldr	r2, [pc, #348]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80056e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	4b55      	ldr	r3, [pc, #340]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a54      	ldr	r2, [pc, #336]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80056f0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d013      	beq.n	8005726 <HAL_RCC_OscConfig+0x15e>
 80056fe:	f7fc ff0f 	bl	8002520 <HAL_GetTick>
 8005702:	6278      	str	r0, [r7, #36]	@ 0x24
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x150>
 8005706:	f7fc ff0b 	bl	8002520 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b64      	cmp	r3, #100	@ 0x64
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x150>
 8005714:	2303      	movs	r3, #3
 8005716:	e380      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 8005718:	4b49      	ldr	r3, [pc, #292]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0f0      	beq.n	8005706 <HAL_RCC_OscConfig+0x13e>
 8005724:	e014      	b.n	8005750 <HAL_RCC_OscConfig+0x188>
 8005726:	f7fc fefb 	bl	8002520 <HAL_GetTick>
 800572a:	6278      	str	r0, [r7, #36]	@ 0x24
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x178>
 800572e:	f7fc fef7 	bl	8002520 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b64      	cmp	r3, #100	@ 0x64
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x178>
 800573c:	2303      	movs	r3, #3
 800573e:	e36c      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 8005740:	4b3f      	ldr	r3, [pc, #252]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f0      	bne.n	800572e <HAL_RCC_OscConfig+0x166>
 800574c:	e000      	b.n	8005750 <HAL_RCC_OscConfig+0x188>
 800574e:	bf00      	nop
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 808c 	beq.w	8005876 <HAL_RCC_OscConfig+0x2ae>
 800575e:	4b38      	ldr	r3, [pc, #224]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005766:	623b      	str	r3, [r7, #32]
 8005768:	4b35      	ldr	r3, [pc, #212]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 800576a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576c:	61fb      	str	r3, [r7, #28]
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d007      	beq.n	8005784 <HAL_RCC_OscConfig+0x1bc>
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	2b18      	cmp	r3, #24
 8005778:	d137      	bne.n	80057ea <HAL_RCC_OscConfig+0x222>
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	f003 0303 	and.w	r3, r3, #3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d132      	bne.n	80057ea <HAL_RCC_OscConfig+0x222>
 8005784:	4b2e      	ldr	r3, [pc, #184]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	d005      	beq.n	800579c <HAL_RCC_OscConfig+0x1d4>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_RCC_OscConfig+0x1d4>
 8005798:	2301      	movs	r3, #1
 800579a:	e33e      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 800579c:	4b28      	ldr	r3, [pc, #160]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f023 0219 	bic.w	r2, r3, #25
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	4925      	ldr	r1, [pc, #148]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	600b      	str	r3, [r1, #0]
 80057ae:	f7fc feb7 	bl	8002520 <HAL_GetTick>
 80057b2:	6278      	str	r0, [r7, #36]	@ 0x24
 80057b4:	e008      	b.n	80057c8 <HAL_RCC_OscConfig+0x200>
 80057b6:	f7fc feb3 	bl	8002520 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d901      	bls.n	80057c8 <HAL_RCC_OscConfig+0x200>
 80057c4:	2303      	movs	r3, #3
 80057c6:	e328      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 80057c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0f0      	beq.n	80057b6 <HAL_RCC_OscConfig+0x1ee>
 80057d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	061b      	lsls	r3, r3, #24
 80057e2:	4917      	ldr	r1, [pc, #92]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	604b      	str	r3, [r1, #4]
 80057e8:	e045      	b.n	8005876 <HAL_RCC_OscConfig+0x2ae>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d028      	beq.n	8005844 <HAL_RCC_OscConfig+0x27c>
 80057f2:	4b13      	ldr	r3, [pc, #76]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f023 0219 	bic.w	r2, r3, #25
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	4910      	ldr	r1, [pc, #64]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 8005800:	4313      	orrs	r3, r2
 8005802:	600b      	str	r3, [r1, #0]
 8005804:	f7fc fe8c 	bl	8002520 <HAL_GetTick>
 8005808:	6278      	str	r0, [r7, #36]	@ 0x24
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0x256>
 800580c:	f7fc fe88 	bl	8002520 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0x256>
 800581a:	2303      	movs	r3, #3
 800581c:	e2fd      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 800581e:	4b08      	ldr	r3, [pc, #32]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b00      	cmp	r3, #0
 8005828:	d0f0      	beq.n	800580c <HAL_RCC_OscConfig+0x244>
 800582a:	4b05      	ldr	r3, [pc, #20]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	061b      	lsls	r3, r3, #24
 8005838:	4901      	ldr	r1, [pc, #4]	@ (8005840 <HAL_RCC_OscConfig+0x278>)
 800583a:	4313      	orrs	r3, r2
 800583c:	604b      	str	r3, [r1, #4]
 800583e:	e01a      	b.n	8005876 <HAL_RCC_OscConfig+0x2ae>
 8005840:	58024400 	.word	0x58024400
 8005844:	4b97      	ldr	r3, [pc, #604]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a96      	ldr	r2, [pc, #600]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 800584a:	f023 0301 	bic.w	r3, r3, #1
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	f7fc fe66 	bl	8002520 <HAL_GetTick>
 8005854:	6278      	str	r0, [r7, #36]	@ 0x24
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x2a2>
 8005858:	f7fc fe62 	bl	8002520 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x2a2>
 8005866:	2303      	movs	r3, #3
 8005868:	e2d7      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 800586a:	4b8e      	ldr	r3, [pc, #568]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0304 	and.w	r3, r3, #4
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f0      	bne.n	8005858 <HAL_RCC_OscConfig+0x290>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0310 	and.w	r3, r3, #16
 800587e:	2b00      	cmp	r3, #0
 8005880:	d06a      	beq.n	8005958 <HAL_RCC_OscConfig+0x390>
 8005882:	4b88      	ldr	r3, [pc, #544]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800588a:	61bb      	str	r3, [r7, #24]
 800588c:	4b85      	ldr	r3, [pc, #532]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 800588e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2b08      	cmp	r3, #8
 8005896:	d007      	beq.n	80058a8 <HAL_RCC_OscConfig+0x2e0>
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	2b18      	cmp	r3, #24
 800589c:	d11b      	bne.n	80058d6 <HAL_RCC_OscConfig+0x30e>
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f003 0303 	and.w	r3, r3, #3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d116      	bne.n	80058d6 <HAL_RCC_OscConfig+0x30e>
 80058a8:	4b7e      	ldr	r3, [pc, #504]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCC_OscConfig+0x2f8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	2b80      	cmp	r3, #128	@ 0x80
 80058ba:	d001      	beq.n	80058c0 <HAL_RCC_OscConfig+0x2f8>
 80058bc:	2301      	movs	r3, #1
 80058be:	e2ac      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 80058c0:	4b78      	ldr	r3, [pc, #480]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	061b      	lsls	r3, r3, #24
 80058ce:	4975      	ldr	r1, [pc, #468]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60cb      	str	r3, [r1, #12]
 80058d4:	e040      	b.n	8005958 <HAL_RCC_OscConfig+0x390>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d023      	beq.n	8005926 <HAL_RCC_OscConfig+0x35e>
 80058de:	4b71      	ldr	r3, [pc, #452]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a70      	ldr	r2, [pc, #448]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80058e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	f7fc fe19 	bl	8002520 <HAL_GetTick>
 80058ee:	6278      	str	r0, [r7, #36]	@ 0x24
 80058f0:	e008      	b.n	8005904 <HAL_RCC_OscConfig+0x33c>
 80058f2:	f7fc fe15 	bl	8002520 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x33c>
 8005900:	2303      	movs	r3, #3
 8005902:	e28a      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 8005904:	4b67      	ldr	r3, [pc, #412]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0f0      	beq.n	80058f2 <HAL_RCC_OscConfig+0x32a>
 8005910:	4b64      	ldr	r3, [pc, #400]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	061b      	lsls	r3, r3, #24
 800591e:	4961      	ldr	r1, [pc, #388]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005920:	4313      	orrs	r3, r2
 8005922:	60cb      	str	r3, [r1, #12]
 8005924:	e018      	b.n	8005958 <HAL_RCC_OscConfig+0x390>
 8005926:	4b5f      	ldr	r3, [pc, #380]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a5e      	ldr	r2, [pc, #376]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 800592c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005930:	6013      	str	r3, [r2, #0]
 8005932:	f7fc fdf5 	bl	8002520 <HAL_GetTick>
 8005936:	6278      	str	r0, [r7, #36]	@ 0x24
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x384>
 800593a:	f7fc fdf1 	bl	8002520 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x384>
 8005948:	2303      	movs	r3, #3
 800594a:	e266      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 800594c:	4b55      	ldr	r3, [pc, #340]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1f0      	bne.n	800593a <HAL_RCC_OscConfig+0x372>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b00      	cmp	r3, #0
 8005962:	d036      	beq.n	80059d2 <HAL_RCC_OscConfig+0x40a>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d019      	beq.n	80059a0 <HAL_RCC_OscConfig+0x3d8>
 800596c:	4b4d      	ldr	r3, [pc, #308]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 800596e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005970:	4a4c      	ldr	r2, [pc, #304]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	6753      	str	r3, [r2, #116]	@ 0x74
 8005978:	f7fc fdd2 	bl	8002520 <HAL_GetTick>
 800597c:	6278      	str	r0, [r7, #36]	@ 0x24
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x3ca>
 8005980:	f7fc fdce 	bl	8002520 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x3ca>
 800598e:	2303      	movs	r3, #3
 8005990:	e243      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 8005992:	4b44      	ldr	r3, [pc, #272]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f0      	beq.n	8005980 <HAL_RCC_OscConfig+0x3b8>
 800599e:	e018      	b.n	80059d2 <HAL_RCC_OscConfig+0x40a>
 80059a0:	4b40      	ldr	r3, [pc, #256]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80059a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059a4:	4a3f      	ldr	r2, [pc, #252]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80059a6:	f023 0301 	bic.w	r3, r3, #1
 80059aa:	6753      	str	r3, [r2, #116]	@ 0x74
 80059ac:	f7fc fdb8 	bl	8002520 <HAL_GetTick>
 80059b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x3fe>
 80059b4:	f7fc fdb4 	bl	8002520 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x3fe>
 80059c2:	2303      	movs	r3, #3
 80059c4:	e229      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 80059c6:	4b37      	ldr	r3, [pc, #220]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80059c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1f0      	bne.n	80059b4 <HAL_RCC_OscConfig+0x3ec>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d036      	beq.n	8005a4c <HAL_RCC_OscConfig+0x484>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d019      	beq.n	8005a1a <HAL_RCC_OscConfig+0x452>
 80059e6:	4b2f      	ldr	r3, [pc, #188]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a2e      	ldr	r2, [pc, #184]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 80059ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	f7fc fd95 	bl	8002520 <HAL_GetTick>
 80059f6:	6278      	str	r0, [r7, #36]	@ 0x24
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_OscConfig+0x444>
 80059fa:	f7fc fd91 	bl	8002520 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x444>
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e206      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 8005a0c:	4b25      	ldr	r3, [pc, #148]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0f0      	beq.n	80059fa <HAL_RCC_OscConfig+0x432>
 8005a18:	e018      	b.n	8005a4c <HAL_RCC_OscConfig+0x484>
 8005a1a:	4b22      	ldr	r3, [pc, #136]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a21      	ldr	r2, [pc, #132]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005a20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	f7fc fd7b 	bl	8002520 <HAL_GetTick>
 8005a2a:	6278      	str	r0, [r7, #36]	@ 0x24
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x478>
 8005a2e:	f7fc fd77 	bl	8002520 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x478>
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e1ec      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 8005a40:	4b18      	ldr	r3, [pc, #96]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1f0      	bne.n	8005a2e <HAL_RCC_OscConfig+0x466>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 80af 	beq.w	8005bb8 <HAL_RCC_OscConfig+0x5f0>
 8005a5a:	4b13      	ldr	r3, [pc, #76]	@ (8005aa8 <HAL_RCC_OscConfig+0x4e0>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a12      	ldr	r2, [pc, #72]	@ (8005aa8 <HAL_RCC_OscConfig+0x4e0>)
 8005a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	f7fc fd5b 	bl	8002520 <HAL_GetTick>
 8005a6a:	6278      	str	r0, [r7, #36]	@ 0x24
 8005a6c:	e008      	b.n	8005a80 <HAL_RCC_OscConfig+0x4b8>
 8005a6e:	f7fc fd57 	bl	8002520 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b64      	cmp	r3, #100	@ 0x64
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0x4b8>
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e1cc      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 8005a80:	4b09      	ldr	r3, [pc, #36]	@ (8005aa8 <HAL_RCC_OscConfig+0x4e0>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0f0      	beq.n	8005a6e <HAL_RCC_OscConfig+0x4a6>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d10b      	bne.n	8005aac <HAL_RCC_OscConfig+0x4e4>
 8005a94:	4b03      	ldr	r3, [pc, #12]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a98:	4a02      	ldr	r2, [pc, #8]	@ (8005aa4 <HAL_RCC_OscConfig+0x4dc>)
 8005a9a:	f043 0301 	orr.w	r3, r3, #1
 8005a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aa0:	e05b      	b.n	8005b5a <HAL_RCC_OscConfig+0x592>
 8005aa2:	bf00      	nop
 8005aa4:	58024400 	.word	0x58024400
 8005aa8:	58024800 	.word	0x58024800
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d112      	bne.n	8005ada <HAL_RCC_OscConfig+0x512>
 8005ab4:	4b9d      	ldr	r3, [pc, #628]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab8:	4a9c      	ldr	r2, [pc, #624]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005aba:	f023 0301 	bic.w	r3, r3, #1
 8005abe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ac0:	4b9a      	ldr	r3, [pc, #616]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac4:	4a99      	ldr	r2, [pc, #612]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8005acc:	4b97      	ldr	r3, [pc, #604]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ad0:	4a96      	ldr	r2, [pc, #600]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005ad2:	f023 0304 	bic.w	r3, r3, #4
 8005ad6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ad8:	e03f      	b.n	8005b5a <HAL_RCC_OscConfig+0x592>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	2b05      	cmp	r3, #5
 8005ae0:	d112      	bne.n	8005b08 <HAL_RCC_OscConfig+0x540>
 8005ae2:	4b92      	ldr	r3, [pc, #584]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae6:	4a91      	ldr	r2, [pc, #580]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005ae8:	f043 0304 	orr.w	r3, r3, #4
 8005aec:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aee:	4b8f      	ldr	r3, [pc, #572]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005af2:	4a8e      	ldr	r2, [pc, #568]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005af4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005af8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005afa:	4b8c      	ldr	r3, [pc, #560]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005afe:	4a8b      	ldr	r2, [pc, #556]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b00:	f043 0301 	orr.w	r3, r3, #1
 8005b04:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b06:	e028      	b.n	8005b5a <HAL_RCC_OscConfig+0x592>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	2b85      	cmp	r3, #133	@ 0x85
 8005b0e:	d112      	bne.n	8005b36 <HAL_RCC_OscConfig+0x56e>
 8005b10:	4b86      	ldr	r3, [pc, #536]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b14:	4a85      	ldr	r2, [pc, #532]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b16:	f043 0304 	orr.w	r3, r3, #4
 8005b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b1c:	4b83      	ldr	r3, [pc, #524]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b20:	4a82      	ldr	r2, [pc, #520]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b28:	4b80      	ldr	r3, [pc, #512]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2c:	4a7f      	ldr	r2, [pc, #508]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b2e:	f043 0301 	orr.w	r3, r3, #1
 8005b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b34:	e011      	b.n	8005b5a <HAL_RCC_OscConfig+0x592>
 8005b36:	4b7d      	ldr	r3, [pc, #500]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b3a:	4a7c      	ldr	r2, [pc, #496]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b3c:	f023 0301 	bic.w	r3, r3, #1
 8005b40:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b42:	4b7a      	ldr	r3, [pc, #488]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b46:	4a79      	ldr	r2, [pc, #484]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b48:	f023 0304 	bic.w	r3, r3, #4
 8005b4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b4e:	4b77      	ldr	r3, [pc, #476]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b52:	4a76      	ldr	r2, [pc, #472]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b58:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d015      	beq.n	8005b8e <HAL_RCC_OscConfig+0x5c6>
 8005b62:	f7fc fcdd 	bl	8002520 <HAL_GetTick>
 8005b66:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b68:	e00a      	b.n	8005b80 <HAL_RCC_OscConfig+0x5b8>
 8005b6a:	f7fc fcd9 	bl	8002520 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_OscConfig+0x5b8>
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e14c      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 8005b80:	4b6a      	ldr	r3, [pc, #424]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0ee      	beq.n	8005b6a <HAL_RCC_OscConfig+0x5a2>
 8005b8c:	e014      	b.n	8005bb8 <HAL_RCC_OscConfig+0x5f0>
 8005b8e:	f7fc fcc7 	bl	8002520 <HAL_GetTick>
 8005b92:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b94:	e00a      	b.n	8005bac <HAL_RCC_OscConfig+0x5e4>
 8005b96:	f7fc fcc3 	bl	8002520 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x5e4>
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e136      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 8005bac:	4b5f      	ldr	r3, [pc, #380]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1ee      	bne.n	8005b96 <HAL_RCC_OscConfig+0x5ce>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 812b 	beq.w	8005e18 <HAL_RCC_OscConfig+0x850>
 8005bc2:	4b5a      	ldr	r3, [pc, #360]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bca:	2b18      	cmp	r3, #24
 8005bcc:	f000 80bb 	beq.w	8005d46 <HAL_RCC_OscConfig+0x77e>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	f040 8095 	bne.w	8005d04 <HAL_RCC_OscConfig+0x73c>
 8005bda:	4b54      	ldr	r3, [pc, #336]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a53      	ldr	r2, [pc, #332]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005be0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	f7fc fc9b 	bl	8002520 <HAL_GetTick>
 8005bea:	6278      	str	r0, [r7, #36]	@ 0x24
 8005bec:	e008      	b.n	8005c00 <HAL_RCC_OscConfig+0x638>
 8005bee:	f7fc fc97 	bl	8002520 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x638>
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e10c      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 8005c00:	4b4a      	ldr	r3, [pc, #296]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1f0      	bne.n	8005bee <HAL_RCC_OscConfig+0x626>
 8005c0c:	4b47      	ldr	r3, [pc, #284]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c10:	4b47      	ldr	r3, [pc, #284]	@ (8005d30 <HAL_RCC_OscConfig+0x768>)
 8005c12:	4013      	ands	r3, r2
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005c1c:	0112      	lsls	r2, r2, #4
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	4942      	ldr	r1, [pc, #264]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	628b      	str	r3, [r1, #40]	@ 0x28
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c34:	3b01      	subs	r3, #1
 8005c36:	025b      	lsls	r3, r3, #9
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c40:	3b01      	subs	r3, #1
 8005c42:	041b      	lsls	r3, r3, #16
 8005c44:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	061b      	lsls	r3, r3, #24
 8005c52:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005c56:	4935      	ldr	r1, [pc, #212]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	630b      	str	r3, [r1, #48]	@ 0x30
 8005c5c:	4b33      	ldr	r3, [pc, #204]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c60:	4a32      	ldr	r2, [pc, #200]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c62:	f023 0301 	bic.w	r3, r3, #1
 8005c66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005c68:	4b30      	ldr	r3, [pc, #192]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c6c:	4b31      	ldr	r3, [pc, #196]	@ (8005d34 <HAL_RCC_OscConfig+0x76c>)
 8005c6e:	4013      	ands	r3, r2
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005c74:	00d2      	lsls	r2, r2, #3
 8005c76:	492d      	ldr	r1, [pc, #180]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	634b      	str	r3, [r1, #52]	@ 0x34
 8005c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c80:	f023 020c 	bic.w	r2, r3, #12
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c88:	4928      	ldr	r1, [pc, #160]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005c8e:	4b27      	ldr	r3, [pc, #156]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c92:	f023 0202 	bic.w	r2, r3, #2
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c9a:	4924      	ldr	r1, [pc, #144]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005ca0:	4b22      	ldr	r3, [pc, #136]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca4:	4a21      	ldr	r2, [pc, #132]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005ca6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005caa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005cac:	4b1f      	ldr	r3, [pc, #124]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb0:	4a1e      	ldr	r2, [pc, #120]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005cbe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005cc4:	4b19      	ldr	r3, [pc, #100]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc8:	4a18      	ldr	r2, [pc, #96]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005cca:	f043 0301 	orr.w	r3, r3, #1
 8005cce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005cd0:	4b16      	ldr	r3, [pc, #88]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a15      	ldr	r2, [pc, #84]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005cd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	f7fc fc20 	bl	8002520 <HAL_GetTick>
 8005ce0:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_OscConfig+0x72e>
 8005ce4:	f7fc fc1c 	bl	8002520 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0x72e>
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e091      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 8005cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0f0      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x71c>
 8005d02:	e089      	b.n	8005e18 <HAL_RCC_OscConfig+0x850>
 8005d04:	4b09      	ldr	r3, [pc, #36]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a08      	ldr	r2, [pc, #32]	@ (8005d2c <HAL_RCC_OscConfig+0x764>)
 8005d0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	f7fc fc06 	bl	8002520 <HAL_GetTick>
 8005d14:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d16:	e00f      	b.n	8005d38 <HAL_RCC_OscConfig+0x770>
 8005d18:	f7fc fc02 	bl	8002520 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d908      	bls.n	8005d38 <HAL_RCC_OscConfig+0x770>
 8005d26:	2303      	movs	r3, #3
 8005d28:	e077      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 8005d2a:	bf00      	nop
 8005d2c:	58024400 	.word	0x58024400
 8005d30:	fffffc0c 	.word	0xfffffc0c
 8005d34:	ffff0007 	.word	0xffff0007
 8005d38:	4b3a      	ldr	r3, [pc, #232]	@ (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e9      	bne.n	8005d18 <HAL_RCC_OscConfig+0x750>
 8005d44:	e068      	b.n	8005e18 <HAL_RCC_OscConfig+0x850>
 8005d46:	4b37      	ldr	r3, [pc, #220]	@ (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4a:	613b      	str	r3, [r7, #16]
 8005d4c:	4b35      	ldr	r3, [pc, #212]	@ (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d031      	beq.n	8005dbe <HAL_RCC_OscConfig+0x7f6>
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f003 0203 	and.w	r2, r3, #3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d12a      	bne.n	8005dbe <HAL_RCC_OscConfig+0x7f6>
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	091b      	lsrs	r3, r3, #4
 8005d6c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d122      	bne.n	8005dbe <HAL_RCC_OscConfig+0x7f6>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d82:	3b01      	subs	r3, #1
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d11a      	bne.n	8005dbe <HAL_RCC_OscConfig+0x7f6>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	0a5b      	lsrs	r3, r3, #9
 8005d8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d94:	3b01      	subs	r3, #1
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d111      	bne.n	8005dbe <HAL_RCC_OscConfig+0x7f6>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	0c1b      	lsrs	r3, r3, #16
 8005d9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da6:	3b01      	subs	r3, #1
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d108      	bne.n	8005dbe <HAL_RCC_OscConfig+0x7f6>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	0e1b      	lsrs	r3, r3, #24
 8005db0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db8:	3b01      	subs	r3, #1
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d001      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x7fa>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e02b      	b.n	8005e1a <HAL_RCC_OscConfig+0x852>
 8005dc2:	4b18      	ldr	r3, [pc, #96]	@ (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dc6:	08db      	lsrs	r3, r3, #3
 8005dc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d01f      	beq.n	8005e18 <HAL_RCC_OscConfig+0x850>
 8005dd8:	4b12      	ldr	r3, [pc, #72]	@ (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ddc:	4a11      	ldr	r2, [pc, #68]	@ (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005dde:	f023 0301 	bic.w	r3, r3, #1
 8005de2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005de4:	f7fc fb9c 	bl	8002520 <HAL_GetTick>
 8005de8:	6278      	str	r0, [r7, #36]	@ 0x24
 8005dea:	bf00      	nop
 8005dec:	f7fc fb98 	bl	8002520 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d0f9      	beq.n	8005dec <HAL_RCC_OscConfig+0x824>
 8005df8:	4b0a      	ldr	r3, [pc, #40]	@ (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005dfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8005e28 <HAL_RCC_OscConfig+0x860>)
 8005dfe:	4013      	ands	r3, r2
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005e04:	00d2      	lsls	r2, r2, #3
 8005e06:	4907      	ldr	r1, [pc, #28]	@ (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	634b      	str	r3, [r1, #52]	@ 0x34
 8005e0c:	4b05      	ldr	r3, [pc, #20]	@ (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e10:	4a04      	ldr	r2, [pc, #16]	@ (8005e24 <HAL_RCC_OscConfig+0x85c>)
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005e18:	2300      	movs	r3, #0
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3730      	adds	r7, #48	@ 0x30
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	58024400 	.word	0x58024400
 8005e28:	ffff0007 	.word	0xffff0007

08005e2c <HAL_RCC_ClockConfig>:
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <HAL_RCC_ClockConfig+0x14>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e19c      	b.n	800617a <HAL_RCC_ClockConfig+0x34e>
 8005e40:	4b8a      	ldr	r3, [pc, #552]	@ (800606c <HAL_RCC_ClockConfig+0x240>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 030f 	and.w	r3, r3, #15
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d910      	bls.n	8005e70 <HAL_RCC_ClockConfig+0x44>
 8005e4e:	4b87      	ldr	r3, [pc, #540]	@ (800606c <HAL_RCC_ClockConfig+0x240>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f023 020f 	bic.w	r2, r3, #15
 8005e56:	4985      	ldr	r1, [pc, #532]	@ (800606c <HAL_RCC_ClockConfig+0x240>)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	600b      	str	r3, [r1, #0]
 8005e5e:	4b83      	ldr	r3, [pc, #524]	@ (800606c <HAL_RCC_ClockConfig+0x240>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d001      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x44>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e184      	b.n	800617a <HAL_RCC_ClockConfig+0x34e>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d010      	beq.n	8005e9e <HAL_RCC_ClockConfig+0x72>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691a      	ldr	r2, [r3, #16]
 8005e80:	4b7b      	ldr	r3, [pc, #492]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d908      	bls.n	8005e9e <HAL_RCC_ClockConfig+0x72>
 8005e8c:	4b78      	ldr	r3, [pc, #480]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	4975      	ldr	r1, [pc, #468]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	618b      	str	r3, [r1, #24]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d010      	beq.n	8005ecc <HAL_RCC_ClockConfig+0xa0>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695a      	ldr	r2, [r3, #20]
 8005eae:	4b70      	ldr	r3, [pc, #448]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d908      	bls.n	8005ecc <HAL_RCC_ClockConfig+0xa0>
 8005eba:	4b6d      	ldr	r3, [pc, #436]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	496a      	ldr	r1, [pc, #424]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	61cb      	str	r3, [r1, #28]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0310 	and.w	r3, r3, #16
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d010      	beq.n	8005efa <HAL_RCC_ClockConfig+0xce>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699a      	ldr	r2, [r3, #24]
 8005edc:	4b64      	ldr	r3, [pc, #400]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d908      	bls.n	8005efa <HAL_RCC_ClockConfig+0xce>
 8005ee8:	4b61      	ldr	r3, [pc, #388]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	495e      	ldr	r1, [pc, #376]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	61cb      	str	r3, [r1, #28]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d010      	beq.n	8005f28 <HAL_RCC_ClockConfig+0xfc>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69da      	ldr	r2, [r3, #28]
 8005f0a:	4b59      	ldr	r3, [pc, #356]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d908      	bls.n	8005f28 <HAL_RCC_ClockConfig+0xfc>
 8005f16:	4b56      	ldr	r3, [pc, #344]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	4953      	ldr	r1, [pc, #332]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	620b      	str	r3, [r1, #32]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d010      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x12a>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	4b4d      	ldr	r3, [pc, #308]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d908      	bls.n	8005f56 <HAL_RCC_ClockConfig+0x12a>
 8005f44:	4b4a      	ldr	r3, [pc, #296]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	f023 020f 	bic.w	r2, r3, #15
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	4947      	ldr	r1, [pc, #284]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	618b      	str	r3, [r1, #24]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d055      	beq.n	800600e <HAL_RCC_ClockConfig+0x1e2>
 8005f62:	4b43      	ldr	r3, [pc, #268]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	4940      	ldr	r1, [pc, #256]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	618b      	str	r3, [r1, #24]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d107      	bne.n	8005f8c <HAL_RCC_ClockConfig+0x160>
 8005f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d121      	bne.n	8005fcc <HAL_RCC_ClockConfig+0x1a0>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e0f6      	b.n	800617a <HAL_RCC_ClockConfig+0x34e>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d107      	bne.n	8005fa4 <HAL_RCC_ClockConfig+0x178>
 8005f94:	4b36      	ldr	r3, [pc, #216]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d115      	bne.n	8005fcc <HAL_RCC_ClockConfig+0x1a0>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e0ea      	b.n	800617a <HAL_RCC_ClockConfig+0x34e>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d107      	bne.n	8005fbc <HAL_RCC_ClockConfig+0x190>
 8005fac:	4b30      	ldr	r3, [pc, #192]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d109      	bne.n	8005fcc <HAL_RCC_ClockConfig+0x1a0>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e0de      	b.n	800617a <HAL_RCC_ClockConfig+0x34e>
 8005fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0304 	and.w	r3, r3, #4
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_RCC_ClockConfig+0x1a0>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e0d6      	b.n	800617a <HAL_RCC_ClockConfig+0x34e>
 8005fcc:	4b28      	ldr	r3, [pc, #160]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f023 0207 	bic.w	r2, r3, #7
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	4925      	ldr	r1, [pc, #148]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	610b      	str	r3, [r1, #16]
 8005fde:	f7fc fa9f 	bl	8002520 <HAL_GetTick>
 8005fe2:	6178      	str	r0, [r7, #20]
 8005fe4:	e00a      	b.n	8005ffc <HAL_RCC_ClockConfig+0x1d0>
 8005fe6:	f7fc fa9b 	bl	8002520 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_ClockConfig+0x1d0>
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e0be      	b.n	800617a <HAL_RCC_ClockConfig+0x34e>
 8005ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	429a      	cmp	r2, r3
 800600c:	d1eb      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0x1ba>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d010      	beq.n	800603c <HAL_RCC_ClockConfig+0x210>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	4b14      	ldr	r3, [pc, #80]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	429a      	cmp	r2, r3
 8006028:	d208      	bcs.n	800603c <HAL_RCC_ClockConfig+0x210>
 800602a:	4b11      	ldr	r3, [pc, #68]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f023 020f 	bic.w	r2, r3, #15
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	490e      	ldr	r1, [pc, #56]	@ (8006070 <HAL_RCC_ClockConfig+0x244>)
 8006038:	4313      	orrs	r3, r2
 800603a:	618b      	str	r3, [r1, #24]
 800603c:	4b0b      	ldr	r3, [pc, #44]	@ (800606c <HAL_RCC_ClockConfig+0x240>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 030f 	and.w	r3, r3, #15
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d214      	bcs.n	8006074 <HAL_RCC_ClockConfig+0x248>
 800604a:	4b08      	ldr	r3, [pc, #32]	@ (800606c <HAL_RCC_ClockConfig+0x240>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f023 020f 	bic.w	r2, r3, #15
 8006052:	4906      	ldr	r1, [pc, #24]	@ (800606c <HAL_RCC_ClockConfig+0x240>)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	4313      	orrs	r3, r2
 8006058:	600b      	str	r3, [r1, #0]
 800605a:	4b04      	ldr	r3, [pc, #16]	@ (800606c <HAL_RCC_ClockConfig+0x240>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	429a      	cmp	r2, r3
 8006066:	d005      	beq.n	8006074 <HAL_RCC_ClockConfig+0x248>
 8006068:	2301      	movs	r3, #1
 800606a:	e086      	b.n	800617a <HAL_RCC_ClockConfig+0x34e>
 800606c:	52002000 	.word	0x52002000
 8006070:	58024400 	.word	0x58024400
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	d010      	beq.n	80060a2 <HAL_RCC_ClockConfig+0x276>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	4b3f      	ldr	r3, [pc, #252]	@ (8006184 <HAL_RCC_ClockConfig+0x358>)
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800608c:	429a      	cmp	r2, r3
 800608e:	d208      	bcs.n	80060a2 <HAL_RCC_ClockConfig+0x276>
 8006090:	4b3c      	ldr	r3, [pc, #240]	@ (8006184 <HAL_RCC_ClockConfig+0x358>)
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	4939      	ldr	r1, [pc, #228]	@ (8006184 <HAL_RCC_ClockConfig+0x358>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	618b      	str	r3, [r1, #24]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0308 	and.w	r3, r3, #8
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d010      	beq.n	80060d0 <HAL_RCC_ClockConfig+0x2a4>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	695a      	ldr	r2, [r3, #20]
 80060b2:	4b34      	ldr	r3, [pc, #208]	@ (8006184 <HAL_RCC_ClockConfig+0x358>)
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d208      	bcs.n	80060d0 <HAL_RCC_ClockConfig+0x2a4>
 80060be:	4b31      	ldr	r3, [pc, #196]	@ (8006184 <HAL_RCC_ClockConfig+0x358>)
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	492e      	ldr	r1, [pc, #184]	@ (8006184 <HAL_RCC_ClockConfig+0x358>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	61cb      	str	r3, [r1, #28]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d010      	beq.n	80060fe <HAL_RCC_ClockConfig+0x2d2>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699a      	ldr	r2, [r3, #24]
 80060e0:	4b28      	ldr	r3, [pc, #160]	@ (8006184 <HAL_RCC_ClockConfig+0x358>)
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d208      	bcs.n	80060fe <HAL_RCC_ClockConfig+0x2d2>
 80060ec:	4b25      	ldr	r3, [pc, #148]	@ (8006184 <HAL_RCC_ClockConfig+0x358>)
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	4922      	ldr	r1, [pc, #136]	@ (8006184 <HAL_RCC_ClockConfig+0x358>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	61cb      	str	r3, [r1, #28]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b00      	cmp	r3, #0
 8006108:	d010      	beq.n	800612c <HAL_RCC_ClockConfig+0x300>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69da      	ldr	r2, [r3, #28]
 800610e:	4b1d      	ldr	r3, [pc, #116]	@ (8006184 <HAL_RCC_ClockConfig+0x358>)
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006116:	429a      	cmp	r2, r3
 8006118:	d208      	bcs.n	800612c <HAL_RCC_ClockConfig+0x300>
 800611a:	4b1a      	ldr	r3, [pc, #104]	@ (8006184 <HAL_RCC_ClockConfig+0x358>)
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	4917      	ldr	r1, [pc, #92]	@ (8006184 <HAL_RCC_ClockConfig+0x358>)
 8006128:	4313      	orrs	r3, r2
 800612a:	620b      	str	r3, [r1, #32]
 800612c:	f000 f834 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 8006130:	4602      	mov	r2, r0
 8006132:	4b14      	ldr	r3, [pc, #80]	@ (8006184 <HAL_RCC_ClockConfig+0x358>)
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	0a1b      	lsrs	r3, r3, #8
 8006138:	f003 030f 	and.w	r3, r3, #15
 800613c:	4912      	ldr	r1, [pc, #72]	@ (8006188 <HAL_RCC_ClockConfig+0x35c>)
 800613e:	5ccb      	ldrb	r3, [r1, r3]
 8006140:	f003 031f 	and.w	r3, r3, #31
 8006144:	fa22 f303 	lsr.w	r3, r2, r3
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	4b0e      	ldr	r3, [pc, #56]	@ (8006184 <HAL_RCC_ClockConfig+0x358>)
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	4a0d      	ldr	r2, [pc, #52]	@ (8006188 <HAL_RCC_ClockConfig+0x35c>)
 8006154:	5cd3      	ldrb	r3, [r2, r3]
 8006156:	f003 031f 	and.w	r3, r3, #31
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	fa22 f303 	lsr.w	r3, r2, r3
 8006160:	4a0a      	ldr	r2, [pc, #40]	@ (800618c <HAL_RCC_ClockConfig+0x360>)
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	4a0a      	ldr	r2, [pc, #40]	@ (8006190 <HAL_RCC_ClockConfig+0x364>)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	4b0a      	ldr	r3, [pc, #40]	@ (8006194 <HAL_RCC_ClockConfig+0x368>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f7fc f98c 	bl	800248c <HAL_InitTick>
 8006174:	4603      	mov	r3, r0
 8006176:	73fb      	strb	r3, [r7, #15]
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	58024400 	.word	0x58024400
 8006188:	0800ef94 	.word	0x0800ef94
 800618c:	24000008 	.word	0x24000008
 8006190:	24000004 	.word	0x24000004
 8006194:	2400000c 	.word	0x2400000c

08006198 <HAL_RCC_GetSysClockFreq>:
 8006198:	b480      	push	{r7}
 800619a:	b089      	sub	sp, #36	@ 0x24
 800619c:	af00      	add	r7, sp, #0
 800619e:	4bb3      	ldr	r3, [pc, #716]	@ (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061a6:	2b18      	cmp	r3, #24
 80061a8:	f200 8155 	bhi.w	8006456 <HAL_RCC_GetSysClockFreq+0x2be>
 80061ac:	a201      	add	r2, pc, #4	@ (adr r2, 80061b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80061ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b2:	bf00      	nop
 80061b4:	08006219 	.word	0x08006219
 80061b8:	08006457 	.word	0x08006457
 80061bc:	08006457 	.word	0x08006457
 80061c0:	08006457 	.word	0x08006457
 80061c4:	08006457 	.word	0x08006457
 80061c8:	08006457 	.word	0x08006457
 80061cc:	08006457 	.word	0x08006457
 80061d0:	08006457 	.word	0x08006457
 80061d4:	0800623f 	.word	0x0800623f
 80061d8:	08006457 	.word	0x08006457
 80061dc:	08006457 	.word	0x08006457
 80061e0:	08006457 	.word	0x08006457
 80061e4:	08006457 	.word	0x08006457
 80061e8:	08006457 	.word	0x08006457
 80061ec:	08006457 	.word	0x08006457
 80061f0:	08006457 	.word	0x08006457
 80061f4:	08006245 	.word	0x08006245
 80061f8:	08006457 	.word	0x08006457
 80061fc:	08006457 	.word	0x08006457
 8006200:	08006457 	.word	0x08006457
 8006204:	08006457 	.word	0x08006457
 8006208:	08006457 	.word	0x08006457
 800620c:	08006457 	.word	0x08006457
 8006210:	08006457 	.word	0x08006457
 8006214:	0800624b 	.word	0x0800624b
 8006218:	4b94      	ldr	r3, [pc, #592]	@ (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b00      	cmp	r3, #0
 8006222:	d009      	beq.n	8006238 <HAL_RCC_GetSysClockFreq+0xa0>
 8006224:	4b91      	ldr	r3, [pc, #580]	@ (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	08db      	lsrs	r3, r3, #3
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	4a90      	ldr	r2, [pc, #576]	@ (8006470 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006230:	fa22 f303 	lsr.w	r3, r2, r3
 8006234:	61bb      	str	r3, [r7, #24]
 8006236:	e111      	b.n	800645c <HAL_RCC_GetSysClockFreq+0x2c4>
 8006238:	4b8d      	ldr	r3, [pc, #564]	@ (8006470 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800623a:	61bb      	str	r3, [r7, #24]
 800623c:	e10e      	b.n	800645c <HAL_RCC_GetSysClockFreq+0x2c4>
 800623e:	4b8d      	ldr	r3, [pc, #564]	@ (8006474 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006240:	61bb      	str	r3, [r7, #24]
 8006242:	e10b      	b.n	800645c <HAL_RCC_GetSysClockFreq+0x2c4>
 8006244:	4b8c      	ldr	r3, [pc, #560]	@ (8006478 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006246:	61bb      	str	r3, [r7, #24]
 8006248:	e108      	b.n	800645c <HAL_RCC_GetSysClockFreq+0x2c4>
 800624a:	4b88      	ldr	r3, [pc, #544]	@ (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800624c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	4b85      	ldr	r3, [pc, #532]	@ (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006258:	091b      	lsrs	r3, r3, #4
 800625a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800625e:	613b      	str	r3, [r7, #16]
 8006260:	4b82      	ldr	r3, [pc, #520]	@ (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	4b80      	ldr	r3, [pc, #512]	@ (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800626c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800626e:	08db      	lsrs	r3, r3, #3
 8006270:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	fb02 f303 	mul.w	r3, r2, r3
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006282:	edc7 7a02 	vstr	s15, [r7, #8]
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 80e1 	beq.w	8006450 <HAL_RCC_GetSysClockFreq+0x2b8>
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b02      	cmp	r3, #2
 8006292:	f000 8083 	beq.w	800639c <HAL_RCC_GetSysClockFreq+0x204>
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2b02      	cmp	r3, #2
 800629a:	f200 80a1 	bhi.w	80063e0 <HAL_RCC_GetSysClockFreq+0x248>
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_RCC_GetSysClockFreq+0x114>
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d056      	beq.n	8006358 <HAL_RCC_GetSysClockFreq+0x1c0>
 80062aa:	e099      	b.n	80063e0 <HAL_RCC_GetSysClockFreq+0x248>
 80062ac:	4b6f      	ldr	r3, [pc, #444]	@ (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d02d      	beq.n	8006314 <HAL_RCC_GetSysClockFreq+0x17c>
 80062b8:	4b6c      	ldr	r3, [pc, #432]	@ (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	08db      	lsrs	r3, r3, #3
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	4a6b      	ldr	r2, [pc, #428]	@ (8006470 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062c4:	fa22 f303 	lsr.w	r3, r2, r3
 80062c8:	607b      	str	r3, [r7, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	ee07 3a90 	vmov	s15, r3
 80062d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062e2:	4b62      	ldr	r3, [pc, #392]	@ (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ea:	ee07 3a90 	vmov	s15, r3
 80062ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80062f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800647c <HAL_RCC_GetSysClockFreq+0x2e4>
 80062fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800630a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800630e:	edc7 7a07 	vstr	s15, [r7, #28]
 8006312:	e087      	b.n	8006424 <HAL_RCC_GetSysClockFreq+0x28c>
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	ee07 3a90 	vmov	s15, r3
 800631a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800631e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006480 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006326:	4b51      	ldr	r3, [pc, #324]	@ (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800632a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800632e:	ee07 3a90 	vmov	s15, r3
 8006332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006336:	ed97 6a02 	vldr	s12, [r7, #8]
 800633a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800647c <HAL_RCC_GetSysClockFreq+0x2e4>
 800633e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800634a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800634e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006352:	edc7 7a07 	vstr	s15, [r7, #28]
 8006356:	e065      	b.n	8006424 <HAL_RCC_GetSysClockFreq+0x28c>
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006362:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006484 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800636a:	4b40      	ldr	r3, [pc, #256]	@ (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800636c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800636e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006372:	ee07 3a90 	vmov	s15, r3
 8006376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800637a:	ed97 6a02 	vldr	s12, [r7, #8]
 800637e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800647c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800638a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800638e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006396:	edc7 7a07 	vstr	s15, [r7, #28]
 800639a:	e043      	b.n	8006424 <HAL_RCC_GetSysClockFreq+0x28c>
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	ee07 3a90 	vmov	s15, r3
 80063a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006488 <HAL_RCC_GetSysClockFreq+0x2f0>
 80063aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ae:	4b2f      	ldr	r3, [pc, #188]	@ (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b6:	ee07 3a90 	vmov	s15, r3
 80063ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063be:	ed97 6a02 	vldr	s12, [r7, #8]
 80063c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800647c <HAL_RCC_GetSysClockFreq+0x2e4>
 80063c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063da:	edc7 7a07 	vstr	s15, [r7, #28]
 80063de:	e021      	b.n	8006424 <HAL_RCC_GetSysClockFreq+0x28c>
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	ee07 3a90 	vmov	s15, r3
 80063e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006484 <HAL_RCC_GetSysClockFreq+0x2ec>
 80063ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063f2:	4b1e      	ldr	r3, [pc, #120]	@ (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fa:	ee07 3a90 	vmov	s15, r3
 80063fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006402:	ed97 6a02 	vldr	s12, [r7, #8]
 8006406:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800647c <HAL_RCC_GetSysClockFreq+0x2e4>
 800640a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800640e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800641a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800641e:	edc7 7a07 	vstr	s15, [r7, #28]
 8006422:	bf00      	nop
 8006424:	4b11      	ldr	r3, [pc, #68]	@ (800646c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006428:	0a5b      	lsrs	r3, r3, #9
 800642a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800642e:	3301      	adds	r3, #1
 8006430:	603b      	str	r3, [r7, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	ee07 3a90 	vmov	s15, r3
 8006438:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800643c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006448:	ee17 3a90 	vmov	r3, s15
 800644c:	61bb      	str	r3, [r7, #24]
 800644e:	e005      	b.n	800645c <HAL_RCC_GetSysClockFreq+0x2c4>
 8006450:	2300      	movs	r3, #0
 8006452:	61bb      	str	r3, [r7, #24]
 8006454:	e002      	b.n	800645c <HAL_RCC_GetSysClockFreq+0x2c4>
 8006456:	4b07      	ldr	r3, [pc, #28]	@ (8006474 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006458:	61bb      	str	r3, [r7, #24]
 800645a:	bf00      	nop
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	4618      	mov	r0, r3
 8006460:	3724      	adds	r7, #36	@ 0x24
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	58024400 	.word	0x58024400
 8006470:	03d09000 	.word	0x03d09000
 8006474:	003d0900 	.word	0x003d0900
 8006478:	017d7840 	.word	0x017d7840
 800647c:	46000000 	.word	0x46000000
 8006480:	4c742400 	.word	0x4c742400
 8006484:	4a742400 	.word	0x4a742400
 8006488:	4bbebc20 	.word	0x4bbebc20

0800648c <HAL_RCC_GetHCLKFreq>:
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	f7ff fe81 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 8006496:	4602      	mov	r2, r0
 8006498:	4b10      	ldr	r3, [pc, #64]	@ (80064dc <HAL_RCC_GetHCLKFreq+0x50>)
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	0a1b      	lsrs	r3, r3, #8
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	490f      	ldr	r1, [pc, #60]	@ (80064e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80064a4:	5ccb      	ldrb	r3, [r1, r3]
 80064a6:	f003 031f 	and.w	r3, r3, #31
 80064aa:	fa22 f303 	lsr.w	r3, r2, r3
 80064ae:	607b      	str	r3, [r7, #4]
 80064b0:	4b0a      	ldr	r3, [pc, #40]	@ (80064dc <HAL_RCC_GetHCLKFreq+0x50>)
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	f003 030f 	and.w	r3, r3, #15
 80064b8:	4a09      	ldr	r2, [pc, #36]	@ (80064e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80064ba:	5cd3      	ldrb	r3, [r2, r3]
 80064bc:	f003 031f 	and.w	r3, r3, #31
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	fa22 f303 	lsr.w	r3, r2, r3
 80064c6:	4a07      	ldr	r2, [pc, #28]	@ (80064e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	4a07      	ldr	r2, [pc, #28]	@ (80064e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	4b04      	ldr	r3, [pc, #16]	@ (80064e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	58024400 	.word	0x58024400
 80064e0:	0800ef94 	.word	0x0800ef94
 80064e4:	24000008 	.word	0x24000008
 80064e8:	24000004 	.word	0x24000004

080064ec <HAL_RCC_GetPCLK1Freq>:
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	f7ff ffcc 	bl	800648c <HAL_RCC_GetHCLKFreq>
 80064f4:	4602      	mov	r2, r0
 80064f6:	4b06      	ldr	r3, [pc, #24]	@ (8006510 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	091b      	lsrs	r3, r3, #4
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	4904      	ldr	r1, [pc, #16]	@ (8006514 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006502:	5ccb      	ldrb	r3, [r1, r3]
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	fa22 f303 	lsr.w	r3, r2, r3
 800650c:	4618      	mov	r0, r3
 800650e:	bd80      	pop	{r7, pc}
 8006510:	58024400 	.word	0x58024400
 8006514:	0800ef94 	.word	0x0800ef94

08006518 <HAL_RCCEx_PeriphCLKConfig>:
 8006518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800651c:	b0c8      	sub	sp, #288	@ 0x120
 800651e:	af00      	add	r7, sp, #0
 8006520:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 8006524:	2300      	movs	r3, #0
 8006526:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 800652a:	2300      	movs	r3, #0
 800652c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800653c:	2500      	movs	r5, #0
 800653e:	ea54 0305 	orrs.w	r3, r4, r5
 8006542:	d049      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8006544:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006548:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800654a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800654e:	d02f      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006550:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006554:	d828      	bhi.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006556:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800655a:	d01a      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800655c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006560:	d822      	bhi.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800656a:	d007      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800656c:	e01c      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800656e:	4ba7      	ldr	r3, [pc, #668]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006572:	4aa6      	ldr	r2, [pc, #664]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006578:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800657a:	e01a      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800657c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006580:	3308      	adds	r3, #8
 8006582:	2102      	movs	r1, #2
 8006584:	4618      	mov	r0, r3
 8006586:	f002 fa6d 	bl	8008a64 <RCCEx_PLL2_Config>
 800658a:	4603      	mov	r3, r0
 800658c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006590:	e00f      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8006592:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006596:	3328      	adds	r3, #40	@ 0x28
 8006598:	2102      	movs	r1, #2
 800659a:	4618      	mov	r0, r3
 800659c:	f002 fb14 	bl	8008bc8 <RCCEx_PLL3_Config>
 80065a0:	4603      	mov	r3, r0
 80065a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80065a6:	e004      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80065a8:	2301      	movs	r3, #1
 80065aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80065ae:	e000      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80065b0:	bf00      	nop
 80065b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10a      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 80065ba:	4b94      	ldr	r3, [pc, #592]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80065c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065c8:	4a90      	ldr	r2, [pc, #576]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065ca:	430b      	orrs	r3, r1
 80065cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80065ce:	e003      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80065d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80065d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80065e4:	f04f 0900 	mov.w	r9, #0
 80065e8:	ea58 0309 	orrs.w	r3, r8, r9
 80065ec:	d047      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80065ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	d82a      	bhi.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80065f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006600 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	08006615 	.word	0x08006615
 8006604:	08006623 	.word	0x08006623
 8006608:	08006639 	.word	0x08006639
 800660c:	08006657 	.word	0x08006657
 8006610:	08006657 	.word	0x08006657
 8006614:	4b7d      	ldr	r3, [pc, #500]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006618:	4a7c      	ldr	r2, [pc, #496]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800661a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800661e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006620:	e01a      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8006622:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006626:	3308      	adds	r3, #8
 8006628:	2100      	movs	r1, #0
 800662a:	4618      	mov	r0, r3
 800662c:	f002 fa1a 	bl	8008a64 <RCCEx_PLL2_Config>
 8006630:	4603      	mov	r3, r0
 8006632:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006636:	e00f      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8006638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800663c:	3328      	adds	r3, #40	@ 0x28
 800663e:	2100      	movs	r1, #0
 8006640:	4618      	mov	r0, r3
 8006642:	f002 fac1 	bl	8008bc8 <RCCEx_PLL3_Config>
 8006646:	4603      	mov	r3, r0
 8006648:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 800664c:	e004      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800664e:	2301      	movs	r3, #1
 8006650:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006654:	e000      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8006656:	bf00      	nop
 8006658:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006660:	4b6a      	ldr	r3, [pc, #424]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006664:	f023 0107 	bic.w	r1, r3, #7
 8006668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800666c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800666e:	4a67      	ldr	r2, [pc, #412]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006670:	430b      	orrs	r3, r1
 8006672:	6513      	str	r3, [r2, #80]	@ 0x50
 8006674:	e003      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006676:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800667a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800667e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800668a:	f04f 0b00 	mov.w	fp, #0
 800668e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006692:	d054      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x226>
 8006694:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800669a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800669e:	d036      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80066a0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80066a4:	d82f      	bhi.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80066a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066aa:	d032      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80066ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066b0:	d829      	bhi.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80066b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80066b4:	d02f      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80066b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80066b8:	d825      	bhi.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80066ba:	2b80      	cmp	r3, #128	@ 0x80
 80066bc:	d018      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80066be:	2b80      	cmp	r3, #128	@ 0x80
 80066c0:	d821      	bhi.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80066c6:	2b40      	cmp	r3, #64	@ 0x40
 80066c8:	d007      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80066ca:	e01c      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80066cc:	4b4f      	ldr	r3, [pc, #316]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d0:	4a4e      	ldr	r2, [pc, #312]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80066d8:	e01e      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80066da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066de:	3308      	adds	r3, #8
 80066e0:	2100      	movs	r1, #0
 80066e2:	4618      	mov	r0, r3
 80066e4:	f002 f9be 	bl	8008a64 <RCCEx_PLL2_Config>
 80066e8:	4603      	mov	r3, r0
 80066ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80066ee:	e013      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80066f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066f4:	3328      	adds	r3, #40	@ 0x28
 80066f6:	2100      	movs	r1, #0
 80066f8:	4618      	mov	r0, r3
 80066fa:	f002 fa65 	bl	8008bc8 <RCCEx_PLL3_Config>
 80066fe:	4603      	mov	r3, r0
 8006700:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006704:	e008      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006706:	2301      	movs	r3, #1
 8006708:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 800670c:	e004      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800670e:	bf00      	nop
 8006710:	e002      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006712:	bf00      	nop
 8006714:	e000      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006716:	bf00      	nop
 8006718:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006720:	4b3a      	ldr	r3, [pc, #232]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006724:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800672c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800672e:	4a37      	ldr	r2, [pc, #220]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006730:	430b      	orrs	r3, r1
 8006732:	6513      	str	r3, [r2, #80]	@ 0x50
 8006734:	e003      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x226>
 8006736:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800673a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800673e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800674a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800674e:	2300      	movs	r3, #0
 8006750:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006754:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006758:	460b      	mov	r3, r1
 800675a:	4313      	orrs	r3, r2
 800675c:	d05c      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800675e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006764:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006768:	d03b      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800676a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800676e:	d834      	bhi.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006770:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006774:	d037      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8006776:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800677a:	d82e      	bhi.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800677c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006780:	d033      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006782:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006786:	d828      	bhi.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800678c:	d01a      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800678e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006792:	d822      	bhi.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006798:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800679c:	d007      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x296>
 800679e:	e01c      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80067a0:	4b1a      	ldr	r3, [pc, #104]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a4:	4a19      	ldr	r2, [pc, #100]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80067ac:	e01e      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80067ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067b2:	3308      	adds	r3, #8
 80067b4:	2100      	movs	r1, #0
 80067b6:	4618      	mov	r0, r3
 80067b8:	f002 f954 	bl	8008a64 <RCCEx_PLL2_Config>
 80067bc:	4603      	mov	r3, r0
 80067be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80067c2:	e013      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80067c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067c8:	3328      	adds	r3, #40	@ 0x28
 80067ca:	2100      	movs	r1, #0
 80067cc:	4618      	mov	r0, r3
 80067ce:	f002 f9fb 	bl	8008bc8 <RCCEx_PLL3_Config>
 80067d2:	4603      	mov	r3, r0
 80067d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80067d8:	e008      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80067da:	2301      	movs	r3, #1
 80067dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80067e0:	e004      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80067e2:	bf00      	nop
 80067e4:	e002      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80067e6:	bf00      	nop
 80067e8:	e000      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80067ea:	bf00      	nop
 80067ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10d      	bne.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80067f4:	4b05      	ldr	r3, [pc, #20]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067f8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80067fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006802:	4a02      	ldr	r2, [pc, #8]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006804:	430b      	orrs	r3, r1
 8006806:	6513      	str	r3, [r2, #80]	@ 0x50
 8006808:	e006      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800680a:	bf00      	nop
 800680c:	58024400 	.word	0x58024400
 8006810:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006814:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006818:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006824:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006828:	2300      	movs	r3, #0
 800682a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800682e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006832:	460b      	mov	r3, r1
 8006834:	4313      	orrs	r3, r2
 8006836:	d03a      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x396>
 8006838:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800683c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800683e:	2b30      	cmp	r3, #48	@ 0x30
 8006840:	d01f      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006842:	2b30      	cmp	r3, #48	@ 0x30
 8006844:	d819      	bhi.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006846:	2b20      	cmp	r3, #32
 8006848:	d00c      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800684a:	2b20      	cmp	r3, #32
 800684c:	d815      	bhi.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d019      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006852:	2b10      	cmp	r3, #16
 8006854:	d111      	bne.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006856:	4bae      	ldr	r3, [pc, #696]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685a:	4aad      	ldr	r2, [pc, #692]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800685c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006860:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006862:	e011      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8006864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006868:	3308      	adds	r3, #8
 800686a:	2102      	movs	r1, #2
 800686c:	4618      	mov	r0, r3
 800686e:	f002 f8f9 	bl	8008a64 <RCCEx_PLL2_Config>
 8006872:	4603      	mov	r3, r0
 8006874:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006878:	e006      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800687a:	2301      	movs	r3, #1
 800687c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006880:	e002      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8006882:	bf00      	nop
 8006884:	e000      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8006886:	bf00      	nop
 8006888:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10a      	bne.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8006890:	4b9f      	ldr	r3, [pc, #636]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006894:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800689c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800689e:	4a9c      	ldr	r2, [pc, #624]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068a0:	430b      	orrs	r3, r1
 80068a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80068a4:	e003      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x396>
 80068a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80068ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80068ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80068be:	2300      	movs	r3, #0
 80068c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80068c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4313      	orrs	r3, r2
 80068cc:	d051      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x45a>
 80068ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068d8:	d035      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80068da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068de:	d82e      	bhi.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80068e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80068e4:	d031      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80068e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80068ea:	d828      	bhi.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80068ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068f0:	d01a      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80068f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068f6:	d822      	bhi.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80068fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006900:	d007      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006902:	e01c      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006904:	4b82      	ldr	r3, [pc, #520]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006908:	4a81      	ldr	r2, [pc, #516]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800690a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800690e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006910:	e01c      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006916:	3308      	adds	r3, #8
 8006918:	2100      	movs	r1, #0
 800691a:	4618      	mov	r0, r3
 800691c:	f002 f8a2 	bl	8008a64 <RCCEx_PLL2_Config>
 8006920:	4603      	mov	r3, r0
 8006922:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006926:	e011      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800692c:	3328      	adds	r3, #40	@ 0x28
 800692e:	2100      	movs	r1, #0
 8006930:	4618      	mov	r0, r3
 8006932:	f002 f949 	bl	8008bc8 <RCCEx_PLL3_Config>
 8006936:	4603      	mov	r3, r0
 8006938:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 800693c:	e006      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800693e:	2301      	movs	r3, #1
 8006940:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006944:	e002      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006946:	bf00      	nop
 8006948:	e000      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800694a:	bf00      	nop
 800694c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006954:	4b6e      	ldr	r3, [pc, #440]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006958:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800695c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006960:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006962:	4a6b      	ldr	r2, [pc, #428]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006964:	430b      	orrs	r3, r1
 8006966:	6513      	str	r3, [r2, #80]	@ 0x50
 8006968:	e003      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x45a>
 800696a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800696e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006972:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800697e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006982:	2300      	movs	r3, #0
 8006984:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006988:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800698c:	460b      	mov	r3, r1
 800698e:	4313      	orrs	r3, r2
 8006990:	d053      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006992:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006996:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006998:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800699c:	d033      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800699e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069a2:	d82c      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80069a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069a8:	d02f      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80069aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069ae:	d826      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80069b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80069b4:	d02b      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80069b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80069ba:	d820      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80069bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069c0:	d012      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80069c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069c6:	d81a      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d022      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80069cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069d0:	d115      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80069d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069d6:	3308      	adds	r3, #8
 80069d8:	2101      	movs	r1, #1
 80069da:	4618      	mov	r0, r3
 80069dc:	f002 f842 	bl	8008a64 <RCCEx_PLL2_Config>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80069e6:	e015      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80069e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069ec:	3328      	adds	r3, #40	@ 0x28
 80069ee:	2101      	movs	r1, #1
 80069f0:	4618      	mov	r0, r3
 80069f2:	f002 f8e9 	bl	8008bc8 <RCCEx_PLL3_Config>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80069fc:	e00a      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80069fe:	2301      	movs	r3, #1
 8006a00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006a04:	e006      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8006a06:	bf00      	nop
 8006a08:	e004      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8006a0a:	bf00      	nop
 8006a0c:	e002      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8006a0e:	bf00      	nop
 8006a10:	e000      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8006a12:	bf00      	nop
 8006a14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10a      	bne.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006a1c:	4b3c      	ldr	r3, [pc, #240]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a20:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a2a:	4a39      	ldr	r2, [pc, #228]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a30:	e003      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006a32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a36:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006a46:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a50:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4313      	orrs	r3, r2
 8006a58:	d060      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a62:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006a66:	d039      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8006a68:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006a6c:	d832      	bhi.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a72:	d035      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a78:	d82c      	bhi.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a7e:	d031      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a84:	d826      	bhi.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006a86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a8a:	d02d      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006a8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a90:	d820      	bhi.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006a92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a96:	d012      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006a98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a9c:	d81a      	bhi.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d024      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006aa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006aa6:	d115      	bne.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006aac:	3308      	adds	r3, #8
 8006aae:	2101      	movs	r1, #1
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f001 ffd7 	bl	8008a64 <RCCEx_PLL2_Config>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006abc:	e017      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8006abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ac2:	3328      	adds	r3, #40	@ 0x28
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f002 f87e 	bl	8008bc8 <RCCEx_PLL3_Config>
 8006acc:	4603      	mov	r3, r0
 8006ace:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006ad2:	e00c      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006ada:	e008      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8006adc:	bf00      	nop
 8006ade:	e006      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8006ae0:	bf00      	nop
 8006ae2:	e004      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8006ae4:	bf00      	nop
 8006ae6:	e002      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8006ae8:	bf00      	nop
 8006aea:	e000      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8006aec:	bf00      	nop
 8006aee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10e      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8006af6:	4b06      	ldr	r3, [pc, #24]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006afa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006b06:	4a02      	ldr	r2, [pc, #8]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b0c:	e006      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006b0e:	bf00      	nop
 8006b10:	58024400 	.word	0x58024400
 8006b14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006b28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006b32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006b36:	460b      	mov	r3, r1
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	d037      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x694>
 8006b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b46:	d00e      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b4c:	d816      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d018      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006b52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b56:	d111      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006b58:	4bc4      	ldr	r3, [pc, #784]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5c:	4ac3      	ldr	r2, [pc, #780]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006b64:	e00f      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b6a:	3308      	adds	r3, #8
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f001 ff78 	bl	8008a64 <RCCEx_PLL2_Config>
 8006b74:	4603      	mov	r3, r0
 8006b76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006b7a:	e004      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006b82:	e000      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006b84:	bf00      	nop
 8006b86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8006b8e:	4bb7      	ldr	r3, [pc, #732]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b92:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b9c:	4ab3      	ldr	r2, [pc, #716]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ba2:	e003      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x694>
 8006ba4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ba8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006bc2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	d039      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d81c      	bhi.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bdc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006c19 	.word	0x08006c19
 8006be0:	08006bed 	.word	0x08006bed
 8006be4:	08006bfb 	.word	0x08006bfb
 8006be8:	08006c19 	.word	0x08006c19
 8006bec:	4b9f      	ldr	r3, [pc, #636]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf0:	4a9e      	ldr	r2, [pc, #632]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006bf8:	e00f      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x702>
 8006bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bfe:	3308      	adds	r3, #8
 8006c00:	2102      	movs	r1, #2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f001 ff2e 	bl	8008a64 <RCCEx_PLL2_Config>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006c0e:	e004      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x702>
 8006c10:	2301      	movs	r3, #1
 8006c12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006c16:	e000      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x702>
 8006c18:	bf00      	nop
 8006c1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10a      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8006c22:	4b92      	ldr	r3, [pc, #584]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c26:	f023 0103 	bic.w	r1, r3, #3
 8006c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c30:	4a8e      	ldr	r2, [pc, #568]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c32:	430b      	orrs	r3, r1
 8006c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c36:	e003      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006c38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c3c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006c4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c50:	2300      	movs	r3, #0
 8006c52:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c56:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	f000 8099 	beq.w	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8006c62:	4b83      	ldr	r3, [pc, #524]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a82      	ldr	r2, [pc, #520]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	f7fb fc57 	bl	8002520 <HAL_GetTick>
 8006c72:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
 8006c76:	e00b      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x778>
 8006c78:	f7fb fc52 	bl	8002520 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	2b64      	cmp	r3, #100	@ 0x64
 8006c86:	d903      	bls.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x778>
 8006c88:	2303      	movs	r3, #3
 8006c8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006c8e:	e005      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x784>
 8006c90:	4b77      	ldr	r3, [pc, #476]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0ed      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8006c9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d173      	bne.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x874>
 8006ca4:	4b71      	ldr	r3, [pc, #452]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ca6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006cb0:	4053      	eors	r3, r2
 8006cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d015      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006cba:	4b6c      	ldr	r3, [pc, #432]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cc2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8006cc6:	4b69      	ldr	r3, [pc, #420]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cca:	4a68      	ldr	r2, [pc, #416]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cd2:	4b66      	ldr	r3, [pc, #408]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cd6:	4a65      	ldr	r2, [pc, #404]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cde:	4a63      	ldr	r2, [pc, #396]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006cee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cf2:	d118      	bne.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8006cf4:	f7fb fc14 	bl	8002520 <HAL_GetTick>
 8006cf8:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
 8006cfc:	e00d      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x802>
 8006cfe:	f7fb fc0f 	bl	8002520 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006d08:	1ad2      	subs	r2, r2, r3
 8006d0a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d903      	bls.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x802>
 8006d12:	2303      	movs	r3, #3
 8006d14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006d18:	e005      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8006d1a:	4b54      	ldr	r3, [pc, #336]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0eb      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8006d26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d129      	bne.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
 8006d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d3e:	d10e      	bne.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006d40:	4b4a      	ldr	r3, [pc, #296]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d50:	091a      	lsrs	r2, r3, #4
 8006d52:	4b48      	ldr	r3, [pc, #288]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	4a45      	ldr	r2, [pc, #276]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	6113      	str	r3, [r2, #16]
 8006d5c:	e005      	b.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006d5e:	4b43      	ldr	r3, [pc, #268]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	4a42      	ldr	r2, [pc, #264]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006d68:	6113      	str	r3, [r2, #16]
 8006d6a:	4b40      	ldr	r3, [pc, #256]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d6c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d7a:	4a3c      	ldr	r2, [pc, #240]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d7c:	430b      	orrs	r3, r1
 8006d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d80:	e008      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8006d82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d86:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006d8a:	e003      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8006d8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d90:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	f002 0301 	and.w	r3, r2, #1
 8006da0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006da4:	2300      	movs	r3, #0
 8006da6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006daa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006dae:	460b      	mov	r3, r1
 8006db0:	4313      	orrs	r3, r2
 8006db2:	f000 8090 	beq.w	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dbe:	2b28      	cmp	r3, #40	@ 0x28
 8006dc0:	d870      	bhi.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc8:	08006ead 	.word	0x08006ead
 8006dcc:	08006ea5 	.word	0x08006ea5
 8006dd0:	08006ea5 	.word	0x08006ea5
 8006dd4:	08006ea5 	.word	0x08006ea5
 8006dd8:	08006ea5 	.word	0x08006ea5
 8006ddc:	08006ea5 	.word	0x08006ea5
 8006de0:	08006ea5 	.word	0x08006ea5
 8006de4:	08006ea5 	.word	0x08006ea5
 8006de8:	08006e79 	.word	0x08006e79
 8006dec:	08006ea5 	.word	0x08006ea5
 8006df0:	08006ea5 	.word	0x08006ea5
 8006df4:	08006ea5 	.word	0x08006ea5
 8006df8:	08006ea5 	.word	0x08006ea5
 8006dfc:	08006ea5 	.word	0x08006ea5
 8006e00:	08006ea5 	.word	0x08006ea5
 8006e04:	08006ea5 	.word	0x08006ea5
 8006e08:	08006e8f 	.word	0x08006e8f
 8006e0c:	08006ea5 	.word	0x08006ea5
 8006e10:	08006ea5 	.word	0x08006ea5
 8006e14:	08006ea5 	.word	0x08006ea5
 8006e18:	08006ea5 	.word	0x08006ea5
 8006e1c:	08006ea5 	.word	0x08006ea5
 8006e20:	08006ea5 	.word	0x08006ea5
 8006e24:	08006ea5 	.word	0x08006ea5
 8006e28:	08006ead 	.word	0x08006ead
 8006e2c:	08006ea5 	.word	0x08006ea5
 8006e30:	08006ea5 	.word	0x08006ea5
 8006e34:	08006ea5 	.word	0x08006ea5
 8006e38:	08006ea5 	.word	0x08006ea5
 8006e3c:	08006ea5 	.word	0x08006ea5
 8006e40:	08006ea5 	.word	0x08006ea5
 8006e44:	08006ea5 	.word	0x08006ea5
 8006e48:	08006ead 	.word	0x08006ead
 8006e4c:	08006ea5 	.word	0x08006ea5
 8006e50:	08006ea5 	.word	0x08006ea5
 8006e54:	08006ea5 	.word	0x08006ea5
 8006e58:	08006ea5 	.word	0x08006ea5
 8006e5c:	08006ea5 	.word	0x08006ea5
 8006e60:	08006ea5 	.word	0x08006ea5
 8006e64:	08006ea5 	.word	0x08006ea5
 8006e68:	08006ead 	.word	0x08006ead
 8006e6c:	58024400 	.word	0x58024400
 8006e70:	58024800 	.word	0x58024800
 8006e74:	00ffffcf 	.word	0x00ffffcf
 8006e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	2101      	movs	r1, #1
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 fdef 	bl	8008a64 <RCCEx_PLL2_Config>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006e8c:	e00f      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x996>
 8006e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e92:	3328      	adds	r3, #40	@ 0x28
 8006e94:	2101      	movs	r1, #1
 8006e96:	4618      	mov	r0, r3
 8006e98:	f001 fe96 	bl	8008bc8 <RCCEx_PLL3_Config>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006ea2:	e004      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x996>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006eaa:	e000      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x996>
 8006eac:	bf00      	nop
 8006eae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10b      	bne.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x9b6>
 8006eb6:	4bc0      	ldr	r3, [pc, #768]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ec6:	4abc      	ldr	r2, [pc, #752]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006ec8:	430b      	orrs	r3, r1
 8006eca:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ecc:	e003      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006ece:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ed2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	f002 0302 	and.w	r3, r2, #2
 8006ee2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006eec:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	d043      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8006ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006efe:	2b05      	cmp	r3, #5
 8006f00:	d824      	bhi.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006f02:	a201      	add	r2, pc, #4	@ (adr r2, 8006f08 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f08:	08006f55 	.word	0x08006f55
 8006f0c:	08006f21 	.word	0x08006f21
 8006f10:	08006f37 	.word	0x08006f37
 8006f14:	08006f55 	.word	0x08006f55
 8006f18:	08006f55 	.word	0x08006f55
 8006f1c:	08006f55 	.word	0x08006f55
 8006f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f24:	3308      	adds	r3, #8
 8006f26:	2101      	movs	r1, #1
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f001 fd9b 	bl	8008a64 <RCCEx_PLL2_Config>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006f34:	e00f      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
 8006f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f3a:	3328      	adds	r3, #40	@ 0x28
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f001 fe42 	bl	8008bc8 <RCCEx_PLL3_Config>
 8006f44:	4603      	mov	r3, r0
 8006f46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006f4a:	e004      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006f52:	e000      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
 8006f54:	bf00      	nop
 8006f56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10b      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006f5e:	4b96      	ldr	r3, [pc, #600]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f62:	f023 0107 	bic.w	r1, r3, #7
 8006f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f6e:	4a92      	ldr	r2, [pc, #584]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006f70:	430b      	orrs	r3, r1
 8006f72:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f74:	e003      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8006f76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	f002 0304 	and.w	r3, r2, #4
 8006f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f94:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	d043      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
 8006f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006fa6:	2b05      	cmp	r3, #5
 8006fa8:	d824      	bhi.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006faa:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb0:	08006ffd 	.word	0x08006ffd
 8006fb4:	08006fc9 	.word	0x08006fc9
 8006fb8:	08006fdf 	.word	0x08006fdf
 8006fbc:	08006ffd 	.word	0x08006ffd
 8006fc0:	08006ffd 	.word	0x08006ffd
 8006fc4:	08006ffd 	.word	0x08006ffd
 8006fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fcc:	3308      	adds	r3, #8
 8006fce:	2101      	movs	r1, #1
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f001 fd47 	bl	8008a64 <RCCEx_PLL2_Config>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006fdc:	e00f      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8006fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fe2:	3328      	adds	r3, #40	@ 0x28
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f001 fdee 	bl	8008bc8 <RCCEx_PLL3_Config>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006ff2:	e004      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8006ffa:	e000      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8006ffc:	bf00      	nop
 8006ffe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10b      	bne.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xb06>
 8007006:	4b6c      	ldr	r3, [pc, #432]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800700a:	f023 0107 	bic.w	r1, r3, #7
 800700e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007012:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007016:	4a68      	ldr	r2, [pc, #416]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007018:	430b      	orrs	r3, r1
 800701a:	6593      	str	r3, [r2, #88]	@ 0x58
 800701c:	e003      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
 800701e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007022:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8007026:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	f002 0320 	and.w	r3, r2, #32
 8007032:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007036:	2300      	movs	r3, #0
 8007038:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800703c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007040:	460b      	mov	r3, r1
 8007042:	4313      	orrs	r3, r2
 8007044:	d055      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
 8007046:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800704a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800704e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007052:	d033      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007054:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007058:	d82c      	bhi.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800705a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800705e:	d02f      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007064:	d826      	bhi.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007066:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800706a:	d02b      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800706c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007070:	d820      	bhi.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007072:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007076:	d012      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007078:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800707c:	d81a      	bhi.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800707e:	2b00      	cmp	r3, #0
 8007080:	d022      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007082:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007086:	d115      	bne.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007088:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800708c:	3308      	adds	r3, #8
 800708e:	2100      	movs	r1, #0
 8007090:	4618      	mov	r0, r3
 8007092:	f001 fce7 	bl	8008a64 <RCCEx_PLL2_Config>
 8007096:	4603      	mov	r3, r0
 8007098:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 800709c:	e015      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 800709e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070a2:	3328      	adds	r3, #40	@ 0x28
 80070a4:	2102      	movs	r1, #2
 80070a6:	4618      	mov	r0, r3
 80070a8:	f001 fd8e 	bl	8008bc8 <RCCEx_PLL3_Config>
 80070ac:	4603      	mov	r3, r0
 80070ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80070b2:	e00a      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 80070b4:	2301      	movs	r3, #1
 80070b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80070ba:	e006      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 80070bc:	bf00      	nop
 80070be:	e004      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 80070c0:	bf00      	nop
 80070c2:	e002      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 80070c4:	bf00      	nop
 80070c6:	e000      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 80070c8:	bf00      	nop
 80070ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10b      	bne.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
 80070d2:	4b39      	ldr	r3, [pc, #228]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80070d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070d6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80070da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070e2:	4a35      	ldr	r2, [pc, #212]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80070e4:	430b      	orrs	r3, r1
 80070e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80070e8:	e003      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
 80070ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80070f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80070fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007102:	2300      	movs	r3, #0
 8007104:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007108:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800710c:	460b      	mov	r3, r1
 800710e:	4313      	orrs	r3, r2
 8007110:	d058      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8007112:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007116:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800711a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800711e:	d033      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007120:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007124:	d82c      	bhi.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800712a:	d02f      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800712c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007130:	d826      	bhi.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007132:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007136:	d02b      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007138:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800713c:	d820      	bhi.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800713e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007142:	d012      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007144:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007148:	d81a      	bhi.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800714a:	2b00      	cmp	r3, #0
 800714c:	d022      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800714e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007152:	d115      	bne.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007154:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007158:	3308      	adds	r3, #8
 800715a:	2100      	movs	r1, #0
 800715c:	4618      	mov	r0, r3
 800715e:	f001 fc81 	bl	8008a64 <RCCEx_PLL2_Config>
 8007162:	4603      	mov	r3, r0
 8007164:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8007168:	e015      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
 800716a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800716e:	3328      	adds	r3, #40	@ 0x28
 8007170:	2102      	movs	r1, #2
 8007172:	4618      	mov	r0, r3
 8007174:	f001 fd28 	bl	8008bc8 <RCCEx_PLL3_Config>
 8007178:	4603      	mov	r3, r0
 800717a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 800717e:	e00a      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
 8007180:	2301      	movs	r3, #1
 8007182:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8007186:	e006      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
 8007188:	bf00      	nop
 800718a:	e004      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
 800718c:	bf00      	nop
 800718e:	e002      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
 8007190:	bf00      	nop
 8007192:	e000      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
 8007194:	bf00      	nop
 8007196:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10e      	bne.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xca4>
 800719e:	4b06      	ldr	r3, [pc, #24]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80071a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071a2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80071a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80071ae:	4a02      	ldr	r2, [pc, #8]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80071b0:	430b      	orrs	r3, r1
 80071b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80071b4:	e006      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80071b6:	bf00      	nop
 80071b8:	58024400 	.word	0x58024400
 80071bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80071c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80071d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071d4:	2300      	movs	r3, #0
 80071d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071da:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80071de:	460b      	mov	r3, r1
 80071e0:	4313      	orrs	r3, r2
 80071e2:	d055      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 80071e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80071ec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80071f0:	d033      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80071f2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80071f6:	d82c      	bhi.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80071f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071fc:	d02f      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80071fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007202:	d826      	bhi.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007204:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007208:	d02b      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800720a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800720e:	d820      	bhi.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007210:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007214:	d012      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007216:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800721a:	d81a      	bhi.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800721c:	2b00      	cmp	r3, #0
 800721e:	d022      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007220:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007224:	d115      	bne.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007226:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800722a:	3308      	adds	r3, #8
 800722c:	2100      	movs	r1, #0
 800722e:	4618      	mov	r0, r3
 8007230:	f001 fc18 	bl	8008a64 <RCCEx_PLL2_Config>
 8007234:	4603      	mov	r3, r0
 8007236:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 800723a:	e015      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 800723c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007240:	3328      	adds	r3, #40	@ 0x28
 8007242:	2102      	movs	r1, #2
 8007244:	4618      	mov	r0, r3
 8007246:	f001 fcbf 	bl	8008bc8 <RCCEx_PLL3_Config>
 800724a:	4603      	mov	r3, r0
 800724c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8007250:	e00a      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8007252:	2301      	movs	r3, #1
 8007254:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8007258:	e006      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 800725a:	bf00      	nop
 800725c:	e004      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 800725e:	bf00      	nop
 8007260:	e002      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8007262:	bf00      	nop
 8007264:	e000      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8007266:	bf00      	nop
 8007268:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10b      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8007270:	4ba1      	ldr	r3, [pc, #644]	@ (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007274:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007278:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800727c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007280:	4a9d      	ldr	r2, [pc, #628]	@ (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007282:	430b      	orrs	r3, r1
 8007284:	6593      	str	r3, [r2, #88]	@ 0x58
 8007286:	e003      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8007288:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800728c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8007290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007298:	f002 0308 	and.w	r3, r2, #8
 800729c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80072a0:	2300      	movs	r3, #0
 80072a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80072a6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80072aa:	460b      	mov	r3, r1
 80072ac:	4313      	orrs	r3, r2
 80072ae:	d01e      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0xdd6>
 80072b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072bc:	d10c      	bne.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 80072be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072c2:	3328      	adds	r3, #40	@ 0x28
 80072c4:	2102      	movs	r1, #2
 80072c6:	4618      	mov	r0, r3
 80072c8:	f001 fc7e 	bl	8008bc8 <RCCEx_PLL3_Config>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 80072d2:	2301      	movs	r3, #1
 80072d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80072d8:	4b87      	ldr	r3, [pc, #540]	@ (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80072da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072dc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80072e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072e8:	4a83      	ldr	r2, [pc, #524]	@ (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80072ea:	430b      	orrs	r3, r1
 80072ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80072ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	f002 0310 	and.w	r3, r2, #16
 80072fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80072fe:	2300      	movs	r3, #0
 8007300:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007304:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007308:	460b      	mov	r3, r1
 800730a:	4313      	orrs	r3, r2
 800730c:	d01e      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0xe34>
 800730e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007312:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007316:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800731a:	d10c      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
 800731c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007320:	3328      	adds	r3, #40	@ 0x28
 8007322:	2102      	movs	r1, #2
 8007324:	4618      	mov	r0, r3
 8007326:	f001 fc4f 	bl	8008bc8 <RCCEx_PLL3_Config>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
 8007330:	2301      	movs	r3, #1
 8007332:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8007336:	4b70      	ldr	r3, [pc, #448]	@ (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800733a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800733e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007342:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007346:	4a6c      	ldr	r2, [pc, #432]	@ (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007348:	430b      	orrs	r3, r1
 800734a:	6593      	str	r3, [r2, #88]	@ 0x58
 800734c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007354:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007358:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800735c:	2300      	movs	r3, #0
 800735e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007362:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007366:	460b      	mov	r3, r1
 8007368:	4313      	orrs	r3, r2
 800736a:	d03e      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xed2>
 800736c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007370:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007378:	d022      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800737a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800737e:	d81b      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007388:	d00b      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800738a:	e015      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800738c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007390:	3308      	adds	r3, #8
 8007392:	2100      	movs	r1, #0
 8007394:	4618      	mov	r0, r3
 8007396:	f001 fb65 	bl	8008a64 <RCCEx_PLL2_Config>
 800739a:	4603      	mov	r3, r0
 800739c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80073a0:	e00f      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
 80073a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073a6:	3328      	adds	r3, #40	@ 0x28
 80073a8:	2102      	movs	r1, #2
 80073aa:	4618      	mov	r0, r3
 80073ac:	f001 fc0c 	bl	8008bc8 <RCCEx_PLL3_Config>
 80073b0:	4603      	mov	r3, r0
 80073b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80073b6:	e004      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
 80073b8:	2301      	movs	r3, #1
 80073ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80073be:	e000      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
 80073c0:	bf00      	nop
 80073c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10b      	bne.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
 80073ca:	4b4b      	ldr	r3, [pc, #300]	@ (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80073cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80073d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80073da:	4a47      	ldr	r2, [pc, #284]	@ (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80073dc:	430b      	orrs	r3, r1
 80073de:	6593      	str	r3, [r2, #88]	@ 0x58
 80073e0:	e003      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xed2>
 80073e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80073ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80073f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073f8:	2300      	movs	r3, #0
 80073fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80073fc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007400:	460b      	mov	r3, r1
 8007402:	4313      	orrs	r3, r2
 8007404:	d03b      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0xf66>
 8007406:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800740a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800740e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007412:	d01f      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007414:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007418:	d818      	bhi.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800741a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800741e:	d003      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8007420:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007424:	d007      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8007426:	e011      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007428:	4b33      	ldr	r3, [pc, #204]	@ (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800742a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742c:	4a32      	ldr	r2, [pc, #200]	@ (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800742e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007432:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007434:	e00f      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
 8007436:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800743a:	3328      	adds	r3, #40	@ 0x28
 800743c:	2101      	movs	r1, #1
 800743e:	4618      	mov	r0, r3
 8007440:	f001 fbc2 	bl	8008bc8 <RCCEx_PLL3_Config>
 8007444:	4603      	mov	r3, r0
 8007446:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 800744a:	e004      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
 800744c:	2301      	movs	r3, #1
 800744e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8007452:	e000      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
 8007454:	bf00      	nop
 8007456:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10b      	bne.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
 800745e:	4b26      	ldr	r3, [pc, #152]	@ (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007462:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007466:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800746a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800746e:	4a22      	ldr	r2, [pc, #136]	@ (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007470:	430b      	orrs	r3, r1
 8007472:	6553      	str	r3, [r2, #84]	@ 0x54
 8007474:	e003      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0xf66>
 8007476:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800747a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800747e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007486:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800748a:	673b      	str	r3, [r7, #112]	@ 0x70
 800748c:	2300      	movs	r3, #0
 800748e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007490:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007494:	460b      	mov	r3, r1
 8007496:	4313      	orrs	r3, r2
 8007498:	d034      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800749a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800749e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d003      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80074a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074a8:	d007      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80074aa:	e011      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 80074ac:	4b12      	ldr	r3, [pc, #72]	@ (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80074ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b0:	4a11      	ldr	r2, [pc, #68]	@ (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80074b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074b8:	e00e      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
 80074ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074be:	3308      	adds	r3, #8
 80074c0:	2102      	movs	r1, #2
 80074c2:	4618      	mov	r0, r3
 80074c4:	f001 face 	bl	8008a64 <RCCEx_PLL2_Config>
 80074c8:	4603      	mov	r3, r0
 80074ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80074ce:	e003      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
 80074d0:	2301      	movs	r3, #1
 80074d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80074d6:	bf00      	nop
 80074d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10d      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80074e0:	4b05      	ldr	r3, [pc, #20]	@ (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80074e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80074e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074ee:	4a02      	ldr	r2, [pc, #8]	@ (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80074f0:	430b      	orrs	r3, r1
 80074f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074f4:	e006      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80074f6:	bf00      	nop
 80074f8:	58024400 	.word	0x58024400
 80074fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007500:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8007504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007510:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007512:	2300      	movs	r3, #0
 8007514:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007516:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800751a:	460b      	mov	r3, r1
 800751c:	4313      	orrs	r3, r2
 800751e:	d00c      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x1022>
 8007520:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007524:	3328      	adds	r3, #40	@ 0x28
 8007526:	2102      	movs	r1, #2
 8007528:	4618      	mov	r0, r3
 800752a:	f001 fb4d 	bl	8008bc8 <RCCEx_PLL3_Config>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x1022>
 8007534:	2301      	movs	r3, #1
 8007536:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800753a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800753e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007542:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007546:	663b      	str	r3, [r7, #96]	@ 0x60
 8007548:	2300      	movs	r3, #0
 800754a:	667b      	str	r3, [r7, #100]	@ 0x64
 800754c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007550:	460b      	mov	r3, r1
 8007552:	4313      	orrs	r3, r2
 8007554:	d038      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
 8007556:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800755a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800755e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007562:	d018      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007564:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007568:	d811      	bhi.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800756a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800756e:	d014      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8007570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007574:	d80b      	bhi.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d011      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800757a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800757e:	d106      	bne.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007580:	4bc3      	ldr	r3, [pc, #780]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007584:	4ac2      	ldr	r2, [pc, #776]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800758a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800758c:	e008      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 800758e:	2301      	movs	r3, #1
 8007590:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8007594:	e004      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8007596:	bf00      	nop
 8007598:	e002      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 800759a:	bf00      	nop
 800759c:	e000      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 800759e:	bf00      	nop
 80075a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10b      	bne.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 80075a8:	4bb9      	ldr	r3, [pc, #740]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80075b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075b8:	4ab5      	ldr	r2, [pc, #724]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075ba:	430b      	orrs	r3, r1
 80075bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80075be:	e003      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
 80075c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80075c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80075d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075d6:	2300      	movs	r3, #0
 80075d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80075de:	460b      	mov	r3, r1
 80075e0:	4313      	orrs	r3, r2
 80075e2:	d009      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
 80075e4:	4baa      	ldr	r3, [pc, #680]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80075ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075f2:	4aa7      	ldr	r2, [pc, #668]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075f4:	430b      	orrs	r3, r1
 80075f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80075f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007600:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007604:	653b      	str	r3, [r7, #80]	@ 0x50
 8007606:	2300      	movs	r3, #0
 8007608:	657b      	str	r3, [r7, #84]	@ 0x54
 800760a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800760e:	460b      	mov	r3, r1
 8007610:	4313      	orrs	r3, r2
 8007612:	d009      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x1110>
 8007614:	4b9e      	ldr	r3, [pc, #632]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007618:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800761c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007622:	4a9b      	ldr	r2, [pc, #620]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007624:	430b      	orrs	r3, r1
 8007626:	6513      	str	r3, [r2, #80]	@ 0x50
 8007628:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007634:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007636:	2300      	movs	r3, #0
 8007638:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800763a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800763e:	460b      	mov	r3, r1
 8007640:	4313      	orrs	r3, r2
 8007642:	d009      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x1140>
 8007644:	4b92      	ldr	r3, [pc, #584]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007648:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800764c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007652:	4a8f      	ldr	r2, [pc, #572]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007654:	430b      	orrs	r3, r1
 8007656:	6593      	str	r3, [r2, #88]	@ 0x58
 8007658:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007660:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007664:	643b      	str	r3, [r7, #64]	@ 0x40
 8007666:	2300      	movs	r3, #0
 8007668:	647b      	str	r3, [r7, #68]	@ 0x44
 800766a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800766e:	460b      	mov	r3, r1
 8007670:	4313      	orrs	r3, r2
 8007672:	d00e      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x117a>
 8007674:	4b86      	ldr	r3, [pc, #536]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	4a85      	ldr	r2, [pc, #532]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800767a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800767e:	6113      	str	r3, [r2, #16]
 8007680:	4b83      	ldr	r3, [pc, #524]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007682:	6919      	ldr	r1, [r3, #16]
 8007684:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007688:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800768c:	4a80      	ldr	r2, [pc, #512]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800768e:	430b      	orrs	r3, r1
 8007690:	6113      	str	r3, [r2, #16]
 8007692:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800769e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076a0:	2300      	movs	r3, #0
 80076a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076a4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80076a8:	460b      	mov	r3, r1
 80076aa:	4313      	orrs	r3, r2
 80076ac:	d009      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
 80076ae:	4b78      	ldr	r3, [pc, #480]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076b2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80076b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076bc:	4a74      	ldr	r2, [pc, #464]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076be:	430b      	orrs	r3, r1
 80076c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80076ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80076d0:	2300      	movs	r3, #0
 80076d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80076d4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80076d8:	460b      	mov	r3, r1
 80076da:	4313      	orrs	r3, r2
 80076dc:	d00a      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
 80076de:	4b6c      	ldr	r3, [pc, #432]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076e2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80076e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076ee:	4a68      	ldr	r2, [pc, #416]	@ (8007890 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076f0:	430b      	orrs	r3, r1
 80076f2:	6553      	str	r3, [r2, #84]	@ 0x54
 80076f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	2100      	movs	r1, #0
 80076fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007706:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800770a:	460b      	mov	r3, r1
 800770c:	4313      	orrs	r3, r2
 800770e:	d011      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x121c>
 8007710:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007714:	3308      	adds	r3, #8
 8007716:	2100      	movs	r1, #0
 8007718:	4618      	mov	r0, r3
 800771a:	f001 f9a3 	bl	8008a64 <RCCEx_PLL2_Config>
 800771e:	4603      	mov	r3, r0
 8007720:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8007724:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007728:	2b00      	cmp	r3, #0
 800772a:	d003      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x121c>
 800772c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007730:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8007734:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773c:	2100      	movs	r1, #0
 800773e:	6239      	str	r1, [r7, #32]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	627b      	str	r3, [r7, #36]	@ 0x24
 8007746:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800774a:	460b      	mov	r3, r1
 800774c:	4313      	orrs	r3, r2
 800774e:	d011      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8007750:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007754:	3308      	adds	r3, #8
 8007756:	2101      	movs	r1, #1
 8007758:	4618      	mov	r0, r3
 800775a:	f001 f983 	bl	8008a64 <RCCEx_PLL2_Config>
 800775e:	4603      	mov	r3, r0
 8007760:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8007764:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800776c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007770:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8007774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777c:	2100      	movs	r1, #0
 800777e:	61b9      	str	r1, [r7, #24]
 8007780:	f003 0304 	and.w	r3, r3, #4
 8007784:	61fb      	str	r3, [r7, #28]
 8007786:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800778a:	460b      	mov	r3, r1
 800778c:	4313      	orrs	r3, r2
 800778e:	d011      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
 8007790:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007794:	3308      	adds	r3, #8
 8007796:	2102      	movs	r1, #2
 8007798:	4618      	mov	r0, r3
 800779a:	f001 f963 	bl	8008a64 <RCCEx_PLL2_Config>
 800779e:	4603      	mov	r3, r0
 80077a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80077a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d003      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
 80077ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80077b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	2100      	movs	r1, #0
 80077be:	6139      	str	r1, [r7, #16]
 80077c0:	f003 0308 	and.w	r3, r3, #8
 80077c4:	617b      	str	r3, [r7, #20]
 80077c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80077ca:	460b      	mov	r3, r1
 80077cc:	4313      	orrs	r3, r2
 80077ce:	d011      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
 80077d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077d4:	3328      	adds	r3, #40	@ 0x28
 80077d6:	2100      	movs	r1, #0
 80077d8:	4618      	mov	r0, r3
 80077da:	f001 f9f5 	bl	8008bc8 <RCCEx_PLL3_Config>
 80077de:	4603      	mov	r3, r0
 80077e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80077e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
 80077ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80077f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fc:	2100      	movs	r1, #0
 80077fe:	60b9      	str	r1, [r7, #8]
 8007800:	f003 0310 	and.w	r3, r3, #16
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800780a:	460b      	mov	r3, r1
 800780c:	4313      	orrs	r3, r2
 800780e:	d011      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x131c>
 8007810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007814:	3328      	adds	r3, #40	@ 0x28
 8007816:	2101      	movs	r1, #1
 8007818:	4618      	mov	r0, r3
 800781a:	f001 f9d5 	bl	8008bc8 <RCCEx_PLL3_Config>
 800781e:	4603      	mov	r3, r0
 8007820:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8007824:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x131c>
 800782c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007830:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8007834:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	2100      	movs	r1, #0
 800783e:	6039      	str	r1, [r7, #0]
 8007840:	f003 0320 	and.w	r3, r3, #32
 8007844:	607b      	str	r3, [r7, #4]
 8007846:	e9d7 1200 	ldrd	r1, r2, [r7]
 800784a:	460b      	mov	r3, r1
 800784c:	4313      	orrs	r3, r2
 800784e:	d011      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x135c>
 8007850:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007854:	3328      	adds	r3, #40	@ 0x28
 8007856:	2102      	movs	r1, #2
 8007858:	4618      	mov	r0, r3
 800785a:	f001 f9b5 	bl	8008bc8 <RCCEx_PLL3_Config>
 800785e:	4603      	mov	r3, r0
 8007860:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8007864:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x135c>
 800786c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007870:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8007874:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x1368>
 800787c:	2300      	movs	r3, #0
 800787e:	e000      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x136a>
 8007880:	2301      	movs	r3, #1
 8007882:	4618      	mov	r0, r3
 8007884:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8007888:	46bd      	mov	sp, r7
 800788a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800788e:	bf00      	nop
 8007890:	58024400 	.word	0x58024400

08007894 <HAL_RCCEx_GetPeriphCLKFreq>:
 8007894:	b580      	push	{r7, lr}
 8007896:	b090      	sub	sp, #64	@ 0x40
 8007898:	af00      	add	r7, sp, #0
 800789a:	e9c7 0100 	strd	r0, r1, [r7]
 800789e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078a2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80078a6:	430b      	orrs	r3, r1
 80078a8:	f040 8094 	bne.w	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 80078ac:	4b97      	ldr	r3, [pc, #604]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80078ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	f200 8087 	bhi.w	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80078be:	a201      	add	r2, pc, #4	@ (adr r2, 80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80078c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c4:	080078d9 	.word	0x080078d9
 80078c8:	08007901 	.word	0x08007901
 80078cc:	08007929 	.word	0x08007929
 80078d0:	080079c5 	.word	0x080079c5
 80078d4:	08007951 	.word	0x08007951
 80078d8:	4b8c      	ldr	r3, [pc, #560]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078e4:	d108      	bne.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80078e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078ea:	4618      	mov	r0, r3
 80078ec:	f000 ff68 	bl	80087c0 <HAL_RCCEx_GetPLL1ClockFreq>
 80078f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078f4:	f000 bc97 	b.w	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80078f8:	2300      	movs	r3, #0
 80078fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078fc:	f000 bc93 	b.w	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007900:	4b82      	ldr	r3, [pc, #520]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007908:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800790c:	d108      	bne.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 800790e:	f107 0318 	add.w	r3, r7, #24
 8007912:	4618      	mov	r0, r3
 8007914:	f000 fcac 	bl	8008270 <HAL_RCCEx_GetPLL2ClockFreq>
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800791c:	f000 bc83 	b.w	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007920:	2300      	movs	r3, #0
 8007922:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007924:	f000 bc7f 	b.w	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007928:	4b78      	ldr	r3, [pc, #480]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007930:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007934:	d108      	bne.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8007936:	f107 030c 	add.w	r3, r7, #12
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fdec 	bl	8008518 <HAL_RCCEx_GetPLL3ClockFreq>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007944:	f000 bc6f 	b.w	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007948:	2300      	movs	r3, #0
 800794a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800794c:	f000 bc6b 	b.w	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007950:	4b6e      	ldr	r3, [pc, #440]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007954:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007958:	637b      	str	r3, [r7, #52]	@ 0x34
 800795a:	4b6c      	ldr	r3, [pc, #432]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0304 	and.w	r3, r3, #4
 8007962:	2b04      	cmp	r3, #4
 8007964:	d10c      	bne.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007968:	2b00      	cmp	r3, #0
 800796a:	d109      	bne.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800796c:	4b67      	ldr	r3, [pc, #412]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	08db      	lsrs	r3, r3, #3
 8007972:	f003 0303 	and.w	r3, r3, #3
 8007976:	4a66      	ldr	r2, [pc, #408]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007978:	fa22 f303 	lsr.w	r3, r2, r3
 800797c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800797e:	e01f      	b.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007980:	4b62      	ldr	r3, [pc, #392]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800798c:	d106      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800798e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007990:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007994:	d102      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007996:	4b5f      	ldr	r3, [pc, #380]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007998:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800799a:	e011      	b.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800799c:	4b5b      	ldr	r3, [pc, #364]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079a8:	d106      	bne.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80079aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079b0:	d102      	bne.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80079b2:	4b59      	ldr	r3, [pc, #356]	@ (8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80079b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079b6:	e003      	b.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80079b8:	2300      	movs	r3, #0
 80079ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079bc:	f000 bc33 	b.w	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80079c0:	f000 bc31 	b.w	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80079c4:	4b55      	ldr	r3, [pc, #340]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079c8:	f000 bc2d 	b.w	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80079cc:	2300      	movs	r3, #0
 80079ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079d0:	f000 bc29 	b.w	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80079d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079d8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80079dc:	430b      	orrs	r3, r1
 80079de:	f040 809f 	bne.w	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
 80079e2:	4b4a      	ldr	r3, [pc, #296]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80079e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079e6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80079ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80079ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079f2:	d04d      	beq.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80079f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079fa:	f200 8084 	bhi.w	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80079fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a00:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a02:	d07d      	beq.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8007a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a06:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a08:	d87d      	bhi.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0c:	2b80      	cmp	r3, #128	@ 0x80
 8007a0e:	d02d      	beq.n	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8007a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a12:	2b80      	cmp	r3, #128	@ 0x80
 8007a14:	d877      	bhi.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d003      	beq.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1e:	2b40      	cmp	r3, #64	@ 0x40
 8007a20:	d012      	beq.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007a22:	e070      	b.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007a24:	4b39      	ldr	r3, [pc, #228]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a30:	d107      	bne.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8007a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 fec2 	bl	80087c0 <HAL_RCCEx_GetPLL1ClockFreq>
 8007a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a40:	e3f1      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007a42:	2300      	movs	r3, #0
 8007a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a46:	e3ee      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007a48:	4b30      	ldr	r3, [pc, #192]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a54:	d107      	bne.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 8007a56:	f107 0318 	add.w	r3, r7, #24
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 fc08 	bl	8008270 <HAL_RCCEx_GetPLL2ClockFreq>
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a64:	e3df      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007a66:	2300      	movs	r3, #0
 8007a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a6a:	e3dc      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007a6c:	4b27      	ldr	r3, [pc, #156]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a78:	d107      	bne.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
 8007a7a:	f107 030c 	add.w	r3, r7, #12
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 fd4a 	bl	8008518 <HAL_RCCEx_GetPLL3ClockFreq>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a88:	e3cd      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a8e:	e3ca      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007a90:	4b1e      	ldr	r3, [pc, #120]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0304 	and.w	r3, r3, #4
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	d10c      	bne.n	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8007aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d109      	bne.n	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8007aac:	4b17      	ldr	r3, [pc, #92]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	08db      	lsrs	r3, r3, #3
 8007ab2:	f003 0303 	and.w	r3, r3, #3
 8007ab6:	4a16      	ldr	r2, [pc, #88]	@ (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8007abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007abe:	e01e      	b.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007ac0:	4b12      	ldr	r3, [pc, #72]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007acc:	d106      	bne.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8007ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ad0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ad4:	d102      	bne.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8007ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ada:	e010      	b.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007adc:	4b0b      	ldr	r3, [pc, #44]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ae4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ae8:	d106      	bne.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007af0:	d102      	bne.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007af2:	4b09      	ldr	r3, [pc, #36]	@ (8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007af6:	e002      	b.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007af8:	2300      	movs	r3, #0
 8007afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007afc:	e393      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007afe:	e392      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007b00:	4b06      	ldr	r3, [pc, #24]	@ (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b04:	e38f      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007b06:	2300      	movs	r3, #0
 8007b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b0a:	e38c      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007b0c:	58024400 	.word	0x58024400
 8007b10:	03d09000 	.word	0x03d09000
 8007b14:	003d0900 	.word	0x003d0900
 8007b18:	017d7840 	.word	0x017d7840
 8007b1c:	00bb8000 	.word	0x00bb8000
 8007b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b24:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	f040 809c 	bne.w	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8007b2e:	4b9e      	ldr	r3, [pc, #632]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b32:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007b36:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b3e:	d054      	beq.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8007b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b46:	f200 808b 	bhi.w	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007b50:	f000 8083 	beq.w	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8007b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b56:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007b5a:	f200 8081 	bhi.w	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b64:	d02f      	beq.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b6c:	d878      	bhi.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d004      	beq.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8007b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b7a:	d012      	beq.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8007b7c:	e070      	b.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007b7e:	4b8a      	ldr	r3, [pc, #552]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b8a:	d107      	bne.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007b8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 fe15 	bl	80087c0 <HAL_RCCEx_GetPLL1ClockFreq>
 8007b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b9a:	e344      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ba0:	e341      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007ba2:	4b81      	ldr	r3, [pc, #516]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007baa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bae:	d107      	bne.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8007bb0:	f107 0318 	add.w	r3, r7, #24
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 fb5b 	bl	8008270 <HAL_RCCEx_GetPLL2ClockFreq>
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bbe:	e332      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bc4:	e32f      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007bc6:	4b78      	ldr	r3, [pc, #480]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bd2:	d107      	bne.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8007bd4:	f107 030c 	add.w	r3, r7, #12
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f000 fc9d 	bl	8008518 <HAL_RCCEx_GetPLL3ClockFreq>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007be2:	e320      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007be4:	2300      	movs	r3, #0
 8007be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007be8:	e31d      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007bea:	4b6f      	ldr	r3, [pc, #444]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bf4:	4b6c      	ldr	r3, [pc, #432]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0304 	and.w	r3, r3, #4
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	d10c      	bne.n	8007c1a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8007c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d109      	bne.n	8007c1a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8007c06:	4b68      	ldr	r3, [pc, #416]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	08db      	lsrs	r3, r3, #3
 8007c0c:	f003 0303 	and.w	r3, r3, #3
 8007c10:	4a66      	ldr	r2, [pc, #408]	@ (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8007c12:	fa22 f303 	lsr.w	r3, r2, r3
 8007c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c18:	e01e      	b.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
 8007c1a:	4b63      	ldr	r3, [pc, #396]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c26:	d106      	bne.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c2e:	d102      	bne.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007c30:	4b5f      	ldr	r3, [pc, #380]	@ (8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8007c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c34:	e010      	b.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
 8007c36:	4b5c      	ldr	r3, [pc, #368]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c42:	d106      	bne.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c4a:	d102      	bne.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007c4c:	4b59      	ldr	r3, [pc, #356]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8007c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c50:	e002      	b.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
 8007c52:	2300      	movs	r3, #0
 8007c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c56:	e2e6      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007c58:	e2e5      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007c5a:	4b57      	ldr	r3, [pc, #348]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c5e:	e2e2      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007c60:	2300      	movs	r3, #0
 8007c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c64:	e2df      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c6a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007c6e:	430b      	orrs	r3, r1
 8007c70:	f040 80a7 	bne.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8007c74:	4b4c      	ldr	r3, [pc, #304]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c78:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c84:	d055      	beq.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8007c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c8c:	f200 8096 	bhi.w	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8007c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c96:	f000 8084 	beq.w	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8007c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ca0:	f200 808c 	bhi.w	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007caa:	d030      	beq.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8007cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cb2:	f200 8083 	bhi.w	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d004      	beq.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cc2:	d012      	beq.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8007cc4:	e07a      	b.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8007cc6:	4b38      	ldr	r3, [pc, #224]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cd2:	d107      	bne.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8007cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 fd71 	bl	80087c0 <HAL_RCCEx_GetPLL1ClockFreq>
 8007cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ce2:	e2a0      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ce8:	e29d      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007cea:	4b2f      	ldr	r3, [pc, #188]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cf2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cf6:	d107      	bne.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
 8007cf8:	f107 0318 	add.w	r3, r7, #24
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 fab7 	bl	8008270 <HAL_RCCEx_GetPLL2ClockFreq>
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d06:	e28e      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d0c:	e28b      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007d0e:	4b26      	ldr	r3, [pc, #152]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d1a:	d107      	bne.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x498>
 8007d1c:	f107 030c 	add.w	r3, r7, #12
 8007d20:	4618      	mov	r0, r3
 8007d22:	f000 fbf9 	bl	8008518 <HAL_RCCEx_GetPLL3ClockFreq>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d2a:	e27c      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d30:	e279      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007d32:	4b1d      	ldr	r3, [pc, #116]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0304 	and.w	r3, r3, #4
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	d10c      	bne.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8007d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d109      	bne.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8007d4e:	4b16      	ldr	r3, [pc, #88]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	08db      	lsrs	r3, r3, #3
 8007d54:	f003 0303 	and.w	r3, r3, #3
 8007d58:	4a14      	ldr	r2, [pc, #80]	@ (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8007d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d60:	e01e      	b.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8007d62:	4b11      	ldr	r3, [pc, #68]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d6e:	d106      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d76:	d102      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007d78:	4b0d      	ldr	r3, [pc, #52]	@ (8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8007d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d7c:	e010      	b.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8007d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d8a:	d106      	bne.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d92:	d102      	bne.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007d94:	4b07      	ldr	r3, [pc, #28]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8007d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d98:	e002      	b.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d9e:	e242      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007da0:	e241      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007da2:	4b05      	ldr	r3, [pc, #20]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007da6:	e23e      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007da8:	58024400 	.word	0x58024400
 8007dac:	03d09000 	.word	0x03d09000
 8007db0:	003d0900 	.word	0x003d0900
 8007db4:	017d7840 	.word	0x017d7840
 8007db8:	00bb8000 	.word	0x00bb8000
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dc0:	e231      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007dc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dc6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007dca:	430b      	orrs	r3, r1
 8007dcc:	f040 8085 	bne.w	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 8007dd0:	4b9c      	ldr	r3, [pc, #624]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dd4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ddc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007de0:	d06b      	beq.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007de8:	d874      	bhi.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007df0:	d056      	beq.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8007df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007df8:	d86c      	bhi.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e00:	d03b      	beq.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8007e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e08:	d864      	bhi.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e10:	d021      	beq.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8007e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e18:	d85c      	bhi.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d004      	beq.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8007e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e26:	d004      	beq.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8007e28:	e054      	b.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007e2a:	f7fe fb5f 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 8007e2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8007e30:	e1f9      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007e32:	4b84      	ldr	r3, [pc, #528]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e3e:	d107      	bne.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 8007e40:	f107 0318 	add.w	r3, r7, #24
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 fa13 	bl	8008270 <HAL_RCCEx_GetPLL2ClockFreq>
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e4e:	e1ea      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007e50:	2300      	movs	r3, #0
 8007e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e54:	e1e7      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007e56:	4b7b      	ldr	r3, [pc, #492]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e62:	d107      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
 8007e64:	f107 030c 	add.w	r3, r7, #12
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f000 fb55 	bl	8008518 <HAL_RCCEx_GetPLL3ClockFreq>
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e72:	e1d8      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007e74:	2300      	movs	r3, #0
 8007e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e78:	e1d5      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007e7a:	4b72      	ldr	r3, [pc, #456]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0304 	and.w	r3, r3, #4
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	d109      	bne.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8007e86:	4b6f      	ldr	r3, [pc, #444]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	08db      	lsrs	r3, r3, #3
 8007e8c:	f003 0303 	and.w	r3, r3, #3
 8007e90:	4a6d      	ldr	r2, [pc, #436]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007e92:	fa22 f303 	lsr.w	r3, r2, r3
 8007e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e98:	e1c5      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e9e:	e1c2      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007ea0:	4b68      	ldr	r3, [pc, #416]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ea8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eac:	d102      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8007eae:	4b67      	ldr	r3, [pc, #412]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007eb2:	e1b8      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007eb8:	e1b5      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007eba:	4b62      	ldr	r3, [pc, #392]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ec2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ec6:	d102      	bne.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
 8007ec8:	4b61      	ldr	r3, [pc, #388]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8007eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ecc:	e1ab      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ed2:	e1a8      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ed8:	e1a5      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007eda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ede:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007ee2:	430b      	orrs	r3, r1
 8007ee4:	d173      	bne.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8007ee6:	4b57      	ldr	r3, [pc, #348]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007eee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ef6:	d02f      	beq.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007efe:	d863      	bhi.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d004      	beq.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f0c:	d012      	beq.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8007f0e:	e05b      	b.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007f10:	4b4c      	ldr	r3, [pc, #304]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f1c:	d107      	bne.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 8007f1e:	f107 0318 	add.w	r3, r7, #24
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 f9a4 	bl	8008270 <HAL_RCCEx_GetPLL2ClockFreq>
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f2c:	e17b      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f32:	e178      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007f34:	4b43      	ldr	r3, [pc, #268]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f40:	d107      	bne.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
 8007f42:	f107 030c 	add.w	r3, r7, #12
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 fae6 	bl	8008518 <HAL_RCCEx_GetPLL3ClockFreq>
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f50:	e169      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007f52:	2300      	movs	r3, #0
 8007f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f56:	e166      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007f58:	4b3a      	ldr	r3, [pc, #232]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f62:	4b38      	ldr	r3, [pc, #224]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0304 	and.w	r3, r3, #4
 8007f6a:	2b04      	cmp	r3, #4
 8007f6c:	d10c      	bne.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8007f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d109      	bne.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8007f74:	4b33      	ldr	r3, [pc, #204]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	08db      	lsrs	r3, r3, #3
 8007f7a:	f003 0303 	and.w	r3, r3, #3
 8007f7e:	4a32      	ldr	r2, [pc, #200]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007f80:	fa22 f303 	lsr.w	r3, r2, r3
 8007f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f86:	e01e      	b.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8007f88:	4b2e      	ldr	r3, [pc, #184]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f94:	d106      	bne.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8007f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f9c:	d102      	bne.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8007f9e:	4b2b      	ldr	r3, [pc, #172]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fa2:	e010      	b.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8007fa4:	4b27      	ldr	r3, [pc, #156]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fb0:	d106      	bne.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8007fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fb8:	d102      	bne.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8007fba:	4b25      	ldr	r3, [pc, #148]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8007fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fbe:	e002      	b.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fc4:	e12f      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007fc6:	e12e      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fcc:	e12b      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007fce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fd2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007fd6:	430b      	orrs	r3, r1
 8007fd8:	d13c      	bne.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
 8007fda:	4b1a      	ldr	r3, [pc, #104]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d004      	beq.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8007fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ff0:	d012      	beq.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8007ff2:	e023      	b.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8007ff4:	4b13      	ldr	r3, [pc, #76]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ffc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008000:	d107      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8008002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008006:	4618      	mov	r0, r3
 8008008:	f000 fbda 	bl	80087c0 <HAL_RCCEx_GetPLL1ClockFreq>
 800800c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008010:	e109      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008012:	2300      	movs	r3, #0
 8008014:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008016:	e106      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008018:	4b0a      	ldr	r3, [pc, #40]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008020:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008024:	d107      	bne.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008026:	f107 0318 	add.w	r3, r7, #24
 800802a:	4618      	mov	r0, r3
 800802c:	f000 f920 	bl	8008270 <HAL_RCCEx_GetPLL2ClockFreq>
 8008030:	6a3b      	ldr	r3, [r7, #32]
 8008032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008034:	e0f7      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008036:	2300      	movs	r3, #0
 8008038:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800803a:	e0f4      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800803c:	2300      	movs	r3, #0
 800803e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008040:	e0f1      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008042:	bf00      	nop
 8008044:	58024400 	.word	0x58024400
 8008048:	03d09000 	.word	0x03d09000
 800804c:	003d0900 	.word	0x003d0900
 8008050:	017d7840 	.word	0x017d7840
 8008054:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008058:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800805c:	430b      	orrs	r3, r1
 800805e:	f040 8091 	bne.w	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
 8008062:	4b73      	ldr	r3, [pc, #460]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008066:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800806a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800806c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008072:	f000 8081 	beq.w	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008078:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800807c:	d87f      	bhi.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800807e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008080:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008084:	d06b      	beq.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8008086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008088:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800808c:	d877      	bhi.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800808e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008094:	d056      	beq.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8008096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800809c:	d86f      	bhi.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800809e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80080a4:	d03b      	beq.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80080a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80080ac:	d867      	bhi.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80080ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080b4:	d021      	beq.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80080b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080bc:	d85f      	bhi.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80080be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d004      	beq.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80080c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080ca:	d004      	beq.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80080cc:	e057      	b.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80080ce:	f000 f8b9 	bl	8008244 <HAL_RCCEx_GetD3PCLK1Freq>
 80080d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80080d4:	e0a7      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80080d6:	4b56      	ldr	r3, [pc, #344]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080e2:	d107      	bne.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 80080e4:	f107 0318 	add.w	r3, r7, #24
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 f8c1 	bl	8008270 <HAL_RCCEx_GetPLL2ClockFreq>
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080f2:	e098      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80080f4:	2300      	movs	r3, #0
 80080f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080f8:	e095      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80080fa:	4b4d      	ldr	r3, [pc, #308]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008106:	d107      	bne.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 8008108:	f107 030c 	add.w	r3, r7, #12
 800810c:	4618      	mov	r0, r3
 800810e:	f000 fa03 	bl	8008518 <HAL_RCCEx_GetPLL3ClockFreq>
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008116:	e086      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008118:	2300      	movs	r3, #0
 800811a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800811c:	e083      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800811e:	4b44      	ldr	r3, [pc, #272]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0304 	and.w	r3, r3, #4
 8008126:	2b04      	cmp	r3, #4
 8008128:	d109      	bne.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800812a:	4b41      	ldr	r3, [pc, #260]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	08db      	lsrs	r3, r3, #3
 8008130:	f003 0303 	and.w	r3, r3, #3
 8008134:	4a3f      	ldr	r2, [pc, #252]	@ (8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008136:	fa22 f303 	lsr.w	r3, r2, r3
 800813a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800813c:	e073      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800813e:	2300      	movs	r3, #0
 8008140:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008142:	e070      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008144:	4b3a      	ldr	r3, [pc, #232]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800814c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008150:	d102      	bne.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
 8008152:	4b39      	ldr	r3, [pc, #228]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8008154:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008156:	e066      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008158:	2300      	movs	r3, #0
 800815a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800815c:	e063      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800815e:	4b34      	ldr	r3, [pc, #208]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008166:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800816a:	d102      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800816c:	4b33      	ldr	r3, [pc, #204]	@ (800823c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800816e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008170:	e059      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008172:	2300      	movs	r3, #0
 8008174:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008176:	e056      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008178:	4b31      	ldr	r3, [pc, #196]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800817a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800817c:	e053      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800817e:	2300      	movs	r3, #0
 8008180:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008182:	e050      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008184:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008188:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800818c:	430b      	orrs	r3, r1
 800818e:	d148      	bne.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8008190:	4b27      	ldr	r3, [pc, #156]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008194:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008198:	63bb      	str	r3, [r7, #56]	@ 0x38
 800819a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800819c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081a0:	d02a      	beq.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80081a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081a8:	d838      	bhi.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80081aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d004      	beq.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80081b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081b6:	d00d      	beq.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80081b8:	e030      	b.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80081ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081c6:	d102      	bne.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 80081c8:	4b1c      	ldr	r3, [pc, #112]	@ (800823c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80081ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081cc:	e02b      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80081ce:	2300      	movs	r3, #0
 80081d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081d2:	e028      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80081d4:	4b16      	ldr	r3, [pc, #88]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081e0:	d107      	bne.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 80081e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 faea 	bl	80087c0 <HAL_RCCEx_GetPLL1ClockFreq>
 80081ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081f0:	e019      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80081f2:	2300      	movs	r3, #0
 80081f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081f6:	e016      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80081f8:	4b0d      	ldr	r3, [pc, #52]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008200:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008204:	d107      	bne.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 8008206:	f107 0318 	add.w	r3, r7, #24
 800820a:	4618      	mov	r0, r3
 800820c:	f000 f830 	bl	8008270 <HAL_RCCEx_GetPLL2ClockFreq>
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008214:	e007      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008216:	2300      	movs	r3, #0
 8008218:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800821a:	e004      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800821c:	2300      	movs	r3, #0
 800821e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008220:	e001      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008222:	2300      	movs	r3, #0
 8008224:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008228:	4618      	mov	r0, r3
 800822a:	3740      	adds	r7, #64	@ 0x40
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	58024400 	.word	0x58024400
 8008234:	03d09000 	.word	0x03d09000
 8008238:	003d0900 	.word	0x003d0900
 800823c:	017d7840 	.word	0x017d7840
 8008240:	00bb8000 	.word	0x00bb8000

08008244 <HAL_RCCEx_GetD3PCLK1Freq>:
 8008244:	b580      	push	{r7, lr}
 8008246:	af00      	add	r7, sp, #0
 8008248:	f7fe f920 	bl	800648c <HAL_RCC_GetHCLKFreq>
 800824c:	4602      	mov	r2, r0
 800824e:	4b06      	ldr	r3, [pc, #24]	@ (8008268 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	091b      	lsrs	r3, r3, #4
 8008254:	f003 0307 	and.w	r3, r3, #7
 8008258:	4904      	ldr	r1, [pc, #16]	@ (800826c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800825a:	5ccb      	ldrb	r3, [r1, r3]
 800825c:	f003 031f 	and.w	r3, r3, #31
 8008260:	fa22 f303 	lsr.w	r3, r2, r3
 8008264:	4618      	mov	r0, r3
 8008266:	bd80      	pop	{r7, pc}
 8008268:	58024400 	.word	0x58024400
 800826c:	0800ef94 	.word	0x0800ef94

08008270 <HAL_RCCEx_GetPLL2ClockFreq>:
 8008270:	b480      	push	{r7}
 8008272:	b089      	sub	sp, #36	@ 0x24
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	4ba1      	ldr	r3, [pc, #644]	@ (8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800827a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800827c:	f003 0303 	and.w	r3, r3, #3
 8008280:	61bb      	str	r3, [r7, #24]
 8008282:	4b9f      	ldr	r3, [pc, #636]	@ (8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008286:	0b1b      	lsrs	r3, r3, #12
 8008288:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800828c:	617b      	str	r3, [r7, #20]
 800828e:	4b9c      	ldr	r3, [pc, #624]	@ (8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008292:	091b      	lsrs	r3, r3, #4
 8008294:	f003 0301 	and.w	r3, r3, #1
 8008298:	613b      	str	r3, [r7, #16]
 800829a:	4b99      	ldr	r3, [pc, #612]	@ (8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800829c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800829e:	08db      	lsrs	r3, r3, #3
 80082a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	fb02 f303 	mul.w	r3, r2, r3
 80082aa:	ee07 3a90 	vmov	s15, r3
 80082ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b2:	edc7 7a03 	vstr	s15, [r7, #12]
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 8111 	beq.w	80084e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	f000 8083 	beq.w	80083cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	f200 80a1 	bhi.w	8008410 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d003      	beq.n	80082dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d056      	beq.n	8008388 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80082da:	e099      	b.n	8008410 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80082dc:	4b88      	ldr	r3, [pc, #544]	@ (8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0320 	and.w	r3, r3, #32
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d02d      	beq.n	8008344 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
 80082e8:	4b85      	ldr	r3, [pc, #532]	@ (8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	08db      	lsrs	r3, r3, #3
 80082ee:	f003 0303 	and.w	r3, r3, #3
 80082f2:	4a84      	ldr	r2, [pc, #528]	@ (8008504 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80082f4:	fa22 f303 	lsr.w	r3, r2, r3
 80082f8:	60bb      	str	r3, [r7, #8]
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	ee07 3a90 	vmov	s15, r3
 8008300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	ee07 3a90 	vmov	s15, r3
 800830a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008312:	4b7b      	ldr	r3, [pc, #492]	@ (8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831a:	ee07 3a90 	vmov	s15, r3
 800831e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008322:	ed97 6a03 	vldr	s12, [r7, #12]
 8008326:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008508 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800832a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800832e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008332:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800833a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800833e:	edc7 7a07 	vstr	s15, [r7, #28]
 8008342:	e087      	b.n	8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800834e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800850c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008356:	4b6a      	ldr	r3, [pc, #424]	@ (8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800835a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800835e:	ee07 3a90 	vmov	s15, r3
 8008362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008366:	ed97 6a03 	vldr	s12, [r7, #12]
 800836a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008508 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800836e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800837a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800837e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008382:	edc7 7a07 	vstr	s15, [r7, #28]
 8008386:	e065      	b.n	8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	ee07 3a90 	vmov	s15, r3
 800838e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008392:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008510 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800839a:	4b59      	ldr	r3, [pc, #356]	@ (8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800839c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800839e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a2:	ee07 3a90 	vmov	s15, r3
 80083a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008508 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083c6:	edc7 7a07 	vstr	s15, [r7, #28]
 80083ca:	e043      	b.n	8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	ee07 3a90 	vmov	s15, r3
 80083d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008514 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80083da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083de:	4b48      	ldr	r3, [pc, #288]	@ (8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e6:	ee07 3a90 	vmov	s15, r3
 80083ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80083f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008508 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800840a:	edc7 7a07 	vstr	s15, [r7, #28]
 800840e:	e021      	b.n	8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	ee07 3a90 	vmov	s15, r3
 8008416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800841a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008510 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800841e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008422:	4b37      	ldr	r3, [pc, #220]	@ (8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800842a:	ee07 3a90 	vmov	s15, r3
 800842e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008432:	ed97 6a03 	vldr	s12, [r7, #12]
 8008436:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008508 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800843a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800843e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800844a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800844e:	edc7 7a07 	vstr	s15, [r7, #28]
 8008452:	bf00      	nop
 8008454:	4b2a      	ldr	r3, [pc, #168]	@ (8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008458:	0a5b      	lsrs	r3, r3, #9
 800845a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800845e:	ee07 3a90 	vmov	s15, r3
 8008462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008466:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800846a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800846e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800847a:	ee17 2a90 	vmov	r2, s15
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	601a      	str	r2, [r3, #0]
 8008482:	4b1f      	ldr	r3, [pc, #124]	@ (8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008486:	0c1b      	lsrs	r3, r3, #16
 8008488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800848c:	ee07 3a90 	vmov	s15, r3
 8008490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008494:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008498:	ee37 7a87 	vadd.f32	s14, s15, s14
 800849c:	edd7 6a07 	vldr	s13, [r7, #28]
 80084a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084a8:	ee17 2a90 	vmov	r2, s15
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	605a      	str	r2, [r3, #4]
 80084b0:	4b13      	ldr	r3, [pc, #76]	@ (8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b4:	0e1b      	lsrs	r3, r3, #24
 80084b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084ba:	ee07 3a90 	vmov	s15, r3
 80084be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80084ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084d6:	ee17 2a90 	vmov	r2, s15
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	609a      	str	r2, [r3, #8]
 80084de:	e008      	b.n	80084f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	601a      	str	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	605a      	str	r2, [r3, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	609a      	str	r2, [r3, #8]
 80084f2:	bf00      	nop
 80084f4:	3724      	adds	r7, #36	@ 0x24
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	58024400 	.word	0x58024400
 8008504:	03d09000 	.word	0x03d09000
 8008508:	46000000 	.word	0x46000000
 800850c:	4c742400 	.word	0x4c742400
 8008510:	4a742400 	.word	0x4a742400
 8008514:	4bbebc20 	.word	0x4bbebc20

08008518 <HAL_RCCEx_GetPLL3ClockFreq>:
 8008518:	b480      	push	{r7}
 800851a:	b089      	sub	sp, #36	@ 0x24
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	4ba1      	ldr	r3, [pc, #644]	@ (80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008524:	f003 0303 	and.w	r3, r3, #3
 8008528:	61bb      	str	r3, [r7, #24]
 800852a:	4b9f      	ldr	r3, [pc, #636]	@ (80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800852c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852e:	0d1b      	lsrs	r3, r3, #20
 8008530:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008534:	617b      	str	r3, [r7, #20]
 8008536:	4b9c      	ldr	r3, [pc, #624]	@ (80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853a:	0a1b      	lsrs	r3, r3, #8
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	613b      	str	r3, [r7, #16]
 8008542:	4b99      	ldr	r3, [pc, #612]	@ (80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008546:	08db      	lsrs	r3, r3, #3
 8008548:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	fb02 f303 	mul.w	r3, r2, r3
 8008552:	ee07 3a90 	vmov	s15, r3
 8008556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855a:	edc7 7a03 	vstr	s15, [r7, #12]
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 8111 	beq.w	8008788 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	2b02      	cmp	r3, #2
 800856a:	f000 8083 	beq.w	8008674 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	2b02      	cmp	r3, #2
 8008572:	f200 80a1 	bhi.w	80086b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d056      	beq.n	8008630 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008582:	e099      	b.n	80086b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008584:	4b88      	ldr	r3, [pc, #544]	@ (80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0320 	and.w	r3, r3, #32
 800858c:	2b00      	cmp	r3, #0
 800858e:	d02d      	beq.n	80085ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
 8008590:	4b85      	ldr	r3, [pc, #532]	@ (80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	08db      	lsrs	r3, r3, #3
 8008596:	f003 0303 	and.w	r3, r3, #3
 800859a:	4a84      	ldr	r2, [pc, #528]	@ (80087ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800859c:	fa22 f303 	lsr.w	r3, r2, r3
 80085a0:	60bb      	str	r3, [r7, #8]
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	ee07 3a90 	vmov	s15, r3
 80085a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	ee07 3a90 	vmov	s15, r3
 80085b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ba:	4b7b      	ldr	r3, [pc, #492]	@ (80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c2:	ee07 3a90 	vmov	s15, r3
 80085c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80087b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085e6:	edc7 7a07 	vstr	s15, [r7, #28]
 80085ea:	e087      	b.n	80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	ee07 3a90 	vmov	s15, r3
 80085f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80085fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085fe:	4b6a      	ldr	r3, [pc, #424]	@ (80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008606:	ee07 3a90 	vmov	s15, r3
 800860a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800860e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008612:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80087b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800861a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800861e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800862a:	edc7 7a07 	vstr	s15, [r7, #28]
 800862e:	e065      	b.n	80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	ee07 3a90 	vmov	s15, r3
 8008636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800863a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80087b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800863e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008642:	4b59      	ldr	r3, [pc, #356]	@ (80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800864a:	ee07 3a90 	vmov	s15, r3
 800864e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008652:	ed97 6a03 	vldr	s12, [r7, #12]
 8008656:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80087b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800865a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800865e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800866a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800866e:	edc7 7a07 	vstr	s15, [r7, #28]
 8008672:	e043      	b.n	80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	ee07 3a90 	vmov	s15, r3
 800867a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80087bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008686:	4b48      	ldr	r3, [pc, #288]	@ (80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800868a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800868e:	ee07 3a90 	vmov	s15, r3
 8008692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008696:	ed97 6a03 	vldr	s12, [r7, #12]
 800869a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80087b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800869e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b2:	edc7 7a07 	vstr	s15, [r7, #28]
 80086b6:	e021      	b.n	80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	ee07 3a90 	vmov	s15, r3
 80086be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80087b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80086c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ca:	4b37      	ldr	r3, [pc, #220]	@ (80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d2:	ee07 3a90 	vmov	s15, r3
 80086d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086da:	ed97 6a03 	vldr	s12, [r7, #12]
 80086de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80087b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086f6:	edc7 7a07 	vstr	s15, [r7, #28]
 80086fa:	bf00      	nop
 80086fc:	4b2a      	ldr	r3, [pc, #168]	@ (80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008700:	0a5b      	lsrs	r3, r3, #9
 8008702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008706:	ee07 3a90 	vmov	s15, r3
 800870a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800870e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008712:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008716:	edd7 6a07 	vldr	s13, [r7, #28]
 800871a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800871e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008722:	ee17 2a90 	vmov	r2, s15
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	601a      	str	r2, [r3, #0]
 800872a:	4b1f      	ldr	r3, [pc, #124]	@ (80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800872c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800872e:	0c1b      	lsrs	r3, r3, #16
 8008730:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008734:	ee07 3a90 	vmov	s15, r3
 8008738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008740:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008744:	edd7 6a07 	vldr	s13, [r7, #28]
 8008748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800874c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008750:	ee17 2a90 	vmov	r2, s15
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	605a      	str	r2, [r3, #4]
 8008758:	4b13      	ldr	r3, [pc, #76]	@ (80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800875a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800875c:	0e1b      	lsrs	r3, r3, #24
 800875e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008762:	ee07 3a90 	vmov	s15, r3
 8008766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800876a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800876e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008772:	edd7 6a07 	vldr	s13, [r7, #28]
 8008776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800877a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800877e:	ee17 2a90 	vmov	r2, s15
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	609a      	str	r2, [r3, #8]
 8008786:	e008      	b.n	800879a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	605a      	str	r2, [r3, #4]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	609a      	str	r2, [r3, #8]
 800879a:	bf00      	nop
 800879c:	3724      	adds	r7, #36	@ 0x24
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	58024400 	.word	0x58024400
 80087ac:	03d09000 	.word	0x03d09000
 80087b0:	46000000 	.word	0x46000000
 80087b4:	4c742400 	.word	0x4c742400
 80087b8:	4a742400 	.word	0x4a742400
 80087bc:	4bbebc20 	.word	0x4bbebc20

080087c0 <HAL_RCCEx_GetPLL1ClockFreq>:
 80087c0:	b480      	push	{r7}
 80087c2:	b089      	sub	sp, #36	@ 0x24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	4ba0      	ldr	r3, [pc, #640]	@ (8008a4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087cc:	f003 0303 	and.w	r3, r3, #3
 80087d0:	61bb      	str	r3, [r7, #24]
 80087d2:	4b9e      	ldr	r3, [pc, #632]	@ (8008a4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d6:	091b      	lsrs	r3, r3, #4
 80087d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087dc:	617b      	str	r3, [r7, #20]
 80087de:	4b9b      	ldr	r3, [pc, #620]	@ (8008a4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	613b      	str	r3, [r7, #16]
 80087e8:	4b98      	ldr	r3, [pc, #608]	@ (8008a4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087ec:	08db      	lsrs	r3, r3, #3
 80087ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087f2:	693a      	ldr	r2, [r7, #16]
 80087f4:	fb02 f303 	mul.w	r3, r2, r3
 80087f8:	ee07 3a90 	vmov	s15, r3
 80087fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008800:	edc7 7a03 	vstr	s15, [r7, #12]
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 8111 	beq.w	8008a2e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	2b02      	cmp	r3, #2
 8008810:	f000 8083 	beq.w	800891a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	2b02      	cmp	r3, #2
 8008818:	f200 80a1 	bhi.w	800895e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d056      	beq.n	80088d6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008828:	e099      	b.n	800895e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800882a:	4b88      	ldr	r3, [pc, #544]	@ (8008a4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0320 	and.w	r3, r3, #32
 8008832:	2b00      	cmp	r3, #0
 8008834:	d02d      	beq.n	8008892 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
 8008836:	4b85      	ldr	r3, [pc, #532]	@ (8008a4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	08db      	lsrs	r3, r3, #3
 800883c:	f003 0303 	and.w	r3, r3, #3
 8008840:	4a83      	ldr	r2, [pc, #524]	@ (8008a50 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008842:	fa22 f303 	lsr.w	r3, r2, r3
 8008846:	60bb      	str	r3, [r7, #8]
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	ee07 3a90 	vmov	s15, r3
 800884e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	ee07 3a90 	vmov	s15, r3
 8008858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008860:	4b7a      	ldr	r3, [pc, #488]	@ (8008a4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008868:	ee07 3a90 	vmov	s15, r3
 800886c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008870:	ed97 6a03 	vldr	s12, [r7, #12]
 8008874:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008a54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008878:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800887c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008880:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888c:	edc7 7a07 	vstr	s15, [r7, #28]
 8008890:	e087      	b.n	80089a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	ee07 3a90 	vmov	s15, r3
 8008898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008a58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80088a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088a4:	4b69      	ldr	r3, [pc, #420]	@ (8008a4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ac:	ee07 3a90 	vmov	s15, r3
 80088b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80088b8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008a54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d0:	edc7 7a07 	vstr	s15, [r7, #28]
 80088d4:	e065      	b.n	80089a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	ee07 3a90 	vmov	s15, r3
 80088dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008a5c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80088e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088e8:	4b58      	ldr	r3, [pc, #352]	@ (8008a4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f0:	ee07 3a90 	vmov	s15, r3
 80088f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80088fc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008a54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008900:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008904:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008908:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800890c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008914:	edc7 7a07 	vstr	s15, [r7, #28]
 8008918:	e043      	b.n	80089a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	ee07 3a90 	vmov	s15, r3
 8008920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008924:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008a60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800892c:	4b47      	ldr	r3, [pc, #284]	@ (8008a4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800892e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008934:	ee07 3a90 	vmov	s15, r3
 8008938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800893c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008940:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008a54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008944:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008948:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800894c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008950:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008958:	edc7 7a07 	vstr	s15, [r7, #28]
 800895c:	e021      	b.n	80089a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	ee07 3a90 	vmov	s15, r3
 8008964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008968:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008a58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800896c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008970:	4b36      	ldr	r3, [pc, #216]	@ (8008a4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008978:	ee07 3a90 	vmov	s15, r3
 800897c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008980:	ed97 6a03 	vldr	s12, [r7, #12]
 8008984:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008a54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008988:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800898c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008990:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008994:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800899c:	edc7 7a07 	vstr	s15, [r7, #28]
 80089a0:	bf00      	nop
 80089a2:	4b2a      	ldr	r3, [pc, #168]	@ (8008a4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089a6:	0a5b      	lsrs	r3, r3, #9
 80089a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089ac:	ee07 3a90 	vmov	s15, r3
 80089b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80089c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089c8:	ee17 2a90 	vmov	r2, s15
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	601a      	str	r2, [r3, #0]
 80089d0:	4b1e      	ldr	r3, [pc, #120]	@ (8008a4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089d4:	0c1b      	lsrs	r3, r3, #16
 80089d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089da:	ee07 3a90 	vmov	s15, r3
 80089de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80089ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089f6:	ee17 2a90 	vmov	r2, s15
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	605a      	str	r2, [r3, #4]
 80089fe:	4b13      	ldr	r3, [pc, #76]	@ (8008a4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a02:	0e1b      	lsrs	r3, r3, #24
 8008a04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a08:	ee07 3a90 	vmov	s15, r3
 8008a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a18:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a24:	ee17 2a90 	vmov	r2, s15
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	609a      	str	r2, [r3, #8]
 8008a2c:	e008      	b.n	8008a40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	605a      	str	r2, [r3, #4]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	609a      	str	r2, [r3, #8]
 8008a40:	bf00      	nop
 8008a42:	3724      	adds	r7, #36	@ 0x24
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr
 8008a4c:	58024400 	.word	0x58024400
 8008a50:	03d09000 	.word	0x03d09000
 8008a54:	46000000 	.word	0x46000000
 8008a58:	4c742400 	.word	0x4c742400
 8008a5c:	4a742400 	.word	0x4a742400
 8008a60:	4bbebc20 	.word	0x4bbebc20

08008a64 <RCCEx_PLL2_Config>:
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	73fb      	strb	r3, [r7, #15]
 8008a72:	4b53      	ldr	r3, [pc, #332]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a76:	f003 0303 	and.w	r3, r3, #3
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d101      	bne.n	8008a82 <RCCEx_PLL2_Config+0x1e>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e099      	b.n	8008bb6 <RCCEx_PLL2_Config+0x152>
 8008a82:	4b4f      	ldr	r3, [pc, #316]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a4e      	ldr	r2, [pc, #312]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008a88:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008a8c:	6013      	str	r3, [r2, #0]
 8008a8e:	f7f9 fd47 	bl	8002520 <HAL_GetTick>
 8008a92:	60b8      	str	r0, [r7, #8]
 8008a94:	e008      	b.n	8008aa8 <RCCEx_PLL2_Config+0x44>
 8008a96:	f7f9 fd43 	bl	8002520 <HAL_GetTick>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d901      	bls.n	8008aa8 <RCCEx_PLL2_Config+0x44>
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e086      	b.n	8008bb6 <RCCEx_PLL2_Config+0x152>
 8008aa8:	4b45      	ldr	r3, [pc, #276]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1f0      	bne.n	8008a96 <RCCEx_PLL2_Config+0x32>
 8008ab4:	4b42      	ldr	r3, [pc, #264]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	031b      	lsls	r3, r3, #12
 8008ac2:	493f      	ldr	r1, [pc, #252]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	628b      	str	r3, [r1, #40]	@ 0x28
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	3b01      	subs	r3, #1
 8008ace:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	025b      	lsls	r3, r3, #9
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	431a      	orrs	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	041b      	lsls	r3, r3, #16
 8008ae6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008aea:	431a      	orrs	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	061b      	lsls	r3, r3, #24
 8008af4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008af8:	4931      	ldr	r1, [pc, #196]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	638b      	str	r3, [r1, #56]	@ 0x38
 8008afe:	4b30      	ldr	r3, [pc, #192]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b02:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	492d      	ldr	r1, [pc, #180]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008b10:	4b2b      	ldr	r3, [pc, #172]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b14:	f023 0220 	bic.w	r2, r3, #32
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	4928      	ldr	r1, [pc, #160]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008b22:	4b27      	ldr	r3, [pc, #156]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b26:	4a26      	ldr	r2, [pc, #152]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008b28:	f023 0310 	bic.w	r3, r3, #16
 8008b2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b2e:	4b24      	ldr	r3, [pc, #144]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008b30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b32:	4b24      	ldr	r3, [pc, #144]	@ (8008bc4 <RCCEx_PLL2_Config+0x160>)
 8008b34:	4013      	ands	r3, r2
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	69d2      	ldr	r2, [r2, #28]
 8008b3a:	00d2      	lsls	r2, r2, #3
 8008b3c:	4920      	ldr	r1, [pc, #128]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	63cb      	str	r3, [r1, #60]	@ 0x3c
 8008b42:	4b1f      	ldr	r3, [pc, #124]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b46:	4a1e      	ldr	r2, [pc, #120]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008b48:	f043 0310 	orr.w	r3, r3, #16
 8008b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d106      	bne.n	8008b62 <RCCEx_PLL2_Config+0xfe>
 8008b54:	4b1a      	ldr	r3, [pc, #104]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b58:	4a19      	ldr	r2, [pc, #100]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008b5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b60:	e00f      	b.n	8008b82 <RCCEx_PLL2_Config+0x11e>
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d106      	bne.n	8008b76 <RCCEx_PLL2_Config+0x112>
 8008b68:	4b15      	ldr	r3, [pc, #84]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6c:	4a14      	ldr	r2, [pc, #80]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008b6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b74:	e005      	b.n	8008b82 <RCCEx_PLL2_Config+0x11e>
 8008b76:	4b12      	ldr	r3, [pc, #72]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b7a:	4a11      	ldr	r2, [pc, #68]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008b7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008b80:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b82:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a0e      	ldr	r2, [pc, #56]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008b88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008b8c:	6013      	str	r3, [r2, #0]
 8008b8e:	f7f9 fcc7 	bl	8002520 <HAL_GetTick>
 8008b92:	60b8      	str	r0, [r7, #8]
 8008b94:	e008      	b.n	8008ba8 <RCCEx_PLL2_Config+0x144>
 8008b96:	f7f9 fcc3 	bl	8002520 <HAL_GetTick>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d901      	bls.n	8008ba8 <RCCEx_PLL2_Config+0x144>
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e006      	b.n	8008bb6 <RCCEx_PLL2_Config+0x152>
 8008ba8:	4b05      	ldr	r3, [pc, #20]	@ (8008bc0 <RCCEx_PLL2_Config+0x15c>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d0f0      	beq.n	8008b96 <RCCEx_PLL2_Config+0x132>
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	58024400 	.word	0x58024400
 8008bc4:	ffff0007 	.word	0xffff0007

08008bc8 <RCCEx_PLL3_Config>:
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	73fb      	strb	r3, [r7, #15]
 8008bd6:	4b53      	ldr	r3, [pc, #332]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bda:	f003 0303 	and.w	r3, r3, #3
 8008bde:	2b03      	cmp	r3, #3
 8008be0:	d101      	bne.n	8008be6 <RCCEx_PLL3_Config+0x1e>
 8008be2:	2301      	movs	r3, #1
 8008be4:	e099      	b.n	8008d1a <RCCEx_PLL3_Config+0x152>
 8008be6:	4b4f      	ldr	r3, [pc, #316]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a4e      	ldr	r2, [pc, #312]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008bec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bf0:	6013      	str	r3, [r2, #0]
 8008bf2:	f7f9 fc95 	bl	8002520 <HAL_GetTick>
 8008bf6:	60b8      	str	r0, [r7, #8]
 8008bf8:	e008      	b.n	8008c0c <RCCEx_PLL3_Config+0x44>
 8008bfa:	f7f9 fc91 	bl	8002520 <HAL_GetTick>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d901      	bls.n	8008c0c <RCCEx_PLL3_Config+0x44>
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e086      	b.n	8008d1a <RCCEx_PLL3_Config+0x152>
 8008c0c:	4b45      	ldr	r3, [pc, #276]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1f0      	bne.n	8008bfa <RCCEx_PLL3_Config+0x32>
 8008c18:	4b42      	ldr	r3, [pc, #264]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c1c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	051b      	lsls	r3, r3, #20
 8008c26:	493f      	ldr	r1, [pc, #252]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	3b01      	subs	r3, #1
 8008c32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	025b      	lsls	r3, r3, #9
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	431a      	orrs	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	3b01      	subs	r3, #1
 8008c48:	041b      	lsls	r3, r3, #16
 8008c4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008c4e:	431a      	orrs	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	3b01      	subs	r3, #1
 8008c56:	061b      	lsls	r3, r3, #24
 8008c58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008c5c:	4931      	ldr	r1, [pc, #196]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	640b      	str	r3, [r1, #64]	@ 0x40
 8008c62:	4b30      	ldr	r3, [pc, #192]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c66:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	492d      	ldr	r1, [pc, #180]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008c70:	4313      	orrs	r3, r2
 8008c72:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008c74:	4b2b      	ldr	r3, [pc, #172]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c78:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	4928      	ldr	r1, [pc, #160]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008c82:	4313      	orrs	r3, r2
 8008c84:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008c86:	4b27      	ldr	r3, [pc, #156]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c8a:	4a26      	ldr	r2, [pc, #152]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c90:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c92:	4b24      	ldr	r3, [pc, #144]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008c94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c96:	4b24      	ldr	r3, [pc, #144]	@ (8008d28 <RCCEx_PLL3_Config+0x160>)
 8008c98:	4013      	ands	r3, r2
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	69d2      	ldr	r2, [r2, #28]
 8008c9e:	00d2      	lsls	r2, r2, #3
 8008ca0:	4920      	ldr	r1, [pc, #128]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	644b      	str	r3, [r1, #68]	@ 0x44
 8008ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008caa:	4a1e      	ldr	r2, [pc, #120]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d106      	bne.n	8008cc6 <RCCEx_PLL3_Config+0xfe>
 8008cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cbc:	4a19      	ldr	r2, [pc, #100]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008cbe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008cc4:	e00f      	b.n	8008ce6 <RCCEx_PLL3_Config+0x11e>
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d106      	bne.n	8008cda <RCCEx_PLL3_Config+0x112>
 8008ccc:	4b15      	ldr	r3, [pc, #84]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd0:	4a14      	ldr	r2, [pc, #80]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008cd2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008cd8:	e005      	b.n	8008ce6 <RCCEx_PLL3_Config+0x11e>
 8008cda:	4b12      	ldr	r3, [pc, #72]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cde:	4a11      	ldr	r2, [pc, #68]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008ce0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a0e      	ldr	r2, [pc, #56]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cf0:	6013      	str	r3, [r2, #0]
 8008cf2:	f7f9 fc15 	bl	8002520 <HAL_GetTick>
 8008cf6:	60b8      	str	r0, [r7, #8]
 8008cf8:	e008      	b.n	8008d0c <RCCEx_PLL3_Config+0x144>
 8008cfa:	f7f9 fc11 	bl	8002520 <HAL_GetTick>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	1ad3      	subs	r3, r2, r3
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d901      	bls.n	8008d0c <RCCEx_PLL3_Config+0x144>
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e006      	b.n	8008d1a <RCCEx_PLL3_Config+0x152>
 8008d0c:	4b05      	ldr	r3, [pc, #20]	@ (8008d24 <RCCEx_PLL3_Config+0x15c>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d0f0      	beq.n	8008cfa <RCCEx_PLL3_Config+0x132>
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	58024400 	.word	0x58024400
 8008d28:	ffff0007 	.word	0xffff0007

08008d2c <HAL_SD_Init>:
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b08a      	sub	sp, #40	@ 0x28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <HAL_SD_Init+0x12>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e075      	b.n	8008e2a <HAL_SD_Init+0xfe>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d105      	bne.n	8008d56 <HAL_SD_Init+0x2a>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	761a      	strb	r2, [r3, #24]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7f9 f909 	bl	8001f68 <HAL_SD_MspInit>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2204      	movs	r2, #4
 8008d5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f868 	bl	8008e34 <HAL_SD_InitCard>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <HAL_SD_Init+0x42>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e05d      	b.n	8008e2a <HAL_SD_Init+0xfe>
 8008d6e:	f107 0308 	add.w	r3, r7, #8
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fdb5 	bl	80098e4 <HAL_SD_GetCardStatus>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <HAL_SD_Init+0x58>
 8008d80:	2301      	movs	r3, #1
 8008d82:	e052      	b.n	8008e2a <HAL_SD_Init+0xfe>
 8008d84:	7e3b      	ldrb	r3, [r7, #24]
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d8a:	7e7b      	ldrb	r3, [r7, #25]
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	623b      	str	r3, [r7, #32]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d10a      	bne.n	8008dae <HAL_SD_Init+0x82>
 8008d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d102      	bne.n	8008da4 <HAL_SD_Init+0x78>
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d004      	beq.n	8008dae <HAL_SD_Init+0x82>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008daa:	659a      	str	r2, [r3, #88]	@ 0x58
 8008dac:	e00b      	b.n	8008dc6 <HAL_SD_Init+0x9a>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d104      	bne.n	8008dc0 <HAL_SD_Init+0x94>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008dbc:	659a      	str	r2, [r3, #88]	@ 0x58
 8008dbe:	e002      	b.n	8008dc6 <HAL_SD_Init+0x9a>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	659a      	str	r2, [r3, #88]	@ 0x58
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fe73 	bl	8009ab8 <HAL_SD_ConfigWideBusOperation>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d001      	beq.n	8008ddc <HAL_SD_Init+0xb0>
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e026      	b.n	8008e2a <HAL_SD_Init+0xfe>
 8008ddc:	f7f9 fba0 	bl	8002520 <HAL_GetTick>
 8008de0:	61f8      	str	r0, [r7, #28]
 8008de2:	e011      	b.n	8008e08 <HAL_SD_Init+0xdc>
 8008de4:	f7f9 fb9c 	bl	8002520 <HAL_GetTick>
 8008de8:	4602      	mov	r2, r0
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df2:	d109      	bne.n	8008e08 <HAL_SD_Init+0xdc>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008dfa:	635a      	str	r2, [r3, #52]	@ 0x34
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8008e04:	2303      	movs	r3, #3
 8008e06:	e010      	b.n	8008e2a <HAL_SD_Init+0xfe>
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 ff67 	bl	8009cdc <HAL_SD_GetCardState>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b04      	cmp	r3, #4
 8008e12:	d1e7      	bne.n	8008de4 <HAL_SD_Init+0xb8>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	635a      	str	r2, [r3, #52]	@ 0x34
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8008e28:	2300      	movs	r3, #0
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3728      	adds	r7, #40	@ 0x28
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
	...

08008e34 <HAL_SD_InitCard>:
 8008e34:	b590      	push	{r4, r7, lr}
 8008e36:	b08d      	sub	sp, #52	@ 0x34
 8008e38:	af02      	add	r7, sp, #8
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	2300      	movs	r3, #0
 8008e42:	613b      	str	r3, [r7, #16]
 8008e44:	2300      	movs	r3, #0
 8008e46:	617b      	str	r3, [r7, #20]
 8008e48:	2300      	movs	r3, #0
 8008e4a:	61bb      	str	r3, [r7, #24]
 8008e4c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008e50:	f04f 0100 	mov.w	r1, #0
 8008e54:	f7fe fd1e 	bl	8007894 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e58:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d109      	bne.n	8008e74 <HAL_SD_InitCard+0x40>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008e6e:	635a      	str	r2, [r3, #52]	@ 0x34
 8008e70:	2301      	movs	r3, #1
 8008e72:	e070      	b.n	8008f56 <HAL_SD_InitCard+0x122>
 8008e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e76:	0a1b      	lsrs	r3, r3, #8
 8008e78:	4a39      	ldr	r2, [pc, #228]	@ (8008f60 <HAL_SD_InitCard+0x12c>)
 8008e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e7e:	091b      	lsrs	r3, r3, #4
 8008e80:	61fb      	str	r3, [r7, #28]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681c      	ldr	r4, [r3, #0]
 8008e86:	466a      	mov	r2, sp
 8008e88:	f107 0318 	add.w	r3, r7, #24
 8008e8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008e90:	e882 0003 	stmia.w	r2, {r0, r1}
 8008e94:	f107 030c 	add.w	r3, r7, #12
 8008e98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f001 fef4 	bl	800ac88 <SDMMC_Init>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f001 ff37 	bl	800ad18 <SDMMC_PowerState_ON>
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d005      	beq.n	8008ebc <HAL_SD_InitCard+0x88>
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	005b      	lsls	r3, r3, #1
 8008eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d007      	beq.n	8008ed2 <HAL_SD_InitCard+0x9e>
 8008ec2:	4a28      	ldr	r2, [pc, #160]	@ (8008f64 <HAL_SD_InitCard+0x130>)
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eca:	3301      	adds	r3, #1
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7f9 fb33 	bl	8002538 <HAL_Delay>
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fff0 	bl	8009eb8 <SD_PowerON>
 8008ed8:	6238      	str	r0, [r7, #32]
 8008eda:	6a3b      	ldr	r3, [r7, #32]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00b      	beq.n	8008ef8 <HAL_SD_InitCard+0xc4>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	431a      	orrs	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	635a      	str	r2, [r3, #52]	@ 0x34
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e02e      	b.n	8008f56 <HAL_SD_InitCard+0x122>
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 ff0f 	bl	8009d1c <SD_InitCard>
 8008efe:	6238      	str	r0, [r7, #32]
 8008f00:	6a3b      	ldr	r3, [r7, #32]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00b      	beq.n	8008f1e <HAL_SD_InitCard+0xea>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	431a      	orrs	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	635a      	str	r2, [r3, #52]	@ 0x34
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e01b      	b.n	8008f56 <HAL_SD_InitCard+0x122>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f26:	4618      	mov	r0, r3
 8008f28:	f001 ff8c 	bl	800ae44 <SDMMC_CmdBlockLength>
 8008f2c:	6238      	str	r0, [r7, #32]
 8008f2e:	6a3b      	ldr	r3, [r7, #32]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00f      	beq.n	8008f54 <HAL_SD_InitCard+0x120>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a0b      	ldr	r2, [pc, #44]	@ (8008f68 <HAL_SD_InitCard+0x134>)
 8008f3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	431a      	orrs	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	635a      	str	r2, [r3, #52]	@ 0x34
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8008f50:	2301      	movs	r3, #1
 8008f52:	e000      	b.n	8008f56 <HAL_SD_InitCard+0x122>
 8008f54:	2300      	movs	r3, #0
 8008f56:	4618      	mov	r0, r3
 8008f58:	372c      	adds	r7, #44	@ 0x2c
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd90      	pop	{r4, r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	014f8b59 	.word	0x014f8b59
 8008f64:	00012110 	.word	0x00012110
 8008f68:	1fe00fff 	.word	0x1fe00fff

08008f6c <HAL_SD_ReadBlocks>:
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b092      	sub	sp, #72	@ 0x48
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	603b      	str	r3, [r7, #0]
 8008f7a:	f7f9 fad1 	bl	8002520 <HAL_GetTick>
 8008f7e:	6338      	str	r0, [r7, #48]	@ 0x30
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d107      	bne.n	8008f9e <HAL_SD_ReadBlocks+0x32>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f92:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	635a      	str	r2, [r3, #52]	@ 0x34
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e167      	b.n	800926e <HAL_SD_ReadBlocks+0x302>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	f040 815a 	bne.w	8009260 <HAL_SD_ReadBlocks+0x2f4>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8008fb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	441a      	add	r2, r3
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d907      	bls.n	8008fd0 <HAL_SD_ReadBlocks+0x64>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fc4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	635a      	str	r2, [r3, #52]	@ 0x34
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e14e      	b.n	800926e <HAL_SD_ReadBlocks+0x302>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2203      	movs	r2, #3
 8008fd4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d002      	beq.n	8008fee <HAL_SD_ReadBlocks+0x82>
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fea:	025b      	lsls	r3, r3, #9
 8008fec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008fee:	f04f 33ff 	mov.w	r3, #4294967295
 8008ff2:	617b      	str	r3, [r7, #20]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	025b      	lsls	r3, r3, #9
 8008ff8:	61bb      	str	r3, [r7, #24]
 8008ffa:	2390      	movs	r3, #144	@ 0x90
 8008ffc:	61fb      	str	r3, [r7, #28]
 8008ffe:	2302      	movs	r3, #2
 8009000:	623b      	str	r3, [r7, #32]
 8009002:	2300      	movs	r3, #0
 8009004:	627b      	str	r3, [r7, #36]	@ 0x24
 8009006:	2300      	movs	r3, #0
 8009008:	62bb      	str	r3, [r7, #40]	@ 0x28
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f107 0214 	add.w	r2, r7, #20
 8009012:	4611      	mov	r1, r2
 8009014:	4618      	mov	r0, r3
 8009016:	f001 fee9 	bl	800adec <SDMMC_ConfigData>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68da      	ldr	r2, [r3, #12]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009028:	60da      	str	r2, [r3, #12]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d90a      	bls.n	8009046 <HAL_SD_ReadBlocks+0xda>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2202      	movs	r2, #2
 8009034:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800903c:	4618      	mov	r0, r3
 800903e:	f001 ff47 	bl	800aed0 <SDMMC_CmdReadMultiBlock>
 8009042:	6478      	str	r0, [r7, #68]	@ 0x44
 8009044:	e009      	b.n	800905a <HAL_SD_ReadBlocks+0xee>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2201      	movs	r2, #1
 800904a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009052:	4618      	mov	r0, r3
 8009054:	f001 ff19 	bl	800ae8a <SDMMC_CmdReadSingleBlock>
 8009058:	6478      	str	r0, [r7, #68]	@ 0x44
 800905a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800905c:	2b00      	cmp	r3, #0
 800905e:	d012      	beq.n	8009086 <HAL_SD_ReadBlocks+0x11a>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a84      	ldr	r2, [pc, #528]	@ (8009278 <HAL_SD_ReadBlocks+0x30c>)
 8009066:	639a      	str	r2, [r3, #56]	@ 0x38
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800906c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800906e:	431a      	orrs	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	635a      	str	r2, [r3, #52]	@ 0x34
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009082:	2301      	movs	r3, #1
 8009084:	e0f3      	b.n	800926e <HAL_SD_ReadBlocks+0x302>
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800908a:	e058      	b.n	800913e <HAL_SD_ReadBlocks+0x1d2>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009092:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009096:	2b00      	cmp	r3, #0
 8009098:	d033      	beq.n	8009102 <HAL_SD_ReadBlocks+0x196>
 800909a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800909c:	2b1f      	cmp	r3, #31
 800909e:	d930      	bls.n	8009102 <HAL_SD_ReadBlocks+0x196>
 80090a0:	2300      	movs	r3, #0
 80090a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80090a4:	e027      	b.n	80090f6 <HAL_SD_ReadBlocks+0x18a>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f001 fe16 	bl	800acdc <SDMMC_ReadFIFO>
 80090b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80090b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090b4:	b2da      	uxtb	r2, r3
 80090b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090b8:	701a      	strb	r2, [r3, #0]
 80090ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090bc:	3301      	adds	r3, #1
 80090be:	637b      	str	r3, [r7, #52]	@ 0x34
 80090c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090c2:	0a1b      	lsrs	r3, r3, #8
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090c8:	701a      	strb	r2, [r3, #0]
 80090ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090cc:	3301      	adds	r3, #1
 80090ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80090d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090d2:	0c1b      	lsrs	r3, r3, #16
 80090d4:	b2da      	uxtb	r2, r3
 80090d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090d8:	701a      	strb	r2, [r3, #0]
 80090da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090dc:	3301      	adds	r3, #1
 80090de:	637b      	str	r3, [r7, #52]	@ 0x34
 80090e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e2:	0e1b      	lsrs	r3, r3, #24
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090e8:	701a      	strb	r2, [r3, #0]
 80090ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ec:	3301      	adds	r3, #1
 80090ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80090f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090f2:	3301      	adds	r3, #1
 80090f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80090f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090f8:	2b07      	cmp	r3, #7
 80090fa:	d9d4      	bls.n	80090a6 <HAL_SD_ReadBlocks+0x13a>
 80090fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090fe:	3b20      	subs	r3, #32
 8009100:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009102:	f7f9 fa0d 	bl	8002520 <HAL_GetTick>
 8009106:	4602      	mov	r2, r0
 8009108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800910e:	429a      	cmp	r2, r3
 8009110:	d902      	bls.n	8009118 <HAL_SD_ReadBlocks+0x1ac>
 8009112:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009114:	2b00      	cmp	r3, #0
 8009116:	d112      	bne.n	800913e <HAL_SD_ReadBlocks+0x1d2>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a56      	ldr	r2, [pc, #344]	@ (8009278 <HAL_SD_ReadBlocks+0x30c>)
 800911e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009124:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	635a      	str	r2, [r3, #52]	@ 0x34
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	62da      	str	r2, [r3, #44]	@ 0x2c
 800913a:	2303      	movs	r3, #3
 800913c:	e097      	b.n	800926e <HAL_SD_ReadBlocks+0x302>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009144:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009148:	2b00      	cmp	r3, #0
 800914a:	d09f      	beq.n	800908c <HAL_SD_ReadBlocks+0x120>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68da      	ldr	r2, [r3, #12]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800915a:	60da      	str	r2, [r3, #12]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009166:	2b00      	cmp	r3, #0
 8009168:	d022      	beq.n	80091b0 <HAL_SD_ReadBlocks+0x244>
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d91f      	bls.n	80091b0 <HAL_SD_ReadBlocks+0x244>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009174:	2b03      	cmp	r3, #3
 8009176:	d01b      	beq.n	80091b0 <HAL_SD_ReadBlocks+0x244>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4618      	mov	r0, r3
 800917e:	f001 ff11 	bl	800afa4 <SDMMC_CmdStopTransfer>
 8009182:	6478      	str	r0, [r7, #68]	@ 0x44
 8009184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009186:	2b00      	cmp	r3, #0
 8009188:	d012      	beq.n	80091b0 <HAL_SD_ReadBlocks+0x244>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a3a      	ldr	r2, [pc, #232]	@ (8009278 <HAL_SD_ReadBlocks+0x30c>)
 8009190:	639a      	str	r2, [r3, #56]	@ 0x38
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009198:	431a      	orrs	r2, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	635a      	str	r2, [r3, #52]	@ 0x34
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80091ac:	2301      	movs	r3, #1
 80091ae:	e05e      	b.n	800926e <HAL_SD_ReadBlocks+0x302>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091b6:	f003 0308 	and.w	r3, r3, #8
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d012      	beq.n	80091e4 <HAL_SD_ReadBlocks+0x278>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a2d      	ldr	r2, [pc, #180]	@ (8009278 <HAL_SD_ReadBlocks+0x30c>)
 80091c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091ca:	f043 0208 	orr.w	r2, r3, #8
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80091e0:	2301      	movs	r3, #1
 80091e2:	e044      	b.n	800926e <HAL_SD_ReadBlocks+0x302>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091ea:	f003 0302 	and.w	r3, r3, #2
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d012      	beq.n	8009218 <HAL_SD_ReadBlocks+0x2ac>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a20      	ldr	r2, [pc, #128]	@ (8009278 <HAL_SD_ReadBlocks+0x30c>)
 80091f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091fe:	f043 0202 	orr.w	r2, r3, #2
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	635a      	str	r2, [r3, #52]	@ 0x34
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2200      	movs	r2, #0
 8009212:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009214:	2301      	movs	r3, #1
 8009216:	e02a      	b.n	800926e <HAL_SD_ReadBlocks+0x302>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800921e:	f003 0320 	and.w	r3, r3, #32
 8009222:	2b00      	cmp	r3, #0
 8009224:	d012      	beq.n	800924c <HAL_SD_ReadBlocks+0x2e0>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a13      	ldr	r2, [pc, #76]	@ (8009278 <HAL_SD_ReadBlocks+0x30c>)
 800922c:	639a      	str	r2, [r3, #56]	@ 0x38
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009232:	f043 0220 	orr.w	r2, r3, #32
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	635a      	str	r2, [r3, #52]	@ 0x34
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009248:	2301      	movs	r3, #1
 800924a:	e010      	b.n	800926e <HAL_SD_ReadBlocks+0x302>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a0a      	ldr	r2, [pc, #40]	@ (800927c <HAL_SD_ReadBlocks+0x310>)
 8009252:	639a      	str	r2, [r3, #56]	@ 0x38
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800925c:	2300      	movs	r3, #0
 800925e:	e006      	b.n	800926e <HAL_SD_ReadBlocks+0x302>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009264:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	635a      	str	r2, [r3, #52]	@ 0x34
 800926c:	2301      	movs	r3, #1
 800926e:	4618      	mov	r0, r3
 8009270:	3748      	adds	r7, #72	@ 0x48
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	1fe00fff 	.word	0x1fe00fff
 800927c:	18000f3a 	.word	0x18000f3a

08009280 <HAL_SD_WriteBlocks>:
 8009280:	b580      	push	{r7, lr}
 8009282:	b092      	sub	sp, #72	@ 0x48
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
 800928c:	603b      	str	r3, [r7, #0]
 800928e:	f7f9 f947 	bl	8002520 <HAL_GetTick>
 8009292:	6338      	str	r0, [r7, #48]	@ 0x30
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	637b      	str	r3, [r7, #52]	@ 0x34
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d107      	bne.n	80092b2 <HAL_SD_WriteBlocks+0x32>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80092ae:	2301      	movs	r3, #1
 80092b0:	e16b      	b.n	800958a <HAL_SD_WriteBlocks+0x30a>
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	f040 815e 	bne.w	800957c <HAL_SD_WriteBlocks+0x2fc>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80092c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	441a      	add	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d907      	bls.n	80092e4 <HAL_SD_WriteBlocks+0x64>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092d8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	635a      	str	r2, [r3, #52]	@ 0x34
 80092e0:	2301      	movs	r3, #1
 80092e2:	e152      	b.n	800958a <HAL_SD_WriteBlocks+0x30a>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2203      	movs	r2, #3
 80092e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2200      	movs	r2, #0
 80092f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d002      	beq.n	8009302 <HAL_SD_WriteBlocks+0x82>
 80092fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092fe:	025b      	lsls	r3, r3, #9
 8009300:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009302:	f04f 33ff 	mov.w	r3, #4294967295
 8009306:	61bb      	str	r3, [r7, #24]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	025b      	lsls	r3, r3, #9
 800930c:	61fb      	str	r3, [r7, #28]
 800930e:	2390      	movs	r3, #144	@ 0x90
 8009310:	623b      	str	r3, [r7, #32]
 8009312:	2300      	movs	r3, #0
 8009314:	627b      	str	r3, [r7, #36]	@ 0x24
 8009316:	2300      	movs	r3, #0
 8009318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800931a:	2300      	movs	r3, #0
 800931c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f107 0218 	add.w	r2, r7, #24
 8009326:	4611      	mov	r1, r2
 8009328:	4618      	mov	r0, r3
 800932a:	f001 fd5f 	bl	800adec <SDMMC_ConfigData>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68da      	ldr	r2, [r3, #12]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800933c:	60da      	str	r2, [r3, #12]
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d90a      	bls.n	800935a <HAL_SD_WriteBlocks+0xda>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2220      	movs	r2, #32
 8009348:	62da      	str	r2, [r3, #44]	@ 0x2c
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009350:	4618      	mov	r0, r3
 8009352:	f001 fe03 	bl	800af5c <SDMMC_CmdWriteMultiBlock>
 8009356:	6478      	str	r0, [r7, #68]	@ 0x44
 8009358:	e009      	b.n	800936e <HAL_SD_WriteBlocks+0xee>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2210      	movs	r2, #16
 800935e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009366:	4618      	mov	r0, r3
 8009368:	f001 fdd5 	bl	800af16 <SDMMC_CmdWriteSingleBlock>
 800936c:	6478      	str	r0, [r7, #68]	@ 0x44
 800936e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009370:	2b00      	cmp	r3, #0
 8009372:	d012      	beq.n	800939a <HAL_SD_WriteBlocks+0x11a>
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a86      	ldr	r2, [pc, #536]	@ (8009594 <HAL_SD_WriteBlocks+0x314>)
 800937a:	639a      	str	r2, [r3, #56]	@ 0x38
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009382:	431a      	orrs	r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	635a      	str	r2, [r3, #52]	@ 0x34
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009396:	2301      	movs	r3, #1
 8009398:	e0f7      	b.n	800958a <HAL_SD_WriteBlocks+0x30a>
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800939e:	e05c      	b.n	800945a <HAL_SD_WriteBlocks+0x1da>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d037      	beq.n	800941e <HAL_SD_WriteBlocks+0x19e>
 80093ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093b0:	2b1f      	cmp	r3, #31
 80093b2:	d934      	bls.n	800941e <HAL_SD_WriteBlocks+0x19e>
 80093b4:	2300      	movs	r3, #0
 80093b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80093b8:	e02b      	b.n	8009412 <HAL_SD_WriteBlocks+0x192>
 80093ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	617b      	str	r3, [r7, #20]
 80093c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093c2:	3301      	adds	r3, #1
 80093c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	021a      	lsls	r2, r3, #8
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	617b      	str	r3, [r7, #20]
 80093d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093d4:	3301      	adds	r3, #1
 80093d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80093d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	041a      	lsls	r2, r3, #16
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	617b      	str	r3, [r7, #20]
 80093e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e6:	3301      	adds	r3, #1
 80093e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	061a      	lsls	r2, r3, #24
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	617b      	str	r3, [r7, #20]
 80093f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093f8:	3301      	adds	r3, #1
 80093fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f107 0214 	add.w	r2, r7, #20
 8009404:	4611      	mov	r1, r2
 8009406:	4618      	mov	r0, r3
 8009408:	f001 fc75 	bl	800acf6 <SDMMC_WriteFIFO>
 800940c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800940e:	3301      	adds	r3, #1
 8009410:	643b      	str	r3, [r7, #64]	@ 0x40
 8009412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009414:	2b07      	cmp	r3, #7
 8009416:	d9d0      	bls.n	80093ba <HAL_SD_WriteBlocks+0x13a>
 8009418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800941a:	3b20      	subs	r3, #32
 800941c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800941e:	f7f9 f87f 	bl	8002520 <HAL_GetTick>
 8009422:	4602      	mov	r2, r0
 8009424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800942a:	429a      	cmp	r2, r3
 800942c:	d902      	bls.n	8009434 <HAL_SD_WriteBlocks+0x1b4>
 800942e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009430:	2b00      	cmp	r3, #0
 8009432:	d112      	bne.n	800945a <HAL_SD_WriteBlocks+0x1da>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a56      	ldr	r2, [pc, #344]	@ (8009594 <HAL_SD_WriteBlocks+0x314>)
 800943a:	639a      	str	r2, [r3, #56]	@ 0x38
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009442:	431a      	orrs	r2, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	635a      	str	r2, [r3, #52]	@ 0x34
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009456:	2303      	movs	r3, #3
 8009458:	e097      	b.n	800958a <HAL_SD_WriteBlocks+0x30a>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009460:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8009464:	2b00      	cmp	r3, #0
 8009466:	d09b      	beq.n	80093a0 <HAL_SD_WriteBlocks+0x120>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68da      	ldr	r2, [r3, #12]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009476:	60da      	str	r2, [r3, #12]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800947e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009482:	2b00      	cmp	r3, #0
 8009484:	d022      	beq.n	80094cc <HAL_SD_WriteBlocks+0x24c>
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d91f      	bls.n	80094cc <HAL_SD_WriteBlocks+0x24c>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009490:	2b03      	cmp	r3, #3
 8009492:	d01b      	beq.n	80094cc <HAL_SD_WriteBlocks+0x24c>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4618      	mov	r0, r3
 800949a:	f001 fd83 	bl	800afa4 <SDMMC_CmdStopTransfer>
 800949e:	6478      	str	r0, [r7, #68]	@ 0x44
 80094a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d012      	beq.n	80094cc <HAL_SD_WriteBlocks+0x24c>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a3a      	ldr	r2, [pc, #232]	@ (8009594 <HAL_SD_WriteBlocks+0x314>)
 80094ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094b4:	431a      	orrs	r2, r3
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80094c8:	2301      	movs	r3, #1
 80094ca:	e05e      	b.n	800958a <HAL_SD_WriteBlocks+0x30a>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094d2:	f003 0308 	and.w	r3, r3, #8
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d012      	beq.n	8009500 <HAL_SD_WriteBlocks+0x280>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a2d      	ldr	r2, [pc, #180]	@ (8009594 <HAL_SD_WriteBlocks+0x314>)
 80094e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094e6:	f043 0208 	orr.w	r2, r3, #8
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80094fc:	2301      	movs	r3, #1
 80094fe:	e044      	b.n	800958a <HAL_SD_WriteBlocks+0x30a>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009506:	f003 0302 	and.w	r3, r3, #2
 800950a:	2b00      	cmp	r3, #0
 800950c:	d012      	beq.n	8009534 <HAL_SD_WriteBlocks+0x2b4>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a20      	ldr	r2, [pc, #128]	@ (8009594 <HAL_SD_WriteBlocks+0x314>)
 8009514:	639a      	str	r2, [r3, #56]	@ 0x38
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800951a:	f043 0202 	orr.w	r2, r3, #2
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	635a      	str	r2, [r3, #52]	@ 0x34
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009530:	2301      	movs	r3, #1
 8009532:	e02a      	b.n	800958a <HAL_SD_WriteBlocks+0x30a>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800953a:	f003 0310 	and.w	r3, r3, #16
 800953e:	2b00      	cmp	r3, #0
 8009540:	d012      	beq.n	8009568 <HAL_SD_WriteBlocks+0x2e8>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a13      	ldr	r2, [pc, #76]	@ (8009594 <HAL_SD_WriteBlocks+0x314>)
 8009548:	639a      	str	r2, [r3, #56]	@ 0x38
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800954e:	f043 0210 	orr.w	r2, r3, #16
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	635a      	str	r2, [r3, #52]	@ 0x34
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2201      	movs	r2, #1
 800955a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009564:	2301      	movs	r3, #1
 8009566:	e010      	b.n	800958a <HAL_SD_WriteBlocks+0x30a>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a0a      	ldr	r2, [pc, #40]	@ (8009598 <HAL_SD_WriteBlocks+0x318>)
 800956e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8009578:	2300      	movs	r3, #0
 800957a:	e006      	b.n	800958a <HAL_SD_WriteBlocks+0x30a>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009580:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	635a      	str	r2, [r3, #52]	@ 0x34
 8009588:	2301      	movs	r3, #1
 800958a:	4618      	mov	r0, r3
 800958c:	3748      	adds	r7, #72	@ 0x48
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	1fe00fff 	.word	0x1fe00fff
 8009598:	18000f3a 	.word	0x18000f3a

0800959c <HAL_SD_GetCardCSD>:
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095aa:	0f9b      	lsrs	r3, r3, #30
 80095ac:	b2da      	uxtb	r2, r3
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	701a      	strb	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095b6:	0e9b      	lsrs	r3, r3, #26
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	f003 030f 	and.w	r3, r3, #15
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	705a      	strb	r2, [r3, #1]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095c8:	0e1b      	lsrs	r3, r3, #24
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	f003 0303 	and.w	r3, r3, #3
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	709a      	strb	r2, [r3, #2]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095da:	0c1b      	lsrs	r3, r3, #16
 80095dc:	b2da      	uxtb	r2, r3
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	70da      	strb	r2, [r3, #3]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095e6:	0a1b      	lsrs	r3, r3, #8
 80095e8:	b2da      	uxtb	r2, r3
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	711a      	strb	r2, [r3, #4]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	715a      	strb	r2, [r3, #5]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095fc:	0d1b      	lsrs	r3, r3, #20
 80095fe:	b29a      	uxth	r2, r3
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	80da      	strh	r2, [r3, #6]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009608:	0c1b      	lsrs	r3, r3, #16
 800960a:	b2db      	uxtb	r3, r3
 800960c:	f003 030f 	and.w	r3, r3, #15
 8009610:	b2da      	uxtb	r2, r3
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	721a      	strb	r2, [r3, #8]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800961a:	0bdb      	lsrs	r3, r3, #15
 800961c:	b2db      	uxtb	r3, r3
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	b2da      	uxtb	r2, r3
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	725a      	strb	r2, [r3, #9]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800962c:	0b9b      	lsrs	r3, r3, #14
 800962e:	b2db      	uxtb	r3, r3
 8009630:	f003 0301 	and.w	r3, r3, #1
 8009634:	b2da      	uxtb	r2, r3
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	729a      	strb	r2, [r3, #10]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800963e:	0b5b      	lsrs	r3, r3, #13
 8009640:	b2db      	uxtb	r3, r3
 8009642:	f003 0301 	and.w	r3, r3, #1
 8009646:	b2da      	uxtb	r2, r3
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	72da      	strb	r2, [r3, #11]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009650:	0b1b      	lsrs	r3, r3, #12
 8009652:	b2db      	uxtb	r3, r3
 8009654:	f003 0301 	and.w	r3, r3, #1
 8009658:	b2da      	uxtb	r2, r3
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	731a      	strb	r2, [r3, #12]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	2200      	movs	r2, #0
 8009662:	735a      	strb	r2, [r3, #13]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009668:	2b00      	cmp	r3, #0
 800966a:	d163      	bne.n	8009734 <HAL_SD_GetCardCSD+0x198>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009670:	009a      	lsls	r2, r3, #2
 8009672:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009676:	4013      	ands	r3, r2
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800967c:	0f92      	lsrs	r2, r2, #30
 800967e:	431a      	orrs	r2, r3
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	611a      	str	r2, [r3, #16]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009688:	0edb      	lsrs	r3, r3, #27
 800968a:	b2db      	uxtb	r3, r3
 800968c:	f003 0307 	and.w	r3, r3, #7
 8009690:	b2da      	uxtb	r2, r3
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	751a      	strb	r2, [r3, #20]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800969a:	0e1b      	lsrs	r3, r3, #24
 800969c:	b2db      	uxtb	r3, r3
 800969e:	f003 0307 	and.w	r3, r3, #7
 80096a2:	b2da      	uxtb	r2, r3
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	755a      	strb	r2, [r3, #21]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096ac:	0d5b      	lsrs	r3, r3, #21
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	f003 0307 	and.w	r3, r3, #7
 80096b4:	b2da      	uxtb	r2, r3
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	759a      	strb	r2, [r3, #22]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096be:	0c9b      	lsrs	r3, r3, #18
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	f003 0307 	and.w	r3, r3, #7
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	75da      	strb	r2, [r3, #23]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096d0:	0bdb      	lsrs	r3, r3, #15
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	f003 0307 	and.w	r3, r3, #7
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	761a      	strb	r2, [r3, #24]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	1c5a      	adds	r2, r3, #1
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	649a      	str	r2, [r3, #72]	@ 0x48
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	7e1b      	ldrb	r3, [r3, #24]
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	f003 0307 	and.w	r3, r3, #7
 80096f2:	3302      	adds	r3, #2
 80096f4:	2201      	movs	r2, #1
 80096f6:	fa02 f303 	lsl.w	r3, r2, r3
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80096fe:	fb03 f202 	mul.w	r2, r3, r2
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	649a      	str	r2, [r3, #72]	@ 0x48
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	7a1b      	ldrb	r3, [r3, #8]
 800970a:	b2db      	uxtb	r3, r3
 800970c:	f003 030f 	and.w	r3, r3, #15
 8009710:	2201      	movs	r2, #1
 8009712:	409a      	lsls	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009720:	0a52      	lsrs	r2, r2, #9
 8009722:	fb03 f202 	mul.w	r2, r3, r2
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	651a      	str	r2, [r3, #80]	@ 0x50
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009730:	655a      	str	r2, [r3, #84]	@ 0x54
 8009732:	e031      	b.n	8009798 <HAL_SD_GetCardCSD+0x1fc>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009738:	2b01      	cmp	r3, #1
 800973a:	d11d      	bne.n	8009778 <HAL_SD_GetCardCSD+0x1dc>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009740:	041b      	lsls	r3, r3, #16
 8009742:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800974a:	0c1b      	lsrs	r3, r3, #16
 800974c:	431a      	orrs	r2, r3
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	611a      	str	r2, [r3, #16]
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	3301      	adds	r3, #1
 8009758:	029a      	lsls	r2, r3, #10
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	649a      	str	r2, [r3, #72]	@ 0x48
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	651a      	str	r2, [r3, #80]	@ 0x50
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800976c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	655a      	str	r2, [r3, #84]	@ 0x54
 8009776:	e00f      	b.n	8009798 <HAL_SD_GetCardCSD+0x1fc>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a58      	ldr	r2, [pc, #352]	@ (80098e0 <HAL_SD_GetCardCSD+0x344>)
 800977e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009784:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	635a      	str	r2, [r3, #52]	@ 0x34
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8009794:	2301      	movs	r3, #1
 8009796:	e09d      	b.n	80098d4 <HAL_SD_GetCardCSD+0x338>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800979c:	0b9b      	lsrs	r3, r3, #14
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	f003 0301 	and.w	r3, r3, #1
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	765a      	strb	r2, [r3, #25]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097ae:	09db      	lsrs	r3, r3, #7
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097b6:	b2da      	uxtb	r2, r3
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	769a      	strb	r2, [r3, #26]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	76da      	strb	r2, [r3, #27]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80097d0:	0fdb      	lsrs	r3, r3, #31
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	771a      	strb	r2, [r3, #28]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80097dc:	0f5b      	lsrs	r3, r3, #29
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	f003 0303 	and.w	r3, r3, #3
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	775a      	strb	r2, [r3, #29]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80097ee:	0e9b      	lsrs	r3, r3, #26
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	f003 0307 	and.w	r3, r3, #7
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	779a      	strb	r2, [r3, #30]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009800:	0d9b      	lsrs	r3, r3, #22
 8009802:	b2db      	uxtb	r3, r3
 8009804:	f003 030f 	and.w	r3, r3, #15
 8009808:	b2da      	uxtb	r2, r3
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	77da      	strb	r2, [r3, #31]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009812:	0d5b      	lsrs	r3, r3, #21
 8009814:	b2db      	uxtb	r3, r3
 8009816:	f003 0301 	and.w	r3, r3, #1
 800981a:	b2da      	uxtb	r2, r3
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	f883 2020 	strb.w	r2, [r3, #32]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800982e:	0c1b      	lsrs	r3, r3, #16
 8009830:	b2db      	uxtb	r3, r3
 8009832:	f003 0301 	and.w	r3, r3, #1
 8009836:	b2da      	uxtb	r2, r3
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009842:	0bdb      	lsrs	r3, r3, #15
 8009844:	b2db      	uxtb	r3, r3
 8009846:	f003 0301 	and.w	r3, r3, #1
 800984a:	b2da      	uxtb	r2, r3
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009856:	0b9b      	lsrs	r3, r3, #14
 8009858:	b2db      	uxtb	r3, r3
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	b2da      	uxtb	r2, r3
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800986a:	0b5b      	lsrs	r3, r3, #13
 800986c:	b2db      	uxtb	r3, r3
 800986e:	f003 0301 	and.w	r3, r3, #1
 8009872:	b2da      	uxtb	r2, r3
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800987e:	0b1b      	lsrs	r3, r3, #12
 8009880:	b2db      	uxtb	r3, r3
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	b2da      	uxtb	r2, r3
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009892:	0a9b      	lsrs	r3, r3, #10
 8009894:	b2db      	uxtb	r3, r3
 8009896:	f003 0303 	and.w	r3, r3, #3
 800989a:	b2da      	uxtb	r2, r3
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098a6:	0a1b      	lsrs	r3, r3, #8
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	f003 0303 	and.w	r3, r3, #3
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098ba:	085b      	lsrs	r3, r3, #1
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2201      	movs	r2, #1
 80098ce:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 80098d2:	2300      	movs	r3, #0
 80098d4:	4618      	mov	r0, r3
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr
 80098e0:	1fe00fff 	.word	0x1fe00fff

080098e4 <HAL_SD_GetCardStatus>:
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b094      	sub	sp, #80	@ 0x50
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
 80098ee:	2300      	movs	r3, #0
 80098f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	2b03      	cmp	r3, #3
 80098fe:	d101      	bne.n	8009904 <HAL_SD_GetCardStatus+0x20>
 8009900:	2301      	movs	r3, #1
 8009902:	e0a7      	b.n	8009a54 <HAL_SD_GetCardStatus+0x170>
 8009904:	f107 0308 	add.w	r3, r7, #8
 8009908:	4619      	mov	r1, r3
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fb62 	bl	8009fd4 <SD_SendSDStatus>
 8009910:	64b8      	str	r0, [r7, #72]	@ 0x48
 8009912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009914:	2b00      	cmp	r3, #0
 8009916:	d011      	beq.n	800993c <HAL_SD_GetCardStatus+0x58>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a4f      	ldr	r2, [pc, #316]	@ (8009a5c <HAL_SD_GetCardStatus+0x178>)
 800991e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009926:	431a      	orrs	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	635a      	str	r2, [r3, #52]	@ 0x34
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8009934:	2301      	movs	r3, #1
 8009936:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800993a:	e070      	b.n	8009a1e <HAL_SD_GetCardStatus+0x13a>
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	099b      	lsrs	r3, r3, #6
 8009940:	b2db      	uxtb	r3, r3
 8009942:	f003 0303 	and.w	r3, r3, #3
 8009946:	b2da      	uxtb	r2, r3
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	701a      	strb	r2, [r3, #0]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	095b      	lsrs	r3, r3, #5
 8009950:	b2db      	uxtb	r3, r3
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	b2da      	uxtb	r2, r3
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	705a      	strb	r2, [r3, #1]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	0a1b      	lsrs	r3, r3, #8
 8009960:	b29b      	uxth	r3, r3
 8009962:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009966:	b29a      	uxth	r2, r3
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	0e1b      	lsrs	r3, r3, #24
 800996c:	b29b      	uxth	r3, r3
 800996e:	4313      	orrs	r3, r2
 8009970:	b29a      	uxth	r2, r3
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	805a      	strh	r2, [r3, #2]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	061a      	lsls	r2, r3, #24
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	021b      	lsls	r3, r3, #8
 800997e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009982:	431a      	orrs	r2, r3
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	0a1b      	lsrs	r3, r3, #8
 8009988:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800998c:	431a      	orrs	r2, r3
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	0e1b      	lsrs	r3, r3, #24
 8009992:	431a      	orrs	r2, r3
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	605a      	str	r2, [r3, #4]
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	b2da      	uxtb	r2, r3
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	721a      	strb	r2, [r3, #8]
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	0a1b      	lsrs	r3, r3, #8
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	725a      	strb	r2, [r3, #9]
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	0d1b      	lsrs	r3, r3, #20
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	f003 030f 	and.w	r3, r3, #15
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	729a      	strb	r2, [r3, #10]
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	0c1b      	lsrs	r3, r3, #16
 80099be:	b29b      	uxth	r3, r3
 80099c0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	4313      	orrs	r3, r2
 80099d0:	b29a      	uxth	r2, r3
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	819a      	strh	r2, [r3, #12]
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	0a9b      	lsrs	r3, r3, #10
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	739a      	strb	r2, [r3, #14]
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	0a1b      	lsrs	r3, r3, #8
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	f003 0303 	and.w	r3, r3, #3
 80099f0:	b2da      	uxtb	r2, r3
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	73da      	strb	r2, [r3, #15]
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	091b      	lsrs	r3, r3, #4
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	f003 030f 	and.w	r3, r3, #15
 8009a00:	b2da      	uxtb	r2, r3
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	741a      	strb	r2, [r3, #16]
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	f003 030f 	and.w	r3, r3, #15
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	745a      	strb	r2, [r3, #17]
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	0e1b      	lsrs	r3, r3, #24
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	749a      	strb	r2, [r3, #18]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009a26:	4618      	mov	r0, r3
 8009a28:	f001 fa0c 	bl	800ae44 <SDMMC_CmdBlockLength>
 8009a2c:	64b8      	str	r0, [r7, #72]	@ 0x48
 8009a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00d      	beq.n	8009a50 <HAL_SD_GetCardStatus+0x16c>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a08      	ldr	r2, [pc, #32]	@ (8009a5c <HAL_SD_GetCardStatus+0x178>)
 8009a3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a40:	635a      	str	r2, [r3, #52]	@ 0x34
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8009a50:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009a54:	4618      	mov	r0, r3
 8009a56:	3750      	adds	r7, #80	@ 0x50
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	1fe00fff 	.word	0x1fe00fff

08009a60 <HAL_SD_GetCardInfo>:
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	601a      	str	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	605a      	str	r2, [r3, #4]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	609a      	str	r2, [r3, #8]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	60da      	str	r2, [r3, #12]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	611a      	str	r2, [r3, #16]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	615a      	str	r2, [r3, #20]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	619a      	str	r2, [r3, #24]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	61da      	str	r2, [r3, #28]
 8009aaa:	2300      	movs	r3, #0
 8009aac:	4618      	mov	r0, r3
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <HAL_SD_ConfigWideBusOperation>:
 8009ab8:	b590      	push	{r4, r7, lr}
 8009aba:	b08d      	sub	sp, #52	@ 0x34
 8009abc:	af02      	add	r7, sp, #8
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2203      	movs	r2, #3
 8009acc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ad4:	2b03      	cmp	r3, #3
 8009ad6:	d02e      	beq.n	8009b36 <HAL_SD_ConfigWideBusOperation+0x7e>
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ade:	d106      	bne.n	8009aee <HAL_SD_ConfigWideBusOperation+0x36>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ae4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	635a      	str	r2, [r3, #52]	@ 0x34
 8009aec:	e029      	b.n	8009b42 <HAL_SD_ConfigWideBusOperation+0x8a>
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009af4:	d10a      	bne.n	8009b0c <HAL_SD_ConfigWideBusOperation+0x54>
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 fb64 	bl	800a1c4 <SD_WideBus_Enable>
 8009afc:	6238      	str	r0, [r7, #32]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b02:	6a3b      	ldr	r3, [r7, #32]
 8009b04:	431a      	orrs	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	635a      	str	r2, [r3, #52]	@ 0x34
 8009b0a:	e01a      	b.n	8009b42 <HAL_SD_ConfigWideBusOperation+0x8a>
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10a      	bne.n	8009b28 <HAL_SD_ConfigWideBusOperation+0x70>
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fba1 	bl	800a25a <SD_WideBus_Disable>
 8009b18:	6238      	str	r0, [r7, #32]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b1e:	6a3b      	ldr	r3, [r7, #32]
 8009b20:	431a      	orrs	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	635a      	str	r2, [r3, #52]	@ 0x34
 8009b26:	e00c      	b.n	8009b42 <HAL_SD_ConfigWideBusOperation+0x8a>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b2c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	635a      	str	r2, [r3, #52]	@ 0x34
 8009b34:	e005      	b.n	8009b42 <HAL_SD_ConfigWideBusOperation+0x8a>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b3a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	635a      	str	r2, [r3, #52]	@ 0x34
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d007      	beq.n	8009b5a <HAL_SD_ConfigWideBusOperation+0xa2>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a5f      	ldr	r2, [pc, #380]	@ (8009ccc <HAL_SD_ConfigWideBusOperation+0x214>)
 8009b50:	639a      	str	r2, [r3, #56]	@ 0x38
 8009b52:	2301      	movs	r3, #1
 8009b54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009b58:	e096      	b.n	8009c88 <HAL_SD_ConfigWideBusOperation+0x1d0>
 8009b5a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009b5e:	f04f 0100 	mov.w	r1, #0
 8009b62:	f7fd fe97 	bl	8007894 <HAL_RCCEx_GetPeriphCLKFreq>
 8009b66:	61f8      	str	r0, [r7, #28]
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f000 8083 	beq.w	8009c76 <HAL_SD_ConfigWideBusOperation+0x1be>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	60bb      	str	r3, [r7, #8]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	60fb      	str	r3, [r7, #12]
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	613b      	str	r3, [r7, #16]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	691b      	ldr	r3, [r3, #16]
 8009b84:	617b      	str	r3, [r7, #20]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	695a      	ldr	r2, [r3, #20]
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	4950      	ldr	r1, [pc, #320]	@ (8009cd0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009b8e:	fba1 1303 	umull	r1, r3, r1, r3
 8009b92:	0e1b      	lsrs	r3, r3, #24
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d303      	bcc.n	8009ba0 <HAL_SD_ConfigWideBusOperation+0xe8>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	695b      	ldr	r3, [r3, #20]
 8009b9c:	61bb      	str	r3, [r7, #24]
 8009b9e:	e05a      	b.n	8009c56 <HAL_SD_ConfigWideBusOperation+0x19e>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ba8:	d103      	bne.n	8009bb2 <HAL_SD_ConfigWideBusOperation+0xfa>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	695b      	ldr	r3, [r3, #20]
 8009bae:	61bb      	str	r3, [r7, #24]
 8009bb0:	e051      	b.n	8009c56 <HAL_SD_ConfigWideBusOperation+0x19e>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bba:	d126      	bne.n	8009c0a <HAL_SD_ConfigWideBusOperation+0x152>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	695b      	ldr	r3, [r3, #20]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d10e      	bne.n	8009be2 <HAL_SD_ConfigWideBusOperation+0x12a>
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	4a43      	ldr	r2, [pc, #268]	@ (8009cd4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d906      	bls.n	8009bda <HAL_SD_ConfigWideBusOperation+0x122>
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	4a40      	ldr	r2, [pc, #256]	@ (8009cd0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd4:	0e5b      	lsrs	r3, r3, #25
 8009bd6:	61bb      	str	r3, [r7, #24]
 8009bd8:	e03d      	b.n	8009c56 <HAL_SD_ConfigWideBusOperation+0x19e>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	695b      	ldr	r3, [r3, #20]
 8009bde:	61bb      	str	r3, [r7, #24]
 8009be0:	e039      	b.n	8009c56 <HAL_SD_ConfigWideBusOperation+0x19e>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	695b      	ldr	r3, [r3, #20]
 8009be6:	005b      	lsls	r3, r3, #1
 8009be8:	69fa      	ldr	r2, [r7, #28]
 8009bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bee:	4a39      	ldr	r2, [pc, #228]	@ (8009cd4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d906      	bls.n	8009c02 <HAL_SD_ConfigWideBusOperation+0x14a>
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	4a36      	ldr	r2, [pc, #216]	@ (8009cd0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bfc:	0e5b      	lsrs	r3, r3, #25
 8009bfe:	61bb      	str	r3, [r7, #24]
 8009c00:	e029      	b.n	8009c56 <HAL_SD_ConfigWideBusOperation+0x19e>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	61bb      	str	r3, [r7, #24]
 8009c08:	e025      	b.n	8009c56 <HAL_SD_ConfigWideBusOperation+0x19e>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	695b      	ldr	r3, [r3, #20]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d10e      	bne.n	8009c30 <HAL_SD_ConfigWideBusOperation+0x178>
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	4a30      	ldr	r2, [pc, #192]	@ (8009cd8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d906      	bls.n	8009c28 <HAL_SD_ConfigWideBusOperation+0x170>
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	4a2c      	ldr	r2, [pc, #176]	@ (8009cd0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c22:	0e1b      	lsrs	r3, r3, #24
 8009c24:	61bb      	str	r3, [r7, #24]
 8009c26:	e016      	b.n	8009c56 <HAL_SD_ConfigWideBusOperation+0x19e>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	695b      	ldr	r3, [r3, #20]
 8009c2c:	61bb      	str	r3, [r7, #24]
 8009c2e:	e012      	b.n	8009c56 <HAL_SD_ConfigWideBusOperation+0x19e>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	005b      	lsls	r3, r3, #1
 8009c36:	69fa      	ldr	r2, [r7, #28]
 8009c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c3c:	4a26      	ldr	r2, [pc, #152]	@ (8009cd8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d906      	bls.n	8009c50 <HAL_SD_ConfigWideBusOperation+0x198>
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	4a22      	ldr	r2, [pc, #136]	@ (8009cd0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009c46:	fba2 2303 	umull	r2, r3, r2, r3
 8009c4a:	0e1b      	lsrs	r3, r3, #24
 8009c4c:	61bb      	str	r3, [r7, #24]
 8009c4e:	e002      	b.n	8009c56 <HAL_SD_ConfigWideBusOperation+0x19e>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	695b      	ldr	r3, [r3, #20]
 8009c54:	61bb      	str	r3, [r7, #24]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681c      	ldr	r4, [r3, #0]
 8009c5a:	466a      	mov	r2, sp
 8009c5c:	f107 0314 	add.w	r3, r7, #20
 8009c60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009c64:	e882 0003 	stmia.w	r2, {r0, r1}
 8009c68:	f107 0308 	add.w	r3, r7, #8
 8009c6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c6e:	4620      	mov	r0, r4
 8009c70:	f001 f80a 	bl	800ac88 <SDMMC_Init>
 8009c74:	e008      	b.n	8009c88 <HAL_SD_ConfigWideBusOperation+0x1d0>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c7a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	635a      	str	r2, [r3, #52]	@ 0x34
 8009c82:	2301      	movs	r3, #1
 8009c84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009c90:	4618      	mov	r0, r3
 8009c92:	f001 f8d7 	bl	800ae44 <SDMMC_CmdBlockLength>
 8009c96:	6238      	str	r0, [r7, #32]
 8009c98:	6a3b      	ldr	r3, [r7, #32]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00c      	beq.n	8009cb8 <HAL_SD_ConfigWideBusOperation+0x200>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8009ccc <HAL_SD_ConfigWideBusOperation+0x214>)
 8009ca4:	639a      	str	r2, [r3, #56]	@ 0x38
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009caa:	6a3b      	ldr	r3, [r7, #32]
 8009cac:	431a      	orrs	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8009cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	372c      	adds	r7, #44	@ 0x2c
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd90      	pop	{r4, r7, pc}
 8009ccc:	1fe00fff 	.word	0x1fe00fff
 8009cd0:	55e63b89 	.word	0x55e63b89
 8009cd4:	02faf080 	.word	0x02faf080
 8009cd8:	017d7840 	.word	0x017d7840

08009cdc <HAL_SD_GetCardState>:
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b086      	sub	sp, #24
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	f107 030c 	add.w	r3, r7, #12
 8009cec:	4619      	mov	r1, r3
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fa40 	bl	800a174 <SD_SendStatus>
 8009cf4:	6178      	str	r0, [r7, #20]
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d005      	beq.n	8009d08 <HAL_SD_GetCardState+0x2c>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	431a      	orrs	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	635a      	str	r2, [r3, #52]	@ 0x34
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	0a5b      	lsrs	r3, r3, #9
 8009d0c:	f003 030f 	and.w	r3, r3, #15
 8009d10:	613b      	str	r3, [r7, #16]
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	4618      	mov	r0, r3
 8009d16:	3718      	adds	r7, #24
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <SD_InitCard>:
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b090      	sub	sp, #64	@ 0x40
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	2300      	movs	r3, #0
 8009d26:	817b      	strh	r3, [r7, #10]
 8009d28:	f7f8 fbfa 	bl	8002520 <HAL_GetTick>
 8009d2c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f001 f801 	bl	800ad3a <SDMMC_GetPowerState>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d102      	bne.n	8009d44 <SD_InitCard+0x28>
 8009d3e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009d42:	e0b5      	b.n	8009eb0 <SD_InitCard+0x194>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d48:	2b03      	cmp	r3, #3
 8009d4a:	d02e      	beq.n	8009daa <SD_InitCard+0x8e>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f001 fa4c 	bl	800b1ee <SDMMC_CmdSendCID>
 8009d56:	63b8      	str	r0, [r7, #56]	@ 0x38
 8009d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d001      	beq.n	8009d62 <SD_InitCard+0x46>
 8009d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d60:	e0a6      	b.n	8009eb0 <SD_InitCard+0x194>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2100      	movs	r1, #0
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f001 f82c 	bl	800adc6 <SDMMC_GetResponse>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2104      	movs	r1, #4
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f001 f823 	bl	800adc6 <SDMMC_GetResponse>
 8009d80:	4602      	mov	r2, r0
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	671a      	str	r2, [r3, #112]	@ 0x70
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2108      	movs	r1, #8
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f001 f81a 	bl	800adc6 <SDMMC_GetResponse>
 8009d92:	4602      	mov	r2, r0
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	675a      	str	r2, [r3, #116]	@ 0x74
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	210c      	movs	r1, #12
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f001 f811 	bl	800adc6 <SDMMC_GetResponse>
 8009da4:	4602      	mov	r2, r0
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	679a      	str	r2, [r3, #120]	@ 0x78
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dae:	2b03      	cmp	r3, #3
 8009db0:	d01d      	beq.n	8009dee <SD_InitCard+0xd2>
 8009db2:	e019      	b.n	8009de8 <SD_InitCard+0xcc>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f107 020a 	add.w	r2, r7, #10
 8009dbc:	4611      	mov	r1, r2
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f001 fa54 	bl	800b26c <SDMMC_CmdSetRelAdd>
 8009dc4:	63b8      	str	r0, [r7, #56]	@ 0x38
 8009dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <SD_InitCard+0xb4>
 8009dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dce:	e06f      	b.n	8009eb0 <SD_InitCard+0x194>
 8009dd0:	f7f8 fba6 	bl	8002520 <HAL_GetTick>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	f241 3287 	movw	r2, #4999	@ 0x1387
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d902      	bls.n	8009de8 <SD_InitCard+0xcc>
 8009de2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009de6:	e063      	b.n	8009eb0 <SD_InitCard+0x194>
 8009de8:	897b      	ldrh	r3, [r7, #10]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d0e2      	beq.n	8009db4 <SD_InitCard+0x98>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009df2:	2b03      	cmp	r3, #3
 8009df4:	d036      	beq.n	8009e64 <SD_InitCard+0x148>
 8009df6:	897b      	ldrh	r3, [r7, #10]
 8009df8:	461a      	mov	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	645a      	str	r2, [r3, #68]	@ 0x44
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e06:	041b      	lsls	r3, r3, #16
 8009e08:	4619      	mov	r1, r3
 8009e0a:	4610      	mov	r0, r2
 8009e0c:	f001 fa0e 	bl	800b22c <SDMMC_CmdSendCSD>
 8009e10:	63b8      	str	r0, [r7, #56]	@ 0x38
 8009e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <SD_InitCard+0x100>
 8009e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e1a:	e049      	b.n	8009eb0 <SD_InitCard+0x194>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2100      	movs	r1, #0
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 ffcf 	bl	800adc6 <SDMMC_GetResponse>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2104      	movs	r1, #4
 8009e34:	4618      	mov	r0, r3
 8009e36:	f000 ffc6 	bl	800adc6 <SDMMC_GetResponse>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	661a      	str	r2, [r3, #96]	@ 0x60
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2108      	movs	r1, #8
 8009e46:	4618      	mov	r0, r3
 8009e48:	f000 ffbd 	bl	800adc6 <SDMMC_GetResponse>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	665a      	str	r2, [r3, #100]	@ 0x64
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	210c      	movs	r1, #12
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f000 ffb4 	bl	800adc6 <SDMMC_GetResponse>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	669a      	str	r2, [r3, #104]	@ 0x68
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2104      	movs	r1, #4
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f000 ffab 	bl	800adc6 <SDMMC_GetResponse>
 8009e70:	4603      	mov	r3, r0
 8009e72:	0d1a      	lsrs	r2, r3, #20
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	641a      	str	r2, [r3, #64]	@ 0x40
 8009e78:	f107 030c 	add.w	r3, r7, #12
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7ff fb8c 	bl	800959c <HAL_SD_GetCardCSD>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d002      	beq.n	8009e90 <SD_InitCard+0x174>
 8009e8a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009e8e:	e00f      	b.n	8009eb0 <SD_InitCard+0x194>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e98:	041b      	lsls	r3, r3, #16
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	f001 f8bd 	bl	800b01c <SDMMC_CmdSelDesel>
 8009ea2:	63b8      	str	r0, [r7, #56]	@ 0x38
 8009ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <SD_InitCard+0x192>
 8009eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eac:	e000      	b.n	8009eb0 <SD_InitCard+0x194>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3740      	adds	r7, #64	@ 0x40
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <SD_PowerON>:
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	60bb      	str	r3, [r7, #8]
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	617b      	str	r3, [r7, #20]
 8009ec8:	2300      	movs	r3, #0
 8009eca:	613b      	str	r3, [r7, #16]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f001 f8c6 	bl	800b062 <SDMMC_CmdGoIdleState>
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <SD_PowerON+0x2a>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	e072      	b.n	8009fc8 <SD_PowerON+0x110>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f001 f8d9 	bl	800b09e <SDMMC_CmdOperCond>
 8009eec:	60f8      	str	r0, [r7, #12]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ef4:	d10d      	bne.n	8009f12 <SD_PowerON+0x5a>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f001 f8ae 	bl	800b062 <SDMMC_CmdGoIdleState>
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d004      	beq.n	8009f18 <SD_PowerON+0x60>
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	e05a      	b.n	8009fc8 <SD_PowerON+0x110>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d137      	bne.n	8009f90 <SD_PowerON+0xd8>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2100      	movs	r1, #0
 8009f26:	4618      	mov	r0, r3
 8009f28:	f001 f8d9 	bl	800b0de <SDMMC_CmdAppCommand>
 8009f2c:	60f8      	str	r0, [r7, #12]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d02d      	beq.n	8009f90 <SD_PowerON+0xd8>
 8009f34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009f38:	e046      	b.n	8009fc8 <SD_PowerON+0x110>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2100      	movs	r1, #0
 8009f40:	4618      	mov	r0, r3
 8009f42:	f001 f8cc 	bl	800b0de <SDMMC_CmdAppCommand>
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d001      	beq.n	8009f52 <SD_PowerON+0x9a>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	e03a      	b.n	8009fc8 <SD_PowerON+0x110>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	491e      	ldr	r1, [pc, #120]	@ (8009fd0 <SD_PowerON+0x118>)
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f001 f8e3 	bl	800b124 <SDMMC_CmdAppOperCommand>
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d002      	beq.n	8009f6c <SD_PowerON+0xb4>
 8009f66:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009f6a:	e02d      	b.n	8009fc8 <SD_PowerON+0x110>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2100      	movs	r1, #0
 8009f72:	4618      	mov	r0, r3
 8009f74:	f000 ff27 	bl	800adc6 <SDMMC_GetResponse>
 8009f78:	6178      	str	r0, [r7, #20]
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	0fdb      	lsrs	r3, r3, #31
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d101      	bne.n	8009f86 <SD_PowerON+0xce>
 8009f82:	2301      	movs	r3, #1
 8009f84:	e000      	b.n	8009f88 <SD_PowerON+0xd0>
 8009f86:	2300      	movs	r3, #0
 8009f88:	613b      	str	r3, [r7, #16]
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	60bb      	str	r3, [r7, #8]
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d802      	bhi.n	8009fa0 <SD_PowerON+0xe8>
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d0cc      	beq.n	8009f3a <SD_PowerON+0x82>
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d902      	bls.n	8009fb0 <SD_PowerON+0xf8>
 8009faa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009fae:	e00b      	b.n	8009fc8 <SD_PowerON+0x110>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	639a      	str	r2, [r3, #56]	@ 0x38
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d002      	beq.n	8009fc6 <SD_PowerON+0x10e>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	639a      	str	r2, [r3, #56]	@ 0x38
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3718      	adds	r7, #24
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	c1100000 	.word	0xc1100000

08009fd4 <SD_SendSDStatus>:
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b08c      	sub	sp, #48	@ 0x30
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
 8009fde:	f7f8 fa9f 	bl	8002520 <HAL_GetTick>
 8009fe2:	6278      	str	r0, [r7, #36]	@ 0x24
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2100      	movs	r1, #0
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 fee9 	bl	800adc6 <SDMMC_GetResponse>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ffa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ffe:	d102      	bne.n	800a006 <SD_SendSDStatus+0x32>
 800a000:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a004:	e0b0      	b.n	800a168 <SD_SendSDStatus+0x194>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2140      	movs	r1, #64	@ 0x40
 800a00c:	4618      	mov	r0, r3
 800a00e:	f000 ff19 	bl	800ae44 <SDMMC_CmdBlockLength>
 800a012:	6238      	str	r0, [r7, #32]
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d005      	beq.n	800a026 <SD_SendSDStatus+0x52>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	635a      	str	r2, [r3, #52]	@ 0x34
 800a022:	6a3b      	ldr	r3, [r7, #32]
 800a024:	e0a0      	b.n	800a168 <SD_SendSDStatus+0x194>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a02e:	041b      	lsls	r3, r3, #16
 800a030:	4619      	mov	r1, r3
 800a032:	4610      	mov	r0, r2
 800a034:	f001 f853 	bl	800b0de <SDMMC_CmdAppCommand>
 800a038:	6238      	str	r0, [r7, #32]
 800a03a:	6a3b      	ldr	r3, [r7, #32]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d005      	beq.n	800a04c <SD_SendSDStatus+0x78>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	635a      	str	r2, [r3, #52]	@ 0x34
 800a048:	6a3b      	ldr	r3, [r7, #32]
 800a04a:	e08d      	b.n	800a168 <SD_SendSDStatus+0x194>
 800a04c:	f04f 33ff 	mov.w	r3, #4294967295
 800a050:	60bb      	str	r3, [r7, #8]
 800a052:	2340      	movs	r3, #64	@ 0x40
 800a054:	60fb      	str	r3, [r7, #12]
 800a056:	2360      	movs	r3, #96	@ 0x60
 800a058:	613b      	str	r3, [r7, #16]
 800a05a:	2302      	movs	r3, #2
 800a05c:	617b      	str	r3, [r7, #20]
 800a05e:	2300      	movs	r3, #0
 800a060:	61bb      	str	r3, [r7, #24]
 800a062:	2301      	movs	r3, #1
 800a064:	61fb      	str	r3, [r7, #28]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f107 0208 	add.w	r2, r7, #8
 800a06e:	4611      	mov	r1, r2
 800a070:	4618      	mov	r0, r3
 800a072:	f000 febb 	bl	800adec <SDMMC_ConfigData>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f001 f93b 	bl	800b2f6 <SDMMC_CmdStatusRegister>
 800a080:	6238      	str	r0, [r7, #32]
 800a082:	6a3b      	ldr	r3, [r7, #32]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d02b      	beq.n	800a0e0 <SD_SendSDStatus+0x10c>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	635a      	str	r2, [r3, #52]	@ 0x34
 800a090:	6a3b      	ldr	r3, [r7, #32]
 800a092:	e069      	b.n	800a168 <SD_SendSDStatus+0x194>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a09a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d013      	beq.n	800a0ca <SD_SendSDStatus+0xf6>
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0a6:	e00d      	b.n	800a0c4 <SD_SendSDStatus+0xf0>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f000 fe15 	bl	800acdc <SDMMC_ReadFIFO>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b6:	601a      	str	r2, [r3, #0]
 800a0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c6:	2b07      	cmp	r3, #7
 800a0c8:	d9ee      	bls.n	800a0a8 <SD_SendSDStatus+0xd4>
 800a0ca:	f7f8 fa29 	bl	8002520 <HAL_GetTick>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d8:	d102      	bne.n	800a0e0 <SD_SendSDStatus+0x10c>
 800a0da:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a0de:	e043      	b.n	800a168 <SD_SendSDStatus+0x194>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0e6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d0d2      	beq.n	800a094 <SD_SendSDStatus+0xc0>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0f4:	f003 0308 	and.w	r3, r3, #8
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <SD_SendSDStatus+0x12c>
 800a0fc:	2308      	movs	r3, #8
 800a0fe:	e033      	b.n	800a168 <SD_SendSDStatus+0x194>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a106:	f003 0302 	and.w	r3, r3, #2
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <SD_SendSDStatus+0x13e>
 800a10e:	2302      	movs	r3, #2
 800a110:	e02a      	b.n	800a168 <SD_SendSDStatus+0x194>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a118:	f003 0320 	and.w	r3, r3, #32
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d017      	beq.n	800a150 <SD_SendSDStatus+0x17c>
 800a120:	2320      	movs	r3, #32
 800a122:	e021      	b.n	800a168 <SD_SendSDStatus+0x194>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4618      	mov	r0, r3
 800a12a:	f000 fdd7 	bl	800acdc <SDMMC_ReadFIFO>
 800a12e:	4602      	mov	r2, r0
 800a130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a136:	3304      	adds	r3, #4
 800a138:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a13a:	f7f8 f9f1 	bl	8002520 <HAL_GetTick>
 800a13e:	4602      	mov	r2, r0
 800a140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a148:	d102      	bne.n	800a150 <SD_SendSDStatus+0x17c>
 800a14a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a14e:	e00b      	b.n	800a168 <SD_SendSDStatus+0x194>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a156:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1e2      	bne.n	800a124 <SD_SendSDStatus+0x150>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a03      	ldr	r2, [pc, #12]	@ (800a170 <SD_SendSDStatus+0x19c>)
 800a164:	639a      	str	r2, [r3, #56]	@ 0x38
 800a166:	2300      	movs	r3, #0
 800a168:	4618      	mov	r0, r3
 800a16a:	3730      	adds	r7, #48	@ 0x30
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	18000f3a 	.word	0x18000f3a

0800a174 <SD_SendStatus>:
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d102      	bne.n	800a18a <SD_SendStatus+0x16>
 800a184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a188:	e018      	b.n	800a1bc <SD_SendStatus+0x48>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a192:	041b      	lsls	r3, r3, #16
 800a194:	4619      	mov	r1, r3
 800a196:	4610      	mov	r0, r2
 800a198:	f001 f88a 	bl	800b2b0 <SDMMC_CmdSendStatus>
 800a19c:	60f8      	str	r0, [r7, #12]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d001      	beq.n	800a1a8 <SD_SendStatus+0x34>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	e009      	b.n	800a1bc <SD_SendStatus+0x48>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 fe09 	bl	800adc6 <SDMMC_GetResponse>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	601a      	str	r2, [r3, #0]
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <SD_WideBus_Enable>:
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b086      	sub	sp, #24
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	60fb      	str	r3, [r7, #12]
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	613b      	str	r3, [r7, #16]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2100      	movs	r1, #0
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f000 fdf3 	bl	800adc6 <SDMMC_GetResponse>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1ea:	d102      	bne.n	800a1f2 <SD_WideBus_Enable+0x2e>
 800a1ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a1f0:	e02f      	b.n	800a252 <SD_WideBus_Enable+0x8e>
 800a1f2:	f107 030c 	add.w	r3, r7, #12
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 f879 	bl	800a2f0 <SD_FindSCR>
 800a1fe:	6178      	str	r0, [r7, #20]
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <SD_WideBus_Enable+0x46>
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	e023      	b.n	800a252 <SD_WideBus_Enable+0x8e>
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a210:	2b00      	cmp	r3, #0
 800a212:	d01c      	beq.n	800a24e <SD_WideBus_Enable+0x8a>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a21c:	041b      	lsls	r3, r3, #16
 800a21e:	4619      	mov	r1, r3
 800a220:	4610      	mov	r0, r2
 800a222:	f000 ff5c 	bl	800b0de <SDMMC_CmdAppCommand>
 800a226:	6178      	str	r0, [r7, #20]
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d001      	beq.n	800a232 <SD_WideBus_Enable+0x6e>
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	e00f      	b.n	800a252 <SD_WideBus_Enable+0x8e>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2102      	movs	r1, #2
 800a238:	4618      	mov	r0, r3
 800a23a:	f000 ff93 	bl	800b164 <SDMMC_CmdBusWidth>
 800a23e:	6178      	str	r0, [r7, #20]
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d001      	beq.n	800a24a <SD_WideBus_Enable+0x86>
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	e003      	b.n	800a252 <SD_WideBus_Enable+0x8e>
 800a24a:	2300      	movs	r3, #0
 800a24c:	e001      	b.n	800a252 <SD_WideBus_Enable+0x8e>
 800a24e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a252:	4618      	mov	r0, r3
 800a254:	3718      	adds	r7, #24
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <SD_WideBus_Disable>:
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b086      	sub	sp, #24
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	2300      	movs	r3, #0
 800a264:	60fb      	str	r3, [r7, #12]
 800a266:	2300      	movs	r3, #0
 800a268:	613b      	str	r3, [r7, #16]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2100      	movs	r1, #0
 800a270:	4618      	mov	r0, r3
 800a272:	f000 fda8 	bl	800adc6 <SDMMC_GetResponse>
 800a276:	4603      	mov	r3, r0
 800a278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a27c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a280:	d102      	bne.n	800a288 <SD_WideBus_Disable+0x2e>
 800a282:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a286:	e02f      	b.n	800a2e8 <SD_WideBus_Disable+0x8e>
 800a288:	f107 030c 	add.w	r3, r7, #12
 800a28c:	4619      	mov	r1, r3
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 f82e 	bl	800a2f0 <SD_FindSCR>
 800a294:	6178      	str	r0, [r7, #20]
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d001      	beq.n	800a2a0 <SD_WideBus_Disable+0x46>
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	e023      	b.n	800a2e8 <SD_WideBus_Disable+0x8e>
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d01c      	beq.n	800a2e4 <SD_WideBus_Disable+0x8a>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2b2:	041b      	lsls	r3, r3, #16
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	4610      	mov	r0, r2
 800a2b8:	f000 ff11 	bl	800b0de <SDMMC_CmdAppCommand>
 800a2bc:	6178      	str	r0, [r7, #20]
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d001      	beq.n	800a2c8 <SD_WideBus_Disable+0x6e>
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	e00f      	b.n	800a2e8 <SD_WideBus_Disable+0x8e>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f000 ff48 	bl	800b164 <SDMMC_CmdBusWidth>
 800a2d4:	6178      	str	r0, [r7, #20]
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d001      	beq.n	800a2e0 <SD_WideBus_Disable+0x86>
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	e003      	b.n	800a2e8 <SD_WideBus_Disable+0x8e>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	e001      	b.n	800a2e8 <SD_WideBus_Disable+0x8e>
 800a2e4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3718      	adds	r7, #24
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <SD_FindSCR>:
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b08e      	sub	sp, #56	@ 0x38
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
 800a2fa:	f7f8 f911 	bl	8002520 <HAL_GetTick>
 800a2fe:	6338      	str	r0, [r7, #48]	@ 0x30
 800a300:	2300      	movs	r3, #0
 800a302:	637b      	str	r3, [r7, #52]	@ 0x34
 800a304:	2300      	movs	r3, #0
 800a306:	60bb      	str	r3, [r7, #8]
 800a308:	2300      	movs	r3, #0
 800a30a:	60fb      	str	r3, [r7, #12]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2108      	movs	r1, #8
 800a316:	4618      	mov	r0, r3
 800a318:	f000 fd94 	bl	800ae44 <SDMMC_CmdBlockLength>
 800a31c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a320:	2b00      	cmp	r3, #0
 800a322:	d001      	beq.n	800a328 <SD_FindSCR+0x38>
 800a324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a326:	e0ad      	b.n	800a484 <SD_FindSCR+0x194>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a330:	041b      	lsls	r3, r3, #16
 800a332:	4619      	mov	r1, r3
 800a334:	4610      	mov	r0, r2
 800a336:	f000 fed2 	bl	800b0de <SDMMC_CmdAppCommand>
 800a33a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d001      	beq.n	800a346 <SD_FindSCR+0x56>
 800a342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a344:	e09e      	b.n	800a484 <SD_FindSCR+0x194>
 800a346:	f04f 33ff 	mov.w	r3, #4294967295
 800a34a:	613b      	str	r3, [r7, #16]
 800a34c:	2308      	movs	r3, #8
 800a34e:	617b      	str	r3, [r7, #20]
 800a350:	2330      	movs	r3, #48	@ 0x30
 800a352:	61bb      	str	r3, [r7, #24]
 800a354:	2302      	movs	r3, #2
 800a356:	61fb      	str	r3, [r7, #28]
 800a358:	2300      	movs	r3, #0
 800a35a:	623b      	str	r3, [r7, #32]
 800a35c:	2301      	movs	r3, #1
 800a35e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f107 0210 	add.w	r2, r7, #16
 800a368:	4611      	mov	r1, r2
 800a36a:	4618      	mov	r0, r3
 800a36c:	f000 fd3e 	bl	800adec <SDMMC_ConfigData>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4618      	mov	r0, r3
 800a376:	f000 ff18 	bl	800b1aa <SDMMC_CmdSendSCR>
 800a37a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d027      	beq.n	800a3d2 <SD_FindSCR+0xe2>
 800a382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a384:	e07e      	b.n	800a484 <SD_FindSCR+0x194>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a38c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a390:	2b00      	cmp	r3, #0
 800a392:	d113      	bne.n	800a3bc <SD_FindSCR+0xcc>
 800a394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a396:	2b00      	cmp	r3, #0
 800a398:	d110      	bne.n	800a3bc <SD_FindSCR+0xcc>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f000 fc9c 	bl	800acdc <SDMMC_ReadFIFO>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	60bb      	str	r3, [r7, #8]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f000 fc95 	bl	800acdc <SDMMC_ReadFIFO>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	60fb      	str	r3, [r7, #12]
 800a3b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3bc:	f7f8 f8b0 	bl	8002520 <HAL_GetTick>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ca:	d102      	bne.n	800a3d2 <SD_FindSCR+0xe2>
 800a3cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a3d0:	e058      	b.n	800a484 <SD_FindSCR+0x194>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3d8:	f240 532a 	movw	r3, #1322	@ 0x52a
 800a3dc:	4013      	ands	r3, r2
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d0d1      	beq.n	800a386 <SD_FindSCR+0x96>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3e8:	f003 0308 	and.w	r3, r3, #8
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d005      	beq.n	800a3fc <SD_FindSCR+0x10c>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2208      	movs	r2, #8
 800a3f6:	639a      	str	r2, [r3, #56]	@ 0x38
 800a3f8:	2308      	movs	r3, #8
 800a3fa:	e043      	b.n	800a484 <SD_FindSCR+0x194>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a402:	f003 0302 	and.w	r3, r3, #2
 800a406:	2b00      	cmp	r3, #0
 800a408:	d005      	beq.n	800a416 <SD_FindSCR+0x126>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2202      	movs	r2, #2
 800a410:	639a      	str	r2, [r3, #56]	@ 0x38
 800a412:	2302      	movs	r3, #2
 800a414:	e036      	b.n	800a484 <SD_FindSCR+0x194>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a41c:	f003 0320 	and.w	r3, r3, #32
 800a420:	2b00      	cmp	r3, #0
 800a422:	d005      	beq.n	800a430 <SD_FindSCR+0x140>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2220      	movs	r2, #32
 800a42a:	639a      	str	r2, [r3, #56]	@ 0x38
 800a42c:	2320      	movs	r3, #32
 800a42e:	e029      	b.n	800a484 <SD_FindSCR+0x194>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a15      	ldr	r2, [pc, #84]	@ (800a48c <SD_FindSCR+0x19c>)
 800a436:	639a      	str	r2, [r3, #56]	@ 0x38
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	061a      	lsls	r2, r3, #24
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	021b      	lsls	r3, r3, #8
 800a440:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a444:	431a      	orrs	r2, r3
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	0a1b      	lsrs	r3, r3, #8
 800a44a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a44e:	431a      	orrs	r2, r3
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	0e1b      	lsrs	r3, r3, #24
 800a454:	431a      	orrs	r2, r3
 800a456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a458:	601a      	str	r2, [r3, #0]
 800a45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a45c:	3304      	adds	r3, #4
 800a45e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	061a      	lsls	r2, r3, #24
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	021b      	lsls	r3, r3, #8
 800a468:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a46c:	431a      	orrs	r2, r3
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	0a1b      	lsrs	r3, r3, #8
 800a472:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a476:	431a      	orrs	r2, r3
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	0e1b      	lsrs	r3, r3, #24
 800a47c:	431a      	orrs	r2, r3
 800a47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a480:	601a      	str	r2, [r3, #0]
 800a482:	2300      	movs	r3, #0
 800a484:	4618      	mov	r0, r3
 800a486:	3738      	adds	r7, #56	@ 0x38
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	18000f3a 	.word	0x18000f3a

0800a490 <HAL_SPI_Init>:
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d101      	bne.n	800a4a2 <HAL_SPI_Init+0x12>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e10f      	b.n	800a6c2 <HAL_SPI_Init+0x232>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	629a      	str	r2, [r3, #40]	@ 0x28
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a87      	ldr	r2, [pc, #540]	@ (800a6cc <HAL_SPI_Init+0x23c>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d00f      	beq.n	800a4d2 <HAL_SPI_Init+0x42>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a86      	ldr	r2, [pc, #536]	@ (800a6d0 <HAL_SPI_Init+0x240>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d00a      	beq.n	800a4d2 <HAL_SPI_Init+0x42>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a84      	ldr	r2, [pc, #528]	@ (800a6d4 <HAL_SPI_Init+0x244>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d005      	beq.n	800a4d2 <HAL_SPI_Init+0x42>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	2b0f      	cmp	r3, #15
 800a4cc:	d901      	bls.n	800a4d2 <HAL_SPI_Init+0x42>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e0f7      	b.n	800a6c2 <HAL_SPI_Init+0x232>
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fbbc 	bl	800ac50 <SPI_GetPacketSize>
 800a4d8:	60f8      	str	r0, [r7, #12]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a7b      	ldr	r2, [pc, #492]	@ (800a6cc <HAL_SPI_Init+0x23c>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d00c      	beq.n	800a4fe <HAL_SPI_Init+0x6e>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a79      	ldr	r2, [pc, #484]	@ (800a6d0 <HAL_SPI_Init+0x240>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d007      	beq.n	800a4fe <HAL_SPI_Init+0x6e>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a78      	ldr	r2, [pc, #480]	@ (800a6d4 <HAL_SPI_Init+0x244>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d002      	beq.n	800a4fe <HAL_SPI_Init+0x6e>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2b08      	cmp	r3, #8
 800a4fc:	d811      	bhi.n	800a522 <HAL_SPI_Init+0x92>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a72      	ldr	r2, [pc, #456]	@ (800a6cc <HAL_SPI_Init+0x23c>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d009      	beq.n	800a51c <HAL_SPI_Init+0x8c>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a70      	ldr	r2, [pc, #448]	@ (800a6d0 <HAL_SPI_Init+0x240>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d004      	beq.n	800a51c <HAL_SPI_Init+0x8c>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a6f      	ldr	r2, [pc, #444]	@ (800a6d4 <HAL_SPI_Init+0x244>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d104      	bne.n	800a526 <HAL_SPI_Init+0x96>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2b10      	cmp	r3, #16
 800a520:	d901      	bls.n	800a526 <HAL_SPI_Init+0x96>
 800a522:	2301      	movs	r3, #1
 800a524:	e0cd      	b.n	800a6c2 <HAL_SPI_Init+0x232>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d106      	bne.n	800a540 <HAL_SPI_Init+0xb0>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7f7 fde0 	bl	8002100 <HAL_SPI_MspInit>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2202      	movs	r2, #2
 800a544:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f022 0201 	bic.w	r2, r2, #1
 800a556:	601a      	str	r2, [r3, #0]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a562:	60bb      	str	r3, [r7, #8]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	699b      	ldr	r3, [r3, #24]
 800a568:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a56c:	d119      	bne.n	800a5a2 <HAL_SPI_Init+0x112>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a576:	d103      	bne.n	800a580 <HAL_SPI_Init+0xf0>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d008      	beq.n	800a592 <HAL_SPI_Init+0x102>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10c      	bne.n	800a5a2 <HAL_SPI_Init+0x112>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a58c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a590:	d107      	bne.n	800a5a2 <HAL_SPI_Init+0x112>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a5a0:	601a      	str	r2, [r3, #0]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00f      	beq.n	800a5ce <HAL_SPI_Init+0x13e>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	2b06      	cmp	r3, #6
 800a5b4:	d90b      	bls.n	800a5ce <HAL_SPI_Init+0x13e>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	430a      	orrs	r2, r1
 800a5ca:	601a      	str	r2, [r3, #0]
 800a5cc:	e007      	b.n	800a5de <HAL_SPI_Init+0x14e>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a5dc:	601a      	str	r2, [r3, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	69da      	ldr	r2, [r3, #28]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e6:	431a      	orrs	r2, r3
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	431a      	orrs	r2, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5f0:	ea42 0103 	orr.w	r1, r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	68da      	ldr	r2, [r3, #12]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	430a      	orrs	r2, r1
 800a5fe:	609a      	str	r2, [r3, #8]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a608:	431a      	orrs	r2, r3
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a60e:	431a      	orrs	r2, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	699b      	ldr	r3, [r3, #24]
 800a614:	431a      	orrs	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	431a      	orrs	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	695b      	ldr	r3, [r3, #20]
 800a620:	431a      	orrs	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a1b      	ldr	r3, [r3, #32]
 800a626:	431a      	orrs	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	431a      	orrs	r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a632:	431a      	orrs	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	431a      	orrs	r2, r3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a63e:	ea42 0103 	orr.w	r1, r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	430a      	orrs	r2, r1
 800a64c:	60da      	str	r2, [r3, #12]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d113      	bne.n	800a67e <HAL_SPI_Init+0x1ee>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a668:	609a      	str	r2, [r3, #8]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a67c:	609a      	str	r2, [r3, #8]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f022 0201 	bic.w	r2, r2, #1
 800a68c:	651a      	str	r2, [r3, #80]	@ 0x50
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00a      	beq.n	800a6b0 <HAL_SPI_Init+0x220>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	430a      	orrs	r2, r1
 800a6ae:	60da      	str	r2, [r3, #12]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	40013000 	.word	0x40013000
 800a6d0:	40003800 	.word	0x40003800
 800a6d4:	40003c00 	.word	0x40003c00

0800a6d8 <HAL_SPI_Transmit>:
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b088      	sub	sp, #32
 800a6dc:	af02      	add	r7, sp, #8
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	603b      	str	r3, [r7, #0]
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	80fb      	strh	r3, [r7, #6]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	3320      	adds	r3, #32
 800a6ee:	617b      	str	r3, [r7, #20]
 800a6f0:	f7f7 ff16 	bl	8002520 <HAL_GetTick>
 800a6f4:	6138      	str	r0, [r7, #16]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d001      	beq.n	800a706 <HAL_SPI_Transmit+0x2e>
 800a702:	2302      	movs	r3, #2
 800a704:	e1d1      	b.n	800aaaa <HAL_SPI_Transmit+0x3d2>
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d002      	beq.n	800a712 <HAL_SPI_Transmit+0x3a>
 800a70c:	88fb      	ldrh	r3, [r7, #6]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d101      	bne.n	800a716 <HAL_SPI_Transmit+0x3e>
 800a712:	2301      	movs	r3, #1
 800a714:	e1c9      	b.n	800aaaa <HAL_SPI_Transmit+0x3d2>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d101      	bne.n	800a724 <HAL_SPI_Transmit+0x4c>
 800a720:	2302      	movs	r3, #2
 800a722:	e1c2      	b.n	800aaaa <HAL_SPI_Transmit+0x3d2>
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2203      	movs	r2, #3
 800a730:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2200      	movs	r2, #0
 800a738:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	88fa      	ldrh	r2, [r7, #6]
 800a746:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	88fa      	ldrh	r2, [r7, #6]
 800a74e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	665a      	str	r2, [r3, #100]	@ 0x64
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2200      	movs	r2, #0
 800a76c:	675a      	str	r2, [r3, #116]	@ 0x74
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2200      	movs	r2, #0
 800a772:	671a      	str	r2, [r3, #112]	@ 0x70
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a77c:	d108      	bne.n	800a790 <HAL_SPI_Transmit+0xb8>
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a78c:	601a      	str	r2, [r3, #0]
 800a78e:	e009      	b.n	800a7a4 <HAL_SPI_Transmit+0xcc>
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a7a2:	60da      	str	r2, [r3, #12]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	685a      	ldr	r2, [r3, #4]
 800a7aa:	4b96      	ldr	r3, [pc, #600]	@ (800aa04 <HAL_SPI_Transmit+0x32c>)
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	88f9      	ldrh	r1, [r7, #6]
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	6812      	ldr	r2, [r2, #0]
 800a7b4:	430b      	orrs	r3, r1
 800a7b6:	6053      	str	r3, [r2, #4]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f042 0201 	orr.w	r2, r2, #1
 800a7c6:	601a      	str	r2, [r3, #0]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a7d0:	d107      	bne.n	800a7e2 <HAL_SPI_Transmit+0x10a>
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7e0:	601a      	str	r2, [r3, #0]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	2b0f      	cmp	r3, #15
 800a7e8:	d947      	bls.n	800a87a <HAL_SPI_Transmit+0x1a2>
 800a7ea:	e03f      	b.n	800a86c <HAL_SPI_Transmit+0x194>
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	695b      	ldr	r3, [r3, #20]
 800a7f2:	f003 0302 	and.w	r3, r3, #2
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d114      	bne.n	800a824 <HAL_SPI_Transmit+0x14c>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	6812      	ldr	r2, [r2, #0]
 800a804:	621a      	str	r2, [r3, #32]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a80a:	1d1a      	adds	r2, r3, #4
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a816:	b29b      	uxth	r3, r3
 800a818:	3b01      	subs	r3, #1
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a822:	e023      	b.n	800a86c <HAL_SPI_Transmit+0x194>
 800a824:	f7f7 fe7c 	bl	8002520 <HAL_GetTick>
 800a828:	4602      	mov	r2, r0
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	429a      	cmp	r2, r3
 800a832:	d803      	bhi.n	800a83c <HAL_SPI_Transmit+0x164>
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a83a:	d102      	bne.n	800a842 <HAL_SPI_Transmit+0x16a>
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d114      	bne.n	800a86c <HAL_SPI_Transmit+0x194>
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f000 f936 	bl	800aab4 <SPI_CloseTransfer>
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a84e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800a868:	2303      	movs	r3, #3
 800a86a:	e11e      	b.n	800aaaa <HAL_SPI_Transmit+0x3d2>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a872:	b29b      	uxth	r3, r3
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1b9      	bne.n	800a7ec <HAL_SPI_Transmit+0x114>
 800a878:	e0f1      	b.n	800aa5e <HAL_SPI_Transmit+0x386>
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	2b07      	cmp	r3, #7
 800a880:	f240 80e6 	bls.w	800aa50 <HAL_SPI_Transmit+0x378>
 800a884:	e05d      	b.n	800a942 <HAL_SPI_Transmit+0x26a>
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	695b      	ldr	r3, [r3, #20]
 800a88c:	f003 0302 	and.w	r3, r3, #2
 800a890:	2b02      	cmp	r3, #2
 800a892:	d132      	bne.n	800a8fa <HAL_SPI_Transmit+0x222>
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d918      	bls.n	800a8d2 <HAL_SPI_Transmit+0x1fa>
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d014      	beq.n	800a8d2 <HAL_SPI_Transmit+0x1fa>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	6812      	ldr	r2, [r2, #0]
 800a8b2:	621a      	str	r2, [r3, #32]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8b8:	1d1a      	adds	r2, r3, #4
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	3b02      	subs	r3, #2
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a8d0:	e037      	b.n	800a942 <HAL_SPI_Transmit+0x26a>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8d6:	881a      	ldrh	r2, [r3, #0]
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	801a      	strh	r2, [r3, #0]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8e0:	1c9a      	adds	r2, r3, #2
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a8f8:	e023      	b.n	800a942 <HAL_SPI_Transmit+0x26a>
 800a8fa:	f7f7 fe11 	bl	8002520 <HAL_GetTick>
 800a8fe:	4602      	mov	r2, r0
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	1ad3      	subs	r3, r2, r3
 800a904:	683a      	ldr	r2, [r7, #0]
 800a906:	429a      	cmp	r2, r3
 800a908:	d803      	bhi.n	800a912 <HAL_SPI_Transmit+0x23a>
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a910:	d102      	bne.n	800a918 <HAL_SPI_Transmit+0x240>
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d114      	bne.n	800a942 <HAL_SPI_Transmit+0x26a>
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f000 f8cb 	bl	800aab4 <SPI_CloseTransfer>
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a924:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800a93e:	2303      	movs	r3, #3
 800a940:	e0b3      	b.n	800aaaa <HAL_SPI_Transmit+0x3d2>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a948:	b29b      	uxth	r3, r3
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d19b      	bne.n	800a886 <HAL_SPI_Transmit+0x1ae>
 800a94e:	e086      	b.n	800aa5e <HAL_SPI_Transmit+0x386>
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	695b      	ldr	r3, [r3, #20]
 800a956:	f003 0302 	and.w	r3, r3, #2
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d154      	bne.n	800aa08 <HAL_SPI_Transmit+0x330>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a964:	b29b      	uxth	r3, r3
 800a966:	2b03      	cmp	r3, #3
 800a968:	d918      	bls.n	800a99c <HAL_SPI_Transmit+0x2c4>
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a96e:	2b40      	cmp	r3, #64	@ 0x40
 800a970:	d914      	bls.n	800a99c <HAL_SPI_Transmit+0x2c4>
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	6812      	ldr	r2, [r2, #0]
 800a97c:	621a      	str	r2, [r3, #32]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a982:	1d1a      	adds	r2, r3, #4
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a98e:	b29b      	uxth	r3, r3
 800a990:	3b04      	subs	r3, #4
 800a992:	b29a      	uxth	r2, r3
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a99a:	e059      	b.n	800aa50 <HAL_SPI_Transmit+0x378>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d917      	bls.n	800a9d8 <HAL_SPI_Transmit+0x300>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d013      	beq.n	800a9d8 <HAL_SPI_Transmit+0x300>
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9b4:	881a      	ldrh	r2, [r3, #0]
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	801a      	strh	r2, [r3, #0]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9be:	1c9a      	adds	r2, r3, #2
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	3b02      	subs	r3, #2
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a9d6:	e03b      	b.n	800aa50 <HAL_SPI_Transmit+0x378>
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	3320      	adds	r3, #32
 800a9e2:	7812      	ldrb	r2, [r2, #0]
 800a9e4:	701a      	strb	r2, [r3, #0]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9ea:	1c5a      	adds	r2, r3, #1
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800aa02:	e025      	b.n	800aa50 <HAL_SPI_Transmit+0x378>
 800aa04:	ffff0000 	.word	0xffff0000
 800aa08:	f7f7 fd8a 	bl	8002520 <HAL_GetTick>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d803      	bhi.n	800aa20 <HAL_SPI_Transmit+0x348>
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1e:	d102      	bne.n	800aa26 <HAL_SPI_Transmit+0x34e>
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d114      	bne.n	800aa50 <HAL_SPI_Transmit+0x378>
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f000 f844 	bl	800aab4 <SPI_CloseTransfer>
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa32:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	e02c      	b.n	800aaaa <HAL_SPI_Transmit+0x3d2>
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f47f af79 	bne.w	800a950 <HAL_SPI_Transmit+0x278>
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	9300      	str	r3, [sp, #0]
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	2200      	movs	r2, #0
 800aa66:	2108      	movs	r1, #8
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f000 f8c3 	bl	800abf4 <SPI_WaitOnFlagUntilTimeout>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d007      	beq.n	800aa84 <HAL_SPI_Transmit+0x3ac>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa7a:	f043 0220 	orr.w	r2, r3, #32
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800aa84:	68f8      	ldr	r0, [r7, #12]
 800aa86:	f000 f815 	bl	800aab4 <SPI_CloseTransfer>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d001      	beq.n	800aaa8 <HAL_SPI_Transmit+0x3d0>
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e000      	b.n	800aaaa <HAL_SPI_Transmit+0x3d2>
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3718      	adds	r7, #24
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop

0800aab4 <SPI_CloseTransfer>:
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	60fb      	str	r3, [r7, #12]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	699a      	ldr	r2, [r3, #24]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f042 0208 	orr.w	r2, r2, #8
 800aad2:	619a      	str	r2, [r3, #24]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	699a      	ldr	r2, [r3, #24]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f042 0210 	orr.w	r2, r2, #16
 800aae2:	619a      	str	r2, [r3, #24]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f022 0201 	bic.w	r2, r2, #1
 800aaf2:	601a      	str	r2, [r3, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	6919      	ldr	r1, [r3, #16]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	4b3c      	ldr	r3, [pc, #240]	@ (800abf0 <SPI_CloseTransfer+0x13c>)
 800ab00:	400b      	ands	r3, r1
 800ab02:	6113      	str	r3, [r2, #16]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	689a      	ldr	r2, [r3, #8]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ab12:	609a      	str	r2, [r3, #8]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	2b04      	cmp	r3, #4
 800ab1e:	d014      	beq.n	800ab4a <SPI_CloseTransfer+0x96>
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f003 0320 	and.w	r3, r3, #32
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00f      	beq.n	800ab4a <SPI_CloseTransfer+0x96>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab30:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	699a      	ldr	r2, [r3, #24]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f042 0220 	orr.w	r2, r2, #32
 800ab48:	619a      	str	r2, [r3, #24]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	2b03      	cmp	r3, #3
 800ab54:	d014      	beq.n	800ab80 <SPI_CloseTransfer+0xcc>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00f      	beq.n	800ab80 <SPI_CloseTransfer+0xcc>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab66:	f043 0204 	orr.w	r2, r3, #4
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	699a      	ldr	r2, [r3, #24]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab7e:	619a      	str	r2, [r3, #24]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00f      	beq.n	800abaa <SPI_CloseTransfer+0xf6>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab90:	f043 0201 	orr.w	r2, r3, #1
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	699a      	ldr	r2, [r3, #24]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aba8:	619a      	str	r2, [r3, #24]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00f      	beq.n	800abd4 <SPI_CloseTransfer+0x120>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abba:	f043 0208 	orr.w	r2, r3, #8
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	699a      	ldr	r2, [r3, #24]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800abd2:	619a      	str	r2, [r3, #24]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800abe4:	bf00      	nop
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr
 800abf0:	fffffc90 	.word	0xfffffc90

0800abf4 <SPI_WaitOnFlagUntilTimeout>:
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	603b      	str	r3, [r7, #0]
 800ac00:	4613      	mov	r3, r2
 800ac02:	71fb      	strb	r3, [r7, #7]
 800ac04:	e010      	b.n	800ac28 <SPI_WaitOnFlagUntilTimeout+0x34>
 800ac06:	f7f7 fc8b 	bl	8002520 <HAL_GetTick>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	1ad3      	subs	r3, r2, r3
 800ac10:	683a      	ldr	r2, [r7, #0]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d803      	bhi.n	800ac1e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac1c:	d102      	bne.n	800ac24 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d101      	bne.n	800ac28 <SPI_WaitOnFlagUntilTimeout+0x34>
 800ac24:	2303      	movs	r3, #3
 800ac26:	e00f      	b.n	800ac48 <SPI_WaitOnFlagUntilTimeout+0x54>
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	695a      	ldr	r2, [r3, #20]
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	4013      	ands	r3, r2
 800ac32:	68ba      	ldr	r2, [r7, #8]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	bf0c      	ite	eq
 800ac38:	2301      	moveq	r3, #1
 800ac3a:	2300      	movne	r3, #0
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	461a      	mov	r2, r3
 800ac40:	79fb      	ldrb	r3, [r7, #7]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d0df      	beq.n	800ac06 <SPI_WaitOnFlagUntilTimeout+0x12>
 800ac46:	2300      	movs	r3, #0
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <SPI_GetPacketSize>:
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac5c:	095b      	lsrs	r3, r3, #5
 800ac5e:	3301      	adds	r3, #1
 800ac60:	60fb      	str	r3, [r7, #12]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	3301      	adds	r3, #1
 800ac68:	60bb      	str	r3, [r7, #8]
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	3307      	adds	r3, #7
 800ac6e:	08db      	lsrs	r3, r3, #3
 800ac70:	60bb      	str	r3, [r7, #8]
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	fb02 f303 	mul.w	r3, r2, r3
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
	...

0800ac88 <SDMMC_Init>:
 800ac88:	b084      	sub	sp, #16
 800ac8a:	b480      	push	{r7}
 800ac8c:	b085      	sub	sp, #20
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
 800ac92:	f107 001c 	add.w	r0, r7, #28
 800ac96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	60fb      	str	r3, [r7, #12]
 800ac9e:	69fa      	ldr	r2, [r7, #28]
 800aca0:	6a3b      	ldr	r3, [r7, #32]
 800aca2:	431a      	orrs	r2, r3
 800aca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca6:	431a      	orrs	r2, r3
 800aca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acaa:	431a      	orrs	r2, r3
 800acac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acae:	4313      	orrs	r3, r2
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	60fb      	str	r3, [r7, #12]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	685a      	ldr	r2, [r3, #4]
 800acba:	4b07      	ldr	r3, [pc, #28]	@ (800acd8 <SDMMC_Init+0x50>)
 800acbc:	4013      	ands	r3, r2
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	431a      	orrs	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	605a      	str	r2, [r3, #4]
 800acc6:	2300      	movs	r3, #0
 800acc8:	4618      	mov	r0, r3
 800acca:	3714      	adds	r7, #20
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	b004      	add	sp, #16
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	ffc02c00 	.word	0xffc02c00

0800acdc <SDMMC_ReadFIFO>:
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acea:	4618      	mov	r0, r3
 800acec:	370c      	adds	r7, #12
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <SDMMC_WriteFIFO>:
 800acf6:	b480      	push	{r7}
 800acf8:	b083      	sub	sp, #12
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	6039      	str	r1, [r7, #0]
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <SDMMC_PowerState_ON>:
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f043 0203 	orr.w	r2, r3, #3
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	4618      	mov	r0, r3
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <SDMMC_GetPowerState>:
 800ad3a:	b480      	push	{r7}
 800ad3c:	b083      	sub	sp, #12
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 0303 	and.w	r3, r3, #3
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	370c      	adds	r7, #12
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr
	...

0800ad58 <SDMMC_SendCommand>:
 800ad58:	b480      	push	{r7}
 800ad5a:	b085      	sub	sp, #20
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
 800ad62:	2300      	movs	r3, #0
 800ad64:	60fb      	str	r3, [r7, #12]
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	609a      	str	r2, [r3, #8]
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	685a      	ldr	r2, [r3, #4]
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	431a      	orrs	r2, r3
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	431a      	orrs	r2, r3
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	4313      	orrs	r3, r2
 800ad88:	60fb      	str	r3, [r7, #12]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	68da      	ldr	r2, [r3, #12]
 800ad8e:	4b06      	ldr	r3, [pc, #24]	@ (800ada8 <SDMMC_SendCommand+0x50>)
 800ad90:	4013      	ands	r3, r2
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	431a      	orrs	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	60da      	str	r2, [r3, #12]
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3714      	adds	r7, #20
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr
 800ada8:	fffee0c0 	.word	0xfffee0c0

0800adac <SDMMC_GetCommandResponse>:
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	4618      	mov	r0, r3
 800adbc:	370c      	adds	r7, #12
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr

0800adc6 <SDMMC_GetResponse>:
 800adc6:	b480      	push	{r7}
 800adc8:	b085      	sub	sp, #20
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
 800adce:	6039      	str	r1, [r7, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	3314      	adds	r3, #20
 800add4:	461a      	mov	r2, r3
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	4413      	add	r3, r2
 800adda:	60fb      	str	r3, [r7, #12]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4618      	mov	r0, r3
 800ade2:	3714      	adds	r7, #20
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <SDMMC_ConfigData>:
 800adec:	b480      	push	{r7}
 800adee:	b085      	sub	sp, #20
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
 800adf6:	2300      	movs	r3, #0
 800adf8:	60fb      	str	r3, [r7, #12]
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	625a      	str	r2, [r3, #36]	@ 0x24
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	685a      	ldr	r2, [r3, #4]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	629a      	str	r2, [r3, #40]	@ 0x28
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	689a      	ldr	r2, [r3, #8]
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	68db      	ldr	r3, [r3, #12]
 800ae12:	431a      	orrs	r2, r3
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	691b      	ldr	r3, [r3, #16]
 800ae18:	431a      	orrs	r2, r3
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	695b      	ldr	r3, [r3, #20]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	60fb      	str	r3, [r7, #12]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae2a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	431a      	orrs	r2, r3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ae36:	2300      	movs	r3, #0
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3714      	adds	r7, #20
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <SDMMC_CmdBlockLength>:
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b088      	sub	sp, #32
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	60bb      	str	r3, [r7, #8]
 800ae52:	2310      	movs	r3, #16
 800ae54:	60fb      	str	r3, [r7, #12]
 800ae56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ae5a:	613b      	str	r3, [r7, #16]
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	617b      	str	r3, [r7, #20]
 800ae60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae64:	61bb      	str	r3, [r7, #24]
 800ae66:	f107 0308 	add.w	r3, r7, #8
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f7ff ff73 	bl	800ad58 <SDMMC_SendCommand>
 800ae72:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae76:	2110      	movs	r1, #16
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 fa5f 	bl	800b33c <SDMMC_GetCmdResp1>
 800ae7e:	61f8      	str	r0, [r7, #28]
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	4618      	mov	r0, r3
 800ae84:	3720      	adds	r7, #32
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <SDMMC_CmdReadSingleBlock>:
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b088      	sub	sp, #32
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
 800ae92:	6039      	str	r1, [r7, #0]
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	60bb      	str	r3, [r7, #8]
 800ae98:	2311      	movs	r3, #17
 800ae9a:	60fb      	str	r3, [r7, #12]
 800ae9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aea0:	613b      	str	r3, [r7, #16]
 800aea2:	2300      	movs	r3, #0
 800aea4:	617b      	str	r3, [r7, #20]
 800aea6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aeaa:	61bb      	str	r3, [r7, #24]
 800aeac:	f107 0308 	add.w	r3, r7, #8
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7ff ff50 	bl	800ad58 <SDMMC_SendCommand>
 800aeb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aebc:	2111      	movs	r1, #17
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 fa3c 	bl	800b33c <SDMMC_GetCmdResp1>
 800aec4:	61f8      	str	r0, [r7, #28]
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	4618      	mov	r0, r3
 800aeca:	3720      	adds	r7, #32
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <SDMMC_CmdReadMultiBlock>:
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b088      	sub	sp, #32
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	60bb      	str	r3, [r7, #8]
 800aede:	2312      	movs	r3, #18
 800aee0:	60fb      	str	r3, [r7, #12]
 800aee2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aee6:	613b      	str	r3, [r7, #16]
 800aee8:	2300      	movs	r3, #0
 800aeea:	617b      	str	r3, [r7, #20]
 800aeec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aef0:	61bb      	str	r3, [r7, #24]
 800aef2:	f107 0308 	add.w	r3, r7, #8
 800aef6:	4619      	mov	r1, r3
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f7ff ff2d 	bl	800ad58 <SDMMC_SendCommand>
 800aefe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af02:	2112      	movs	r1, #18
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 fa19 	bl	800b33c <SDMMC_GetCmdResp1>
 800af0a:	61f8      	str	r0, [r7, #28]
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	4618      	mov	r0, r3
 800af10:	3720      	adds	r7, #32
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <SDMMC_CmdWriteSingleBlock>:
 800af16:	b580      	push	{r7, lr}
 800af18:	b088      	sub	sp, #32
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
 800af1e:	6039      	str	r1, [r7, #0]
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	60bb      	str	r3, [r7, #8]
 800af24:	2318      	movs	r3, #24
 800af26:	60fb      	str	r3, [r7, #12]
 800af28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af2c:	613b      	str	r3, [r7, #16]
 800af2e:	2300      	movs	r3, #0
 800af30:	617b      	str	r3, [r7, #20]
 800af32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af36:	61bb      	str	r3, [r7, #24]
 800af38:	f107 0308 	add.w	r3, r7, #8
 800af3c:	4619      	mov	r1, r3
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f7ff ff0a 	bl	800ad58 <SDMMC_SendCommand>
 800af44:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af48:	2118      	movs	r1, #24
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 f9f6 	bl	800b33c <SDMMC_GetCmdResp1>
 800af50:	61f8      	str	r0, [r7, #28]
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	4618      	mov	r0, r3
 800af56:	3720      	adds	r7, #32
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <SDMMC_CmdWriteMultiBlock>:
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b088      	sub	sp, #32
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	60bb      	str	r3, [r7, #8]
 800af6a:	2319      	movs	r3, #25
 800af6c:	60fb      	str	r3, [r7, #12]
 800af6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af72:	613b      	str	r3, [r7, #16]
 800af74:	2300      	movs	r3, #0
 800af76:	617b      	str	r3, [r7, #20]
 800af78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af7c:	61bb      	str	r3, [r7, #24]
 800af7e:	f107 0308 	add.w	r3, r7, #8
 800af82:	4619      	mov	r1, r3
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f7ff fee7 	bl	800ad58 <SDMMC_SendCommand>
 800af8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af8e:	2119      	movs	r1, #25
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 f9d3 	bl	800b33c <SDMMC_GetCmdResp1>
 800af96:	61f8      	str	r0, [r7, #28]
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	4618      	mov	r0, r3
 800af9c:	3720      	adds	r7, #32
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
	...

0800afa4 <SDMMC_CmdStopTransfer>:
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b088      	sub	sp, #32
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	2300      	movs	r3, #0
 800afae:	60bb      	str	r3, [r7, #8]
 800afb0:	230c      	movs	r3, #12
 800afb2:	60fb      	str	r3, [r7, #12]
 800afb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800afb8:	613b      	str	r3, [r7, #16]
 800afba:	2300      	movs	r3, #0
 800afbc:	617b      	str	r3, [r7, #20]
 800afbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800afc2:	61bb      	str	r3, [r7, #24]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	60da      	str	r2, [r3, #12]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	60da      	str	r2, [r3, #12]
 800afdc:	f107 0308 	add.w	r3, r7, #8
 800afe0:	4619      	mov	r1, r3
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7ff feb8 	bl	800ad58 <SDMMC_SendCommand>
 800afe8:	4a0b      	ldr	r2, [pc, #44]	@ (800b018 <SDMMC_CmdStopTransfer+0x74>)
 800afea:	210c      	movs	r1, #12
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 f9a5 	bl	800b33c <SDMMC_GetCmdResp1>
 800aff2:	61f8      	str	r0, [r7, #28]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	60da      	str	r2, [r3, #12]
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b006:	d101      	bne.n	800b00c <SDMMC_CmdStopTransfer+0x68>
 800b008:	2300      	movs	r3, #0
 800b00a:	61fb      	str	r3, [r7, #28]
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	4618      	mov	r0, r3
 800b010:	3720      	adds	r7, #32
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	05f5e100 	.word	0x05f5e100

0800b01c <SDMMC_CmdSelDesel>:
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b088      	sub	sp, #32
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	60bb      	str	r3, [r7, #8]
 800b02a:	2307      	movs	r3, #7
 800b02c:	60fb      	str	r3, [r7, #12]
 800b02e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b032:	613b      	str	r3, [r7, #16]
 800b034:	2300      	movs	r3, #0
 800b036:	617b      	str	r3, [r7, #20]
 800b038:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b03c:	61bb      	str	r3, [r7, #24]
 800b03e:	f107 0308 	add.w	r3, r7, #8
 800b042:	4619      	mov	r1, r3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f7ff fe87 	bl	800ad58 <SDMMC_SendCommand>
 800b04a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b04e:	2107      	movs	r1, #7
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 f973 	bl	800b33c <SDMMC_GetCmdResp1>
 800b056:	61f8      	str	r0, [r7, #28]
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	4618      	mov	r0, r3
 800b05c:	3720      	adds	r7, #32
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <SDMMC_CmdGoIdleState>:
 800b062:	b580      	push	{r7, lr}
 800b064:	b088      	sub	sp, #32
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
 800b06a:	2300      	movs	r3, #0
 800b06c:	60bb      	str	r3, [r7, #8]
 800b06e:	2300      	movs	r3, #0
 800b070:	60fb      	str	r3, [r7, #12]
 800b072:	2300      	movs	r3, #0
 800b074:	613b      	str	r3, [r7, #16]
 800b076:	2300      	movs	r3, #0
 800b078:	617b      	str	r3, [r7, #20]
 800b07a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b07e:	61bb      	str	r3, [r7, #24]
 800b080:	f107 0308 	add.w	r3, r7, #8
 800b084:	4619      	mov	r1, r3
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f7ff fe66 	bl	800ad58 <SDMMC_SendCommand>
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fb97 	bl	800b7c0 <SDMMC_GetCmdError>
 800b092:	61f8      	str	r0, [r7, #28]
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	4618      	mov	r0, r3
 800b098:	3720      	adds	r7, #32
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <SDMMC_CmdOperCond>:
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b088      	sub	sp, #32
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b0aa:	60bb      	str	r3, [r7, #8]
 800b0ac:	2308      	movs	r3, #8
 800b0ae:	60fb      	str	r3, [r7, #12]
 800b0b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b0b4:	613b      	str	r3, [r7, #16]
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	617b      	str	r3, [r7, #20]
 800b0ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b0be:	61bb      	str	r3, [r7, #24]
 800b0c0:	f107 0308 	add.w	r3, r7, #8
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7ff fe46 	bl	800ad58 <SDMMC_SendCommand>
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fb29 	bl	800b724 <SDMMC_GetCmdResp7>
 800b0d2:	61f8      	str	r0, [r7, #28]
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3720      	adds	r7, #32
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <SDMMC_CmdAppCommand>:
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b088      	sub	sp, #32
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
 800b0e6:	6039      	str	r1, [r7, #0]
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	60bb      	str	r3, [r7, #8]
 800b0ec:	2337      	movs	r3, #55	@ 0x37
 800b0ee:	60fb      	str	r3, [r7, #12]
 800b0f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b0f4:	613b      	str	r3, [r7, #16]
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	617b      	str	r3, [r7, #20]
 800b0fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b0fe:	61bb      	str	r3, [r7, #24]
 800b100:	f107 0308 	add.w	r3, r7, #8
 800b104:	4619      	mov	r1, r3
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f7ff fe26 	bl	800ad58 <SDMMC_SendCommand>
 800b10c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b110:	2137      	movs	r1, #55	@ 0x37
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f912 	bl	800b33c <SDMMC_GetCmdResp1>
 800b118:	61f8      	str	r0, [r7, #28]
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	4618      	mov	r0, r3
 800b11e:	3720      	adds	r7, #32
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <SDMMC_CmdAppOperCommand>:
 800b124:	b580      	push	{r7, lr}
 800b126:	b088      	sub	sp, #32
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	60bb      	str	r3, [r7, #8]
 800b132:	2329      	movs	r3, #41	@ 0x29
 800b134:	60fb      	str	r3, [r7, #12]
 800b136:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b13a:	613b      	str	r3, [r7, #16]
 800b13c:	2300      	movs	r3, #0
 800b13e:	617b      	str	r3, [r7, #20]
 800b140:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b144:	61bb      	str	r3, [r7, #24]
 800b146:	f107 0308 	add.w	r3, r7, #8
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7ff fe03 	bl	800ad58 <SDMMC_SendCommand>
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fa2e 	bl	800b5b4 <SDMMC_GetCmdResp3>
 800b158:	61f8      	str	r0, [r7, #28]
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	4618      	mov	r0, r3
 800b15e:	3720      	adds	r7, #32
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <SDMMC_CmdBusWidth>:
 800b164:	b580      	push	{r7, lr}
 800b166:	b088      	sub	sp, #32
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	60bb      	str	r3, [r7, #8]
 800b172:	2306      	movs	r3, #6
 800b174:	60fb      	str	r3, [r7, #12]
 800b176:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b17a:	613b      	str	r3, [r7, #16]
 800b17c:	2300      	movs	r3, #0
 800b17e:	617b      	str	r3, [r7, #20]
 800b180:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b184:	61bb      	str	r3, [r7, #24]
 800b186:	f107 0308 	add.w	r3, r7, #8
 800b18a:	4619      	mov	r1, r3
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7ff fde3 	bl	800ad58 <SDMMC_SendCommand>
 800b192:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b196:	2106      	movs	r1, #6
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 f8cf 	bl	800b33c <SDMMC_GetCmdResp1>
 800b19e:	61f8      	str	r0, [r7, #28]
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3720      	adds	r7, #32
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <SDMMC_CmdSendSCR>:
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b088      	sub	sp, #32
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	60bb      	str	r3, [r7, #8]
 800b1b6:	2333      	movs	r3, #51	@ 0x33
 800b1b8:	60fb      	str	r3, [r7, #12]
 800b1ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b1be:	613b      	str	r3, [r7, #16]
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	617b      	str	r3, [r7, #20]
 800b1c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b1c8:	61bb      	str	r3, [r7, #24]
 800b1ca:	f107 0308 	add.w	r3, r7, #8
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f7ff fdc1 	bl	800ad58 <SDMMC_SendCommand>
 800b1d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1da:	2133      	movs	r1, #51	@ 0x33
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 f8ad 	bl	800b33c <SDMMC_GetCmdResp1>
 800b1e2:	61f8      	str	r0, [r7, #28]
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3720      	adds	r7, #32
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <SDMMC_CmdSendCID>:
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b088      	sub	sp, #32
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	60bb      	str	r3, [r7, #8]
 800b1fa:	2302      	movs	r3, #2
 800b1fc:	60fb      	str	r3, [r7, #12]
 800b1fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b202:	613b      	str	r3, [r7, #16]
 800b204:	2300      	movs	r3, #0
 800b206:	617b      	str	r3, [r7, #20]
 800b208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b20c:	61bb      	str	r3, [r7, #24]
 800b20e:	f107 0308 	add.w	r3, r7, #8
 800b212:	4619      	mov	r1, r3
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f7ff fd9f 	bl	800ad58 <SDMMC_SendCommand>
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 f980 	bl	800b520 <SDMMC_GetCmdResp2>
 800b220:	61f8      	str	r0, [r7, #28]
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	4618      	mov	r0, r3
 800b226:	3720      	adds	r7, #32
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <SDMMC_CmdSendCSD>:
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b088      	sub	sp, #32
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	60bb      	str	r3, [r7, #8]
 800b23a:	2309      	movs	r3, #9
 800b23c:	60fb      	str	r3, [r7, #12]
 800b23e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b242:	613b      	str	r3, [r7, #16]
 800b244:	2300      	movs	r3, #0
 800b246:	617b      	str	r3, [r7, #20]
 800b248:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b24c:	61bb      	str	r3, [r7, #24]
 800b24e:	f107 0308 	add.w	r3, r7, #8
 800b252:	4619      	mov	r1, r3
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7ff fd7f 	bl	800ad58 <SDMMC_SendCommand>
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 f960 	bl	800b520 <SDMMC_GetCmdResp2>
 800b260:	61f8      	str	r0, [r7, #28]
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	4618      	mov	r0, r3
 800b266:	3720      	adds	r7, #32
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <SDMMC_CmdSetRelAdd>:
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b088      	sub	sp, #32
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
 800b276:	2300      	movs	r3, #0
 800b278:	60bb      	str	r3, [r7, #8]
 800b27a:	2303      	movs	r3, #3
 800b27c:	60fb      	str	r3, [r7, #12]
 800b27e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b282:	613b      	str	r3, [r7, #16]
 800b284:	2300      	movs	r3, #0
 800b286:	617b      	str	r3, [r7, #20]
 800b288:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b28c:	61bb      	str	r3, [r7, #24]
 800b28e:	f107 0308 	add.w	r3, r7, #8
 800b292:	4619      	mov	r1, r3
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f7ff fd5f 	bl	800ad58 <SDMMC_SendCommand>
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	2103      	movs	r1, #3
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f9c8 	bl	800b634 <SDMMC_GetCmdResp6>
 800b2a4:	61f8      	str	r0, [r7, #28]
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3720      	adds	r7, #32
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <SDMMC_CmdSendStatus>:
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b088      	sub	sp, #32
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	60bb      	str	r3, [r7, #8]
 800b2be:	230d      	movs	r3, #13
 800b2c0:	60fb      	str	r3, [r7, #12]
 800b2c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b2c6:	613b      	str	r3, [r7, #16]
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	617b      	str	r3, [r7, #20]
 800b2cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b2d0:	61bb      	str	r3, [r7, #24]
 800b2d2:	f107 0308 	add.w	r3, r7, #8
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f7ff fd3d 	bl	800ad58 <SDMMC_SendCommand>
 800b2de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2e2:	210d      	movs	r1, #13
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 f829 	bl	800b33c <SDMMC_GetCmdResp1>
 800b2ea:	61f8      	str	r0, [r7, #28]
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3720      	adds	r7, #32
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <SDMMC_CmdStatusRegister>:
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b088      	sub	sp, #32
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
 800b2fe:	2300      	movs	r3, #0
 800b300:	60bb      	str	r3, [r7, #8]
 800b302:	230d      	movs	r3, #13
 800b304:	60fb      	str	r3, [r7, #12]
 800b306:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b30a:	613b      	str	r3, [r7, #16]
 800b30c:	2300      	movs	r3, #0
 800b30e:	617b      	str	r3, [r7, #20]
 800b310:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b314:	61bb      	str	r3, [r7, #24]
 800b316:	f107 0308 	add.w	r3, r7, #8
 800b31a:	4619      	mov	r1, r3
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f7ff fd1b 	bl	800ad58 <SDMMC_SendCommand>
 800b322:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b326:	210d      	movs	r1, #13
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 f807 	bl	800b33c <SDMMC_GetCmdResp1>
 800b32e:	61f8      	str	r0, [r7, #28]
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	4618      	mov	r0, r3
 800b334:	3720      	adds	r7, #32
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
	...

0800b33c <SDMMC_GetCmdResp1>:
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b088      	sub	sp, #32
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	460b      	mov	r3, r1
 800b346:	607a      	str	r2, [r7, #4]
 800b348:	72fb      	strb	r3, [r7, #11]
 800b34a:	4b70      	ldr	r3, [pc, #448]	@ (800b50c <SDMMC_GetCmdResp1+0x1d0>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a70      	ldr	r2, [pc, #448]	@ (800b510 <SDMMC_GetCmdResp1+0x1d4>)
 800b350:	fba2 2303 	umull	r2, r3, r2, r3
 800b354:	0a5a      	lsrs	r2, r3, #9
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	fb02 f303 	mul.w	r3, r2, r3
 800b35c:	61fb      	str	r3, [r7, #28]
 800b35e:	69fb      	ldr	r3, [r7, #28]
 800b360:	1e5a      	subs	r2, r3, #1
 800b362:	61fa      	str	r2, [r7, #28]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d102      	bne.n	800b36e <SDMMC_GetCmdResp1+0x32>
 800b368:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b36c:	e0c9      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b372:	61bb      	str	r3, [r7, #24]
 800b374:	69ba      	ldr	r2, [r7, #24]
 800b376:	4b67      	ldr	r3, [pc, #412]	@ (800b514 <SDMMC_GetCmdResp1+0x1d8>)
 800b378:	4013      	ands	r3, r2
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d0ef      	beq.n	800b35e <SDMMC_GetCmdResp1+0x22>
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b384:	2b00      	cmp	r3, #0
 800b386:	d1ea      	bne.n	800b35e <SDMMC_GetCmdResp1+0x22>
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b38c:	f003 0304 	and.w	r3, r3, #4
 800b390:	2b00      	cmp	r3, #0
 800b392:	d004      	beq.n	800b39e <SDMMC_GetCmdResp1+0x62>
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2204      	movs	r2, #4
 800b398:	639a      	str	r2, [r3, #56]	@ 0x38
 800b39a:	2304      	movs	r3, #4
 800b39c:	e0b1      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3a2:	f003 0301 	and.w	r3, r3, #1
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d004      	beq.n	800b3b4 <SDMMC_GetCmdResp1+0x78>
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	639a      	str	r2, [r3, #56]	@ 0x38
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e0a6      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	4a58      	ldr	r2, [pc, #352]	@ (800b518 <SDMMC_GetCmdResp1+0x1dc>)
 800b3b8:	639a      	str	r2, [r3, #56]	@ 0x38
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	f7ff fcf6 	bl	800adac <SDMMC_GetCommandResponse>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	7afb      	ldrb	r3, [r7, #11]
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d001      	beq.n	800b3ce <SDMMC_GetCmdResp1+0x92>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e099      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b3ce:	2100      	movs	r1, #0
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f7ff fcf8 	bl	800adc6 <SDMMC_GetResponse>
 800b3d6:	6178      	str	r0, [r7, #20]
 800b3d8:	697a      	ldr	r2, [r7, #20]
 800b3da:	4b50      	ldr	r3, [pc, #320]	@ (800b51c <SDMMC_GetCmdResp1+0x1e0>)
 800b3dc:	4013      	ands	r3, r2
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d101      	bne.n	800b3e6 <SDMMC_GetCmdResp1+0xaa>
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	e08d      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	da02      	bge.n	800b3f2 <SDMMC_GetCmdResp1+0xb6>
 800b3ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b3f0:	e087      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d001      	beq.n	800b400 <SDMMC_GetCmdResp1+0xc4>
 800b3fc:	2340      	movs	r3, #64	@ 0x40
 800b3fe:	e080      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b406:	2b00      	cmp	r3, #0
 800b408:	d001      	beq.n	800b40e <SDMMC_GetCmdResp1+0xd2>
 800b40a:	2380      	movs	r3, #128	@ 0x80
 800b40c:	e079      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b414:	2b00      	cmp	r3, #0
 800b416:	d002      	beq.n	800b41e <SDMMC_GetCmdResp1+0xe2>
 800b418:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b41c:	e071      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <SDMMC_GetCmdResp1+0xf2>
 800b428:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b42c:	e069      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b434:	2b00      	cmp	r3, #0
 800b436:	d002      	beq.n	800b43e <SDMMC_GetCmdResp1+0x102>
 800b438:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b43c:	e061      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b444:	2b00      	cmp	r3, #0
 800b446:	d002      	beq.n	800b44e <SDMMC_GetCmdResp1+0x112>
 800b448:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b44c:	e059      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b454:	2b00      	cmp	r3, #0
 800b456:	d002      	beq.n	800b45e <SDMMC_GetCmdResp1+0x122>
 800b458:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b45c:	e051      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b464:	2b00      	cmp	r3, #0
 800b466:	d002      	beq.n	800b46e <SDMMC_GetCmdResp1+0x132>
 800b468:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b46c:	e049      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b474:	2b00      	cmp	r3, #0
 800b476:	d002      	beq.n	800b47e <SDMMC_GetCmdResp1+0x142>
 800b478:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b47c:	e041      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b484:	2b00      	cmp	r3, #0
 800b486:	d002      	beq.n	800b48e <SDMMC_GetCmdResp1+0x152>
 800b488:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b48c:	e039      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b494:	2b00      	cmp	r3, #0
 800b496:	d002      	beq.n	800b49e <SDMMC_GetCmdResp1+0x162>
 800b498:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b49c:	e031      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <SDMMC_GetCmdResp1+0x172>
 800b4a8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b4ac:	e029      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d002      	beq.n	800b4be <SDMMC_GetCmdResp1+0x182>
 800b4b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b4bc:	e021      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d002      	beq.n	800b4ce <SDMMC_GetCmdResp1+0x192>
 800b4c8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b4cc:	e019      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d002      	beq.n	800b4de <SDMMC_GetCmdResp1+0x1a2>
 800b4d8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b4dc:	e011      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d002      	beq.n	800b4ee <SDMMC_GetCmdResp1+0x1b2>
 800b4e8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b4ec:	e009      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f003 0308 	and.w	r3, r3, #8
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d002      	beq.n	800b4fe <SDMMC_GetCmdResp1+0x1c2>
 800b4f8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b4fc:	e001      	b.n	800b502 <SDMMC_GetCmdResp1+0x1c6>
 800b4fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b502:	4618      	mov	r0, r3
 800b504:	3720      	adds	r7, #32
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	24000004 	.word	0x24000004
 800b510:	10624dd3 	.word	0x10624dd3
 800b514:	00200045 	.word	0x00200045
 800b518:	002000c5 	.word	0x002000c5
 800b51c:	fdffe008 	.word	0xfdffe008

0800b520 <SDMMC_GetCmdResp2>:
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	4b1f      	ldr	r3, [pc, #124]	@ (800b5a8 <SDMMC_GetCmdResp2+0x88>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a1f      	ldr	r2, [pc, #124]	@ (800b5ac <SDMMC_GetCmdResp2+0x8c>)
 800b52e:	fba2 2303 	umull	r2, r3, r2, r3
 800b532:	0a5b      	lsrs	r3, r3, #9
 800b534:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b538:	fb02 f303 	mul.w	r3, r2, r3
 800b53c:	60fb      	str	r3, [r7, #12]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	1e5a      	subs	r2, r3, #1
 800b542:	60fa      	str	r2, [r7, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d102      	bne.n	800b54e <SDMMC_GetCmdResp2+0x2e>
 800b548:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b54c:	e026      	b.n	800b59c <SDMMC_GetCmdResp2+0x7c>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b552:	60bb      	str	r3, [r7, #8]
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d0ef      	beq.n	800b53e <SDMMC_GetCmdResp2+0x1e>
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b564:	2b00      	cmp	r3, #0
 800b566:	d1ea      	bne.n	800b53e <SDMMC_GetCmdResp2+0x1e>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b56c:	f003 0304 	and.w	r3, r3, #4
 800b570:	2b00      	cmp	r3, #0
 800b572:	d004      	beq.n	800b57e <SDMMC_GetCmdResp2+0x5e>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2204      	movs	r2, #4
 800b578:	639a      	str	r2, [r3, #56]	@ 0x38
 800b57a:	2304      	movs	r3, #4
 800b57c:	e00e      	b.n	800b59c <SDMMC_GetCmdResp2+0x7c>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b582:	f003 0301 	and.w	r3, r3, #1
 800b586:	2b00      	cmp	r3, #0
 800b588:	d004      	beq.n	800b594 <SDMMC_GetCmdResp2+0x74>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2201      	movs	r2, #1
 800b58e:	639a      	str	r2, [r3, #56]	@ 0x38
 800b590:	2301      	movs	r3, #1
 800b592:	e003      	b.n	800b59c <SDMMC_GetCmdResp2+0x7c>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a06      	ldr	r2, [pc, #24]	@ (800b5b0 <SDMMC_GetCmdResp2+0x90>)
 800b598:	639a      	str	r2, [r3, #56]	@ 0x38
 800b59a:	2300      	movs	r3, #0
 800b59c:	4618      	mov	r0, r3
 800b59e:	3714      	adds	r7, #20
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr
 800b5a8:	24000004 	.word	0x24000004
 800b5ac:	10624dd3 	.word	0x10624dd3
 800b5b0:	002000c5 	.word	0x002000c5

0800b5b4 <SDMMC_GetCmdResp3>:
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	4b1a      	ldr	r3, [pc, #104]	@ (800b628 <SDMMC_GetCmdResp3+0x74>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a1a      	ldr	r2, [pc, #104]	@ (800b62c <SDMMC_GetCmdResp3+0x78>)
 800b5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c6:	0a5b      	lsrs	r3, r3, #9
 800b5c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5cc:	fb02 f303 	mul.w	r3, r2, r3
 800b5d0:	60fb      	str	r3, [r7, #12]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	1e5a      	subs	r2, r3, #1
 800b5d6:	60fa      	str	r2, [r7, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d102      	bne.n	800b5e2 <SDMMC_GetCmdResp3+0x2e>
 800b5dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b5e0:	e01b      	b.n	800b61a <SDMMC_GetCmdResp3+0x66>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5e6:	60bb      	str	r3, [r7, #8]
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d0ef      	beq.n	800b5d2 <SDMMC_GetCmdResp3+0x1e>
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1ea      	bne.n	800b5d2 <SDMMC_GetCmdResp3+0x1e>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b600:	f003 0304 	and.w	r3, r3, #4
 800b604:	2b00      	cmp	r3, #0
 800b606:	d004      	beq.n	800b612 <SDMMC_GetCmdResp3+0x5e>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2204      	movs	r2, #4
 800b60c:	639a      	str	r2, [r3, #56]	@ 0x38
 800b60e:	2304      	movs	r3, #4
 800b610:	e003      	b.n	800b61a <SDMMC_GetCmdResp3+0x66>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4a06      	ldr	r2, [pc, #24]	@ (800b630 <SDMMC_GetCmdResp3+0x7c>)
 800b616:	639a      	str	r2, [r3, #56]	@ 0x38
 800b618:	2300      	movs	r3, #0
 800b61a:	4618      	mov	r0, r3
 800b61c:	3714      	adds	r7, #20
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	24000004 	.word	0x24000004
 800b62c:	10624dd3 	.word	0x10624dd3
 800b630:	002000c5 	.word	0x002000c5

0800b634 <SDMMC_GetCmdResp6>:
 800b634:	b580      	push	{r7, lr}
 800b636:	b088      	sub	sp, #32
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	460b      	mov	r3, r1
 800b63e:	607a      	str	r2, [r7, #4]
 800b640:	72fb      	strb	r3, [r7, #11]
 800b642:	4b35      	ldr	r3, [pc, #212]	@ (800b718 <SDMMC_GetCmdResp6+0xe4>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a35      	ldr	r2, [pc, #212]	@ (800b71c <SDMMC_GetCmdResp6+0xe8>)
 800b648:	fba2 2303 	umull	r2, r3, r2, r3
 800b64c:	0a5b      	lsrs	r3, r3, #9
 800b64e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b652:	fb02 f303 	mul.w	r3, r2, r3
 800b656:	61fb      	str	r3, [r7, #28]
 800b658:	69fb      	ldr	r3, [r7, #28]
 800b65a:	1e5a      	subs	r2, r3, #1
 800b65c:	61fa      	str	r2, [r7, #28]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d102      	bne.n	800b668 <SDMMC_GetCmdResp6+0x34>
 800b662:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b666:	e052      	b.n	800b70e <SDMMC_GetCmdResp6+0xda>
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b66c:	61bb      	str	r3, [r7, #24]
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b674:	2b00      	cmp	r3, #0
 800b676:	d0ef      	beq.n	800b658 <SDMMC_GetCmdResp6+0x24>
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d1ea      	bne.n	800b658 <SDMMC_GetCmdResp6+0x24>
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b686:	f003 0304 	and.w	r3, r3, #4
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d004      	beq.n	800b698 <SDMMC_GetCmdResp6+0x64>
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2204      	movs	r2, #4
 800b692:	639a      	str	r2, [r3, #56]	@ 0x38
 800b694:	2304      	movs	r3, #4
 800b696:	e03a      	b.n	800b70e <SDMMC_GetCmdResp6+0xda>
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b69c:	f003 0301 	and.w	r3, r3, #1
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d004      	beq.n	800b6ae <SDMMC_GetCmdResp6+0x7a>
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	639a      	str	r2, [r3, #56]	@ 0x38
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e02f      	b.n	800b70e <SDMMC_GetCmdResp6+0xda>
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f7ff fb7c 	bl	800adac <SDMMC_GetCommandResponse>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	7afb      	ldrb	r3, [r7, #11]
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d001      	beq.n	800b6c2 <SDMMC_GetCmdResp6+0x8e>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e025      	b.n	800b70e <SDMMC_GetCmdResp6+0xda>
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	4a16      	ldr	r2, [pc, #88]	@ (800b720 <SDMMC_GetCmdResp6+0xec>)
 800b6c6:	639a      	str	r2, [r3, #56]	@ 0x38
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f7ff fb7b 	bl	800adc6 <SDMMC_GetResponse>
 800b6d0:	6178      	str	r0, [r7, #20]
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d106      	bne.n	800b6ea <SDMMC_GetCmdResp6+0xb6>
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	0c1b      	lsrs	r3, r3, #16
 800b6e0:	b29a      	uxth	r2, r3
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	801a      	strh	r2, [r3, #0]
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	e011      	b.n	800b70e <SDMMC_GetCmdResp6+0xda>
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d002      	beq.n	800b6fa <SDMMC_GetCmdResp6+0xc6>
 800b6f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b6f8:	e009      	b.n	800b70e <SDMMC_GetCmdResp6+0xda>
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <SDMMC_GetCmdResp6+0xd6>
 800b704:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b708:	e001      	b.n	800b70e <SDMMC_GetCmdResp6+0xda>
 800b70a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b70e:	4618      	mov	r0, r3
 800b710:	3720      	adds	r7, #32
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	24000004 	.word	0x24000004
 800b71c:	10624dd3 	.word	0x10624dd3
 800b720:	002000c5 	.word	0x002000c5

0800b724 <SDMMC_GetCmdResp7>:
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	4b22      	ldr	r3, [pc, #136]	@ (800b7b8 <SDMMC_GetCmdResp7+0x94>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a22      	ldr	r2, [pc, #136]	@ (800b7bc <SDMMC_GetCmdResp7+0x98>)
 800b732:	fba2 2303 	umull	r2, r3, r2, r3
 800b736:	0a5b      	lsrs	r3, r3, #9
 800b738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b73c:	fb02 f303 	mul.w	r3, r2, r3
 800b740:	60fb      	str	r3, [r7, #12]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	1e5a      	subs	r2, r3, #1
 800b746:	60fa      	str	r2, [r7, #12]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d102      	bne.n	800b752 <SDMMC_GetCmdResp7+0x2e>
 800b74c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b750:	e02c      	b.n	800b7ac <SDMMC_GetCmdResp7+0x88>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b756:	60bb      	str	r3, [r7, #8]
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d0ef      	beq.n	800b742 <SDMMC_GetCmdResp7+0x1e>
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1ea      	bne.n	800b742 <SDMMC_GetCmdResp7+0x1e>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b770:	f003 0304 	and.w	r3, r3, #4
 800b774:	2b00      	cmp	r3, #0
 800b776:	d004      	beq.n	800b782 <SDMMC_GetCmdResp7+0x5e>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2204      	movs	r2, #4
 800b77c:	639a      	str	r2, [r3, #56]	@ 0x38
 800b77e:	2304      	movs	r3, #4
 800b780:	e014      	b.n	800b7ac <SDMMC_GetCmdResp7+0x88>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b786:	f003 0301 	and.w	r3, r3, #1
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d004      	beq.n	800b798 <SDMMC_GetCmdResp7+0x74>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2201      	movs	r2, #1
 800b792:	639a      	str	r2, [r3, #56]	@ 0x38
 800b794:	2301      	movs	r3, #1
 800b796:	e009      	b.n	800b7ac <SDMMC_GetCmdResp7+0x88>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b79c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d002      	beq.n	800b7aa <SDMMC_GetCmdResp7+0x86>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2240      	movs	r2, #64	@ 0x40
 800b7a8:	639a      	str	r2, [r3, #56]	@ 0x38
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3714      	adds	r7, #20
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr
 800b7b8:	24000004 	.word	0x24000004
 800b7bc:	10624dd3 	.word	0x10624dd3

0800b7c0 <SDMMC_GetCmdError>:
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	4b11      	ldr	r3, [pc, #68]	@ (800b810 <SDMMC_GetCmdError+0x50>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a11      	ldr	r2, [pc, #68]	@ (800b814 <SDMMC_GetCmdError+0x54>)
 800b7ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b7d2:	0a5b      	lsrs	r3, r3, #9
 800b7d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7d8:	fb02 f303 	mul.w	r3, r2, r3
 800b7dc:	60fb      	str	r3, [r7, #12]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	1e5a      	subs	r2, r3, #1
 800b7e2:	60fa      	str	r2, [r7, #12]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d102      	bne.n	800b7ee <SDMMC_GetCmdError+0x2e>
 800b7e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b7ec:	e009      	b.n	800b802 <SDMMC_GetCmdError+0x42>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d0f1      	beq.n	800b7de <SDMMC_GetCmdError+0x1e>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a06      	ldr	r2, [pc, #24]	@ (800b818 <SDMMC_GetCmdError+0x58>)
 800b7fe:	639a      	str	r2, [r3, #56]	@ 0x38
 800b800:	2300      	movs	r3, #0
 800b802:	4618      	mov	r0, r3
 800b804:	3714      	adds	r7, #20
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
 800b80e:	bf00      	nop
 800b810:	24000004 	.word	0x24000004
 800b814:	10624dd3 	.word	0x10624dd3
 800b818:	002000c5 	.word	0x002000c5

0800b81c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b81c:	b480      	push	{r7}
 800b81e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b820:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b822:	4618      	mov	r0, r3
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <BSP_SD_Init>:
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	2300      	movs	r3, #0
 800b834:	71fb      	strb	r3, [r7, #7]
 800b836:	f000 f879 	bl	800b92c <BSP_SD_IsDetected>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d001      	beq.n	800b844 <BSP_SD_Init+0x18>
 800b840:	2302      	movs	r3, #2
 800b842:	e012      	b.n	800b86a <BSP_SD_Init+0x3e>
 800b844:	480b      	ldr	r0, [pc, #44]	@ (800b874 <BSP_SD_Init+0x48>)
 800b846:	f7fd fa71 	bl	8008d2c <HAL_SD_Init>
 800b84a:	4603      	mov	r3, r0
 800b84c:	71fb      	strb	r3, [r7, #7]
 800b84e:	79fb      	ldrb	r3, [r7, #7]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d109      	bne.n	800b868 <BSP_SD_Init+0x3c>
 800b854:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b858:	4806      	ldr	r0, [pc, #24]	@ (800b874 <BSP_SD_Init+0x48>)
 800b85a:	f7fe f92d 	bl	8009ab8 <HAL_SD_ConfigWideBusOperation>
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d001      	beq.n	800b868 <BSP_SD_Init+0x3c>
 800b864:	2301      	movs	r3, #1
 800b866:	71fb      	strb	r3, [r7, #7]
 800b868:	79fb      	ldrb	r3, [r7, #7]
 800b86a:	4618      	mov	r0, r3
 800b86c:	3708      	adds	r7, #8
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	24000098 	.word	0x24000098

0800b878 <BSP_SD_ReadBlocks>:
 800b878:	b580      	push	{r7, lr}
 800b87a:	b088      	sub	sp, #32
 800b87c:	af02      	add	r7, sp, #8
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
 800b884:	603b      	str	r3, [r7, #0]
 800b886:	2300      	movs	r3, #0
 800b888:	75fb      	strb	r3, [r7, #23]
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	9300      	str	r3, [sp, #0]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	68ba      	ldr	r2, [r7, #8]
 800b892:	68f9      	ldr	r1, [r7, #12]
 800b894:	4806      	ldr	r0, [pc, #24]	@ (800b8b0 <BSP_SD_ReadBlocks+0x38>)
 800b896:	f7fd fb69 	bl	8008f6c <HAL_SD_ReadBlocks>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d001      	beq.n	800b8a4 <BSP_SD_ReadBlocks+0x2c>
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	75fb      	strb	r3, [r7, #23]
 800b8a4:	7dfb      	ldrb	r3, [r7, #23]
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3718      	adds	r7, #24
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	24000098 	.word	0x24000098

0800b8b4 <BSP_SD_WriteBlocks>:
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b088      	sub	sp, #32
 800b8b8:	af02      	add	r7, sp, #8
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	607a      	str	r2, [r7, #4]
 800b8c0:	603b      	str	r3, [r7, #0]
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	75fb      	strb	r3, [r7, #23]
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	68ba      	ldr	r2, [r7, #8]
 800b8ce:	68f9      	ldr	r1, [r7, #12]
 800b8d0:	4806      	ldr	r0, [pc, #24]	@ (800b8ec <BSP_SD_WriteBlocks+0x38>)
 800b8d2:	f7fd fcd5 	bl	8009280 <HAL_SD_WriteBlocks>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d001      	beq.n	800b8e0 <BSP_SD_WriteBlocks+0x2c>
 800b8dc:	2301      	movs	r3, #1
 800b8de:	75fb      	strb	r3, [r7, #23]
 800b8e0:	7dfb      	ldrb	r3, [r7, #23]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3718      	adds	r7, #24
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	24000098 	.word	0x24000098

0800b8f0 <BSP_SD_GetCardState>:
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	4805      	ldr	r0, [pc, #20]	@ (800b90c <BSP_SD_GetCardState+0x1c>)
 800b8f6:	f7fe f9f1 	bl	8009cdc <HAL_SD_GetCardState>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b04      	cmp	r3, #4
 800b8fe:	bf14      	ite	ne
 800b900:	2301      	movne	r3, #1
 800b902:	2300      	moveq	r3, #0
 800b904:	b2db      	uxtb	r3, r3
 800b906:	4618      	mov	r0, r3
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	24000098 	.word	0x24000098

0800b910 <BSP_SD_GetCardInfo>:
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6879      	ldr	r1, [r7, #4]
 800b91a:	4803      	ldr	r0, [pc, #12]	@ (800b928 <BSP_SD_GetCardInfo+0x18>)
 800b91c:	f7fe f8a0 	bl	8009a60 <HAL_SD_GetCardInfo>
 800b920:	bf00      	nop
 800b922:	3708      	adds	r7, #8
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	24000098 	.word	0x24000098

0800b92c <BSP_SD_IsDetected>:
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	2301      	movs	r3, #1
 800b934:	71fb      	strb	r3, [r7, #7]
 800b936:	f000 f80b 	bl	800b950 <BSP_PlatformIsDetected>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <BSP_SD_IsDetected+0x18>
 800b940:	2300      	movs	r3, #0
 800b942:	71fb      	strb	r3, [r7, #7]
 800b944:	79fb      	ldrb	r3, [r7, #7]
 800b946:	b2db      	uxtb	r3, r3
 800b948:	4618      	mov	r0, r3
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <BSP_PlatformIsDetected>:
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	2301      	movs	r3, #1
 800b958:	71fb      	strb	r3, [r7, #7]
 800b95a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b95e:	4806      	ldr	r0, [pc, #24]	@ (800b978 <BSP_PlatformIsDetected+0x28>)
 800b960:	f7f7 fb9a 	bl	8003098 <HAL_GPIO_ReadPin>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d001      	beq.n	800b96e <BSP_PlatformIsDetected+0x1e>
 800b96a:	2300      	movs	r3, #0
 800b96c:	71fb      	strb	r3, [r7, #7]
 800b96e:	79fb      	ldrb	r3, [r7, #7]
 800b970:	4618      	mov	r0, r3
 800b972:	3708      	adds	r7, #8
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	58020000 	.word	0x58020000

0800b97c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
 800b982:	4603      	mov	r3, r0
 800b984:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b986:	4b0b      	ldr	r3, [pc, #44]	@ (800b9b4 <SD_CheckStatus+0x38>)
 800b988:	2201      	movs	r2, #1
 800b98a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b98c:	f7ff ffb0 	bl	800b8f0 <BSP_SD_GetCardState>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d107      	bne.n	800b9a6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b996:	4b07      	ldr	r3, [pc, #28]	@ (800b9b4 <SD_CheckStatus+0x38>)
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	f023 0301 	bic.w	r3, r3, #1
 800b9a0:	b2da      	uxtb	r2, r3
 800b9a2:	4b04      	ldr	r3, [pc, #16]	@ (800b9b4 <SD_CheckStatus+0x38>)
 800b9a4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b9a6:	4b03      	ldr	r3, [pc, #12]	@ (800b9b4 <SD_CheckStatus+0x38>)
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	b2db      	uxtb	r3, r3
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3708      	adds	r7, #8
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	24000011 	.word	0x24000011

0800b9b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	4603      	mov	r3, r0
 800b9c0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b9c2:	4b0b      	ldr	r3, [pc, #44]	@ (800b9f0 <SD_initialize+0x38>)
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b9c8:	f7ff ff30 	bl	800b82c <BSP_SD_Init>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d107      	bne.n	800b9e2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b9d2:	79fb      	ldrb	r3, [r7, #7]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7ff ffd1 	bl	800b97c <SD_CheckStatus>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	461a      	mov	r2, r3
 800b9de:	4b04      	ldr	r3, [pc, #16]	@ (800b9f0 <SD_initialize+0x38>)
 800b9e0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b9e2:	4b03      	ldr	r3, [pc, #12]	@ (800b9f0 <SD_initialize+0x38>)
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	b2db      	uxtb	r3, r3
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3708      	adds	r7, #8
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	24000011 	.word	0x24000011

0800b9f4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b9fe:	79fb      	ldrb	r3, [r7, #7]
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7ff ffbb 	bl	800b97c <SD_CheckStatus>
 800ba06:	4603      	mov	r3, r0
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60b9      	str	r1, [r7, #8]
 800ba18:	607a      	str	r2, [r7, #4]
 800ba1a:	603b      	str	r3, [r7, #0]
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ba20:	2301      	movs	r3, #1
 800ba22:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ba24:	f04f 33ff 	mov.w	r3, #4294967295
 800ba28:	683a      	ldr	r2, [r7, #0]
 800ba2a:	6879      	ldr	r1, [r7, #4]
 800ba2c:	68b8      	ldr	r0, [r7, #8]
 800ba2e:	f7ff ff23 	bl	800b878 <BSP_SD_ReadBlocks>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d107      	bne.n	800ba48 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ba38:	bf00      	nop
 800ba3a:	f7ff ff59 	bl	800b8f0 <BSP_SD_GetCardState>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1fa      	bne.n	800ba3a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ba44:	2300      	movs	r3, #0
 800ba46:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ba48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3718      	adds	r7, #24
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b086      	sub	sp, #24
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
 800ba5c:	603b      	str	r3, [r7, #0]
 800ba5e:	4603      	mov	r3, r0
 800ba60:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ba62:	2301      	movs	r3, #1
 800ba64:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ba66:	f04f 33ff 	mov.w	r3, #4294967295
 800ba6a:	683a      	ldr	r2, [r7, #0]
 800ba6c:	6879      	ldr	r1, [r7, #4]
 800ba6e:	68b8      	ldr	r0, [r7, #8]
 800ba70:	f7ff ff20 	bl	800b8b4 <BSP_SD_WriteBlocks>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d107      	bne.n	800ba8a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ba7a:	bf00      	nop
 800ba7c:	f7ff ff38 	bl	800b8f0 <BSP_SD_GetCardState>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d1fa      	bne.n	800ba7c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ba86:	2300      	movs	r3, #0
 800ba88:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ba8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3718      	adds	r7, #24
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b08c      	sub	sp, #48	@ 0x30
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	603a      	str	r2, [r7, #0]
 800ba9e:	71fb      	strb	r3, [r7, #7]
 800baa0:	460b      	mov	r3, r1
 800baa2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800baa4:	2301      	movs	r3, #1
 800baa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800baaa:	4b25      	ldr	r3, [pc, #148]	@ (800bb40 <SD_ioctl+0xac>)
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	f003 0301 	and.w	r3, r3, #1
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d001      	beq.n	800babc <SD_ioctl+0x28>
 800bab8:	2303      	movs	r3, #3
 800baba:	e03c      	b.n	800bb36 <SD_ioctl+0xa2>

  switch (cmd)
 800babc:	79bb      	ldrb	r3, [r7, #6]
 800babe:	2b03      	cmp	r3, #3
 800bac0:	d834      	bhi.n	800bb2c <SD_ioctl+0x98>
 800bac2:	a201      	add	r2, pc, #4	@ (adr r2, 800bac8 <SD_ioctl+0x34>)
 800bac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac8:	0800bad9 	.word	0x0800bad9
 800bacc:	0800bae1 	.word	0x0800bae1
 800bad0:	0800baf9 	.word	0x0800baf9
 800bad4:	0800bb13 	.word	0x0800bb13
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bad8:	2300      	movs	r3, #0
 800bada:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bade:	e028      	b.n	800bb32 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bae0:	f107 0308 	add.w	r3, r7, #8
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7ff ff13 	bl	800b910 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800baea:	6a3a      	ldr	r2, [r7, #32]
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800baf0:	2300      	movs	r3, #0
 800baf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800baf6:	e01c      	b.n	800bb32 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800baf8:	f107 0308 	add.w	r3, r7, #8
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7ff ff07 	bl	800b910 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bb02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bb10:	e00f      	b.n	800bb32 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bb12:	f107 0308 	add.w	r3, r7, #8
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7ff fefa 	bl	800b910 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1e:	0a5a      	lsrs	r2, r3, #9
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bb24:	2300      	movs	r3, #0
 800bb26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bb2a:	e002      	b.n	800bb32 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bb2c:	2304      	movs	r3, #4
 800bb2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800bb32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3730      	adds	r7, #48	@ 0x30
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	24000011 	.word	0x24000011

0800bb44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bb4e:	79fb      	ldrb	r3, [r7, #7]
 800bb50:	4a08      	ldr	r2, [pc, #32]	@ (800bb74 <disk_status+0x30>)
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	4413      	add	r3, r2
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	79fa      	ldrb	r2, [r7, #7]
 800bb5c:	4905      	ldr	r1, [pc, #20]	@ (800bb74 <disk_status+0x30>)
 800bb5e:	440a      	add	r2, r1
 800bb60:	7a12      	ldrb	r2, [r2, #8]
 800bb62:	4610      	mov	r0, r2
 800bb64:	4798      	blx	r3
 800bb66:	4603      	mov	r3, r0
 800bb68:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bb6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	2408a058 	.word	0x2408a058

0800bb78 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	4603      	mov	r3, r0
 800bb80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bb82:	2300      	movs	r3, #0
 800bb84:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bb86:	79fb      	ldrb	r3, [r7, #7]
 800bb88:	4a0e      	ldr	r2, [pc, #56]	@ (800bbc4 <disk_initialize+0x4c>)
 800bb8a:	5cd3      	ldrb	r3, [r2, r3]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d114      	bne.n	800bbba <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bb90:	79fb      	ldrb	r3, [r7, #7]
 800bb92:	4a0c      	ldr	r2, [pc, #48]	@ (800bbc4 <disk_initialize+0x4c>)
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	4413      	add	r3, r2
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	79fa      	ldrb	r2, [r7, #7]
 800bb9e:	4909      	ldr	r1, [pc, #36]	@ (800bbc4 <disk_initialize+0x4c>)
 800bba0:	440a      	add	r2, r1
 800bba2:	7a12      	ldrb	r2, [r2, #8]
 800bba4:	4610      	mov	r0, r2
 800bba6:	4798      	blx	r3
 800bba8:	4603      	mov	r3, r0
 800bbaa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800bbac:	7bfb      	ldrb	r3, [r7, #15]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d103      	bne.n	800bbba <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800bbb2:	79fb      	ldrb	r3, [r7, #7]
 800bbb4:	4a03      	ldr	r2, [pc, #12]	@ (800bbc4 <disk_initialize+0x4c>)
 800bbb6:	2101      	movs	r1, #1
 800bbb8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800bbba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3710      	adds	r7, #16
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	2408a058 	.word	0x2408a058

0800bbc8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bbc8:	b590      	push	{r4, r7, lr}
 800bbca:	b087      	sub	sp, #28
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60b9      	str	r1, [r7, #8]
 800bbd0:	607a      	str	r2, [r7, #4]
 800bbd2:	603b      	str	r3, [r7, #0]
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bbd8:	7bfb      	ldrb	r3, [r7, #15]
 800bbda:	4a0a      	ldr	r2, [pc, #40]	@ (800bc04 <disk_read+0x3c>)
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	4413      	add	r3, r2
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	689c      	ldr	r4, [r3, #8]
 800bbe4:	7bfb      	ldrb	r3, [r7, #15]
 800bbe6:	4a07      	ldr	r2, [pc, #28]	@ (800bc04 <disk_read+0x3c>)
 800bbe8:	4413      	add	r3, r2
 800bbea:	7a18      	ldrb	r0, [r3, #8]
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	68b9      	ldr	r1, [r7, #8]
 800bbf2:	47a0      	blx	r4
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	75fb      	strb	r3, [r7, #23]
  return res;
 800bbf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	371c      	adds	r7, #28
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd90      	pop	{r4, r7, pc}
 800bc02:	bf00      	nop
 800bc04:	2408a058 	.word	0x2408a058

0800bc08 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bc08:	b590      	push	{r4, r7, lr}
 800bc0a:	b087      	sub	sp, #28
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60b9      	str	r1, [r7, #8]
 800bc10:	607a      	str	r2, [r7, #4]
 800bc12:	603b      	str	r3, [r7, #0]
 800bc14:	4603      	mov	r3, r0
 800bc16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bc18:	7bfb      	ldrb	r3, [r7, #15]
 800bc1a:	4a0a      	ldr	r2, [pc, #40]	@ (800bc44 <disk_write+0x3c>)
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	4413      	add	r3, r2
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	68dc      	ldr	r4, [r3, #12]
 800bc24:	7bfb      	ldrb	r3, [r7, #15]
 800bc26:	4a07      	ldr	r2, [pc, #28]	@ (800bc44 <disk_write+0x3c>)
 800bc28:	4413      	add	r3, r2
 800bc2a:	7a18      	ldrb	r0, [r3, #8]
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	68b9      	ldr	r1, [r7, #8]
 800bc32:	47a0      	blx	r4
 800bc34:	4603      	mov	r3, r0
 800bc36:	75fb      	strb	r3, [r7, #23]
  return res;
 800bc38:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	371c      	adds	r7, #28
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd90      	pop	{r4, r7, pc}
 800bc42:	bf00      	nop
 800bc44:	2408a058 	.word	0x2408a058

0800bc48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	4603      	mov	r3, r0
 800bc50:	603a      	str	r2, [r7, #0]
 800bc52:	71fb      	strb	r3, [r7, #7]
 800bc54:	460b      	mov	r3, r1
 800bc56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bc58:	79fb      	ldrb	r3, [r7, #7]
 800bc5a:	4a09      	ldr	r2, [pc, #36]	@ (800bc80 <disk_ioctl+0x38>)
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	4413      	add	r3, r2
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	79fa      	ldrb	r2, [r7, #7]
 800bc66:	4906      	ldr	r1, [pc, #24]	@ (800bc80 <disk_ioctl+0x38>)
 800bc68:	440a      	add	r2, r1
 800bc6a:	7a10      	ldrb	r0, [r2, #8]
 800bc6c:	79b9      	ldrb	r1, [r7, #6]
 800bc6e:	683a      	ldr	r2, [r7, #0]
 800bc70:	4798      	blx	r3
 800bc72:	4603      	mov	r3, r0
 800bc74:	73fb      	strb	r3, [r7, #15]
  return res;
 800bc76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3710      	adds	r7, #16
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	2408a058 	.word	0x2408a058

0800bc84 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bc94:	89fb      	ldrh	r3, [r7, #14]
 800bc96:	021b      	lsls	r3, r3, #8
 800bc98:	b21a      	sxth	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	b21b      	sxth	r3, r3
 800bca0:	4313      	orrs	r3, r2
 800bca2:	b21b      	sxth	r3, r3
 800bca4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bca6:	89fb      	ldrh	r3, [r7, #14]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3714      	adds	r7, #20
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	3303      	adds	r3, #3
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	021b      	lsls	r3, r3, #8
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	3202      	adds	r2, #2
 800bccc:	7812      	ldrb	r2, [r2, #0]
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	021b      	lsls	r3, r3, #8
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	3201      	adds	r2, #1
 800bcda:	7812      	ldrb	r2, [r2, #0]
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	021b      	lsls	r3, r3, #8
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	7812      	ldrb	r2, [r2, #0]
 800bce8:	4313      	orrs	r3, r2
 800bcea:	60fb      	str	r3, [r7, #12]
	return rv;
 800bcec:	68fb      	ldr	r3, [r7, #12]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3714      	adds	r7, #20
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr

0800bcfa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bcfa:	b480      	push	{r7}
 800bcfc:	b083      	sub	sp, #12
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
 800bd02:	460b      	mov	r3, r1
 800bd04:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	1c5a      	adds	r2, r3, #1
 800bd0a:	607a      	str	r2, [r7, #4]
 800bd0c:	887a      	ldrh	r2, [r7, #2]
 800bd0e:	b2d2      	uxtb	r2, r2
 800bd10:	701a      	strb	r2, [r3, #0]
 800bd12:	887b      	ldrh	r3, [r7, #2]
 800bd14:	0a1b      	lsrs	r3, r3, #8
 800bd16:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	1c5a      	adds	r2, r3, #1
 800bd1c:	607a      	str	r2, [r7, #4]
 800bd1e:	887a      	ldrh	r2, [r7, #2]
 800bd20:	b2d2      	uxtb	r2, r2
 800bd22:	701a      	strb	r2, [r3, #0]
}
 800bd24:	bf00      	nop
 800bd26:	370c      	adds	r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	1c5a      	adds	r2, r3, #1
 800bd3e:	607a      	str	r2, [r7, #4]
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	b2d2      	uxtb	r2, r2
 800bd44:	701a      	strb	r2, [r3, #0]
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	0a1b      	lsrs	r3, r3, #8
 800bd4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	1c5a      	adds	r2, r3, #1
 800bd50:	607a      	str	r2, [r7, #4]
 800bd52:	683a      	ldr	r2, [r7, #0]
 800bd54:	b2d2      	uxtb	r2, r2
 800bd56:	701a      	strb	r2, [r3, #0]
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	0a1b      	lsrs	r3, r3, #8
 800bd5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	1c5a      	adds	r2, r3, #1
 800bd62:	607a      	str	r2, [r7, #4]
 800bd64:	683a      	ldr	r2, [r7, #0]
 800bd66:	b2d2      	uxtb	r2, r2
 800bd68:	701a      	strb	r2, [r3, #0]
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	0a1b      	lsrs	r3, r3, #8
 800bd6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	1c5a      	adds	r2, r3, #1
 800bd74:	607a      	str	r2, [r7, #4]
 800bd76:	683a      	ldr	r2, [r7, #0]
 800bd78:	b2d2      	uxtb	r2, r2
 800bd7a:	701a      	strb	r2, [r3, #0]
}
 800bd7c:	bf00      	nop
 800bd7e:	370c      	adds	r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bd88:	b480      	push	{r7}
 800bd8a:	b087      	sub	sp, #28
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00d      	beq.n	800bdbe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bda2:	693a      	ldr	r2, [r7, #16]
 800bda4:	1c53      	adds	r3, r2, #1
 800bda6:	613b      	str	r3, [r7, #16]
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	1c59      	adds	r1, r3, #1
 800bdac:	6179      	str	r1, [r7, #20]
 800bdae:	7812      	ldrb	r2, [r2, #0]
 800bdb0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	607b      	str	r3, [r7, #4]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1f1      	bne.n	800bda2 <mem_cpy+0x1a>
	}
}
 800bdbe:	bf00      	nop
 800bdc0:	371c      	adds	r7, #28
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr

0800bdca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bdca:	b480      	push	{r7}
 800bdcc:	b087      	sub	sp, #28
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	60f8      	str	r0, [r7, #12]
 800bdd2:	60b9      	str	r1, [r7, #8]
 800bdd4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	1c5a      	adds	r2, r3, #1
 800bdde:	617a      	str	r2, [r7, #20]
 800bde0:	68ba      	ldr	r2, [r7, #8]
 800bde2:	b2d2      	uxtb	r2, r2
 800bde4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	3b01      	subs	r3, #1
 800bdea:	607b      	str	r3, [r7, #4]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1f3      	bne.n	800bdda <mem_set+0x10>
}
 800bdf2:	bf00      	nop
 800bdf4:	bf00      	nop
 800bdf6:	371c      	adds	r7, #28
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800be00:	b480      	push	{r7}
 800be02:	b089      	sub	sp, #36	@ 0x24
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	61fb      	str	r3, [r7, #28]
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800be14:	2300      	movs	r3, #0
 800be16:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	1c5a      	adds	r2, r3, #1
 800be1c:	61fa      	str	r2, [r7, #28]
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	4619      	mov	r1, r3
 800be22:	69bb      	ldr	r3, [r7, #24]
 800be24:	1c5a      	adds	r2, r3, #1
 800be26:	61ba      	str	r2, [r7, #24]
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	1acb      	subs	r3, r1, r3
 800be2c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	3b01      	subs	r3, #1
 800be32:	607b      	str	r3, [r7, #4]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d002      	beq.n	800be40 <mem_cmp+0x40>
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d0eb      	beq.n	800be18 <mem_cmp+0x18>

	return r;
 800be40:	697b      	ldr	r3, [r7, #20]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3724      	adds	r7, #36	@ 0x24
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr

0800be4e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800be4e:	b480      	push	{r7}
 800be50:	b083      	sub	sp, #12
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
 800be56:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800be58:	e002      	b.n	800be60 <chk_chr+0x12>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	3301      	adds	r3, #1
 800be5e:	607b      	str	r3, [r7, #4]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d005      	beq.n	800be74 <chk_chr+0x26>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	461a      	mov	r2, r3
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	4293      	cmp	r3, r2
 800be72:	d1f2      	bne.n	800be5a <chk_chr+0xc>
	return *str;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	781b      	ldrb	r3, [r3, #0]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	370c      	adds	r7, #12
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800be84:	b480      	push	{r7}
 800be86:	b085      	sub	sp, #20
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800be8e:	2300      	movs	r3, #0
 800be90:	60bb      	str	r3, [r7, #8]
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	60fb      	str	r3, [r7, #12]
 800be96:	e029      	b.n	800beec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800be98:	4a27      	ldr	r2, [pc, #156]	@ (800bf38 <chk_lock+0xb4>)
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	011b      	lsls	r3, r3, #4
 800be9e:	4413      	add	r3, r2
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d01d      	beq.n	800bee2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bea6:	4a24      	ldr	r2, [pc, #144]	@ (800bf38 <chk_lock+0xb4>)
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	011b      	lsls	r3, r3, #4
 800beac:	4413      	add	r3, r2
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d116      	bne.n	800bee6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800beb8:	4a1f      	ldr	r2, [pc, #124]	@ (800bf38 <chk_lock+0xb4>)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	011b      	lsls	r3, r3, #4
 800bebe:	4413      	add	r3, r2
 800bec0:	3304      	adds	r3, #4
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bec8:	429a      	cmp	r2, r3
 800beca:	d10c      	bne.n	800bee6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800becc:	4a1a      	ldr	r2, [pc, #104]	@ (800bf38 <chk_lock+0xb4>)
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	011b      	lsls	r3, r3, #4
 800bed2:	4413      	add	r3, r2
 800bed4:	3308      	adds	r3, #8
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bedc:	429a      	cmp	r2, r3
 800bede:	d102      	bne.n	800bee6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bee0:	e007      	b.n	800bef2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bee2:	2301      	movs	r3, #1
 800bee4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	3301      	adds	r3, #1
 800beea:	60fb      	str	r3, [r7, #12]
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d9d2      	bls.n	800be98 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	d109      	bne.n	800bf0c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d102      	bne.n	800bf04 <chk_lock+0x80>
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	2b02      	cmp	r3, #2
 800bf02:	d101      	bne.n	800bf08 <chk_lock+0x84>
 800bf04:	2300      	movs	r3, #0
 800bf06:	e010      	b.n	800bf2a <chk_lock+0xa6>
 800bf08:	2312      	movs	r3, #18
 800bf0a:	e00e      	b.n	800bf2a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d108      	bne.n	800bf24 <chk_lock+0xa0>
 800bf12:	4a09      	ldr	r2, [pc, #36]	@ (800bf38 <chk_lock+0xb4>)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	011b      	lsls	r3, r3, #4
 800bf18:	4413      	add	r3, r2
 800bf1a:	330c      	adds	r3, #12
 800bf1c:	881b      	ldrh	r3, [r3, #0]
 800bf1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf22:	d101      	bne.n	800bf28 <chk_lock+0xa4>
 800bf24:	2310      	movs	r3, #16
 800bf26:	e000      	b.n	800bf2a <chk_lock+0xa6>
 800bf28:	2300      	movs	r3, #0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop
 800bf38:	2408a038 	.word	0x2408a038

0800bf3c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bf42:	2300      	movs	r3, #0
 800bf44:	607b      	str	r3, [r7, #4]
 800bf46:	e002      	b.n	800bf4e <enq_lock+0x12>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	607b      	str	r3, [r7, #4]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d806      	bhi.n	800bf62 <enq_lock+0x26>
 800bf54:	4a09      	ldr	r2, [pc, #36]	@ (800bf7c <enq_lock+0x40>)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	011b      	lsls	r3, r3, #4
 800bf5a:	4413      	add	r3, r2
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d1f2      	bne.n	800bf48 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2b02      	cmp	r3, #2
 800bf66:	bf14      	ite	ne
 800bf68:	2301      	movne	r3, #1
 800bf6a:	2300      	moveq	r3, #0
 800bf6c:	b2db      	uxtb	r3, r3
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	370c      	adds	r7, #12
 800bf72:	46bd      	mov	sp, r7
 800bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf78:	4770      	bx	lr
 800bf7a:	bf00      	nop
 800bf7c:	2408a038 	.word	0x2408a038

0800bf80 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b085      	sub	sp, #20
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	60fb      	str	r3, [r7, #12]
 800bf8e:	e01f      	b.n	800bfd0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bf90:	4a41      	ldr	r2, [pc, #260]	@ (800c098 <inc_lock+0x118>)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	011b      	lsls	r3, r3, #4
 800bf96:	4413      	add	r3, r2
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d113      	bne.n	800bfca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bfa2:	4a3d      	ldr	r2, [pc, #244]	@ (800c098 <inc_lock+0x118>)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	011b      	lsls	r3, r3, #4
 800bfa8:	4413      	add	r3, r2
 800bfaa:	3304      	adds	r3, #4
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d109      	bne.n	800bfca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bfb6:	4a38      	ldr	r2, [pc, #224]	@ (800c098 <inc_lock+0x118>)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	011b      	lsls	r3, r3, #4
 800bfbc:	4413      	add	r3, r2
 800bfbe:	3308      	adds	r3, #8
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d006      	beq.n	800bfd8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	60fb      	str	r3, [r7, #12]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d9dc      	bls.n	800bf90 <inc_lock+0x10>
 800bfd6:	e000      	b.n	800bfda <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bfd8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	d132      	bne.n	800c046 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	60fb      	str	r3, [r7, #12]
 800bfe4:	e002      	b.n	800bfec <inc_lock+0x6c>
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	60fb      	str	r3, [r7, #12]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d806      	bhi.n	800c000 <inc_lock+0x80>
 800bff2:	4a29      	ldr	r2, [pc, #164]	@ (800c098 <inc_lock+0x118>)
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	011b      	lsls	r3, r3, #4
 800bff8:	4413      	add	r3, r2
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d1f2      	bne.n	800bfe6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2b02      	cmp	r3, #2
 800c004:	d101      	bne.n	800c00a <inc_lock+0x8a>
 800c006:	2300      	movs	r3, #0
 800c008:	e040      	b.n	800c08c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	4922      	ldr	r1, [pc, #136]	@ (800c098 <inc_lock+0x118>)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	011b      	lsls	r3, r3, #4
 800c014:	440b      	add	r3, r1
 800c016:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	689a      	ldr	r2, [r3, #8]
 800c01c:	491e      	ldr	r1, [pc, #120]	@ (800c098 <inc_lock+0x118>)
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	011b      	lsls	r3, r3, #4
 800c022:	440b      	add	r3, r1
 800c024:	3304      	adds	r3, #4
 800c026:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	695a      	ldr	r2, [r3, #20]
 800c02c:	491a      	ldr	r1, [pc, #104]	@ (800c098 <inc_lock+0x118>)
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	011b      	lsls	r3, r3, #4
 800c032:	440b      	add	r3, r1
 800c034:	3308      	adds	r3, #8
 800c036:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c038:	4a17      	ldr	r2, [pc, #92]	@ (800c098 <inc_lock+0x118>)
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	011b      	lsls	r3, r3, #4
 800c03e:	4413      	add	r3, r2
 800c040:	330c      	adds	r3, #12
 800c042:	2200      	movs	r2, #0
 800c044:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d009      	beq.n	800c060 <inc_lock+0xe0>
 800c04c:	4a12      	ldr	r2, [pc, #72]	@ (800c098 <inc_lock+0x118>)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	011b      	lsls	r3, r3, #4
 800c052:	4413      	add	r3, r2
 800c054:	330c      	adds	r3, #12
 800c056:	881b      	ldrh	r3, [r3, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d001      	beq.n	800c060 <inc_lock+0xe0>
 800c05c:	2300      	movs	r3, #0
 800c05e:	e015      	b.n	800c08c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d108      	bne.n	800c078 <inc_lock+0xf8>
 800c066:	4a0c      	ldr	r2, [pc, #48]	@ (800c098 <inc_lock+0x118>)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	011b      	lsls	r3, r3, #4
 800c06c:	4413      	add	r3, r2
 800c06e:	330c      	adds	r3, #12
 800c070:	881b      	ldrh	r3, [r3, #0]
 800c072:	3301      	adds	r3, #1
 800c074:	b29a      	uxth	r2, r3
 800c076:	e001      	b.n	800c07c <inc_lock+0xfc>
 800c078:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c07c:	4906      	ldr	r1, [pc, #24]	@ (800c098 <inc_lock+0x118>)
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	011b      	lsls	r3, r3, #4
 800c082:	440b      	add	r3, r1
 800c084:	330c      	adds	r3, #12
 800c086:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	3301      	adds	r3, #1
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3714      	adds	r7, #20
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr
 800c098:	2408a038 	.word	0x2408a038

0800c09c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b085      	sub	sp, #20
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	607b      	str	r3, [r7, #4]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	d825      	bhi.n	800c0fc <dec_lock+0x60>
		n = Files[i].ctr;
 800c0b0:	4a17      	ldr	r2, [pc, #92]	@ (800c110 <dec_lock+0x74>)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	011b      	lsls	r3, r3, #4
 800c0b6:	4413      	add	r3, r2
 800c0b8:	330c      	adds	r3, #12
 800c0ba:	881b      	ldrh	r3, [r3, #0]
 800c0bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c0be:	89fb      	ldrh	r3, [r7, #14]
 800c0c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c0c4:	d101      	bne.n	800c0ca <dec_lock+0x2e>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c0ca:	89fb      	ldrh	r3, [r7, #14]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d002      	beq.n	800c0d6 <dec_lock+0x3a>
 800c0d0:	89fb      	ldrh	r3, [r7, #14]
 800c0d2:	3b01      	subs	r3, #1
 800c0d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c0d6:	4a0e      	ldr	r2, [pc, #56]	@ (800c110 <dec_lock+0x74>)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	011b      	lsls	r3, r3, #4
 800c0dc:	4413      	add	r3, r2
 800c0de:	330c      	adds	r3, #12
 800c0e0:	89fa      	ldrh	r2, [r7, #14]
 800c0e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c0e4:	89fb      	ldrh	r3, [r7, #14]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d105      	bne.n	800c0f6 <dec_lock+0x5a>
 800c0ea:	4a09      	ldr	r2, [pc, #36]	@ (800c110 <dec_lock+0x74>)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	011b      	lsls	r3, r3, #4
 800c0f0:	4413      	add	r3, r2
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	737b      	strb	r3, [r7, #13]
 800c0fa:	e001      	b.n	800c100 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c0fc:	2302      	movs	r3, #2
 800c0fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c100:	7b7b      	ldrb	r3, [r7, #13]
}
 800c102:	4618      	mov	r0, r3
 800c104:	3714      	adds	r7, #20
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop
 800c110:	2408a038 	.word	0x2408a038

0800c114 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c11c:	2300      	movs	r3, #0
 800c11e:	60fb      	str	r3, [r7, #12]
 800c120:	e010      	b.n	800c144 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c122:	4a0d      	ldr	r2, [pc, #52]	@ (800c158 <clear_lock+0x44>)
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	011b      	lsls	r3, r3, #4
 800c128:	4413      	add	r3, r2
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	429a      	cmp	r2, r3
 800c130:	d105      	bne.n	800c13e <clear_lock+0x2a>
 800c132:	4a09      	ldr	r2, [pc, #36]	@ (800c158 <clear_lock+0x44>)
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	011b      	lsls	r3, r3, #4
 800c138:	4413      	add	r3, r2
 800c13a:	2200      	movs	r2, #0
 800c13c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	3301      	adds	r3, #1
 800c142:	60fb      	str	r3, [r7, #12]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2b01      	cmp	r3, #1
 800c148:	d9eb      	bls.n	800c122 <clear_lock+0xe>
	}
}
 800c14a:	bf00      	nop
 800c14c:	bf00      	nop
 800c14e:	3714      	adds	r7, #20
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr
 800c158:	2408a038 	.word	0x2408a038

0800c15c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b086      	sub	sp, #24
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c164:	2300      	movs	r3, #0
 800c166:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	78db      	ldrb	r3, [r3, #3]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d034      	beq.n	800c1da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c174:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	7858      	ldrb	r0, [r3, #1]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c180:	2301      	movs	r3, #1
 800c182:	697a      	ldr	r2, [r7, #20]
 800c184:	f7ff fd40 	bl	800bc08 <disk_write>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d002      	beq.n	800c194 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c18e:	2301      	movs	r3, #1
 800c190:	73fb      	strb	r3, [r7, #15]
 800c192:	e022      	b.n	800c1da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6a1b      	ldr	r3, [r3, #32]
 800c19e:	697a      	ldr	r2, [r7, #20]
 800c1a0:	1ad2      	subs	r2, r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	699b      	ldr	r3, [r3, #24]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d217      	bcs.n	800c1da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	789b      	ldrb	r3, [r3, #2]
 800c1ae:	613b      	str	r3, [r7, #16]
 800c1b0:	e010      	b.n	800c1d4 <sync_window+0x78>
					wsect += fs->fsize;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	699b      	ldr	r3, [r3, #24]
 800c1b6:	697a      	ldr	r2, [r7, #20]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	7858      	ldrb	r0, [r3, #1]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	697a      	ldr	r2, [r7, #20]
 800c1ca:	f7ff fd1d 	bl	800bc08 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	3b01      	subs	r3, #1
 800c1d2:	613b      	str	r3, [r7, #16]
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d8eb      	bhi.n	800c1b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c1da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3718      	adds	r7, #24
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1f6:	683a      	ldr	r2, [r7, #0]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d01b      	beq.n	800c234 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f7ff ffad 	bl	800c15c <sync_window>
 800c202:	4603      	mov	r3, r0
 800c204:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c206:	7bfb      	ldrb	r3, [r7, #15]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d113      	bne.n	800c234 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	7858      	ldrb	r0, [r3, #1]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c216:	2301      	movs	r3, #1
 800c218:	683a      	ldr	r2, [r7, #0]
 800c21a:	f7ff fcd5 	bl	800bbc8 <disk_read>
 800c21e:	4603      	mov	r3, r0
 800c220:	2b00      	cmp	r3, #0
 800c222:	d004      	beq.n	800c22e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c224:	f04f 33ff 	mov.w	r3, #4294967295
 800c228:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c22a:	2301      	movs	r3, #1
 800c22c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	683a      	ldr	r2, [r7, #0]
 800c232:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800c234:	7bfb      	ldrb	r3, [r7, #15]
}
 800c236:	4618      	mov	r0, r3
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
	...

0800c240 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f7ff ff87 	bl	800c15c <sync_window>
 800c24e:	4603      	mov	r3, r0
 800c250:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c252:	7bfb      	ldrb	r3, [r7, #15]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d158      	bne.n	800c30a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	2b03      	cmp	r3, #3
 800c25e:	d148      	bne.n	800c2f2 <sync_fs+0xb2>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	791b      	ldrb	r3, [r3, #4]
 800c264:	2b01      	cmp	r3, #1
 800c266:	d144      	bne.n	800c2f2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	3330      	adds	r3, #48	@ 0x30
 800c26c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c270:	2100      	movs	r1, #0
 800c272:	4618      	mov	r0, r3
 800c274:	f7ff fda9 	bl	800bdca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	3330      	adds	r3, #48	@ 0x30
 800c27c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c280:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c284:	4618      	mov	r0, r3
 800c286:	f7ff fd38 	bl	800bcfa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	3330      	adds	r3, #48	@ 0x30
 800c28e:	4921      	ldr	r1, [pc, #132]	@ (800c314 <sync_fs+0xd4>)
 800c290:	4618      	mov	r0, r3
 800c292:	f7ff fd4d 	bl	800bd30 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	3330      	adds	r3, #48	@ 0x30
 800c29a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c29e:	491e      	ldr	r1, [pc, #120]	@ (800c318 <sync_fs+0xd8>)
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7ff fd45 	bl	800bd30 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	3330      	adds	r3, #48	@ 0x30
 800c2aa:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	691b      	ldr	r3, [r3, #16]
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	4610      	mov	r0, r2
 800c2b6:	f7ff fd3b 	bl	800bd30 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	3330      	adds	r3, #48	@ 0x30
 800c2be:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	f7ff fd31 	bl	800bd30 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	69db      	ldr	r3, [r3, #28]
 800c2d2:	1c5a      	adds	r2, r3, #1
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	7858      	ldrb	r0, [r3, #1]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	f7ff fc8e 	bl	800bc08 <disk_write>
			fs->fsi_flag = 0;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	785b      	ldrb	r3, [r3, #1]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7ff fca4 	bl	800bc48 <disk_ioctl>
 800c300:	4603      	mov	r3, r0
 800c302:	2b00      	cmp	r3, #0
 800c304:	d001      	beq.n	800c30a <sync_fs+0xca>
 800c306:	2301      	movs	r3, #1
 800c308:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c30a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3710      	adds	r7, #16
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	41615252 	.word	0x41615252
 800c318:	61417272 	.word	0x61417272

0800c31c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	3b02      	subs	r3, #2
 800c32a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	695b      	ldr	r3, [r3, #20]
 800c330:	3b02      	subs	r3, #2
 800c332:	683a      	ldr	r2, [r7, #0]
 800c334:	429a      	cmp	r2, r3
 800c336:	d301      	bcc.n	800c33c <clust2sect+0x20>
 800c338:	2300      	movs	r3, #0
 800c33a:	e008      	b.n	800c34e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	895b      	ldrh	r3, [r3, #10]
 800c340:	461a      	mov	r2, r3
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	fb03 f202 	mul.w	r2, r3, r2
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c34c:	4413      	add	r3, r2
}
 800c34e:	4618      	mov	r0, r3
 800c350:	370c      	adds	r7, #12
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr

0800c35a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b086      	sub	sp, #24
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
 800c362:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d904      	bls.n	800c37a <get_fat+0x20>
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	695b      	ldr	r3, [r3, #20]
 800c374:	683a      	ldr	r2, [r7, #0]
 800c376:	429a      	cmp	r2, r3
 800c378:	d302      	bcc.n	800c380 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c37a:	2301      	movs	r3, #1
 800c37c:	617b      	str	r3, [r7, #20]
 800c37e:	e08e      	b.n	800c49e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c380:	f04f 33ff 	mov.w	r3, #4294967295
 800c384:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	2b03      	cmp	r3, #3
 800c38c:	d061      	beq.n	800c452 <get_fat+0xf8>
 800c38e:	2b03      	cmp	r3, #3
 800c390:	dc7b      	bgt.n	800c48a <get_fat+0x130>
 800c392:	2b01      	cmp	r3, #1
 800c394:	d002      	beq.n	800c39c <get_fat+0x42>
 800c396:	2b02      	cmp	r3, #2
 800c398:	d041      	beq.n	800c41e <get_fat+0xc4>
 800c39a:	e076      	b.n	800c48a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	60fb      	str	r3, [r7, #12]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	085b      	lsrs	r3, r3, #1
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	6a1a      	ldr	r2, [r3, #32]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	0a5b      	lsrs	r3, r3, #9
 800c3b2:	4413      	add	r3, r2
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	6938      	ldr	r0, [r7, #16]
 800c3b8:	f7ff ff14 	bl	800c1e4 <move_window>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d166      	bne.n	800c490 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	1c5a      	adds	r2, r3, #1
 800c3c6:	60fa      	str	r2, [r7, #12]
 800c3c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3cc:	693a      	ldr	r2, [r7, #16]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c3d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	6a1a      	ldr	r2, [r3, #32]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	0a5b      	lsrs	r3, r3, #9
 800c3de:	4413      	add	r3, r2
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	6938      	ldr	r0, [r7, #16]
 800c3e4:	f7ff fefe 	bl	800c1e4 <move_window>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d152      	bne.n	800c494 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3f4:	693a      	ldr	r2, [r7, #16]
 800c3f6:	4413      	add	r3, r2
 800c3f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c3fc:	021b      	lsls	r3, r3, #8
 800c3fe:	68ba      	ldr	r2, [r7, #8]
 800c400:	4313      	orrs	r3, r2
 800c402:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	f003 0301 	and.w	r3, r3, #1
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d002      	beq.n	800c414 <get_fat+0xba>
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	091b      	lsrs	r3, r3, #4
 800c412:	e002      	b.n	800c41a <get_fat+0xc0>
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c41a:	617b      	str	r3, [r7, #20]
			break;
 800c41c:	e03f      	b.n	800c49e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	6a1a      	ldr	r2, [r3, #32]
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	0a1b      	lsrs	r3, r3, #8
 800c426:	4413      	add	r3, r2
 800c428:	4619      	mov	r1, r3
 800c42a:	6938      	ldr	r0, [r7, #16]
 800c42c:	f7ff feda 	bl	800c1e4 <move_window>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	d130      	bne.n	800c498 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	005b      	lsls	r3, r3, #1
 800c440:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c444:	4413      	add	r3, r2
 800c446:	4618      	mov	r0, r3
 800c448:	f7ff fc1c 	bl	800bc84 <ld_word>
 800c44c:	4603      	mov	r3, r0
 800c44e:	617b      	str	r3, [r7, #20]
			break;
 800c450:	e025      	b.n	800c49e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	6a1a      	ldr	r2, [r3, #32]
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	09db      	lsrs	r3, r3, #7
 800c45a:	4413      	add	r3, r2
 800c45c:	4619      	mov	r1, r3
 800c45e:	6938      	ldr	r0, [r7, #16]
 800c460:	f7ff fec0 	bl	800c1e4 <move_window>
 800c464:	4603      	mov	r3, r0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d118      	bne.n	800c49c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c478:	4413      	add	r3, r2
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7ff fc1a 	bl	800bcb4 <ld_dword>
 800c480:	4603      	mov	r3, r0
 800c482:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c486:	617b      	str	r3, [r7, #20]
			break;
 800c488:	e009      	b.n	800c49e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c48a:	2301      	movs	r3, #1
 800c48c:	617b      	str	r3, [r7, #20]
 800c48e:	e006      	b.n	800c49e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c490:	bf00      	nop
 800c492:	e004      	b.n	800c49e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c494:	bf00      	nop
 800c496:	e002      	b.n	800c49e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c498:	bf00      	nop
 800c49a:	e000      	b.n	800c49e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c49c:	bf00      	nop
		}
	}

	return val;
 800c49e:	697b      	ldr	r3, [r7, #20]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3718      	adds	r7, #24
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c4a8:	b590      	push	{r4, r7, lr}
 800c4aa:	b089      	sub	sp, #36	@ 0x24
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c4b4:	2302      	movs	r3, #2
 800c4b6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	f240 80d9 	bls.w	800c672 <put_fat+0x1ca>
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	695b      	ldr	r3, [r3, #20]
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	f080 80d3 	bcs.w	800c672 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	2b03      	cmp	r3, #3
 800c4d2:	f000 8096 	beq.w	800c602 <put_fat+0x15a>
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	f300 80cb 	bgt.w	800c672 <put_fat+0x1ca>
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d002      	beq.n	800c4e6 <put_fat+0x3e>
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d06e      	beq.n	800c5c2 <put_fat+0x11a>
 800c4e4:	e0c5      	b.n	800c672 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	61bb      	str	r3, [r7, #24]
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	085b      	lsrs	r3, r3, #1
 800c4ee:	69ba      	ldr	r2, [r7, #24]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	6a1a      	ldr	r2, [r3, #32]
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	0a5b      	lsrs	r3, r3, #9
 800c4fc:	4413      	add	r3, r2
 800c4fe:	4619      	mov	r1, r3
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f7ff fe6f 	bl	800c1e4 <move_window>
 800c506:	4603      	mov	r3, r0
 800c508:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c50a:	7ffb      	ldrb	r3, [r7, #31]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f040 80a9 	bne.w	800c664 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	1c59      	adds	r1, r3, #1
 800c51c:	61b9      	str	r1, [r7, #24]
 800c51e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c522:	4413      	add	r3, r2
 800c524:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	f003 0301 	and.w	r3, r3, #1
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d00d      	beq.n	800c54c <put_fat+0xa4>
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	b25b      	sxtb	r3, r3
 800c536:	f003 030f 	and.w	r3, r3, #15
 800c53a:	b25a      	sxtb	r2, r3
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	011b      	lsls	r3, r3, #4
 800c542:	b25b      	sxtb	r3, r3
 800c544:	4313      	orrs	r3, r2
 800c546:	b25b      	sxtb	r3, r3
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	e001      	b.n	800c550 <put_fat+0xa8>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	697a      	ldr	r2, [r7, #20]
 800c552:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2201      	movs	r2, #1
 800c558:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	6a1a      	ldr	r2, [r3, #32]
 800c55e:	69bb      	ldr	r3, [r7, #24]
 800c560:	0a5b      	lsrs	r3, r3, #9
 800c562:	4413      	add	r3, r2
 800c564:	4619      	mov	r1, r3
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	f7ff fe3c 	bl	800c1e4 <move_window>
 800c56c:	4603      	mov	r3, r0
 800c56e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c570:	7ffb      	ldrb	r3, [r7, #31]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d178      	bne.n	800c668 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c582:	4413      	add	r3, r2
 800c584:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	f003 0301 	and.w	r3, r3, #1
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d003      	beq.n	800c598 <put_fat+0xf0>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	091b      	lsrs	r3, r3, #4
 800c594:	b2db      	uxtb	r3, r3
 800c596:	e00e      	b.n	800c5b6 <put_fat+0x10e>
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	b25b      	sxtb	r3, r3
 800c59e:	f023 030f 	bic.w	r3, r3, #15
 800c5a2:	b25a      	sxtb	r2, r3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	0a1b      	lsrs	r3, r3, #8
 800c5a8:	b25b      	sxtb	r3, r3
 800c5aa:	f003 030f 	and.w	r3, r3, #15
 800c5ae:	b25b      	sxtb	r3, r3
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	b25b      	sxtb	r3, r3
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	697a      	ldr	r2, [r7, #20]
 800c5b8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2201      	movs	r2, #1
 800c5be:	70da      	strb	r2, [r3, #3]
			break;
 800c5c0:	e057      	b.n	800c672 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6a1a      	ldr	r2, [r3, #32]
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	0a1b      	lsrs	r3, r3, #8
 800c5ca:	4413      	add	r3, r2
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	68f8      	ldr	r0, [r7, #12]
 800c5d0:	f7ff fe08 	bl	800c1e4 <move_window>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c5d8:	7ffb      	ldrb	r3, [r7, #31]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d146      	bne.n	800c66c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	005b      	lsls	r3, r3, #1
 800c5e8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c5ec:	4413      	add	r3, r2
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	b292      	uxth	r2, r2
 800c5f2:	4611      	mov	r1, r2
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7ff fb80 	bl	800bcfa <st_word>
			fs->wflag = 1;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	70da      	strb	r2, [r3, #3]
			break;
 800c600:	e037      	b.n	800c672 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	6a1a      	ldr	r2, [r3, #32]
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	09db      	lsrs	r3, r3, #7
 800c60a:	4413      	add	r3, r2
 800c60c:	4619      	mov	r1, r3
 800c60e:	68f8      	ldr	r0, [r7, #12]
 800c610:	f7ff fde8 	bl	800c1e4 <move_window>
 800c614:	4603      	mov	r3, r0
 800c616:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c618:	7ffb      	ldrb	r3, [r7, #31]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d128      	bne.n	800c670 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c632:	4413      	add	r3, r2
 800c634:	4618      	mov	r0, r3
 800c636:	f7ff fb3d 	bl	800bcb4 <ld_dword>
 800c63a:	4603      	mov	r3, r0
 800c63c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c640:	4323      	orrs	r3, r4
 800c642:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c652:	4413      	add	r3, r2
 800c654:	6879      	ldr	r1, [r7, #4]
 800c656:	4618      	mov	r0, r3
 800c658:	f7ff fb6a 	bl	800bd30 <st_dword>
			fs->wflag = 1;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2201      	movs	r2, #1
 800c660:	70da      	strb	r2, [r3, #3]
			break;
 800c662:	e006      	b.n	800c672 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c664:	bf00      	nop
 800c666:	e004      	b.n	800c672 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c668:	bf00      	nop
 800c66a:	e002      	b.n	800c672 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c66c:	bf00      	nop
 800c66e:	e000      	b.n	800c672 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c670:	bf00      	nop
		}
	}
	return res;
 800c672:	7ffb      	ldrb	r3, [r7, #31]
}
 800c674:	4618      	mov	r0, r3
 800c676:	3724      	adds	r7, #36	@ 0x24
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd90      	pop	{r4, r7, pc}

0800c67c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b088      	sub	sp, #32
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c688:	2300      	movs	r3, #0
 800c68a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	2b01      	cmp	r3, #1
 800c696:	d904      	bls.n	800c6a2 <remove_chain+0x26>
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	695b      	ldr	r3, [r3, #20]
 800c69c:	68ba      	ldr	r2, [r7, #8]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d301      	bcc.n	800c6a6 <remove_chain+0x2a>
 800c6a2:	2302      	movs	r3, #2
 800c6a4:	e04b      	b.n	800c73e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d00c      	beq.n	800c6c6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c6ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c6b0:	6879      	ldr	r1, [r7, #4]
 800c6b2:	69b8      	ldr	r0, [r7, #24]
 800c6b4:	f7ff fef8 	bl	800c4a8 <put_fat>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c6bc:	7ffb      	ldrb	r3, [r7, #31]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d001      	beq.n	800c6c6 <remove_chain+0x4a>
 800c6c2:	7ffb      	ldrb	r3, [r7, #31]
 800c6c4:	e03b      	b.n	800c73e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c6c6:	68b9      	ldr	r1, [r7, #8]
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	f7ff fe46 	bl	800c35a <get_fat>
 800c6ce:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d031      	beq.n	800c73a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d101      	bne.n	800c6e0 <remove_chain+0x64>
 800c6dc:	2302      	movs	r3, #2
 800c6de:	e02e      	b.n	800c73e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6e6:	d101      	bne.n	800c6ec <remove_chain+0x70>
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	e028      	b.n	800c73e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	68b9      	ldr	r1, [r7, #8]
 800c6f0:	69b8      	ldr	r0, [r7, #24]
 800c6f2:	f7ff fed9 	bl	800c4a8 <put_fat>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c6fa:	7ffb      	ldrb	r3, [r7, #31]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d001      	beq.n	800c704 <remove_chain+0x88>
 800c700:	7ffb      	ldrb	r3, [r7, #31]
 800c702:	e01c      	b.n	800c73e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c704:	69bb      	ldr	r3, [r7, #24]
 800c706:	691a      	ldr	r2, [r3, #16]
 800c708:	69bb      	ldr	r3, [r7, #24]
 800c70a:	695b      	ldr	r3, [r3, #20]
 800c70c:	3b02      	subs	r3, #2
 800c70e:	429a      	cmp	r2, r3
 800c710:	d20b      	bcs.n	800c72a <remove_chain+0xae>
			fs->free_clst++;
 800c712:	69bb      	ldr	r3, [r7, #24]
 800c714:	691b      	ldr	r3, [r3, #16]
 800c716:	1c5a      	adds	r2, r3, #1
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	791b      	ldrb	r3, [r3, #4]
 800c720:	f043 0301 	orr.w	r3, r3, #1
 800c724:	b2da      	uxtb	r2, r3
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	695b      	ldr	r3, [r3, #20]
 800c732:	68ba      	ldr	r2, [r7, #8]
 800c734:	429a      	cmp	r2, r3
 800c736:	d3c6      	bcc.n	800c6c6 <remove_chain+0x4a>
 800c738:	e000      	b.n	800c73c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c73a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3720      	adds	r7, #32
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b088      	sub	sp, #32
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10d      	bne.n	800c778 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c762:	69bb      	ldr	r3, [r7, #24]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d004      	beq.n	800c772 <create_chain+0x2c>
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	695b      	ldr	r3, [r3, #20]
 800c76c:	69ba      	ldr	r2, [r7, #24]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d31b      	bcc.n	800c7aa <create_chain+0x64>
 800c772:	2301      	movs	r3, #1
 800c774:	61bb      	str	r3, [r7, #24]
 800c776:	e018      	b.n	800c7aa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c778:	6839      	ldr	r1, [r7, #0]
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f7ff fded 	bl	800c35a <get_fat>
 800c780:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2b01      	cmp	r3, #1
 800c786:	d801      	bhi.n	800c78c <create_chain+0x46>
 800c788:	2301      	movs	r3, #1
 800c78a:	e070      	b.n	800c86e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c792:	d101      	bne.n	800c798 <create_chain+0x52>
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	e06a      	b.n	800c86e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	695b      	ldr	r3, [r3, #20]
 800c79c:	68fa      	ldr	r2, [r7, #12]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d201      	bcs.n	800c7a6 <create_chain+0x60>
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	e063      	b.n	800c86e <create_chain+0x128>
		scl = clst;
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	695b      	ldr	r3, [r3, #20]
 800c7b8:	69fa      	ldr	r2, [r7, #28]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d307      	bcc.n	800c7ce <create_chain+0x88>
				ncl = 2;
 800c7be:	2302      	movs	r3, #2
 800c7c0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c7c2:	69fa      	ldr	r2, [r7, #28]
 800c7c4:	69bb      	ldr	r3, [r7, #24]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d901      	bls.n	800c7ce <create_chain+0x88>
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	e04f      	b.n	800c86e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c7ce:	69f9      	ldr	r1, [r7, #28]
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f7ff fdc2 	bl	800c35a <get_fat>
 800c7d6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d00e      	beq.n	800c7fc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d003      	beq.n	800c7ec <create_chain+0xa6>
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ea:	d101      	bne.n	800c7f0 <create_chain+0xaa>
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	e03e      	b.n	800c86e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c7f0:	69fa      	ldr	r2, [r7, #28]
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d1da      	bne.n	800c7ae <create_chain+0x68>
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	e038      	b.n	800c86e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c7fc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c802:	69f9      	ldr	r1, [r7, #28]
 800c804:	6938      	ldr	r0, [r7, #16]
 800c806:	f7ff fe4f 	bl	800c4a8 <put_fat>
 800c80a:	4603      	mov	r3, r0
 800c80c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c80e:	7dfb      	ldrb	r3, [r7, #23]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d109      	bne.n	800c828 <create_chain+0xe2>
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d006      	beq.n	800c828 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c81a:	69fa      	ldr	r2, [r7, #28]
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6938      	ldr	r0, [r7, #16]
 800c820:	f7ff fe42 	bl	800c4a8 <put_fat>
 800c824:	4603      	mov	r3, r0
 800c826:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c828:	7dfb      	ldrb	r3, [r7, #23]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d116      	bne.n	800c85c <create_chain+0x116>
		fs->last_clst = ncl;
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	69fa      	ldr	r2, [r7, #28]
 800c832:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	691a      	ldr	r2, [r3, #16]
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	695b      	ldr	r3, [r3, #20]
 800c83c:	3b02      	subs	r3, #2
 800c83e:	429a      	cmp	r2, r3
 800c840:	d804      	bhi.n	800c84c <create_chain+0x106>
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	691b      	ldr	r3, [r3, #16]
 800c846:	1e5a      	subs	r2, r3, #1
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	791b      	ldrb	r3, [r3, #4]
 800c850:	f043 0301 	orr.w	r3, r3, #1
 800c854:	b2da      	uxtb	r2, r3
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	711a      	strb	r2, [r3, #4]
 800c85a:	e007      	b.n	800c86c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c85c:	7dfb      	ldrb	r3, [r7, #23]
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d102      	bne.n	800c868 <create_chain+0x122>
 800c862:	f04f 33ff 	mov.w	r3, #4294967295
 800c866:	e000      	b.n	800c86a <create_chain+0x124>
 800c868:	2301      	movs	r3, #1
 800c86a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c86c:	69fb      	ldr	r3, [r7, #28]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3720      	adds	r7, #32
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c876:	b480      	push	{r7}
 800c878:	b087      	sub	sp, #28
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
 800c87e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c88a:	3304      	adds	r3, #4
 800c88c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	0a5b      	lsrs	r3, r3, #9
 800c892:	68fa      	ldr	r2, [r7, #12]
 800c894:	8952      	ldrh	r2, [r2, #10]
 800c896:	fbb3 f3f2 	udiv	r3, r3, r2
 800c89a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	1d1a      	adds	r2, r3, #4
 800c8a0:	613a      	str	r2, [r7, #16]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d101      	bne.n	800c8b0 <clmt_clust+0x3a>
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	e010      	b.n	800c8d2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c8b0:	697a      	ldr	r2, [r7, #20]
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d307      	bcc.n	800c8c8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c8b8:	697a      	ldr	r2, [r7, #20]
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	1ad3      	subs	r3, r2, r3
 800c8be:	617b      	str	r3, [r7, #20]
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	3304      	adds	r3, #4
 800c8c4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c8c6:	e7e9      	b.n	800c89c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c8c8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	4413      	add	r3, r2
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	371c      	adds	r7, #28
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr

0800c8de <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b086      	sub	sp, #24
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
 800c8e6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c8f4:	d204      	bcs.n	800c900 <dir_sdi+0x22>
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	f003 031f 	and.w	r3, r3, #31
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d001      	beq.n	800c904 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c900:	2302      	movs	r3, #2
 800c902:	e063      	b.n	800c9cc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	683a      	ldr	r2, [r7, #0]
 800c908:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	689b      	ldr	r3, [r3, #8]
 800c90e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d106      	bne.n	800c924 <dir_sdi+0x46>
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	2b02      	cmp	r3, #2
 800c91c:	d902      	bls.n	800c924 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c922:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d10c      	bne.n	800c944 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	095b      	lsrs	r3, r3, #5
 800c92e:	693a      	ldr	r2, [r7, #16]
 800c930:	8912      	ldrh	r2, [r2, #8]
 800c932:	4293      	cmp	r3, r2
 800c934:	d301      	bcc.n	800c93a <dir_sdi+0x5c>
 800c936:	2302      	movs	r3, #2
 800c938:	e048      	b.n	800c9cc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	61da      	str	r2, [r3, #28]
 800c942:	e029      	b.n	800c998 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	895b      	ldrh	r3, [r3, #10]
 800c948:	025b      	lsls	r3, r3, #9
 800c94a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c94c:	e019      	b.n	800c982 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6979      	ldr	r1, [r7, #20]
 800c952:	4618      	mov	r0, r3
 800c954:	f7ff fd01 	bl	800c35a <get_fat>
 800c958:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c960:	d101      	bne.n	800c966 <dir_sdi+0x88>
 800c962:	2301      	movs	r3, #1
 800c964:	e032      	b.n	800c9cc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d904      	bls.n	800c976 <dir_sdi+0x98>
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	695b      	ldr	r3, [r3, #20]
 800c970:	697a      	ldr	r2, [r7, #20]
 800c972:	429a      	cmp	r2, r3
 800c974:	d301      	bcc.n	800c97a <dir_sdi+0x9c>
 800c976:	2302      	movs	r3, #2
 800c978:	e028      	b.n	800c9cc <dir_sdi+0xee>
			ofs -= csz;
 800c97a:	683a      	ldr	r2, [r7, #0]
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	1ad3      	subs	r3, r2, r3
 800c980:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c982:	683a      	ldr	r2, [r7, #0]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	429a      	cmp	r2, r3
 800c988:	d2e1      	bcs.n	800c94e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c98a:	6979      	ldr	r1, [r7, #20]
 800c98c:	6938      	ldr	r0, [r7, #16]
 800c98e:	f7ff fcc5 	bl	800c31c <clust2sect>
 800c992:	4602      	mov	r2, r0
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	697a      	ldr	r2, [r7, #20]
 800c99c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	69db      	ldr	r3, [r3, #28]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d101      	bne.n	800c9aa <dir_sdi+0xcc>
 800c9a6:	2302      	movs	r3, #2
 800c9a8:	e010      	b.n	800c9cc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	69da      	ldr	r2, [r3, #28]
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	0a5b      	lsrs	r3, r3, #9
 800c9b2:	441a      	add	r2, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9c4:	441a      	add	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c9ca:	2300      	movs	r3, #0
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3718      	adds	r7, #24
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b086      	sub	sp, #24
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	695b      	ldr	r3, [r3, #20]
 800c9e8:	3320      	adds	r3, #32
 800c9ea:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	69db      	ldr	r3, [r3, #28]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d003      	beq.n	800c9fc <dir_next+0x28>
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c9fa:	d301      	bcc.n	800ca00 <dir_next+0x2c>
 800c9fc:	2304      	movs	r3, #4
 800c9fe:	e0aa      	b.n	800cb56 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f040 8098 	bne.w	800cb3c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	69db      	ldr	r3, [r3, #28]
 800ca10:	1c5a      	adds	r2, r3, #1
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	699b      	ldr	r3, [r3, #24]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d10b      	bne.n	800ca36 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	095b      	lsrs	r3, r3, #5
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	8912      	ldrh	r2, [r2, #8]
 800ca26:	4293      	cmp	r3, r2
 800ca28:	f0c0 8088 	bcc.w	800cb3c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	61da      	str	r2, [r3, #28]
 800ca32:	2304      	movs	r3, #4
 800ca34:	e08f      	b.n	800cb56 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	0a5b      	lsrs	r3, r3, #9
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	8952      	ldrh	r2, [r2, #10]
 800ca3e:	3a01      	subs	r2, #1
 800ca40:	4013      	ands	r3, r2
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d17a      	bne.n	800cb3c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	699b      	ldr	r3, [r3, #24]
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	4610      	mov	r0, r2
 800ca50:	f7ff fc83 	bl	800c35a <get_fat>
 800ca54:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d801      	bhi.n	800ca60 <dir_next+0x8c>
 800ca5c:	2302      	movs	r3, #2
 800ca5e:	e07a      	b.n	800cb56 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca66:	d101      	bne.n	800ca6c <dir_next+0x98>
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e074      	b.n	800cb56 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	695b      	ldr	r3, [r3, #20]
 800ca70:	697a      	ldr	r2, [r7, #20]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d358      	bcc.n	800cb28 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d104      	bne.n	800ca86 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	61da      	str	r2, [r3, #28]
 800ca82:	2304      	movs	r3, #4
 800ca84:	e067      	b.n	800cb56 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	699b      	ldr	r3, [r3, #24]
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	4610      	mov	r0, r2
 800ca90:	f7ff fe59 	bl	800c746 <create_chain>
 800ca94:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d101      	bne.n	800caa0 <dir_next+0xcc>
 800ca9c:	2307      	movs	r3, #7
 800ca9e:	e05a      	b.n	800cb56 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d101      	bne.n	800caaa <dir_next+0xd6>
 800caa6:	2302      	movs	r3, #2
 800caa8:	e055      	b.n	800cb56 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cab0:	d101      	bne.n	800cab6 <dir_next+0xe2>
 800cab2:	2301      	movs	r3, #1
 800cab4:	e04f      	b.n	800cb56 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cab6:	68f8      	ldr	r0, [r7, #12]
 800cab8:	f7ff fb50 	bl	800c15c <sync_window>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d001      	beq.n	800cac6 <dir_next+0xf2>
 800cac2:	2301      	movs	r3, #1
 800cac4:	e047      	b.n	800cb56 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	3330      	adds	r3, #48	@ 0x30
 800caca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cace:	2100      	movs	r1, #0
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7ff f97a 	bl	800bdca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cad6:	2300      	movs	r3, #0
 800cad8:	613b      	str	r3, [r7, #16]
 800cada:	6979      	ldr	r1, [r7, #20]
 800cadc:	68f8      	ldr	r0, [r7, #12]
 800cade:	f7ff fc1d 	bl	800c31c <clust2sect>
 800cae2:	4602      	mov	r2, r0
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cae8:	e012      	b.n	800cb10 <dir_next+0x13c>
						fs->wflag = 1;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2201      	movs	r2, #1
 800caee:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800caf0:	68f8      	ldr	r0, [r7, #12]
 800caf2:	f7ff fb33 	bl	800c15c <sync_window>
 800caf6:	4603      	mov	r3, r0
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d001      	beq.n	800cb00 <dir_next+0x12c>
 800cafc:	2301      	movs	r3, #1
 800cafe:	e02a      	b.n	800cb56 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	3301      	adds	r3, #1
 800cb04:	613b      	str	r3, [r7, #16]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb0a:	1c5a      	adds	r2, r3, #1
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	895b      	ldrh	r3, [r3, #10]
 800cb14:	461a      	mov	r2, r3
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d3e6      	bcc.n	800caea <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	1ad2      	subs	r2, r2, r3
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	697a      	ldr	r2, [r7, #20]
 800cb2c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cb2e:	6979      	ldr	r1, [r7, #20]
 800cb30:	68f8      	ldr	r0, [r7, #12]
 800cb32:	f7ff fbf3 	bl	800c31c <clust2sect>
 800cb36:	4602      	mov	r2, r0
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	68ba      	ldr	r2, [r7, #8]
 800cb40:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb4e:	441a      	add	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3718      	adds	r7, #24
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b086      	sub	sp, #24
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
 800cb66:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cb6e:	2100      	movs	r1, #0
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f7ff feb4 	bl	800c8de <dir_sdi>
 800cb76:	4603      	mov	r3, r0
 800cb78:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cb7a:	7dfb      	ldrb	r3, [r7, #23]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d12b      	bne.n	800cbd8 <dir_alloc+0x7a>
		n = 0;
 800cb80:	2300      	movs	r3, #0
 800cb82:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	69db      	ldr	r3, [r3, #28]
 800cb88:	4619      	mov	r1, r3
 800cb8a:	68f8      	ldr	r0, [r7, #12]
 800cb8c:	f7ff fb2a 	bl	800c1e4 <move_window>
 800cb90:	4603      	mov	r3, r0
 800cb92:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cb94:	7dfb      	ldrb	r3, [r7, #23]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d11d      	bne.n	800cbd6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6a1b      	ldr	r3, [r3, #32]
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	2be5      	cmp	r3, #229	@ 0xe5
 800cba2:	d004      	beq.n	800cbae <dir_alloc+0x50>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6a1b      	ldr	r3, [r3, #32]
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d107      	bne.n	800cbbe <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	613b      	str	r3, [r7, #16]
 800cbb4:	693a      	ldr	r2, [r7, #16]
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d102      	bne.n	800cbc2 <dir_alloc+0x64>
 800cbbc:	e00c      	b.n	800cbd8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cbc2:	2101      	movs	r1, #1
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f7ff ff05 	bl	800c9d4 <dir_next>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cbce:	7dfb      	ldrb	r3, [r7, #23]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d0d7      	beq.n	800cb84 <dir_alloc+0x26>
 800cbd4:	e000      	b.n	800cbd8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cbd6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cbd8:	7dfb      	ldrb	r3, [r7, #23]
 800cbda:	2b04      	cmp	r3, #4
 800cbdc:	d101      	bne.n	800cbe2 <dir_alloc+0x84>
 800cbde:	2307      	movs	r3, #7
 800cbe0:	75fb      	strb	r3, [r7, #23]
	return res;
 800cbe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3718      	adds	r7, #24
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b084      	sub	sp, #16
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	331a      	adds	r3, #26
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7ff f842 	bl	800bc84 <ld_word>
 800cc00:	4603      	mov	r3, r0
 800cc02:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	2b03      	cmp	r3, #3
 800cc0a:	d109      	bne.n	800cc20 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	3314      	adds	r3, #20
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7ff f837 	bl	800bc84 <ld_word>
 800cc16:	4603      	mov	r3, r0
 800cc18:	041b      	lsls	r3, r3, #16
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cc20:	68fb      	ldr	r3, [r7, #12]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b084      	sub	sp, #16
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	60f8      	str	r0, [r7, #12]
 800cc32:	60b9      	str	r1, [r7, #8]
 800cc34:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	331a      	adds	r3, #26
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	b292      	uxth	r2, r2
 800cc3e:	4611      	mov	r1, r2
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7ff f85a 	bl	800bcfa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	2b03      	cmp	r3, #3
 800cc4c:	d109      	bne.n	800cc62 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	f103 0214 	add.w	r2, r3, #20
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	0c1b      	lsrs	r3, r3, #16
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	4610      	mov	r0, r2
 800cc5e:	f7ff f84c 	bl	800bcfa <st_word>
	}
}
 800cc62:	bf00      	nop
 800cc64:	3710      	adds	r7, #16
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}

0800cc6a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cc6a:	b580      	push	{r7, lr}
 800cc6c:	b086      	sub	sp, #24
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cc78:	2100      	movs	r1, #0
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f7ff fe2f 	bl	800c8de <dir_sdi>
 800cc80:	4603      	mov	r3, r0
 800cc82:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cc84:	7dfb      	ldrb	r3, [r7, #23]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d001      	beq.n	800cc8e <dir_find+0x24>
 800cc8a:	7dfb      	ldrb	r3, [r7, #23]
 800cc8c:	e03e      	b.n	800cd0c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	69db      	ldr	r3, [r3, #28]
 800cc92:	4619      	mov	r1, r3
 800cc94:	6938      	ldr	r0, [r7, #16]
 800cc96:	f7ff faa5 	bl	800c1e4 <move_window>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cc9e:	7dfb      	ldrb	r3, [r7, #23]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d12f      	bne.n	800cd04 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6a1b      	ldr	r3, [r3, #32]
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ccac:	7bfb      	ldrb	r3, [r7, #15]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d102      	bne.n	800ccb8 <dir_find+0x4e>
 800ccb2:	2304      	movs	r3, #4
 800ccb4:	75fb      	strb	r3, [r7, #23]
 800ccb6:	e028      	b.n	800cd0a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6a1b      	ldr	r3, [r3, #32]
 800ccbc:	330b      	adds	r3, #11
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ccc4:	b2da      	uxtb	r2, r3
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6a1b      	ldr	r3, [r3, #32]
 800ccce:	330b      	adds	r3, #11
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	f003 0308 	and.w	r3, r3, #8
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d10a      	bne.n	800ccf0 <dir_find+0x86>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6a18      	ldr	r0, [r3, #32]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	3324      	adds	r3, #36	@ 0x24
 800cce2:	220b      	movs	r2, #11
 800cce4:	4619      	mov	r1, r3
 800cce6:	f7ff f88b 	bl	800be00 <mem_cmp>
 800ccea:	4603      	mov	r3, r0
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d00b      	beq.n	800cd08 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f7ff fe6e 	bl	800c9d4 <dir_next>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ccfc:	7dfb      	ldrb	r3, [r7, #23]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d0c5      	beq.n	800cc8e <dir_find+0x24>
 800cd02:	e002      	b.n	800cd0a <dir_find+0xa0>
		if (res != FR_OK) break;
 800cd04:	bf00      	nop
 800cd06:	e000      	b.n	800cd0a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cd08:	bf00      	nop

	return res;
 800cd0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3718      	adds	r7, #24
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800cd22:	2101      	movs	r1, #1
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f7ff ff1a 	bl	800cb5e <dir_alloc>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cd2e:	7bfb      	ldrb	r3, [r7, #15]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d11c      	bne.n	800cd6e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	69db      	ldr	r3, [r3, #28]
 800cd38:	4619      	mov	r1, r3
 800cd3a:	68b8      	ldr	r0, [r7, #8]
 800cd3c:	f7ff fa52 	bl	800c1e4 <move_window>
 800cd40:	4603      	mov	r3, r0
 800cd42:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cd44:	7bfb      	ldrb	r3, [r7, #15]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d111      	bne.n	800cd6e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6a1b      	ldr	r3, [r3, #32]
 800cd4e:	2220      	movs	r2, #32
 800cd50:	2100      	movs	r1, #0
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7ff f839 	bl	800bdca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6a18      	ldr	r0, [r3, #32]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	3324      	adds	r3, #36	@ 0x24
 800cd60:	220b      	movs	r2, #11
 800cd62:	4619      	mov	r1, r3
 800cd64:	f7ff f810 	bl	800bd88 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cd6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3710      	adds	r7, #16
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b088      	sub	sp, #32
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	60fb      	str	r3, [r7, #12]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	3324      	adds	r3, #36	@ 0x24
 800cd8c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cd8e:	220b      	movs	r2, #11
 800cd90:	2120      	movs	r1, #32
 800cd92:	68b8      	ldr	r0, [r7, #8]
 800cd94:	f7ff f819 	bl	800bdca <mem_set>
	si = i = 0; ni = 8;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	613b      	str	r3, [r7, #16]
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	61fb      	str	r3, [r7, #28]
 800cda0:	2308      	movs	r3, #8
 800cda2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	1c5a      	adds	r2, r3, #1
 800cda8:	61fa      	str	r2, [r7, #28]
 800cdaa:	68fa      	ldr	r2, [r7, #12]
 800cdac:	4413      	add	r3, r2
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cdb2:	7efb      	ldrb	r3, [r7, #27]
 800cdb4:	2b20      	cmp	r3, #32
 800cdb6:	d94e      	bls.n	800ce56 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cdb8:	7efb      	ldrb	r3, [r7, #27]
 800cdba:	2b2f      	cmp	r3, #47	@ 0x2f
 800cdbc:	d006      	beq.n	800cdcc <create_name+0x54>
 800cdbe:	7efb      	ldrb	r3, [r7, #27]
 800cdc0:	2b5c      	cmp	r3, #92	@ 0x5c
 800cdc2:	d110      	bne.n	800cde6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cdc4:	e002      	b.n	800cdcc <create_name+0x54>
 800cdc6:	69fb      	ldr	r3, [r7, #28]
 800cdc8:	3301      	adds	r3, #1
 800cdca:	61fb      	str	r3, [r7, #28]
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	69fb      	ldr	r3, [r7, #28]
 800cdd0:	4413      	add	r3, r2
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	2b2f      	cmp	r3, #47	@ 0x2f
 800cdd6:	d0f6      	beq.n	800cdc6 <create_name+0x4e>
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	69fb      	ldr	r3, [r7, #28]
 800cddc:	4413      	add	r3, r2
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	2b5c      	cmp	r3, #92	@ 0x5c
 800cde2:	d0f0      	beq.n	800cdc6 <create_name+0x4e>
			break;
 800cde4:	e038      	b.n	800ce58 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cde6:	7efb      	ldrb	r3, [r7, #27]
 800cde8:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdea:	d003      	beq.n	800cdf4 <create_name+0x7c>
 800cdec:	693a      	ldr	r2, [r7, #16]
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d30c      	bcc.n	800ce0e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	2b0b      	cmp	r3, #11
 800cdf8:	d002      	beq.n	800ce00 <create_name+0x88>
 800cdfa:	7efb      	ldrb	r3, [r7, #27]
 800cdfc:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdfe:	d001      	beq.n	800ce04 <create_name+0x8c>
 800ce00:	2306      	movs	r3, #6
 800ce02:	e044      	b.n	800ce8e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ce04:	2308      	movs	r3, #8
 800ce06:	613b      	str	r3, [r7, #16]
 800ce08:	230b      	movs	r3, #11
 800ce0a:	617b      	str	r3, [r7, #20]
			continue;
 800ce0c:	e022      	b.n	800ce54 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ce0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	da04      	bge.n	800ce20 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ce16:	7efb      	ldrb	r3, [r7, #27]
 800ce18:	3b80      	subs	r3, #128	@ 0x80
 800ce1a:	4a1f      	ldr	r2, [pc, #124]	@ (800ce98 <create_name+0x120>)
 800ce1c:	5cd3      	ldrb	r3, [r2, r3]
 800ce1e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ce20:	7efb      	ldrb	r3, [r7, #27]
 800ce22:	4619      	mov	r1, r3
 800ce24:	481d      	ldr	r0, [pc, #116]	@ (800ce9c <create_name+0x124>)
 800ce26:	f7ff f812 	bl	800be4e <chk_chr>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d001      	beq.n	800ce34 <create_name+0xbc>
 800ce30:	2306      	movs	r3, #6
 800ce32:	e02c      	b.n	800ce8e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ce34:	7efb      	ldrb	r3, [r7, #27]
 800ce36:	2b60      	cmp	r3, #96	@ 0x60
 800ce38:	d905      	bls.n	800ce46 <create_name+0xce>
 800ce3a:	7efb      	ldrb	r3, [r7, #27]
 800ce3c:	2b7a      	cmp	r3, #122	@ 0x7a
 800ce3e:	d802      	bhi.n	800ce46 <create_name+0xce>
 800ce40:	7efb      	ldrb	r3, [r7, #27]
 800ce42:	3b20      	subs	r3, #32
 800ce44:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	1c5a      	adds	r2, r3, #1
 800ce4a:	613a      	str	r2, [r7, #16]
 800ce4c:	68ba      	ldr	r2, [r7, #8]
 800ce4e:	4413      	add	r3, r2
 800ce50:	7efa      	ldrb	r2, [r7, #27]
 800ce52:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ce54:	e7a6      	b.n	800cda4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ce56:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ce58:	68fa      	ldr	r2, [r7, #12]
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	441a      	add	r2, r3
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d101      	bne.n	800ce6c <create_name+0xf4>
 800ce68:	2306      	movs	r3, #6
 800ce6a:	e010      	b.n	800ce8e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	2be5      	cmp	r3, #229	@ 0xe5
 800ce72:	d102      	bne.n	800ce7a <create_name+0x102>
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	2205      	movs	r2, #5
 800ce78:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ce7a:	7efb      	ldrb	r3, [r7, #27]
 800ce7c:	2b20      	cmp	r3, #32
 800ce7e:	d801      	bhi.n	800ce84 <create_name+0x10c>
 800ce80:	2204      	movs	r2, #4
 800ce82:	e000      	b.n	800ce86 <create_name+0x10e>
 800ce84:	2200      	movs	r2, #0
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	330b      	adds	r3, #11
 800ce8a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ce8c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3720      	adds	r7, #32
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	0800f218 	.word	0x0800f218
 800ce9c:	0800ef50 	.word	0x0800ef50

0800cea0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b086      	sub	sp, #24
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ceb4:	e002      	b.n	800cebc <follow_path+0x1c>
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	3301      	adds	r3, #1
 800ceba:	603b      	str	r3, [r7, #0]
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	2b2f      	cmp	r3, #47	@ 0x2f
 800cec2:	d0f8      	beq.n	800ceb6 <follow_path+0x16>
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	2b5c      	cmp	r3, #92	@ 0x5c
 800ceca:	d0f4      	beq.n	800ceb6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	2200      	movs	r2, #0
 800ced0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	2b1f      	cmp	r3, #31
 800ced8:	d80a      	bhi.n	800cef0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2280      	movs	r2, #128	@ 0x80
 800cede:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800cee2:	2100      	movs	r1, #0
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f7ff fcfa 	bl	800c8de <dir_sdi>
 800ceea:	4603      	mov	r3, r0
 800ceec:	75fb      	strb	r3, [r7, #23]
 800ceee:	e043      	b.n	800cf78 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cef0:	463b      	mov	r3, r7
 800cef2:	4619      	mov	r1, r3
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f7ff ff3f 	bl	800cd78 <create_name>
 800cefa:	4603      	mov	r3, r0
 800cefc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cefe:	7dfb      	ldrb	r3, [r7, #23]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d134      	bne.n	800cf6e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f7ff feb0 	bl	800cc6a <dir_find>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cf14:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cf16:	7dfb      	ldrb	r3, [r7, #23]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d00a      	beq.n	800cf32 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cf1c:	7dfb      	ldrb	r3, [r7, #23]
 800cf1e:	2b04      	cmp	r3, #4
 800cf20:	d127      	bne.n	800cf72 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cf22:	7afb      	ldrb	r3, [r7, #11]
 800cf24:	f003 0304 	and.w	r3, r3, #4
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d122      	bne.n	800cf72 <follow_path+0xd2>
 800cf2c:	2305      	movs	r3, #5
 800cf2e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cf30:	e01f      	b.n	800cf72 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cf32:	7afb      	ldrb	r3, [r7, #11]
 800cf34:	f003 0304 	and.w	r3, r3, #4
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d11c      	bne.n	800cf76 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	799b      	ldrb	r3, [r3, #6]
 800cf40:	f003 0310 	and.w	r3, r3, #16
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d102      	bne.n	800cf4e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cf48:	2305      	movs	r3, #5
 800cf4a:	75fb      	strb	r3, [r7, #23]
 800cf4c:	e014      	b.n	800cf78 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	695b      	ldr	r3, [r3, #20]
 800cf58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf5c:	4413      	add	r3, r2
 800cf5e:	4619      	mov	r1, r3
 800cf60:	68f8      	ldr	r0, [r7, #12]
 800cf62:	f7ff fe43 	bl	800cbec <ld_clust>
 800cf66:	4602      	mov	r2, r0
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cf6c:	e7c0      	b.n	800cef0 <follow_path+0x50>
			if (res != FR_OK) break;
 800cf6e:	bf00      	nop
 800cf70:	e002      	b.n	800cf78 <follow_path+0xd8>
				break;
 800cf72:	bf00      	nop
 800cf74:	e000      	b.n	800cf78 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cf76:	bf00      	nop
			}
		}
	}

	return res;
 800cf78:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3718      	adds	r7, #24
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cf82:	b480      	push	{r7}
 800cf84:	b087      	sub	sp, #28
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cf8a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf8e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d031      	beq.n	800cffc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	617b      	str	r3, [r7, #20]
 800cf9e:	e002      	b.n	800cfa6 <get_ldnumber+0x24>
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	617b      	str	r3, [r7, #20]
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	2b20      	cmp	r3, #32
 800cfac:	d903      	bls.n	800cfb6 <get_ldnumber+0x34>
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	2b3a      	cmp	r3, #58	@ 0x3a
 800cfb4:	d1f4      	bne.n	800cfa0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	2b3a      	cmp	r3, #58	@ 0x3a
 800cfbc:	d11c      	bne.n	800cff8 <get_ldnumber+0x76>
			tp = *path;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	1c5a      	adds	r2, r3, #1
 800cfc8:	60fa      	str	r2, [r7, #12]
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	3b30      	subs	r3, #48	@ 0x30
 800cfce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	2b09      	cmp	r3, #9
 800cfd4:	d80e      	bhi.n	800cff4 <get_ldnumber+0x72>
 800cfd6:	68fa      	ldr	r2, [r7, #12]
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d10a      	bne.n	800cff4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d107      	bne.n	800cff4 <get_ldnumber+0x72>
					vol = (int)i;
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	3301      	adds	r3, #1
 800cfec:	617b      	str	r3, [r7, #20]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	697a      	ldr	r2, [r7, #20]
 800cff2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	e002      	b.n	800cffe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cff8:	2300      	movs	r3, #0
 800cffa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cffc:	693b      	ldr	r3, [r7, #16]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	371c      	adds	r7, #28
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr
	...

0800d00c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2200      	movs	r2, #0
 800d01a:	70da      	strb	r2, [r3, #3]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f04f 32ff 	mov.w	r2, #4294967295
 800d022:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d024:	6839      	ldr	r1, [r7, #0]
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f7ff f8dc 	bl	800c1e4 <move_window>
 800d02c:	4603      	mov	r3, r0
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d001      	beq.n	800d036 <check_fs+0x2a>
 800d032:	2304      	movs	r3, #4
 800d034:	e038      	b.n	800d0a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	3330      	adds	r3, #48	@ 0x30
 800d03a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fe fe20 	bl	800bc84 <ld_word>
 800d044:	4603      	mov	r3, r0
 800d046:	461a      	mov	r2, r3
 800d048:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d001      	beq.n	800d054 <check_fs+0x48>
 800d050:	2303      	movs	r3, #3
 800d052:	e029      	b.n	800d0a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d05a:	2be9      	cmp	r3, #233	@ 0xe9
 800d05c:	d009      	beq.n	800d072 <check_fs+0x66>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d064:	2beb      	cmp	r3, #235	@ 0xeb
 800d066:	d11e      	bne.n	800d0a6 <check_fs+0x9a>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800d06e:	2b90      	cmp	r3, #144	@ 0x90
 800d070:	d119      	bne.n	800d0a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	3330      	adds	r3, #48	@ 0x30
 800d076:	3336      	adds	r3, #54	@ 0x36
 800d078:	4618      	mov	r0, r3
 800d07a:	f7fe fe1b 	bl	800bcb4 <ld_dword>
 800d07e:	4603      	mov	r3, r0
 800d080:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d084:	4a0a      	ldr	r2, [pc, #40]	@ (800d0b0 <check_fs+0xa4>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d101      	bne.n	800d08e <check_fs+0x82>
 800d08a:	2300      	movs	r3, #0
 800d08c:	e00c      	b.n	800d0a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	3330      	adds	r3, #48	@ 0x30
 800d092:	3352      	adds	r3, #82	@ 0x52
 800d094:	4618      	mov	r0, r3
 800d096:	f7fe fe0d 	bl	800bcb4 <ld_dword>
 800d09a:	4603      	mov	r3, r0
 800d09c:	4a05      	ldr	r2, [pc, #20]	@ (800d0b4 <check_fs+0xa8>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d101      	bne.n	800d0a6 <check_fs+0x9a>
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	e000      	b.n	800d0a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d0a6:	2302      	movs	r3, #2
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3708      	adds	r7, #8
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	00544146 	.word	0x00544146
 800d0b4:	33544146 	.word	0x33544146

0800d0b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b096      	sub	sp, #88	@ 0x58
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d0cc:	68f8      	ldr	r0, [r7, #12]
 800d0ce:	f7ff ff58 	bl	800cf82 <get_ldnumber>
 800d0d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d0d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	da01      	bge.n	800d0de <find_volume+0x26>
 800d0da:	230b      	movs	r3, #11
 800d0dc:	e22d      	b.n	800d53a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d0de:	4aa1      	ldr	r2, [pc, #644]	@ (800d364 <find_volume+0x2ac>)
 800d0e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0e6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d101      	bne.n	800d0f2 <find_volume+0x3a>
 800d0ee:	230c      	movs	r3, #12
 800d0f0:	e223      	b.n	800d53a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d0f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d0f8:	79fb      	ldrb	r3, [r7, #7]
 800d0fa:	f023 0301 	bic.w	r3, r3, #1
 800d0fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d01a      	beq.n	800d13e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d10a:	785b      	ldrb	r3, [r3, #1]
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7fe fd19 	bl	800bb44 <disk_status>
 800d112:	4603      	mov	r3, r0
 800d114:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d118:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d11c:	f003 0301 	and.w	r3, r3, #1
 800d120:	2b00      	cmp	r3, #0
 800d122:	d10c      	bne.n	800d13e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d124:	79fb      	ldrb	r3, [r7, #7]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d007      	beq.n	800d13a <find_volume+0x82>
 800d12a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d12e:	f003 0304 	and.w	r3, r3, #4
 800d132:	2b00      	cmp	r3, #0
 800d134:	d001      	beq.n	800d13a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d136:	230a      	movs	r3, #10
 800d138:	e1ff      	b.n	800d53a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d13a:	2300      	movs	r3, #0
 800d13c:	e1fd      	b.n	800d53a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d140:	2200      	movs	r2, #0
 800d142:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d146:	b2da      	uxtb	r2, r3
 800d148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d14a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d14e:	785b      	ldrb	r3, [r3, #1]
 800d150:	4618      	mov	r0, r3
 800d152:	f7fe fd11 	bl	800bb78 <disk_initialize>
 800d156:	4603      	mov	r3, r0
 800d158:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d15c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d160:	f003 0301 	and.w	r3, r3, #1
 800d164:	2b00      	cmp	r3, #0
 800d166:	d001      	beq.n	800d16c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d168:	2303      	movs	r3, #3
 800d16a:	e1e6      	b.n	800d53a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d16c:	79fb      	ldrb	r3, [r7, #7]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d007      	beq.n	800d182 <find_volume+0xca>
 800d172:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d176:	f003 0304 	and.w	r3, r3, #4
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d001      	beq.n	800d182 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d17e:	230a      	movs	r3, #10
 800d180:	e1db      	b.n	800d53a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d182:	2300      	movs	r3, #0
 800d184:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d186:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d188:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d18a:	f7ff ff3f 	bl	800d00c <check_fs>
 800d18e:	4603      	mov	r3, r0
 800d190:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d194:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d198:	2b02      	cmp	r3, #2
 800d19a:	d149      	bne.n	800d230 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d19c:	2300      	movs	r3, #0
 800d19e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1a0:	e01e      	b.n	800d1e0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d1a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d1a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1aa:	011b      	lsls	r3, r3, #4
 800d1ac:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d1b0:	4413      	add	r3, r2
 800d1b2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b6:	3304      	adds	r3, #4
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d006      	beq.n	800d1cc <find_volume+0x114>
 800d1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1c0:	3308      	adds	r3, #8
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fe fd76 	bl	800bcb4 <ld_dword>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	e000      	b.n	800d1ce <find_volume+0x116>
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1d0:	009b      	lsls	r3, r3, #2
 800d1d2:	3358      	adds	r3, #88	@ 0x58
 800d1d4:	443b      	add	r3, r7
 800d1d6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d1da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1dc:	3301      	adds	r3, #1
 800d1de:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1e2:	2b03      	cmp	r3, #3
 800d1e4:	d9dd      	bls.n	800d1a2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d1ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d002      	beq.n	800d1f6 <find_volume+0x13e>
 800d1f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1f2:	3b01      	subs	r3, #1
 800d1f4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d1f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	3358      	adds	r3, #88	@ 0x58
 800d1fc:	443b      	add	r3, r7
 800d1fe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d202:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d206:	2b00      	cmp	r3, #0
 800d208:	d005      	beq.n	800d216 <find_volume+0x15e>
 800d20a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d20c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d20e:	f7ff fefd 	bl	800d00c <check_fs>
 800d212:	4603      	mov	r3, r0
 800d214:	e000      	b.n	800d218 <find_volume+0x160>
 800d216:	2303      	movs	r3, #3
 800d218:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d21c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d220:	2b01      	cmp	r3, #1
 800d222:	d905      	bls.n	800d230 <find_volume+0x178>
 800d224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d226:	3301      	adds	r3, #1
 800d228:	643b      	str	r3, [r7, #64]	@ 0x40
 800d22a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d22c:	2b03      	cmp	r3, #3
 800d22e:	d9e2      	bls.n	800d1f6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d230:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d234:	2b04      	cmp	r3, #4
 800d236:	d101      	bne.n	800d23c <find_volume+0x184>
 800d238:	2301      	movs	r3, #1
 800d23a:	e17e      	b.n	800d53a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d23c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d240:	2b01      	cmp	r3, #1
 800d242:	d901      	bls.n	800d248 <find_volume+0x190>
 800d244:	230d      	movs	r3, #13
 800d246:	e178      	b.n	800d53a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d24a:	3330      	adds	r3, #48	@ 0x30
 800d24c:	330b      	adds	r3, #11
 800d24e:	4618      	mov	r0, r3
 800d250:	f7fe fd18 	bl	800bc84 <ld_word>
 800d254:	4603      	mov	r3, r0
 800d256:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d25a:	d001      	beq.n	800d260 <find_volume+0x1a8>
 800d25c:	230d      	movs	r3, #13
 800d25e:	e16c      	b.n	800d53a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d262:	3330      	adds	r3, #48	@ 0x30
 800d264:	3316      	adds	r3, #22
 800d266:	4618      	mov	r0, r3
 800d268:	f7fe fd0c 	bl	800bc84 <ld_word>
 800d26c:	4603      	mov	r3, r0
 800d26e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d270:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d272:	2b00      	cmp	r3, #0
 800d274:	d106      	bne.n	800d284 <find_volume+0x1cc>
 800d276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d278:	3330      	adds	r3, #48	@ 0x30
 800d27a:	3324      	adds	r3, #36	@ 0x24
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7fe fd19 	bl	800bcb4 <ld_dword>
 800d282:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d286:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d288:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d28c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800d290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d292:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d296:	789b      	ldrb	r3, [r3, #2]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d005      	beq.n	800d2a8 <find_volume+0x1f0>
 800d29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d29e:	789b      	ldrb	r3, [r3, #2]
 800d2a0:	2b02      	cmp	r3, #2
 800d2a2:	d001      	beq.n	800d2a8 <find_volume+0x1f0>
 800d2a4:	230d      	movs	r3, #13
 800d2a6:	e148      	b.n	800d53a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2aa:	789b      	ldrb	r3, [r3, #2]
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2b0:	fb02 f303 	mul.w	r3, r2, r3
 800d2b4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d2bc:	461a      	mov	r2, r3
 800d2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c4:	895b      	ldrh	r3, [r3, #10]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d008      	beq.n	800d2dc <find_volume+0x224>
 800d2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2cc:	895b      	ldrh	r3, [r3, #10]
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2d2:	895b      	ldrh	r3, [r3, #10]
 800d2d4:	3b01      	subs	r3, #1
 800d2d6:	4013      	ands	r3, r2
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d001      	beq.n	800d2e0 <find_volume+0x228>
 800d2dc:	230d      	movs	r3, #13
 800d2de:	e12c      	b.n	800d53a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2e2:	3330      	adds	r3, #48	@ 0x30
 800d2e4:	3311      	adds	r3, #17
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7fe fccc 	bl	800bc84 <ld_word>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2f6:	891b      	ldrh	r3, [r3, #8]
 800d2f8:	f003 030f 	and.w	r3, r3, #15
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d001      	beq.n	800d306 <find_volume+0x24e>
 800d302:	230d      	movs	r3, #13
 800d304:	e119      	b.n	800d53a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d308:	3330      	adds	r3, #48	@ 0x30
 800d30a:	3313      	adds	r3, #19
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7fe fcb9 	bl	800bc84 <ld_word>
 800d312:	4603      	mov	r3, r0
 800d314:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d106      	bne.n	800d32a <find_volume+0x272>
 800d31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d31e:	3330      	adds	r3, #48	@ 0x30
 800d320:	3320      	adds	r3, #32
 800d322:	4618      	mov	r0, r3
 800d324:	f7fe fcc6 	bl	800bcb4 <ld_dword>
 800d328:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d32c:	3330      	adds	r3, #48	@ 0x30
 800d32e:	330e      	adds	r3, #14
 800d330:	4618      	mov	r0, r3
 800d332:	f7fe fca7 	bl	800bc84 <ld_word>
 800d336:	4603      	mov	r3, r0
 800d338:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d33a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d101      	bne.n	800d344 <find_volume+0x28c>
 800d340:	230d      	movs	r3, #13
 800d342:	e0fa      	b.n	800d53a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d344:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d348:	4413      	add	r3, r2
 800d34a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d34c:	8912      	ldrh	r2, [r2, #8]
 800d34e:	0912      	lsrs	r2, r2, #4
 800d350:	b292      	uxth	r2, r2
 800d352:	4413      	add	r3, r2
 800d354:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d356:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d204      	bcs.n	800d368 <find_volume+0x2b0>
 800d35e:	230d      	movs	r3, #13
 800d360:	e0eb      	b.n	800d53a <find_volume+0x482>
 800d362:	bf00      	nop
 800d364:	2408a030 	.word	0x2408a030
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d368:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d36c:	1ad3      	subs	r3, r2, r3
 800d36e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d370:	8952      	ldrh	r2, [r2, #10]
 800d372:	fbb3 f3f2 	udiv	r3, r3, r2
 800d376:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d101      	bne.n	800d382 <find_volume+0x2ca>
 800d37e:	230d      	movs	r3, #13
 800d380:	e0db      	b.n	800d53a <find_volume+0x482>
		fmt = FS_FAT32;
 800d382:	2303      	movs	r3, #3
 800d384:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d38a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d38e:	4293      	cmp	r3, r2
 800d390:	d802      	bhi.n	800d398 <find_volume+0x2e0>
 800d392:	2302      	movs	r3, #2
 800d394:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d39a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d802      	bhi.n	800d3a8 <find_volume+0x2f0>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3aa:	1c9a      	adds	r2, r3, #2
 800d3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ae:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d3b4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d3b6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d3b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3ba:	441a      	add	r2, r3
 800d3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3be:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d3c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3c4:	441a      	add	r2, r3
 800d3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800d3ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d3ce:	2b03      	cmp	r3, #3
 800d3d0:	d11e      	bne.n	800d410 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3d4:	3330      	adds	r3, #48	@ 0x30
 800d3d6:	332a      	adds	r3, #42	@ 0x2a
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7fe fc53 	bl	800bc84 <ld_word>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d001      	beq.n	800d3e8 <find_volume+0x330>
 800d3e4:	230d      	movs	r3, #13
 800d3e6:	e0a8      	b.n	800d53a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ea:	891b      	ldrh	r3, [r3, #8]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d001      	beq.n	800d3f4 <find_volume+0x33c>
 800d3f0:	230d      	movs	r3, #13
 800d3f2:	e0a2      	b.n	800d53a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3f6:	3330      	adds	r3, #48	@ 0x30
 800d3f8:	332c      	adds	r3, #44	@ 0x2c
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7fe fc5a 	bl	800bcb4 <ld_dword>
 800d400:	4602      	mov	r2, r0
 800d402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d404:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d408:	695b      	ldr	r3, [r3, #20]
 800d40a:	009b      	lsls	r3, r3, #2
 800d40c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d40e:	e01f      	b.n	800d450 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d412:	891b      	ldrh	r3, [r3, #8]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d101      	bne.n	800d41c <find_volume+0x364>
 800d418:	230d      	movs	r3, #13
 800d41a:	e08e      	b.n	800d53a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d41e:	6a1a      	ldr	r2, [r3, #32]
 800d420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d422:	441a      	add	r2, r3
 800d424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d426:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d428:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d42c:	2b02      	cmp	r3, #2
 800d42e:	d103      	bne.n	800d438 <find_volume+0x380>
 800d430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d432:	695b      	ldr	r3, [r3, #20]
 800d434:	005b      	lsls	r3, r3, #1
 800d436:	e00a      	b.n	800d44e <find_volume+0x396>
 800d438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d43a:	695a      	ldr	r2, [r3, #20]
 800d43c:	4613      	mov	r3, r2
 800d43e:	005b      	lsls	r3, r3, #1
 800d440:	4413      	add	r3, r2
 800d442:	085a      	lsrs	r2, r3, #1
 800d444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d446:	695b      	ldr	r3, [r3, #20]
 800d448:	f003 0301 	and.w	r3, r3, #1
 800d44c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d44e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d452:	699a      	ldr	r2, [r3, #24]
 800d454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d456:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d45a:	0a5b      	lsrs	r3, r3, #9
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d201      	bcs.n	800d464 <find_volume+0x3ac>
 800d460:	230d      	movs	r3, #13
 800d462:	e06a      	b.n	800d53a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d466:	f04f 32ff 	mov.w	r2, #4294967295
 800d46a:	611a      	str	r2, [r3, #16]
 800d46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d46e:	691a      	ldr	r2, [r3, #16]
 800d470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d472:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d476:	2280      	movs	r2, #128	@ 0x80
 800d478:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d47a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d47e:	2b03      	cmp	r3, #3
 800d480:	d149      	bne.n	800d516 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d484:	3330      	adds	r3, #48	@ 0x30
 800d486:	3330      	adds	r3, #48	@ 0x30
 800d488:	4618      	mov	r0, r3
 800d48a:	f7fe fbfb 	bl	800bc84 <ld_word>
 800d48e:	4603      	mov	r3, r0
 800d490:	2b01      	cmp	r3, #1
 800d492:	d140      	bne.n	800d516 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d496:	3301      	adds	r3, #1
 800d498:	4619      	mov	r1, r3
 800d49a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d49c:	f7fe fea2 	bl	800c1e4 <move_window>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d137      	bne.n	800d516 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ae:	3330      	adds	r3, #48	@ 0x30
 800d4b0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7fe fbe5 	bl	800bc84 <ld_word>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	461a      	mov	r2, r3
 800d4be:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d127      	bne.n	800d516 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c8:	3330      	adds	r3, #48	@ 0x30
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7fe fbf2 	bl	800bcb4 <ld_dword>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	4a1c      	ldr	r2, [pc, #112]	@ (800d544 <find_volume+0x48c>)
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d11e      	bne.n	800d516 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4da:	3330      	adds	r3, #48	@ 0x30
 800d4dc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7fe fbe7 	bl	800bcb4 <ld_dword>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	4a17      	ldr	r2, [pc, #92]	@ (800d548 <find_volume+0x490>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d113      	bne.n	800d516 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f0:	3330      	adds	r3, #48	@ 0x30
 800d4f2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fe fbdc 	bl	800bcb4 <ld_dword>
 800d4fc:	4602      	mov	r2, r0
 800d4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d500:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d504:	3330      	adds	r3, #48	@ 0x30
 800d506:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7fe fbd2 	bl	800bcb4 <ld_dword>
 800d510:	4602      	mov	r2, r0
 800d512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d514:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d518:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d51c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d51e:	4b0b      	ldr	r3, [pc, #44]	@ (800d54c <find_volume+0x494>)
 800d520:	881b      	ldrh	r3, [r3, #0]
 800d522:	3301      	adds	r3, #1
 800d524:	b29a      	uxth	r2, r3
 800d526:	4b09      	ldr	r3, [pc, #36]	@ (800d54c <find_volume+0x494>)
 800d528:	801a      	strh	r2, [r3, #0]
 800d52a:	4b08      	ldr	r3, [pc, #32]	@ (800d54c <find_volume+0x494>)
 800d52c:	881a      	ldrh	r2, [r3, #0]
 800d52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d530:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d532:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d534:	f7fe fdee 	bl	800c114 <clear_lock>
#endif
	return FR_OK;
 800d538:	2300      	movs	r3, #0
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3758      	adds	r7, #88	@ 0x58
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	41615252 	.word	0x41615252
 800d548:	61417272 	.word	0x61417272
 800d54c:	2408a034 	.word	0x2408a034

0800d550 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d55a:	2309      	movs	r3, #9
 800d55c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d01c      	beq.n	800d59e <validate+0x4e>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d018      	beq.n	800d59e <validate+0x4e>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d013      	beq.n	800d59e <validate+0x4e>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	889a      	ldrh	r2, [r3, #4]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	88db      	ldrh	r3, [r3, #6]
 800d580:	429a      	cmp	r2, r3
 800d582:	d10c      	bne.n	800d59e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	785b      	ldrb	r3, [r3, #1]
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7fe fada 	bl	800bb44 <disk_status>
 800d590:	4603      	mov	r3, r0
 800d592:	f003 0301 	and.w	r3, r3, #1
 800d596:	2b00      	cmp	r3, #0
 800d598:	d101      	bne.n	800d59e <validate+0x4e>
			res = FR_OK;
 800d59a:	2300      	movs	r3, #0
 800d59c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d59e:	7bfb      	ldrb	r3, [r7, #15]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d102      	bne.n	800d5aa <validate+0x5a>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	e000      	b.n	800d5ac <validate+0x5c>
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	683a      	ldr	r2, [r7, #0]
 800d5ae:	6013      	str	r3, [r2, #0]
	return res;
 800d5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3710      	adds	r7, #16
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
	...

0800d5bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b088      	sub	sp, #32
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	4613      	mov	r3, r2
 800d5c8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d5ce:	f107 0310 	add.w	r3, r7, #16
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7ff fcd5 	bl	800cf82 <get_ldnumber>
 800d5d8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d5da:	69fb      	ldr	r3, [r7, #28]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	da01      	bge.n	800d5e4 <f_mount+0x28>
 800d5e0:	230b      	movs	r3, #11
 800d5e2:	e02b      	b.n	800d63c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d5e4:	4a17      	ldr	r2, [pc, #92]	@ (800d644 <f_mount+0x88>)
 800d5e6:	69fb      	ldr	r3, [r7, #28]
 800d5e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5ec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d5ee:	69bb      	ldr	r3, [r7, #24]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d005      	beq.n	800d600 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d5f4:	69b8      	ldr	r0, [r7, #24]
 800d5f6:	f7fe fd8d 	bl	800c114 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d002      	beq.n	800d60c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2200      	movs	r2, #0
 800d60a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d60c:	68fa      	ldr	r2, [r7, #12]
 800d60e:	490d      	ldr	r1, [pc, #52]	@ (800d644 <f_mount+0x88>)
 800d610:	69fb      	ldr	r3, [r7, #28]
 800d612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d002      	beq.n	800d622 <f_mount+0x66>
 800d61c:	79fb      	ldrb	r3, [r7, #7]
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d001      	beq.n	800d626 <f_mount+0x6a>
 800d622:	2300      	movs	r3, #0
 800d624:	e00a      	b.n	800d63c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d626:	f107 010c 	add.w	r1, r7, #12
 800d62a:	f107 0308 	add.w	r3, r7, #8
 800d62e:	2200      	movs	r2, #0
 800d630:	4618      	mov	r0, r3
 800d632:	f7ff fd41 	bl	800d0b8 <find_volume>
 800d636:	4603      	mov	r3, r0
 800d638:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d63a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3720      	adds	r7, #32
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	2408a030 	.word	0x2408a030

0800d648 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b098      	sub	sp, #96	@ 0x60
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	4613      	mov	r3, r2
 800d654:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d101      	bne.n	800d660 <f_open+0x18>
 800d65c:	2309      	movs	r3, #9
 800d65e:	e1a9      	b.n	800d9b4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d660:	79fb      	ldrb	r3, [r7, #7]
 800d662:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d666:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d668:	79fa      	ldrb	r2, [r7, #7]
 800d66a:	f107 0110 	add.w	r1, r7, #16
 800d66e:	f107 0308 	add.w	r3, r7, #8
 800d672:	4618      	mov	r0, r3
 800d674:	f7ff fd20 	bl	800d0b8 <find_volume>
 800d678:	4603      	mov	r3, r0
 800d67a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d67e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d682:	2b00      	cmp	r3, #0
 800d684:	f040 818d 	bne.w	800d9a2 <f_open+0x35a>
		dj.obj.fs = fs;
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d68c:	68ba      	ldr	r2, [r7, #8]
 800d68e:	f107 0314 	add.w	r3, r7, #20
 800d692:	4611      	mov	r1, r2
 800d694:	4618      	mov	r0, r3
 800d696:	f7ff fc03 	bl	800cea0 <follow_path>
 800d69a:	4603      	mov	r3, r0
 800d69c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d6a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d118      	bne.n	800d6da <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d6a8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d6ac:	b25b      	sxtb	r3, r3
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	da03      	bge.n	800d6ba <f_open+0x72>
				res = FR_INVALID_NAME;
 800d6b2:	2306      	movs	r3, #6
 800d6b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d6b8:	e00f      	b.n	800d6da <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d6ba:	79fb      	ldrb	r3, [r7, #7]
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	bf8c      	ite	hi
 800d6c0:	2301      	movhi	r3, #1
 800d6c2:	2300      	movls	r3, #0
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	f107 0314 	add.w	r3, r7, #20
 800d6cc:	4611      	mov	r1, r2
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7fe fbd8 	bl	800be84 <chk_lock>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d6da:	79fb      	ldrb	r3, [r7, #7]
 800d6dc:	f003 031c 	and.w	r3, r3, #28
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d07f      	beq.n	800d7e4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d6e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d017      	beq.n	800d71c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d6ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d6f0:	2b04      	cmp	r3, #4
 800d6f2:	d10e      	bne.n	800d712 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d6f4:	f7fe fc22 	bl	800bf3c <enq_lock>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d006      	beq.n	800d70c <f_open+0xc4>
 800d6fe:	f107 0314 	add.w	r3, r7, #20
 800d702:	4618      	mov	r0, r3
 800d704:	f7ff fb06 	bl	800cd14 <dir_register>
 800d708:	4603      	mov	r3, r0
 800d70a:	e000      	b.n	800d70e <f_open+0xc6>
 800d70c:	2312      	movs	r3, #18
 800d70e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d712:	79fb      	ldrb	r3, [r7, #7]
 800d714:	f043 0308 	orr.w	r3, r3, #8
 800d718:	71fb      	strb	r3, [r7, #7]
 800d71a:	e010      	b.n	800d73e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d71c:	7ebb      	ldrb	r3, [r7, #26]
 800d71e:	f003 0311 	and.w	r3, r3, #17
 800d722:	2b00      	cmp	r3, #0
 800d724:	d003      	beq.n	800d72e <f_open+0xe6>
					res = FR_DENIED;
 800d726:	2307      	movs	r3, #7
 800d728:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d72c:	e007      	b.n	800d73e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d72e:	79fb      	ldrb	r3, [r7, #7]
 800d730:	f003 0304 	and.w	r3, r3, #4
 800d734:	2b00      	cmp	r3, #0
 800d736:	d002      	beq.n	800d73e <f_open+0xf6>
 800d738:	2308      	movs	r3, #8
 800d73a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d73e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d742:	2b00      	cmp	r3, #0
 800d744:	d168      	bne.n	800d818 <f_open+0x1d0>
 800d746:	79fb      	ldrb	r3, [r7, #7]
 800d748:	f003 0308 	and.w	r3, r3, #8
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d063      	beq.n	800d818 <f_open+0x1d0>
				dw = GET_FATTIME();
 800d750:	f7fe f864 	bl	800b81c <get_fattime>
 800d754:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d758:	330e      	adds	r3, #14
 800d75a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7fe fae7 	bl	800bd30 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d764:	3316      	adds	r3, #22
 800d766:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d768:	4618      	mov	r0, r3
 800d76a:	f7fe fae1 	bl	800bd30 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d76e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d770:	330b      	adds	r3, #11
 800d772:	2220      	movs	r2, #32
 800d774:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d77a:	4611      	mov	r1, r2
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7ff fa35 	bl	800cbec <ld_clust>
 800d782:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d788:	2200      	movs	r2, #0
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7ff fa4d 	bl	800cc2a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d792:	331c      	adds	r3, #28
 800d794:	2100      	movs	r1, #0
 800d796:	4618      	mov	r0, r3
 800d798:	f7fe faca 	bl	800bd30 <st_dword>
					fs->wflag = 1;
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d7a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d037      	beq.n	800d818 <f_open+0x1d0>
						dw = fs->winsect;
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ac:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d7ae:	f107 0314 	add.w	r3, r7, #20
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7fe ff60 	bl	800c67c <remove_chain>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d7c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d126      	bne.n	800d818 <f_open+0x1d0>
							res = move_window(fs, dw);
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7fe fd08 	bl	800c1e4 <move_window>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d7de:	3a01      	subs	r2, #1
 800d7e0:	60da      	str	r2, [r3, #12]
 800d7e2:	e019      	b.n	800d818 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d7e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d115      	bne.n	800d818 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d7ec:	7ebb      	ldrb	r3, [r7, #26]
 800d7ee:	f003 0310 	and.w	r3, r3, #16
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d003      	beq.n	800d7fe <f_open+0x1b6>
					res = FR_NO_FILE;
 800d7f6:	2304      	movs	r3, #4
 800d7f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d7fc:	e00c      	b.n	800d818 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d7fe:	79fb      	ldrb	r3, [r7, #7]
 800d800:	f003 0302 	and.w	r3, r3, #2
 800d804:	2b00      	cmp	r3, #0
 800d806:	d007      	beq.n	800d818 <f_open+0x1d0>
 800d808:	7ebb      	ldrb	r3, [r7, #26]
 800d80a:	f003 0301 	and.w	r3, r3, #1
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d002      	beq.n	800d818 <f_open+0x1d0>
						res = FR_DENIED;
 800d812:	2307      	movs	r3, #7
 800d814:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d818:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d126      	bne.n	800d86e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d820:	79fb      	ldrb	r3, [r7, #7]
 800d822:	f003 0308 	and.w	r3, r3, #8
 800d826:	2b00      	cmp	r3, #0
 800d828:	d003      	beq.n	800d832 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d82a:	79fb      	ldrb	r3, [r7, #7]
 800d82c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d830:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d83a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d840:	79fb      	ldrb	r3, [r7, #7]
 800d842:	2b01      	cmp	r3, #1
 800d844:	bf8c      	ite	hi
 800d846:	2301      	movhi	r3, #1
 800d848:	2300      	movls	r3, #0
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	461a      	mov	r2, r3
 800d84e:	f107 0314 	add.w	r3, r7, #20
 800d852:	4611      	mov	r1, r2
 800d854:	4618      	mov	r0, r3
 800d856:	f7fe fb93 	bl	800bf80 <inc_lock>
 800d85a:	4602      	mov	r2, r0
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	691b      	ldr	r3, [r3, #16]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d102      	bne.n	800d86e <f_open+0x226>
 800d868:	2302      	movs	r3, #2
 800d86a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d86e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d872:	2b00      	cmp	r3, #0
 800d874:	f040 8095 	bne.w	800d9a2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d87c:	4611      	mov	r1, r2
 800d87e:	4618      	mov	r0, r3
 800d880:	f7ff f9b4 	bl	800cbec <ld_clust>
 800d884:	4602      	mov	r2, r0
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d88a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d88c:	331c      	adds	r3, #28
 800d88e:	4618      	mov	r0, r3
 800d890:	f7fe fa10 	bl	800bcb4 <ld_dword>
 800d894:	4602      	mov	r2, r0
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2200      	movs	r2, #0
 800d89e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d8a0:	693a      	ldr	r2, [r7, #16]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	88da      	ldrh	r2, [r3, #6]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	79fa      	ldrb	r2, [r7, #7]
 800d8b2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	3330      	adds	r3, #48	@ 0x30
 800d8ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d8ce:	2100      	movs	r1, #0
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fe fa7a 	bl	800bdca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d8d6:	79fb      	ldrb	r3, [r7, #7]
 800d8d8:	f003 0320 	and.w	r3, r3, #32
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d060      	beq.n	800d9a2 <f_open+0x35a>
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	68db      	ldr	r3, [r3, #12]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d05c      	beq.n	800d9a2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	68da      	ldr	r2, [r3, #12]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	895b      	ldrh	r3, [r3, #10]
 800d8f4:	025b      	lsls	r3, r3, #9
 800d8f6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	689b      	ldr	r3, [r3, #8]
 800d8fc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	657b      	str	r3, [r7, #84]	@ 0x54
 800d904:	e016      	b.n	800d934 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7fe fd25 	bl	800c35a <get_fat>
 800d910:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d912:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d914:	2b01      	cmp	r3, #1
 800d916:	d802      	bhi.n	800d91e <f_open+0x2d6>
 800d918:	2302      	movs	r3, #2
 800d91a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d91e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d924:	d102      	bne.n	800d92c <f_open+0x2e4>
 800d926:	2301      	movs	r3, #1
 800d928:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d92c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d92e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d930:	1ad3      	subs	r3, r2, r3
 800d932:	657b      	str	r3, [r7, #84]	@ 0x54
 800d934:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d103      	bne.n	800d944 <f_open+0x2fc>
 800d93c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d93e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d940:	429a      	cmp	r2, r3
 800d942:	d8e0      	bhi.n	800d906 <f_open+0x2be>
				}
				fp->clust = clst;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d948:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d94a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d127      	bne.n	800d9a2 <f_open+0x35a>
 800d952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d022      	beq.n	800d9a2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d960:	4618      	mov	r0, r3
 800d962:	f7fe fcdb 	bl	800c31c <clust2sect>
 800d966:	6478      	str	r0, [r7, #68]	@ 0x44
 800d968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d103      	bne.n	800d976 <f_open+0x32e>
						res = FR_INT_ERR;
 800d96e:	2302      	movs	r3, #2
 800d970:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d974:	e015      	b.n	800d9a2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d978:	0a5a      	lsrs	r2, r3, #9
 800d97a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d97c:	441a      	add	r2, r3
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	7858      	ldrb	r0, [r3, #1]
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	6a1a      	ldr	r2, [r3, #32]
 800d990:	2301      	movs	r3, #1
 800d992:	f7fe f919 	bl	800bbc8 <disk_read>
 800d996:	4603      	mov	r3, r0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d002      	beq.n	800d9a2 <f_open+0x35a>
 800d99c:	2301      	movs	r3, #1
 800d99e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d9a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d002      	beq.n	800d9b0 <f_open+0x368>
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d9b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3760      	adds	r7, #96	@ 0x60
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b08e      	sub	sp, #56	@ 0x38
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	60f8      	str	r0, [r7, #12]
 800d9c4:	60b9      	str	r1, [r7, #8]
 800d9c6:	607a      	str	r2, [r7, #4]
 800d9c8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f107 0214 	add.w	r2, r7, #20
 800d9da:	4611      	mov	r1, r2
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7ff fdb7 	bl	800d550 <validate>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d9e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d107      	bne.n	800da00 <f_read+0x44>
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	7d5b      	ldrb	r3, [r3, #21]
 800d9f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d9f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d002      	beq.n	800da06 <f_read+0x4a>
 800da00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800da04:	e115      	b.n	800dc32 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	7d1b      	ldrb	r3, [r3, #20]
 800da0a:	f003 0301 	and.w	r3, r3, #1
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d101      	bne.n	800da16 <f_read+0x5a>
 800da12:	2307      	movs	r3, #7
 800da14:	e10d      	b.n	800dc32 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	68da      	ldr	r2, [r3, #12]
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	699b      	ldr	r3, [r3, #24]
 800da1e:	1ad3      	subs	r3, r2, r3
 800da20:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	6a3b      	ldr	r3, [r7, #32]
 800da26:	429a      	cmp	r2, r3
 800da28:	f240 80fe 	bls.w	800dc28 <f_read+0x26c>
 800da2c:	6a3b      	ldr	r3, [r7, #32]
 800da2e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800da30:	e0fa      	b.n	800dc28 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	699b      	ldr	r3, [r3, #24]
 800da36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f040 80c6 	bne.w	800dbcc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	699b      	ldr	r3, [r3, #24]
 800da44:	0a5b      	lsrs	r3, r3, #9
 800da46:	697a      	ldr	r2, [r7, #20]
 800da48:	8952      	ldrh	r2, [r2, #10]
 800da4a:	3a01      	subs	r2, #1
 800da4c:	4013      	ands	r3, r2
 800da4e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800da50:	69fb      	ldr	r3, [r7, #28]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d12f      	bne.n	800dab6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	699b      	ldr	r3, [r3, #24]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d103      	bne.n	800da66 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	633b      	str	r3, [r7, #48]	@ 0x30
 800da64:	e013      	b.n	800da8e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d007      	beq.n	800da7e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	699b      	ldr	r3, [r3, #24]
 800da72:	4619      	mov	r1, r3
 800da74:	68f8      	ldr	r0, [r7, #12]
 800da76:	f7fe fefe 	bl	800c876 <clmt_clust>
 800da7a:	6338      	str	r0, [r7, #48]	@ 0x30
 800da7c:	e007      	b.n	800da8e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800da7e:	68fa      	ldr	r2, [r7, #12]
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	69db      	ldr	r3, [r3, #28]
 800da84:	4619      	mov	r1, r3
 800da86:	4610      	mov	r0, r2
 800da88:	f7fe fc67 	bl	800c35a <get_fat>
 800da8c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800da8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da90:	2b01      	cmp	r3, #1
 800da92:	d804      	bhi.n	800da9e <f_read+0xe2>
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	2202      	movs	r2, #2
 800da98:	755a      	strb	r2, [r3, #21]
 800da9a:	2302      	movs	r3, #2
 800da9c:	e0c9      	b.n	800dc32 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa4:	d104      	bne.n	800dab0 <f_read+0xf4>
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2201      	movs	r2, #1
 800daaa:	755a      	strb	r2, [r3, #21]
 800daac:	2301      	movs	r3, #1
 800daae:	e0c0      	b.n	800dc32 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dab4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dab6:	697a      	ldr	r2, [r7, #20]
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	69db      	ldr	r3, [r3, #28]
 800dabc:	4619      	mov	r1, r3
 800dabe:	4610      	mov	r0, r2
 800dac0:	f7fe fc2c 	bl	800c31c <clust2sect>
 800dac4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dac6:	69bb      	ldr	r3, [r7, #24]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d104      	bne.n	800dad6 <f_read+0x11a>
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2202      	movs	r2, #2
 800dad0:	755a      	strb	r2, [r3, #21]
 800dad2:	2302      	movs	r3, #2
 800dad4:	e0ad      	b.n	800dc32 <f_read+0x276>
			sect += csect;
 800dad6:	69ba      	ldr	r2, [r7, #24]
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	4413      	add	r3, r2
 800dadc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	0a5b      	lsrs	r3, r3, #9
 800dae2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800dae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d039      	beq.n	800db5e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800daea:	69fa      	ldr	r2, [r7, #28]
 800daec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daee:	4413      	add	r3, r2
 800daf0:	697a      	ldr	r2, [r7, #20]
 800daf2:	8952      	ldrh	r2, [r2, #10]
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d905      	bls.n	800db04 <f_read+0x148>
					cc = fs->csize - csect;
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	895b      	ldrh	r3, [r3, #10]
 800dafc:	461a      	mov	r2, r3
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	1ad3      	subs	r3, r2, r3
 800db02:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	7858      	ldrb	r0, [r3, #1]
 800db08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db0a:	69ba      	ldr	r2, [r7, #24]
 800db0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800db0e:	f7fe f85b 	bl	800bbc8 <disk_read>
 800db12:	4603      	mov	r3, r0
 800db14:	2b00      	cmp	r3, #0
 800db16:	d004      	beq.n	800db22 <f_read+0x166>
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	2201      	movs	r2, #1
 800db1c:	755a      	strb	r2, [r3, #21]
 800db1e:	2301      	movs	r3, #1
 800db20:	e087      	b.n	800dc32 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	7d1b      	ldrb	r3, [r3, #20]
 800db26:	b25b      	sxtb	r3, r3
 800db28:	2b00      	cmp	r3, #0
 800db2a:	da14      	bge.n	800db56 <f_read+0x19a>
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	6a1a      	ldr	r2, [r3, #32]
 800db30:	69bb      	ldr	r3, [r7, #24]
 800db32:	1ad3      	subs	r3, r2, r3
 800db34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db36:	429a      	cmp	r2, r3
 800db38:	d90d      	bls.n	800db56 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	6a1a      	ldr	r2, [r3, #32]
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	1ad3      	subs	r3, r2, r3
 800db42:	025b      	lsls	r3, r3, #9
 800db44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db46:	18d0      	adds	r0, r2, r3
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	3330      	adds	r3, #48	@ 0x30
 800db4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db50:	4619      	mov	r1, r3
 800db52:	f7fe f919 	bl	800bd88 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800db56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db58:	025b      	lsls	r3, r3, #9
 800db5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800db5c:	e050      	b.n	800dc00 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6a1b      	ldr	r3, [r3, #32]
 800db62:	69ba      	ldr	r2, [r7, #24]
 800db64:	429a      	cmp	r2, r3
 800db66:	d02e      	beq.n	800dbc6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	7d1b      	ldrb	r3, [r3, #20]
 800db6c:	b25b      	sxtb	r3, r3
 800db6e:	2b00      	cmp	r3, #0
 800db70:	da18      	bge.n	800dba4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	7858      	ldrb	r0, [r3, #1]
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	6a1a      	ldr	r2, [r3, #32]
 800db80:	2301      	movs	r3, #1
 800db82:	f7fe f841 	bl	800bc08 <disk_write>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d004      	beq.n	800db96 <f_read+0x1da>
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2201      	movs	r2, #1
 800db90:	755a      	strb	r2, [r3, #21]
 800db92:	2301      	movs	r3, #1
 800db94:	e04d      	b.n	800dc32 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	7d1b      	ldrb	r3, [r3, #20]
 800db9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db9e:	b2da      	uxtb	r2, r3
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	7858      	ldrb	r0, [r3, #1]
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dbae:	2301      	movs	r3, #1
 800dbb0:	69ba      	ldr	r2, [r7, #24]
 800dbb2:	f7fe f809 	bl	800bbc8 <disk_read>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d004      	beq.n	800dbc6 <f_read+0x20a>
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	755a      	strb	r2, [r3, #21]
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	e035      	b.n	800dc32 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	69ba      	ldr	r2, [r7, #24]
 800dbca:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	699b      	ldr	r3, [r3, #24]
 800dbd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbd4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800dbd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800dbda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d901      	bls.n	800dbe6 <f_read+0x22a>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	699b      	ldr	r3, [r3, #24]
 800dbf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbf4:	4413      	add	r3, r2
 800dbf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dbfc:	f7fe f8c4 	bl	800bd88 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800dc00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc04:	4413      	add	r3, r2
 800dc06:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	699a      	ldr	r2, [r3, #24]
 800dc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc0e:	441a      	add	r2, r3
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	619a      	str	r2, [r3, #24]
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc1a:	441a      	add	r2, r3
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	601a      	str	r2, [r3, #0]
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc24:	1ad3      	subs	r3, r2, r3
 800dc26:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	f47f af01 	bne.w	800da32 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800dc30:	2300      	movs	r3, #0
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3738      	adds	r7, #56	@ 0x38
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dc3a:	b580      	push	{r7, lr}
 800dc3c:	b08c      	sub	sp, #48	@ 0x30
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	60f8      	str	r0, [r7, #12]
 800dc42:	60b9      	str	r1, [r7, #8]
 800dc44:	607a      	str	r2, [r7, #4]
 800dc46:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f107 0210 	add.w	r2, r7, #16
 800dc58:	4611      	mov	r1, r2
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7ff fc78 	bl	800d550 <validate>
 800dc60:	4603      	mov	r3, r0
 800dc62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dc66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d107      	bne.n	800dc7e <f_write+0x44>
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	7d5b      	ldrb	r3, [r3, #21]
 800dc72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800dc76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d002      	beq.n	800dc84 <f_write+0x4a>
 800dc7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dc82:	e14b      	b.n	800df1c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	7d1b      	ldrb	r3, [r3, #20]
 800dc88:	f003 0302 	and.w	r3, r3, #2
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d101      	bne.n	800dc94 <f_write+0x5a>
 800dc90:	2307      	movs	r3, #7
 800dc92:	e143      	b.n	800df1c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	699a      	ldr	r2, [r3, #24]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	441a      	add	r2, r3
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	699b      	ldr	r3, [r3, #24]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	f080 812d 	bcs.w	800df00 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	699b      	ldr	r3, [r3, #24]
 800dcaa:	43db      	mvns	r3, r3
 800dcac:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800dcae:	e127      	b.n	800df00 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	699b      	ldr	r3, [r3, #24]
 800dcb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	f040 80e3 	bne.w	800de84 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	699b      	ldr	r3, [r3, #24]
 800dcc2:	0a5b      	lsrs	r3, r3, #9
 800dcc4:	693a      	ldr	r2, [r7, #16]
 800dcc6:	8952      	ldrh	r2, [r2, #10]
 800dcc8:	3a01      	subs	r2, #1
 800dcca:	4013      	ands	r3, r2
 800dccc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800dcce:	69bb      	ldr	r3, [r7, #24]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d143      	bne.n	800dd5c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	699b      	ldr	r3, [r3, #24]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d10c      	bne.n	800dcf6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800dce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d11a      	bne.n	800dd1e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2100      	movs	r1, #0
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7fe fd2a 	bl	800c746 <create_chain>
 800dcf2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800dcf4:	e013      	b.n	800dd1e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d007      	beq.n	800dd0e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	699b      	ldr	r3, [r3, #24]
 800dd02:	4619      	mov	r1, r3
 800dd04:	68f8      	ldr	r0, [r7, #12]
 800dd06:	f7fe fdb6 	bl	800c876 <clmt_clust>
 800dd0a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800dd0c:	e007      	b.n	800dd1e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800dd0e:	68fa      	ldr	r2, [r7, #12]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	69db      	ldr	r3, [r3, #28]
 800dd14:	4619      	mov	r1, r3
 800dd16:	4610      	mov	r0, r2
 800dd18:	f7fe fd15 	bl	800c746 <create_chain>
 800dd1c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	f000 80f2 	beq.w	800df0a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dd26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d104      	bne.n	800dd36 <f_write+0xfc>
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2202      	movs	r2, #2
 800dd30:	755a      	strb	r2, [r3, #21]
 800dd32:	2302      	movs	r3, #2
 800dd34:	e0f2      	b.n	800df1c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dd36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd3c:	d104      	bne.n	800dd48 <f_write+0x10e>
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	2201      	movs	r2, #1
 800dd42:	755a      	strb	r2, [r3, #21]
 800dd44:	2301      	movs	r3, #1
 800dd46:	e0e9      	b.n	800df1c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd4c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d102      	bne.n	800dd5c <f_write+0x122>
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd5a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	7d1b      	ldrb	r3, [r3, #20]
 800dd60:	b25b      	sxtb	r3, r3
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	da18      	bge.n	800dd98 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	7858      	ldrb	r0, [r3, #1]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	6a1a      	ldr	r2, [r3, #32]
 800dd74:	2301      	movs	r3, #1
 800dd76:	f7fd ff47 	bl	800bc08 <disk_write>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d004      	beq.n	800dd8a <f_write+0x150>
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2201      	movs	r2, #1
 800dd84:	755a      	strb	r2, [r3, #21]
 800dd86:	2301      	movs	r3, #1
 800dd88:	e0c8      	b.n	800df1c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	7d1b      	ldrb	r3, [r3, #20]
 800dd8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd92:	b2da      	uxtb	r2, r3
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dd98:	693a      	ldr	r2, [r7, #16]
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	69db      	ldr	r3, [r3, #28]
 800dd9e:	4619      	mov	r1, r3
 800dda0:	4610      	mov	r0, r2
 800dda2:	f7fe fabb 	bl	800c31c <clust2sect>
 800dda6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d104      	bne.n	800ddb8 <f_write+0x17e>
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2202      	movs	r2, #2
 800ddb2:	755a      	strb	r2, [r3, #21]
 800ddb4:	2302      	movs	r3, #2
 800ddb6:	e0b1      	b.n	800df1c <f_write+0x2e2>
			sect += csect;
 800ddb8:	697a      	ldr	r2, [r7, #20]
 800ddba:	69bb      	ldr	r3, [r7, #24]
 800ddbc:	4413      	add	r3, r2
 800ddbe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	0a5b      	lsrs	r3, r3, #9
 800ddc4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ddc6:	6a3b      	ldr	r3, [r7, #32]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d03c      	beq.n	800de46 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ddcc:	69ba      	ldr	r2, [r7, #24]
 800ddce:	6a3b      	ldr	r3, [r7, #32]
 800ddd0:	4413      	add	r3, r2
 800ddd2:	693a      	ldr	r2, [r7, #16]
 800ddd4:	8952      	ldrh	r2, [r2, #10]
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d905      	bls.n	800dde6 <f_write+0x1ac>
					cc = fs->csize - csect;
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	895b      	ldrh	r3, [r3, #10]
 800ddde:	461a      	mov	r2, r3
 800dde0:	69bb      	ldr	r3, [r7, #24]
 800dde2:	1ad3      	subs	r3, r2, r3
 800dde4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	7858      	ldrb	r0, [r3, #1]
 800ddea:	6a3b      	ldr	r3, [r7, #32]
 800ddec:	697a      	ldr	r2, [r7, #20]
 800ddee:	69f9      	ldr	r1, [r7, #28]
 800ddf0:	f7fd ff0a 	bl	800bc08 <disk_write>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d004      	beq.n	800de04 <f_write+0x1ca>
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	755a      	strb	r2, [r3, #21]
 800de00:	2301      	movs	r3, #1
 800de02:	e08b      	b.n	800df1c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	6a1a      	ldr	r2, [r3, #32]
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	1ad3      	subs	r3, r2, r3
 800de0c:	6a3a      	ldr	r2, [r7, #32]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d915      	bls.n	800de3e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	6a1a      	ldr	r2, [r3, #32]
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	1ad3      	subs	r3, r2, r3
 800de20:	025b      	lsls	r3, r3, #9
 800de22:	69fa      	ldr	r2, [r7, #28]
 800de24:	4413      	add	r3, r2
 800de26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800de2a:	4619      	mov	r1, r3
 800de2c:	f7fd ffac 	bl	800bd88 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	7d1b      	ldrb	r3, [r3, #20]
 800de34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de38:	b2da      	uxtb	r2, r3
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800de3e:	6a3b      	ldr	r3, [r7, #32]
 800de40:	025b      	lsls	r3, r3, #9
 800de42:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800de44:	e03f      	b.n	800dec6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	6a1b      	ldr	r3, [r3, #32]
 800de4a:	697a      	ldr	r2, [r7, #20]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d016      	beq.n	800de7e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	699a      	ldr	r2, [r3, #24]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800de58:	429a      	cmp	r2, r3
 800de5a:	d210      	bcs.n	800de7e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	7858      	ldrb	r0, [r3, #1]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800de66:	2301      	movs	r3, #1
 800de68:	697a      	ldr	r2, [r7, #20]
 800de6a:	f7fd fead 	bl	800bbc8 <disk_read>
 800de6e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800de70:	2b00      	cmp	r3, #0
 800de72:	d004      	beq.n	800de7e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2201      	movs	r2, #1
 800de78:	755a      	strb	r2, [r3, #21]
 800de7a:	2301      	movs	r3, #1
 800de7c:	e04e      	b.n	800df1c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	697a      	ldr	r2, [r7, #20]
 800de82:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	699b      	ldr	r3, [r3, #24]
 800de88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de8c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800de90:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800de92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	429a      	cmp	r2, r3
 800de98:	d901      	bls.n	800de9e <f_write+0x264>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	699b      	ldr	r3, [r3, #24]
 800dea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800deac:	4413      	add	r3, r2
 800deae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800deb0:	69f9      	ldr	r1, [r7, #28]
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7fd ff68 	bl	800bd88 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	7d1b      	ldrb	r3, [r3, #20]
 800debc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dec0:	b2da      	uxtb	r2, r3
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800dec6:	69fa      	ldr	r2, [r7, #28]
 800dec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deca:	4413      	add	r3, r2
 800decc:	61fb      	str	r3, [r7, #28]
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	699a      	ldr	r2, [r3, #24]
 800ded2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ded4:	441a      	add	r2, r3
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	619a      	str	r2, [r3, #24]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	68da      	ldr	r2, [r3, #12]
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	699b      	ldr	r3, [r3, #24]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	bf38      	it	cc
 800dee6:	461a      	movcc	r2, r3
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	60da      	str	r2, [r3, #12]
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800def2:	441a      	add	r2, r3
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	601a      	str	r2, [r3, #0]
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800defc:	1ad3      	subs	r3, r2, r3
 800defe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	f47f aed4 	bne.w	800dcb0 <f_write+0x76>
 800df08:	e000      	b.n	800df0c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800df0a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	7d1b      	ldrb	r3, [r3, #20]
 800df10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df14:	b2da      	uxtb	r2, r3
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800df1a:	2300      	movs	r3, #0
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3730      	adds	r7, #48	@ 0x30
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b086      	sub	sp, #24
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f107 0208 	add.w	r2, r7, #8
 800df32:	4611      	mov	r1, r2
 800df34:	4618      	mov	r0, r3
 800df36:	f7ff fb0b 	bl	800d550 <validate>
 800df3a:	4603      	mov	r3, r0
 800df3c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800df3e:	7dfb      	ldrb	r3, [r7, #23]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d168      	bne.n	800e016 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	7d1b      	ldrb	r3, [r3, #20]
 800df48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d062      	beq.n	800e016 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	7d1b      	ldrb	r3, [r3, #20]
 800df54:	b25b      	sxtb	r3, r3
 800df56:	2b00      	cmp	r3, #0
 800df58:	da15      	bge.n	800df86 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	7858      	ldrb	r0, [r3, #1]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6a1a      	ldr	r2, [r3, #32]
 800df68:	2301      	movs	r3, #1
 800df6a:	f7fd fe4d 	bl	800bc08 <disk_write>
 800df6e:	4603      	mov	r3, r0
 800df70:	2b00      	cmp	r3, #0
 800df72:	d001      	beq.n	800df78 <f_sync+0x54>
 800df74:	2301      	movs	r3, #1
 800df76:	e04f      	b.n	800e018 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	7d1b      	ldrb	r3, [r3, #20]
 800df7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df80:	b2da      	uxtb	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800df86:	f7fd fc49 	bl	800b81c <get_fattime>
 800df8a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800df8c:	68ba      	ldr	r2, [r7, #8]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df92:	4619      	mov	r1, r3
 800df94:	4610      	mov	r0, r2
 800df96:	f7fe f925 	bl	800c1e4 <move_window>
 800df9a:	4603      	mov	r3, r0
 800df9c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800df9e:	7dfb      	ldrb	r3, [r7, #23]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d138      	bne.n	800e016 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfa8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	330b      	adds	r3, #11
 800dfae:	781a      	ldrb	r2, [r3, #0]
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	330b      	adds	r3, #11
 800dfb4:	f042 0220 	orr.w	r2, r2, #32
 800dfb8:	b2d2      	uxtb	r2, r2
 800dfba:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6818      	ldr	r0, [r3, #0]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	689b      	ldr	r3, [r3, #8]
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	68f9      	ldr	r1, [r7, #12]
 800dfc8:	f7fe fe2f 	bl	800cc2a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f103 021c 	add.w	r2, r3, #28
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	68db      	ldr	r3, [r3, #12]
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	4610      	mov	r0, r2
 800dfda:	f7fd fea9 	bl	800bd30 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	3316      	adds	r3, #22
 800dfe2:	6939      	ldr	r1, [r7, #16]
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fd fea3 	bl	800bd30 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	3312      	adds	r3, #18
 800dfee:	2100      	movs	r1, #0
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7fd fe82 	bl	800bcfa <st_word>
					fs->wflag = 1;
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	2201      	movs	r2, #1
 800dffa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	4618      	mov	r0, r3
 800e000:	f7fe f91e 	bl	800c240 <sync_fs>
 800e004:	4603      	mov	r3, r0
 800e006:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	7d1b      	ldrb	r3, [r3, #20]
 800e00c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e010:	b2da      	uxtb	r2, r3
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e016:	7dfb      	ldrb	r3, [r7, #23]
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3718      	adds	r7, #24
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f7ff ff7b 	bl	800df24 <f_sync>
 800e02e:	4603      	mov	r3, r0
 800e030:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e032:	7bfb      	ldrb	r3, [r7, #15]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d118      	bne.n	800e06a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f107 0208 	add.w	r2, r7, #8
 800e03e:	4611      	mov	r1, r2
 800e040:	4618      	mov	r0, r3
 800e042:	f7ff fa85 	bl	800d550 <validate>
 800e046:	4603      	mov	r3, r0
 800e048:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e04a:	7bfb      	ldrb	r3, [r7, #15]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d10c      	bne.n	800e06a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	691b      	ldr	r3, [r3, #16]
 800e054:	4618      	mov	r0, r3
 800e056:	f7fe f821 	bl	800c09c <dec_lock>
 800e05a:	4603      	mov	r3, r0
 800e05c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e05e:	7bfb      	ldrb	r3, [r7, #15]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d102      	bne.n	800e06a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2200      	movs	r2, #0
 800e068:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3710      	adds	r7, #16
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b090      	sub	sp, #64	@ 0x40
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f107 0208 	add.w	r2, r7, #8
 800e084:	4611      	mov	r1, r2
 800e086:	4618      	mov	r0, r3
 800e088:	f7ff fa62 	bl	800d550 <validate>
 800e08c:	4603      	mov	r3, r0
 800e08e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e092:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e096:	2b00      	cmp	r3, #0
 800e098:	d103      	bne.n	800e0a2 <f_lseek+0x2e>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	7d5b      	ldrb	r3, [r3, #21]
 800e09e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e0a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d002      	beq.n	800e0b0 <f_lseek+0x3c>
 800e0aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e0ae:	e1e6      	b.n	800e47e <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	f000 80d1 	beq.w	800e25c <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0c0:	d15a      	bne.n	800e178 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0c6:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ca:	1d1a      	adds	r2, r3, #4
 800e0cc:	627a      	str	r2, [r7, #36]	@ 0x24
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	617b      	str	r3, [r7, #20]
 800e0d2:	2302      	movs	r3, #2
 800e0d4:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	689b      	ldr	r3, [r3, #8]
 800e0da:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800e0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d03a      	beq.n	800e158 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e4:	613b      	str	r3, [r7, #16]
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ec:	3302      	adds	r3, #2
 800e0ee:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800e0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f2:	60fb      	str	r3, [r7, #12]
 800e0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7fe f92b 	bl	800c35a <get_fat>
 800e104:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e108:	2b01      	cmp	r3, #1
 800e10a:	d804      	bhi.n	800e116 <f_lseek+0xa2>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2202      	movs	r2, #2
 800e110:	755a      	strb	r2, [r3, #21]
 800e112:	2302      	movs	r3, #2
 800e114:	e1b3      	b.n	800e47e <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e11c:	d104      	bne.n	800e128 <f_lseek+0xb4>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2201      	movs	r2, #1
 800e122:	755a      	strb	r2, [r3, #21]
 800e124:	2301      	movs	r3, #1
 800e126:	e1aa      	b.n	800e47e <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	3301      	adds	r3, #1
 800e12c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e12e:	429a      	cmp	r2, r3
 800e130:	d0de      	beq.n	800e0f0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	429a      	cmp	r2, r3
 800e138:	d809      	bhi.n	800e14e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13c:	1d1a      	adds	r2, r3, #4
 800e13e:	627a      	str	r2, [r7, #36]	@ 0x24
 800e140:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e142:	601a      	str	r2, [r3, #0]
 800e144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e146:	1d1a      	adds	r2, r3, #4
 800e148:	627a      	str	r2, [r7, #36]	@ 0x24
 800e14a:	693a      	ldr	r2, [r7, #16]
 800e14c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	695b      	ldr	r3, [r3, #20]
 800e152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e154:	429a      	cmp	r2, r3
 800e156:	d3c4      	bcc.n	800e0e2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e15c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e15e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e160:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	429a      	cmp	r2, r3
 800e166:	d803      	bhi.n	800e170 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e16a:	2200      	movs	r2, #0
 800e16c:	601a      	str	r2, [r3, #0]
 800e16e:	e184      	b.n	800e47a <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e170:	2311      	movs	r3, #17
 800e172:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e176:	e180      	b.n	800e47a <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	68db      	ldr	r3, [r3, #12]
 800e17c:	683a      	ldr	r2, [r7, #0]
 800e17e:	429a      	cmp	r2, r3
 800e180:	d902      	bls.n	800e188 <f_lseek+0x114>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	68db      	ldr	r3, [r3, #12]
 800e186:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	683a      	ldr	r2, [r7, #0]
 800e18c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	2b00      	cmp	r3, #0
 800e192:	f000 8172 	beq.w	800e47a <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	3b01      	subs	r3, #1
 800e19a:	4619      	mov	r1, r3
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f7fe fb6a 	bl	800c876 <clmt_clust>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e1a8:	68ba      	ldr	r2, [r7, #8]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	69db      	ldr	r3, [r3, #28]
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	4610      	mov	r0, r2
 800e1b2:	f7fe f8b3 	bl	800c31c <clust2sect>
 800e1b6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e1b8:	69bb      	ldr	r3, [r7, #24]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d104      	bne.n	800e1c8 <f_lseek+0x154>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2202      	movs	r2, #2
 800e1c2:	755a      	strb	r2, [r3, #21]
 800e1c4:	2302      	movs	r3, #2
 800e1c6:	e15a      	b.n	800e47e <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	3b01      	subs	r3, #1
 800e1cc:	0a5b      	lsrs	r3, r3, #9
 800e1ce:	68ba      	ldr	r2, [r7, #8]
 800e1d0:	8952      	ldrh	r2, [r2, #10]
 800e1d2:	3a01      	subs	r2, #1
 800e1d4:	4013      	ands	r3, r2
 800e1d6:	69ba      	ldr	r2, [r7, #24]
 800e1d8:	4413      	add	r3, r2
 800e1da:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	699b      	ldr	r3, [r3, #24]
 800e1e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	f000 8148 	beq.w	800e47a <f_lseek+0x406>
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6a1b      	ldr	r3, [r3, #32]
 800e1ee:	69ba      	ldr	r2, [r7, #24]
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	f000 8142 	beq.w	800e47a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	7d1b      	ldrb	r3, [r3, #20]
 800e1fa:	b25b      	sxtb	r3, r3
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	da18      	bge.n	800e232 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	7858      	ldrb	r0, [r3, #1]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6a1a      	ldr	r2, [r3, #32]
 800e20e:	2301      	movs	r3, #1
 800e210:	f7fd fcfa 	bl	800bc08 <disk_write>
 800e214:	4603      	mov	r3, r0
 800e216:	2b00      	cmp	r3, #0
 800e218:	d004      	beq.n	800e224 <f_lseek+0x1b0>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2201      	movs	r2, #1
 800e21e:	755a      	strb	r2, [r3, #21]
 800e220:	2301      	movs	r3, #1
 800e222:	e12c      	b.n	800e47e <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	7d1b      	ldrb	r3, [r3, #20]
 800e228:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e22c:	b2da      	uxtb	r2, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	7858      	ldrb	r0, [r3, #1]
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e23c:	2301      	movs	r3, #1
 800e23e:	69ba      	ldr	r2, [r7, #24]
 800e240:	f7fd fcc2 	bl	800bbc8 <disk_read>
 800e244:	4603      	mov	r3, r0
 800e246:	2b00      	cmp	r3, #0
 800e248:	d004      	beq.n	800e254 <f_lseek+0x1e0>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2201      	movs	r2, #1
 800e24e:	755a      	strb	r2, [r3, #21]
 800e250:	2301      	movs	r3, #1
 800e252:	e114      	b.n	800e47e <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	69ba      	ldr	r2, [r7, #24]
 800e258:	621a      	str	r2, [r3, #32]
 800e25a:	e10e      	b.n	800e47a <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	683a      	ldr	r2, [r7, #0]
 800e262:	429a      	cmp	r2, r3
 800e264:	d908      	bls.n	800e278 <f_lseek+0x204>
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	7d1b      	ldrb	r3, [r3, #20]
 800e26a:	f003 0302 	and.w	r3, r3, #2
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d102      	bne.n	800e278 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	68db      	ldr	r3, [r3, #12]
 800e276:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	699b      	ldr	r3, [r3, #24]
 800e27c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e27e:	2300      	movs	r3, #0
 800e280:	637b      	str	r3, [r7, #52]	@ 0x34
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e286:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	f000 80a7 	beq.w	800e3de <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	895b      	ldrh	r3, [r3, #10]
 800e294:	025b      	lsls	r3, r3, #9
 800e296:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e298:	6a3b      	ldr	r3, [r7, #32]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d01b      	beq.n	800e2d6 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	1e5a      	subs	r2, r3, #1
 800e2a2:	69fb      	ldr	r3, [r7, #28]
 800e2a4:	fbb2 f2f3 	udiv	r2, r2, r3
 800e2a8:	6a3b      	ldr	r3, [r7, #32]
 800e2aa:	1e59      	subs	r1, r3, #1
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d30f      	bcc.n	800e2d6 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e2b6:	6a3b      	ldr	r3, [r7, #32]
 800e2b8:	1e5a      	subs	r2, r3, #1
 800e2ba:	69fb      	ldr	r3, [r7, #28]
 800e2bc:	425b      	negs	r3, r3
 800e2be:	401a      	ands	r2, r3
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	699b      	ldr	r3, [r3, #24]
 800e2c8:	683a      	ldr	r2, [r7, #0]
 800e2ca:	1ad3      	subs	r3, r2, r3
 800e2cc:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	69db      	ldr	r3, [r3, #28]
 800e2d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e2d4:	e022      	b.n	800e31c <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	689b      	ldr	r3, [r3, #8]
 800e2da:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d119      	bne.n	800e316 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2100      	movs	r1, #0
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7fe fa2d 	bl	800c746 <create_chain>
 800e2ec:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d104      	bne.n	800e2fe <f_lseek+0x28a>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2202      	movs	r2, #2
 800e2f8:	755a      	strb	r2, [r3, #21]
 800e2fa:	2302      	movs	r3, #2
 800e2fc:	e0bf      	b.n	800e47e <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e304:	d104      	bne.n	800e310 <f_lseek+0x29c>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2201      	movs	r2, #1
 800e30a:	755a      	strb	r2, [r3, #21]
 800e30c:	2301      	movs	r3, #1
 800e30e:	e0b6      	b.n	800e47e <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e314:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e31a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d05d      	beq.n	800e3de <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e322:	e03a      	b.n	800e39a <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800e324:	683a      	ldr	r2, [r7, #0]
 800e326:	69fb      	ldr	r3, [r7, #28]
 800e328:	1ad3      	subs	r3, r2, r3
 800e32a:	603b      	str	r3, [r7, #0]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	699a      	ldr	r2, [r3, #24]
 800e330:	69fb      	ldr	r3, [r7, #28]
 800e332:	441a      	add	r2, r3
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	7d1b      	ldrb	r3, [r3, #20]
 800e33c:	f003 0302 	and.w	r3, r3, #2
 800e340:	2b00      	cmp	r3, #0
 800e342:	d00b      	beq.n	800e35c <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e348:	4618      	mov	r0, r3
 800e34a:	f7fe f9fc 	bl	800c746 <create_chain>
 800e34e:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e352:	2b00      	cmp	r3, #0
 800e354:	d108      	bne.n	800e368 <f_lseek+0x2f4>
							ofs = 0; break;
 800e356:	2300      	movs	r3, #0
 800e358:	603b      	str	r3, [r7, #0]
 800e35a:	e022      	b.n	800e3a2 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e360:	4618      	mov	r0, r3
 800e362:	f7fd fffa 	bl	800c35a <get_fat>
 800e366:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e36a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e36e:	d104      	bne.n	800e37a <f_lseek+0x306>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2201      	movs	r2, #1
 800e374:	755a      	strb	r2, [r3, #21]
 800e376:	2301      	movs	r3, #1
 800e378:	e081      	b.n	800e47e <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d904      	bls.n	800e38a <f_lseek+0x316>
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	695b      	ldr	r3, [r3, #20]
 800e384:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e386:	429a      	cmp	r2, r3
 800e388:	d304      	bcc.n	800e394 <f_lseek+0x320>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2202      	movs	r2, #2
 800e38e:	755a      	strb	r2, [r3, #21]
 800e390:	2302      	movs	r3, #2
 800e392:	e074      	b.n	800e47e <f_lseek+0x40a>
					fp->clust = clst;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e398:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e39a:	683a      	ldr	r2, [r7, #0]
 800e39c:	69fb      	ldr	r3, [r7, #28]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d8c0      	bhi.n	800e324 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	699a      	ldr	r2, [r3, #24]
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	441a      	add	r2, r3
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d012      	beq.n	800e3de <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f7fd ffad 	bl	800c31c <clust2sect>
 800e3c2:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e3c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d104      	bne.n	800e3d4 <f_lseek+0x360>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2202      	movs	r2, #2
 800e3ce:	755a      	strb	r2, [r3, #21]
 800e3d0:	2302      	movs	r3, #2
 800e3d2:	e054      	b.n	800e47e <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	0a5b      	lsrs	r3, r3, #9
 800e3d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e3da:	4413      	add	r3, r2
 800e3dc:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	699a      	ldr	r2, [r3, #24]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	68db      	ldr	r3, [r3, #12]
 800e3e6:	429a      	cmp	r2, r3
 800e3e8:	d90a      	bls.n	800e400 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	699a      	ldr	r2, [r3, #24]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	7d1b      	ldrb	r3, [r3, #20]
 800e3f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3fa:	b2da      	uxtb	r2, r3
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	699b      	ldr	r3, [r3, #24]
 800e404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d036      	beq.n	800e47a <f_lseek+0x406>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6a1b      	ldr	r3, [r3, #32]
 800e410:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e412:	429a      	cmp	r2, r3
 800e414:	d031      	beq.n	800e47a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	7d1b      	ldrb	r3, [r3, #20]
 800e41a:	b25b      	sxtb	r3, r3
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	da18      	bge.n	800e452 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	7858      	ldrb	r0, [r3, #1]
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6a1a      	ldr	r2, [r3, #32]
 800e42e:	2301      	movs	r3, #1
 800e430:	f7fd fbea 	bl	800bc08 <disk_write>
 800e434:	4603      	mov	r3, r0
 800e436:	2b00      	cmp	r3, #0
 800e438:	d004      	beq.n	800e444 <f_lseek+0x3d0>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2201      	movs	r2, #1
 800e43e:	755a      	strb	r2, [r3, #21]
 800e440:	2301      	movs	r3, #1
 800e442:	e01c      	b.n	800e47e <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	7d1b      	ldrb	r3, [r3, #20]
 800e448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e44c:	b2da      	uxtb	r2, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	7858      	ldrb	r0, [r3, #1]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e45c:	2301      	movs	r3, #1
 800e45e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e460:	f7fd fbb2 	bl	800bbc8 <disk_read>
 800e464:	4603      	mov	r3, r0
 800e466:	2b00      	cmp	r3, #0
 800e468:	d004      	beq.n	800e474 <f_lseek+0x400>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2201      	movs	r2, #1
 800e46e:	755a      	strb	r2, [r3, #21]
 800e470:	2301      	movs	r3, #1
 800e472:	e004      	b.n	800e47e <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e478:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e47a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3740      	adds	r7, #64	@ 0x40
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
	...

0800e488 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e488:	b480      	push	{r7}
 800e48a:	b087      	sub	sp, #28
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	60b9      	str	r1, [r7, #8]
 800e492:	4613      	mov	r3, r2
 800e494:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e496:	2301      	movs	r3, #1
 800e498:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e49a:	2300      	movs	r3, #0
 800e49c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e49e:	4b1f      	ldr	r3, [pc, #124]	@ (800e51c <FATFS_LinkDriverEx+0x94>)
 800e4a0:	7a5b      	ldrb	r3, [r3, #9]
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d131      	bne.n	800e50c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e4a8:	4b1c      	ldr	r3, [pc, #112]	@ (800e51c <FATFS_LinkDriverEx+0x94>)
 800e4aa:	7a5b      	ldrb	r3, [r3, #9]
 800e4ac:	b2db      	uxtb	r3, r3
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	4b1a      	ldr	r3, [pc, #104]	@ (800e51c <FATFS_LinkDriverEx+0x94>)
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e4b6:	4b19      	ldr	r3, [pc, #100]	@ (800e51c <FATFS_LinkDriverEx+0x94>)
 800e4b8:	7a5b      	ldrb	r3, [r3, #9]
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	4a17      	ldr	r2, [pc, #92]	@ (800e51c <FATFS_LinkDriverEx+0x94>)
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	4413      	add	r3, r2
 800e4c2:	68fa      	ldr	r2, [r7, #12]
 800e4c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e4c6:	4b15      	ldr	r3, [pc, #84]	@ (800e51c <FATFS_LinkDriverEx+0x94>)
 800e4c8:	7a5b      	ldrb	r3, [r3, #9]
 800e4ca:	b2db      	uxtb	r3, r3
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	4b13      	ldr	r3, [pc, #76]	@ (800e51c <FATFS_LinkDriverEx+0x94>)
 800e4d0:	4413      	add	r3, r2
 800e4d2:	79fa      	ldrb	r2, [r7, #7]
 800e4d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e4d6:	4b11      	ldr	r3, [pc, #68]	@ (800e51c <FATFS_LinkDriverEx+0x94>)
 800e4d8:	7a5b      	ldrb	r3, [r3, #9]
 800e4da:	b2db      	uxtb	r3, r3
 800e4dc:	1c5a      	adds	r2, r3, #1
 800e4de:	b2d1      	uxtb	r1, r2
 800e4e0:	4a0e      	ldr	r2, [pc, #56]	@ (800e51c <FATFS_LinkDriverEx+0x94>)
 800e4e2:	7251      	strb	r1, [r2, #9]
 800e4e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e4e6:	7dbb      	ldrb	r3, [r7, #22]
 800e4e8:	3330      	adds	r3, #48	@ 0x30
 800e4ea:	b2da      	uxtb	r2, r3
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	223a      	movs	r2, #58	@ 0x3a
 800e4f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	3302      	adds	r3, #2
 800e4fc:	222f      	movs	r2, #47	@ 0x2f
 800e4fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	3303      	adds	r3, #3
 800e504:	2200      	movs	r2, #0
 800e506:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e508:	2300      	movs	r3, #0
 800e50a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e50c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e50e:	4618      	mov	r0, r3
 800e510:	371c      	adds	r7, #28
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr
 800e51a:	bf00      	nop
 800e51c:	2408a058 	.word	0x2408a058

0800e520 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e52a:	2200      	movs	r2, #0
 800e52c:	6839      	ldr	r1, [r7, #0]
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f7ff ffaa 	bl	800e488 <FATFS_LinkDriverEx>
 800e534:	4603      	mov	r3, r0
}
 800e536:	4618      	mov	r0, r3
 800e538:	3708      	adds	r7, #8
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}
	...

0800e540 <sniprintf>:
 800e540:	b40c      	push	{r2, r3}
 800e542:	b530      	push	{r4, r5, lr}
 800e544:	4b17      	ldr	r3, [pc, #92]	@ (800e5a4 <sniprintf+0x64>)
 800e546:	1e0c      	subs	r4, r1, #0
 800e548:	681d      	ldr	r5, [r3, #0]
 800e54a:	b09d      	sub	sp, #116	@ 0x74
 800e54c:	da08      	bge.n	800e560 <sniprintf+0x20>
 800e54e:	238b      	movs	r3, #139	@ 0x8b
 800e550:	602b      	str	r3, [r5, #0]
 800e552:	f04f 30ff 	mov.w	r0, #4294967295
 800e556:	b01d      	add	sp, #116	@ 0x74
 800e558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e55c:	b002      	add	sp, #8
 800e55e:	4770      	bx	lr
 800e560:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e564:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e568:	bf14      	ite	ne
 800e56a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e56e:	4623      	moveq	r3, r4
 800e570:	9304      	str	r3, [sp, #16]
 800e572:	9307      	str	r3, [sp, #28]
 800e574:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e578:	9002      	str	r0, [sp, #8]
 800e57a:	9006      	str	r0, [sp, #24]
 800e57c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e580:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e582:	ab21      	add	r3, sp, #132	@ 0x84
 800e584:	a902      	add	r1, sp, #8
 800e586:	4628      	mov	r0, r5
 800e588:	9301      	str	r3, [sp, #4]
 800e58a:	f000 f995 	bl	800e8b8 <_svfiprintf_r>
 800e58e:	1c43      	adds	r3, r0, #1
 800e590:	bfbc      	itt	lt
 800e592:	238b      	movlt	r3, #139	@ 0x8b
 800e594:	602b      	strlt	r3, [r5, #0]
 800e596:	2c00      	cmp	r4, #0
 800e598:	d0dd      	beq.n	800e556 <sniprintf+0x16>
 800e59a:	9b02      	ldr	r3, [sp, #8]
 800e59c:	2200      	movs	r2, #0
 800e59e:	701a      	strb	r2, [r3, #0]
 800e5a0:	e7d9      	b.n	800e556 <sniprintf+0x16>
 800e5a2:	bf00      	nop
 800e5a4:	24000014 	.word	0x24000014

0800e5a8 <memset>:
 800e5a8:	4402      	add	r2, r0
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d100      	bne.n	800e5b2 <memset+0xa>
 800e5b0:	4770      	bx	lr
 800e5b2:	f803 1b01 	strb.w	r1, [r3], #1
 800e5b6:	e7f9      	b.n	800e5ac <memset+0x4>

0800e5b8 <__errno>:
 800e5b8:	4b01      	ldr	r3, [pc, #4]	@ (800e5c0 <__errno+0x8>)
 800e5ba:	6818      	ldr	r0, [r3, #0]
 800e5bc:	4770      	bx	lr
 800e5be:	bf00      	nop
 800e5c0:	24000014 	.word	0x24000014

0800e5c4 <__libc_init_array>:
 800e5c4:	b570      	push	{r4, r5, r6, lr}
 800e5c6:	4d0d      	ldr	r5, [pc, #52]	@ (800e5fc <__libc_init_array+0x38>)
 800e5c8:	4c0d      	ldr	r4, [pc, #52]	@ (800e600 <__libc_init_array+0x3c>)
 800e5ca:	1b64      	subs	r4, r4, r5
 800e5cc:	10a4      	asrs	r4, r4, #2
 800e5ce:	2600      	movs	r6, #0
 800e5d0:	42a6      	cmp	r6, r4
 800e5d2:	d109      	bne.n	800e5e8 <__libc_init_array+0x24>
 800e5d4:	4d0b      	ldr	r5, [pc, #44]	@ (800e604 <__libc_init_array+0x40>)
 800e5d6:	4c0c      	ldr	r4, [pc, #48]	@ (800e608 <__libc_init_array+0x44>)
 800e5d8:	f000 fc66 	bl	800eea8 <_init>
 800e5dc:	1b64      	subs	r4, r4, r5
 800e5de:	10a4      	asrs	r4, r4, #2
 800e5e0:	2600      	movs	r6, #0
 800e5e2:	42a6      	cmp	r6, r4
 800e5e4:	d105      	bne.n	800e5f2 <__libc_init_array+0x2e>
 800e5e6:	bd70      	pop	{r4, r5, r6, pc}
 800e5e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5ec:	4798      	blx	r3
 800e5ee:	3601      	adds	r6, #1
 800e5f0:	e7ee      	b.n	800e5d0 <__libc_init_array+0xc>
 800e5f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5f6:	4798      	blx	r3
 800e5f8:	3601      	adds	r6, #1
 800e5fa:	e7f2      	b.n	800e5e2 <__libc_init_array+0x1e>
 800e5fc:	0800f2d4 	.word	0x0800f2d4
 800e600:	0800f2d4 	.word	0x0800f2d4
 800e604:	0800f2d4 	.word	0x0800f2d4
 800e608:	0800f2d8 	.word	0x0800f2d8

0800e60c <__retarget_lock_acquire_recursive>:
 800e60c:	4770      	bx	lr

0800e60e <__retarget_lock_release_recursive>:
 800e60e:	4770      	bx	lr

0800e610 <_free_r>:
 800e610:	b538      	push	{r3, r4, r5, lr}
 800e612:	4605      	mov	r5, r0
 800e614:	2900      	cmp	r1, #0
 800e616:	d041      	beq.n	800e69c <_free_r+0x8c>
 800e618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e61c:	1f0c      	subs	r4, r1, #4
 800e61e:	2b00      	cmp	r3, #0
 800e620:	bfb8      	it	lt
 800e622:	18e4      	addlt	r4, r4, r3
 800e624:	f000 f8e0 	bl	800e7e8 <__malloc_lock>
 800e628:	4a1d      	ldr	r2, [pc, #116]	@ (800e6a0 <_free_r+0x90>)
 800e62a:	6813      	ldr	r3, [r2, #0]
 800e62c:	b933      	cbnz	r3, 800e63c <_free_r+0x2c>
 800e62e:	6063      	str	r3, [r4, #4]
 800e630:	6014      	str	r4, [r2, #0]
 800e632:	4628      	mov	r0, r5
 800e634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e638:	f000 b8dc 	b.w	800e7f4 <__malloc_unlock>
 800e63c:	42a3      	cmp	r3, r4
 800e63e:	d908      	bls.n	800e652 <_free_r+0x42>
 800e640:	6820      	ldr	r0, [r4, #0]
 800e642:	1821      	adds	r1, r4, r0
 800e644:	428b      	cmp	r3, r1
 800e646:	bf01      	itttt	eq
 800e648:	6819      	ldreq	r1, [r3, #0]
 800e64a:	685b      	ldreq	r3, [r3, #4]
 800e64c:	1809      	addeq	r1, r1, r0
 800e64e:	6021      	streq	r1, [r4, #0]
 800e650:	e7ed      	b.n	800e62e <_free_r+0x1e>
 800e652:	461a      	mov	r2, r3
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	b10b      	cbz	r3, 800e65c <_free_r+0x4c>
 800e658:	42a3      	cmp	r3, r4
 800e65a:	d9fa      	bls.n	800e652 <_free_r+0x42>
 800e65c:	6811      	ldr	r1, [r2, #0]
 800e65e:	1850      	adds	r0, r2, r1
 800e660:	42a0      	cmp	r0, r4
 800e662:	d10b      	bne.n	800e67c <_free_r+0x6c>
 800e664:	6820      	ldr	r0, [r4, #0]
 800e666:	4401      	add	r1, r0
 800e668:	1850      	adds	r0, r2, r1
 800e66a:	4283      	cmp	r3, r0
 800e66c:	6011      	str	r1, [r2, #0]
 800e66e:	d1e0      	bne.n	800e632 <_free_r+0x22>
 800e670:	6818      	ldr	r0, [r3, #0]
 800e672:	685b      	ldr	r3, [r3, #4]
 800e674:	6053      	str	r3, [r2, #4]
 800e676:	4408      	add	r0, r1
 800e678:	6010      	str	r0, [r2, #0]
 800e67a:	e7da      	b.n	800e632 <_free_r+0x22>
 800e67c:	d902      	bls.n	800e684 <_free_r+0x74>
 800e67e:	230c      	movs	r3, #12
 800e680:	602b      	str	r3, [r5, #0]
 800e682:	e7d6      	b.n	800e632 <_free_r+0x22>
 800e684:	6820      	ldr	r0, [r4, #0]
 800e686:	1821      	adds	r1, r4, r0
 800e688:	428b      	cmp	r3, r1
 800e68a:	bf04      	itt	eq
 800e68c:	6819      	ldreq	r1, [r3, #0]
 800e68e:	685b      	ldreq	r3, [r3, #4]
 800e690:	6063      	str	r3, [r4, #4]
 800e692:	bf04      	itt	eq
 800e694:	1809      	addeq	r1, r1, r0
 800e696:	6021      	streq	r1, [r4, #0]
 800e698:	6054      	str	r4, [r2, #4]
 800e69a:	e7ca      	b.n	800e632 <_free_r+0x22>
 800e69c:	bd38      	pop	{r3, r4, r5, pc}
 800e69e:	bf00      	nop
 800e6a0:	2408a1a8 	.word	0x2408a1a8

0800e6a4 <sbrk_aligned>:
 800e6a4:	b570      	push	{r4, r5, r6, lr}
 800e6a6:	4e0f      	ldr	r6, [pc, #60]	@ (800e6e4 <sbrk_aligned+0x40>)
 800e6a8:	460c      	mov	r4, r1
 800e6aa:	6831      	ldr	r1, [r6, #0]
 800e6ac:	4605      	mov	r5, r0
 800e6ae:	b911      	cbnz	r1, 800e6b6 <sbrk_aligned+0x12>
 800e6b0:	f000 fba6 	bl	800ee00 <_sbrk_r>
 800e6b4:	6030      	str	r0, [r6, #0]
 800e6b6:	4621      	mov	r1, r4
 800e6b8:	4628      	mov	r0, r5
 800e6ba:	f000 fba1 	bl	800ee00 <_sbrk_r>
 800e6be:	1c43      	adds	r3, r0, #1
 800e6c0:	d103      	bne.n	800e6ca <sbrk_aligned+0x26>
 800e6c2:	f04f 34ff 	mov.w	r4, #4294967295
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	bd70      	pop	{r4, r5, r6, pc}
 800e6ca:	1cc4      	adds	r4, r0, #3
 800e6cc:	f024 0403 	bic.w	r4, r4, #3
 800e6d0:	42a0      	cmp	r0, r4
 800e6d2:	d0f8      	beq.n	800e6c6 <sbrk_aligned+0x22>
 800e6d4:	1a21      	subs	r1, r4, r0
 800e6d6:	4628      	mov	r0, r5
 800e6d8:	f000 fb92 	bl	800ee00 <_sbrk_r>
 800e6dc:	3001      	adds	r0, #1
 800e6de:	d1f2      	bne.n	800e6c6 <sbrk_aligned+0x22>
 800e6e0:	e7ef      	b.n	800e6c2 <sbrk_aligned+0x1e>
 800e6e2:	bf00      	nop
 800e6e4:	2408a1a4 	.word	0x2408a1a4

0800e6e8 <_malloc_r>:
 800e6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6ec:	1ccd      	adds	r5, r1, #3
 800e6ee:	f025 0503 	bic.w	r5, r5, #3
 800e6f2:	3508      	adds	r5, #8
 800e6f4:	2d0c      	cmp	r5, #12
 800e6f6:	bf38      	it	cc
 800e6f8:	250c      	movcc	r5, #12
 800e6fa:	2d00      	cmp	r5, #0
 800e6fc:	4606      	mov	r6, r0
 800e6fe:	db01      	blt.n	800e704 <_malloc_r+0x1c>
 800e700:	42a9      	cmp	r1, r5
 800e702:	d904      	bls.n	800e70e <_malloc_r+0x26>
 800e704:	230c      	movs	r3, #12
 800e706:	6033      	str	r3, [r6, #0]
 800e708:	2000      	movs	r0, #0
 800e70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e70e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e7e4 <_malloc_r+0xfc>
 800e712:	f000 f869 	bl	800e7e8 <__malloc_lock>
 800e716:	f8d8 3000 	ldr.w	r3, [r8]
 800e71a:	461c      	mov	r4, r3
 800e71c:	bb44      	cbnz	r4, 800e770 <_malloc_r+0x88>
 800e71e:	4629      	mov	r1, r5
 800e720:	4630      	mov	r0, r6
 800e722:	f7ff ffbf 	bl	800e6a4 <sbrk_aligned>
 800e726:	1c43      	adds	r3, r0, #1
 800e728:	4604      	mov	r4, r0
 800e72a:	d158      	bne.n	800e7de <_malloc_r+0xf6>
 800e72c:	f8d8 4000 	ldr.w	r4, [r8]
 800e730:	4627      	mov	r7, r4
 800e732:	2f00      	cmp	r7, #0
 800e734:	d143      	bne.n	800e7be <_malloc_r+0xd6>
 800e736:	2c00      	cmp	r4, #0
 800e738:	d04b      	beq.n	800e7d2 <_malloc_r+0xea>
 800e73a:	6823      	ldr	r3, [r4, #0]
 800e73c:	4639      	mov	r1, r7
 800e73e:	4630      	mov	r0, r6
 800e740:	eb04 0903 	add.w	r9, r4, r3
 800e744:	f000 fb5c 	bl	800ee00 <_sbrk_r>
 800e748:	4581      	cmp	r9, r0
 800e74a:	d142      	bne.n	800e7d2 <_malloc_r+0xea>
 800e74c:	6821      	ldr	r1, [r4, #0]
 800e74e:	1a6d      	subs	r5, r5, r1
 800e750:	4629      	mov	r1, r5
 800e752:	4630      	mov	r0, r6
 800e754:	f7ff ffa6 	bl	800e6a4 <sbrk_aligned>
 800e758:	3001      	adds	r0, #1
 800e75a:	d03a      	beq.n	800e7d2 <_malloc_r+0xea>
 800e75c:	6823      	ldr	r3, [r4, #0]
 800e75e:	442b      	add	r3, r5
 800e760:	6023      	str	r3, [r4, #0]
 800e762:	f8d8 3000 	ldr.w	r3, [r8]
 800e766:	685a      	ldr	r2, [r3, #4]
 800e768:	bb62      	cbnz	r2, 800e7c4 <_malloc_r+0xdc>
 800e76a:	f8c8 7000 	str.w	r7, [r8]
 800e76e:	e00f      	b.n	800e790 <_malloc_r+0xa8>
 800e770:	6822      	ldr	r2, [r4, #0]
 800e772:	1b52      	subs	r2, r2, r5
 800e774:	d420      	bmi.n	800e7b8 <_malloc_r+0xd0>
 800e776:	2a0b      	cmp	r2, #11
 800e778:	d917      	bls.n	800e7aa <_malloc_r+0xc2>
 800e77a:	1961      	adds	r1, r4, r5
 800e77c:	42a3      	cmp	r3, r4
 800e77e:	6025      	str	r5, [r4, #0]
 800e780:	bf18      	it	ne
 800e782:	6059      	strne	r1, [r3, #4]
 800e784:	6863      	ldr	r3, [r4, #4]
 800e786:	bf08      	it	eq
 800e788:	f8c8 1000 	streq.w	r1, [r8]
 800e78c:	5162      	str	r2, [r4, r5]
 800e78e:	604b      	str	r3, [r1, #4]
 800e790:	4630      	mov	r0, r6
 800e792:	f000 f82f 	bl	800e7f4 <__malloc_unlock>
 800e796:	f104 000b 	add.w	r0, r4, #11
 800e79a:	1d23      	adds	r3, r4, #4
 800e79c:	f020 0007 	bic.w	r0, r0, #7
 800e7a0:	1ac2      	subs	r2, r0, r3
 800e7a2:	bf1c      	itt	ne
 800e7a4:	1a1b      	subne	r3, r3, r0
 800e7a6:	50a3      	strne	r3, [r4, r2]
 800e7a8:	e7af      	b.n	800e70a <_malloc_r+0x22>
 800e7aa:	6862      	ldr	r2, [r4, #4]
 800e7ac:	42a3      	cmp	r3, r4
 800e7ae:	bf0c      	ite	eq
 800e7b0:	f8c8 2000 	streq.w	r2, [r8]
 800e7b4:	605a      	strne	r2, [r3, #4]
 800e7b6:	e7eb      	b.n	800e790 <_malloc_r+0xa8>
 800e7b8:	4623      	mov	r3, r4
 800e7ba:	6864      	ldr	r4, [r4, #4]
 800e7bc:	e7ae      	b.n	800e71c <_malloc_r+0x34>
 800e7be:	463c      	mov	r4, r7
 800e7c0:	687f      	ldr	r7, [r7, #4]
 800e7c2:	e7b6      	b.n	800e732 <_malloc_r+0x4a>
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	685b      	ldr	r3, [r3, #4]
 800e7c8:	42a3      	cmp	r3, r4
 800e7ca:	d1fb      	bne.n	800e7c4 <_malloc_r+0xdc>
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	6053      	str	r3, [r2, #4]
 800e7d0:	e7de      	b.n	800e790 <_malloc_r+0xa8>
 800e7d2:	230c      	movs	r3, #12
 800e7d4:	6033      	str	r3, [r6, #0]
 800e7d6:	4630      	mov	r0, r6
 800e7d8:	f000 f80c 	bl	800e7f4 <__malloc_unlock>
 800e7dc:	e794      	b.n	800e708 <_malloc_r+0x20>
 800e7de:	6005      	str	r5, [r0, #0]
 800e7e0:	e7d6      	b.n	800e790 <_malloc_r+0xa8>
 800e7e2:	bf00      	nop
 800e7e4:	2408a1a8 	.word	0x2408a1a8

0800e7e8 <__malloc_lock>:
 800e7e8:	4801      	ldr	r0, [pc, #4]	@ (800e7f0 <__malloc_lock+0x8>)
 800e7ea:	f7ff bf0f 	b.w	800e60c <__retarget_lock_acquire_recursive>
 800e7ee:	bf00      	nop
 800e7f0:	2408a1a0 	.word	0x2408a1a0

0800e7f4 <__malloc_unlock>:
 800e7f4:	4801      	ldr	r0, [pc, #4]	@ (800e7fc <__malloc_unlock+0x8>)
 800e7f6:	f7ff bf0a 	b.w	800e60e <__retarget_lock_release_recursive>
 800e7fa:	bf00      	nop
 800e7fc:	2408a1a0 	.word	0x2408a1a0

0800e800 <__ssputs_r>:
 800e800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e804:	688e      	ldr	r6, [r1, #8]
 800e806:	461f      	mov	r7, r3
 800e808:	42be      	cmp	r6, r7
 800e80a:	680b      	ldr	r3, [r1, #0]
 800e80c:	4682      	mov	sl, r0
 800e80e:	460c      	mov	r4, r1
 800e810:	4690      	mov	r8, r2
 800e812:	d82d      	bhi.n	800e870 <__ssputs_r+0x70>
 800e814:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e818:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e81c:	d026      	beq.n	800e86c <__ssputs_r+0x6c>
 800e81e:	6965      	ldr	r5, [r4, #20]
 800e820:	6909      	ldr	r1, [r1, #16]
 800e822:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e826:	eba3 0901 	sub.w	r9, r3, r1
 800e82a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e82e:	1c7b      	adds	r3, r7, #1
 800e830:	444b      	add	r3, r9
 800e832:	106d      	asrs	r5, r5, #1
 800e834:	429d      	cmp	r5, r3
 800e836:	bf38      	it	cc
 800e838:	461d      	movcc	r5, r3
 800e83a:	0553      	lsls	r3, r2, #21
 800e83c:	d527      	bpl.n	800e88e <__ssputs_r+0x8e>
 800e83e:	4629      	mov	r1, r5
 800e840:	f7ff ff52 	bl	800e6e8 <_malloc_r>
 800e844:	4606      	mov	r6, r0
 800e846:	b360      	cbz	r0, 800e8a2 <__ssputs_r+0xa2>
 800e848:	6921      	ldr	r1, [r4, #16]
 800e84a:	464a      	mov	r2, r9
 800e84c:	f000 fae8 	bl	800ee20 <memcpy>
 800e850:	89a3      	ldrh	r3, [r4, #12]
 800e852:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e85a:	81a3      	strh	r3, [r4, #12]
 800e85c:	6126      	str	r6, [r4, #16]
 800e85e:	6165      	str	r5, [r4, #20]
 800e860:	444e      	add	r6, r9
 800e862:	eba5 0509 	sub.w	r5, r5, r9
 800e866:	6026      	str	r6, [r4, #0]
 800e868:	60a5      	str	r5, [r4, #8]
 800e86a:	463e      	mov	r6, r7
 800e86c:	42be      	cmp	r6, r7
 800e86e:	d900      	bls.n	800e872 <__ssputs_r+0x72>
 800e870:	463e      	mov	r6, r7
 800e872:	6820      	ldr	r0, [r4, #0]
 800e874:	4632      	mov	r2, r6
 800e876:	4641      	mov	r1, r8
 800e878:	f000 faa8 	bl	800edcc <memmove>
 800e87c:	68a3      	ldr	r3, [r4, #8]
 800e87e:	1b9b      	subs	r3, r3, r6
 800e880:	60a3      	str	r3, [r4, #8]
 800e882:	6823      	ldr	r3, [r4, #0]
 800e884:	4433      	add	r3, r6
 800e886:	6023      	str	r3, [r4, #0]
 800e888:	2000      	movs	r0, #0
 800e88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e88e:	462a      	mov	r2, r5
 800e890:	f000 fad4 	bl	800ee3c <_realloc_r>
 800e894:	4606      	mov	r6, r0
 800e896:	2800      	cmp	r0, #0
 800e898:	d1e0      	bne.n	800e85c <__ssputs_r+0x5c>
 800e89a:	6921      	ldr	r1, [r4, #16]
 800e89c:	4650      	mov	r0, sl
 800e89e:	f7ff feb7 	bl	800e610 <_free_r>
 800e8a2:	230c      	movs	r3, #12
 800e8a4:	f8ca 3000 	str.w	r3, [sl]
 800e8a8:	89a3      	ldrh	r3, [r4, #12]
 800e8aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8ae:	81a3      	strh	r3, [r4, #12]
 800e8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8b4:	e7e9      	b.n	800e88a <__ssputs_r+0x8a>
	...

0800e8b8 <_svfiprintf_r>:
 800e8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8bc:	4698      	mov	r8, r3
 800e8be:	898b      	ldrh	r3, [r1, #12]
 800e8c0:	061b      	lsls	r3, r3, #24
 800e8c2:	b09d      	sub	sp, #116	@ 0x74
 800e8c4:	4607      	mov	r7, r0
 800e8c6:	460d      	mov	r5, r1
 800e8c8:	4614      	mov	r4, r2
 800e8ca:	d510      	bpl.n	800e8ee <_svfiprintf_r+0x36>
 800e8cc:	690b      	ldr	r3, [r1, #16]
 800e8ce:	b973      	cbnz	r3, 800e8ee <_svfiprintf_r+0x36>
 800e8d0:	2140      	movs	r1, #64	@ 0x40
 800e8d2:	f7ff ff09 	bl	800e6e8 <_malloc_r>
 800e8d6:	6028      	str	r0, [r5, #0]
 800e8d8:	6128      	str	r0, [r5, #16]
 800e8da:	b930      	cbnz	r0, 800e8ea <_svfiprintf_r+0x32>
 800e8dc:	230c      	movs	r3, #12
 800e8de:	603b      	str	r3, [r7, #0]
 800e8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8e4:	b01d      	add	sp, #116	@ 0x74
 800e8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8ea:	2340      	movs	r3, #64	@ 0x40
 800e8ec:	616b      	str	r3, [r5, #20]
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8f2:	2320      	movs	r3, #32
 800e8f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e8f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8fc:	2330      	movs	r3, #48	@ 0x30
 800e8fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ea9c <_svfiprintf_r+0x1e4>
 800e902:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e906:	f04f 0901 	mov.w	r9, #1
 800e90a:	4623      	mov	r3, r4
 800e90c:	469a      	mov	sl, r3
 800e90e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e912:	b10a      	cbz	r2, 800e918 <_svfiprintf_r+0x60>
 800e914:	2a25      	cmp	r2, #37	@ 0x25
 800e916:	d1f9      	bne.n	800e90c <_svfiprintf_r+0x54>
 800e918:	ebba 0b04 	subs.w	fp, sl, r4
 800e91c:	d00b      	beq.n	800e936 <_svfiprintf_r+0x7e>
 800e91e:	465b      	mov	r3, fp
 800e920:	4622      	mov	r2, r4
 800e922:	4629      	mov	r1, r5
 800e924:	4638      	mov	r0, r7
 800e926:	f7ff ff6b 	bl	800e800 <__ssputs_r>
 800e92a:	3001      	adds	r0, #1
 800e92c:	f000 80a7 	beq.w	800ea7e <_svfiprintf_r+0x1c6>
 800e930:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e932:	445a      	add	r2, fp
 800e934:	9209      	str	r2, [sp, #36]	@ 0x24
 800e936:	f89a 3000 	ldrb.w	r3, [sl]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	f000 809f 	beq.w	800ea7e <_svfiprintf_r+0x1c6>
 800e940:	2300      	movs	r3, #0
 800e942:	f04f 32ff 	mov.w	r2, #4294967295
 800e946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e94a:	f10a 0a01 	add.w	sl, sl, #1
 800e94e:	9304      	str	r3, [sp, #16]
 800e950:	9307      	str	r3, [sp, #28]
 800e952:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e956:	931a      	str	r3, [sp, #104]	@ 0x68
 800e958:	4654      	mov	r4, sl
 800e95a:	2205      	movs	r2, #5
 800e95c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e960:	484e      	ldr	r0, [pc, #312]	@ (800ea9c <_svfiprintf_r+0x1e4>)
 800e962:	f7f1 fccd 	bl	8000300 <memchr>
 800e966:	9a04      	ldr	r2, [sp, #16]
 800e968:	b9d8      	cbnz	r0, 800e9a2 <_svfiprintf_r+0xea>
 800e96a:	06d0      	lsls	r0, r2, #27
 800e96c:	bf44      	itt	mi
 800e96e:	2320      	movmi	r3, #32
 800e970:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e974:	0711      	lsls	r1, r2, #28
 800e976:	bf44      	itt	mi
 800e978:	232b      	movmi	r3, #43	@ 0x2b
 800e97a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e97e:	f89a 3000 	ldrb.w	r3, [sl]
 800e982:	2b2a      	cmp	r3, #42	@ 0x2a
 800e984:	d015      	beq.n	800e9b2 <_svfiprintf_r+0xfa>
 800e986:	9a07      	ldr	r2, [sp, #28]
 800e988:	4654      	mov	r4, sl
 800e98a:	2000      	movs	r0, #0
 800e98c:	f04f 0c0a 	mov.w	ip, #10
 800e990:	4621      	mov	r1, r4
 800e992:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e996:	3b30      	subs	r3, #48	@ 0x30
 800e998:	2b09      	cmp	r3, #9
 800e99a:	d94b      	bls.n	800ea34 <_svfiprintf_r+0x17c>
 800e99c:	b1b0      	cbz	r0, 800e9cc <_svfiprintf_r+0x114>
 800e99e:	9207      	str	r2, [sp, #28]
 800e9a0:	e014      	b.n	800e9cc <_svfiprintf_r+0x114>
 800e9a2:	eba0 0308 	sub.w	r3, r0, r8
 800e9a6:	fa09 f303 	lsl.w	r3, r9, r3
 800e9aa:	4313      	orrs	r3, r2
 800e9ac:	9304      	str	r3, [sp, #16]
 800e9ae:	46a2      	mov	sl, r4
 800e9b0:	e7d2      	b.n	800e958 <_svfiprintf_r+0xa0>
 800e9b2:	9b03      	ldr	r3, [sp, #12]
 800e9b4:	1d19      	adds	r1, r3, #4
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	9103      	str	r1, [sp, #12]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	bfbb      	ittet	lt
 800e9be:	425b      	neglt	r3, r3
 800e9c0:	f042 0202 	orrlt.w	r2, r2, #2
 800e9c4:	9307      	strge	r3, [sp, #28]
 800e9c6:	9307      	strlt	r3, [sp, #28]
 800e9c8:	bfb8      	it	lt
 800e9ca:	9204      	strlt	r2, [sp, #16]
 800e9cc:	7823      	ldrb	r3, [r4, #0]
 800e9ce:	2b2e      	cmp	r3, #46	@ 0x2e
 800e9d0:	d10a      	bne.n	800e9e8 <_svfiprintf_r+0x130>
 800e9d2:	7863      	ldrb	r3, [r4, #1]
 800e9d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9d6:	d132      	bne.n	800ea3e <_svfiprintf_r+0x186>
 800e9d8:	9b03      	ldr	r3, [sp, #12]
 800e9da:	1d1a      	adds	r2, r3, #4
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	9203      	str	r2, [sp, #12]
 800e9e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e9e4:	3402      	adds	r4, #2
 800e9e6:	9305      	str	r3, [sp, #20]
 800e9e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800eaac <_svfiprintf_r+0x1f4>
 800e9ec:	7821      	ldrb	r1, [r4, #0]
 800e9ee:	2203      	movs	r2, #3
 800e9f0:	4650      	mov	r0, sl
 800e9f2:	f7f1 fc85 	bl	8000300 <memchr>
 800e9f6:	b138      	cbz	r0, 800ea08 <_svfiprintf_r+0x150>
 800e9f8:	9b04      	ldr	r3, [sp, #16]
 800e9fa:	eba0 000a 	sub.w	r0, r0, sl
 800e9fe:	2240      	movs	r2, #64	@ 0x40
 800ea00:	4082      	lsls	r2, r0
 800ea02:	4313      	orrs	r3, r2
 800ea04:	3401      	adds	r4, #1
 800ea06:	9304      	str	r3, [sp, #16]
 800ea08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea0c:	4824      	ldr	r0, [pc, #144]	@ (800eaa0 <_svfiprintf_r+0x1e8>)
 800ea0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea12:	2206      	movs	r2, #6
 800ea14:	f7f1 fc74 	bl	8000300 <memchr>
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	d036      	beq.n	800ea8a <_svfiprintf_r+0x1d2>
 800ea1c:	4b21      	ldr	r3, [pc, #132]	@ (800eaa4 <_svfiprintf_r+0x1ec>)
 800ea1e:	bb1b      	cbnz	r3, 800ea68 <_svfiprintf_r+0x1b0>
 800ea20:	9b03      	ldr	r3, [sp, #12]
 800ea22:	3307      	adds	r3, #7
 800ea24:	f023 0307 	bic.w	r3, r3, #7
 800ea28:	3308      	adds	r3, #8
 800ea2a:	9303      	str	r3, [sp, #12]
 800ea2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea2e:	4433      	add	r3, r6
 800ea30:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea32:	e76a      	b.n	800e90a <_svfiprintf_r+0x52>
 800ea34:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea38:	460c      	mov	r4, r1
 800ea3a:	2001      	movs	r0, #1
 800ea3c:	e7a8      	b.n	800e990 <_svfiprintf_r+0xd8>
 800ea3e:	2300      	movs	r3, #0
 800ea40:	3401      	adds	r4, #1
 800ea42:	9305      	str	r3, [sp, #20]
 800ea44:	4619      	mov	r1, r3
 800ea46:	f04f 0c0a 	mov.w	ip, #10
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea50:	3a30      	subs	r2, #48	@ 0x30
 800ea52:	2a09      	cmp	r2, #9
 800ea54:	d903      	bls.n	800ea5e <_svfiprintf_r+0x1a6>
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d0c6      	beq.n	800e9e8 <_svfiprintf_r+0x130>
 800ea5a:	9105      	str	r1, [sp, #20]
 800ea5c:	e7c4      	b.n	800e9e8 <_svfiprintf_r+0x130>
 800ea5e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea62:	4604      	mov	r4, r0
 800ea64:	2301      	movs	r3, #1
 800ea66:	e7f0      	b.n	800ea4a <_svfiprintf_r+0x192>
 800ea68:	ab03      	add	r3, sp, #12
 800ea6a:	9300      	str	r3, [sp, #0]
 800ea6c:	462a      	mov	r2, r5
 800ea6e:	4b0e      	ldr	r3, [pc, #56]	@ (800eaa8 <_svfiprintf_r+0x1f0>)
 800ea70:	a904      	add	r1, sp, #16
 800ea72:	4638      	mov	r0, r7
 800ea74:	f3af 8000 	nop.w
 800ea78:	1c42      	adds	r2, r0, #1
 800ea7a:	4606      	mov	r6, r0
 800ea7c:	d1d6      	bne.n	800ea2c <_svfiprintf_r+0x174>
 800ea7e:	89ab      	ldrh	r3, [r5, #12]
 800ea80:	065b      	lsls	r3, r3, #25
 800ea82:	f53f af2d 	bmi.w	800e8e0 <_svfiprintf_r+0x28>
 800ea86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea88:	e72c      	b.n	800e8e4 <_svfiprintf_r+0x2c>
 800ea8a:	ab03      	add	r3, sp, #12
 800ea8c:	9300      	str	r3, [sp, #0]
 800ea8e:	462a      	mov	r2, r5
 800ea90:	4b05      	ldr	r3, [pc, #20]	@ (800eaa8 <_svfiprintf_r+0x1f0>)
 800ea92:	a904      	add	r1, sp, #16
 800ea94:	4638      	mov	r0, r7
 800ea96:	f000 f879 	bl	800eb8c <_printf_i>
 800ea9a:	e7ed      	b.n	800ea78 <_svfiprintf_r+0x1c0>
 800ea9c:	0800f298 	.word	0x0800f298
 800eaa0:	0800f2a2 	.word	0x0800f2a2
 800eaa4:	00000000 	.word	0x00000000
 800eaa8:	0800e801 	.word	0x0800e801
 800eaac:	0800f29e 	.word	0x0800f29e

0800eab0 <_printf_common>:
 800eab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eab4:	4616      	mov	r6, r2
 800eab6:	4698      	mov	r8, r3
 800eab8:	688a      	ldr	r2, [r1, #8]
 800eaba:	690b      	ldr	r3, [r1, #16]
 800eabc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eac0:	4293      	cmp	r3, r2
 800eac2:	bfb8      	it	lt
 800eac4:	4613      	movlt	r3, r2
 800eac6:	6033      	str	r3, [r6, #0]
 800eac8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eacc:	4607      	mov	r7, r0
 800eace:	460c      	mov	r4, r1
 800ead0:	b10a      	cbz	r2, 800ead6 <_printf_common+0x26>
 800ead2:	3301      	adds	r3, #1
 800ead4:	6033      	str	r3, [r6, #0]
 800ead6:	6823      	ldr	r3, [r4, #0]
 800ead8:	0699      	lsls	r1, r3, #26
 800eada:	bf42      	ittt	mi
 800eadc:	6833      	ldrmi	r3, [r6, #0]
 800eade:	3302      	addmi	r3, #2
 800eae0:	6033      	strmi	r3, [r6, #0]
 800eae2:	6825      	ldr	r5, [r4, #0]
 800eae4:	f015 0506 	ands.w	r5, r5, #6
 800eae8:	d106      	bne.n	800eaf8 <_printf_common+0x48>
 800eaea:	f104 0a19 	add.w	sl, r4, #25
 800eaee:	68e3      	ldr	r3, [r4, #12]
 800eaf0:	6832      	ldr	r2, [r6, #0]
 800eaf2:	1a9b      	subs	r3, r3, r2
 800eaf4:	42ab      	cmp	r3, r5
 800eaf6:	dc26      	bgt.n	800eb46 <_printf_common+0x96>
 800eaf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eafc:	6822      	ldr	r2, [r4, #0]
 800eafe:	3b00      	subs	r3, #0
 800eb00:	bf18      	it	ne
 800eb02:	2301      	movne	r3, #1
 800eb04:	0692      	lsls	r2, r2, #26
 800eb06:	d42b      	bmi.n	800eb60 <_printf_common+0xb0>
 800eb08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eb0c:	4641      	mov	r1, r8
 800eb0e:	4638      	mov	r0, r7
 800eb10:	47c8      	blx	r9
 800eb12:	3001      	adds	r0, #1
 800eb14:	d01e      	beq.n	800eb54 <_printf_common+0xa4>
 800eb16:	6823      	ldr	r3, [r4, #0]
 800eb18:	6922      	ldr	r2, [r4, #16]
 800eb1a:	f003 0306 	and.w	r3, r3, #6
 800eb1e:	2b04      	cmp	r3, #4
 800eb20:	bf02      	ittt	eq
 800eb22:	68e5      	ldreq	r5, [r4, #12]
 800eb24:	6833      	ldreq	r3, [r6, #0]
 800eb26:	1aed      	subeq	r5, r5, r3
 800eb28:	68a3      	ldr	r3, [r4, #8]
 800eb2a:	bf0c      	ite	eq
 800eb2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb30:	2500      	movne	r5, #0
 800eb32:	4293      	cmp	r3, r2
 800eb34:	bfc4      	itt	gt
 800eb36:	1a9b      	subgt	r3, r3, r2
 800eb38:	18ed      	addgt	r5, r5, r3
 800eb3a:	2600      	movs	r6, #0
 800eb3c:	341a      	adds	r4, #26
 800eb3e:	42b5      	cmp	r5, r6
 800eb40:	d11a      	bne.n	800eb78 <_printf_common+0xc8>
 800eb42:	2000      	movs	r0, #0
 800eb44:	e008      	b.n	800eb58 <_printf_common+0xa8>
 800eb46:	2301      	movs	r3, #1
 800eb48:	4652      	mov	r2, sl
 800eb4a:	4641      	mov	r1, r8
 800eb4c:	4638      	mov	r0, r7
 800eb4e:	47c8      	blx	r9
 800eb50:	3001      	adds	r0, #1
 800eb52:	d103      	bne.n	800eb5c <_printf_common+0xac>
 800eb54:	f04f 30ff 	mov.w	r0, #4294967295
 800eb58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb5c:	3501      	adds	r5, #1
 800eb5e:	e7c6      	b.n	800eaee <_printf_common+0x3e>
 800eb60:	18e1      	adds	r1, r4, r3
 800eb62:	1c5a      	adds	r2, r3, #1
 800eb64:	2030      	movs	r0, #48	@ 0x30
 800eb66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eb6a:	4422      	add	r2, r4
 800eb6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eb70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eb74:	3302      	adds	r3, #2
 800eb76:	e7c7      	b.n	800eb08 <_printf_common+0x58>
 800eb78:	2301      	movs	r3, #1
 800eb7a:	4622      	mov	r2, r4
 800eb7c:	4641      	mov	r1, r8
 800eb7e:	4638      	mov	r0, r7
 800eb80:	47c8      	blx	r9
 800eb82:	3001      	adds	r0, #1
 800eb84:	d0e6      	beq.n	800eb54 <_printf_common+0xa4>
 800eb86:	3601      	adds	r6, #1
 800eb88:	e7d9      	b.n	800eb3e <_printf_common+0x8e>
	...

0800eb8c <_printf_i>:
 800eb8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb90:	7e0f      	ldrb	r7, [r1, #24]
 800eb92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eb94:	2f78      	cmp	r7, #120	@ 0x78
 800eb96:	4691      	mov	r9, r2
 800eb98:	4680      	mov	r8, r0
 800eb9a:	460c      	mov	r4, r1
 800eb9c:	469a      	mov	sl, r3
 800eb9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eba2:	d807      	bhi.n	800ebb4 <_printf_i+0x28>
 800eba4:	2f62      	cmp	r7, #98	@ 0x62
 800eba6:	d80a      	bhi.n	800ebbe <_printf_i+0x32>
 800eba8:	2f00      	cmp	r7, #0
 800ebaa:	f000 80d2 	beq.w	800ed52 <_printf_i+0x1c6>
 800ebae:	2f58      	cmp	r7, #88	@ 0x58
 800ebb0:	f000 80b9 	beq.w	800ed26 <_printf_i+0x19a>
 800ebb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ebb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ebbc:	e03a      	b.n	800ec34 <_printf_i+0xa8>
 800ebbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ebc2:	2b15      	cmp	r3, #21
 800ebc4:	d8f6      	bhi.n	800ebb4 <_printf_i+0x28>
 800ebc6:	a101      	add	r1, pc, #4	@ (adr r1, 800ebcc <_printf_i+0x40>)
 800ebc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ebcc:	0800ec25 	.word	0x0800ec25
 800ebd0:	0800ec39 	.word	0x0800ec39
 800ebd4:	0800ebb5 	.word	0x0800ebb5
 800ebd8:	0800ebb5 	.word	0x0800ebb5
 800ebdc:	0800ebb5 	.word	0x0800ebb5
 800ebe0:	0800ebb5 	.word	0x0800ebb5
 800ebe4:	0800ec39 	.word	0x0800ec39
 800ebe8:	0800ebb5 	.word	0x0800ebb5
 800ebec:	0800ebb5 	.word	0x0800ebb5
 800ebf0:	0800ebb5 	.word	0x0800ebb5
 800ebf4:	0800ebb5 	.word	0x0800ebb5
 800ebf8:	0800ed39 	.word	0x0800ed39
 800ebfc:	0800ec63 	.word	0x0800ec63
 800ec00:	0800ecf3 	.word	0x0800ecf3
 800ec04:	0800ebb5 	.word	0x0800ebb5
 800ec08:	0800ebb5 	.word	0x0800ebb5
 800ec0c:	0800ed5b 	.word	0x0800ed5b
 800ec10:	0800ebb5 	.word	0x0800ebb5
 800ec14:	0800ec63 	.word	0x0800ec63
 800ec18:	0800ebb5 	.word	0x0800ebb5
 800ec1c:	0800ebb5 	.word	0x0800ebb5
 800ec20:	0800ecfb 	.word	0x0800ecfb
 800ec24:	6833      	ldr	r3, [r6, #0]
 800ec26:	1d1a      	adds	r2, r3, #4
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	6032      	str	r2, [r6, #0]
 800ec2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ec34:	2301      	movs	r3, #1
 800ec36:	e09d      	b.n	800ed74 <_printf_i+0x1e8>
 800ec38:	6833      	ldr	r3, [r6, #0]
 800ec3a:	6820      	ldr	r0, [r4, #0]
 800ec3c:	1d19      	adds	r1, r3, #4
 800ec3e:	6031      	str	r1, [r6, #0]
 800ec40:	0606      	lsls	r6, r0, #24
 800ec42:	d501      	bpl.n	800ec48 <_printf_i+0xbc>
 800ec44:	681d      	ldr	r5, [r3, #0]
 800ec46:	e003      	b.n	800ec50 <_printf_i+0xc4>
 800ec48:	0645      	lsls	r5, r0, #25
 800ec4a:	d5fb      	bpl.n	800ec44 <_printf_i+0xb8>
 800ec4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ec50:	2d00      	cmp	r5, #0
 800ec52:	da03      	bge.n	800ec5c <_printf_i+0xd0>
 800ec54:	232d      	movs	r3, #45	@ 0x2d
 800ec56:	426d      	negs	r5, r5
 800ec58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec5c:	4859      	ldr	r0, [pc, #356]	@ (800edc4 <_printf_i+0x238>)
 800ec5e:	230a      	movs	r3, #10
 800ec60:	e011      	b.n	800ec86 <_printf_i+0xfa>
 800ec62:	6821      	ldr	r1, [r4, #0]
 800ec64:	6833      	ldr	r3, [r6, #0]
 800ec66:	0608      	lsls	r0, r1, #24
 800ec68:	f853 5b04 	ldr.w	r5, [r3], #4
 800ec6c:	d402      	bmi.n	800ec74 <_printf_i+0xe8>
 800ec6e:	0649      	lsls	r1, r1, #25
 800ec70:	bf48      	it	mi
 800ec72:	b2ad      	uxthmi	r5, r5
 800ec74:	2f6f      	cmp	r7, #111	@ 0x6f
 800ec76:	4853      	ldr	r0, [pc, #332]	@ (800edc4 <_printf_i+0x238>)
 800ec78:	6033      	str	r3, [r6, #0]
 800ec7a:	bf14      	ite	ne
 800ec7c:	230a      	movne	r3, #10
 800ec7e:	2308      	moveq	r3, #8
 800ec80:	2100      	movs	r1, #0
 800ec82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ec86:	6866      	ldr	r6, [r4, #4]
 800ec88:	60a6      	str	r6, [r4, #8]
 800ec8a:	2e00      	cmp	r6, #0
 800ec8c:	bfa2      	ittt	ge
 800ec8e:	6821      	ldrge	r1, [r4, #0]
 800ec90:	f021 0104 	bicge.w	r1, r1, #4
 800ec94:	6021      	strge	r1, [r4, #0]
 800ec96:	b90d      	cbnz	r5, 800ec9c <_printf_i+0x110>
 800ec98:	2e00      	cmp	r6, #0
 800ec9a:	d04b      	beq.n	800ed34 <_printf_i+0x1a8>
 800ec9c:	4616      	mov	r6, r2
 800ec9e:	fbb5 f1f3 	udiv	r1, r5, r3
 800eca2:	fb03 5711 	mls	r7, r3, r1, r5
 800eca6:	5dc7      	ldrb	r7, [r0, r7]
 800eca8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ecac:	462f      	mov	r7, r5
 800ecae:	42bb      	cmp	r3, r7
 800ecb0:	460d      	mov	r5, r1
 800ecb2:	d9f4      	bls.n	800ec9e <_printf_i+0x112>
 800ecb4:	2b08      	cmp	r3, #8
 800ecb6:	d10b      	bne.n	800ecd0 <_printf_i+0x144>
 800ecb8:	6823      	ldr	r3, [r4, #0]
 800ecba:	07df      	lsls	r7, r3, #31
 800ecbc:	d508      	bpl.n	800ecd0 <_printf_i+0x144>
 800ecbe:	6923      	ldr	r3, [r4, #16]
 800ecc0:	6861      	ldr	r1, [r4, #4]
 800ecc2:	4299      	cmp	r1, r3
 800ecc4:	bfde      	ittt	le
 800ecc6:	2330      	movle	r3, #48	@ 0x30
 800ecc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eccc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ecd0:	1b92      	subs	r2, r2, r6
 800ecd2:	6122      	str	r2, [r4, #16]
 800ecd4:	f8cd a000 	str.w	sl, [sp]
 800ecd8:	464b      	mov	r3, r9
 800ecda:	aa03      	add	r2, sp, #12
 800ecdc:	4621      	mov	r1, r4
 800ecde:	4640      	mov	r0, r8
 800ece0:	f7ff fee6 	bl	800eab0 <_printf_common>
 800ece4:	3001      	adds	r0, #1
 800ece6:	d14a      	bne.n	800ed7e <_printf_i+0x1f2>
 800ece8:	f04f 30ff 	mov.w	r0, #4294967295
 800ecec:	b004      	add	sp, #16
 800ecee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecf2:	6823      	ldr	r3, [r4, #0]
 800ecf4:	f043 0320 	orr.w	r3, r3, #32
 800ecf8:	6023      	str	r3, [r4, #0]
 800ecfa:	4833      	ldr	r0, [pc, #204]	@ (800edc8 <_printf_i+0x23c>)
 800ecfc:	2778      	movs	r7, #120	@ 0x78
 800ecfe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ed02:	6823      	ldr	r3, [r4, #0]
 800ed04:	6831      	ldr	r1, [r6, #0]
 800ed06:	061f      	lsls	r7, r3, #24
 800ed08:	f851 5b04 	ldr.w	r5, [r1], #4
 800ed0c:	d402      	bmi.n	800ed14 <_printf_i+0x188>
 800ed0e:	065f      	lsls	r7, r3, #25
 800ed10:	bf48      	it	mi
 800ed12:	b2ad      	uxthmi	r5, r5
 800ed14:	6031      	str	r1, [r6, #0]
 800ed16:	07d9      	lsls	r1, r3, #31
 800ed18:	bf44      	itt	mi
 800ed1a:	f043 0320 	orrmi.w	r3, r3, #32
 800ed1e:	6023      	strmi	r3, [r4, #0]
 800ed20:	b11d      	cbz	r5, 800ed2a <_printf_i+0x19e>
 800ed22:	2310      	movs	r3, #16
 800ed24:	e7ac      	b.n	800ec80 <_printf_i+0xf4>
 800ed26:	4827      	ldr	r0, [pc, #156]	@ (800edc4 <_printf_i+0x238>)
 800ed28:	e7e9      	b.n	800ecfe <_printf_i+0x172>
 800ed2a:	6823      	ldr	r3, [r4, #0]
 800ed2c:	f023 0320 	bic.w	r3, r3, #32
 800ed30:	6023      	str	r3, [r4, #0]
 800ed32:	e7f6      	b.n	800ed22 <_printf_i+0x196>
 800ed34:	4616      	mov	r6, r2
 800ed36:	e7bd      	b.n	800ecb4 <_printf_i+0x128>
 800ed38:	6833      	ldr	r3, [r6, #0]
 800ed3a:	6825      	ldr	r5, [r4, #0]
 800ed3c:	6961      	ldr	r1, [r4, #20]
 800ed3e:	1d18      	adds	r0, r3, #4
 800ed40:	6030      	str	r0, [r6, #0]
 800ed42:	062e      	lsls	r6, r5, #24
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	d501      	bpl.n	800ed4c <_printf_i+0x1c0>
 800ed48:	6019      	str	r1, [r3, #0]
 800ed4a:	e002      	b.n	800ed52 <_printf_i+0x1c6>
 800ed4c:	0668      	lsls	r0, r5, #25
 800ed4e:	d5fb      	bpl.n	800ed48 <_printf_i+0x1bc>
 800ed50:	8019      	strh	r1, [r3, #0]
 800ed52:	2300      	movs	r3, #0
 800ed54:	6123      	str	r3, [r4, #16]
 800ed56:	4616      	mov	r6, r2
 800ed58:	e7bc      	b.n	800ecd4 <_printf_i+0x148>
 800ed5a:	6833      	ldr	r3, [r6, #0]
 800ed5c:	1d1a      	adds	r2, r3, #4
 800ed5e:	6032      	str	r2, [r6, #0]
 800ed60:	681e      	ldr	r6, [r3, #0]
 800ed62:	6862      	ldr	r2, [r4, #4]
 800ed64:	2100      	movs	r1, #0
 800ed66:	4630      	mov	r0, r6
 800ed68:	f7f1 faca 	bl	8000300 <memchr>
 800ed6c:	b108      	cbz	r0, 800ed72 <_printf_i+0x1e6>
 800ed6e:	1b80      	subs	r0, r0, r6
 800ed70:	6060      	str	r0, [r4, #4]
 800ed72:	6863      	ldr	r3, [r4, #4]
 800ed74:	6123      	str	r3, [r4, #16]
 800ed76:	2300      	movs	r3, #0
 800ed78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed7c:	e7aa      	b.n	800ecd4 <_printf_i+0x148>
 800ed7e:	6923      	ldr	r3, [r4, #16]
 800ed80:	4632      	mov	r2, r6
 800ed82:	4649      	mov	r1, r9
 800ed84:	4640      	mov	r0, r8
 800ed86:	47d0      	blx	sl
 800ed88:	3001      	adds	r0, #1
 800ed8a:	d0ad      	beq.n	800ece8 <_printf_i+0x15c>
 800ed8c:	6823      	ldr	r3, [r4, #0]
 800ed8e:	079b      	lsls	r3, r3, #30
 800ed90:	d413      	bmi.n	800edba <_printf_i+0x22e>
 800ed92:	68e0      	ldr	r0, [r4, #12]
 800ed94:	9b03      	ldr	r3, [sp, #12]
 800ed96:	4298      	cmp	r0, r3
 800ed98:	bfb8      	it	lt
 800ed9a:	4618      	movlt	r0, r3
 800ed9c:	e7a6      	b.n	800ecec <_printf_i+0x160>
 800ed9e:	2301      	movs	r3, #1
 800eda0:	4632      	mov	r2, r6
 800eda2:	4649      	mov	r1, r9
 800eda4:	4640      	mov	r0, r8
 800eda6:	47d0      	blx	sl
 800eda8:	3001      	adds	r0, #1
 800edaa:	d09d      	beq.n	800ece8 <_printf_i+0x15c>
 800edac:	3501      	adds	r5, #1
 800edae:	68e3      	ldr	r3, [r4, #12]
 800edb0:	9903      	ldr	r1, [sp, #12]
 800edb2:	1a5b      	subs	r3, r3, r1
 800edb4:	42ab      	cmp	r3, r5
 800edb6:	dcf2      	bgt.n	800ed9e <_printf_i+0x212>
 800edb8:	e7eb      	b.n	800ed92 <_printf_i+0x206>
 800edba:	2500      	movs	r5, #0
 800edbc:	f104 0619 	add.w	r6, r4, #25
 800edc0:	e7f5      	b.n	800edae <_printf_i+0x222>
 800edc2:	bf00      	nop
 800edc4:	0800f2a9 	.word	0x0800f2a9
 800edc8:	0800f2ba 	.word	0x0800f2ba

0800edcc <memmove>:
 800edcc:	4288      	cmp	r0, r1
 800edce:	b510      	push	{r4, lr}
 800edd0:	eb01 0402 	add.w	r4, r1, r2
 800edd4:	d902      	bls.n	800eddc <memmove+0x10>
 800edd6:	4284      	cmp	r4, r0
 800edd8:	4623      	mov	r3, r4
 800edda:	d807      	bhi.n	800edec <memmove+0x20>
 800eddc:	1e43      	subs	r3, r0, #1
 800edde:	42a1      	cmp	r1, r4
 800ede0:	d008      	beq.n	800edf4 <memmove+0x28>
 800ede2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ede6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800edea:	e7f8      	b.n	800edde <memmove+0x12>
 800edec:	4402      	add	r2, r0
 800edee:	4601      	mov	r1, r0
 800edf0:	428a      	cmp	r2, r1
 800edf2:	d100      	bne.n	800edf6 <memmove+0x2a>
 800edf4:	bd10      	pop	{r4, pc}
 800edf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800edfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800edfe:	e7f7      	b.n	800edf0 <memmove+0x24>

0800ee00 <_sbrk_r>:
 800ee00:	b538      	push	{r3, r4, r5, lr}
 800ee02:	4d06      	ldr	r5, [pc, #24]	@ (800ee1c <_sbrk_r+0x1c>)
 800ee04:	2300      	movs	r3, #0
 800ee06:	4604      	mov	r4, r0
 800ee08:	4608      	mov	r0, r1
 800ee0a:	602b      	str	r3, [r5, #0]
 800ee0c:	f7f3 fa2a 	bl	8002264 <_sbrk>
 800ee10:	1c43      	adds	r3, r0, #1
 800ee12:	d102      	bne.n	800ee1a <_sbrk_r+0x1a>
 800ee14:	682b      	ldr	r3, [r5, #0]
 800ee16:	b103      	cbz	r3, 800ee1a <_sbrk_r+0x1a>
 800ee18:	6023      	str	r3, [r4, #0]
 800ee1a:	bd38      	pop	{r3, r4, r5, pc}
 800ee1c:	2408a19c 	.word	0x2408a19c

0800ee20 <memcpy>:
 800ee20:	440a      	add	r2, r1
 800ee22:	4291      	cmp	r1, r2
 800ee24:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee28:	d100      	bne.n	800ee2c <memcpy+0xc>
 800ee2a:	4770      	bx	lr
 800ee2c:	b510      	push	{r4, lr}
 800ee2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee36:	4291      	cmp	r1, r2
 800ee38:	d1f9      	bne.n	800ee2e <memcpy+0xe>
 800ee3a:	bd10      	pop	{r4, pc}

0800ee3c <_realloc_r>:
 800ee3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee40:	4680      	mov	r8, r0
 800ee42:	4615      	mov	r5, r2
 800ee44:	460c      	mov	r4, r1
 800ee46:	b921      	cbnz	r1, 800ee52 <_realloc_r+0x16>
 800ee48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee4c:	4611      	mov	r1, r2
 800ee4e:	f7ff bc4b 	b.w	800e6e8 <_malloc_r>
 800ee52:	b92a      	cbnz	r2, 800ee60 <_realloc_r+0x24>
 800ee54:	f7ff fbdc 	bl	800e610 <_free_r>
 800ee58:	2400      	movs	r4, #0
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee60:	f000 f81a 	bl	800ee98 <_malloc_usable_size_r>
 800ee64:	4285      	cmp	r5, r0
 800ee66:	4606      	mov	r6, r0
 800ee68:	d802      	bhi.n	800ee70 <_realloc_r+0x34>
 800ee6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ee6e:	d8f4      	bhi.n	800ee5a <_realloc_r+0x1e>
 800ee70:	4629      	mov	r1, r5
 800ee72:	4640      	mov	r0, r8
 800ee74:	f7ff fc38 	bl	800e6e8 <_malloc_r>
 800ee78:	4607      	mov	r7, r0
 800ee7a:	2800      	cmp	r0, #0
 800ee7c:	d0ec      	beq.n	800ee58 <_realloc_r+0x1c>
 800ee7e:	42b5      	cmp	r5, r6
 800ee80:	462a      	mov	r2, r5
 800ee82:	4621      	mov	r1, r4
 800ee84:	bf28      	it	cs
 800ee86:	4632      	movcs	r2, r6
 800ee88:	f7ff ffca 	bl	800ee20 <memcpy>
 800ee8c:	4621      	mov	r1, r4
 800ee8e:	4640      	mov	r0, r8
 800ee90:	f7ff fbbe 	bl	800e610 <_free_r>
 800ee94:	463c      	mov	r4, r7
 800ee96:	e7e0      	b.n	800ee5a <_realloc_r+0x1e>

0800ee98 <_malloc_usable_size_r>:
 800ee98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee9c:	1f18      	subs	r0, r3, #4
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	bfbc      	itt	lt
 800eea2:	580b      	ldrlt	r3, [r1, r0]
 800eea4:	18c0      	addlt	r0, r0, r3
 800eea6:	4770      	bx	lr

0800eea8 <_init>:
 800eea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeaa:	bf00      	nop
 800eeac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eeae:	bc08      	pop	{r3}
 800eeb0:	469e      	mov	lr, r3
 800eeb2:	4770      	bx	lr

0800eeb4 <_fini>:
 800eeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeb6:	bf00      	nop
 800eeb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eeba:	bc08      	pop	{r3}
 800eebc:	469e      	mov	lr, r3
 800eebe:	4770      	bx	lr
