
digital_watch_v02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012548  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  080127f8  080127f8  000137f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012c04  08012c04  00013c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012c0c  08012c0c  00013c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08012c10  08012c10  00013c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  24000000  08012c14  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000bc444  24000068  08012c7c  00014068  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  240bc4ac  08012c7c  000144ac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00014068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020626  00000000  00000000  00014096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044e6  00000000  00000000  000346bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017f8  00000000  00000000  00038ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001247  00000000  00000000  0003a3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035cad  00000000  00000000  0003b5e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024ee1  00000000  00000000  00071294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00147802  00000000  00000000  00096175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001dd977  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000067d0  00000000  00000000  001dd9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  001e418c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000068 	.word	0x24000068
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080127e0 	.word	0x080127e0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	080127e0 	.word	0x080127e0

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__AVI_SearchID>:
  * @param  size:
  * @param  id:
  * @retval ID
  */
uint32_t __AVI_SearchID(uint8_t* buf,  uint32_t size, uint8_t *id)
{
 8000390:	b480      	push	{r7}
 8000392:	b087      	sub	sp, #28
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
 uint16_t i;
  size-=4;
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	3b04      	subs	r3, #4
 80003a0:	60bb      	str	r3, [r7, #8]
  for(i=0;i<size;i++)
 80003a2:	2300      	movs	r3, #0
 80003a4:	82fb      	strh	r3, [r7, #22]
 80003a6:	e02a      	b.n	80003fe <__AVI_SearchID+0x6e>
  {
    if(buf[i] == id[0])
 80003a8:	8afb      	ldrh	r3, [r7, #22]
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	4413      	add	r3, r2
 80003ae:	781a      	ldrb	r2, [r3, #0]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	429a      	cmp	r2, r3
 80003b6:	d11f      	bne.n	80003f8 <__AVI_SearchID+0x68>
      if(buf[i+1] == id[1])
 80003b8:	8afb      	ldrh	r3, [r7, #22]
 80003ba:	3301      	adds	r3, #1
 80003bc:	68fa      	ldr	r2, [r7, #12]
 80003be:	4413      	add	r3, r2
 80003c0:	781a      	ldrb	r2, [r3, #0]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	3301      	adds	r3, #1
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d115      	bne.n	80003f8 <__AVI_SearchID+0x68>
        if(buf[i+2] == id[2])  
 80003cc:	8afb      	ldrh	r3, [r7, #22]
 80003ce:	3302      	adds	r3, #2
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	4413      	add	r3, r2
 80003d4:	781a      	ldrb	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3302      	adds	r3, #2
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d10b      	bne.n	80003f8 <__AVI_SearchID+0x68>
          if(buf[i+3] == id[3])
 80003e0:	8afb      	ldrh	r3, [r7, #22]
 80003e2:	3303      	adds	r3, #3
 80003e4:	68fa      	ldr	r2, [r7, #12]
 80003e6:	4413      	add	r3, r2
 80003e8:	781a      	ldrb	r2, [r3, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	3303      	adds	r3, #3
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d101      	bne.n	80003f8 <__AVI_SearchID+0x68>
            return i;  
 80003f4:	8afb      	ldrh	r3, [r7, #22]
 80003f6:	e007      	b.n	8000408 <__AVI_SearchID+0x78>
  for(i=0;i<size;i++)
 80003f8:	8afb      	ldrh	r3, [r7, #22]
 80003fa:	3301      	adds	r3, #1
 80003fc:	82fb      	strh	r3, [r7, #22]
 80003fe:	8afb      	ldrh	r3, [r7, #22]
 8000400:	68ba      	ldr	r2, [r7, #8]
 8000402:	429a      	cmp	r2, r3
 8000404:	d8d0      	bhi.n	80003a8 <__AVI_SearchID+0x18>
  }
  return 0;    
 8000406:	2300      	movs	r3, #0
}
 8000408:	4618      	mov	r0, r3
 800040a:	371c      	adds	r7, #28
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <__AVI_GetStreamInfo>:
  * @param  havi: AVI handle
  * @param  buf:   
  * @retval AVI status
  */
AVISTATUS __AVI_GetStreamInfo( AVI_CONTEXT * pavi, uint8_t* buf)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
  
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	3302      	adds	r3, #2
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	021b      	lsls	r3, r3, #8
 8000426:	b21a      	sxth	r2, r3
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	3303      	adds	r3, #3
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	b21b      	sxth	r3, r3
 8000430:	4313      	orrs	r3, r2
 8000432:	b21b      	sxth	r3, r3
 8000434:	b29a      	uxth	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	83da      	strh	r2, [r3, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	3304      	adds	r3, #4
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	461a      	mov	r2, r3
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	3305      	adds	r3, #5
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	021b      	lsls	r3, r3, #8
 800044a:	431a      	orrs	r2, r3
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	3306      	adds	r3, #6
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	041b      	lsls	r3, r3, #16
 8000454:	431a      	orrs	r2, r3
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	3307      	adds	r3, #7
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	061b      	lsls	r3, r3, #24
 800045e:	4313      	orrs	r3, r2
 8000460:	461a      	mov	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	621a      	str	r2, [r3, #32]
  
  if(pavi->aviInfo.StreamSize%2)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	6a1b      	ldr	r3, [r3, #32]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	2b00      	cmp	r3, #0
 8000470:	d004      	beq.n	800047c <__AVI_GetStreamInfo+0x68>
    pavi->aviInfo.StreamSize++;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6a1b      	ldr	r3, [r3, #32]
 8000476:	1c5a      	adds	r2, r3, #1
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	621a      	str	r2, [r3, #32]
  
  if((pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG) || (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG))
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	8bdb      	ldrh	r3, [r3, #30]
 8000480:	f246 4263 	movw	r2, #25699	@ 0x6463
 8000484:	4293      	cmp	r3, r2
 8000486:	d005      	beq.n	8000494 <__AVI_GetStreamInfo+0x80>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	8bdb      	ldrh	r3, [r3, #30]
 800048c:	f247 7262 	movw	r2, #30562	@ 0x7762
 8000490:	4293      	cmp	r3, r2
 8000492:	d101      	bne.n	8000498 <__AVI_GetStreamInfo+0x84>
  {
    return AVI_OK;
 8000494:	2300      	movs	r3, #0
 8000496:	e000      	b.n	800049a <__AVI_GetStreamInfo+0x86>
  }
  
  return AVI_STREAM_ERR;  
 8000498:	230b      	movs	r3, #11
}
 800049a:	4618      	mov	r0, r3
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
	...

080004a8 <__AVI_Init>:
  * @param  buf:
  * @param  size: AVI file size     
  * @retval AVI status
  */
AVISTATUS __AVI_Init( AVI_CONTEXT * pavi, uint8_t *buf, uint32_t size)     
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08e      	sub	sp, #56	@ 0x38
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
  uint16_t offset;
  uint8_t *tbuf;
  AVISTATUS   res = AVI_OK;
 80004b4:	2300      	movs	r3, #0
 80004b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  STRH_HEADER *strhheader; 
  
  STRF_BMPHEADER *bmpheader; 
  STRF_WAVHEADER *wavheader; 
  
  tbuf=buf;
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	633b      	str	r3, [r7, #48]	@ 0x30
  aviheader=(AVI_HEADER*)buf; 
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(aviheader->RiffID != AVI_RIFF_ID)
 80004c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a87      	ldr	r2, [pc, #540]	@ (80006e4 <__AVI_Init+0x23c>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d001      	beq.n	80004d0 <__AVI_Init+0x28>
  {
    return AVI_RIFF_ERR;
 80004cc:	2301      	movs	r3, #1
 80004ce:	e170      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  if(aviheader->AviID != AVI_AVI_ID)
 80004d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	4a84      	ldr	r2, [pc, #528]	@ (80006e8 <__AVI_Init+0x240>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d001      	beq.n	80004de <__AVI_Init+0x36>
  {
    return AVI_AVI_ERR;  
 80004da:	2302      	movs	r3, #2
 80004dc:	e169      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(AVI_HEADER);            
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	330c      	adds	r3, #12
 80004e2:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf);
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 80004e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a7f      	ldr	r2, [pc, #508]	@ (80006ec <__AVI_Init+0x244>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d001      	beq.n	80004f6 <__AVI_Init+0x4e>
  {
    return AVI_LIST_ERR;
 80004f2:	2303      	movs	r3, #3
 80004f4:	e15d      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_HDRL_ID)
 80004f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	4a7d      	ldr	r2, [pc, #500]	@ (80006f0 <__AVI_Init+0x248>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d001      	beq.n	8000504 <__AVI_Init+0x5c>
  {
    return AVI_HDRL_ERR;
 8000500:	2304      	movs	r3, #4
 8000502:	e156      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(LIST_HEADER);            
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	330c      	adds	r3, #12
 8000508:	60bb      	str	r3, [r7, #8]
  avihheader=(AVIH_HEADER*)(buf);                                   
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	627b      	str	r3, [r7, #36]	@ 0x24
  if(avihheader->BlockID != AVI_AVIH_ID)
 800050e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a78      	ldr	r2, [pc, #480]	@ (80006f4 <__AVI_Init+0x24c>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d001      	beq.n	800051c <__AVI_Init+0x74>
  {
    return AVI_AVIH_ERR;
 8000518:	2305      	movs	r3, #5
 800051a:	e14a      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 800051c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800051e:	689a      	ldr	r2, [r3, #8]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	601a      	str	r2, [r3, #0]
  pavi->aviInfo.TotalFrame=avihheader->TotalFrame;          
 8000524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000526:	699a      	ldr	r2, [r3, #24]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	605a      	str	r2, [r3, #4]
  buf+=avihheader->BlockSize+8;            
 800052c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	3308      	adds	r3, #8
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	4413      	add	r3, r2
 8000536:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf); 
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800053c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a6a      	ldr	r2, [pc, #424]	@ (80006ec <__AVI_Init+0x244>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d001      	beq.n	800054a <__AVI_Init+0xa2>
  {
    return AVI_LIST_ERR;
 8000546:	2303      	movs	r3, #3
 8000548:	e133      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_STRL_ID)
 800054a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	4a6a      	ldr	r2, [pc, #424]	@ (80006f8 <__AVI_Init+0x250>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d001      	beq.n	8000558 <__AVI_Init+0xb0>
  {
    return AVI_STRL_ERR;
 8000554:	2306      	movs	r3, #6
 8000556:	e12c      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  strhheader=(STRH_HEADER*)(buf+12);                                
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	330c      	adds	r3, #12
 800055c:	623b      	str	r3, [r7, #32]
  if(strhheader->BlockID != AVI_STRH_ID)
 800055e:	6a3b      	ldr	r3, [r7, #32]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a66      	ldr	r2, [pc, #408]	@ (80006fc <__AVI_Init+0x254>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d001      	beq.n	800056c <__AVI_Init+0xc4>
  {
    return AVI_STRH_ERR;
 8000568:	2307      	movs	r3, #7
 800056a:	e122      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 800056c:	6a3b      	ldr	r3, [r7, #32]
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	4a63      	ldr	r2, [pc, #396]	@ (8000700 <__AVI_Init+0x258>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d16a      	bne.n	800064c <__AVI_Init+0x1a4>
  {
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 8000576:	6a3b      	ldr	r3, [r7, #32]
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	4a62      	ldr	r2, [pc, #392]	@ (8000704 <__AVI_Init+0x25c>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d001      	beq.n	8000584 <__AVI_Init+0xdc>
    {
      return AVI_FORMAT_ERR;
 8000580:	230a      	movs	r3, #10
 8000582:	e116      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 8000584:	4a60      	ldr	r2, [pc, #384]	@ (8000708 <__AVI_Init+0x260>)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 800058a:	4a60      	ldr	r2, [pc, #384]	@ (800070c <__AVI_Init+0x264>)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	629a      	str	r2, [r3, #40]	@ 0x28
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 8000590:	6a3b      	ldr	r3, [r7, #32]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	3314      	adds	r3, #20
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	4413      	add	r3, r2
 800059a:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800059c:	69bb      	ldr	r3, [r7, #24]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a5b      	ldr	r2, [pc, #364]	@ (8000710 <__AVI_Init+0x268>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d001      	beq.n	80005aa <__AVI_Init+0x102>
    {
      return AVI_STRF_ERR;
 80005a6:	2308      	movs	r3, #8
 80005a8:	e103      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 80005aa:	69bb      	ldr	r3, [r7, #24]
 80005ac:	68da      	ldr	r2, [r3, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height; 
 80005b2:	69bb      	ldr	r3, [r7, #24]
 80005b4:	691a      	ldr	r2, [r3, #16]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	611a      	str	r2, [r3, #16]
    buf+=listheader->BlockSize+8;          
 80005ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	3308      	adds	r3, #8
 80005c0:	68ba      	ldr	r2, [r7, #8]
 80005c2:	4413      	add	r3, r2
 80005c4:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 80005ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a47      	ldr	r2, [pc, #284]	@ (80006ec <__AVI_Init+0x244>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d009      	beq.n	80005e8 <__AVI_Init+0x140>
    {
      pavi->aviInfo.SampleRate=0;          
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=0;          
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2200      	movs	r2, #0
 80005de:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=0;          
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2200      	movs	r2, #0
 80005e4:	839a      	strh	r2, [r3, #28]
 80005e6:	e0b7      	b.n	8000758 <__AVI_Init+0x2b0>
      
    }else
    {      
      if(listheader->ListType != AVI_STRL_ID)
 80005e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	4a42      	ldr	r2, [pc, #264]	@ (80006f8 <__AVI_Init+0x250>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d001      	beq.n	80005f6 <__AVI_Init+0x14e>
      {
        return AVI_STRL_ERR;    
 80005f2:	2306      	movs	r3, #6
 80005f4:	e0dd      	b.n	80007b2 <__AVI_Init+0x30a>
      }
      
      strhheader=(STRH_HEADER*)(buf+12);
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	330c      	adds	r3, #12
 80005fa:	623b      	str	r3, [r7, #32]
      if(strhheader->BlockID != AVI_STRH_ID)
 80005fc:	6a3b      	ldr	r3, [r7, #32]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a3e      	ldr	r2, [pc, #248]	@ (80006fc <__AVI_Init+0x254>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d001      	beq.n	800060a <__AVI_Init+0x162>
      {
        return AVI_STRH_ERR;
 8000606:	2307      	movs	r3, #7
 8000608:	e0d3      	b.n	80007b2 <__AVI_Init+0x30a>
      }
      
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 800060a:	6a3b      	ldr	r3, [r7, #32]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	4a41      	ldr	r2, [pc, #260]	@ (8000714 <__AVI_Init+0x26c>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d001      	beq.n	8000618 <__AVI_Init+0x170>
      {
        return AVI_FORMAT_ERR;
 8000614:	230a      	movs	r3, #10
 8000616:	e0cc      	b.n	80007b2 <__AVI_Init+0x30a>
      }
      
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 8000618:	6a3b      	ldr	r3, [r7, #32]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	3314      	adds	r3, #20
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	4413      	add	r3, r2
 8000622:	61fb      	str	r3, [r7, #28]
      if(wavheader->BlockID != AVI_STRF_ID)
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a39      	ldr	r2, [pc, #228]	@ (8000710 <__AVI_Init+0x268>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d001      	beq.n	8000632 <__AVI_Init+0x18a>
      {
        return AVI_STRF_ERR;
 800062e:	2308      	movs	r3, #8
 8000630:	e0bf      	b.n	80007b2 <__AVI_Init+0x30a>
      }
      
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	68da      	ldr	r2, [r3, #12]
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	895a      	ldrh	r2, [r3, #10]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	891a      	ldrh	r2, [r3, #8]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	839a      	strh	r2, [r3, #28]
 800064a:	e085      	b.n	8000758 <__AVI_Init+0x2b0>
    }
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 800064c:	6a3b      	ldr	r3, [r7, #32]
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	4a30      	ldr	r2, [pc, #192]	@ (8000714 <__AVI_Init+0x26c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	f040 8080 	bne.w	8000758 <__AVI_Init+0x2b0>
  { 
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 8000658:	4a2f      	ldr	r2, [pc, #188]	@ (8000718 <__AVI_Init+0x270>)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 800065e:	4a2f      	ldr	r2, [pc, #188]	@ (800071c <__AVI_Init+0x274>)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	629a      	str	r2, [r3, #40]	@ 0x28
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 8000664:	6a3b      	ldr	r3, [r7, #32]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	3314      	adds	r3, #20
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	4413      	add	r3, r2
 800066e:	61fb      	str	r3, [r7, #28]
    if(wavheader->BlockID != AVI_STRF_ID)
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a26      	ldr	r2, [pc, #152]	@ (8000710 <__AVI_Init+0x268>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d001      	beq.n	800067e <__AVI_Init+0x1d6>
    {
      return AVI_STRF_ERR;
 800067a:	2308      	movs	r3, #8
 800067c:	e099      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	68da      	ldr	r2, [r3, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	615a      	str	r2, [r3, #20]
    pavi->aviInfo.Channels=wavheader->Channels;        
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	895a      	ldrh	r2, [r3, #10]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	831a      	strh	r2, [r3, #24]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	891a      	ldrh	r2, [r3, #8]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	839a      	strh	r2, [r3, #28]
    buf+=listheader->BlockSize+8;          
 8000696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	3308      	adds	r3, #8
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	4413      	add	r3, r2
 80006a0:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 80006a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a10      	ldr	r2, [pc, #64]	@ (80006ec <__AVI_Init+0x244>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d001      	beq.n	80006b4 <__AVI_Init+0x20c>
    {
      return AVI_LIST_ERR;  
 80006b0:	2303      	movs	r3, #3
 80006b2:	e07e      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    if(listheader->ListType != AVI_STRL_ID)
 80006b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	4a0f      	ldr	r2, [pc, #60]	@ (80006f8 <__AVI_Init+0x250>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d001      	beq.n	80006c2 <__AVI_Init+0x21a>
    {
      return AVI_STRL_ERR;  
 80006be:	2306      	movs	r3, #6
 80006c0:	e077      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    strhheader=(STRH_HEADER*)(buf+12);
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	330c      	adds	r3, #12
 80006c6:	623b      	str	r3, [r7, #32]
    if(strhheader->BlockID != AVI_STRH_ID)
 80006c8:	6a3b      	ldr	r3, [r7, #32]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a0b      	ldr	r2, [pc, #44]	@ (80006fc <__AVI_Init+0x254>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d001      	beq.n	80006d6 <__AVI_Init+0x22e>
    {
      return AVI_STRH_ERR;
 80006d2:	2307      	movs	r3, #7
 80006d4:	e06d      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 80006d6:	6a3b      	ldr	r3, [r7, #32]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	4a09      	ldr	r2, [pc, #36]	@ (8000700 <__AVI_Init+0x258>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d01f      	beq.n	8000720 <__AVI_Init+0x278>
    {
      return AVI_FORMAT_ERR;
 80006e0:	230a      	movs	r3, #10
 80006e2:	e066      	b.n	80007b2 <__AVI_Init+0x30a>
 80006e4:	46464952 	.word	0x46464952
 80006e8:	20495641 	.word	0x20495641
 80006ec:	5453494c 	.word	0x5453494c
 80006f0:	6c726468 	.word	0x6c726468
 80006f4:	68697661 	.word	0x68697661
 80006f8:	6c727473 	.word	0x6c727473
 80006fc:	68727473 	.word	0x68727473
 8000700:	73646976 	.word	0x73646976
 8000704:	47504a4d 	.word	0x47504a4d
 8000708:	080127f8 	.word	0x080127f8
 800070c:	08012810 	.word	0x08012810
 8000710:	66727473 	.word	0x66727473
 8000714:	73647561 	.word	0x73647561
 8000718:	08012800 	.word	0x08012800
 800071c:	08012808 	.word	0x08012808
    }
    
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 8000720:	6a3b      	ldr	r3, [r7, #32]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	3314      	adds	r3, #20
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	4413      	add	r3, r2
 800072a:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a22      	ldr	r2, [pc, #136]	@ (80007bc <__AVI_Init+0x314>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d001      	beq.n	800073a <__AVI_Init+0x292>
    {
      return AVI_STRF_ERR;  
 8000736:	2308      	movs	r3, #8
 8000738:	e03b      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	4a20      	ldr	r2, [pc, #128]	@ (80007c0 <__AVI_Init+0x318>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d001      	beq.n	8000748 <__AVI_Init+0x2a0>
    {
      return AVI_FORMAT_ERR;
 8000744:	230a      	movs	r3, #10
 8000746:	e034      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	68da      	ldr	r2, [r3, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height;   
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	691a      	ldr	r2, [r3, #16]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	611a      	str	r2, [r3, #16]
  }
  offset= __AVI_SearchID(tbuf,size,(uint8_t*)"movi");
 8000758:	4a1a      	ldr	r2, [pc, #104]	@ (80007c4 <__AVI_Init+0x31c>)
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800075e:	f7ff fe17 	bl	8000390 <__AVI_SearchID>
 8000762:	4603      	mov	r3, r0
 8000764:	82fb      	strh	r3, [r7, #22]
  if(offset == 0)
 8000766:	8afb      	ldrh	r3, [r7, #22]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d101      	bne.n	8000770 <__AVI_Init+0x2c8>
  {
    return AVI_MOVI_ERR;
 800076c:	2309      	movs	r3, #9
 800076e:	e020      	b.n	80007b2 <__AVI_Init+0x30a>
  }
  
  if(pavi->aviInfo.SampleRate)
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d01a      	beq.n	80007ae <__AVI_Init+0x306>
  {
    tbuf+=offset;
 8000778:	8afb      	ldrh	r3, [r7, #22]
 800077a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800077c:	4413      	add	r3, r2
 800077e:	633b      	str	r3, [r7, #48]	@ 0x30
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000784:	461a      	mov	r2, r3
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800078a:	f7ff fe01 	bl	8000390 <__AVI_SearchID>
 800078e:	4603      	mov	r3, r0
 8000790:	82fb      	strh	r3, [r7, #22]
    if(offset == 0)
 8000792:	8afb      	ldrh	r3, [r7, #22]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d101      	bne.n	800079c <__AVI_Init+0x2f4>
    {
      return AVI_STREAM_ERR;
 8000798:	230b      	movs	r3, #11
 800079a:	e00a      	b.n	80007b2 <__AVI_Init+0x30a>
    }
    
    tbuf+=offset+4;
 800079c:	8afb      	ldrh	r3, [r7, #22]
 800079e:	3304      	adds	r3, #4
 80007a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80007a2:	4413      	add	r3, r2
 80007a4:	633b      	str	r3, [r7, #48]	@ 0x30
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 80007a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007a8:	881a      	ldrh	r2, [r3, #0]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	835a      	strh	r2, [r3, #26]
  }
  
  return res;
 80007ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3738      	adds	r7, #56	@ 0x38
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	66727473 	.word	0x66727473
 80007c0:	47504a4d 	.word	0x47504a4d
 80007c4:	08012818 	.word	0x08012818

080007c8 <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT * pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	603b      	str	r3, [r7, #0]
  uint32_t readSize= 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  
  pavi->pVideoBuffer = pVideoBuffer;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	635a      	str	r2, [r3, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	639a      	str	r2, [r3, #56]	@ 0x38

  pavi->pAudioBuffer = pAudioBuffer;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	6a3a      	ldr	r2, [r7, #32]
 80007ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  pavi->AudioBufferSize = AudioBufferSize;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007f0:	641a      	str	r2, [r3, #64]	@ 0x40
  
  f_lseek(file, 0 );
 80007f2:	2100      	movs	r1, #0
 80007f4:	68b8      	ldr	r0, [r7, #8]
 80007f6:	f011 f8d9 	bl	80119ac <f_lseek>
  
  f_read(file, pavi->pVideoBuffer, VideoBufferSize,(UINT*) &readSize );
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	683a      	ldr	r2, [r7, #0]
 8000804:	68b8      	ldr	r0, [r7, #8]
 8000806:	f010 fd75 	bl	80112f4 <f_read>
  if(readSize != VideoBufferSize)
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	429a      	cmp	r2, r3
 8000810:	d001      	beq.n	8000816 <AVI_ParserInit+0x4e>
  {
    return 1;
 8000812:	2301      	movs	r3, #1
 8000814:	e013      	b.n	800083e <AVI_ParserInit+0x76>
  }
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800081a:	683a      	ldr	r2, [r7, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	68f8      	ldr	r0, [r7, #12]
 8000820:	f7ff fe42 	bl	80004a8 <__AVI_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <AVI_ParserInit+0x66>
  {
    return 1;    
 800082a:	2301      	movs	r3, #1
 800082c:	e007      	b.n	800083e <AVI_ParserInit+0x76>
  }

  pavi->FileSize= f_size(file);
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	68da      	ldr	r2, [r3, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	645a      	str	r2, [r3, #68]	@ 0x44
  pavi->CurrentImage=0;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	2200      	movs	r2, #0
 800083a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  return  0;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT * pavi, FIL *file, uint8_t skipFlag)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	4613      	mov	r3, r2
 8000854:	71fb      	strb	r3, [r7, #7]
  uint32_t  offset ;
  uint32_t readSize = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  
  if(pavi->CurrentImage== 0 )
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800085e:	2b00      	cmp	r3, #0
 8000860:	d124      	bne.n	80008ac <AVI_GetFrame+0x64>
  {
    
    f_lseek(file, 0 ); /* Go to the file start */
 8000862:	2100      	movs	r1, #0
 8000864:	68b8      	ldr	r0, [r7, #8]
 8000866:	f011 f8a1 	bl	80119ac <f_lseek>
    /* Read data*/
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize);
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	68b8      	ldr	r0, [r7, #8]
 8000878:	f010 fd3c 	bl	80112f4 <f_read>
    
    /* Check for "movi" tag */
    offset = __AVI_SearchID(pavi->pVideoBuffer,pavi->VideoBufferSize,(uint8_t*)"movi");
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000884:	4a49      	ldr	r2, [pc, #292]	@ (80009ac <AVI_GetFrame+0x164>)
 8000886:	4619      	mov	r1, r3
 8000888:	f7ff fd82 	bl	8000390 <__AVI_SearchID>
 800088c:	6178      	str	r0, [r7, #20]
    /* Read first Frame info*/
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	3304      	adds	r3, #4
 8000896:	4413      	add	r3, r2
 8000898:	4619      	mov	r1, r3
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f7ff fdba 	bl	8000414 <__AVI_GetStreamInfo>
    /* go to the first frame offset in the avi file*/
    f_lseek(file, offset + 12 );
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	330c      	adds	r3, #12
 80008a4:	4619      	mov	r1, r3
 80008a6:	68b8      	ldr	r0, [r7, #8]
 80008a8:	f011 f880 	bl	80119ac <f_lseek>
    
  }

  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	8bdb      	ldrh	r3, [r3, #30]
 80008b0:	f246 4263 	movw	r2, #25699	@ 0x6463
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d158      	bne.n	800096a <AVI_GetFrame+0x122>
  {
    /* the Frame is a Video Frame */
       
	if(skipFlag == 1)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d11b      	bne.n	80008f6 <AVI_GetFrame+0xae>
	{

		/* Get the current frame size */
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	6a1a      	ldr	r2, [r3, #32]
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	631a      	str	r2, [r3, #48]	@ 0x30

		f_lseek(file, f_tell(file) + pavi->FrameSize);
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	699a      	ldr	r2, [r3, #24]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4413      	add	r3, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	68b8      	ldr	r0, [r7, #8]
 80008d4:	f011 f86a 	bl	80119ac <f_lseek>

	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	2208      	movs	r2, #8
 80008e2:	68b8      	ldr	r0, [r7, #8]
 80008e4:	f010 fd06 	bl	80112f4 <f_read>

	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ec:	4619      	mov	r1, r3
 80008ee:	68f8      	ldr	r0, [r7, #12]
 80008f0:	f7ff fd90 	bl	8000414 <__AVI_GetStreamInfo>
 80008f4:	e037      	b.n	8000966 <AVI_GetFrame+0x11e>

	}
	else if(skipFlag == 2)
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d11c      	bne.n	8000936 <AVI_GetFrame+0xee>
	{

		f_lseek(file, f_tell(file) - pavi->FrameSize - 8 - 8);
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	699a      	ldr	r2, [r3, #24]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	3b10      	subs	r3, #16
 8000908:	4619      	mov	r1, r3
 800090a:	68b8      	ldr	r0, [r7, #8]
 800090c:	f011 f84e 	bl	80119ac <f_lseek>

	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	2208      	movs	r2, #8
 800091a:	68b8      	ldr	r0, [r7, #8]
 800091c:	f010 fcea 	bl	80112f4 <f_read>

	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000924:	4619      	mov	r1, r3
 8000926:	68f8      	ldr	r0, [r7, #12]
 8000928:	f7ff fd74 	bl	8000414 <__AVI_GetStreamInfo>

		// Get the previous frame size
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	6a1a      	ldr	r2, [r3, #32]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	631a      	str	r2, [r3, #48]	@ 0x30
 8000934:	e017      	b.n	8000966 <AVI_GetFrame+0x11e>
	}
	else
	{

		/* Get the current frame size */
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	6a1a      	ldr	r2, [r3, #32]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Read The current frame + the header of the next frame (8 bytes) */
		f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f103 0208 	add.w	r2, r3, #8
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	68b8      	ldr	r0, [r7, #8]
 8000950:	f010 fcd0 	bl	80112f4 <f_read>

		/* Get the info of the next frame */
		__AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	6a1b      	ldr	r3, [r3, #32]
 800095c:	4413      	add	r3, r2
 800095e:	4619      	mov	r1, r3
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	f7ff fd57 	bl	8000414 <__AVI_GetStreamInfo>
    	/* Return VIDEO frame */

	}
    
    return AVI_VIDEO_FRAME;
 8000966:	2301      	movs	r3, #1
 8000968:	e01c      	b.n	80009a4 <AVI_GetFrame+0x15c>
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	8bdb      	ldrh	r3, [r3, #30]
 800096e:	f247 7262 	movw	r2, #30562	@ 0x7762
 8000972:	4293      	cmp	r3, r2
 8000974:	d115      	bne.n	80009a2 <AVI_GetFrame+0x15a>
  { /* the Frame is an Audio Frame */
    
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f103 0208 	add.w	r2, r3, #8
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	68b8      	ldr	r0, [r7, #8]
 8000988:	f010 fcb4 	bl	80112f4 <f_read>

    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	6a1b      	ldr	r3, [r3, #32]
 8000994:	4413      	add	r3, r2
 8000996:	4619      	mov	r1, r3
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f7ff fd3b 	bl	8000414 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
 800099e:	2302      	movs	r3, #2
 80009a0:	e000      	b.n	80009a4 <AVI_GetFrame+0x15c>
    
  }
  
  return 0;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	08012818 	.word	0x08012818

080009b0 <GC9A01_set_reset>:
uint8_t spi_dma_not_ready = 0;

//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d105      	bne.n	80009cc <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2104      	movs	r1, #4
 80009c4:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <GC9A01_set_reset+0x30>)
 80009c6:	f005 fa93 	bl	8005ef0 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 80009ca:	e004      	b.n	80009d6 <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2104      	movs	r1, #4
 80009d0:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <GC9A01_set_reset+0x30>)
 80009d2:	f005 fa8d 	bl	8005ef0 <HAL_GPIO_WritePin>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	58020400 	.word	0x58020400

080009e4 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d105      	bne.n	8000a00 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2102      	movs	r1, #2
 80009f8:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <GC9A01_set_data_command+0x30>)
 80009fa:	f005 fa79 	bl	8005ef0 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 80009fe:	e004      	b.n	8000a0a <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2102      	movs	r1, #2
 8000a04:	4803      	ldr	r0, [pc, #12]	@ (8000a14 <GC9A01_set_data_command+0x30>)
 8000a06:	f005 fa73 	bl	8005ef0 <HAL_GPIO_WritePin>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	58020400 	.word	0x58020400

08000a18 <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
#ifdef DMA_MODE
	while(spi_dma_not_ready);
#endif
    if (val==0) {
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d105      	bne.n	8000a34 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4806      	ldr	r0, [pc, #24]	@ (8000a48 <GC9A01_set_chip_select+0x30>)
 8000a2e:	f005 fa5f 	bl	8005ef0 <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 8000a32:	e004      	b.n	8000a3e <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	2101      	movs	r1, #1
 8000a38:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <GC9A01_set_chip_select+0x30>)
 8000a3a:	f005 fa59 	bl	8005ef0 <HAL_GPIO_WritePin>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	58020400 	.word	0x58020400

08000a4c <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
#ifdef DMA_MODE
	while(spi_dma_not_ready);
#endif
    GC9A01_set_data_command(OFF);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff ffc4 	bl	80009e4 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff ffdb 	bl	8000a18 <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	2101      	movs	r1, #1
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fac4 	bl	8000ff4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff ffd3 	bl	8000a18 <GC9A01_set_chip_select>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	6039      	str	r1, [r7, #0]
#ifdef DMA_MODE
	while(spi_dma_not_ready);
#endif
    GC9A01_set_data_command(ON);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f7ff ffad 	bl	80009e4 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff ffc4 	bl	8000a18 <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	4619      	mov	r1, r3
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f000 faac 	bl	8000ff4 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f7ff ffbb 	bl	8000a18 <GC9A01_set_chip_select>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000ab4:	1dfb      	adds	r3, r7, #7
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ffde 	bl	8000a7a <GC9A01_write_data>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <GC9A01_init>:
void GC9A01_write_continue(uint8_t *data, size_t len) {
    GC9A01_write_command(MEM_WR_CONT);
    GC9A01_write_data(data, len);
}

void GC9A01_init(void) {
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 8000aca:	2001      	movs	r0, #1
 8000acc:	f7ff ffa4 	bl	8000a18 <GC9A01_set_chip_select>
    HAL_Delay(5);
 8000ad0:	2005      	movs	r0, #5
 8000ad2:	f002 fc55 	bl	8003380 <HAL_Delay>
    GC9A01_set_reset(OFF);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff ff6a 	bl	80009b0 <GC9A01_set_reset>
    HAL_Delay(10);
 8000adc:	200a      	movs	r0, #10
 8000ade:	f002 fc4f 	bl	8003380 <HAL_Delay>
    GC9A01_set_reset(ON);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f7ff ff64 	bl	80009b0 <GC9A01_set_reset>
    HAL_Delay(120);
 8000ae8:	2078      	movs	r0, #120	@ 0x78
 8000aea:	f002 fc49 	bl	8003380 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 8000aee:	20ef      	movs	r0, #239	@ 0xef
 8000af0:	f7ff ffac 	bl	8000a4c <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000af4:	20eb      	movs	r0, #235	@ 0xeb
 8000af6:	f7ff ffa9 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000afa:	2014      	movs	r0, #20
 8000afc:	f7ff ffd5 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 8000b00:	20fe      	movs	r0, #254	@ 0xfe
 8000b02:	f7ff ffa3 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 8000b06:	20ef      	movs	r0, #239	@ 0xef
 8000b08:	f7ff ffa0 	bl	8000a4c <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 8000b0c:	20eb      	movs	r0, #235	@ 0xeb
 8000b0e:	f7ff ff9d 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000b12:	2014      	movs	r0, #20
 8000b14:	f7ff ffc9 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 8000b18:	2084      	movs	r0, #132	@ 0x84
 8000b1a:	f7ff ff97 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 8000b1e:	2040      	movs	r0, #64	@ 0x40
 8000b20:	f7ff ffc3 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 8000b24:	2085      	movs	r0, #133	@ 0x85
 8000b26:	f7ff ff91 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000b2a:	20ff      	movs	r0, #255	@ 0xff
 8000b2c:	f7ff ffbd 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 8000b30:	2086      	movs	r0, #134	@ 0x86
 8000b32:	f7ff ff8b 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	f7ff ffb7 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 8000b3c:	2087      	movs	r0, #135	@ 0x87
 8000b3e:	f7ff ff85 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000b42:	20ff      	movs	r0, #255	@ 0xff
 8000b44:	f7ff ffb1 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 8000b48:	2088      	movs	r0, #136	@ 0x88
 8000b4a:	f7ff ff7f 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 8000b4e:	200a      	movs	r0, #10
 8000b50:	f7ff ffab 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 8000b54:	2089      	movs	r0, #137	@ 0x89
 8000b56:	f7ff ff79 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000b5a:	2021      	movs	r0, #33	@ 0x21
 8000b5c:	f7ff ffa5 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 8000b60:	208a      	movs	r0, #138	@ 0x8a
 8000b62:	f7ff ff73 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff ff9f 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 8000b6c:	208b      	movs	r0, #139	@ 0x8b
 8000b6e:	f7ff ff6d 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000b72:	2080      	movs	r0, #128	@ 0x80
 8000b74:	f7ff ff99 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 8000b78:	208c      	movs	r0, #140	@ 0x8c
 8000b7a:	f7ff ff67 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff ff93 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 8000b84:	208d      	movs	r0, #141	@ 0x8d
 8000b86:	f7ff ff61 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f7ff ff8d 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 8000b90:	208e      	movs	r0, #142	@ 0x8e
 8000b92:	f7ff ff5b 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000b96:	20ff      	movs	r0, #255	@ 0xff
 8000b98:	f7ff ff87 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 8000b9c:	208f      	movs	r0, #143	@ 0x8f
 8000b9e:	f7ff ff55 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000ba2:	20ff      	movs	r0, #255	@ 0xff
 8000ba4:	f7ff ff81 	bl	8000aaa <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 8000ba8:	20b6      	movs	r0, #182	@ 0xb6
 8000baa:	f7ff ff4f 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff ff7b 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff ff78 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 8000bba:	2036      	movs	r0, #54	@ 0x36
 8000bbc:	f7ff ff46 	bl	8000a4c <GC9A01_write_command>
    
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
 8000bc0:	2018      	movs	r0, #24
 8000bc2:	f7ff ff72 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x48);
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 8000bc6:	203a      	movs	r0, #58	@ 0x3a
 8000bc8:	f7ff ff40 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000bcc:	2005      	movs	r0, #5
 8000bce:	f7ff ff6c 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 8000bd2:	2090      	movs	r0, #144	@ 0x90
 8000bd4:	f7ff ff3a 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 8000bd8:	2008      	movs	r0, #8
 8000bda:	f7ff ff66 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000bde:	2008      	movs	r0, #8
 8000be0:	f7ff ff63 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000be4:	2008      	movs	r0, #8
 8000be6:	f7ff ff60 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000bea:	2008      	movs	r0, #8
 8000bec:	f7ff ff5d 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 8000bf0:	20bd      	movs	r0, #189	@ 0xbd
 8000bf2:	f7ff ff2b 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 8000bf6:	2006      	movs	r0, #6
 8000bf8:	f7ff ff57 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 8000bfc:	20bc      	movs	r0, #188	@ 0xbc
 8000bfe:	f7ff ff25 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff ff51 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 8000c08:	20ff      	movs	r0, #255	@ 0xff
 8000c0a:	f7ff ff1f 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000c0e:	2060      	movs	r0, #96	@ 0x60
 8000c10:	f7ff ff4b 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f7ff ff48 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8000c1a:	2004      	movs	r0, #4
 8000c1c:	f7ff ff45 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 8000c20:	20c3      	movs	r0, #195	@ 0xc3
 8000c22:	f7ff ff13 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000c26:	2013      	movs	r0, #19
 8000c28:	f7ff ff3f 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 8000c2c:	20c4      	movs	r0, #196	@ 0xc4
 8000c2e:	f7ff ff0d 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000c32:	2013      	movs	r0, #19
 8000c34:	f7ff ff39 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 8000c38:	20c9      	movs	r0, #201	@ 0xc9
 8000c3a:	f7ff ff07 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 8000c3e:	2022      	movs	r0, #34	@ 0x22
 8000c40:	f7ff ff33 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 8000c44:	20be      	movs	r0, #190	@ 0xbe
 8000c46:	f7ff ff01 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 8000c4a:	2011      	movs	r0, #17
 8000c4c:	f7ff ff2d 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 8000c50:	20e1      	movs	r0, #225	@ 0xe1
 8000c52:	f7ff fefb 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000c56:	2010      	movs	r0, #16
 8000c58:	f7ff ff27 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8000c5c:	200e      	movs	r0, #14
 8000c5e:	f7ff ff24 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 8000c62:	20df      	movs	r0, #223	@ 0xdf
 8000c64:	f7ff fef2 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000c68:	2021      	movs	r0, #33	@ 0x21
 8000c6a:	f7ff ff1e 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 8000c6e:	200c      	movs	r0, #12
 8000c70:	f7ff ff1b 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 8000c74:	2002      	movs	r0, #2
 8000c76:	f7ff ff18 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 8000c7a:	20f0      	movs	r0, #240	@ 0xf0
 8000c7c:	f7ff fee6 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000c80:	2045      	movs	r0, #69	@ 0x45
 8000c82:	f7ff ff12 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000c86:	2009      	movs	r0, #9
 8000c88:	f7ff ff0f 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000c8c:	2008      	movs	r0, #8
 8000c8e:	f7ff ff0c 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000c92:	2008      	movs	r0, #8
 8000c94:	f7ff ff09 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000c98:	2026      	movs	r0, #38	@ 0x26
 8000c9a:	f7ff ff06 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000c9e:	202a      	movs	r0, #42	@ 0x2a
 8000ca0:	f7ff ff03 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 8000ca4:	20f1      	movs	r0, #241	@ 0xf1
 8000ca6:	f7ff fed1 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000caa:	2043      	movs	r0, #67	@ 0x43
 8000cac:	f7ff fefd 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000cb0:	2070      	movs	r0, #112	@ 0x70
 8000cb2:	f7ff fefa 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000cb6:	2072      	movs	r0, #114	@ 0x72
 8000cb8:	f7ff fef7 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000cbc:	2036      	movs	r0, #54	@ 0x36
 8000cbe:	f7ff fef4 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000cc2:	2037      	movs	r0, #55	@ 0x37
 8000cc4:	f7ff fef1 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000cc8:	206f      	movs	r0, #111	@ 0x6f
 8000cca:	f7ff feee 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 8000cce:	20f2      	movs	r0, #242	@ 0xf2
 8000cd0:	f7ff febc 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000cd4:	2045      	movs	r0, #69	@ 0x45
 8000cd6:	f7ff fee8 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000cda:	2009      	movs	r0, #9
 8000cdc:	f7ff fee5 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000ce0:	2008      	movs	r0, #8
 8000ce2:	f7ff fee2 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000ce6:	2008      	movs	r0, #8
 8000ce8:	f7ff fedf 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 8000cec:	2026      	movs	r0, #38	@ 0x26
 8000cee:	f7ff fedc 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 8000cf2:	202a      	movs	r0, #42	@ 0x2a
 8000cf4:	f7ff fed9 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 8000cf8:	20f3      	movs	r0, #243	@ 0xf3
 8000cfa:	f7ff fea7 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000cfe:	2043      	movs	r0, #67	@ 0x43
 8000d00:	f7ff fed3 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000d04:	2070      	movs	r0, #112	@ 0x70
 8000d06:	f7ff fed0 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 8000d0a:	2072      	movs	r0, #114	@ 0x72
 8000d0c:	f7ff fecd 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 8000d10:	2036      	movs	r0, #54	@ 0x36
 8000d12:	f7ff feca 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 8000d16:	2037      	movs	r0, #55	@ 0x37
 8000d18:	f7ff fec7 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 8000d1c:	206f      	movs	r0, #111	@ 0x6f
 8000d1e:	f7ff fec4 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 8000d22:	20ed      	movs	r0, #237	@ 0xed
 8000d24:	f7ff fe92 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 8000d28:	201b      	movs	r0, #27
 8000d2a:	f7ff febe 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 8000d2e:	200b      	movs	r0, #11
 8000d30:	f7ff febb 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 8000d34:	20ae      	movs	r0, #174	@ 0xae
 8000d36:	f7ff fe89 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 8000d3a:	2077      	movs	r0, #119	@ 0x77
 8000d3c:	f7ff feb5 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 8000d40:	20cd      	movs	r0, #205	@ 0xcd
 8000d42:	f7ff fe83 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 8000d46:	2063      	movs	r0, #99	@ 0x63
 8000d48:	f7ff feaf 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 8000d4c:	2070      	movs	r0, #112	@ 0x70
 8000d4e:	f7ff fe7d 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 8000d52:	2007      	movs	r0, #7
 8000d54:	f7ff fea9 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000d58:	2007      	movs	r0, #7
 8000d5a:	f7ff fea6 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 8000d5e:	2004      	movs	r0, #4
 8000d60:	f7ff fea3 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 8000d64:	200e      	movs	r0, #14
 8000d66:	f7ff fea0 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000d6a:	200f      	movs	r0, #15
 8000d6c:	f7ff fe9d 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 8000d70:	2009      	movs	r0, #9
 8000d72:	f7ff fe9a 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000d76:	2007      	movs	r0, #7
 8000d78:	f7ff fe97 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 8000d7c:	2008      	movs	r0, #8
 8000d7e:	f7ff fe94 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 8000d82:	2003      	movs	r0, #3
 8000d84:	f7ff fe91 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 8000d88:	20e8      	movs	r0, #232	@ 0xe8
 8000d8a:	f7ff fe5f 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 8000d8e:	2034      	movs	r0, #52	@ 0x34
 8000d90:	f7ff fe8b 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 8000d94:	2062      	movs	r0, #98	@ 0x62
 8000d96:	f7ff fe59 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000d9a:	2018      	movs	r0, #24
 8000d9c:	f7ff fe85 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 8000da0:	200d      	movs	r0, #13
 8000da2:	f7ff fe82 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000da6:	2071      	movs	r0, #113	@ 0x71
 8000da8:	f7ff fe7f 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 8000dac:	20ed      	movs	r0, #237	@ 0xed
 8000dae:	f7ff fe7c 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000db2:	2070      	movs	r0, #112	@ 0x70
 8000db4:	f7ff fe79 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000db8:	2070      	movs	r0, #112	@ 0x70
 8000dba:	f7ff fe76 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000dbe:	2018      	movs	r0, #24
 8000dc0:	f7ff fe73 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 8000dc4:	200f      	movs	r0, #15
 8000dc6:	f7ff fe70 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000dca:	2071      	movs	r0, #113	@ 0x71
 8000dcc:	f7ff fe6d 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 8000dd0:	20ef      	movs	r0, #239	@ 0xef
 8000dd2:	f7ff fe6a 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000dd6:	2070      	movs	r0, #112	@ 0x70
 8000dd8:	f7ff fe67 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000ddc:	2070      	movs	r0, #112	@ 0x70
 8000dde:	f7ff fe64 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 8000de2:	2063      	movs	r0, #99	@ 0x63
 8000de4:	f7ff fe32 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000de8:	2018      	movs	r0, #24
 8000dea:	f7ff fe5e 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 8000dee:	2011      	movs	r0, #17
 8000df0:	f7ff fe5b 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000df4:	2071      	movs	r0, #113	@ 0x71
 8000df6:	f7ff fe58 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000dfa:	20f1      	movs	r0, #241	@ 0xf1
 8000dfc:	f7ff fe55 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000e00:	2070      	movs	r0, #112	@ 0x70
 8000e02:	f7ff fe52 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000e06:	2070      	movs	r0, #112	@ 0x70
 8000e08:	f7ff fe4f 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 8000e0c:	2018      	movs	r0, #24
 8000e0e:	f7ff fe4c 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 8000e12:	2013      	movs	r0, #19
 8000e14:	f7ff fe49 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 8000e18:	2071      	movs	r0, #113	@ 0x71
 8000e1a:	f7ff fe46 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 8000e1e:	20f3      	movs	r0, #243	@ 0xf3
 8000e20:	f7ff fe43 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000e24:	2070      	movs	r0, #112	@ 0x70
 8000e26:	f7ff fe40 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 8000e2a:	2070      	movs	r0, #112	@ 0x70
 8000e2c:	f7ff fe3d 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 8000e30:	2064      	movs	r0, #100	@ 0x64
 8000e32:	f7ff fe0b 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 8000e36:	2028      	movs	r0, #40	@ 0x28
 8000e38:	f7ff fe37 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 8000e3c:	2029      	movs	r0, #41	@ 0x29
 8000e3e:	f7ff fe34 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000e42:	20f1      	movs	r0, #241	@ 0xf1
 8000e44:	f7ff fe31 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f7ff fe2e 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 8000e4e:	20f1      	movs	r0, #241	@ 0xf1
 8000e50:	f7ff fe2b 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000e54:	2000      	movs	r0, #0
 8000e56:	f7ff fe28 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000e5a:	2007      	movs	r0, #7
 8000e5c:	f7ff fe25 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 8000e60:	2066      	movs	r0, #102	@ 0x66
 8000e62:	f7ff fdf3 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 8000e66:	203c      	movs	r0, #60	@ 0x3c
 8000e68:	f7ff fe1f 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fe1c 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 8000e72:	20cd      	movs	r0, #205	@ 0xcd
 8000e74:	f7ff fe19 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 8000e78:	2067      	movs	r0, #103	@ 0x67
 8000e7a:	f7ff fe16 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000e7e:	2045      	movs	r0, #69	@ 0x45
 8000e80:	f7ff fe13 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 8000e84:	2045      	movs	r0, #69	@ 0x45
 8000e86:	f7ff fe10 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000e8a:	2010      	movs	r0, #16
 8000e8c:	f7ff fe0d 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff fe0a 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff fe07 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f7ff fe04 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 8000ea2:	2067      	movs	r0, #103	@ 0x67
 8000ea4:	f7ff fdd2 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff fdfe 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 8000eae:	203c      	movs	r0, #60	@ 0x3c
 8000eb0:	f7ff fdfb 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff fdf8 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff fdf5 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff fdf2 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f7ff fdef 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 8000ecc:	2054      	movs	r0, #84	@ 0x54
 8000ece:	f7ff fdec 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 8000ed2:	2010      	movs	r0, #16
 8000ed4:	f7ff fde9 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 8000ed8:	2032      	movs	r0, #50	@ 0x32
 8000eda:	f7ff fde6 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 8000ede:	2098      	movs	r0, #152	@ 0x98
 8000ee0:	f7ff fde3 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 8000ee4:	2074      	movs	r0, #116	@ 0x74
 8000ee6:	f7ff fdb1 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000eea:	2010      	movs	r0, #16
 8000eec:	f7ff fddd 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 8000ef0:	2085      	movs	r0, #133	@ 0x85
 8000ef2:	f7ff fdda 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 8000ef6:	2080      	movs	r0, #128	@ 0x80
 8000ef8:	f7ff fdd7 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff fdd4 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff fdd1 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 8000f08:	204e      	movs	r0, #78	@ 0x4e
 8000f0a:	f7ff fdce 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff fdcb 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 8000f14:	2098      	movs	r0, #152	@ 0x98
 8000f16:	f7ff fd99 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 8000f1a:	203e      	movs	r0, #62	@ 0x3e
 8000f1c:	f7ff fdc5 	bl	8000aaa <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 8000f20:	2007      	movs	r0, #7
 8000f22:	f7ff fdc2 	bl	8000aaa <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 8000f26:	2035      	movs	r0, #53	@ 0x35
 8000f28:	f7ff fd90 	bl	8000a4c <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8000f2c:	2021      	movs	r0, #33	@ 0x21
 8000f2e:	f7ff fd8d 	bl	8000a4c <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 8000f32:	2011      	movs	r0, #17
 8000f34:	f7ff fd8a 	bl	8000a4c <GC9A01_write_command>
    HAL_Delay(120);
 8000f38:	2078      	movs	r0, #120	@ 0x78
 8000f3a:	f002 fa21 	bl	8003380 <HAL_Delay>
    GC9A01_write_command(0x29);
 8000f3e:	2029      	movs	r0, #41	@ 0x29
 8000f40:	f7ff fd84 	bl	8000a4c <GC9A01_write_command>
    HAL_Delay(20);
 8000f44:	2014      	movs	r0, #20
 8000f46:	f002 fa1b 	bl	8003380 <HAL_Delay>
    
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <GC9A01_set_frame>:

void GC9A01_set_frame(struct GC9A01_frame frame) {
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	463b      	mov	r3, r7
 8000f56:	e883 0003 	stmia.w	r3, {r0, r1}
    
#ifdef DMA_MODE
    while(spi_dma_not_ready);
#endif

    GC9A01_write_command(COL_ADDR_SET);
 8000f5a:	202a      	movs	r0, #42	@ 0x2a
 8000f5c:	f7ff fd76 	bl	8000a4c <GC9A01_write_command>
    data[0] = (frame.start.X >> 8) & 0xFF;
 8000f60:	883b      	ldrh	r3, [r7, #0]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.X & 0xFF;
 8000f6a:	883b      	ldrh	r3, [r7, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.X >> 8) & 0xFF;
 8000f70:	88bb      	ldrh	r3, [r7, #4]
 8000f72:	0a1b      	lsrs	r3, r3, #8
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.X & 0xFF;
 8000f7a:	88bb      	ldrh	r3, [r7, #4]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2104      	movs	r1, #4
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fd77 	bl	8000a7a <GC9A01_write_data>

    GC9A01_write_command(ROW_ADDR_SET);
 8000f8c:	202b      	movs	r0, #43	@ 0x2b
 8000f8e:	f7ff fd5d 	bl	8000a4c <GC9A01_write_command>
    data[0] = (frame.start.Y >> 8) & 0xFF;
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.Y & 0xFF;
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.Y >> 8) & 0xFF;
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.Y & 0xFF;
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fd5e 	bl	8000a7a <GC9A01_write_data>
    
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <GC9A01_sleep_mode>:


void GC9A01_sleep_mode(uint8_t command)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	71fb      	strb	r3, [r7, #7]

#ifdef DMA_MODE
    while(spi_dma_not_ready);
#endif

	if(command)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <GC9A01_sleep_mode+0x18>
		GC9A01_write_command(SLEEP_MODE_ON);
 8000fd6:	2010      	movs	r0, #16
 8000fd8:	f7ff fd38 	bl	8000a4c <GC9A01_write_command>
 8000fdc:	e002      	b.n	8000fe4 <GC9A01_sleep_mode+0x1e>
	else
		GC9A01_write_command(SLEEP_MODE_OFF);
 8000fde:	2011      	movs	r0, #17
 8000fe0:	f7ff fd34 	bl	8000a4c <GC9A01_write_command>

	HAL_Delay(120);
 8000fe4:	2078      	movs	r0, #120	@ 0x78
 8000fe6:	f002 f9cb 	bl	8003380 <HAL_Delay>

}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
int GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
#ifdef DMA_MODE
	while(spi_dma_not_ready);
	spi_dma_not_ready = 1;
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
#else
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001000:	887a      	ldrh	r2, [r7, #2]
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4809      	ldr	r0, [pc, #36]	@ (8001030 <GC9A01_spi_tx+0x3c>)
 800100a:	f00c fdf1 	bl	800dbf0 <HAL_SPI_Transmit>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <GC9A01_spi_tx+0x40>)
 8001014:	701a      	strb	r2, [r3, #0]
#endif

	if(ret != HAL_OK)
 8001016:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <GC9A01_spi_tx+0x40>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d002      	beq.n	8001024 <GC9A01_spi_tx+0x30>
		return -1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e000      	b.n	8001026 <GC9A01_spi_tx+0x32>

	return 1;
 8001024:	2301      	movs	r3, #1

}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	24000118 	.word	0x24000118
 8001034:	24000085 	.word	0x24000085

08001038 <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
int JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af02      	add	r7, sp, #8
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
  JPEGSourceAddress =  FrameSourceAddress ;
 8001046:	4a14      	ldr	r2, [pc, #80]	@ (8001098 <JPEG_Decode_DMA+0x60>)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 800104c:	4a13      	ldr	r2, [pc, #76]	@ (800109c <JPEG_Decode_DMA+0x64>)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	6013      	str	r3, [r2, #0]
  Input_frameIndex=0;
 8001052:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <JPEG_Decode_DMA+0x68>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
  Input_frameSize = FrameSize;
 8001058:	4a12      	ldr	r2, [pc, #72]	@ (80010a4 <JPEG_Decode_DMA+0x6c>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6013      	str	r3, [r2, #0]

  Jpeg_HWDecodingEnd = 0;
 800105e:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <JPEG_Decode_DMA+0x70>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
  
  /* Start JPEG decoding with DMA method */
  if(HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT) != HAL_OK)
 8001064:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <JPEG_Decode_DMA+0x60>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <JPEG_Decode_DMA+0x64>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	4613      	mov	r3, r2
 8001078:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f005 f882 	bl	8006186 <HAL_JPEG_Decode_DMA>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <JPEG_Decode_DMA+0x56>
	  return -1;
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	e000      	b.n	8001090 <JPEG_Decode_DMA+0x58>
  
  
  return 1;
 800108e:	2301      	movs	r3, #1
  
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	24000090 	.word	0x24000090
 800109c:	2400008c 	.word	0x2400008c
 80010a0:	24000098 	.word	0x24000098
 80010a4:	24000094 	.word	0x24000094
 80010a8:	24000088 	.word	0x24000088

080010ac <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 80010ce:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <HAL_JPEG_GetDataCallback+0x70>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	4a17      	ldr	r2, [pc, #92]	@ (8001134 <HAL_JPEG_GetDataCallback+0x70>)
 80010d8:	6013      	str	r3, [r2, #0]
  if( Input_frameIndex < Input_frameSize)
 80010da:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <HAL_JPEG_GetDataCallback+0x70>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <HAL_JPEG_GetDataCallback+0x74>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d218      	bcs.n	8001118 <HAL_JPEG_GetDataCallback+0x54>
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <HAL_JPEG_GetDataCallback+0x78>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a13      	ldr	r2, [pc, #76]	@ (800113c <HAL_JPEG_GetDataCallback+0x78>)
 80010f0:	6013      	str	r3, [r2, #0]
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 80010f2:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <HAL_JPEG_GetDataCallback+0x74>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <HAL_JPEG_GetDataCallback+0x70>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001100:	d303      	bcc.n	800110a <HAL_JPEG_GetDataCallback+0x46>
    {
      inDataLength = CHUNK_SIZE_IN;
 8001102:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e008      	b.n	800111c <HAL_JPEG_GetDataCallback+0x58>
    }
    else
    {
      inDataLength = Input_frameSize - Input_frameIndex;
 800110a:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <HAL_JPEG_GetDataCallback+0x74>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <HAL_JPEG_GetDataCallback+0x70>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	e001      	b.n	800111c <HAL_JPEG_GetDataCallback+0x58>
    }    
  }
  else
  {
    inDataLength = 0; 
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 800111c:	4b07      	ldr	r3, [pc, #28]	@ (800113c <HAL_JPEG_GetDataCallback+0x78>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	4619      	mov	r1, r3
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f005 f8e9 	bl	80062fc <HAL_JPEG_ConfigInputBuffer>
  
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	24000098 	.word	0x24000098
 8001138:	24000094 	.word	0x24000094
 800113c:	24000090 	.word	0x24000090

08001140 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <HAL_JPEG_DataReadyCallback+0x30>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	4a06      	ldr	r2, [pc, #24]	@ (8001170 <HAL_JPEG_DataReadyCallback+0x30>)
 8001156:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 8001158:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <HAL_JPEG_DataReadyCallback+0x30>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001160:	4619      	mov	r1, r3
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f005 f8dc 	bl	8006320 <HAL_JPEG_ConfigOutputBuffer>
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2400008c 	.word	0x2400008c

08001174 <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  Error_Handler();
 800117c:	f000 fae6 	bl	800174c <Error_Handler>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1; 
 8001190:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8001192:	2201      	movs	r2, #1
 8001194:	601a      	str	r2, [r3, #0]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	24000088 	.word	0x24000088

080011a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011ac:	4b2b      	ldr	r3, [pc, #172]	@ (800125c <main+0xb4>)
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d11b      	bne.n	80011f0 <main+0x48>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011b8:	f3bf 8f4f 	dsb	sy
}
 80011bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011be:	f3bf 8f6f 	isb	sy
}
 80011c2:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011c4:	4b25      	ldr	r3, [pc, #148]	@ (800125c <main+0xb4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011cc:	f3bf 8f4f 	dsb	sy
}
 80011d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011d2:	f3bf 8f6f 	isb	sy
}
 80011d6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011d8:	4b20      	ldr	r3, [pc, #128]	@ (800125c <main+0xb4>)
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	4a1f      	ldr	r2, [pc, #124]	@ (800125c <main+0xb4>)
 80011de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80011e4:	f3bf 8f4f 	dsb	sy
}
 80011e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011ea:	f3bf 8f6f 	isb	sy
}
 80011ee:	e000      	b.n	80011f2 <main+0x4a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011f0:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f2:	f002 f833 	bl	800325c <HAL_Init>

  HAL_Delay(500);
 80011f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011fa:	f002 f8c1 	bl	8003380 <HAL_Delay>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011fe:	f000 f833 	bl	8001268 <SystemClock_Config>

  HAL_Delay(500);
 8001202:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001206:	f002 f8bb 	bl	8003380 <HAL_Delay>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120a:	f000 f9eb 	bl	80015e4 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800120e:	f000 f8a7 	bl	8001360 <MX_DMA2D_Init>
  MX_SDMMC1_SD_Init();
 8001212:	f000 f913 	bl	800143c <MX_SDMMC1_SD_Init>
  MX_DMA_Init();
 8001216:	f000 f8dd 	bl	80013d4 <MX_DMA_Init>
  MX_SPI1_Init();
 800121a:	f000 f92f 	bl	800147c <MX_SPI1_Init>
  MX_RTC_Init();
 800121e:	f000 f983 	bl	8001528 <MX_RTC_Init>
  //MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8001222:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001226:	f002 f8ab 	bl	8003380 <HAL_Delay>
  JPEG_Handle.Instance = JPEG;
 800122a:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <main+0xb8>)
 800122c:	4a0d      	ldr	r2, [pc, #52]	@ (8001264 <main+0xbc>)
 800122e:	601a      	str	r2, [r3, #0]
  MX_JPEG_Init();
 8001230:	f000 f8f0 	bl	8001414 <MX_JPEG_Init>

  HAL_Delay(500);
 8001234:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001238:	f002 f8a2 	bl	8003380 <HAL_Delay>
  GC9A01_init();
 800123c:	f7ff fc43 	bl	8000ac6 <GC9A01_init>
  HAL_Delay(500);
 8001240:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001244:	f002 f89c 	bl	8003380 <HAL_Delay>

  smart_watch_init();
 8001248:	f000 fa86 	bl	8001758 <smart_watch_init>

  HAL_Delay(500);
 800124c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001250:	f002 f896 	bl	8003380 <HAL_Delay>

  if(TEST == 0)
  {

	  smart_watch_process();
 8001254:	f000 fac2 	bl	80017dc <smart_watch_process>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <main+0xb0>
 800125c:	e000ed00 	.word	0xe000ed00
 8001260:	24000218 	.word	0x24000218
 8001264:	52003000 	.word	0x52003000

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b09c      	sub	sp, #112	@ 0x70
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001272:	224c      	movs	r2, #76	@ 0x4c
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f010 fe32 	bl	8011ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2220      	movs	r2, #32
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f010 fe2c 	bl	8011ee0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001288:	4b33      	ldr	r3, [pc, #204]	@ (8001358 <SystemClock_Config+0xf0>)
 800128a:	f04f 32ff 	mov.w	r2, #4294967295
 800128e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001292:	2002      	movs	r0, #2
 8001294:	f007 f8c2 	bl	800841c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001298:	2300      	movs	r3, #0
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	4b2f      	ldr	r3, [pc, #188]	@ (800135c <SystemClock_Config+0xf4>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a2e      	ldr	r2, [pc, #184]	@ (800135c <SystemClock_Config+0xf4>)
 80012a2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b2c      	ldr	r3, [pc, #176]	@ (800135c <SystemClock_Config+0xf4>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012b4:	bf00      	nop
 80012b6:	4b29      	ldr	r3, [pc, #164]	@ (800135c <SystemClock_Config+0xf4>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012c2:	d1f8      	bne.n	80012b6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 80012c4:	2306      	movs	r3, #6
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012c8:	2301      	movs	r3, #1
 80012ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
 80012cc:	2301      	movs	r3, #1
 80012ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
 80012d0:	2301      	movs	r3, #1
 80012d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80012d8:	2340      	movs	r3, #64	@ 0x40
 80012da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012dc:	2302      	movs	r3, #2
 80012de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e0:	2300      	movs	r3, #0
 80012e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012e4:	2304      	movs	r3, #4
 80012e6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 23;
 80012e8:	2317      	movs	r3, #23
 80012ea:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80012f0:	2306      	movs	r3, #6
 80012f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80012f8:	230c      	movs	r3, #12
 80012fa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001308:	4618      	mov	r0, r3
 800130a:	f007 f8c1 	bl	8008490 <HAL_RCC_OscConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001314:	f000 fa1a 	bl	800174c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001318:	233f      	movs	r3, #63	@ 0x3f
 800131a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131c:	2303      	movs	r3, #3
 800131e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001324:	2308      	movs	r3, #8
 8001326:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001328:	2340      	movs	r3, #64	@ 0x40
 800132a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800132c:	2340      	movs	r3, #64	@ 0x40
 800132e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001330:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001334:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001336:	2340      	movs	r3, #64	@ 0x40
 8001338:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2102      	movs	r1, #2
 800133e:	4618      	mov	r0, r3
 8001340:	f007 fcd8 	bl	8008cf4 <HAL_RCC_ClockConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800134a:	f000 f9ff 	bl	800174c <Error_Handler>
  }
}
 800134e:	bf00      	nop
 8001350:	3770      	adds	r7, #112	@ 0x70
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	58024400 	.word	0x58024400
 800135c:	58024800 	.word	0x58024800

08001360 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  DMA2D_Handle.Instance = DMA2D;
 8001364:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <MX_DMA2D_Init+0x6c>)
 8001366:	4a1a      	ldr	r2, [pc, #104]	@ (80013d0 <MX_DMA2D_Init+0x70>)
 8001368:	601a      	str	r2, [r3, #0]
  DMA2D_Handle.Init.Mode = DMA2D_M2M;
 800136a:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <MX_DMA2D_Init+0x6c>)
 800136c:	2200      	movs	r2, #0
 800136e:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001370:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <MX_DMA2D_Init+0x6c>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = 0;
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <MX_DMA2D_Init+0x6c>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.LayerCfg[1].InputOffset = 0;
 800137c:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <MX_DMA2D_Init+0x6c>)
 800137e:	2200      	movs	r2, #0
 8001380:	645a      	str	r2, [r3, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001382:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <MX_DMA2D_Init+0x6c>)
 8001384:	2200      	movs	r2, #0
 8001386:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001388:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <MX_DMA2D_Init+0x6c>)
 800138a:	2200      	movs	r2, #0
 800138c:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0;
 800138e:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_DMA2D_Init+0x6c>)
 8001390:	2200      	movs	r2, #0
 8001392:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001394:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <MX_DMA2D_Init+0x6c>)
 8001396:	2200      	movs	r2, #0
 8001398:	655a      	str	r2, [r3, #84]	@ 0x54
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_DMA2D_Init+0x6c>)
 800139c:	2200      	movs	r2, #0
 800139e:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <MX_DMA2D_Init+0x6c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&DMA2D_Handle) != HAL_OK)
 80013a6:	4809      	ldr	r0, [pc, #36]	@ (80013cc <MX_DMA2D_Init+0x6c>)
 80013a8:	f004 f90e 	bl	80055c8 <HAL_DMA2D_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80013b2:	f000 f9cb 	bl	800174c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1) != HAL_OK)
 80013b6:	2101      	movs	r1, #1
 80013b8:	4804      	ldr	r0, [pc, #16]	@ (80013cc <MX_DMA2D_Init+0x6c>)
 80013ba:	f004 fa7d 	bl	80058b8 <HAL_DMA2D_ConfigLayer>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 80013c4:	f000 f9c2 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	24000270 	.word	0x24000270
 80013d0:	52001000 	.word	0x52001000

080013d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013da:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <MX_DMA_Init+0x3c>)
 80013dc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80013e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001410 <MX_DMA_Init+0x3c>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <MX_DMA_Init+0x3c>)
 80013ec:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	200b      	movs	r0, #11
 80013fe:	f002 f920 	bl	8003642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001402:	200b      	movs	r0, #11
 8001404:	f002 f937 	bl	8003676 <HAL_NVIC_EnableIRQ>

}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	58024400 	.word	0x58024400

08001414 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  JPEG_Handle.Instance = JPEG;
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <MX_JPEG_Init+0x20>)
 800141a:	4a07      	ldr	r2, [pc, #28]	@ (8001438 <MX_JPEG_Init+0x24>)
 800141c:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&JPEG_Handle) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	@ (8001434 <MX_JPEG_Init+0x20>)
 8001420:	f004 fd9a 	bl	8005f58 <HAL_JPEG_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 800142a:	f000 f98f 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	24000218 	.word	0x24000218
 8001438:	52003000 	.word	0x52003000

0800143c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001440:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <MX_SDMMC1_SD_Init+0x38>)
 8001442:	4a0d      	ldr	r2, [pc, #52]	@ (8001478 <MX_SDMMC1_SD_Init+0x3c>)
 8001444:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001446:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <MX_SDMMC1_SD_Init+0x38>)
 8001448:	2200      	movs	r2, #0
 800144a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800144c:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <MX_SDMMC1_SD_Init+0x38>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001452:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <MX_SDMMC1_SD_Init+0x38>)
 8001454:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001458:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <MX_SDMMC1_SD_Init+0x38>)
 800145c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001460:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001462:	4b04      	ldr	r3, [pc, #16]	@ (8001474 <MX_SDMMC1_SD_Init+0x38>)
 8001464:	2200      	movs	r2, #0
 8001466:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	2400009c 	.word	0x2400009c
 8001478:	52007000 	.word	0x52007000

0800147c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001480:	4b27      	ldr	r3, [pc, #156]	@ (8001520 <MX_SPI1_Init+0xa4>)
 8001482:	4a28      	ldr	r2, [pc, #160]	@ (8001524 <MX_SPI1_Init+0xa8>)
 8001484:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001486:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <MX_SPI1_Init+0xa4>)
 8001488:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800148c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800148e:	4b24      	ldr	r3, [pc, #144]	@ (8001520 <MX_SPI1_Init+0xa4>)
 8001490:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8001494:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001496:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <MX_SPI1_Init+0xa4>)
 8001498:	2207      	movs	r2, #7
 800149a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800149c:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <MX_SPI1_Init+0xa4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <MX_SPI1_Init+0xa4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <MX_SPI1_Init+0xa4>)
 80014aa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80014ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <MX_SPI1_Init+0xa4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <MX_SPI1_Init+0xa4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014bc:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <MX_SPI1_Init+0xa4>)
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014c2:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <MX_SPI1_Init+0xa4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80014c8:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <MX_SPI1_Init+0xa4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014ce:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <MX_SPI1_Init+0xa4>)
 80014d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014d6:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <MX_SPI1_Init+0xa4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014dc:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <MX_SPI1_Init+0xa4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <MX_SPI1_Init+0xa4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001520 <MX_SPI1_Init+0xa4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <MX_SPI1_Init+0xa4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <MX_SPI1_Init+0xa4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014fa:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <MX_SPI1_Init+0xa4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001500:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <MX_SPI1_Init+0xa4>)
 8001502:	2200      	movs	r2, #0
 8001504:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <MX_SPI1_Init+0xa4>)
 8001508:	2200      	movs	r2, #0
 800150a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800150c:	4804      	ldr	r0, [pc, #16]	@ (8001520 <MX_SPI1_Init+0xa4>)
 800150e:	f00c fa4b 	bl	800d9a8 <HAL_SPI_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001518:	f000 f918 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	24000118 	.word	0x24000118
 8001524:	40013000 	.word	0x40013000

08001528 <MX_RTC_Init>:

void MX_RTC_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0

  RTC_TimeTypeDef sTime = {0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800153c:	2300      	movs	r3, #0
 800153e:	603b      	str	r3, [r7, #0]


  hrtc.Instance = RTC;
 8001540:	4b26      	ldr	r3, [pc, #152]	@ (80015dc <MX_RTC_Init+0xb4>)
 8001542:	4a27      	ldr	r2, [pc, #156]	@ (80015e0 <MX_RTC_Init+0xb8>)
 8001544:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001546:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <MX_RTC_Init+0xb4>)
 8001548:	2200      	movs	r2, #0
 800154a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800154c:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <MX_RTC_Init+0xb4>)
 800154e:	227f      	movs	r2, #127	@ 0x7f
 8001550:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001552:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <MX_RTC_Init+0xb4>)
 8001554:	22ff      	movs	r2, #255	@ 0xff
 8001556:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001558:	4b20      	ldr	r3, [pc, #128]	@ (80015dc <MX_RTC_Init+0xb4>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800155e:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <MX_RTC_Init+0xb4>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001564:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <MX_RTC_Init+0xb4>)
 8001566:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800156a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800156c:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <MX_RTC_Init+0xb4>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001572:	481a      	ldr	r0, [pc, #104]	@ (80015dc <MX_RTC_Init+0xb4>)
 8001574:	f00a fb3e 	bl	800bbf4 <HAL_RTC_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800157e:	f000 f8e5 	bl	800174c <Error_Handler>
  }


  sTime.Hours = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	2200      	movs	r2, #0
 800159a:	4619      	mov	r1, r3
 800159c:	480f      	ldr	r0, [pc, #60]	@ (80015dc <MX_RTC_Init+0xb4>)
 800159e:	f00a fbaf 	bl	800bd00 <HAL_RTC_SetTime>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80015a8:	f000 f8d0 	bl	800174c <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80015ac:	2301      	movs	r3, #1
 80015ae:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80015b0:	2301      	movs	r3, #1
 80015b2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80015b4:	2301      	movs	r3, #1
 80015b6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80015bc:	463b      	mov	r3, r7
 80015be:	2200      	movs	r2, #0
 80015c0:	4619      	mov	r1, r3
 80015c2:	4806      	ldr	r0, [pc, #24]	@ (80015dc <MX_RTC_Init+0xb4>)
 80015c4:	f00a fc96 	bl	800bef4 <HAL_RTC_SetDate>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80015ce:	f000 f8bd 	bl	800174c <Error_Handler>
  }

}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	240002ec 	.word	0x240002ec
 80015e0:	58004000 	.word	0x58004000

080015e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	@ 0x28
 80015e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fa:	4b50      	ldr	r3, [pc, #320]	@ (800173c <MX_GPIO_Init+0x158>)
 80015fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001600:	4a4e      	ldr	r2, [pc, #312]	@ (800173c <MX_GPIO_Init+0x158>)
 8001602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001606:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800160a:	4b4c      	ldr	r3, [pc, #304]	@ (800173c <MX_GPIO_Init+0x158>)
 800160c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001618:	4b48      	ldr	r3, [pc, #288]	@ (800173c <MX_GPIO_Init+0x158>)
 800161a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800161e:	4a47      	ldr	r2, [pc, #284]	@ (800173c <MX_GPIO_Init+0x158>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001628:	4b44      	ldr	r3, [pc, #272]	@ (800173c <MX_GPIO_Init+0x158>)
 800162a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	4b41      	ldr	r3, [pc, #260]	@ (800173c <MX_GPIO_Init+0x158>)
 8001638:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800163c:	4a3f      	ldr	r2, [pc, #252]	@ (800173c <MX_GPIO_Init+0x158>)
 800163e:	f043 0302 	orr.w	r3, r3, #2
 8001642:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001646:	4b3d      	ldr	r3, [pc, #244]	@ (800173c <MX_GPIO_Init+0x158>)
 8001648:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001654:	4b39      	ldr	r3, [pc, #228]	@ (800173c <MX_GPIO_Init+0x158>)
 8001656:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800165a:	4a38      	ldr	r2, [pc, #224]	@ (800173c <MX_GPIO_Init+0x158>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001664:	4b35      	ldr	r3, [pc, #212]	@ (800173c <MX_GPIO_Init+0x158>)
 8001666:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001672:	4b32      	ldr	r3, [pc, #200]	@ (800173c <MX_GPIO_Init+0x158>)
 8001674:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001678:	4a30      	ldr	r2, [pc, #192]	@ (800173c <MX_GPIO_Init+0x158>)
 800167a:	f043 0308 	orr.w	r3, r3, #8
 800167e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001682:	4b2e      	ldr	r3, [pc, #184]	@ (800173c <MX_GPIO_Init+0x158>)
 8001684:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	4826      	ldr	r0, [pc, #152]	@ (8001740 <MX_GPIO_Init+0x15c>)
 80016a6:	f004 fa5b 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GC9A01_CS_Pin|GC9A01_DC_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2103      	movs	r1, #3
 80016ae:	4825      	ldr	r0, [pc, #148]	@ (8001744 <MX_GPIO_Init+0x160>)
 80016b0:	f004 fc1e 	bl	8005ef0 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GC9A01_RST_Pin|GC9A01_BL_Pin, GPIO_PIN_SET);
 80016b4:	2201      	movs	r2, #1
 80016b6:	f240 4104 	movw	r1, #1028	@ 0x404
 80016ba:	4822      	ldr	r0, [pc, #136]	@ (8001744 <MX_GPIO_Init+0x160>)
 80016bc:	f004 fc18 	bl	8005ef0 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PLUS_BTN_Pin|SET_BTN_Pin|MINUS_BTN_Pin, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2107      	movs	r1, #7
 80016c4:	4820      	ldr	r0, [pc, #128]	@ (8001748 <MX_GPIO_Init+0x164>)
 80016c6:	f004 fc13 	bl	8005ef0 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : GC9A01_CS_Pin GC9A01_DC_Pin GC9A01_RST_Pin GC9A01_BL_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin|GC9A01_BL_Pin;
 80016ca:	f240 4307 	movw	r3, #1031	@ 0x407
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	4818      	ldr	r0, [pc, #96]	@ (8001744 <MX_GPIO_Init+0x160>)
 80016e4:	f004 fa3c 	bl	8005b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = PLUS_BTN_Pin|SET_BTN_Pin|MINUS_BTN_Pin;
 80016e8:	2307      	movs	r3, #7
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016ec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f2:	2301      	movs	r3, #1
 80016f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	4812      	ldr	r0, [pc, #72]	@ (8001748 <MX_GPIO_Init+0x164>)
 80016fe:	f004 fa2f 	bl	8005b60 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	2006      	movs	r0, #6
 8001708:	f001 ff9b 	bl	8003642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800170c:	2006      	movs	r0, #6
 800170e:	f001 ffb2 	bl	8003676 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	2007      	movs	r0, #7
 8001718:	f001 ff93 	bl	8003642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800171c:	2007      	movs	r0, #7
 800171e:	f001 ffaa 	bl	8003676 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	2008      	movs	r0, #8
 8001728:	f001 ff8b 	bl	8003642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800172c:	2008      	movs	r0, #8
 800172e:	f001 ffa2 	bl	8003676 <HAL_NVIC_EnableIRQ>

/* USER CODE END MX_GPIO_Init_2 */
}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	@ 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	58024400 	.word	0x58024400
 8001740:	58020000 	.word	0x58020000
 8001744:	58020400 	.word	0x58020400
 8001748:	58020800 	.word	0x58020800

0800174c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001750:	b672      	cpsid	i
}
 8001752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <Error_Handler+0x8>

08001758 <smart_watch_init>:
uint8_t *outputData = output_data1;

/************************** GLOBAL FUNCTIONS **************************/

void smart_watch_init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0

	parameters_reset();
 800175e:	f001 f82b 	bl	80027b8 <parameters_reset>


	for(int i = 0 ; i < 200*1024 ; i++)
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	e00c      	b.n	8001782 <smart_watch_init+0x2a>
	{

		output_data1[i] = 0x00;
 8001768:	4a16      	ldr	r2, [pc, #88]	@ (80017c4 <smart_watch_init+0x6c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
		output_data2[i] = 0xff;
 8001772:	4a15      	ldr	r2, [pc, #84]	@ (80017c8 <smart_watch_init+0x70>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	22ff      	movs	r2, #255	@ 0xff
 800177a:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 200*1024 ; i++)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3301      	adds	r3, #1
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f5b3 3f48 	cmp.w	r3, #204800	@ 0x32000
 8001788:	dbee      	blt.n	8001768 <smart_watch_init+0x10>

	}
	// First time setting
	video.video_mode = SETTING_MODE;
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <smart_watch_init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

	// SD card initialization
	// Link the micro SD disk I/O driver
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8001792:	490f      	ldr	r1, [pc, #60]	@ (80017d0 <smart_watch_init+0x78>)
 8001794:	480f      	ldr	r0, [pc, #60]	@ (80017d4 <smart_watch_init+0x7c>)
 8001796:	f010 fb5f 	bl	8011e58 <FATFS_LinkDriver>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10b      	bne.n	80017b8 <smart_watch_init+0x60>
	{

		// Init the SD Card
	    SD_Initialize();
 80017a0:	f001 f908 	bl	80029b4 <SD_Initialize>

	    // Register the file system object to the FatFs module
	    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 80017a4:	2200      	movs	r2, #0
 80017a6:	490a      	ldr	r1, [pc, #40]	@ (80017d0 <smart_watch_init+0x78>)
 80017a8:	480b      	ldr	r0, [pc, #44]	@ (80017d8 <smart_watch_init+0x80>)
 80017aa:	f00f fba3 	bl	8010ef4 <f_mount>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <smart_watch_init+0x62>
	    {

	    	while(1);
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <smart_watch_init+0x5c>

  	}
	else
	{

		while(1);
 80017b8:	e7fe      	b.n	80017b8 <smart_watch_init+0x60>

	}

}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	24058244 	.word	0x24058244
 80017c8:	2408a244 	.word	0x2408a244
 80017cc:	2400d200 	.word	0x2400d200
 80017d0:	240bc32c 	.word	0x240bc32c
 80017d4:	08012b3c 	.word	0x08012b3c
 80017d8:	24000558 	.word	0x24000558

080017dc <smart_watch_process>:

void smart_watch_process(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b092      	sub	sp, #72	@ 0x48
 80017e0:	af00      	add	r7, sp, #0

#ifdef DEBUG_TIME
	static uint16_t count = 0;
	if(f_open(&fileToWrite, "time.txt", ( FA_WRITE | FA_CREATE_ALWAYS )) != FR_OK)
 80017e2:	220a      	movs	r2, #10
 80017e4:	491e      	ldr	r1, [pc, #120]	@ (8001860 <smart_watch_process+0x84>)
 80017e6:	481f      	ldr	r0, [pc, #124]	@ (8001864 <smart_watch_process+0x88>)
 80017e8:	f00f fbca 	bl	8010f80 <f_open>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <smart_watch_process+0x1a>
		while(1);
 80017f2:	bf00      	nop
 80017f4:	e7fd      	b.n	80017f2 <smart_watch_process+0x16>

	while(1)
	{

#ifdef DEBUG_TIME
		uint32_t tempStart = HAL_GetTick();
 80017f6:	f001 fdb7 	bl	8003368 <HAL_GetTick>
 80017fa:	6478      	str	r0, [r7, #68]	@ 0x44
#endif

		// Check if new file needs to be open
		file_handler(0);
 80017fc:	2000      	movs	r0, #0
 80017fe:	f000 fda9 	bl	8002354 <file_handler>

		// Video processing unit
		mjpeg_video_processing();
 8001802:	f000 fb43 	bl	8001e8c <mjpeg_video_processing>

		battery_management();
 8001806:	f000 fe23 	bl	8002450 <battery_management>

#ifdef DEBUG_TIME
		unsigned int bw = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		char buff[50];
		long unsigned int tempStop = HAL_GetTick();
 800180e:	f001 fdab 	bl	8003368 <HAL_GetTick>
 8001812:	6438      	str	r0, [r7, #64]	@ 0x40
		volatile long unsigned int tempDiff = ( ( tempStop - tempStart ) );
 8001814:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	63bb      	str	r3, [r7, #56]	@ 0x38
		snprintf(buff, sizeof(buff), "SPI time = %ld\n", tempDiff);
 800181c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800181e:	1d38      	adds	r0, r7, #4
 8001820:	4a11      	ldr	r2, [pc, #68]	@ (8001868 <smart_watch_process+0x8c>)
 8001822:	2132      	movs	r1, #50	@ 0x32
 8001824:	f010 fb28 	bl	8011e78 <sniprintf>
		f_write(&fileToWrite, buff, sizeof(buff), &bw);
 8001828:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800182c:	1d39      	adds	r1, r7, #4
 800182e:	2232      	movs	r2, #50	@ 0x32
 8001830:	480c      	ldr	r0, [pc, #48]	@ (8001864 <smart_watch_process+0x88>)
 8001832:	f00f fe9e 	bl	8011572 <f_write>

		if(video.video_mode == NORMAL_MODE)
 8001836:	4b0d      	ldr	r3, [pc, #52]	@ (800186c <smart_watch_process+0x90>)
 8001838:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800183c:	2b01      	cmp	r3, #1
 800183e:	d1da      	bne.n	80017f6 <smart_watch_process+0x1a>
		{

			count++;
 8001840:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <smart_watch_process+0x94>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	b29a      	uxth	r2, r3
 8001848:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <smart_watch_process+0x94>)
 800184a:	801a      	strh	r2, [r3, #0]
			if(count > 1000)
 800184c:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <smart_watch_process+0x94>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001854:	d9cf      	bls.n	80017f6 <smart_watch_process+0x1a>
				f_close(&fileToWrite);
 8001856:	4803      	ldr	r0, [pc, #12]	@ (8001864 <smart_watch_process+0x88>)
 8001858:	f010 f87e 	bl	8011958 <f_close>
	{
 800185c:	e7cb      	b.n	80017f6 <smart_watch_process+0x1a>
 800185e:	bf00      	nop
 8001860:	08012820 	.word	0x08012820
 8001864:	24000314 	.word	0x24000314
 8001868:	0801282c 	.word	0x0801282c
 800186c:	2400d200 	.word	0x2400d200
 8001870:	240bc244 	.word	0x240bc244

08001874 <lcd_draw>:
	}

}

int lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data, uint8_t swap)
{
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b089      	sub	sp, #36	@ 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	4604      	mov	r4, r0
 800187c:	4608      	mov	r0, r1
 800187e:	4611      	mov	r1, r2
 8001880:	461a      	mov	r2, r3
 8001882:	4623      	mov	r3, r4
 8001884:	80fb      	strh	r3, [r7, #6]
 8001886:	4603      	mov	r3, r0
 8001888:	80bb      	strh	r3, [r7, #4]
 800188a:	460b      	mov	r3, r1
 800188c:	807b      	strh	r3, [r7, #2]
 800188e:	4613      	mov	r3, r2
 8001890:	803b      	strh	r3, [r7, #0]

	   struct GC9A01_frame frame;

	   uint8_t *pdata;

	   int ret = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]


	   // Only half of the frame is handled per time
	   // Alternate the top and bottom half every cycle
	   if(swap)
 8001896:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00a      	beq.n	80018b4 <lcd_draw+0x40>
	   {

		   pdata = data;
 800189e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018a0:	61fb      	str	r3, [r7, #28]

	       frame.start.X = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	81bb      	strh	r3, [r7, #12]
	       frame.start.Y = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	81fb      	strh	r3, [r7, #14]
	       frame.end.X = 239;
 80018aa:	23ef      	movs	r3, #239	@ 0xef
 80018ac:	823b      	strh	r3, [r7, #16]
	       frame.end.Y = 119;
 80018ae:	2377      	movs	r3, #119	@ 0x77
 80018b0:	827b      	strh	r3, [r7, #18]
 80018b2:	e00b      	b.n	80018cc <lcd_draw+0x58>

	   }
	   else
	   {

		   pdata = &data[240 * 240];
 80018b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018b6:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 80018ba:	61fb      	str	r3, [r7, #28]

	       frame.start.X = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	81bb      	strh	r3, [r7, #12]
	       frame.start.Y = 120;
 80018c0:	2378      	movs	r3, #120	@ 0x78
 80018c2:	81fb      	strh	r3, [r7, #14]
	       frame.end.X = 239;
 80018c4:	23ef      	movs	r3, #239	@ 0xef
 80018c6:	823b      	strh	r3, [r7, #16]
	       frame.end.Y = 239;
 80018c8:	23ef      	movs	r3, #239	@ 0xef
 80018ca:	827b      	strh	r3, [r7, #18]

	   }

	   // Sends the block of data in a single time

	   GC9A01_set_frame(frame);
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018d4:	f7ff fb3b 	bl	8000f4e <GC9A01_set_frame>
	   GC9A01_write_command(MEM_WR);
 80018d8:	202c      	movs	r0, #44	@ 0x2c
 80018da:	f7ff f8b7 	bl	8000a4c <GC9A01_write_command>

	   GC9A01_set_data_command(ON);
 80018de:	2001      	movs	r0, #1
 80018e0:	f7ff f880 	bl	80009e4 <GC9A01_set_data_command>
	   GC9A01_set_chip_select(OFF);
 80018e4:	2000      	movs	r0, #0
 80018e6:	f7ff f897 	bl	8000a18 <GC9A01_set_chip_select>

	   uint32_t total_bytes = wd * ht;		// 2 byte per pixel
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	883a      	ldrh	r2, [r7, #0]
 80018ee:	fb02 f303 	mul.w	r3, r2, r3
 80018f2:	617b      	str	r3, [r7, #20]
	   ret = GC9A01_spi_tx(pdata, total_bytes);
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	4619      	mov	r1, r3
 80018fa:	69f8      	ldr	r0, [r7, #28]
 80018fc:	f7ff fb7a 	bl	8000ff4 <GC9A01_spi_tx>
 8001900:	61b8      	str	r0, [r7, #24]

	   GC9A01_set_chip_select(ON);
 8001902:	2001      	movs	r0, #1
 8001904:	f7ff f888 	bl	8000a18 <GC9A01_set_chip_select>

	   return ret;
 8001908:	69bb      	ldr	r3, [r7, #24]

}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	@ 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd90      	pop	{r4, r7, pc}
	...

08001914 <lcd_draw_opt>:


int lcd_draw_opt(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 8001914:	b5b0      	push	{r4, r5, r7, lr}
 8001916:	b0dc      	sub	sp, #368	@ 0x170
 8001918:	af02      	add	r7, sp, #8
 800191a:	4605      	mov	r5, r0
 800191c:	460c      	mov	r4, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001926:	f5a3 73b1 	sub.w	r3, r3, #354	@ 0x162
 800192a:	462a      	mov	r2, r5
 800192c:	801a      	strh	r2, [r3, #0]
 800192e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001932:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001936:	4622      	mov	r2, r4
 8001938:	801a      	strh	r2, [r3, #0]
 800193a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800193e:	f5a3 73b3 	sub.w	r3, r3, #358	@ 0x166
 8001942:	4602      	mov	r2, r0
 8001944:	801a      	strh	r2, [r3, #0]
 8001946:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800194a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800194e:	460a      	mov	r2, r1
 8001950:	801a      	strh	r2, [r3, #0]

	   struct GC9A01_frame frame;
	   static uint16_t full_update = 0;
	   int ret = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

       frame.start.X = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
       frame.start.Y = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
       frame.end.X = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
       frame.end.Y = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e

       uint16_t *data16 = (uint16_t *)data;
 8001970:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001974:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
       uint16_t *buff16o1 = (uint16_t *)output_data1;
 8001978:	4bcd      	ldr	r3, [pc, #820]	@ (8001cb0 <lcd_draw_opt+0x39c>)
 800197a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
       uint16_t *buff16o2 = (uint16_t *)output_data2;
 800197e:	4bcd      	ldr	r3, [pc, #820]	@ (8001cb4 <lcd_draw_opt+0x3a0>)
 8001980:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

       uint16_t block_to_send[PX_PER_BLOCK_X*PX_PER_BLOCK_Y] = {0};
 8001984:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001988:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800198c:	4618      	mov	r0, r3
 800198e:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001992:	461a      	mov	r2, r3
 8001994:	2100      	movs	r1, #0
 8001996:	f010 faa3 	bl	8011ee0 <memset>

       uint8_t update_flag = 1;
 800199a:	2301      	movs	r3, #1
 800199c:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
       uint8_t equal_count = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 3162 	strb.w	r3, [r7, #354]	@ 0x162

       uint32_t chunk_idx = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
       uint32_t block_idx = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
       uint32_t px_y_idx = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
       uint32_t idx = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

       uint8_t spare_flag = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	f887 3161 	strb.w	r3, [r7, #353]	@ 0x161


       if(full_update == 0)
 80019c4:	4bbc      	ldr	r3, [pc, #752]	@ (8001cb8 <lcd_draw_opt+0x3a4>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d153      	bne.n	8001a74 <lcd_draw_opt+0x160>
       {


    	   ret = lcd_draw(sx, sy, wd, ht, data, 0);
 80019cc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80019d0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80019d4:	881c      	ldrh	r4, [r3, #0]
 80019d6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80019da:	f5a3 73b3 	sub.w	r3, r3, #358	@ 0x166
 80019de:	881a      	ldrh	r2, [r3, #0]
 80019e0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80019e4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80019e8:	8819      	ldrh	r1, [r3, #0]
 80019ea:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80019ee:	f5a3 73b1 	sub.w	r3, r3, #354	@ 0x162
 80019f2:	8818      	ldrh	r0, [r3, #0]
 80019f4:	2300      	movs	r3, #0
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	4623      	mov	r3, r4
 8001a00:	f7ff ff38 	bl	8001874 <lcd_draw>
 8001a04:	f8c7 0164 	str.w	r0, [r7, #356]	@ 0x164
    	   ret |= lcd_draw(sx, sy, wd, ht, data, 1);
 8001a08:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001a0c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001a10:	881c      	ldrh	r4, [r3, #0]
 8001a12:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001a16:	f5a3 73b3 	sub.w	r3, r3, #358	@ 0x166
 8001a1a:	881a      	ldrh	r2, [r3, #0]
 8001a1c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001a20:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001a24:	8819      	ldrh	r1, [r3, #0]
 8001a26:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001a2a:	f5a3 73b1 	sub.w	r3, r3, #354	@ 0x162
 8001a2e:	8818      	ldrh	r0, [r3, #0]
 8001a30:	2301      	movs	r3, #1
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	f7ff ff1a 	bl	8001874 <lcd_draw>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001a46:	4313      	orrs	r3, r2
 8001a48:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

    	   full_update = ( ( full_update + 1 ) % FULL_UPDATE_PERIOD );
 8001a4c:	4b9a      	ldr	r3, [pc, #616]	@ (8001cb8 <lcd_draw_opt+0x3a4>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	4b9a      	ldr	r3, [pc, #616]	@ (8001cbc <lcd_draw_opt+0x3a8>)
 8001a54:	fb83 1302 	smull	r1, r3, r3, r2
 8001a58:	1119      	asrs	r1, r3, #4
 8001a5a:	17d3      	asrs	r3, r2, #31
 8001a5c:	1ac9      	subs	r1, r1, r3
 8001a5e:	460b      	mov	r3, r1
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	1ad1      	subs	r1, r2, r3
 8001a68:	b28a      	uxth	r2, r1
 8001a6a:	4b93      	ldr	r3, [pc, #588]	@ (8001cb8 <lcd_draw_opt+0x3a4>)
 8001a6c:	801a      	strh	r2, [r3, #0]

    	   return ret;
 8001a6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001a72:	e206      	b.n	8001e82 <lcd_draw_opt+0x56e>

       }

       full_update = ( ( full_update + 1 ) % FULL_UPDATE_PERIOD );
 8001a74:	4b90      	ldr	r3, [pc, #576]	@ (8001cb8 <lcd_draw_opt+0x3a4>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	4b90      	ldr	r3, [pc, #576]	@ (8001cbc <lcd_draw_opt+0x3a8>)
 8001a7c:	fb83 1302 	smull	r1, r3, r3, r2
 8001a80:	1119      	asrs	r1, r3, #4
 8001a82:	17d3      	asrs	r3, r2, #31
 8001a84:	1ac9      	subs	r1, r1, r3
 8001a86:	460b      	mov	r3, r1
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	1ad1      	subs	r1, r2, r3
 8001a90:	b28a      	uxth	r2, r1
 8001a92:	4b89      	ldr	r3, [pc, #548]	@ (8001cb8 <lcd_draw_opt+0x3a4>)
 8001a94:	801a      	strh	r2, [r3, #0]

       for(int i = 0 ; i < CHUNKS_NUM ; i++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001a9c:	e1ea      	b.n	8001e74 <lcd_draw_opt+0x560>
       {

    	   chunk_idx = ( i * PX_PER_BLOCK_X * 240 );
 8001a9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001aa2:	f44f 6234 	mov.w	r2, #2880	@ 0xb40
 8001aa6:	fb02 f303 	mul.w	r3, r2, r3
 8001aaa:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

    	   for(int j = 0 ; j < BLOCKS_PER_CHUNK ; j++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001ab4:	e1d4      	b.n	8001e60 <lcd_draw_opt+0x54c>
    	   {

    		   block_idx = ( j * PX_PER_BLOCK_X );
 8001ab6:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

   	    	   frame.start.X = ( j * PX_PER_BLOCK_X );
 8001ac6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	0052      	lsls	r2, r2, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
   	    	   frame.start.Y = ( i * PX_PER_BLOCK_Y );
 8001ada:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	0052      	lsls	r2, r2, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
   	    	   frame.end.X = ( frame.start.X + PX_PER_BLOCK_X - 1 );
 8001aee:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8001af2:	330b      	adds	r3, #11
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
    	       frame.end.Y = ( frame.start.Y + PX_PER_BLOCK_Y - 1 );
 8001afa:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001afe:	330b      	adds	r3, #11
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e

    		   for(int h = 0 ; h < PX_PER_BLOCK_Y ; h++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001b0c:	e174      	b.n	8001df8 <lcd_draw_opt+0x4e4>
    		   {

    			   px_y_idx = ( h * 240 );
 8001b0e:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8001b12:	4613      	mov	r3, r2
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	1a9b      	subs	r3, r3, r2
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

   				   for(int z = 0 ; z < PX_PER_BLOCK_X ; z++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001b24:	e15a      	b.n	8001ddc <lcd_draw_opt+0x4c8>
   				   {

   					   idx = ( chunk_idx + block_idx + px_y_idx + z);
 8001b26:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001b2a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001b2e:	441a      	add	r2, r3
 8001b30:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001b34:	441a      	add	r2, r3
 8001b36:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

   					   block_to_send[(h*PX_PER_BLOCK_X)+z] = data16[idx];
 8001b40:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001b4a:	18d1      	adds	r1, r2, r3
 8001b4c:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8001b50:	4613      	mov	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001b5e:	441a      	add	r2, r3
 8001b60:	8809      	ldrh	r1, [r1, #0]
 8001b62:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001b66:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001b6a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

   	        	       // Check if we are outside the round mask
   	        	       if( CIRCLE_MASK(frame.start.X, frame.start.Y)
 8001b6e:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8001b72:	2b76      	cmp	r3, #118	@ 0x76
 8001b74:	d903      	bls.n	8001b7e <lcd_draw_opt+0x26a>
 8001b76:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8001b7a:	3b77      	subs	r3, #119	@ 0x77
 8001b7c:	e003      	b.n	8001b86 <lcd_draw_opt+0x272>
 8001b7e:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8001b82:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 8001b86:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 8001b8a:	2a76      	cmp	r2, #118	@ 0x76
 8001b8c:	d903      	bls.n	8001b96 <lcd_draw_opt+0x282>
 8001b8e:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 8001b92:	3a77      	subs	r2, #119	@ 0x77
 8001b94:	e003      	b.n	8001b9e <lcd_draw_opt+0x28a>
 8001b96:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 8001b9a:	f1c2 0277 	rsb	r2, r2, #119	@ 0x77
 8001b9e:	fb02 f103 	mul.w	r1, r2, r3
 8001ba2:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001ba6:	2b76      	cmp	r3, #118	@ 0x76
 8001ba8:	d903      	bls.n	8001bb2 <lcd_draw_opt+0x29e>
 8001baa:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001bae:	3b77      	subs	r3, #119	@ 0x77
 8001bb0:	e003      	b.n	8001bba <lcd_draw_opt+0x2a6>
 8001bb2:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001bb6:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 8001bba:	f8b7 212a 	ldrh.w	r2, [r7, #298]	@ 0x12a
 8001bbe:	2a76      	cmp	r2, #118	@ 0x76
 8001bc0:	d903      	bls.n	8001bca <lcd_draw_opt+0x2b6>
 8001bc2:	f8b7 212a 	ldrh.w	r2, [r7, #298]	@ 0x12a
 8001bc6:	3a77      	subs	r2, #119	@ 0x77
 8001bc8:	e003      	b.n	8001bd2 <lcd_draw_opt+0x2be>
 8001bca:	f8b7 212a 	ldrh.w	r2, [r7, #298]	@ 0x12a
 8001bce:	f1c2 0277 	rsb	r2, r2, #119	@ 0x77
 8001bd2:	fb02 f303 	mul.w	r3, r2, r3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f243 7250 	movw	r2, #14160	@ 0x3750
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	f340 80b7 	ble.w	8001d50 <lcd_draw_opt+0x43c>
   	        	    		   && CIRCLE_MASK(frame.start.X, frame.end.Y)
 8001be2:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8001be6:	2b76      	cmp	r3, #118	@ 0x76
 8001be8:	d903      	bls.n	8001bf2 <lcd_draw_opt+0x2de>
 8001bea:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8001bee:	3b77      	subs	r3, #119	@ 0x77
 8001bf0:	e003      	b.n	8001bfa <lcd_draw_opt+0x2e6>
 8001bf2:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8001bf6:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 8001bfa:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 8001bfe:	2a76      	cmp	r2, #118	@ 0x76
 8001c00:	d903      	bls.n	8001c0a <lcd_draw_opt+0x2f6>
 8001c02:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 8001c06:	3a77      	subs	r2, #119	@ 0x77
 8001c08:	e003      	b.n	8001c12 <lcd_draw_opt+0x2fe>
 8001c0a:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 8001c0e:	f1c2 0277 	rsb	r2, r2, #119	@ 0x77
 8001c12:	fb02 f103 	mul.w	r1, r2, r3
 8001c16:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8001c1a:	2b76      	cmp	r3, #118	@ 0x76
 8001c1c:	d903      	bls.n	8001c26 <lcd_draw_opt+0x312>
 8001c1e:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8001c22:	3b77      	subs	r3, #119	@ 0x77
 8001c24:	e003      	b.n	8001c2e <lcd_draw_opt+0x31a>
 8001c26:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8001c2a:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 8001c2e:	f8b7 212e 	ldrh.w	r2, [r7, #302]	@ 0x12e
 8001c32:	2a76      	cmp	r2, #118	@ 0x76
 8001c34:	d903      	bls.n	8001c3e <lcd_draw_opt+0x32a>
 8001c36:	f8b7 212e 	ldrh.w	r2, [r7, #302]	@ 0x12e
 8001c3a:	3a77      	subs	r2, #119	@ 0x77
 8001c3c:	e003      	b.n	8001c46 <lcd_draw_opt+0x332>
 8001c3e:	f8b7 212e 	ldrh.w	r2, [r7, #302]	@ 0x12e
 8001c42:	f1c2 0277 	rsb	r2, r2, #119	@ 0x77
 8001c46:	fb02 f303 	mul.w	r3, r2, r3
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f243 7250 	movw	r2, #14160	@ 0x3750
 8001c50:	4293      	cmp	r3, r2
 8001c52:	dd7d      	ble.n	8001d50 <lcd_draw_opt+0x43c>
							   && CIRCLE_MASK(frame.end.X, frame.start.Y)
 8001c54:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8001c58:	2b76      	cmp	r3, #118	@ 0x76
 8001c5a:	d903      	bls.n	8001c64 <lcd_draw_opt+0x350>
 8001c5c:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8001c60:	3b77      	subs	r3, #119	@ 0x77
 8001c62:	e003      	b.n	8001c6c <lcd_draw_opt+0x358>
 8001c64:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8001c68:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 8001c6c:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 8001c70:	2a76      	cmp	r2, #118	@ 0x76
 8001c72:	d903      	bls.n	8001c7c <lcd_draw_opt+0x368>
 8001c74:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 8001c78:	3a77      	subs	r2, #119	@ 0x77
 8001c7a:	e003      	b.n	8001c84 <lcd_draw_opt+0x370>
 8001c7c:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 8001c80:	f1c2 0277 	rsb	r2, r2, #119	@ 0x77
 8001c84:	fb02 f103 	mul.w	r1, r2, r3
 8001c88:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001c8c:	2b76      	cmp	r3, #118	@ 0x76
 8001c8e:	d903      	bls.n	8001c98 <lcd_draw_opt+0x384>
 8001c90:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001c94:	3b77      	subs	r3, #119	@ 0x77
 8001c96:	e003      	b.n	8001ca0 <lcd_draw_opt+0x38c>
 8001c98:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001c9c:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 8001ca0:	f8b7 212a 	ldrh.w	r2, [r7, #298]	@ 0x12a
 8001ca4:	2a76      	cmp	r2, #118	@ 0x76
 8001ca6:	d90b      	bls.n	8001cc0 <lcd_draw_opt+0x3ac>
 8001ca8:	f8b7 212a 	ldrh.w	r2, [r7, #298]	@ 0x12a
 8001cac:	3a77      	subs	r2, #119	@ 0x77
 8001cae:	e00b      	b.n	8001cc8 <lcd_draw_opt+0x3b4>
 8001cb0:	24058244 	.word	0x24058244
 8001cb4:	2408a244 	.word	0x2408a244
 8001cb8:	240bc246 	.word	0x240bc246
 8001cbc:	66666667 	.word	0x66666667
 8001cc0:	f8b7 212a 	ldrh.w	r2, [r7, #298]	@ 0x12a
 8001cc4:	f1c2 0277 	rsb	r2, r2, #119	@ 0x77
 8001cc8:	fb02 f303 	mul.w	r3, r2, r3
 8001ccc:	440b      	add	r3, r1
 8001cce:	f243 7250 	movw	r2, #14160	@ 0x3750
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	dd3c      	ble.n	8001d50 <lcd_draw_opt+0x43c>
							   && CIRCLE_MASK(frame.end.X, frame.end.Y) )
 8001cd6:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8001cda:	2b76      	cmp	r3, #118	@ 0x76
 8001cdc:	d903      	bls.n	8001ce6 <lcd_draw_opt+0x3d2>
 8001cde:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8001ce2:	3b77      	subs	r3, #119	@ 0x77
 8001ce4:	e003      	b.n	8001cee <lcd_draw_opt+0x3da>
 8001ce6:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8001cea:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 8001cee:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 8001cf2:	2a76      	cmp	r2, #118	@ 0x76
 8001cf4:	d903      	bls.n	8001cfe <lcd_draw_opt+0x3ea>
 8001cf6:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 8001cfa:	3a77      	subs	r2, #119	@ 0x77
 8001cfc:	e003      	b.n	8001d06 <lcd_draw_opt+0x3f2>
 8001cfe:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 8001d02:	f1c2 0277 	rsb	r2, r2, #119	@ 0x77
 8001d06:	fb02 f103 	mul.w	r1, r2, r3
 8001d0a:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8001d0e:	2b76      	cmp	r3, #118	@ 0x76
 8001d10:	d903      	bls.n	8001d1a <lcd_draw_opt+0x406>
 8001d12:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8001d16:	3b77      	subs	r3, #119	@ 0x77
 8001d18:	e003      	b.n	8001d22 <lcd_draw_opt+0x40e>
 8001d1a:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8001d1e:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 8001d22:	f8b7 212e 	ldrh.w	r2, [r7, #302]	@ 0x12e
 8001d26:	2a76      	cmp	r2, #118	@ 0x76
 8001d28:	d903      	bls.n	8001d32 <lcd_draw_opt+0x41e>
 8001d2a:	f8b7 212e 	ldrh.w	r2, [r7, #302]	@ 0x12e
 8001d2e:	3a77      	subs	r2, #119	@ 0x77
 8001d30:	e003      	b.n	8001d3a <lcd_draw_opt+0x426>
 8001d32:	f8b7 212e 	ldrh.w	r2, [r7, #302]	@ 0x12e
 8001d36:	f1c2 0277 	rsb	r2, r2, #119	@ 0x77
 8001d3a:	fb02 f303 	mul.w	r3, r2, r3
 8001d3e:	440b      	add	r3, r1
 8001d40:	f243 7250 	movw	r2, #14160	@ 0x3750
 8001d44:	4293      	cmp	r3, r2
 8001d46:	dd03      	ble.n	8001d50 <lcd_draw_opt+0x43c>
   	        	       {

   	        	    	   // We are outside the round mask

   	        	    	   // Always skip here
   	        	    	   update_flag =0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
   	        	    	   break;
 8001d4e:	e04a      	b.n	8001de6 <lcd_draw_opt+0x4d2>

   	        	       }

   					   // Check if we are close to the boundaries
   	        	       if(( frame.start.X <= BORDER_START ) || ( frame.start.Y <= BORDER_START )
 8001d50:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8001d54:	2b18      	cmp	r3, #24
 8001d56:	d90b      	bls.n	8001d70 <lcd_draw_opt+0x45c>
 8001d58:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001d5c:	2b18      	cmp	r3, #24
 8001d5e:	d907      	bls.n	8001d70 <lcd_draw_opt+0x45c>
   	        	    		|| ( frame.end.X >= (PX_IN_A_RAW - BORDER_END ) ) || ( frame.end.Y >= ( PX_IN_A_RAW - BORDER_END ) ) )
 8001d60:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8001d64:	2bd7      	cmp	r3, #215	@ 0xd7
 8001d66:	d803      	bhi.n	8001d70 <lcd_draw_opt+0x45c>
 8001d68:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8001d6c:	2bd7      	cmp	r3, #215	@ 0xd7
 8001d6e:	d903      	bls.n	8001d78 <lcd_draw_opt+0x464>
   	        	       {

   	        	    	   // We are close to the boundaries

   	        	    	   // Always update here
   	        	    	   update_flag = 1;
 8001d70:	2301      	movs	r3, #1
 8001d72:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
   	        	    	   continue;
 8001d76:	e02c      	b.n	8001dd2 <lcd_draw_opt+0x4be>

   	        	       }

   					   if(( spare_flag == 0 ) && ( buff16o1[idx] == buff16o2[idx] ))
 8001d78:	f897 3161 	ldrb.w	r3, [r7, #353]	@ 0x161
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d11c      	bne.n	8001dba <lcd_draw_opt+0x4a6>
 8001d80:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001d8a:	4413      	add	r3, r2
 8001d8c:	881a      	ldrh	r2, [r3, #0]
 8001d8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001d98:	440b      	add	r3, r1
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d10c      	bne.n	8001dba <lcd_draw_opt+0x4a6>
   					   {

   						   equal_count++;
 8001da0:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 8001da4:	3301      	adds	r3, #1
 8001da6:	f887 3162 	strb.w	r3, [r7, #354]	@ 0x162

   						   if(equal_count >= MAX_EQU_NUM)
 8001daa:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 8001dae:	2b1a      	cmp	r3, #26
 8001db0:	d903      	bls.n	8001dba <lcd_draw_opt+0x4a6>
   						   {

   							   update_flag = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
   							   break;
 8001db8:	e015      	b.n	8001de6 <lcd_draw_opt+0x4d2>

   						   }

   					   }

   					   spare_flag = ( ( spare_flag + 1 ) % SPARE_DIV_FACT );
 8001dba:	f897 3161 	ldrb.w	r3, [r7, #353]	@ 0x161
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	425a      	negs	r2, r3
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	f002 0203 	and.w	r2, r2, #3
 8001dca:	bf58      	it	pl
 8001dcc:	4253      	negpl	r3, r2
 8001dce:	f887 3161 	strb.w	r3, [r7, #353]	@ 0x161
   				   for(int z = 0 ; z < PX_PER_BLOCK_X ; z++)
 8001dd2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001ddc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001de0:	2b0b      	cmp	r3, #11
 8001de2:	f77f aea0 	ble.w	8001b26 <lcd_draw_opt+0x212>

   				   }

   				   if(update_flag == 0)
 8001de6:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00a      	beq.n	8001e04 <lcd_draw_opt+0x4f0>
    		   for(int h = 0 ; h < PX_PER_BLOCK_Y ; h++)
 8001dee:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001df2:	3301      	adds	r3, #1
 8001df4:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001df8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001dfc:	2b0b      	cmp	r3, #11
 8001dfe:	f77f ae86 	ble.w	8001b0e <lcd_draw_opt+0x1fa>
 8001e02:	e000      	b.n	8001e06 <lcd_draw_opt+0x4f2>
   					   break;
 8001e04:	bf00      	nop

    		   }

    		   if(update_flag)
 8001e06:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d01d      	beq.n	8001e4a <lcd_draw_opt+0x536>
    		   {

    			   GC9A01_set_frame(frame);
 8001e0e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001e12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e16:	f7ff f89a 	bl	8000f4e <GC9A01_set_frame>
    			   GC9A01_write_command(MEM_WR);
 8001e1a:	202c      	movs	r0, #44	@ 0x2c
 8001e1c:	f7fe fe16 	bl	8000a4c <GC9A01_write_command>

    			   GC9A01_set_data_command(ON);
 8001e20:	2001      	movs	r0, #1
 8001e22:	f7fe fddf 	bl	80009e4 <GC9A01_set_data_command>
    			   GC9A01_set_chip_select(OFF);
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7fe fdf6 	bl	8000a18 <GC9A01_set_chip_select>

    			   uint32_t total_bytes = ( BLOCK_SIZE * 2 );		// 2 byte per pixel
 8001e2c:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001e30:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    			   ret = GC9A01_spi_tx((uint8_t *)block_to_send, total_bytes);
 8001e34:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	f107 0308 	add.w	r3, r7, #8
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff f8d7 	bl	8000ff4 <GC9A01_spi_tx>
 8001e46:	f8c7 0164 	str.w	r0, [r7, #356]	@ 0x164

    			   //GC9A01_set_chip_select(ON);

    		   }

    		   equal_count = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f887 3162 	strb.w	r3, [r7, #354]	@ 0x162
    		   update_flag = 1;
 8001e50:	2301      	movs	r3, #1
 8001e52:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
    	   for(int j = 0 ; j < BLOCKS_PER_CHUNK ; j++)
 8001e56:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001e60:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001e64:	2b13      	cmp	r3, #19
 8001e66:	f77f ae26 	ble.w	8001ab6 <lcd_draw_opt+0x1a2>
       for(int i = 0 ; i < CHUNKS_NUM ; i++)
 8001e6a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001e74:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001e78:	2b13      	cmp	r3, #19
 8001e7a:	f77f ae10 	ble.w	8001a9e <lcd_draw_opt+0x18a>

    	   }

       }

	   return ret;
 8001e7e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164

}
 8001e82:	4618      	mov	r0, r3
 8001e84:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bdb0      	pop	{r4, r5, r7, pc}

08001e8c <mjpeg_video_processing>:
}

/************************** PRIVATE FUNCTIONS **************************/

static void mjpeg_video_processing(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0

	switch(video.video_mode)
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <mjpeg_video_processing+0x20>)
 8001e92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d002      	beq.n	8001ea0 <mjpeg_video_processing+0x14>
	{

		default:
		case SETTING_MODE:

			clock_setting();
 8001e9a:	f000 f937 	bl	800210c <clock_setting>

			break;
 8001e9e:	e002      	b.n	8001ea6 <mjpeg_video_processing+0x1a>

		case NORMAL_MODE:

			clock_normal();
 8001ea0:	f000 f806 	bl	8001eb0 <clock_normal>

			break;
 8001ea4:	bf00      	nop

	}

}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	2400d200 	.word	0x2400d200

08001eb0 <clock_normal>:

static void clock_normal(void)
{
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af02      	add	r7, sp, #8
#endif



	// Save the frame into MJPEG_VideoBuffer
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	4989      	ldr	r1, [pc, #548]	@ (80020e0 <clock_normal+0x230>)
 8001eba:	488a      	ldr	r0, [pc, #552]	@ (80020e4 <clock_normal+0x234>)
 8001ebc:	f7fe fcc4 	bl	8000848 <AVI_GetFrame>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	4b88      	ldr	r3, [pc, #544]	@ (80020e8 <clock_normal+0x238>)
 8001ec6:	75da      	strb	r2, [r3, #23]

	if(video.frameToSkip > 0)
 8001ec8:	4b87      	ldr	r3, [pc, #540]	@ (80020e8 <clock_normal+0x238>)
 8001eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	dd0f      	ble.n	8001ef0 <clock_normal+0x40>
	{

		// Skip frames until the the watch time is
		// synchronized with the actual time

		video.frameToSkip--;
 8001ed0:	4b85      	ldr	r3, [pc, #532]	@ (80020e8 <clock_normal+0x238>)
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	4a84      	ldr	r2, [pc, #528]	@ (80020e8 <clock_normal+0x238>)
 8001ed8:	6253      	str	r3, [r2, #36]	@ 0x24
		AVI_Handel.CurrentImage++;
 8001eda:	4b82      	ldr	r3, [pc, #520]	@ (80020e4 <clock_normal+0x234>)
 8001edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ede:	3301      	adds	r3, #1
 8001ee0:	4a80      	ldr	r2, [pc, #512]	@ (80020e4 <clock_normal+0x234>)
 8001ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c
		video.frameCount++;
 8001ee4:	4b80      	ldr	r3, [pc, #512]	@ (80020e8 <clock_normal+0x238>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	4a7f      	ldr	r2, [pc, #508]	@ (80020e8 <clock_normal+0x238>)
 8001eec:	6213      	str	r3, [r2, #32]
		HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);

	}

}
 8001eee:	e0ec      	b.n	80020ca <clock_normal+0x21a>
	else if(video.FrameType == AVI_VIDEO_FRAME)
 8001ef0:	4b7d      	ldr	r3, [pc, #500]	@ (80020e8 <clock_normal+0x238>)
 8001ef2:	7ddb      	ldrb	r3, [r3, #23]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	f040 80e8 	bne.w	80020ca <clock_normal+0x21a>
		AVI_Handel.CurrentImage++;
 8001efa:	4b7a      	ldr	r3, [pc, #488]	@ (80020e4 <clock_normal+0x234>)
 8001efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efe:	3301      	adds	r3, #1
 8001f00:	4a78      	ldr	r2, [pc, #480]	@ (80020e4 <clock_normal+0x234>)
 8001f02:	62d3      	str	r3, [r2, #44]	@ 0x2c
		video.frameCount++;
 8001f04:	4b78      	ldr	r3, [pc, #480]	@ (80020e8 <clock_normal+0x238>)
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	4a77      	ldr	r2, [pc, #476]	@ (80020e8 <clock_normal+0x238>)
 8001f0c:	6213      	str	r3, [r2, #32]
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8001f0e:	4977      	ldr	r1, [pc, #476]	@ (80020ec <clock_normal+0x23c>)
 8001f10:	4b74      	ldr	r3, [pc, #464]	@ (80020e4 <clock_normal+0x234>)
 8001f12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f14:	4b74      	ldr	r3, [pc, #464]	@ (80020e8 <clock_normal+0x238>)
 8001f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f18:	4875      	ldr	r0, [pc, #468]	@ (80020f0 <clock_normal+0x240>)
 8001f1a:	f7ff f88d 	bl	8001038 <JPEG_Decode_DMA>
		while(Jpeg_HWDecodingEnd == 0);
 8001f1e:	bf00      	nop
 8001f20:	4b74      	ldr	r3, [pc, #464]	@ (80020f4 <clock_normal+0x244>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0fb      	beq.n	8001f20 <clock_normal+0x70>
		if(video.isfirstFrame == 1)
 8001f28:	4b6f      	ldr	r3, [pc, #444]	@ (80020e8 <clock_normal+0x238>)
 8001f2a:	7d9b      	ldrb	r3, [r3, #22]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d14d      	bne.n	8001fcc <clock_normal+0x11c>
			video.isfirstFrame = 0;
 8001f30:	4b6d      	ldr	r3, [pc, #436]	@ (80020e8 <clock_normal+0x238>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	759a      	strb	r2, [r3, #22]
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8001f36:	4970      	ldr	r1, [pc, #448]	@ (80020f8 <clock_normal+0x248>)
 8001f38:	486d      	ldr	r0, [pc, #436]	@ (80020f0 <clock_normal+0x240>)
 8001f3a:	f004 f88f 	bl	800605c <HAL_JPEG_GetInfo>
			DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 8001f3e:	4b6e      	ldr	r3, [pc, #440]	@ (80020f8 <clock_normal+0x248>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4a6c      	ldr	r2, [pc, #432]	@ (80020f8 <clock_normal+0x248>)
 8001f46:	6892      	ldr	r2, [r2, #8]
 8001f48:	b291      	uxth	r1, r2
 8001f4a:	4a6b      	ldr	r2, [pc, #428]	@ (80020f8 <clock_normal+0x248>)
 8001f4c:	6852      	ldr	r2, [r2, #4]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 fc78 	bl	8002844 <DMA2D_Init>
			video.width = JPEG_Info.ImageWidth;
 8001f54:	4b68      	ldr	r3, [pc, #416]	@ (80020f8 <clock_normal+0x248>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	4b63      	ldr	r3, [pc, #396]	@ (80020e8 <clock_normal+0x238>)
 8001f5c:	831a      	strh	r2, [r3, #24]
			video.height = JPEG_Info.ImageHeight;
 8001f5e:	4b66      	ldr	r3, [pc, #408]	@ (80020f8 <clock_normal+0x248>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	4b60      	ldr	r3, [pc, #384]	@ (80020e8 <clock_normal+0x238>)
 8001f66:	835a      	strh	r2, [r3, #26]
			video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 8001f68:	4b5f      	ldr	r3, [pc, #380]	@ (80020e8 <clock_normal+0x238>)
 8001f6a:	8b1b      	ldrh	r3, [r3, #24]
 8001f6c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	da00      	bge.n	8001f76 <clock_normal+0xc6>
 8001f74:	3301      	adds	r3, #1
 8001f76:	105b      	asrs	r3, r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	4b5b      	ldr	r3, [pc, #364]	@ (80020e8 <clock_normal+0x238>)
 8001f7c:	839a      	strh	r2, [r3, #28]
			video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 8001f7e:	4b5a      	ldr	r3, [pc, #360]	@ (80020e8 <clock_normal+0x238>)
 8001f80:	8b5b      	ldrh	r3, [r3, #26]
 8001f82:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	da00      	bge.n	8001f8c <clock_normal+0xdc>
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	105b      	asrs	r3, r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	4b55      	ldr	r3, [pc, #340]	@ (80020e8 <clock_normal+0x238>)
 8001f92:	83da      	strh	r2, [r3, #30]
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 8001f94:	4b53      	ldr	r3, [pc, #332]	@ (80020e4 <clock_normal+0x234>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001fa0:	ed9f 5b4d 	vldr	d5, [pc, #308]	@ 80020d8 <clock_normal+0x228>
 8001fa4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001fa8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001fac:	4b4e      	ldr	r3, [pc, #312]	@ (80020e8 <clock_normal+0x238>)
 8001fae:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			video.tick_offset = HAL_GetTick();									// Tick offset from 0
 8001fb2:	f001 f9d9 	bl	8003368 <HAL_GetTick>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4a4b      	ldr	r2, [pc, #300]	@ (80020e8 <clock_normal+0x238>)
 8001fba:	6313      	str	r3, [r2, #48]	@ 0x30
			video.frameCount = 1;												// Reset the count here for every first frame of the minute chunk
 8001fbc:	4b4a      	ldr	r3, [pc, #296]	@ (80020e8 <clock_normal+0x238>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	621a      	str	r2, [r3, #32]
			HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	4948      	ldr	r1, [pc, #288]	@ (80020e8 <clock_normal+0x238>)
 8001fc6:	484d      	ldr	r0, [pc, #308]	@ (80020fc <clock_normal+0x24c>)
 8001fc8:	f009 fe9a 	bl	800bd00 <HAL_RTC_SetTime>
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8001fcc:	4b46      	ldr	r3, [pc, #280]	@ (80020e8 <clock_normal+0x238>)
 8001fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	4b4b      	ldr	r3, [pc, #300]	@ (8002100 <clock_normal+0x250>)
 8001fd4:	6819      	ldr	r1, [r3, #0]
 8001fd6:	4b48      	ldr	r3, [pc, #288]	@ (80020f8 <clock_normal+0x248>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	4b46      	ldr	r3, [pc, #280]	@ (80020f8 <clock_normal+0x248>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	f000 fcad 	bl	8002940 <DMA2D_CopyBuffer>
		pOut.u8Arr = (uint8_t *)outputData;
 8001fe6:	4b46      	ldr	r3, [pc, #280]	@ (8002100 <clock_normal+0x250>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	607b      	str	r3, [r7, #4]
		depth24To16(&pOut, ( video.width * video.height ), 3);
 8001fec:	4b3e      	ldr	r3, [pc, #248]	@ (80020e8 <clock_normal+0x238>)
 8001fee:	8b1a      	ldrh	r2, [r3, #24]
 8001ff0:	4b3d      	ldr	r3, [pc, #244]	@ (80020e8 <clock_normal+0x238>)
 8001ff2:	8b5b      	ldrh	r3, [r3, #26]
 8001ff4:	fb12 f303 	smulbb	r3, r2, r3
 8001ff8:	b299      	uxth	r1, r3
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fa8a 	bl	8002518 <depth24To16>
		lcd_draw_opt(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr);
 8002004:	4b38      	ldr	r3, [pc, #224]	@ (80020e8 <clock_normal+0x238>)
 8002006:	8b98      	ldrh	r0, [r3, #28]
 8002008:	4b37      	ldr	r3, [pc, #220]	@ (80020e8 <clock_normal+0x238>)
 800200a:	8bd9      	ldrh	r1, [r3, #30]
 800200c:	4b36      	ldr	r3, [pc, #216]	@ (80020e8 <clock_normal+0x238>)
 800200e:	8b1a      	ldrh	r2, [r3, #24]
 8002010:	4b35      	ldr	r3, [pc, #212]	@ (80020e8 <clock_normal+0x238>)
 8002012:	8b5c      	ldrh	r4, [r3, #26]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	4623      	mov	r3, r4
 800201a:	f7ff fc7b 	bl	8001914 <lcd_draw_opt>
		outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 800201e:	4b38      	ldr	r3, [pc, #224]	@ (8002100 <clock_normal+0x250>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a38      	ldr	r2, [pc, #224]	@ (8002104 <clock_normal+0x254>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d101      	bne.n	800202c <clock_normal+0x17c>
 8002028:	4b37      	ldr	r3, [pc, #220]	@ (8002108 <clock_normal+0x258>)
 800202a:	e000      	b.n	800202e <clock_normal+0x17e>
 800202c:	4b35      	ldr	r3, [pc, #212]	@ (8002104 <clock_normal+0x254>)
 800202e:	4a34      	ldr	r2, [pc, #208]	@ (8002100 <clock_normal+0x250>)
 8002030:	6013      	str	r3, [r2, #0]
		video.actual_time = ( HAL_GetTick() - video.tick_offset );
 8002032:	f001 f999 	bl	8003368 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	4b2b      	ldr	r3, [pc, #172]	@ (80020e8 <clock_normal+0x238>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	4a2a      	ldr	r2, [pc, #168]	@ (80020e8 <clock_normal+0x238>)
 8002040:	62d3      	str	r3, [r2, #44]	@ 0x2c
		float watch_time = ( video.frameCount * video.frame_time );
 8002042:	4b29      	ldr	r3, [pc, #164]	@ (80020e8 <clock_normal+0x238>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	ee07 3a90 	vmov	s15, r3
 800204a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800204e:	4b26      	ldr	r3, [pc, #152]	@ (80020e8 <clock_normal+0x238>)
 8002050:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002058:	edc7 7a03 	vstr	s15, [r7, #12]
		int time_diff = ( video.actual_time - watch_time );
 800205c:	4b22      	ldr	r3, [pc, #136]	@ (80020e8 <clock_normal+0x238>)
 800205e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002060:	ee07 3a90 	vmov	s15, r3
 8002064:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002068:	edd7 7a03 	vldr	s15, [r7, #12]
 800206c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002074:	ee17 3a90 	vmov	r3, s15
 8002078:	60bb      	str	r3, [r7, #8]
		video.frameToSkip = ( time_diff / video.frame_time );
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	ee07 3a90 	vmov	s15, r3
 8002080:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002084:	4b18      	ldr	r3, [pc, #96]	@ (80020e8 <clock_normal+0x238>)
 8002086:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800208a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800208e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002092:	ee17 2a90 	vmov	r2, s15
 8002096:	4b14      	ldr	r3, [pc, #80]	@ (80020e8 <clock_normal+0x238>)
 8002098:	625a      	str	r2, [r3, #36]	@ 0x24
		if(time_diff < 0)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	da07      	bge.n	80020b0 <clock_normal+0x200>
			HAL_Delay(-time_diff);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	425b      	negs	r3, r3
 80020a4:	4618      	mov	r0, r3
 80020a6:	f001 f96b 	bl	8003380 <HAL_Delay>
			video.frameToSkip = 0;
 80020aa:	4b0f      	ldr	r3, [pc, #60]	@ (80020e8 <clock_normal+0x238>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	625a      	str	r2, [r3, #36]	@ 0x24
		RTC_DateTypeDef sDate = {0};
 80020b0:	2300      	movs	r3, #0
 80020b2:	603b      	str	r3, [r7, #0]
		HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 80020b4:	2200      	movs	r2, #0
 80020b6:	490c      	ldr	r1, [pc, #48]	@ (80020e8 <clock_normal+0x238>)
 80020b8:	4810      	ldr	r0, [pc, #64]	@ (80020fc <clock_normal+0x24c>)
 80020ba:	f009 febf 	bl	800be3c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80020be:	463b      	mov	r3, r7
 80020c0:	2200      	movs	r2, #0
 80020c2:	4619      	mov	r1, r3
 80020c4:	480d      	ldr	r0, [pc, #52]	@ (80020fc <clock_normal+0x24c>)
 80020c6:	f009 ff9d 	bl	800c004 <HAL_RTC_GetDate>
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd90      	pop	{r4, r7, pc}
 80020d2:	bf00      	nop
 80020d4:	f3af 8000 	nop.w
 80020d8:	00000000 	.word	0x00000000
 80020dc:	408f4000 	.word	0x408f4000
 80020e0:	24000788 	.word	0x24000788
 80020e4:	240009b8 	.word	0x240009b8
 80020e8:	2400d200 	.word	0x2400d200
 80020ec:	24000a00 	.word	0x24000a00
 80020f0:	24000218 	.word	0x24000218
 80020f4:	24000088 	.word	0x24000088
 80020f8:	240002d8 	.word	0x240002d8
 80020fc:	240002ec 	.word	0x240002ec
 8002100:	24000000 	.word	0x24000000
 8002104:	24058244 	.word	0x24058244
 8002108:	2408a244 	.word	0x2408a244

0800210c <clock_setting>:

static void clock_setting(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0

	switch(video.set)
 8002110:	4b8b      	ldr	r3, [pc, #556]	@ (8002340 <clock_setting+0x234>)
 8002112:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002116:	2b03      	cmp	r3, #3
 8002118:	f000 80ff 	beq.w	800231a <clock_setting+0x20e>
 800211c:	2b03      	cmp	r3, #3
 800211e:	dc03      	bgt.n	8002128 <clock_setting+0x1c>
 8002120:	2b01      	cmp	r3, #1
 8002122:	d00e      	beq.n	8002142 <clock_setting+0x36>
 8002124:	2b02      	cmp	r3, #2
 8002126:	d076      	beq.n	8002216 <clock_setting+0x10a>
	{

		default:
		case SET_IDLE:

			while(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin));
 8002128:	bf00      	nop
 800212a:	2102      	movs	r1, #2
 800212c:	4885      	ldr	r0, [pc, #532]	@ (8002344 <clock_setting+0x238>)
 800212e:	f003 fec7 	bl	8005ec0 <HAL_GPIO_ReadPin>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f8      	beq.n	800212a <clock_setting+0x1e>

			video.set = SET_HOURS;
 8002138:	4b81      	ldr	r3, [pc, #516]	@ (8002340 <clock_setting+0x234>)
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			break;
 8002140:	e0fa      	b.n	8002338 <clock_setting+0x22c>

		case SET_HOURS:

			show_frame(0);
 8002142:	2000      	movs	r0, #0
 8002144:	f000 fa56 	bl	80025f4 <show_frame>

			// If button plus
			if(btn_status == BTN_PLUS)
 8002148:	4b7f      	ldr	r3, [pc, #508]	@ (8002348 <clock_setting+0x23c>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d128      	bne.n	80021a2 <clock_setting+0x96>
			{

				btn_status = BTN_NONE;
 8002150:	4b7d      	ldr	r3, [pc, #500]	@ (8002348 <clock_setting+0x23c>)
 8002152:	2200      	movs	r2, #0
 8002154:	701a      	strb	r2, [r3, #0]

				HAL_Delay(300);
 8002156:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800215a:	f001 f911 	bl	8003380 <HAL_Delay>
				clear_btn_int();
 800215e:	f000 fc49 	bl	80029f4 <clear_btn_int>

				video.time.Hours++;
 8002162:	4b77      	ldr	r3, [pc, #476]	@ (8002340 <clock_setting+0x234>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	3301      	adds	r3, #1
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4b75      	ldr	r3, [pc, #468]	@ (8002340 <clock_setting+0x234>)
 800216c:	701a      	strb	r2, [r3, #0]
				video.time.Hours %= 12;
 800216e:	4b74      	ldr	r3, [pc, #464]	@ (8002340 <clock_setting+0x234>)
 8002170:	781a      	ldrb	r2, [r3, #0]
 8002172:	4b76      	ldr	r3, [pc, #472]	@ (800234c <clock_setting+0x240>)
 8002174:	fba3 1302 	umull	r1, r3, r3, r2
 8002178:	08d9      	lsrs	r1, r3, #3
 800217a:	460b      	mov	r3, r1
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	440b      	add	r3, r1
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4b6e      	ldr	r3, [pc, #440]	@ (8002340 <clock_setting+0x234>)
 8002188:	701a      	strb	r2, [r3, #0]

				video.file_idx = ( video.time.Hours * 60 );
 800218a:	4b6d      	ldr	r3, [pc, #436]	@ (8002340 <clock_setting+0x234>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	0112      	lsls	r2, r2, #4
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	b29a      	uxth	r2, r3
 8002198:	4b69      	ldr	r3, [pc, #420]	@ (8002340 <clock_setting+0x234>)
 800219a:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 800219c:	2001      	movs	r0, #1
 800219e:	f000 f8d9 	bl	8002354 <file_handler>

			}

			// If button minus
			if(btn_status == BTN_MINUS)
 80021a2:	4b69      	ldr	r3, [pc, #420]	@ (8002348 <clock_setting+0x23c>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d122      	bne.n	80021f0 <clock_setting+0xe4>
			{

				btn_status = BTN_NONE;
 80021aa:	4b67      	ldr	r3, [pc, #412]	@ (8002348 <clock_setting+0x23c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]

				HAL_Delay(300);
 80021b0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80021b4:	f001 f8e4 	bl	8003380 <HAL_Delay>
				clear_btn_int();
 80021b8:	f000 fc1c 	bl	80029f4 <clear_btn_int>

				if(video.time.Hours > 0)
 80021bc:	4b60      	ldr	r3, [pc, #384]	@ (8002340 <clock_setting+0x234>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d006      	beq.n	80021d2 <clock_setting+0xc6>
					video.time.Hours--;
 80021c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002340 <clock_setting+0x234>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	4b5c      	ldr	r3, [pc, #368]	@ (8002340 <clock_setting+0x234>)
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e002      	b.n	80021d8 <clock_setting+0xcc>
				else
					video.time.Hours = 11;
 80021d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002340 <clock_setting+0x234>)
 80021d4:	220b      	movs	r2, #11
 80021d6:	701a      	strb	r2, [r3, #0]

				video.file_idx = ( video.time.Hours * 60 );
 80021d8:	4b59      	ldr	r3, [pc, #356]	@ (8002340 <clock_setting+0x234>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	0112      	lsls	r2, r2, #4
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	4b56      	ldr	r3, [pc, #344]	@ (8002340 <clock_setting+0x234>)
 80021e8:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 80021ea:	2001      	movs	r0, #1
 80021ec:	f000 f8b2 	bl	8002354 <file_handler>

			}

			// If button settings
			if(btn_status == BTN_SET)
 80021f0:	4b55      	ldr	r3, [pc, #340]	@ (8002348 <clock_setting+0x23c>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	f040 809c 	bne.w	8002332 <clock_setting+0x226>
			{

				btn_status = BTN_NONE;
 80021fa:	4b53      	ldr	r3, [pc, #332]	@ (8002348 <clock_setting+0x23c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]

				HAL_Delay(300);
 8002200:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002204:	f001 f8bc 	bl	8003380 <HAL_Delay>
				clear_btn_int();
 8002208:	f000 fbf4 	bl	80029f4 <clear_btn_int>

				video.set = SET_MINUTES;
 800220c:	4b4c      	ldr	r3, [pc, #304]	@ (8002340 <clock_setting+0x234>)
 800220e:	2202      	movs	r2, #2
 8002210:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			}

			break;
 8002214:	e08d      	b.n	8002332 <clock_setting+0x226>

		case SET_MINUTES:

			show_frame(0);
 8002216:	2000      	movs	r0, #0
 8002218:	f000 f9ec 	bl	80025f4 <show_frame>

			// If button plus
			if(btn_status == BTN_PLUS)
 800221c:	4b4a      	ldr	r3, [pc, #296]	@ (8002348 <clock_setting+0x23c>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d12f      	bne.n	8002284 <clock_setting+0x178>
			{

				btn_status = BTN_NONE;
 8002224:	4b48      	ldr	r3, [pc, #288]	@ (8002348 <clock_setting+0x23c>)
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]

				HAL_Delay(300);
 800222a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800222e:	f001 f8a7 	bl	8003380 <HAL_Delay>
				clear_btn_int();
 8002232:	f000 fbdf 	bl	80029f4 <clear_btn_int>

				video.time.Minutes++;
 8002236:	4b42      	ldr	r3, [pc, #264]	@ (8002340 <clock_setting+0x234>)
 8002238:	785b      	ldrb	r3, [r3, #1]
 800223a:	3301      	adds	r3, #1
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4b40      	ldr	r3, [pc, #256]	@ (8002340 <clock_setting+0x234>)
 8002240:	705a      	strb	r2, [r3, #1]
				video.time.Minutes %= 60;
 8002242:	4b3f      	ldr	r3, [pc, #252]	@ (8002340 <clock_setting+0x234>)
 8002244:	785a      	ldrb	r2, [r3, #1]
 8002246:	4b42      	ldr	r3, [pc, #264]	@ (8002350 <clock_setting+0x244>)
 8002248:	fba3 1302 	umull	r1, r3, r3, r2
 800224c:	0959      	lsrs	r1, r3, #5
 800224e:	460b      	mov	r3, r1
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	1a5b      	subs	r3, r3, r1
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4b39      	ldr	r3, [pc, #228]	@ (8002340 <clock_setting+0x234>)
 800225c:	705a      	strb	r2, [r3, #1]

				video.file_idx += video.time.Minutes;
 800225e:	4b38      	ldr	r3, [pc, #224]	@ (8002340 <clock_setting+0x234>)
 8002260:	8a9b      	ldrh	r3, [r3, #20]
 8002262:	4a37      	ldr	r2, [pc, #220]	@ (8002340 <clock_setting+0x234>)
 8002264:	7852      	ldrb	r2, [r2, #1]
 8002266:	4413      	add	r3, r2
 8002268:	b29a      	uxth	r2, r3
 800226a:	4b35      	ldr	r3, [pc, #212]	@ (8002340 <clock_setting+0x234>)
 800226c:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 800226e:	2001      	movs	r0, #1
 8002270:	f000 f870 	bl	8002354 <file_handler>

				video.file_idx -= video.time.Minutes;
 8002274:	4b32      	ldr	r3, [pc, #200]	@ (8002340 <clock_setting+0x234>)
 8002276:	8a9b      	ldrh	r3, [r3, #20]
 8002278:	4a31      	ldr	r2, [pc, #196]	@ (8002340 <clock_setting+0x234>)
 800227a:	7852      	ldrb	r2, [r2, #1]
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	b29a      	uxth	r2, r3
 8002280:	4b2f      	ldr	r3, [pc, #188]	@ (8002340 <clock_setting+0x234>)
 8002282:	829a      	strh	r2, [r3, #20]


			}

			// If button minus
			if(btn_status == BTN_MINUS)
 8002284:	4b30      	ldr	r3, [pc, #192]	@ (8002348 <clock_setting+0x23c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d129      	bne.n	80022e0 <clock_setting+0x1d4>
			{

				btn_status = BTN_NONE;
 800228c:	4b2e      	ldr	r3, [pc, #184]	@ (8002348 <clock_setting+0x23c>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]

				HAL_Delay(300);
 8002292:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002296:	f001 f873 	bl	8003380 <HAL_Delay>
				clear_btn_int();
 800229a:	f000 fbab 	bl	80029f4 <clear_btn_int>

				if(video.time.Minutes > 0)
 800229e:	4b28      	ldr	r3, [pc, #160]	@ (8002340 <clock_setting+0x234>)
 80022a0:	785b      	ldrb	r3, [r3, #1]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d006      	beq.n	80022b4 <clock_setting+0x1a8>
					video.time.Minutes--;
 80022a6:	4b26      	ldr	r3, [pc, #152]	@ (8002340 <clock_setting+0x234>)
 80022a8:	785b      	ldrb	r3, [r3, #1]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b24      	ldr	r3, [pc, #144]	@ (8002340 <clock_setting+0x234>)
 80022b0:	705a      	strb	r2, [r3, #1]
 80022b2:	e002      	b.n	80022ba <clock_setting+0x1ae>
				else
					video.time.Minutes = 59;
 80022b4:	4b22      	ldr	r3, [pc, #136]	@ (8002340 <clock_setting+0x234>)
 80022b6:	223b      	movs	r2, #59	@ 0x3b
 80022b8:	705a      	strb	r2, [r3, #1]

				video.file_idx += video.time.Minutes;
 80022ba:	4b21      	ldr	r3, [pc, #132]	@ (8002340 <clock_setting+0x234>)
 80022bc:	8a9b      	ldrh	r3, [r3, #20]
 80022be:	4a20      	ldr	r2, [pc, #128]	@ (8002340 <clock_setting+0x234>)
 80022c0:	7852      	ldrb	r2, [r2, #1]
 80022c2:	4413      	add	r3, r2
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002340 <clock_setting+0x234>)
 80022c8:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 80022ca:	2001      	movs	r0, #1
 80022cc:	f000 f842 	bl	8002354 <file_handler>

				video.file_idx -= video.time.Minutes;
 80022d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <clock_setting+0x234>)
 80022d2:	8a9b      	ldrh	r3, [r3, #20]
 80022d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002340 <clock_setting+0x234>)
 80022d6:	7852      	ldrb	r2, [r2, #1]
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	b29a      	uxth	r2, r3
 80022dc:	4b18      	ldr	r3, [pc, #96]	@ (8002340 <clock_setting+0x234>)
 80022de:	829a      	strh	r2, [r3, #20]

			}

			// If button settings
			if(btn_status == BTN_SET)
 80022e0:	4b19      	ldr	r3, [pc, #100]	@ (8002348 <clock_setting+0x23c>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d126      	bne.n	8002336 <clock_setting+0x22a>
			{

				btn_status = BTN_NONE;
 80022e8:	4b17      	ldr	r3, [pc, #92]	@ (8002348 <clock_setting+0x23c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]

				HAL_Delay(300);
 80022ee:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80022f2:	f001 f845 	bl	8003380 <HAL_Delay>
				clear_btn_int();
 80022f6:	f000 fb7d 	bl	80029f4 <clear_btn_int>

				video.file_idx += video.time.Minutes;
 80022fa:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <clock_setting+0x234>)
 80022fc:	8a9b      	ldrh	r3, [r3, #20]
 80022fe:	4a10      	ldr	r2, [pc, #64]	@ (8002340 <clock_setting+0x234>)
 8002300:	7852      	ldrb	r2, [r2, #1]
 8002302:	4413      	add	r3, r2
 8002304:	b29a      	uxth	r2, r3
 8002306:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <clock_setting+0x234>)
 8002308:	829a      	strh	r2, [r3, #20]

				video.isfirstFrame = 1;
 800230a:	4b0d      	ldr	r3, [pc, #52]	@ (8002340 <clock_setting+0x234>)
 800230c:	2201      	movs	r2, #1
 800230e:	759a      	strb	r2, [r3, #22]

				video.set = SET_START;
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <clock_setting+0x234>)
 8002312:	2203      	movs	r2, #3
 8002314:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			}

			break;
 8002318:	e00d      	b.n	8002336 <clock_setting+0x22a>

		case SET_START:

			file_handler(1);							// Start froma the first frame
 800231a:	2001      	movs	r0, #1
 800231c:	f000 f81a 	bl	8002354 <file_handler>

			video.set = SET_IDLE;
 8002320:	4b07      	ldr	r3, [pc, #28]	@ (8002340 <clock_setting+0x234>)
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
			video.video_mode = NORMAL_MODE;
 8002328:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <clock_setting+0x234>)
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

			break;
 8002330:	e002      	b.n	8002338 <clock_setting+0x22c>
			break;
 8002332:	bf00      	nop
 8002334:	e000      	b.n	8002338 <clock_setting+0x22c>
			break;
 8002336:	bf00      	nop

	}

	enable_btn_int();
 8002338:	f000 fb42 	bl	80029c0 <enable_btn_int>

}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	2400d200 	.word	0x2400d200
 8002344:	58020800 	.word	0x58020800
 8002348:	24000544 	.word	0x24000544
 800234c:	aaaaaaab 	.word	0xaaaaaaab
 8002350:	88888889 	.word	0x88888889

08002354 <file_handler>:

static void file_handler(uint8_t openFile)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af02      	add	r7, sp, #8
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
   // Each file takes 1m

   static uint8_t  new_file_flag = 1;


   if(new_file_flag || openFile)
 800235e:	4b31      	ldr	r3, [pc, #196]	@ (8002424 <file_handler+0xd0>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <file_handler+0x18>
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d033      	beq.n	80023d4 <file_handler+0x80>
   {

  	 if(openFile)
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <file_handler+0x24>
  		 f_close(&MJPEG_File);
 8002372:	482d      	ldr	r0, [pc, #180]	@ (8002428 <file_handler+0xd4>)
 8002374:	f00f faf0 	bl	8011958 <f_close>

  	 new_file_flag = 0;
 8002378:	4b2a      	ldr	r3, [pc, #168]	@ (8002424 <file_handler+0xd0>)
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]

  	 char file_idx_str[4];
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 800237e:	4b2b      	ldr	r3, [pc, #172]	@ (800242c <file_handler+0xd8>)
 8002380:	8a9b      	ldrh	r3, [r3, #20]
 8002382:	f107 000c 	add.w	r0, r7, #12
 8002386:	4a2a      	ldr	r2, [pc, #168]	@ (8002430 <file_handler+0xdc>)
 8002388:	2104      	movs	r1, #4
 800238a:	f00f fd75 	bl	8011e78 <sniprintf>
  	 snprintf(name, sizeof(name), "a%s.avi", file_idx_str);
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	4a28      	ldr	r2, [pc, #160]	@ (8002434 <file_handler+0xe0>)
 8002394:	210e      	movs	r1, #14
 8002396:	4828      	ldr	r0, [pc, #160]	@ (8002438 <file_handler+0xe4>)
 8002398:	f00f fd6e 	bl	8011e78 <sniprintf>

  	 // Open the MJPEG avi file with read access
  	 if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 800239c:	2201      	movs	r2, #1
 800239e:	4926      	ldr	r1, [pc, #152]	@ (8002438 <file_handler+0xe4>)
 80023a0:	4821      	ldr	r0, [pc, #132]	@ (8002428 <file_handler+0xd4>)
 80023a2:	f00e fded 	bl	8010f80 <f_open>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d112      	bne.n	80023d2 <file_handler+0x7e>
  	 {

  		 video.isfirstFrame = 1;
 80023ac:	4b1f      	ldr	r3, [pc, #124]	@ (800242c <file_handler+0xd8>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	759a      	strb	r2, [r3, #22]

  		 // parse the AVI file Header
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 80023b2:	2300      	movs	r3, #0
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	4b21      	ldr	r3, [pc, #132]	@ (800243c <file_handler+0xe8>)
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 80023be:	4a20      	ldr	r2, [pc, #128]	@ (8002440 <file_handler+0xec>)
 80023c0:	4919      	ldr	r1, [pc, #100]	@ (8002428 <file_handler+0xd4>)
 80023c2:	4820      	ldr	r0, [pc, #128]	@ (8002444 <file_handler+0xf0>)
 80023c4:	f7fe fa00 	bl	80007c8 <AVI_ParserInit>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <file_handler+0x80>
  			 while(1);
 80023ce:	bf00      	nop
 80023d0:	e7fd      	b.n	80023ce <file_handler+0x7a>

  	 }
  	 else
  	 {

  		 while(1);
 80023d2:	e7fe      	b.n	80023d2 <file_handler+0x7e>
  	 }

   }

   // Check for the end of the video
   if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 80023d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002444 <file_handler+0xf0>)
 80023d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002444 <file_handler+0xf0>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d31d      	bcc.n	800241c <file_handler+0xc8>
   {

  	 video.file_idx++;
 80023e0:	4b12      	ldr	r3, [pc, #72]	@ (800242c <file_handler+0xd8>)
 80023e2:	8a9b      	ldrh	r3, [r3, #20]
 80023e4:	3301      	adds	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	4b10      	ldr	r3, [pc, #64]	@ (800242c <file_handler+0xd8>)
 80023ea:	829a      	strh	r2, [r3, #20]
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 80023ec:	4b0f      	ldr	r3, [pc, #60]	@ (800242c <file_handler+0xd8>)
 80023ee:	8a9b      	ldrh	r3, [r3, #20]
 80023f0:	091a      	lsrs	r2, r3, #4
 80023f2:	4915      	ldr	r1, [pc, #84]	@ (8002448 <file_handler+0xf4>)
 80023f4:	fba1 1202 	umull	r1, r2, r1, r2
 80023f8:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 80023fc:	fb01 f202 	mul.w	r2, r1, r2
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	b29a      	uxth	r2, r3
 8002404:	4b09      	ldr	r3, [pc, #36]	@ (800242c <file_handler+0xd8>)
 8002406:	829a      	strh	r2, [r3, #20]

		 //  wait for the Last DMA2D transfer to ends
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8002408:	2132      	movs	r1, #50	@ 0x32
 800240a:	4810      	ldr	r0, [pc, #64]	@ (800244c <file_handler+0xf8>)
 800240c:	f003 f96b 	bl	80056e6 <HAL_DMA2D_PollForTransfer>

		 f_close(&MJPEG_File);
 8002410:	4805      	ldr	r0, [pc, #20]	@ (8002428 <file_handler+0xd4>)
 8002412:	f00f faa1 	bl	8011958 <f_close>

		 new_file_flag = 1;
 8002416:	4b03      	ldr	r3, [pc, #12]	@ (8002424 <file_handler+0xd0>)
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]

   }

}
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	24000004 	.word	0x24000004
 8002428:	24000788 	.word	0x24000788
 800242c:	2400d200 	.word	0x2400d200
 8002430:	08012870 	.word	0x08012870
 8002434:	08012878 	.word	0x08012878
 8002438:	24000548 	.word	0x24000548
 800243c:	2400d200 	.word	0x2400d200
 8002440:	24000a00 	.word	0x24000a00
 8002444:	240009b8 	.word	0x240009b8
 8002448:	05b05b06 	.word	0x05b05b06
 800244c:	24000270 	.word	0x24000270

08002450 <battery_management>:

static void battery_management(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0


	if(video.display_status == DISPLAY_ON)
 8002456:	4b2d      	ldr	r3, [pc, #180]	@ (800250c <battery_management+0xbc>)
 8002458:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800245c:	2b01      	cmp	r3, #1
 800245e:	d150      	bne.n	8002502 <battery_management+0xb2>
	{

		if(video.time.Seconds >= DISPLAY_STANDBY_TIMER)
 8002460:	4b2a      	ldr	r3, [pc, #168]	@ (800250c <battery_management+0xbc>)
 8002462:	789b      	ldrb	r3, [r3, #2]
 8002464:	2b3a      	cmp	r3, #58	@ 0x3a
 8002466:	d94c      	bls.n	8002502 <battery_management+0xb2>
		{

			parameters_reset();
 8002468:	f000 f9a6 	bl	80027b8 <parameters_reset>

			GC9A01_sleep_mode(ON);
 800246c:	2001      	movs	r0, #1
 800246e:	f7fe fdaa 	bl	8000fc6 <GC9A01_sleep_mode>
			video.display_status = DISPLAY_OFF;
 8002472:	4b26      	ldr	r3, [pc, #152]	@ (800250c <battery_management+0xbc>)
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

			// Stop mode

			HAL_SuspendTick();
 800247a:	f000 ffa5 	bl	80033c8 <HAL_SuspendTick>
  __ASM volatile ("cpsid i" : : : "memory");
 800247e:	b672      	cpsid	i
}
 8002480:	bf00      	nop

			__disable_irq();

			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002482:	2101      	movs	r1, #1
 8002484:	2001      	movs	r0, #1
 8002486:	f005 ff93 	bl	80083b0 <HAL_PWR_EnterSTOPMode>
  __ASM volatile ("cpsie i" : : : "memory");
 800248a:	b662      	cpsie	i
}
 800248c:	bf00      	nop

			// Wake up

			__enable_irq();

			HAL_ResumeTick();
 800248e:	f000 ffab 	bl	80033e8 <HAL_ResumeTick>

			SystemClock_Config();
 8002492:	f7fe fee9 	bl	8001268 <SystemClock_Config>

			GC9A01_init();
 8002496:	f7fe fb16 	bl	8000ac6 <GC9A01_init>
			video.display_status = DISPLAY_ON;
 800249a:	4b1c      	ldr	r3, [pc, #112]	@ (800250c <battery_management+0xbc>)
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

			// Clock setting

			RTC_DateTypeDef sDate = {0};
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
			HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 80024a6:	2200      	movs	r2, #0
 80024a8:	4918      	ldr	r1, [pc, #96]	@ (800250c <battery_management+0xbc>)
 80024aa:	4819      	ldr	r0, [pc, #100]	@ (8002510 <battery_management+0xc0>)
 80024ac:	f009 fcc6 	bl	800be3c <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	2200      	movs	r2, #0
 80024b4:	4619      	mov	r1, r3
 80024b6:	4816      	ldr	r0, [pc, #88]	@ (8002510 <battery_management+0xc0>)
 80024b8:	f009 fda4 	bl	800c004 <HAL_RTC_GetDate>

			video.file_idx = ( ( video.time.Hours % 12 ) * 60 );
 80024bc:	4b13      	ldr	r3, [pc, #76]	@ (800250c <battery_management+0xbc>)
 80024be:	781a      	ldrb	r2, [r3, #0]
 80024c0:	4b14      	ldr	r3, [pc, #80]	@ (8002514 <battery_management+0xc4>)
 80024c2:	fba3 1302 	umull	r1, r3, r3, r2
 80024c6:	08d9      	lsrs	r1, r3, #3
 80024c8:	460b      	mov	r3, r1
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	440b      	add	r3, r1
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	0112      	lsls	r2, r2, #4
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	b29a      	uxth	r2, r3
 80024de:	4b0b      	ldr	r3, [pc, #44]	@ (800250c <battery_management+0xbc>)
 80024e0:	829a      	strh	r2, [r3, #20]
			video.file_idx += video.time.Minutes;
 80024e2:	4b0a      	ldr	r3, [pc, #40]	@ (800250c <battery_management+0xbc>)
 80024e4:	8a9b      	ldrh	r3, [r3, #20]
 80024e6:	4a09      	ldr	r2, [pc, #36]	@ (800250c <battery_management+0xbc>)
 80024e8:	7852      	ldrb	r2, [r2, #1]
 80024ea:	4413      	add	r3, r2
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	4b07      	ldr	r3, [pc, #28]	@ (800250c <battery_management+0xbc>)
 80024f0:	829a      	strh	r2, [r3, #20]

			file_handler(1);
 80024f2:	2001      	movs	r0, #1
 80024f4:	f7ff ff2e 	bl	8002354 <file_handler>

			video.display_ts = video.time.Seconds;
 80024f8:	4b04      	ldr	r3, [pc, #16]	@ (800250c <battery_management+0xbc>)
 80024fa:	789b      	ldrb	r3, [r3, #2]
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b03      	ldr	r3, [pc, #12]	@ (800250c <battery_management+0xbc>)
 8002500:	63da      	str	r2, [r3, #60]	@ 0x3c

		}

	}

}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	2400d200 	.word	0x2400d200
 8002510:	240002ec 	.word	0x240002ec
 8002514:	aaaaaaab 	.word	0xaaaaaaab

08002518 <depth24To16>:

static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
 8002524:	4613      	mov	r3, r2
 8002526:	707b      	strb	r3, [r7, #1]

	uint8_t b;
	uint8_t g;
	uint8_t r;

	int i = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]


	for( ; i < length ; i++)
 800252c:	e054      	b.n	80025d8 <depth24To16+0xc0>
	{

		b = pxArr->u8Arr[i*bpx];
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	787a      	ldrb	r2, [r7, #1]
 8002534:	68f9      	ldr	r1, [r7, #12]
 8002536:	fb01 f202 	mul.w	r2, r1, r2
 800253a:	4413      	add	r3, r2
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	72fb      	strb	r3, [r7, #11]
		g = pxArr->u8Arr[i*bpx+1];
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	787b      	ldrb	r3, [r7, #1]
 8002546:	68f9      	ldr	r1, [r7, #12]
 8002548:	fb01 f303 	mul.w	r3, r1, r3
 800254c:	3301      	adds	r3, #1
 800254e:	4413      	add	r3, r2
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	72bb      	strb	r3, [r7, #10]
		r = pxArr->u8Arr[i*bpx+2];
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	787b      	ldrb	r3, [r7, #1]
 800255a:	68f9      	ldr	r1, [r7, #12]
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	3302      	adds	r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	727b      	strb	r3, [r7, #9]

		pxArr->u16Arr[i] = color565(r, g, b);
 8002568:	7a7b      	ldrb	r3, [r7, #9]
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	b21a      	sxth	r2, r3
 800256e:	4b20      	ldr	r3, [pc, #128]	@ (80025f0 <depth24To16+0xd8>)
 8002570:	4013      	ands	r3, r2
 8002572:	b21a      	sxth	r2, r3
 8002574:	7abb      	ldrb	r3, [r7, #10]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	b21b      	sxth	r3, r3
 800257a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800257e:	b21b      	sxth	r3, r3
 8002580:	4313      	orrs	r3, r2
 8002582:	b21a      	sxth	r2, r3
 8002584:	7afb      	ldrb	r3, [r7, #11]
 8002586:	08db      	lsrs	r3, r3, #3
 8002588:	b2db      	uxtb	r3, r3
 800258a:	b21b      	sxth	r3, r3
 800258c:	4313      	orrs	r3, r2
 800258e:	b219      	sxth	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	b28a      	uxth	r2, r1
 800259c:	801a      	strh	r2, [r3, #0]
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	b21a      	sxth	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6819      	ldr	r1, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	440b      	add	r3, r1
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	b29b      	uxth	r3, r3
 80025be:	b21b      	sxth	r3, r3
 80025c0:	4313      	orrs	r3, r2
 80025c2:	b219      	sxth	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	b28a      	uxth	r2, r1
 80025d0:	801a      	strh	r2, [r3, #0]
	for( ; i < length ; i++)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	3301      	adds	r3, #1
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	887b      	ldrh	r3, [r7, #2]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	429a      	cmp	r2, r3
 80025de:	dba6      	blt.n	800252e <depth24To16+0x16>

	}

}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	fffff800 	.word	0xfffff800

080025f4 <show_frame>:

static void show_frame(uint32_t frame_num)
{
 80025f4:	b5b0      	push	{r4, r5, r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	6078      	str	r0, [r7, #4]

	static uint8_t swap = 0;


	for(int i = 0 ; i < frame_num ; i++)
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	e011      	b.n	8002626 <show_frame+0x32>
	{

		AVI_GetFrame(&AVI_Handel, &MJPEG_File, 1);
 8002602:	2201      	movs	r2, #1
 8002604:	4961      	ldr	r1, [pc, #388]	@ (800278c <show_frame+0x198>)
 8002606:	4862      	ldr	r0, [pc, #392]	@ (8002790 <show_frame+0x19c>)
 8002608:	f7fe f91e 	bl	8000848 <AVI_GetFrame>

		AVI_Handel.CurrentImage++;
 800260c:	4b60      	ldr	r3, [pc, #384]	@ (8002790 <show_frame+0x19c>)
 800260e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002610:	3301      	adds	r3, #1
 8002612:	4a5f      	ldr	r2, [pc, #380]	@ (8002790 <show_frame+0x19c>)
 8002614:	62d3      	str	r3, [r2, #44]	@ 0x2c
		video.frameCount++;
 8002616:	4b5f      	ldr	r3, [pc, #380]	@ (8002794 <show_frame+0x1a0>)
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	3301      	adds	r3, #1
 800261c:	4a5d      	ldr	r2, [pc, #372]	@ (8002794 <show_frame+0x1a0>)
 800261e:	6213      	str	r3, [r2, #32]
	for(int i = 0 ; i < frame_num ; i++)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	3301      	adds	r3, #1
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	429a      	cmp	r2, r3
 800262c:	d8e9      	bhi.n	8002602 <show_frame+0xe>

	}

	for(int i = 0 ; i < 2 ; i++)
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	e0a2      	b.n	800277a <show_frame+0x186>
	{

		// Save the frame into MJPEG_VideoBuffer
		video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002634:	2200      	movs	r2, #0
 8002636:	4955      	ldr	r1, [pc, #340]	@ (800278c <show_frame+0x198>)
 8002638:	4855      	ldr	r0, [pc, #340]	@ (8002790 <show_frame+0x19c>)
 800263a:	f7fe f905 	bl	8000848 <AVI_GetFrame>
 800263e:	4603      	mov	r3, r0
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4b54      	ldr	r3, [pc, #336]	@ (8002794 <show_frame+0x1a0>)
 8002644:	75da      	strb	r2, [r3, #23]

		if(video.FrameType == AVI_VIDEO_FRAME)
 8002646:	4b53      	ldr	r3, [pc, #332]	@ (8002794 <show_frame+0x1a0>)
 8002648:	7ddb      	ldrb	r3, [r3, #23]
 800264a:	2b01      	cmp	r3, #1
 800264c:	f040 8092 	bne.w	8002774 <show_frame+0x180>
		{

			AVI_Handel.CurrentImage++;
 8002650:	4b4f      	ldr	r3, [pc, #316]	@ (8002790 <show_frame+0x19c>)
 8002652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002654:	3301      	adds	r3, #1
 8002656:	4a4e      	ldr	r2, [pc, #312]	@ (8002790 <show_frame+0x19c>)
 8002658:	62d3      	str	r3, [r2, #44]	@ 0x2c
			video.frameCount++;
 800265a:	4b4e      	ldr	r3, [pc, #312]	@ (8002794 <show_frame+0x1a0>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	3301      	adds	r3, #1
 8002660:	4a4c      	ldr	r2, [pc, #304]	@ (8002794 <show_frame+0x1a0>)
 8002662:	6213      	str	r3, [r2, #32]
#ifdef DMA_MODE
			while(spi_dma_not_ready);
#endif

			// Decode the frame inside MJPEG_VideoBuffer and put it into jpegOutDataAdreess in the format YCrCb
			JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8002664:	494c      	ldr	r1, [pc, #304]	@ (8002798 <show_frame+0x1a4>)
 8002666:	4b4a      	ldr	r3, [pc, #296]	@ (8002790 <show_frame+0x19c>)
 8002668:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800266a:	4b4a      	ldr	r3, [pc, #296]	@ (8002794 <show_frame+0x1a0>)
 800266c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800266e:	484b      	ldr	r0, [pc, #300]	@ (800279c <show_frame+0x1a8>)
 8002670:	f7fe fce2 	bl	8001038 <JPEG_Decode_DMA>

			while(Jpeg_HWDecodingEnd == 0);
 8002674:	bf00      	nop
 8002676:	4b4a      	ldr	r3, [pc, #296]	@ (80027a0 <show_frame+0x1ac>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0fb      	beq.n	8002676 <show_frame+0x82>

			if(video.isfirstFrame == 1)
 800267e:	4b45      	ldr	r3, [pc, #276]	@ (8002794 <show_frame+0x1a0>)
 8002680:	7d9b      	ldrb	r3, [r3, #22]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d131      	bne.n	80026ea <show_frame+0xf6>
			{

				video.isfirstFrame = 0;
 8002686:	4b43      	ldr	r3, [pc, #268]	@ (8002794 <show_frame+0x1a0>)
 8002688:	2200      	movs	r2, #0
 800268a:	759a      	strb	r2, [r3, #22]

				HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 800268c:	4945      	ldr	r1, [pc, #276]	@ (80027a4 <show_frame+0x1b0>)
 800268e:	4843      	ldr	r0, [pc, #268]	@ (800279c <show_frame+0x1a8>)
 8002690:	f003 fce4 	bl	800605c <HAL_JPEG_GetInfo>

				DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 8002694:	4b43      	ldr	r3, [pc, #268]	@ (80027a4 <show_frame+0x1b0>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	b29b      	uxth	r3, r3
 800269a:	4a42      	ldr	r2, [pc, #264]	@ (80027a4 <show_frame+0x1b0>)
 800269c:	6892      	ldr	r2, [r2, #8]
 800269e:	b291      	uxth	r1, r2
 80026a0:	4a40      	ldr	r2, [pc, #256]	@ (80027a4 <show_frame+0x1b0>)
 80026a2:	6852      	ldr	r2, [r2, #4]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 f8cd 	bl	8002844 <DMA2D_Init>

				video.width = JPEG_Info.ImageWidth;
 80026aa:	4b3e      	ldr	r3, [pc, #248]	@ (80027a4 <show_frame+0x1b0>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	4b38      	ldr	r3, [pc, #224]	@ (8002794 <show_frame+0x1a0>)
 80026b2:	831a      	strh	r2, [r3, #24]
				video.height = JPEG_Info.ImageHeight;
 80026b4:	4b3b      	ldr	r3, [pc, #236]	@ (80027a4 <show_frame+0x1b0>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	4b36      	ldr	r3, [pc, #216]	@ (8002794 <show_frame+0x1a0>)
 80026bc:	835a      	strh	r2, [r3, #26]
				video.xPos = ( ( LCD_X_SIZE - video.width ) / 2 );					// Center the image in x
 80026be:	4b35      	ldr	r3, [pc, #212]	@ (8002794 <show_frame+0x1a0>)
 80026c0:	8b1b      	ldrh	r3, [r3, #24]
 80026c2:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	da00      	bge.n	80026cc <show_frame+0xd8>
 80026ca:	3301      	adds	r3, #1
 80026cc:	105b      	asrs	r3, r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	4b30      	ldr	r3, [pc, #192]	@ (8002794 <show_frame+0x1a0>)
 80026d2:	839a      	strh	r2, [r3, #28]
				video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 80026d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002794 <show_frame+0x1a0>)
 80026d6:	8b5b      	ldrh	r3, [r3, #26]
 80026d8:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	da00      	bge.n	80026e2 <show_frame+0xee>
 80026e0:	3301      	adds	r3, #1
 80026e2:	105b      	asrs	r3, r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002794 <show_frame+0x1a0>)
 80026e8:	83da      	strh	r2, [r3, #30]

			}

			// Copies the output frame into LCD_FRAME_BUFFER and does the conversion from YCrCb to RGB888
			DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 80026ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002794 <show_frame+0x1a0>)
 80026ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ee:	4618      	mov	r0, r3
 80026f0:	4b2d      	ldr	r3, [pc, #180]	@ (80027a8 <show_frame+0x1b4>)
 80026f2:	6819      	ldr	r1, [r3, #0]
 80026f4:	4b2b      	ldr	r3, [pc, #172]	@ (80027a4 <show_frame+0x1b0>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	4b2a      	ldr	r3, [pc, #168]	@ (80027a4 <show_frame+0x1b0>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	f000 f91e 	bl	8002940 <DMA2D_CopyBuffer>

			//video.jpegOutDataAdreess = (video.jpegOutDataAdreess == JPEG_OUTPUT_DATA_BUFFER0) ? JPEG_OUTPUT_DATA_BUFFER1 : JPEG_OUTPUT_DATA_BUFFER0;

			// Implements the data conversion from RGB888 to RGB565
			doubleFormat pOut;
			pOut.u8Arr = (uint8_t *)outputData;
 8002704:	4b28      	ldr	r3, [pc, #160]	@ (80027a8 <show_frame+0x1b4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
			depth24To16(&pOut, ( video.width * video.height ), 3);
 800270a:	4b22      	ldr	r3, [pc, #136]	@ (8002794 <show_frame+0x1a0>)
 800270c:	8b1a      	ldrh	r2, [r3, #24]
 800270e:	4b21      	ldr	r3, [pc, #132]	@ (8002794 <show_frame+0x1a0>)
 8002710:	8b5b      	ldrh	r3, [r3, #26]
 8002712:	fb12 f303 	smulbb	r3, r2, r3
 8002716:	b299      	uxth	r1, r3
 8002718:	f107 030c 	add.w	r3, r7, #12
 800271c:	2203      	movs	r2, #3
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fefa 	bl	8002518 <depth24To16>

			GC9A01_set_chip_select(ON);
 8002724:	2001      	movs	r0, #1
 8002726:	f7fe f977 	bl	8000a18 <GC9A01_set_chip_select>
			lcd_draw(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr, swap);
 800272a:	4b1a      	ldr	r3, [pc, #104]	@ (8002794 <show_frame+0x1a0>)
 800272c:	8b98      	ldrh	r0, [r3, #28]
 800272e:	4b19      	ldr	r3, [pc, #100]	@ (8002794 <show_frame+0x1a0>)
 8002730:	8bd9      	ldrh	r1, [r3, #30]
 8002732:	4b18      	ldr	r3, [pc, #96]	@ (8002794 <show_frame+0x1a0>)
 8002734:	8b1c      	ldrh	r4, [r3, #24]
 8002736:	4b17      	ldr	r3, [pc, #92]	@ (8002794 <show_frame+0x1a0>)
 8002738:	8b5d      	ldrh	r5, [r3, #26]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4a1b      	ldr	r2, [pc, #108]	@ (80027ac <show_frame+0x1b8>)
 800273e:	7812      	ldrb	r2, [r2, #0]
 8002740:	9201      	str	r2, [sp, #4]
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	462b      	mov	r3, r5
 8002746:	4622      	mov	r2, r4
 8002748:	f7ff f894 	bl	8001874 <lcd_draw>

			swap = ( ( swap ) ? 0 : 1 );
 800274c:	4b17      	ldr	r3, [pc, #92]	@ (80027ac <show_frame+0x1b8>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	4b13      	ldr	r3, [pc, #76]	@ (80027ac <show_frame+0x1b8>)
 800275e:	701a      	strb	r2, [r3, #0]
			outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 8002760:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <show_frame+0x1b4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a12      	ldr	r2, [pc, #72]	@ (80027b0 <show_frame+0x1bc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d101      	bne.n	800276e <show_frame+0x17a>
 800276a:	4b12      	ldr	r3, [pc, #72]	@ (80027b4 <show_frame+0x1c0>)
 800276c:	e000      	b.n	8002770 <show_frame+0x17c>
 800276e:	4b10      	ldr	r3, [pc, #64]	@ (80027b0 <show_frame+0x1bc>)
 8002770:	4a0d      	ldr	r2, [pc, #52]	@ (80027a8 <show_frame+0x1b4>)
 8002772:	6013      	str	r3, [r2, #0]
	for(int i = 0 ; i < 2 ; i++)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	3301      	adds	r3, #1
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b01      	cmp	r3, #1
 800277e:	f77f af59 	ble.w	8002634 <show_frame+0x40>

		}

	}

}
 8002782:	bf00      	nop
 8002784:	bf00      	nop
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bdb0      	pop	{r4, r5, r7, pc}
 800278c:	24000788 	.word	0x24000788
 8002790:	240009b8 	.word	0x240009b8
 8002794:	2400d200 	.word	0x2400d200
 8002798:	24000a00 	.word	0x24000a00
 800279c:	24000218 	.word	0x24000218
 80027a0:	24000088 	.word	0x24000088
 80027a4:	240002d8 	.word	0x240002d8
 80027a8:	24000000 	.word	0x24000000
 80027ac:	240bc248 	.word	0x240bc248
 80027b0:	24058244 	.word	0x24058244
 80027b4:	2408a244 	.word	0x2408a244

080027b8 <parameters_reset>:

static void parameters_reset(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0

	video.width = 0;
 80027bc:	4b1f      	ldr	r3, [pc, #124]	@ (800283c <parameters_reset+0x84>)
 80027be:	2200      	movs	r2, #0
 80027c0:	831a      	strh	r2, [r3, #24]
	video.height = 0;
 80027c2:	4b1e      	ldr	r3, [pc, #120]	@ (800283c <parameters_reset+0x84>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	835a      	strh	r2, [r3, #26]
	video.xPos = 0;
 80027c8:	4b1c      	ldr	r3, [pc, #112]	@ (800283c <parameters_reset+0x84>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	839a      	strh	r2, [r3, #28]
	video.yPos = 0;
 80027ce:	4b1b      	ldr	r3, [pc, #108]	@ (800283c <parameters_reset+0x84>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	83da      	strh	r2, [r3, #30]

	video.time.Hours = 0;
 80027d4:	4b19      	ldr	r3, [pc, #100]	@ (800283c <parameters_reset+0x84>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
	video.time.Minutes = 0;
 80027da:	4b18      	ldr	r3, [pc, #96]	@ (800283c <parameters_reset+0x84>)
 80027dc:	2200      	movs	r2, #0
 80027de:	705a      	strb	r2, [r3, #1]
	video.time.Seconds = 0;
 80027e0:	4b16      	ldr	r3, [pc, #88]	@ (800283c <parameters_reset+0x84>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	709a      	strb	r2, [r3, #2]

	video.file_idx = 0;
 80027e6:	4b15      	ldr	r3, [pc, #84]	@ (800283c <parameters_reset+0x84>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	829a      	strh	r2, [r3, #20]
	video.FrameType = 0;
 80027ec:	4b13      	ldr	r3, [pc, #76]	@ (800283c <parameters_reset+0x84>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	75da      	strb	r2, [r3, #23]

	video.frameToSkip = 0;
 80027f2:	4b12      	ldr	r3, [pc, #72]	@ (800283c <parameters_reset+0x84>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	625a      	str	r2, [r3, #36]	@ 0x24
	video.frame_time = 0.0;
 80027f8:	4b10      	ldr	r3, [pc, #64]	@ (800283c <parameters_reset+0x84>)
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	629a      	str	r2, [r3, #40]	@ 0x28
	video.actual_time = 0;
 8002800:	4b0e      	ldr	r3, [pc, #56]	@ (800283c <parameters_reset+0x84>)
 8002802:	2200      	movs	r2, #0
 8002804:	62da      	str	r2, [r3, #44]	@ 0x2c
	video.tick_offset = 0;
 8002806:	4b0d      	ldr	r3, [pc, #52]	@ (800283c <parameters_reset+0x84>)
 8002808:	2200      	movs	r2, #0
 800280a:	631a      	str	r2, [r3, #48]	@ 0x30
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 800280c:	4a0c      	ldr	r2, [pc, #48]	@ (8002840 <parameters_reset+0x88>)
 800280e:	4b0b      	ldr	r3, [pc, #44]	@ (800283c <parameters_reset+0x84>)
 8002810:	635a      	str	r2, [r3, #52]	@ 0x34

	video.display_ts = video.time.Seconds;
 8002812:	4b0a      	ldr	r3, [pc, #40]	@ (800283c <parameters_reset+0x84>)
 8002814:	789b      	ldrb	r3, [r3, #2]
 8002816:	461a      	mov	r2, r3
 8002818:	4b08      	ldr	r3, [pc, #32]	@ (800283c <parameters_reset+0x84>)
 800281a:	63da      	str	r2, [r3, #60]	@ 0x3c

	video.display_status = DISPLAY_ON;
 800281c:	4b07      	ldr	r3, [pc, #28]	@ (800283c <parameters_reset+0x84>)
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	video.frameCount = 0;
 8002824:	4b05      	ldr	r3, [pc, #20]	@ (800283c <parameters_reset+0x84>)
 8002826:	2200      	movs	r2, #0
 8002828:	621a      	str	r2, [r3, #32]

	//video.video_mode = NORMAL_MODE;
	video.set = SET_IDLE;
 800282a:	4b04      	ldr	r3, [pc, #16]	@ (800283c <parameters_reset+0x84>)
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

}
 8002832:	bf00      	nop
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	2400d200 	.word	0x2400d200
 8002840:	2400d244 	.word	0x2400d244

08002844 <DMA2D_Init>:

static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	603a      	str	r2, [r7, #0]
 800284e:	80fb      	strh	r3, [r7, #6]
 8002850:	460b      	mov	r3, r1
 8002852:	80bb      	strh	r3, [r7, #4]

	uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 8002854:	2301      	movs	r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	2300      	movs	r3, #0
 800285a:	60bb      	str	r3, [r7, #8]


	HAL_DMA2D_MspInit(&DMA2D_Handle);
 800285c:	4836      	ldr	r0, [pc, #216]	@ (8002938 <DMA2D_Init+0xf4>)
 800285e:	f000 f937 	bl	8002ad0 <HAL_DMA2D_MspInit>

	if(ChromaSampling == JPEG_420_SUBSAMPLING)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d10d      	bne.n	8002884 <DMA2D_Init+0x40>
	{

		cssMode = DMA2D_CSS_420;
 8002868:	2302      	movs	r3, #2
 800286a:	60fb      	str	r3, [r7, #12]

		inputLineOffset = xsize % 16;
 800286c:	88fb      	ldrh	r3, [r7, #6]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	60bb      	str	r3, [r7, #8]
		if(inputLineOffset != 0)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d025      	beq.n	80028c6 <DMA2D_Init+0x82>
		{

			inputLineOffset = 16 - inputLineOffset;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f1c3 0310 	rsb	r3, r3, #16
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	e020      	b.n	80028c6 <DMA2D_Init+0x82>

		}

	}
	else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10d      	bne.n	80028a6 <DMA2D_Init+0x62>
	{

		cssMode = DMA2D_NO_CSS;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]

		inputLineOffset = xsize % 8;
 800288e:	88fb      	ldrh	r3, [r7, #6]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	60bb      	str	r3, [r7, #8]
		if(inputLineOffset != 0)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d014      	beq.n	80028c6 <DMA2D_Init+0x82>
		{

			inputLineOffset = 8 - inputLineOffset;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f1c3 0308 	rsb	r3, r3, #8
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	e00f      	b.n	80028c6 <DMA2D_Init+0x82>

		}

	}
	else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d10c      	bne.n	80028c6 <DMA2D_Init+0x82>
	{

		cssMode = DMA2D_CSS_422;
 80028ac:	2301      	movs	r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]

		inputLineOffset = xsize % 16;
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	60bb      	str	r3, [r7, #8]
		if(inputLineOffset != 0)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <DMA2D_Init+0x82>
		{

			inputLineOffset = 16 - inputLineOffset;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	f1c3 0310 	rsb	r3, r3, #16
 80028c4:	60bb      	str	r3, [r7, #8]
		}

	}

  	// Configure the DMA2D Mode, Color Mode and output offset
  	DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 80028c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002938 <DMA2D_Init+0xf4>)
 80028c8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80028cc:	605a      	str	r2, [r3, #4]
  	DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
 80028ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002938 <DMA2D_Init+0xf4>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	609a      	str	r2, [r3, #8]
  	DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80028da:	461a      	mov	r2, r3
 80028dc:	4b16      	ldr	r3, [pc, #88]	@ (8002938 <DMA2D_Init+0xf4>)
 80028de:	60da      	str	r2, [r3, #12]
  	DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  // No Output Alpha Inversion
 80028e0:	4b15      	ldr	r3, [pc, #84]	@ (8002938 <DMA2D_Init+0xf4>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
  	DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     // No Output Red & Blue swap
 80028e6:	4b14      	ldr	r3, [pc, #80]	@ (8002938 <DMA2D_Init+0xf4>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	615a      	str	r2, [r3, #20]

  	// DMA2D Callbacks Configuration
  	DMA2D_Handle.XferCpltCallback  = NULL;
 80028ec:	4b12      	ldr	r3, [pc, #72]	@ (8002938 <DMA2D_Init+0xf4>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	621a      	str	r2, [r3, #32]

  	// Foreground Configuration
  	DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80028f2:	4b11      	ldr	r3, [pc, #68]	@ (8002938 <DMA2D_Init+0xf4>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  	DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 80028f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002938 <DMA2D_Init+0xf4>)
 80028fa:	22ff      	movs	r2, #255	@ 0xff
 80028fc:	651a      	str	r2, [r3, #80]	@ 0x50
  	DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 80028fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002938 <DMA2D_Init+0xf4>)
 8002900:	220b      	movs	r2, #11
 8002902:	649a      	str	r2, [r3, #72]	@ 0x48
  	DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 8002904:	4a0c      	ldr	r2, [pc, #48]	@ (8002938 <DMA2D_Init+0xf4>)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	65d3      	str	r3, [r2, #92]	@ 0x5c
  	DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 800290a:	4a0b      	ldr	r2, [pc, #44]	@ (8002938 <DMA2D_Init+0xf4>)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	6453      	str	r3, [r2, #68]	@ 0x44
  	DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; 		// No ForeGround Red/Blue swap
 8002910:	4b09      	ldr	r3, [pc, #36]	@ (8002938 <DMA2D_Init+0xf4>)
 8002912:	2200      	movs	r2, #0
 8002914:	659a      	str	r2, [r3, #88]	@ 0x58
  	DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion
 8002916:	4b08      	ldr	r3, [pc, #32]	@ (8002938 <DMA2D_Init+0xf4>)
 8002918:	2200      	movs	r2, #0
 800291a:	655a      	str	r2, [r3, #84]	@ 0x54

  	DMA2D_Handle.Instance = DMA2D;
 800291c:	4b06      	ldr	r3, [pc, #24]	@ (8002938 <DMA2D_Init+0xf4>)
 800291e:	4a07      	ldr	r2, [pc, #28]	@ (800293c <DMA2D_Init+0xf8>)
 8002920:	601a      	str	r2, [r3, #0]

  	// DMA2D Initialization
  	HAL_DMA2D_Init(&DMA2D_Handle);
 8002922:	4805      	ldr	r0, [pc, #20]	@ (8002938 <DMA2D_Init+0xf4>)
 8002924:	f002 fe50 	bl	80055c8 <HAL_DMA2D_Init>
  	HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 8002928:	2101      	movs	r1, #1
 800292a:	4803      	ldr	r0, [pc, #12]	@ (8002938 <DMA2D_Init+0xf4>)
 800292c:	f002 ffc4 	bl	80058b8 <HAL_DMA2D_ConfigLayer>

}
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	24000270 	.word	0x24000270
 800293c:	52001000 	.word	0x52001000

08002940 <DMA2D_CopyBuffer>:

static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t ImageWidth, uint16_t ImageHeight)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	@ 0x28
 8002944:	af02      	add	r7, sp, #8
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	4611      	mov	r1, r2
 800294c:	461a      	mov	r2, r3
 800294e:	460b      	mov	r3, r1
 8002950:	80fb      	strh	r3, [r7, #6]
 8002952:	4613      	mov	r3, r2
 8002954:	80bb      	strh	r3, [r7, #4]

	uint32_t xPos, yPos, destination;


	// calculate the destination transfer address
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 8002956:	4b15      	ldr	r3, [pc, #84]	@ (80029ac <DMA2D_CopyBuffer+0x6c>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800295e:	085b      	lsrs	r3, r3, #1
 8002960:	61fb      	str	r3, [r7, #28]
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 8002962:	4b12      	ldr	r3, [pc, #72]	@ (80029ac <DMA2D_CopyBuffer+0x6c>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	61bb      	str	r3, [r7, #24]

	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4613      	mov	r3, r2
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	461a      	mov	r2, r3
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	4413      	add	r3, r2
 800297e:	009a      	lsls	r2, r3, #2
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4413      	add	r3, r2
 8002984:	617b      	str	r3, [r7, #20]

	// wait for the DMA2D transfer to ends
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8002986:	f04f 31ff 	mov.w	r1, #4294967295
 800298a:	4809      	ldr	r0, [pc, #36]	@ (80029b0 <DMA2D_CopyBuffer+0x70>)
 800298c:	f002 feab 	bl	80056e6 <HAL_DMA2D_PollForTransfer>
	// copy the new decoded frame to the LCD Frame buffer
	HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 8002990:	68f9      	ldr	r1, [r7, #12]
 8002992:	88fa      	ldrh	r2, [r7, #6]
 8002994:	88bb      	ldrh	r3, [r7, #4]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	4613      	mov	r3, r2
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4804      	ldr	r0, [pc, #16]	@ (80029b0 <DMA2D_CopyBuffer+0x70>)
 800299e:	f002 fe77 	bl	8005690 <HAL_DMA2D_Start>

}
 80029a2:	bf00      	nop
 80029a4:	3720      	adds	r7, #32
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	240002d8 	.word	0x240002d8
 80029b0:	24000270 	.word	0x24000270

080029b4 <SD_Initialize>:

static void SD_Initialize(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0

	BSP_SD_Init();
 80029b8:	f00c fbd4 	bl	800f164 <BSP_SD_Init>

}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}

080029c0 <enable_btn_int>:

static void enable_btn_int(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80029c4:	2006      	movs	r0, #6
 80029c6:	f000 fe56 	bl	8003676 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80029ca:	2007      	movs	r0, #7
 80029cc:	f000 fe53 	bl	8003676 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80029d0:	2008      	movs	r0, #8
 80029d2:	f000 fe50 	bl	8003676 <HAL_NVIC_EnableIRQ>

}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}

080029da <disable_btn_int>:

static void disable_btn_int(void)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	af00      	add	r7, sp, #0

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80029de:	2006      	movs	r0, #6
 80029e0:	f000 fe57 	bl	8003692 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80029e4:	2007      	movs	r0, #7
 80029e6:	f000 fe54 	bl	8003692 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80029ea:	2008      	movs	r0, #8
 80029ec:	f000 fe51 	bl	8003692 <HAL_NVIC_DisableIRQ>

}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <clear_btn_int>:

static void clear_btn_int(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0

	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80029f8:	2006      	movs	r0, #6
 80029fa:	f000 fe64 	bl	80036c6 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 80029fe:	2007      	movs	r0, #7
 8002a00:	f000 fe61 	bl	80036c6 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8002a04:	2008      	movs	r0, #8
 8002a06:	f000 fe5e 	bl	80036c6 <HAL_NVIC_ClearPendingIRQ>

}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_GPIO_EXTI_Callback>:

/************************** CALLBACK FUNCTIONS **************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	80fb      	strh	r3, [r7, #6]

	if(video.video_mode == SETTING_MODE)
 8002a1a:	4b15      	ldr	r3, [pc, #84]	@ (8002a70 <HAL_GPIO_EXTI_Callback+0x60>)
 8002a1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d121      	bne.n	8002a68 <HAL_GPIO_EXTI_Callback+0x58>
	{

		if(!HAL_GPIO_ReadPin(PLUS_BTN_GPIO_Port, PLUS_BTN_Pin))
 8002a24:	2104      	movs	r1, #4
 8002a26:	4813      	ldr	r0, [pc, #76]	@ (8002a74 <HAL_GPIO_EXTI_Callback+0x64>)
 8002a28:	f003 fa4a 	bl	8005ec0 <HAL_GPIO_ReadPin>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <HAL_GPIO_EXTI_Callback+0x2a>
			btn_status = BTN_PLUS;
 8002a32:	4b11      	ldr	r3, [pc, #68]	@ (8002a78 <HAL_GPIO_EXTI_Callback+0x68>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
 8002a38:	e014      	b.n	8002a64 <HAL_GPIO_EXTI_Callback+0x54>
		else if(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin))
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	480d      	ldr	r0, [pc, #52]	@ (8002a74 <HAL_GPIO_EXTI_Callback+0x64>)
 8002a3e:	f003 fa3f 	bl	8005ec0 <HAL_GPIO_ReadPin>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d103      	bne.n	8002a50 <HAL_GPIO_EXTI_Callback+0x40>
			btn_status = BTN_SET;
 8002a48:	4b0b      	ldr	r3, [pc, #44]	@ (8002a78 <HAL_GPIO_EXTI_Callback+0x68>)
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	e009      	b.n	8002a64 <HAL_GPIO_EXTI_Callback+0x54>
		else if(!HAL_GPIO_ReadPin(MINUS_BTN_GPIO_Port, MINUS_BTN_Pin))
 8002a50:	2101      	movs	r1, #1
 8002a52:	4808      	ldr	r0, [pc, #32]	@ (8002a74 <HAL_GPIO_EXTI_Callback+0x64>)
 8002a54:	f003 fa34 	bl	8005ec0 <HAL_GPIO_ReadPin>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d102      	bne.n	8002a64 <HAL_GPIO_EXTI_Callback+0x54>
			btn_status = BTN_MINUS;
 8002a5e:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_GPIO_EXTI_Callback+0x68>)
 8002a60:	2203      	movs	r2, #3
 8002a62:	701a      	strb	r2, [r3, #0]

		disable_btn_int();
 8002a64:	f7ff ffb9 	bl	80029da <disable_btn_int>

	}

}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	2400d200 	.word	0x2400d200
 8002a74:	58020800 	.word	0x58020800
 8002a78:	24000544 	.word	0x24000544

08002a7c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

	spi_dma_not_ready = 0;
 8002a84:	4b04      	ldr	r3, [pc, #16]	@ (8002a98 <HAL_SPI_TxCpltCallback+0x1c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]

}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	24000084 	.word	0x24000084

08002a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8002acc <HAL_MspInit+0x30>)
 8002aa4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002aa8:	4a08      	ldr	r2, [pc, #32]	@ (8002acc <HAL_MspInit+0x30>)
 8002aaa:	f043 0302 	orr.w	r3, r3, #2
 8002aae:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002ab2:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <HAL_MspInit+0x30>)
 8002ab4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	58024400 	.word	0x58024400

08002ad0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0b      	ldr	r2, [pc, #44]	@ (8002b0c <HAL_DMA2D_MspInit+0x3c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d10e      	bne.n	8002b00 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <HAL_DMA2D_MspInit+0x40>)
 8002ae4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002ae8:	4a09      	ldr	r2, [pc, #36]	@ (8002b10 <HAL_DMA2D_MspInit+0x40>)
 8002aea:	f043 0310 	orr.w	r3, r3, #16
 8002aee:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8002af2:	4b07      	ldr	r3, [pc, #28]	@ (8002b10 <HAL_DMA2D_MspInit+0x40>)
 8002af4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	52001000 	.word	0x52001000
 8002b10:	58024400 	.word	0x58024400

08002b14 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
	  static MDMA_HandleTypeDef   hmdmaIn;
	  static MDMA_HandleTypeDef   hmdmaOut;


	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8002b1c:	4b54      	ldr	r3, [pc, #336]	@ (8002c70 <HAL_JPEG_MspInit+0x15c>)
 8002b1e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002b22:	4a53      	ldr	r2, [pc, #332]	@ (8002c70 <HAL_JPEG_MspInit+0x15c>)
 8002b24:	f043 0320 	orr.w	r3, r3, #32
 8002b28:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8002b2c:	4b50      	ldr	r3, [pc, #320]	@ (8002c70 <HAL_JPEG_MspInit+0x15c>)
 8002b2e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]

	  __HAL_RCC_MDMA_CLK_ENABLE();
 8002b3a:	4b4d      	ldr	r3, [pc, #308]	@ (8002c70 <HAL_JPEG_MspInit+0x15c>)
 8002b3c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002b40:	4a4b      	ldr	r2, [pc, #300]	@ (8002c70 <HAL_JPEG_MspInit+0x15c>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8002b4a:	4b49      	ldr	r3, [pc, #292]	@ (8002c70 <HAL_JPEG_MspInit+0x15c>)
 8002b4c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	68bb      	ldr	r3, [r7, #8]

	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 8002b58:	220f      	movs	r2, #15
 8002b5a:	2107      	movs	r1, #7
 8002b5c:	2079      	movs	r0, #121	@ 0x79
 8002b5e:	f000 fd70 	bl	8003642 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8002b62:	2079      	movs	r0, #121	@ 0x79
 8002b64:	f000 fd87 	bl	8003676 <HAL_NVIC_EnableIRQ>

	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 8002b68:	4b42      	ldr	r3, [pc, #264]	@ (8002c74 <HAL_JPEG_MspInit+0x160>)
 8002b6a:	2280      	movs	r2, #128	@ 0x80
 8002b6c:	60da      	str	r2, [r3, #12]
	  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002b6e:	4b41      	ldr	r3, [pc, #260]	@ (8002c74 <HAL_JPEG_MspInit+0x160>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	611a      	str	r2, [r3, #16]
	  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 8002b74:	4b3f      	ldr	r3, [pc, #252]	@ (8002c74 <HAL_JPEG_MspInit+0x160>)
 8002b76:	2202      	movs	r2, #2
 8002b78:	615a      	str	r2, [r3, #20]
	  hmdmaIn.Init.DestinationInc     = MDMA_DEST_INC_DISABLE;
 8002b7a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c74 <HAL_JPEG_MspInit+0x160>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
	  hmdmaIn.Init.SourceDataSize     = MDMA_SRC_DATASIZE_BYTE;
 8002b80:	4b3c      	ldr	r3, [pc, #240]	@ (8002c74 <HAL_JPEG_MspInit+0x160>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	61da      	str	r2, [r3, #28]
	  hmdmaIn.Init.DestDataSize       = MDMA_DEST_DATASIZE_WORD;
 8002b86:	4b3b      	ldr	r3, [pc, #236]	@ (8002c74 <HAL_JPEG_MspInit+0x160>)
 8002b88:	2280      	movs	r2, #128	@ 0x80
 8002b8a:	621a      	str	r2, [r3, #32]
	  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;
 8002b8c:	4b39      	ldr	r3, [pc, #228]	@ (8002c74 <HAL_JPEG_MspInit+0x160>)
 8002b8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b92:	625a      	str	r2, [r3, #36]	@ 0x24
	  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 8002b94:	4b37      	ldr	r3, [pc, #220]	@ (8002c74 <HAL_JPEG_MspInit+0x160>)
 8002b96:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8002b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hmdmaIn.Init.DestBurst          = MDMA_DEST_BURST_16BEATS;
 8002b9c:	4b35      	ldr	r3, [pc, #212]	@ (8002c74 <HAL_JPEG_MspInit+0x160>)
 8002b9e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ba2:	631a      	str	r2, [r3, #48]	@ 0x30
	  hmdmaIn.Init.SourceBlockAddressOffset = 0;
 8002ba4:	4b33      	ldr	r3, [pc, #204]	@ (8002c74 <HAL_JPEG_MspInit+0x160>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	635a      	str	r2, [r3, #52]	@ 0x34
	  hmdmaIn.Init.DestBlockAddressOffset  = 0;
 8002baa:	4b32      	ldr	r3, [pc, #200]	@ (8002c74 <HAL_JPEG_MspInit+0x160>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	639a      	str	r2, [r3, #56]	@ 0x38

	  hmdmaIn.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8002bb0:	4b30      	ldr	r3, [pc, #192]	@ (8002c74 <HAL_JPEG_MspInit+0x160>)
 8002bb2:	2211      	movs	r2, #17
 8002bb4:	605a      	str	r2, [r3, #4]
	  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8002bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8002c74 <HAL_JPEG_MspInit+0x160>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
	  hmdmaIn.Init.BufferTransferLength = 32;
 8002bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8002c74 <HAL_JPEG_MspInit+0x160>)
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	629a      	str	r2, [r3, #40]	@ 0x28

	  hmdmaIn.Instance = MDMA_Channel1;
 8002bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8002c74 <HAL_JPEG_MspInit+0x160>)
 8002bc4:	4a2c      	ldr	r2, [pc, #176]	@ (8002c78 <HAL_JPEG_MspInit+0x164>)
 8002bc6:	601a      	str	r2, [r3, #0]

	  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a2a      	ldr	r2, [pc, #168]	@ (8002c74 <HAL_JPEG_MspInit+0x160>)
 8002bcc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bce:	4a29      	ldr	r2, [pc, #164]	@ (8002c74 <HAL_JPEG_MspInit+0x160>)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6413      	str	r3, [r2, #64]	@ 0x40

	  HAL_MDMA_DeInit(&hmdmaIn);
 8002bd4:	4827      	ldr	r0, [pc, #156]	@ (8002c74 <HAL_JPEG_MspInit+0x160>)
 8002bd6:	f005 f88f 	bl	8007cf8 <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaIn);
 8002bda:	4826      	ldr	r0, [pc, #152]	@ (8002c74 <HAL_JPEG_MspInit+0x160>)
 8002bdc:	f005 f840 	bl	8007c60 <HAL_MDMA_Init>

	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 8002be0:	4b26      	ldr	r3, [pc, #152]	@ (8002c7c <HAL_JPEG_MspInit+0x168>)
 8002be2:	22c0      	movs	r2, #192	@ 0xc0
 8002be4:	60da      	str	r2, [r3, #12]
	  hmdmaOut.Init.Endianness      = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002be6:	4b25      	ldr	r3, [pc, #148]	@ (8002c7c <HAL_JPEG_MspInit+0x168>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	611a      	str	r2, [r3, #16]
	  hmdmaOut.Init.SourceInc       = MDMA_SRC_INC_DISABLE;
 8002bec:	4b23      	ldr	r3, [pc, #140]	@ (8002c7c <HAL_JPEG_MspInit+0x168>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	615a      	str	r2, [r3, #20]
	  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
 8002bf2:	4b22      	ldr	r3, [pc, #136]	@ (8002c7c <HAL_JPEG_MspInit+0x168>)
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	619a      	str	r2, [r3, #24]
	  hmdmaOut.Init.SourceDataSize  = MDMA_SRC_DATASIZE_WORD;
 8002bf8:	4b20      	ldr	r3, [pc, #128]	@ (8002c7c <HAL_JPEG_MspInit+0x168>)
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	61da      	str	r2, [r3, #28]
	  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
 8002bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8002c7c <HAL_JPEG_MspInit+0x168>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	621a      	str	r2, [r3, #32]
	  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
 8002c04:	4b1d      	ldr	r3, [pc, #116]	@ (8002c7c <HAL_JPEG_MspInit+0x168>)
 8002c06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c0a:	625a      	str	r2, [r3, #36]	@ 0x24
	  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c7c <HAL_JPEG_MspInit+0x168>)
 8002c0e:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8002c12:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;
 8002c14:	4b19      	ldr	r3, [pc, #100]	@ (8002c7c <HAL_JPEG_MspInit+0x168>)
 8002c16:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 8002c1a:	631a      	str	r2, [r3, #48]	@ 0x30
	  hmdmaOut.Init.SourceBlockAddressOffset = 0;
 8002c1c:	4b17      	ldr	r3, [pc, #92]	@ (8002c7c <HAL_JPEG_MspInit+0x168>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	635a      	str	r2, [r3, #52]	@ 0x34
	  hmdmaOut.Init.DestBlockAddressOffset  = 0;
 8002c22:	4b16      	ldr	r3, [pc, #88]	@ (8002c7c <HAL_JPEG_MspInit+0x168>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	639a      	str	r2, [r3, #56]	@ 0x38

	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8002c28:	4b14      	ldr	r3, [pc, #80]	@ (8002c7c <HAL_JPEG_MspInit+0x168>)
 8002c2a:	2213      	movs	r2, #19
 8002c2c:	605a      	str	r2, [r3, #4]
	  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;
 8002c2e:	4b13      	ldr	r3, [pc, #76]	@ (8002c7c <HAL_JPEG_MspInit+0x168>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]
	  hmdmaOut.Init.BufferTransferLength = 32;
 8002c34:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <HAL_JPEG_MspInit+0x168>)
 8002c36:	2220      	movs	r2, #32
 8002c38:	629a      	str	r2, [r3, #40]	@ 0x28

	  hmdmaOut.Instance = MDMA_Channel0;
 8002c3a:	4b10      	ldr	r3, [pc, #64]	@ (8002c7c <HAL_JPEG_MspInit+0x168>)
 8002c3c:	4a10      	ldr	r2, [pc, #64]	@ (8002c80 <HAL_JPEG_MspInit+0x16c>)
 8002c3e:	601a      	str	r2, [r3, #0]

	  HAL_MDMA_DeInit(&hmdmaOut);
 8002c40:	480e      	ldr	r0, [pc, #56]	@ (8002c7c <HAL_JPEG_MspInit+0x168>)
 8002c42:	f005 f859 	bl	8007cf8 <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaOut);
 8002c46:	480d      	ldr	r0, [pc, #52]	@ (8002c7c <HAL_JPEG_MspInit+0x168>)
 8002c48:	f005 f80a 	bl	8007c60 <HAL_MDMA_Init>

	  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a0b      	ldr	r2, [pc, #44]	@ (8002c7c <HAL_JPEG_MspInit+0x168>)
 8002c50:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c52:	4a0a      	ldr	r2, [pc, #40]	@ (8002c7c <HAL_JPEG_MspInit+0x168>)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6413      	str	r3, [r2, #64]	@ 0x40


	  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 8002c58:	220f      	movs	r2, #15
 8002c5a:	2108      	movs	r1, #8
 8002c5c:	207a      	movs	r0, #122	@ 0x7a
 8002c5e:	f000 fcf0 	bl	8003642 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8002c62:	207a      	movs	r0, #122	@ 0x7a
 8002c64:	f000 fd07 	bl	8003676 <HAL_NVIC_EnableIRQ>
}
 8002c68:	bf00      	nop
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	58024400 	.word	0x58024400
 8002c74:	240bc24c 	.word	0x240bc24c
 8002c78:	52000080 	.word	0x52000080
 8002c7c:	240bc2b8 	.word	0x240bc2b8
 8002c80:	52000040 	.word	0x52000040

08002c84 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b0bc      	sub	sp, #240	@ 0xf0
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c9c:	f107 0318 	add.w	r3, r7, #24
 8002ca0:	22c0      	movs	r2, #192	@ 0xc0
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f00f f91b 	bl	8011ee0 <memset>
  if(hsd->Instance==SDMMC1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a56      	ldr	r2, [pc, #344]	@ (8002e08 <HAL_SD_MspInit+0x184>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	f040 80a5 	bne.w	8002e00 <HAL_SD_MspInit+0x17c>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002cb6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cc6:	f107 0318 	add.w	r3, r7, #24
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f006 fb88 	bl	80093e0 <HAL_RCCEx_PeriphCLKConfig>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002cd6:	f7fe fd39 	bl	800174c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002cda:	4b4c      	ldr	r3, [pc, #304]	@ (8002e0c <HAL_SD_MspInit+0x188>)
 8002cdc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002ce0:	4a4a      	ldr	r2, [pc, #296]	@ (8002e0c <HAL_SD_MspInit+0x188>)
 8002ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8002cea:	4b48      	ldr	r3, [pc, #288]	@ (8002e0c <HAL_SD_MspInit+0x188>)
 8002cec:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf8:	4b44      	ldr	r3, [pc, #272]	@ (8002e0c <HAL_SD_MspInit+0x188>)
 8002cfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002cfe:	4a43      	ldr	r2, [pc, #268]	@ (8002e0c <HAL_SD_MspInit+0x188>)
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002d08:	4b40      	ldr	r3, [pc, #256]	@ (8002e0c <HAL_SD_MspInit+0x188>)
 8002d0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d16:	4b3d      	ldr	r3, [pc, #244]	@ (8002e0c <HAL_SD_MspInit+0x188>)
 8002d18:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d1c:	4a3b      	ldr	r2, [pc, #236]	@ (8002e0c <HAL_SD_MspInit+0x188>)
 8002d1e:	f043 0304 	orr.w	r3, r3, #4
 8002d22:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002d26:	4b39      	ldr	r3, [pc, #228]	@ (8002e0c <HAL_SD_MspInit+0x188>)
 8002d28:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d34:	4b35      	ldr	r3, [pc, #212]	@ (8002e0c <HAL_SD_MspInit+0x188>)
 8002d36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d3a:	4a34      	ldr	r2, [pc, #208]	@ (8002e0c <HAL_SD_MspInit+0x188>)
 8002d3c:	f043 0308 	orr.w	r3, r3, #8
 8002d40:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002d44:	4b31      	ldr	r3, [pc, #196]	@ (8002e0c <HAL_SD_MspInit+0x188>)
 8002d46:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d66:	2303      	movs	r3, #3
 8002d68:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d6c:	230c      	movs	r3, #12
 8002d6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d72:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002d76:	4619      	mov	r1, r3
 8002d78:	4825      	ldr	r0, [pc, #148]	@ (8002e10 <HAL_SD_MspInit+0x18c>)
 8002d7a:	f002 fef1 	bl	8005b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002d7e:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8002d82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d86:	2302      	movs	r3, #2
 8002d88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d92:	2303      	movs	r3, #3
 8002d94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d98:	230c      	movs	r3, #12
 8002d9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d9e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002da2:	4619      	mov	r1, r3
 8002da4:	481b      	ldr	r0, [pc, #108]	@ (8002e14 <HAL_SD_MspInit+0x190>)
 8002da6:	f002 fedb 	bl	8005b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002daa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db2:	2302      	movs	r3, #2
 8002db4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002dc4:	230c      	movs	r3, #12
 8002dc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dca:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4810      	ldr	r0, [pc, #64]	@ (8002e14 <HAL_SD_MspInit+0x190>)
 8002dd2:	f002 fec5 	bl	8005b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de8:	2303      	movs	r3, #3
 8002dea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002dee:	230c      	movs	r3, #12
 8002df0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002df4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4807      	ldr	r0, [pc, #28]	@ (8002e18 <HAL_SD_MspInit+0x194>)
 8002dfc:	f002 feb0 	bl	8005b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002e00:	bf00      	nop
 8002e02:	37f0      	adds	r7, #240	@ 0xf0
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	52007000 	.word	0x52007000
 8002e0c:	58024400 	.word	0x58024400
 8002e10:	58020400 	.word	0x58020400
 8002e14:	58020800 	.word	0x58020800
 8002e18:	58020c00 	.word	0x58020c00

08002e1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b0ba      	sub	sp, #232	@ 0xe8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e24:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
 8002e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e34:	f107 0310 	add.w	r3, r7, #16
 8002e38:	22c0      	movs	r2, #192	@ 0xc0
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f00f f84f 	bl	8011ee0 <memset>
  if(hspi->Instance==SPI1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a41      	ldr	r2, [pc, #260]	@ (8002f4c <HAL_SPI_MspInit+0x130>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d17a      	bne.n	8002f42 <HAL_SPI_MspInit+0x126>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002e4c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e5c:	f107 0310 	add.w	r3, r7, #16
 8002e60:	4618      	mov	r0, r3
 8002e62:	f006 fabd 	bl	80093e0 <HAL_RCCEx_PeriphCLKConfig>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002e6c:	f7fe fc6e 	bl	800174c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e70:	4b37      	ldr	r3, [pc, #220]	@ (8002f50 <HAL_SPI_MspInit+0x134>)
 8002e72:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002e76:	4a36      	ldr	r2, [pc, #216]	@ (8002f50 <HAL_SPI_MspInit+0x134>)
 8002e78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e7c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002e80:	4b33      	ldr	r3, [pc, #204]	@ (8002f50 <HAL_SPI_MspInit+0x134>)
 8002e82:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002e86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8e:	4b30      	ldr	r3, [pc, #192]	@ (8002f50 <HAL_SPI_MspInit+0x134>)
 8002e90:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e94:	4a2e      	ldr	r2, [pc, #184]	@ (8002f50 <HAL_SPI_MspInit+0x134>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f50 <HAL_SPI_MspInit+0x134>)
 8002ea0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002eac:	23a0      	movs	r3, #160	@ 0xa0
 8002eae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ec4:	2305      	movs	r3, #5
 8002ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4820      	ldr	r0, [pc, #128]	@ (8002f54 <HAL_SPI_MspInit+0x138>)
 8002ed2:	f002 fe45 	bl	8005b60 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8002ed6:	4b20      	ldr	r3, [pc, #128]	@ (8002f58 <HAL_SPI_MspInit+0x13c>)
 8002ed8:	4a20      	ldr	r2, [pc, #128]	@ (8002f5c <HAL_SPI_MspInit+0x140>)
 8002eda:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002edc:	4b1e      	ldr	r3, [pc, #120]	@ (8002f58 <HAL_SPI_MspInit+0x13c>)
 8002ede:	2226      	movs	r2, #38	@ 0x26
 8002ee0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f58 <HAL_SPI_MspInit+0x13c>)
 8002ee4:	2240      	movs	r2, #64	@ 0x40
 8002ee6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f58 <HAL_SPI_MspInit+0x13c>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002eee:	4b1a      	ldr	r3, [pc, #104]	@ (8002f58 <HAL_SPI_MspInit+0x13c>)
 8002ef0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ef4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ef6:	4b18      	ldr	r3, [pc, #96]	@ (8002f58 <HAL_SPI_MspInit+0x13c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002efc:	4b16      	ldr	r3, [pc, #88]	@ (8002f58 <HAL_SPI_MspInit+0x13c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002f02:	4b15      	ldr	r3, [pc, #84]	@ (8002f58 <HAL_SPI_MspInit+0x13c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f08:	4b13      	ldr	r3, [pc, #76]	@ (8002f58 <HAL_SPI_MspInit+0x13c>)
 8002f0a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002f0e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f10:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <HAL_SPI_MspInit+0x13c>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002f16:	4810      	ldr	r0, [pc, #64]	@ (8002f58 <HAL_SPI_MspInit+0x13c>)
 8002f18:	f000 fbe4 	bl	80036e4 <HAL_DMA_Init>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8002f22:	f7fe fc13 	bl	800174c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a0b      	ldr	r2, [pc, #44]	@ (8002f58 <HAL_SPI_MspInit+0x13c>)
 8002f2a:	679a      	str	r2, [r3, #120]	@ 0x78
 8002f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002f58 <HAL_SPI_MspInit+0x13c>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002f32:	2200      	movs	r2, #0
 8002f34:	2100      	movs	r1, #0
 8002f36:	2023      	movs	r0, #35	@ 0x23
 8002f38:	f000 fb83 	bl	8003642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002f3c:	2023      	movs	r0, #35	@ 0x23
 8002f3e:	f000 fb9a 	bl	8003676 <HAL_NVIC_EnableIRQ>
  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002f42:	bf00      	nop
 8002f44:	37e8      	adds	r7, #232	@ 0xe8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40013000 	.word	0x40013000
 8002f50:	58024400 	.word	0x58024400
 8002f54:	58020000 	.word	0x58020000
 8002f58:	240001a0 	.word	0x240001a0
 8002f5c:	40020010 	.word	0x40020010

08002f60 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b0b2      	sub	sp, #200	@ 0xc8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f68:	f107 0308 	add.w	r3, r7, #8
 8002f6c:	22c0      	movs	r2, #192	@ 0xc0
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f00e ffb5 	bl	8011ee0 <memset>
  if(hrtc->Instance==RTC)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a10      	ldr	r2, [pc, #64]	@ (8002fbc <HAL_RTC_MspInit+0x5c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d119      	bne.n	8002fb4 <HAL_RTC_MspInit+0x54>
  {

    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f80:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002f8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f94:	f107 0308 	add.w	r3, r7, #8
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f006 fa21 	bl	80093e0 <HAL_RCCEx_PeriphCLKConfig>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002fa4:	f7fe fbd2 	bl	800174c <Error_Handler>
    }

    __HAL_RCC_RTC_ENABLE();
 8002fa8:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <HAL_RTC_MspInit+0x60>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fac:	4a04      	ldr	r2, [pc, #16]	@ (8002fc0 <HAL_RTC_MspInit+0x60>)
 8002fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fb2:	6713      	str	r3, [r2, #112]	@ 0x70

  }

}
 8002fb4:	bf00      	nop
 8002fb6:	37c8      	adds	r7, #200	@ 0xc8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	58004000 	.word	0x58004000
 8002fc0:	58024400 	.word	0x58024400

08002fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fc8:	bf00      	nop
 8002fca:	e7fd      	b.n	8002fc8 <NMI_Handler+0x4>

08002fcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fd0:	bf00      	nop
 8002fd2:	e7fd      	b.n	8002fd0 <HardFault_Handler+0x4>

08002fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fd8:	bf00      	nop
 8002fda:	e7fd      	b.n	8002fd8 <MemManage_Handler+0x4>

08002fdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fe0:	bf00      	nop
 8002fe2:	e7fd      	b.n	8002fe0 <BusFault_Handler+0x4>

08002fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fe8:	bf00      	nop
 8002fea:	e7fd      	b.n	8002fe8 <UsageFault_Handler+0x4>

08002fec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800301a:	f000 f991 	bl	8003340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <JPEG_IRQHandler>:
/* please refer to the startup file (startup_stm32h7xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void JPEG_IRQHandler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  HAL_JPEG_IRQHandler(&JPEG_Handle);
 8003028:	4802      	ldr	r0, [pc, #8]	@ (8003034 <JPEG_IRQHandler+0x10>)
 800302a:	f003 f995 	bl	8006358 <HAL_JPEG_IRQHandler>
}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	24000218 	.word	0x24000218

08003038 <MDMA_IRQHandler>:


void MDMA_IRQHandler()
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Check the interrupt and clear flag */
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmain);
 800303c:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <MDMA_IRQHandler+0x1c>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003040:	4618      	mov	r0, r3
 8003042:	f004 ff59 	bl	8007ef8 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);
 8003046:	4b03      	ldr	r3, [pc, #12]	@ (8003054 <MDMA_IRQHandler+0x1c>)
 8003048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800304a:	4618      	mov	r0, r3
 800304c:	f004 ff54 	bl	8007ef8 <HAL_MDMA_IRQHandler>
}
 8003050:	bf00      	nop
 8003052:	bd80      	pop	{r7, pc}
 8003054:	24000218 	.word	0x24000218

08003058 <DMA1_Stream0_IRQHandler>:

void DMA1_Stream0_IRQHandler()
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0

	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800305c:	4802      	ldr	r0, [pc, #8]	@ (8003068 <DMA1_Stream0_IRQHandler+0x10>)
 800305e:	f001 f915 	bl	800428c <HAL_DMA_IRQHandler>

}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	240001a0 	.word	0x240001a0

0800306c <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003070:	4802      	ldr	r0, [pc, #8]	@ (800307c <SPI1_IRQHandler+0x10>)
 8003072:	f00a ffab 	bl	800dfcc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	24000118 	.word	0x24000118

08003080 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0

    HAL_GPIO_EXTI_IRQHandler(MINUS_BTN_Pin);
 8003084:	2001      	movs	r0, #1
 8003086:	f002 ff4c 	bl	8005f22 <HAL_GPIO_EXTI_IRQHandler>

}
 800308a:	bf00      	nop
 800308c:	bd80      	pop	{r7, pc}

0800308e <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	af00      	add	r7, sp, #0

    HAL_GPIO_EXTI_IRQHandler(SET_BTN_Pin);
 8003092:	2002      	movs	r0, #2
 8003094:	f002 ff45 	bl	8005f22 <HAL_GPIO_EXTI_IRQHandler>

}
 8003098:	bf00      	nop
 800309a:	bd80      	pop	{r7, pc}

0800309c <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0

    HAL_GPIO_EXTI_IRQHandler(PLUS_BTN_Pin);
 80030a0:	2004      	movs	r0, #4
 80030a2:	f002 ff3e 	bl	8005f22 <HAL_GPIO_EXTI_IRQHandler>

}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030b4:	4a14      	ldr	r2, [pc, #80]	@ (8003108 <_sbrk+0x5c>)
 80030b6:	4b15      	ldr	r3, [pc, #84]	@ (800310c <_sbrk+0x60>)
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030c0:	4b13      	ldr	r3, [pc, #76]	@ (8003110 <_sbrk+0x64>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d102      	bne.n	80030ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030c8:	4b11      	ldr	r3, [pc, #68]	@ (8003110 <_sbrk+0x64>)
 80030ca:	4a12      	ldr	r2, [pc, #72]	@ (8003114 <_sbrk+0x68>)
 80030cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ce:	4b10      	ldr	r3, [pc, #64]	@ (8003110 <_sbrk+0x64>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d207      	bcs.n	80030ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030dc:	f00e ff08 	bl	8011ef0 <__errno>
 80030e0:	4603      	mov	r3, r0
 80030e2:	220c      	movs	r2, #12
 80030e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030e6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ea:	e009      	b.n	8003100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030ec:	4b08      	ldr	r3, [pc, #32]	@ (8003110 <_sbrk+0x64>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030f2:	4b07      	ldr	r3, [pc, #28]	@ (8003110 <_sbrk+0x64>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	4a05      	ldr	r2, [pc, #20]	@ (8003110 <_sbrk+0x64>)
 80030fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030fe:	68fb      	ldr	r3, [r7, #12]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	24100000 	.word	0x24100000
 800310c:	00000800 	.word	0x00000800
 8003110:	240bc324 	.word	0x240bc324
 8003114:	240bc4b0 	.word	0x240bc4b0

08003118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800311c:	4b32      	ldr	r3, [pc, #200]	@ (80031e8 <SystemInit+0xd0>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003122:	4a31      	ldr	r2, [pc, #196]	@ (80031e8 <SystemInit+0xd0>)
 8003124:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003128:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800312c:	4b2f      	ldr	r3, [pc, #188]	@ (80031ec <SystemInit+0xd4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	2b02      	cmp	r3, #2
 8003136:	d807      	bhi.n	8003148 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003138:	4b2c      	ldr	r3, [pc, #176]	@ (80031ec <SystemInit+0xd4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f023 030f 	bic.w	r3, r3, #15
 8003140:	4a2a      	ldr	r2, [pc, #168]	@ (80031ec <SystemInit+0xd4>)
 8003142:	f043 0303 	orr.w	r3, r3, #3
 8003146:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003148:	4b29      	ldr	r3, [pc, #164]	@ (80031f0 <SystemInit+0xd8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a28      	ldr	r2, [pc, #160]	@ (80031f0 <SystemInit+0xd8>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003154:	4b26      	ldr	r3, [pc, #152]	@ (80031f0 <SystemInit+0xd8>)
 8003156:	2200      	movs	r2, #0
 8003158:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800315a:	4b25      	ldr	r3, [pc, #148]	@ (80031f0 <SystemInit+0xd8>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4924      	ldr	r1, [pc, #144]	@ (80031f0 <SystemInit+0xd8>)
 8003160:	4b24      	ldr	r3, [pc, #144]	@ (80031f4 <SystemInit+0xdc>)
 8003162:	4013      	ands	r3, r2
 8003164:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003166:	4b21      	ldr	r3, [pc, #132]	@ (80031ec <SystemInit+0xd4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003172:	4b1e      	ldr	r3, [pc, #120]	@ (80031ec <SystemInit+0xd4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 030f 	bic.w	r3, r3, #15
 800317a:	4a1c      	ldr	r2, [pc, #112]	@ (80031ec <SystemInit+0xd4>)
 800317c:	f043 0303 	orr.w	r3, r3, #3
 8003180:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003182:	4b1b      	ldr	r3, [pc, #108]	@ (80031f0 <SystemInit+0xd8>)
 8003184:	2200      	movs	r2, #0
 8003186:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003188:	4b19      	ldr	r3, [pc, #100]	@ (80031f0 <SystemInit+0xd8>)
 800318a:	2200      	movs	r2, #0
 800318c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800318e:	4b18      	ldr	r3, [pc, #96]	@ (80031f0 <SystemInit+0xd8>)
 8003190:	2200      	movs	r2, #0
 8003192:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003194:	4b16      	ldr	r3, [pc, #88]	@ (80031f0 <SystemInit+0xd8>)
 8003196:	4a18      	ldr	r2, [pc, #96]	@ (80031f8 <SystemInit+0xe0>)
 8003198:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800319a:	4b15      	ldr	r3, [pc, #84]	@ (80031f0 <SystemInit+0xd8>)
 800319c:	4a17      	ldr	r2, [pc, #92]	@ (80031fc <SystemInit+0xe4>)
 800319e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80031a0:	4b13      	ldr	r3, [pc, #76]	@ (80031f0 <SystemInit+0xd8>)
 80031a2:	4a17      	ldr	r2, [pc, #92]	@ (8003200 <SystemInit+0xe8>)
 80031a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80031a6:	4b12      	ldr	r3, [pc, #72]	@ (80031f0 <SystemInit+0xd8>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80031ac:	4b10      	ldr	r3, [pc, #64]	@ (80031f0 <SystemInit+0xd8>)
 80031ae:	4a14      	ldr	r2, [pc, #80]	@ (8003200 <SystemInit+0xe8>)
 80031b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80031b2:	4b0f      	ldr	r3, [pc, #60]	@ (80031f0 <SystemInit+0xd8>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80031b8:	4b0d      	ldr	r3, [pc, #52]	@ (80031f0 <SystemInit+0xd8>)
 80031ba:	4a11      	ldr	r2, [pc, #68]	@ (8003200 <SystemInit+0xe8>)
 80031bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80031be:	4b0c      	ldr	r3, [pc, #48]	@ (80031f0 <SystemInit+0xd8>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80031c4:	4b0a      	ldr	r3, [pc, #40]	@ (80031f0 <SystemInit+0xd8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a09      	ldr	r2, [pc, #36]	@ (80031f0 <SystemInit+0xd8>)
 80031ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80031d0:	4b07      	ldr	r3, [pc, #28]	@ (80031f0 <SystemInit+0xd8>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80031d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003204 <SystemInit+0xec>)
 80031d8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80031dc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80031de:	bf00      	nop
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000ed00 	.word	0xe000ed00
 80031ec:	52002000 	.word	0x52002000
 80031f0:	58024400 	.word	0x58024400
 80031f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80031f8:	02020200 	.word	0x02020200
 80031fc:	01ff0000 	.word	0x01ff0000
 8003200:	01010280 	.word	0x01010280
 8003204:	52004000 	.word	0x52004000

08003208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003208:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003240 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800320c:	f7ff ff84 	bl	8003118 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003210:	480c      	ldr	r0, [pc, #48]	@ (8003244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003212:	490d      	ldr	r1, [pc, #52]	@ (8003248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003214:	4a0d      	ldr	r2, [pc, #52]	@ (800324c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003218:	e002      	b.n	8003220 <LoopCopyDataInit>

0800321a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800321a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800321c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800321e:	3304      	adds	r3, #4

08003220 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8003220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003224:	d3f9      	bcc.n	800321a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003226:	4a0a      	ldr	r2, [pc, #40]	@ (8003250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003228:	4c0a      	ldr	r4, [pc, #40]	@ (8003254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800322a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800322c:	e001      	b.n	8003232 <LoopFillZerobss>

0800322e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800322e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003230:	3204      	adds	r2, #4

08003232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003234:	d3fb      	bcc.n	800322e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003236:	f00e fe61 	bl	8011efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800323a:	f7fd ffb5 	bl	80011a8 <main>
  bx  lr
 800323e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003240:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003244:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003248:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 800324c:	08012c14 	.word	0x08012c14
  ldr r2, =_sbss
 8003250:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 8003254:	240bc4ac 	.word	0x240bc4ac

08003258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003258:	e7fe      	b.n	8003258 <ADC_IRQHandler>
	...

0800325c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003262:	2003      	movs	r0, #3
 8003264:	f000 f9e2 	bl	800362c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003268:	f005 fefa 	bl	8009060 <HAL_RCC_GetSysClockFreq>
 800326c:	4602      	mov	r2, r0
 800326e:	4b15      	ldr	r3, [pc, #84]	@ (80032c4 <HAL_Init+0x68>)
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	0a1b      	lsrs	r3, r3, #8
 8003274:	f003 030f 	and.w	r3, r3, #15
 8003278:	4913      	ldr	r1, [pc, #76]	@ (80032c8 <HAL_Init+0x6c>)
 800327a:	5ccb      	ldrb	r3, [r1, r3]
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
 8003284:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003286:	4b0f      	ldr	r3, [pc, #60]	@ (80032c4 <HAL_Init+0x68>)
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	4a0e      	ldr	r2, [pc, #56]	@ (80032c8 <HAL_Init+0x6c>)
 8003290:	5cd3      	ldrb	r3, [r2, r3]
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
 800329c:	4a0b      	ldr	r2, [pc, #44]	@ (80032cc <HAL_Init+0x70>)
 800329e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032a0:	4a0b      	ldr	r2, [pc, #44]	@ (80032d0 <HAL_Init+0x74>)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032a6:	200f      	movs	r0, #15
 80032a8:	f000 f814 	bl	80032d4 <HAL_InitTick>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e002      	b.n	80032bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80032b6:	f7ff fbf1 	bl	8002a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	58024400 	.word	0x58024400
 80032c8:	080128c4 	.word	0x080128c4
 80032cc:	2400000c 	.word	0x2400000c
 80032d0:	24000008 	.word	0x24000008

080032d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80032dc:	4b15      	ldr	r3, [pc, #84]	@ (8003334 <HAL_InitTick+0x60>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e021      	b.n	800332c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80032e8:	4b13      	ldr	r3, [pc, #76]	@ (8003338 <HAL_InitTick+0x64>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b11      	ldr	r3, [pc, #68]	@ (8003334 <HAL_InitTick+0x60>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	4619      	mov	r1, r3
 80032f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f9d5 	bl	80036ae <HAL_SYSTICK_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e00e      	b.n	800332c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b0f      	cmp	r3, #15
 8003312:	d80a      	bhi.n	800332a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003314:	2200      	movs	r2, #0
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	f04f 30ff 	mov.w	r0, #4294967295
 800331c:	f000 f991 	bl	8003642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003320:	4a06      	ldr	r2, [pc, #24]	@ (800333c <HAL_InitTick+0x68>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e000      	b.n	800332c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	24000014 	.word	0x24000014
 8003338:	24000008 	.word	0x24000008
 800333c:	24000010 	.word	0x24000010

08003340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003344:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <HAL_IncTick+0x20>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <HAL_IncTick+0x24>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4413      	add	r3, r2
 8003350:	4a04      	ldr	r2, [pc, #16]	@ (8003364 <HAL_IncTick+0x24>)
 8003352:	6013      	str	r3, [r2, #0]
}
 8003354:	bf00      	nop
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	24000014 	.word	0x24000014
 8003364:	240bc328 	.word	0x240bc328

08003368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return uwTick;
 800336c:	4b03      	ldr	r3, [pc, #12]	@ (800337c <HAL_GetTick+0x14>)
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	240bc328 	.word	0x240bc328

08003380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003388:	f7ff ffee 	bl	8003368 <HAL_GetTick>
 800338c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d005      	beq.n	80033a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800339a:	4b0a      	ldr	r3, [pc, #40]	@ (80033c4 <HAL_Delay+0x44>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033a6:	bf00      	nop
 80033a8:	f7ff ffde 	bl	8003368 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d8f7      	bhi.n	80033a8 <HAL_Delay+0x28>
  {
  }
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	24000014 	.word	0x24000014

080033c8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80033cc:	4b05      	ldr	r3, [pc, #20]	@ (80033e4 <HAL_SuspendTick+0x1c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a04      	ldr	r2, [pc, #16]	@ (80033e4 <HAL_SuspendTick+0x1c>)
 80033d2:	f023 0302 	bic.w	r3, r3, #2
 80033d6:	6013      	str	r3, [r2, #0]
}
 80033d8:	bf00      	nop
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	e000e010 	.word	0xe000e010

080033e8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80033ec:	4b05      	ldr	r3, [pc, #20]	@ (8003404 <HAL_ResumeTick+0x1c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a04      	ldr	r2, [pc, #16]	@ (8003404 <HAL_ResumeTick+0x1c>)
 80033f2:	f043 0302 	orr.w	r3, r3, #2
 80033f6:	6013      	str	r3, [r2, #0]
}
 80033f8:	bf00      	nop
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	e000e010 	.word	0xe000e010

08003408 <__NVIC_SetPriorityGrouping>:
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003418:	4b0b      	ldr	r3, [pc, #44]	@ (8003448 <__NVIC_SetPriorityGrouping+0x40>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003424:	4013      	ands	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003430:	4b06      	ldr	r3, [pc, #24]	@ (800344c <__NVIC_SetPriorityGrouping+0x44>)
 8003432:	4313      	orrs	r3, r2
 8003434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003436:	4a04      	ldr	r2, [pc, #16]	@ (8003448 <__NVIC_SetPriorityGrouping+0x40>)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	60d3      	str	r3, [r2, #12]
}
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	e000ed00 	.word	0xe000ed00
 800344c:	05fa0000 	.word	0x05fa0000

08003450 <__NVIC_GetPriorityGrouping>:
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003454:	4b04      	ldr	r3, [pc, #16]	@ (8003468 <__NVIC_GetPriorityGrouping+0x18>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	0a1b      	lsrs	r3, r3, #8
 800345a:	f003 0307 	and.w	r3, r3, #7
}
 800345e:	4618      	mov	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <__NVIC_EnableIRQ>:
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800347a:	2b00      	cmp	r3, #0
 800347c:	db0b      	blt.n	8003496 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	f003 021f 	and.w	r2, r3, #31
 8003484:	4907      	ldr	r1, [pc, #28]	@ (80034a4 <__NVIC_EnableIRQ+0x38>)
 8003486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	2001      	movs	r0, #1
 800348e:	fa00 f202 	lsl.w	r2, r0, r2
 8003492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	e000e100 	.word	0xe000e100

080034a8 <__NVIC_DisableIRQ>:
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	db12      	blt.n	80034e0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	f003 021f 	and.w	r2, r3, #31
 80034c0:	490a      	ldr	r1, [pc, #40]	@ (80034ec <__NVIC_DisableIRQ+0x44>)
 80034c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	2001      	movs	r0, #1
 80034ca:	fa00 f202 	lsl.w	r2, r0, r2
 80034ce:	3320      	adds	r3, #32
 80034d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80034d4:	f3bf 8f4f 	dsb	sy
}
 80034d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034da:	f3bf 8f6f 	isb	sy
}
 80034de:	bf00      	nop
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000e100 	.word	0xe000e100

080034f0 <__NVIC_ClearPendingIRQ>:
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	db0c      	blt.n	800351c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	f003 021f 	and.w	r2, r3, #31
 8003508:	4907      	ldr	r1, [pc, #28]	@ (8003528 <__NVIC_ClearPendingIRQ+0x38>)
 800350a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	2001      	movs	r0, #1
 8003512:	fa00 f202 	lsl.w	r2, r0, r2
 8003516:	3360      	adds	r3, #96	@ 0x60
 8003518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	e000e100 	.word	0xe000e100

0800352c <__NVIC_SetPriority>:
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	6039      	str	r1, [r7, #0]
 8003536:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800353c:	2b00      	cmp	r3, #0
 800353e:	db0a      	blt.n	8003556 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	490c      	ldr	r1, [pc, #48]	@ (8003578 <__NVIC_SetPriority+0x4c>)
 8003546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800354a:	0112      	lsls	r2, r2, #4
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	440b      	add	r3, r1
 8003550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003554:	e00a      	b.n	800356c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	4908      	ldr	r1, [pc, #32]	@ (800357c <__NVIC_SetPriority+0x50>)
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	3b04      	subs	r3, #4
 8003564:	0112      	lsls	r2, r2, #4
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	440b      	add	r3, r1
 800356a:	761a      	strb	r2, [r3, #24]
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	e000e100 	.word	0xe000e100
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <NVIC_EncodePriority>:
{
 8003580:	b480      	push	{r7}
 8003582:	b089      	sub	sp, #36	@ 0x24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f1c3 0307 	rsb	r3, r3, #7
 800359a:	2b04      	cmp	r3, #4
 800359c:	bf28      	it	cs
 800359e:	2304      	movcs	r3, #4
 80035a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3304      	adds	r3, #4
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d902      	bls.n	80035b0 <NVIC_EncodePriority+0x30>
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3b03      	subs	r3, #3
 80035ae:	e000      	b.n	80035b2 <NVIC_EncodePriority+0x32>
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b4:	f04f 32ff 	mov.w	r2, #4294967295
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43da      	mvns	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	401a      	ands	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c8:	f04f 31ff 	mov.w	r1, #4294967295
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	fa01 f303 	lsl.w	r3, r1, r3
 80035d2:	43d9      	mvns	r1, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	4313      	orrs	r3, r2
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3724      	adds	r7, #36	@ 0x24
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035f8:	d301      	bcc.n	80035fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035fa:	2301      	movs	r3, #1
 80035fc:	e00f      	b.n	800361e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003628 <SysTick_Config+0x40>)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3b01      	subs	r3, #1
 8003604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003606:	210f      	movs	r1, #15
 8003608:	f04f 30ff 	mov.w	r0, #4294967295
 800360c:	f7ff ff8e 	bl	800352c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003610:	4b05      	ldr	r3, [pc, #20]	@ (8003628 <SysTick_Config+0x40>)
 8003612:	2200      	movs	r2, #0
 8003614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003616:	4b04      	ldr	r3, [pc, #16]	@ (8003628 <SysTick_Config+0x40>)
 8003618:	2207      	movs	r2, #7
 800361a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	e000e010 	.word	0xe000e010

0800362c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff fee7 	bl	8003408 <__NVIC_SetPriorityGrouping>
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b086      	sub	sp, #24
 8003646:	af00      	add	r7, sp, #0
 8003648:	4603      	mov	r3, r0
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
 800364e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003650:	f7ff fefe 	bl	8003450 <__NVIC_GetPriorityGrouping>
 8003654:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	6978      	ldr	r0, [r7, #20]
 800365c:	f7ff ff90 	bl	8003580 <NVIC_EncodePriority>
 8003660:	4602      	mov	r2, r0
 8003662:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff ff5f 	bl	800352c <__NVIC_SetPriority>
}
 800366e:	bf00      	nop
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b082      	sub	sp, #8
 800367a:	af00      	add	r7, sp, #0
 800367c:	4603      	mov	r3, r0
 800367e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fef1 	bl	800346c <__NVIC_EnableIRQ>
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	4603      	mov	r3, r0
 800369a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800369c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff ff01 	bl	80034a8 <__NVIC_DisableIRQ>
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff ff96 	bl	80035e8 <SysTick_Config>
 80036bc:	4603      	mov	r3, r0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4603      	mov	r3, r0
 80036ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80036d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff0b 	bl	80034f0 <__NVIC_ClearPendingIRQ>
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80036ec:	f7ff fe3c 	bl	8003368 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e37d      	b.n	8003df8 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a66      	ldr	r2, [pc, #408]	@ (800389c <HAL_DMA_Init+0x1b8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d04a      	beq.n	800379c <HAL_DMA_Init+0xb8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a65      	ldr	r2, [pc, #404]	@ (80038a0 <HAL_DMA_Init+0x1bc>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d045      	beq.n	800379c <HAL_DMA_Init+0xb8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a63      	ldr	r2, [pc, #396]	@ (80038a4 <HAL_DMA_Init+0x1c0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d040      	beq.n	800379c <HAL_DMA_Init+0xb8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a62      	ldr	r2, [pc, #392]	@ (80038a8 <HAL_DMA_Init+0x1c4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d03b      	beq.n	800379c <HAL_DMA_Init+0xb8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a60      	ldr	r2, [pc, #384]	@ (80038ac <HAL_DMA_Init+0x1c8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d036      	beq.n	800379c <HAL_DMA_Init+0xb8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a5f      	ldr	r2, [pc, #380]	@ (80038b0 <HAL_DMA_Init+0x1cc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d031      	beq.n	800379c <HAL_DMA_Init+0xb8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a5d      	ldr	r2, [pc, #372]	@ (80038b4 <HAL_DMA_Init+0x1d0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d02c      	beq.n	800379c <HAL_DMA_Init+0xb8>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a5c      	ldr	r2, [pc, #368]	@ (80038b8 <HAL_DMA_Init+0x1d4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d027      	beq.n	800379c <HAL_DMA_Init+0xb8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a5a      	ldr	r2, [pc, #360]	@ (80038bc <HAL_DMA_Init+0x1d8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d022      	beq.n	800379c <HAL_DMA_Init+0xb8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a59      	ldr	r2, [pc, #356]	@ (80038c0 <HAL_DMA_Init+0x1dc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d01d      	beq.n	800379c <HAL_DMA_Init+0xb8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a57      	ldr	r2, [pc, #348]	@ (80038c4 <HAL_DMA_Init+0x1e0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d018      	beq.n	800379c <HAL_DMA_Init+0xb8>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a56      	ldr	r2, [pc, #344]	@ (80038c8 <HAL_DMA_Init+0x1e4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d013      	beq.n	800379c <HAL_DMA_Init+0xb8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a54      	ldr	r2, [pc, #336]	@ (80038cc <HAL_DMA_Init+0x1e8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00e      	beq.n	800379c <HAL_DMA_Init+0xb8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a53      	ldr	r2, [pc, #332]	@ (80038d0 <HAL_DMA_Init+0x1ec>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d009      	beq.n	800379c <HAL_DMA_Init+0xb8>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a51      	ldr	r2, [pc, #324]	@ (80038d4 <HAL_DMA_Init+0x1f0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d004      	beq.n	800379c <HAL_DMA_Init+0xb8>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a50      	ldr	r2, [pc, #320]	@ (80038d8 <HAL_DMA_Init+0x1f4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d101      	bne.n	80037a0 <HAL_DMA_Init+0xbc>
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <HAL_DMA_Init+0xbe>
 80037a0:	2300      	movs	r3, #0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 813c 	beq.w	8003a20 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a37      	ldr	r2, [pc, #220]	@ (800389c <HAL_DMA_Init+0x1b8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d04a      	beq.n	8003858 <HAL_DMA_Init+0x174>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a36      	ldr	r2, [pc, #216]	@ (80038a0 <HAL_DMA_Init+0x1bc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d045      	beq.n	8003858 <HAL_DMA_Init+0x174>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a34      	ldr	r2, [pc, #208]	@ (80038a4 <HAL_DMA_Init+0x1c0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d040      	beq.n	8003858 <HAL_DMA_Init+0x174>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a33      	ldr	r2, [pc, #204]	@ (80038a8 <HAL_DMA_Init+0x1c4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d03b      	beq.n	8003858 <HAL_DMA_Init+0x174>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a31      	ldr	r2, [pc, #196]	@ (80038ac <HAL_DMA_Init+0x1c8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d036      	beq.n	8003858 <HAL_DMA_Init+0x174>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a30      	ldr	r2, [pc, #192]	@ (80038b0 <HAL_DMA_Init+0x1cc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d031      	beq.n	8003858 <HAL_DMA_Init+0x174>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a2e      	ldr	r2, [pc, #184]	@ (80038b4 <HAL_DMA_Init+0x1d0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d02c      	beq.n	8003858 <HAL_DMA_Init+0x174>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a2d      	ldr	r2, [pc, #180]	@ (80038b8 <HAL_DMA_Init+0x1d4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d027      	beq.n	8003858 <HAL_DMA_Init+0x174>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a2b      	ldr	r2, [pc, #172]	@ (80038bc <HAL_DMA_Init+0x1d8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d022      	beq.n	8003858 <HAL_DMA_Init+0x174>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a2a      	ldr	r2, [pc, #168]	@ (80038c0 <HAL_DMA_Init+0x1dc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d01d      	beq.n	8003858 <HAL_DMA_Init+0x174>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a28      	ldr	r2, [pc, #160]	@ (80038c4 <HAL_DMA_Init+0x1e0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d018      	beq.n	8003858 <HAL_DMA_Init+0x174>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a27      	ldr	r2, [pc, #156]	@ (80038c8 <HAL_DMA_Init+0x1e4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d013      	beq.n	8003858 <HAL_DMA_Init+0x174>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a25      	ldr	r2, [pc, #148]	@ (80038cc <HAL_DMA_Init+0x1e8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00e      	beq.n	8003858 <HAL_DMA_Init+0x174>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a24      	ldr	r2, [pc, #144]	@ (80038d0 <HAL_DMA_Init+0x1ec>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d009      	beq.n	8003858 <HAL_DMA_Init+0x174>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a22      	ldr	r2, [pc, #136]	@ (80038d4 <HAL_DMA_Init+0x1f0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d004      	beq.n	8003858 <HAL_DMA_Init+0x174>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a21      	ldr	r2, [pc, #132]	@ (80038d8 <HAL_DMA_Init+0x1f4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d108      	bne.n	800386a <HAL_DMA_Init+0x186>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0201 	bic.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	e007      	b.n	800387a <HAL_DMA_Init+0x196>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800387a:	e02f      	b.n	80038dc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800387c:	f7ff fd74 	bl	8003368 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b05      	cmp	r3, #5
 8003888:	d928      	bls.n	80038dc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2220      	movs	r2, #32
 800388e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2203      	movs	r2, #3
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e2ad      	b.n	8003df8 <HAL_DMA_Init+0x714>
 800389c:	40020010 	.word	0x40020010
 80038a0:	40020028 	.word	0x40020028
 80038a4:	40020040 	.word	0x40020040
 80038a8:	40020058 	.word	0x40020058
 80038ac:	40020070 	.word	0x40020070
 80038b0:	40020088 	.word	0x40020088
 80038b4:	400200a0 	.word	0x400200a0
 80038b8:	400200b8 	.word	0x400200b8
 80038bc:	40020410 	.word	0x40020410
 80038c0:	40020428 	.word	0x40020428
 80038c4:	40020440 	.word	0x40020440
 80038c8:	40020458 	.word	0x40020458
 80038cc:	40020470 	.word	0x40020470
 80038d0:	40020488 	.word	0x40020488
 80038d4:	400204a0 	.word	0x400204a0
 80038d8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1c8      	bne.n	800387c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4b73      	ldr	r3, [pc, #460]	@ (8003ac4 <HAL_DMA_Init+0x3e0>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003902:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800390e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800391a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	2b04      	cmp	r3, #4
 800392e:	d107      	bne.n	8003940 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003938:	4313      	orrs	r3, r2
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b28      	cmp	r3, #40	@ 0x28
 8003946:	d903      	bls.n	8003950 <HAL_DMA_Init+0x26c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b2e      	cmp	r3, #46	@ 0x2e
 800394e:	d91f      	bls.n	8003990 <HAL_DMA_Init+0x2ac>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b3e      	cmp	r3, #62	@ 0x3e
 8003956:	d903      	bls.n	8003960 <HAL_DMA_Init+0x27c>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b42      	cmp	r3, #66	@ 0x42
 800395e:	d917      	bls.n	8003990 <HAL_DMA_Init+0x2ac>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b46      	cmp	r3, #70	@ 0x46
 8003966:	d903      	bls.n	8003970 <HAL_DMA_Init+0x28c>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b48      	cmp	r3, #72	@ 0x48
 800396e:	d90f      	bls.n	8003990 <HAL_DMA_Init+0x2ac>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b4e      	cmp	r3, #78	@ 0x4e
 8003976:	d903      	bls.n	8003980 <HAL_DMA_Init+0x29c>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b52      	cmp	r3, #82	@ 0x52
 800397e:	d907      	bls.n	8003990 <HAL_DMA_Init+0x2ac>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b73      	cmp	r3, #115	@ 0x73
 8003986:	d905      	bls.n	8003994 <HAL_DMA_Init+0x2b0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b77      	cmp	r3, #119	@ 0x77
 800398e:	d801      	bhi.n	8003994 <HAL_DMA_Init+0x2b0>
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <HAL_DMA_Init+0x2b2>
 8003994:	2300      	movs	r3, #0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039a0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 0307 	bic.w	r3, r3, #7
 80039b8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d117      	bne.n	80039fc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00e      	beq.n	80039fc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f001 fc68 	bl	80052b4 <DMA_CheckFifoParam>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d008      	beq.n	80039fc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2240      	movs	r2, #64	@ 0x40
 80039ee:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e1fd      	b.n	8003df8 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f001 fba3 	bl	8005150 <DMA_CalcBaseAndBitshift>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	223f      	movs	r2, #63	@ 0x3f
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	609a      	str	r2, [r3, #8]
 8003a1e:	e0fd      	b.n	8003c1c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a28      	ldr	r2, [pc, #160]	@ (8003ac8 <HAL_DMA_Init+0x3e4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d04a      	beq.n	8003ac0 <HAL_DMA_Init+0x3dc>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a27      	ldr	r2, [pc, #156]	@ (8003acc <HAL_DMA_Init+0x3e8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d045      	beq.n	8003ac0 <HAL_DMA_Init+0x3dc>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a25      	ldr	r2, [pc, #148]	@ (8003ad0 <HAL_DMA_Init+0x3ec>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d040      	beq.n	8003ac0 <HAL_DMA_Init+0x3dc>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a24      	ldr	r2, [pc, #144]	@ (8003ad4 <HAL_DMA_Init+0x3f0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d03b      	beq.n	8003ac0 <HAL_DMA_Init+0x3dc>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a22      	ldr	r2, [pc, #136]	@ (8003ad8 <HAL_DMA_Init+0x3f4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d036      	beq.n	8003ac0 <HAL_DMA_Init+0x3dc>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a21      	ldr	r2, [pc, #132]	@ (8003adc <HAL_DMA_Init+0x3f8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d031      	beq.n	8003ac0 <HAL_DMA_Init+0x3dc>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae0 <HAL_DMA_Init+0x3fc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d02c      	beq.n	8003ac0 <HAL_DMA_Init+0x3dc>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae4 <HAL_DMA_Init+0x400>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d027      	beq.n	8003ac0 <HAL_DMA_Init+0x3dc>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a1c      	ldr	r2, [pc, #112]	@ (8003ae8 <HAL_DMA_Init+0x404>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d022      	beq.n	8003ac0 <HAL_DMA_Init+0x3dc>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003aec <HAL_DMA_Init+0x408>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d01d      	beq.n	8003ac0 <HAL_DMA_Init+0x3dc>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a19      	ldr	r2, [pc, #100]	@ (8003af0 <HAL_DMA_Init+0x40c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d018      	beq.n	8003ac0 <HAL_DMA_Init+0x3dc>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a18      	ldr	r2, [pc, #96]	@ (8003af4 <HAL_DMA_Init+0x410>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d013      	beq.n	8003ac0 <HAL_DMA_Init+0x3dc>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a16      	ldr	r2, [pc, #88]	@ (8003af8 <HAL_DMA_Init+0x414>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00e      	beq.n	8003ac0 <HAL_DMA_Init+0x3dc>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a15      	ldr	r2, [pc, #84]	@ (8003afc <HAL_DMA_Init+0x418>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d009      	beq.n	8003ac0 <HAL_DMA_Init+0x3dc>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a13      	ldr	r2, [pc, #76]	@ (8003b00 <HAL_DMA_Init+0x41c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d004      	beq.n	8003ac0 <HAL_DMA_Init+0x3dc>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a12      	ldr	r2, [pc, #72]	@ (8003b04 <HAL_DMA_Init+0x420>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d123      	bne.n	8003b08 <HAL_DMA_Init+0x424>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e022      	b.n	8003b0a <HAL_DMA_Init+0x426>
 8003ac4:	fe10803f 	.word	0xfe10803f
 8003ac8:	48022c08 	.word	0x48022c08
 8003acc:	48022c1c 	.word	0x48022c1c
 8003ad0:	48022c30 	.word	0x48022c30
 8003ad4:	48022c44 	.word	0x48022c44
 8003ad8:	48022c58 	.word	0x48022c58
 8003adc:	48022c6c 	.word	0x48022c6c
 8003ae0:	48022c80 	.word	0x48022c80
 8003ae4:	48022c94 	.word	0x48022c94
 8003ae8:	58025408 	.word	0x58025408
 8003aec:	5802541c 	.word	0x5802541c
 8003af0:	58025430 	.word	0x58025430
 8003af4:	58025444 	.word	0x58025444
 8003af8:	58025458 	.word	0x58025458
 8003afc:	5802546c 	.word	0x5802546c
 8003b00:	58025480 	.word	0x58025480
 8003b04:	58025494 	.word	0x58025494
 8003b08:	2300      	movs	r3, #0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d07d      	beq.n	8003c0a <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a7f      	ldr	r2, [pc, #508]	@ (8003d10 <HAL_DMA_Init+0x62c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d021      	beq.n	8003b5c <HAL_DMA_Init+0x478>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a7d      	ldr	r2, [pc, #500]	@ (8003d14 <HAL_DMA_Init+0x630>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01c      	beq.n	8003b5c <HAL_DMA_Init+0x478>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a7c      	ldr	r2, [pc, #496]	@ (8003d18 <HAL_DMA_Init+0x634>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d017      	beq.n	8003b5c <HAL_DMA_Init+0x478>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a7a      	ldr	r2, [pc, #488]	@ (8003d1c <HAL_DMA_Init+0x638>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d012      	beq.n	8003b5c <HAL_DMA_Init+0x478>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a79      	ldr	r2, [pc, #484]	@ (8003d20 <HAL_DMA_Init+0x63c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00d      	beq.n	8003b5c <HAL_DMA_Init+0x478>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a77      	ldr	r2, [pc, #476]	@ (8003d24 <HAL_DMA_Init+0x640>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d008      	beq.n	8003b5c <HAL_DMA_Init+0x478>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a76      	ldr	r2, [pc, #472]	@ (8003d28 <HAL_DMA_Init+0x644>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d003      	beq.n	8003b5c <HAL_DMA_Init+0x478>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a74      	ldr	r2, [pc, #464]	@ (8003d2c <HAL_DMA_Init+0x648>)
 8003b5a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4b6e      	ldr	r3, [pc, #440]	@ (8003d30 <HAL_DMA_Init+0x64c>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b40      	cmp	r3, #64	@ 0x40
 8003b82:	d008      	beq.n	8003b96 <HAL_DMA_Init+0x4b2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b80      	cmp	r3, #128	@ 0x80
 8003b8a:	d102      	bne.n	8003b92 <HAL_DMA_Init+0x4ae>
 8003b8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b90:	e002      	b.n	8003b98 <HAL_DMA_Init+0x4b4>
 8003b92:	2300      	movs	r3, #0
 8003b94:	e000      	b.n	8003b98 <HAL_DMA_Init+0x4b4>
 8003b96:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	68d2      	ldr	r2, [r2, #12]
 8003b9c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b9e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003ba6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003bae:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003bb6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003bbe:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003bc6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	4b55      	ldr	r3, [pc, #340]	@ (8003d34 <HAL_DMA_Init+0x650>)
 8003bde:	4413      	add	r3, r2
 8003be0:	4a55      	ldr	r2, [pc, #340]	@ (8003d38 <HAL_DMA_Init+0x654>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	091b      	lsrs	r3, r3, #4
 8003be8:	009a      	lsls	r2, r3, #2
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f001 faae 	bl	8005150 <DMA_CalcBaseAndBitshift>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfc:	f003 031f 	and.w	r3, r3, #31
 8003c00:	2201      	movs	r2, #1
 8003c02:	409a      	lsls	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	e008      	b.n	8003c1c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2240      	movs	r2, #64	@ 0x40
 8003c0e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2203      	movs	r2, #3
 8003c14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0ed      	b.n	8003df8 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a46      	ldr	r2, [pc, #280]	@ (8003d3c <HAL_DMA_Init+0x658>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d072      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a45      	ldr	r2, [pc, #276]	@ (8003d40 <HAL_DMA_Init+0x65c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d06d      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a43      	ldr	r2, [pc, #268]	@ (8003d44 <HAL_DMA_Init+0x660>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d068      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a42      	ldr	r2, [pc, #264]	@ (8003d48 <HAL_DMA_Init+0x664>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d063      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a40      	ldr	r2, [pc, #256]	@ (8003d4c <HAL_DMA_Init+0x668>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d05e      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a3f      	ldr	r2, [pc, #252]	@ (8003d50 <HAL_DMA_Init+0x66c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d059      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a3d      	ldr	r2, [pc, #244]	@ (8003d54 <HAL_DMA_Init+0x670>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d054      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a3c      	ldr	r2, [pc, #240]	@ (8003d58 <HAL_DMA_Init+0x674>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d04f      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a3a      	ldr	r2, [pc, #232]	@ (8003d5c <HAL_DMA_Init+0x678>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d04a      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a39      	ldr	r2, [pc, #228]	@ (8003d60 <HAL_DMA_Init+0x67c>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d045      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a37      	ldr	r2, [pc, #220]	@ (8003d64 <HAL_DMA_Init+0x680>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d040      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a36      	ldr	r2, [pc, #216]	@ (8003d68 <HAL_DMA_Init+0x684>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d03b      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a34      	ldr	r2, [pc, #208]	@ (8003d6c <HAL_DMA_Init+0x688>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d036      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a33      	ldr	r2, [pc, #204]	@ (8003d70 <HAL_DMA_Init+0x68c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d031      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a31      	ldr	r2, [pc, #196]	@ (8003d74 <HAL_DMA_Init+0x690>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d02c      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a30      	ldr	r2, [pc, #192]	@ (8003d78 <HAL_DMA_Init+0x694>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d027      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a13      	ldr	r2, [pc, #76]	@ (8003d10 <HAL_DMA_Init+0x62c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d022      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a12      	ldr	r2, [pc, #72]	@ (8003d14 <HAL_DMA_Init+0x630>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d01d      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a10      	ldr	r2, [pc, #64]	@ (8003d18 <HAL_DMA_Init+0x634>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d018      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a0f      	ldr	r2, [pc, #60]	@ (8003d1c <HAL_DMA_Init+0x638>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d013      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8003d20 <HAL_DMA_Init+0x63c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d00e      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8003d24 <HAL_DMA_Init+0x640>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d009      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8003d28 <HAL_DMA_Init+0x644>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d004      	beq.n	8003d0c <HAL_DMA_Init+0x628>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a09      	ldr	r2, [pc, #36]	@ (8003d2c <HAL_DMA_Init+0x648>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d137      	bne.n	8003d7c <HAL_DMA_Init+0x698>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e036      	b.n	8003d7e <HAL_DMA_Init+0x69a>
 8003d10:	58025408 	.word	0x58025408
 8003d14:	5802541c 	.word	0x5802541c
 8003d18:	58025430 	.word	0x58025430
 8003d1c:	58025444 	.word	0x58025444
 8003d20:	58025458 	.word	0x58025458
 8003d24:	5802546c 	.word	0x5802546c
 8003d28:	58025480 	.word	0x58025480
 8003d2c:	58025494 	.word	0x58025494
 8003d30:	fffe000f 	.word	0xfffe000f
 8003d34:	a7fdabf8 	.word	0xa7fdabf8
 8003d38:	cccccccd 	.word	0xcccccccd
 8003d3c:	40020010 	.word	0x40020010
 8003d40:	40020028 	.word	0x40020028
 8003d44:	40020040 	.word	0x40020040
 8003d48:	40020058 	.word	0x40020058
 8003d4c:	40020070 	.word	0x40020070
 8003d50:	40020088 	.word	0x40020088
 8003d54:	400200a0 	.word	0x400200a0
 8003d58:	400200b8 	.word	0x400200b8
 8003d5c:	40020410 	.word	0x40020410
 8003d60:	40020428 	.word	0x40020428
 8003d64:	40020440 	.word	0x40020440
 8003d68:	40020458 	.word	0x40020458
 8003d6c:	40020470 	.word	0x40020470
 8003d70:	40020488 	.word	0x40020488
 8003d74:	400204a0 	.word	0x400204a0
 8003d78:	400204b8 	.word	0x400204b8
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d032      	beq.n	8003de8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f001 fb12 	bl	80053ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b80      	cmp	r3, #128	@ 0x80
 8003d8e:	d102      	bne.n	8003d96 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003daa:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d010      	beq.n	8003dd6 <HAL_DMA_Init+0x6f2>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d80c      	bhi.n	8003dd6 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f001 fb8f 	bl	80054e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003dd2:	605a      	str	r2, [r3, #4]
 8003dd4:	e008      	b.n	8003de8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e237      	b.n	8004282 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d004      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2280      	movs	r2, #128	@ 0x80
 8003e22:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e22c      	b.n	8004282 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a5c      	ldr	r2, [pc, #368]	@ (8003fa0 <HAL_DMA_Abort_IT+0x1a0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d04a      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0xc8>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a5b      	ldr	r2, [pc, #364]	@ (8003fa4 <HAL_DMA_Abort_IT+0x1a4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d045      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0xc8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a59      	ldr	r2, [pc, #356]	@ (8003fa8 <HAL_DMA_Abort_IT+0x1a8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d040      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0xc8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a58      	ldr	r2, [pc, #352]	@ (8003fac <HAL_DMA_Abort_IT+0x1ac>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d03b      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0xc8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a56      	ldr	r2, [pc, #344]	@ (8003fb0 <HAL_DMA_Abort_IT+0x1b0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d036      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0xc8>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a55      	ldr	r2, [pc, #340]	@ (8003fb4 <HAL_DMA_Abort_IT+0x1b4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d031      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0xc8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a53      	ldr	r2, [pc, #332]	@ (8003fb8 <HAL_DMA_Abort_IT+0x1b8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d02c      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0xc8>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a52      	ldr	r2, [pc, #328]	@ (8003fbc <HAL_DMA_Abort_IT+0x1bc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d027      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0xc8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a50      	ldr	r2, [pc, #320]	@ (8003fc0 <HAL_DMA_Abort_IT+0x1c0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d022      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0xc8>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a4f      	ldr	r2, [pc, #316]	@ (8003fc4 <HAL_DMA_Abort_IT+0x1c4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d01d      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0xc8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a4d      	ldr	r2, [pc, #308]	@ (8003fc8 <HAL_DMA_Abort_IT+0x1c8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d018      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0xc8>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a4c      	ldr	r2, [pc, #304]	@ (8003fcc <HAL_DMA_Abort_IT+0x1cc>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d013      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0xc8>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a4a      	ldr	r2, [pc, #296]	@ (8003fd0 <HAL_DMA_Abort_IT+0x1d0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00e      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0xc8>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a49      	ldr	r2, [pc, #292]	@ (8003fd4 <HAL_DMA_Abort_IT+0x1d4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d009      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0xc8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a47      	ldr	r2, [pc, #284]	@ (8003fd8 <HAL_DMA_Abort_IT+0x1d8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0xc8>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a46      	ldr	r2, [pc, #280]	@ (8003fdc <HAL_DMA_Abort_IT+0x1dc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d101      	bne.n	8003ecc <HAL_DMA_Abort_IT+0xcc>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <HAL_DMA_Abort_IT+0xce>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 8086 	beq.w	8003fe0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2204      	movs	r2, #4
 8003ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a2f      	ldr	r2, [pc, #188]	@ (8003fa0 <HAL_DMA_Abort_IT+0x1a0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d04a      	beq.n	8003f7c <HAL_DMA_Abort_IT+0x17c>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a2e      	ldr	r2, [pc, #184]	@ (8003fa4 <HAL_DMA_Abort_IT+0x1a4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d045      	beq.n	8003f7c <HAL_DMA_Abort_IT+0x17c>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa8 <HAL_DMA_Abort_IT+0x1a8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d040      	beq.n	8003f7c <HAL_DMA_Abort_IT+0x17c>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a2b      	ldr	r2, [pc, #172]	@ (8003fac <HAL_DMA_Abort_IT+0x1ac>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d03b      	beq.n	8003f7c <HAL_DMA_Abort_IT+0x17c>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a29      	ldr	r2, [pc, #164]	@ (8003fb0 <HAL_DMA_Abort_IT+0x1b0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d036      	beq.n	8003f7c <HAL_DMA_Abort_IT+0x17c>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a28      	ldr	r2, [pc, #160]	@ (8003fb4 <HAL_DMA_Abort_IT+0x1b4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d031      	beq.n	8003f7c <HAL_DMA_Abort_IT+0x17c>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a26      	ldr	r2, [pc, #152]	@ (8003fb8 <HAL_DMA_Abort_IT+0x1b8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d02c      	beq.n	8003f7c <HAL_DMA_Abort_IT+0x17c>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a25      	ldr	r2, [pc, #148]	@ (8003fbc <HAL_DMA_Abort_IT+0x1bc>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d027      	beq.n	8003f7c <HAL_DMA_Abort_IT+0x17c>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a23      	ldr	r2, [pc, #140]	@ (8003fc0 <HAL_DMA_Abort_IT+0x1c0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d022      	beq.n	8003f7c <HAL_DMA_Abort_IT+0x17c>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a22      	ldr	r2, [pc, #136]	@ (8003fc4 <HAL_DMA_Abort_IT+0x1c4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d01d      	beq.n	8003f7c <HAL_DMA_Abort_IT+0x17c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a20      	ldr	r2, [pc, #128]	@ (8003fc8 <HAL_DMA_Abort_IT+0x1c8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d018      	beq.n	8003f7c <HAL_DMA_Abort_IT+0x17c>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003fcc <HAL_DMA_Abort_IT+0x1cc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d013      	beq.n	8003f7c <HAL_DMA_Abort_IT+0x17c>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd0 <HAL_DMA_Abort_IT+0x1d0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00e      	beq.n	8003f7c <HAL_DMA_Abort_IT+0x17c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1c      	ldr	r2, [pc, #112]	@ (8003fd4 <HAL_DMA_Abort_IT+0x1d4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d009      	beq.n	8003f7c <HAL_DMA_Abort_IT+0x17c>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8003fd8 <HAL_DMA_Abort_IT+0x1d8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d004      	beq.n	8003f7c <HAL_DMA_Abort_IT+0x17c>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a19      	ldr	r2, [pc, #100]	@ (8003fdc <HAL_DMA_Abort_IT+0x1dc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d108      	bne.n	8003f8e <HAL_DMA_Abort_IT+0x18e>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0201 	bic.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	e178      	b.n	8004280 <HAL_DMA_Abort_IT+0x480>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0201 	bic.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e16f      	b.n	8004280 <HAL_DMA_Abort_IT+0x480>
 8003fa0:	40020010 	.word	0x40020010
 8003fa4:	40020028 	.word	0x40020028
 8003fa8:	40020040 	.word	0x40020040
 8003fac:	40020058 	.word	0x40020058
 8003fb0:	40020070 	.word	0x40020070
 8003fb4:	40020088 	.word	0x40020088
 8003fb8:	400200a0 	.word	0x400200a0
 8003fbc:	400200b8 	.word	0x400200b8
 8003fc0:	40020410 	.word	0x40020410
 8003fc4:	40020428 	.word	0x40020428
 8003fc8:	40020440 	.word	0x40020440
 8003fcc:	40020458 	.word	0x40020458
 8003fd0:	40020470 	.word	0x40020470
 8003fd4:	40020488 	.word	0x40020488
 8003fd8:	400204a0 	.word	0x400204a0
 8003fdc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 020e 	bic.w	r2, r2, #14
 8003fee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a6c      	ldr	r2, [pc, #432]	@ (80041a8 <HAL_DMA_Abort_IT+0x3a8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d04a      	beq.n	8004090 <HAL_DMA_Abort_IT+0x290>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a6b      	ldr	r2, [pc, #428]	@ (80041ac <HAL_DMA_Abort_IT+0x3ac>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d045      	beq.n	8004090 <HAL_DMA_Abort_IT+0x290>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a69      	ldr	r2, [pc, #420]	@ (80041b0 <HAL_DMA_Abort_IT+0x3b0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d040      	beq.n	8004090 <HAL_DMA_Abort_IT+0x290>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a68      	ldr	r2, [pc, #416]	@ (80041b4 <HAL_DMA_Abort_IT+0x3b4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d03b      	beq.n	8004090 <HAL_DMA_Abort_IT+0x290>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a66      	ldr	r2, [pc, #408]	@ (80041b8 <HAL_DMA_Abort_IT+0x3b8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d036      	beq.n	8004090 <HAL_DMA_Abort_IT+0x290>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a65      	ldr	r2, [pc, #404]	@ (80041bc <HAL_DMA_Abort_IT+0x3bc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d031      	beq.n	8004090 <HAL_DMA_Abort_IT+0x290>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a63      	ldr	r2, [pc, #396]	@ (80041c0 <HAL_DMA_Abort_IT+0x3c0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d02c      	beq.n	8004090 <HAL_DMA_Abort_IT+0x290>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a62      	ldr	r2, [pc, #392]	@ (80041c4 <HAL_DMA_Abort_IT+0x3c4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d027      	beq.n	8004090 <HAL_DMA_Abort_IT+0x290>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a60      	ldr	r2, [pc, #384]	@ (80041c8 <HAL_DMA_Abort_IT+0x3c8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d022      	beq.n	8004090 <HAL_DMA_Abort_IT+0x290>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a5f      	ldr	r2, [pc, #380]	@ (80041cc <HAL_DMA_Abort_IT+0x3cc>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d01d      	beq.n	8004090 <HAL_DMA_Abort_IT+0x290>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a5d      	ldr	r2, [pc, #372]	@ (80041d0 <HAL_DMA_Abort_IT+0x3d0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d018      	beq.n	8004090 <HAL_DMA_Abort_IT+0x290>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a5c      	ldr	r2, [pc, #368]	@ (80041d4 <HAL_DMA_Abort_IT+0x3d4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d013      	beq.n	8004090 <HAL_DMA_Abort_IT+0x290>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a5a      	ldr	r2, [pc, #360]	@ (80041d8 <HAL_DMA_Abort_IT+0x3d8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00e      	beq.n	8004090 <HAL_DMA_Abort_IT+0x290>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a59      	ldr	r2, [pc, #356]	@ (80041dc <HAL_DMA_Abort_IT+0x3dc>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d009      	beq.n	8004090 <HAL_DMA_Abort_IT+0x290>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a57      	ldr	r2, [pc, #348]	@ (80041e0 <HAL_DMA_Abort_IT+0x3e0>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d004      	beq.n	8004090 <HAL_DMA_Abort_IT+0x290>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a56      	ldr	r2, [pc, #344]	@ (80041e4 <HAL_DMA_Abort_IT+0x3e4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d108      	bne.n	80040a2 <HAL_DMA_Abort_IT+0x2a2>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0201 	bic.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	e007      	b.n	80040b2 <HAL_DMA_Abort_IT+0x2b2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0201 	bic.w	r2, r2, #1
 80040b0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a3c      	ldr	r2, [pc, #240]	@ (80041a8 <HAL_DMA_Abort_IT+0x3a8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d072      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a3a      	ldr	r2, [pc, #232]	@ (80041ac <HAL_DMA_Abort_IT+0x3ac>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d06d      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a39      	ldr	r2, [pc, #228]	@ (80041b0 <HAL_DMA_Abort_IT+0x3b0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d068      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a37      	ldr	r2, [pc, #220]	@ (80041b4 <HAL_DMA_Abort_IT+0x3b4>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d063      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a36      	ldr	r2, [pc, #216]	@ (80041b8 <HAL_DMA_Abort_IT+0x3b8>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d05e      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a34      	ldr	r2, [pc, #208]	@ (80041bc <HAL_DMA_Abort_IT+0x3bc>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d059      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a33      	ldr	r2, [pc, #204]	@ (80041c0 <HAL_DMA_Abort_IT+0x3c0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d054      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a31      	ldr	r2, [pc, #196]	@ (80041c4 <HAL_DMA_Abort_IT+0x3c4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d04f      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a30      	ldr	r2, [pc, #192]	@ (80041c8 <HAL_DMA_Abort_IT+0x3c8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d04a      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a2e      	ldr	r2, [pc, #184]	@ (80041cc <HAL_DMA_Abort_IT+0x3cc>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d045      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a2d      	ldr	r2, [pc, #180]	@ (80041d0 <HAL_DMA_Abort_IT+0x3d0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d040      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a2b      	ldr	r2, [pc, #172]	@ (80041d4 <HAL_DMA_Abort_IT+0x3d4>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d03b      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a2a      	ldr	r2, [pc, #168]	@ (80041d8 <HAL_DMA_Abort_IT+0x3d8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d036      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a28      	ldr	r2, [pc, #160]	@ (80041dc <HAL_DMA_Abort_IT+0x3dc>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d031      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a27      	ldr	r2, [pc, #156]	@ (80041e0 <HAL_DMA_Abort_IT+0x3e0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d02c      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a25      	ldr	r2, [pc, #148]	@ (80041e4 <HAL_DMA_Abort_IT+0x3e4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d027      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a24      	ldr	r2, [pc, #144]	@ (80041e8 <HAL_DMA_Abort_IT+0x3e8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d022      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a22      	ldr	r2, [pc, #136]	@ (80041ec <HAL_DMA_Abort_IT+0x3ec>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d01d      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a21      	ldr	r2, [pc, #132]	@ (80041f0 <HAL_DMA_Abort_IT+0x3f0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d018      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a1f      	ldr	r2, [pc, #124]	@ (80041f4 <HAL_DMA_Abort_IT+0x3f4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d013      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a1e      	ldr	r2, [pc, #120]	@ (80041f8 <HAL_DMA_Abort_IT+0x3f8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00e      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a1c      	ldr	r2, [pc, #112]	@ (80041fc <HAL_DMA_Abort_IT+0x3fc>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d009      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1b      	ldr	r2, [pc, #108]	@ (8004200 <HAL_DMA_Abort_IT+0x400>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d004      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x3a2>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a19      	ldr	r2, [pc, #100]	@ (8004204 <HAL_DMA_Abort_IT+0x404>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d132      	bne.n	8004208 <HAL_DMA_Abort_IT+0x408>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e031      	b.n	800420a <HAL_DMA_Abort_IT+0x40a>
 80041a6:	bf00      	nop
 80041a8:	40020010 	.word	0x40020010
 80041ac:	40020028 	.word	0x40020028
 80041b0:	40020040 	.word	0x40020040
 80041b4:	40020058 	.word	0x40020058
 80041b8:	40020070 	.word	0x40020070
 80041bc:	40020088 	.word	0x40020088
 80041c0:	400200a0 	.word	0x400200a0
 80041c4:	400200b8 	.word	0x400200b8
 80041c8:	40020410 	.word	0x40020410
 80041cc:	40020428 	.word	0x40020428
 80041d0:	40020440 	.word	0x40020440
 80041d4:	40020458 	.word	0x40020458
 80041d8:	40020470 	.word	0x40020470
 80041dc:	40020488 	.word	0x40020488
 80041e0:	400204a0 	.word	0x400204a0
 80041e4:	400204b8 	.word	0x400204b8
 80041e8:	58025408 	.word	0x58025408
 80041ec:	5802541c 	.word	0x5802541c
 80041f0:	58025430 	.word	0x58025430
 80041f4:	58025444 	.word	0x58025444
 80041f8:	58025458 	.word	0x58025458
 80041fc:	5802546c 	.word	0x5802546c
 8004200:	58025480 	.word	0x58025480
 8004204:	58025494 	.word	0x58025494
 8004208:	2300      	movs	r3, #0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d028      	beq.n	8004260 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004218:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800421c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004222:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004228:	f003 031f 	and.w	r3, r3, #31
 800422c:	2201      	movs	r2, #1
 800422e:	409a      	lsls	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800423c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00c      	beq.n	8004260 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004250:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004254:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800425e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop

0800428c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08a      	sub	sp, #40	@ 0x28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004298:	4b67      	ldr	r3, [pc, #412]	@ (8004438 <HAL_DMA_IRQHandler+0x1ac>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a67      	ldr	r2, [pc, #412]	@ (800443c <HAL_DMA_IRQHandler+0x1b0>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	0a9b      	lsrs	r3, r3, #10
 80042a4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a5f      	ldr	r2, [pc, #380]	@ (8004440 <HAL_DMA_IRQHandler+0x1b4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d04a      	beq.n	800435e <HAL_DMA_IRQHandler+0xd2>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a5d      	ldr	r2, [pc, #372]	@ (8004444 <HAL_DMA_IRQHandler+0x1b8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d045      	beq.n	800435e <HAL_DMA_IRQHandler+0xd2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a5c      	ldr	r2, [pc, #368]	@ (8004448 <HAL_DMA_IRQHandler+0x1bc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d040      	beq.n	800435e <HAL_DMA_IRQHandler+0xd2>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a5a      	ldr	r2, [pc, #360]	@ (800444c <HAL_DMA_IRQHandler+0x1c0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d03b      	beq.n	800435e <HAL_DMA_IRQHandler+0xd2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a59      	ldr	r2, [pc, #356]	@ (8004450 <HAL_DMA_IRQHandler+0x1c4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d036      	beq.n	800435e <HAL_DMA_IRQHandler+0xd2>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a57      	ldr	r2, [pc, #348]	@ (8004454 <HAL_DMA_IRQHandler+0x1c8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d031      	beq.n	800435e <HAL_DMA_IRQHandler+0xd2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a56      	ldr	r2, [pc, #344]	@ (8004458 <HAL_DMA_IRQHandler+0x1cc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d02c      	beq.n	800435e <HAL_DMA_IRQHandler+0xd2>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a54      	ldr	r2, [pc, #336]	@ (800445c <HAL_DMA_IRQHandler+0x1d0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d027      	beq.n	800435e <HAL_DMA_IRQHandler+0xd2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a53      	ldr	r2, [pc, #332]	@ (8004460 <HAL_DMA_IRQHandler+0x1d4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d022      	beq.n	800435e <HAL_DMA_IRQHandler+0xd2>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a51      	ldr	r2, [pc, #324]	@ (8004464 <HAL_DMA_IRQHandler+0x1d8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d01d      	beq.n	800435e <HAL_DMA_IRQHandler+0xd2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a50      	ldr	r2, [pc, #320]	@ (8004468 <HAL_DMA_IRQHandler+0x1dc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d018      	beq.n	800435e <HAL_DMA_IRQHandler+0xd2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a4e      	ldr	r2, [pc, #312]	@ (800446c <HAL_DMA_IRQHandler+0x1e0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d013      	beq.n	800435e <HAL_DMA_IRQHandler+0xd2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a4d      	ldr	r2, [pc, #308]	@ (8004470 <HAL_DMA_IRQHandler+0x1e4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00e      	beq.n	800435e <HAL_DMA_IRQHandler+0xd2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a4b      	ldr	r2, [pc, #300]	@ (8004474 <HAL_DMA_IRQHandler+0x1e8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d009      	beq.n	800435e <HAL_DMA_IRQHandler+0xd2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a4a      	ldr	r2, [pc, #296]	@ (8004478 <HAL_DMA_IRQHandler+0x1ec>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d004      	beq.n	800435e <HAL_DMA_IRQHandler+0xd2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a48      	ldr	r2, [pc, #288]	@ (800447c <HAL_DMA_IRQHandler+0x1f0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d101      	bne.n	8004362 <HAL_DMA_IRQHandler+0xd6>
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <HAL_DMA_IRQHandler+0xd8>
 8004362:	2300      	movs	r3, #0
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 842b 	beq.w	8004bc0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	2208      	movs	r2, #8
 8004374:	409a      	lsls	r2, r3
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	4013      	ands	r3, r2
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 80a2 	beq.w	80044c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a2e      	ldr	r2, [pc, #184]	@ (8004440 <HAL_DMA_IRQHandler+0x1b4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d04a      	beq.n	8004420 <HAL_DMA_IRQHandler+0x194>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a2d      	ldr	r2, [pc, #180]	@ (8004444 <HAL_DMA_IRQHandler+0x1b8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d045      	beq.n	8004420 <HAL_DMA_IRQHandler+0x194>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a2b      	ldr	r2, [pc, #172]	@ (8004448 <HAL_DMA_IRQHandler+0x1bc>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d040      	beq.n	8004420 <HAL_DMA_IRQHandler+0x194>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a2a      	ldr	r2, [pc, #168]	@ (800444c <HAL_DMA_IRQHandler+0x1c0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d03b      	beq.n	8004420 <HAL_DMA_IRQHandler+0x194>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a28      	ldr	r2, [pc, #160]	@ (8004450 <HAL_DMA_IRQHandler+0x1c4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d036      	beq.n	8004420 <HAL_DMA_IRQHandler+0x194>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a27      	ldr	r2, [pc, #156]	@ (8004454 <HAL_DMA_IRQHandler+0x1c8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d031      	beq.n	8004420 <HAL_DMA_IRQHandler+0x194>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a25      	ldr	r2, [pc, #148]	@ (8004458 <HAL_DMA_IRQHandler+0x1cc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d02c      	beq.n	8004420 <HAL_DMA_IRQHandler+0x194>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a24      	ldr	r2, [pc, #144]	@ (800445c <HAL_DMA_IRQHandler+0x1d0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d027      	beq.n	8004420 <HAL_DMA_IRQHandler+0x194>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a22      	ldr	r2, [pc, #136]	@ (8004460 <HAL_DMA_IRQHandler+0x1d4>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d022      	beq.n	8004420 <HAL_DMA_IRQHandler+0x194>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a21      	ldr	r2, [pc, #132]	@ (8004464 <HAL_DMA_IRQHandler+0x1d8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d01d      	beq.n	8004420 <HAL_DMA_IRQHandler+0x194>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004468 <HAL_DMA_IRQHandler+0x1dc>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d018      	beq.n	8004420 <HAL_DMA_IRQHandler+0x194>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1e      	ldr	r2, [pc, #120]	@ (800446c <HAL_DMA_IRQHandler+0x1e0>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d013      	beq.n	8004420 <HAL_DMA_IRQHandler+0x194>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004470 <HAL_DMA_IRQHandler+0x1e4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00e      	beq.n	8004420 <HAL_DMA_IRQHandler+0x194>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a1b      	ldr	r2, [pc, #108]	@ (8004474 <HAL_DMA_IRQHandler+0x1e8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d009      	beq.n	8004420 <HAL_DMA_IRQHandler+0x194>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a19      	ldr	r2, [pc, #100]	@ (8004478 <HAL_DMA_IRQHandler+0x1ec>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d004      	beq.n	8004420 <HAL_DMA_IRQHandler+0x194>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a18      	ldr	r2, [pc, #96]	@ (800447c <HAL_DMA_IRQHandler+0x1f0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d12f      	bne.n	8004480 <HAL_DMA_IRQHandler+0x1f4>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	bf14      	ite	ne
 800442e:	2301      	movne	r3, #1
 8004430:	2300      	moveq	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	e02e      	b.n	8004494 <HAL_DMA_IRQHandler+0x208>
 8004436:	bf00      	nop
 8004438:	24000008 	.word	0x24000008
 800443c:	1b4e81b5 	.word	0x1b4e81b5
 8004440:	40020010 	.word	0x40020010
 8004444:	40020028 	.word	0x40020028
 8004448:	40020040 	.word	0x40020040
 800444c:	40020058 	.word	0x40020058
 8004450:	40020070 	.word	0x40020070
 8004454:	40020088 	.word	0x40020088
 8004458:	400200a0 	.word	0x400200a0
 800445c:	400200b8 	.word	0x400200b8
 8004460:	40020410 	.word	0x40020410
 8004464:	40020428 	.word	0x40020428
 8004468:	40020440 	.word	0x40020440
 800446c:	40020458 	.word	0x40020458
 8004470:	40020470 	.word	0x40020470
 8004474:	40020488 	.word	0x40020488
 8004478:	400204a0 	.word	0x400204a0
 800447c:	400204b8 	.word	0x400204b8
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	bf14      	ite	ne
 800448e:	2301      	movne	r3, #1
 8004490:	2300      	moveq	r3, #0
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d015      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0204 	bic.w	r2, r2, #4
 80044a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	2208      	movs	r2, #8
 80044b2:	409a      	lsls	r2, r3
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044bc:	f043 0201 	orr.w	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	fa22 f303 	lsr.w	r3, r2, r3
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d06e      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a69      	ldr	r2, [pc, #420]	@ (8004684 <HAL_DMA_IRQHandler+0x3f8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d04a      	beq.n	800457a <HAL_DMA_IRQHandler+0x2ee>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a67      	ldr	r2, [pc, #412]	@ (8004688 <HAL_DMA_IRQHandler+0x3fc>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d045      	beq.n	800457a <HAL_DMA_IRQHandler+0x2ee>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a66      	ldr	r2, [pc, #408]	@ (800468c <HAL_DMA_IRQHandler+0x400>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d040      	beq.n	800457a <HAL_DMA_IRQHandler+0x2ee>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a64      	ldr	r2, [pc, #400]	@ (8004690 <HAL_DMA_IRQHandler+0x404>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d03b      	beq.n	800457a <HAL_DMA_IRQHandler+0x2ee>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a63      	ldr	r2, [pc, #396]	@ (8004694 <HAL_DMA_IRQHandler+0x408>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d036      	beq.n	800457a <HAL_DMA_IRQHandler+0x2ee>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a61      	ldr	r2, [pc, #388]	@ (8004698 <HAL_DMA_IRQHandler+0x40c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d031      	beq.n	800457a <HAL_DMA_IRQHandler+0x2ee>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a60      	ldr	r2, [pc, #384]	@ (800469c <HAL_DMA_IRQHandler+0x410>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d02c      	beq.n	800457a <HAL_DMA_IRQHandler+0x2ee>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a5e      	ldr	r2, [pc, #376]	@ (80046a0 <HAL_DMA_IRQHandler+0x414>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d027      	beq.n	800457a <HAL_DMA_IRQHandler+0x2ee>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a5d      	ldr	r2, [pc, #372]	@ (80046a4 <HAL_DMA_IRQHandler+0x418>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d022      	beq.n	800457a <HAL_DMA_IRQHandler+0x2ee>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a5b      	ldr	r2, [pc, #364]	@ (80046a8 <HAL_DMA_IRQHandler+0x41c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d01d      	beq.n	800457a <HAL_DMA_IRQHandler+0x2ee>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a5a      	ldr	r2, [pc, #360]	@ (80046ac <HAL_DMA_IRQHandler+0x420>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d018      	beq.n	800457a <HAL_DMA_IRQHandler+0x2ee>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a58      	ldr	r2, [pc, #352]	@ (80046b0 <HAL_DMA_IRQHandler+0x424>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <HAL_DMA_IRQHandler+0x2ee>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a57      	ldr	r2, [pc, #348]	@ (80046b4 <HAL_DMA_IRQHandler+0x428>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00e      	beq.n	800457a <HAL_DMA_IRQHandler+0x2ee>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a55      	ldr	r2, [pc, #340]	@ (80046b8 <HAL_DMA_IRQHandler+0x42c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d009      	beq.n	800457a <HAL_DMA_IRQHandler+0x2ee>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a54      	ldr	r2, [pc, #336]	@ (80046bc <HAL_DMA_IRQHandler+0x430>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d004      	beq.n	800457a <HAL_DMA_IRQHandler+0x2ee>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a52      	ldr	r2, [pc, #328]	@ (80046c0 <HAL_DMA_IRQHandler+0x434>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d10a      	bne.n	8004590 <HAL_DMA_IRQHandler+0x304>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004584:	2b00      	cmp	r3, #0
 8004586:	bf14      	ite	ne
 8004588:	2301      	movne	r3, #1
 800458a:	2300      	moveq	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	e003      	b.n	8004598 <HAL_DMA_IRQHandler+0x30c>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2300      	movs	r3, #0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00d      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a0:	f003 031f 	and.w	r3, r3, #31
 80045a4:	2201      	movs	r2, #1
 80045a6:	409a      	lsls	r2, r3
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b0:	f043 0202 	orr.w	r2, r3, #2
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045bc:	f003 031f 	and.w	r3, r3, #31
 80045c0:	2204      	movs	r2, #4
 80045c2:	409a      	lsls	r2, r3
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 808f 	beq.w	80046ec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004684 <HAL_DMA_IRQHandler+0x3f8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d04a      	beq.n	800466e <HAL_DMA_IRQHandler+0x3e2>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a2a      	ldr	r2, [pc, #168]	@ (8004688 <HAL_DMA_IRQHandler+0x3fc>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d045      	beq.n	800466e <HAL_DMA_IRQHandler+0x3e2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a29      	ldr	r2, [pc, #164]	@ (800468c <HAL_DMA_IRQHandler+0x400>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d040      	beq.n	800466e <HAL_DMA_IRQHandler+0x3e2>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a27      	ldr	r2, [pc, #156]	@ (8004690 <HAL_DMA_IRQHandler+0x404>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d03b      	beq.n	800466e <HAL_DMA_IRQHandler+0x3e2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a26      	ldr	r2, [pc, #152]	@ (8004694 <HAL_DMA_IRQHandler+0x408>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d036      	beq.n	800466e <HAL_DMA_IRQHandler+0x3e2>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a24      	ldr	r2, [pc, #144]	@ (8004698 <HAL_DMA_IRQHandler+0x40c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d031      	beq.n	800466e <HAL_DMA_IRQHandler+0x3e2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a23      	ldr	r2, [pc, #140]	@ (800469c <HAL_DMA_IRQHandler+0x410>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d02c      	beq.n	800466e <HAL_DMA_IRQHandler+0x3e2>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a21      	ldr	r2, [pc, #132]	@ (80046a0 <HAL_DMA_IRQHandler+0x414>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d027      	beq.n	800466e <HAL_DMA_IRQHandler+0x3e2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a20      	ldr	r2, [pc, #128]	@ (80046a4 <HAL_DMA_IRQHandler+0x418>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d022      	beq.n	800466e <HAL_DMA_IRQHandler+0x3e2>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a1e      	ldr	r2, [pc, #120]	@ (80046a8 <HAL_DMA_IRQHandler+0x41c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d01d      	beq.n	800466e <HAL_DMA_IRQHandler+0x3e2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a1d      	ldr	r2, [pc, #116]	@ (80046ac <HAL_DMA_IRQHandler+0x420>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d018      	beq.n	800466e <HAL_DMA_IRQHandler+0x3e2>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a1b      	ldr	r2, [pc, #108]	@ (80046b0 <HAL_DMA_IRQHandler+0x424>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d013      	beq.n	800466e <HAL_DMA_IRQHandler+0x3e2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1a      	ldr	r2, [pc, #104]	@ (80046b4 <HAL_DMA_IRQHandler+0x428>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00e      	beq.n	800466e <HAL_DMA_IRQHandler+0x3e2>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a18      	ldr	r2, [pc, #96]	@ (80046b8 <HAL_DMA_IRQHandler+0x42c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d009      	beq.n	800466e <HAL_DMA_IRQHandler+0x3e2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a17      	ldr	r2, [pc, #92]	@ (80046bc <HAL_DMA_IRQHandler+0x430>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d004      	beq.n	800466e <HAL_DMA_IRQHandler+0x3e2>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a15      	ldr	r2, [pc, #84]	@ (80046c0 <HAL_DMA_IRQHandler+0x434>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d12a      	bne.n	80046c4 <HAL_DMA_IRQHandler+0x438>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf14      	ite	ne
 800467c:	2301      	movne	r3, #1
 800467e:	2300      	moveq	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	e023      	b.n	80046cc <HAL_DMA_IRQHandler+0x440>
 8004684:	40020010 	.word	0x40020010
 8004688:	40020028 	.word	0x40020028
 800468c:	40020040 	.word	0x40020040
 8004690:	40020058 	.word	0x40020058
 8004694:	40020070 	.word	0x40020070
 8004698:	40020088 	.word	0x40020088
 800469c:	400200a0 	.word	0x400200a0
 80046a0:	400200b8 	.word	0x400200b8
 80046a4:	40020410 	.word	0x40020410
 80046a8:	40020428 	.word	0x40020428
 80046ac:	40020440 	.word	0x40020440
 80046b0:	40020458 	.word	0x40020458
 80046b4:	40020470 	.word	0x40020470
 80046b8:	40020488 	.word	0x40020488
 80046bc:	400204a0 	.word	0x400204a0
 80046c0:	400204b8 	.word	0x400204b8
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2300      	movs	r3, #0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00d      	beq.n	80046ec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d4:	f003 031f 	and.w	r3, r3, #31
 80046d8:	2204      	movs	r2, #4
 80046da:	409a      	lsls	r2, r3
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e4:	f043 0204 	orr.w	r2, r3, #4
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	2210      	movs	r2, #16
 80046f6:	409a      	lsls	r2, r3
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80a6 	beq.w	800484e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a85      	ldr	r2, [pc, #532]	@ (800491c <HAL_DMA_IRQHandler+0x690>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d04a      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x516>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a83      	ldr	r2, [pc, #524]	@ (8004920 <HAL_DMA_IRQHandler+0x694>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d045      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x516>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a82      	ldr	r2, [pc, #520]	@ (8004924 <HAL_DMA_IRQHandler+0x698>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d040      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x516>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a80      	ldr	r2, [pc, #512]	@ (8004928 <HAL_DMA_IRQHandler+0x69c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d03b      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x516>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a7f      	ldr	r2, [pc, #508]	@ (800492c <HAL_DMA_IRQHandler+0x6a0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d036      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x516>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a7d      	ldr	r2, [pc, #500]	@ (8004930 <HAL_DMA_IRQHandler+0x6a4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d031      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x516>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a7c      	ldr	r2, [pc, #496]	@ (8004934 <HAL_DMA_IRQHandler+0x6a8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d02c      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x516>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a7a      	ldr	r2, [pc, #488]	@ (8004938 <HAL_DMA_IRQHandler+0x6ac>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d027      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x516>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a79      	ldr	r2, [pc, #484]	@ (800493c <HAL_DMA_IRQHandler+0x6b0>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d022      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x516>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a77      	ldr	r2, [pc, #476]	@ (8004940 <HAL_DMA_IRQHandler+0x6b4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d01d      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x516>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a76      	ldr	r2, [pc, #472]	@ (8004944 <HAL_DMA_IRQHandler+0x6b8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d018      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x516>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a74      	ldr	r2, [pc, #464]	@ (8004948 <HAL_DMA_IRQHandler+0x6bc>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x516>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a73      	ldr	r2, [pc, #460]	@ (800494c <HAL_DMA_IRQHandler+0x6c0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00e      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x516>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a71      	ldr	r2, [pc, #452]	@ (8004950 <HAL_DMA_IRQHandler+0x6c4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d009      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x516>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a70      	ldr	r2, [pc, #448]	@ (8004954 <HAL_DMA_IRQHandler+0x6c8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d004      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x516>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a6e      	ldr	r2, [pc, #440]	@ (8004958 <HAL_DMA_IRQHandler+0x6cc>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d10a      	bne.n	80047b8 <HAL_DMA_IRQHandler+0x52c>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bf14      	ite	ne
 80047b0:	2301      	movne	r3, #1
 80047b2:	2300      	moveq	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	e009      	b.n	80047cc <HAL_DMA_IRQHandler+0x540>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bf14      	ite	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	2300      	moveq	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d03e      	beq.n	800484e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	2210      	movs	r2, #16
 80047da:	409a      	lsls	r2, r3
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d018      	beq.n	8004820 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d108      	bne.n	800480e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	2b00      	cmp	r3, #0
 8004802:	d024      	beq.n	800484e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	4798      	blx	r3
 800480c:	e01f      	b.n	800484e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004812:	2b00      	cmp	r3, #0
 8004814:	d01b      	beq.n	800484e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	4798      	blx	r3
 800481e:	e016      	b.n	800484e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800482a:	2b00      	cmp	r3, #0
 800482c:	d107      	bne.n	800483e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0208 	bic.w	r2, r2, #8
 800483c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004852:	f003 031f 	and.w	r3, r3, #31
 8004856:	2220      	movs	r2, #32
 8004858:	409a      	lsls	r2, r3
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 8110 	beq.w	8004a84 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2c      	ldr	r2, [pc, #176]	@ (800491c <HAL_DMA_IRQHandler+0x690>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d04a      	beq.n	8004904 <HAL_DMA_IRQHandler+0x678>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a2b      	ldr	r2, [pc, #172]	@ (8004920 <HAL_DMA_IRQHandler+0x694>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d045      	beq.n	8004904 <HAL_DMA_IRQHandler+0x678>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a29      	ldr	r2, [pc, #164]	@ (8004924 <HAL_DMA_IRQHandler+0x698>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d040      	beq.n	8004904 <HAL_DMA_IRQHandler+0x678>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a28      	ldr	r2, [pc, #160]	@ (8004928 <HAL_DMA_IRQHandler+0x69c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d03b      	beq.n	8004904 <HAL_DMA_IRQHandler+0x678>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a26      	ldr	r2, [pc, #152]	@ (800492c <HAL_DMA_IRQHandler+0x6a0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d036      	beq.n	8004904 <HAL_DMA_IRQHandler+0x678>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a25      	ldr	r2, [pc, #148]	@ (8004930 <HAL_DMA_IRQHandler+0x6a4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d031      	beq.n	8004904 <HAL_DMA_IRQHandler+0x678>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a23      	ldr	r2, [pc, #140]	@ (8004934 <HAL_DMA_IRQHandler+0x6a8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d02c      	beq.n	8004904 <HAL_DMA_IRQHandler+0x678>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a22      	ldr	r2, [pc, #136]	@ (8004938 <HAL_DMA_IRQHandler+0x6ac>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d027      	beq.n	8004904 <HAL_DMA_IRQHandler+0x678>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a20      	ldr	r2, [pc, #128]	@ (800493c <HAL_DMA_IRQHandler+0x6b0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d022      	beq.n	8004904 <HAL_DMA_IRQHandler+0x678>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004940 <HAL_DMA_IRQHandler+0x6b4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d01d      	beq.n	8004904 <HAL_DMA_IRQHandler+0x678>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004944 <HAL_DMA_IRQHandler+0x6b8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d018      	beq.n	8004904 <HAL_DMA_IRQHandler+0x678>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004948 <HAL_DMA_IRQHandler+0x6bc>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d013      	beq.n	8004904 <HAL_DMA_IRQHandler+0x678>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a1a      	ldr	r2, [pc, #104]	@ (800494c <HAL_DMA_IRQHandler+0x6c0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00e      	beq.n	8004904 <HAL_DMA_IRQHandler+0x678>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a19      	ldr	r2, [pc, #100]	@ (8004950 <HAL_DMA_IRQHandler+0x6c4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d009      	beq.n	8004904 <HAL_DMA_IRQHandler+0x678>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a17      	ldr	r2, [pc, #92]	@ (8004954 <HAL_DMA_IRQHandler+0x6c8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d004      	beq.n	8004904 <HAL_DMA_IRQHandler+0x678>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a16      	ldr	r2, [pc, #88]	@ (8004958 <HAL_DMA_IRQHandler+0x6cc>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d12b      	bne.n	800495c <HAL_DMA_IRQHandler+0x6d0>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b00      	cmp	r3, #0
 8004910:	bf14      	ite	ne
 8004912:	2301      	movne	r3, #1
 8004914:	2300      	moveq	r3, #0
 8004916:	b2db      	uxtb	r3, r3
 8004918:	e02a      	b.n	8004970 <HAL_DMA_IRQHandler+0x6e4>
 800491a:	bf00      	nop
 800491c:	40020010 	.word	0x40020010
 8004920:	40020028 	.word	0x40020028
 8004924:	40020040 	.word	0x40020040
 8004928:	40020058 	.word	0x40020058
 800492c:	40020070 	.word	0x40020070
 8004930:	40020088 	.word	0x40020088
 8004934:	400200a0 	.word	0x400200a0
 8004938:	400200b8 	.word	0x400200b8
 800493c:	40020410 	.word	0x40020410
 8004940:	40020428 	.word	0x40020428
 8004944:	40020440 	.word	0x40020440
 8004948:	40020458 	.word	0x40020458
 800494c:	40020470 	.word	0x40020470
 8004950:	40020488 	.word	0x40020488
 8004954:	400204a0 	.word	0x400204a0
 8004958:	400204b8 	.word	0x400204b8
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	bf14      	ite	ne
 800496a:	2301      	movne	r3, #1
 800496c:	2300      	moveq	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 8087 	beq.w	8004a84 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497a:	f003 031f 	and.w	r3, r3, #31
 800497e:	2220      	movs	r2, #32
 8004980:	409a      	lsls	r2, r3
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b04      	cmp	r3, #4
 8004990:	d139      	bne.n	8004a06 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0216 	bic.w	r2, r2, #22
 80049a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695a      	ldr	r2, [r3, #20]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d103      	bne.n	80049c2 <HAL_DMA_IRQHandler+0x736>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0208 	bic.w	r2, r2, #8
 80049d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	223f      	movs	r2, #63	@ 0x3f
 80049dc:	409a      	lsls	r2, r3
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 8382 	beq.w	8005100 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	4798      	blx	r3
          }
          return;
 8004a04:	e37c      	b.n	8005100 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d018      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d108      	bne.n	8004a34 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d02c      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	4798      	blx	r3
 8004a32:	e027      	b.n	8004a84 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d023      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	4798      	blx	r3
 8004a44:	e01e      	b.n	8004a84 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10f      	bne.n	8004a74 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0210 	bic.w	r2, r2, #16
 8004a62:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 833e 	beq.w	800510a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 8088 	beq.w	8004bac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2204      	movs	r2, #4
 8004aa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a89      	ldr	r2, [pc, #548]	@ (8004cd0 <HAL_DMA_IRQHandler+0xa44>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d04a      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x8b8>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a88      	ldr	r2, [pc, #544]	@ (8004cd4 <HAL_DMA_IRQHandler+0xa48>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d045      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x8b8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a86      	ldr	r2, [pc, #536]	@ (8004cd8 <HAL_DMA_IRQHandler+0xa4c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d040      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x8b8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a85      	ldr	r2, [pc, #532]	@ (8004cdc <HAL_DMA_IRQHandler+0xa50>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d03b      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x8b8>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a83      	ldr	r2, [pc, #524]	@ (8004ce0 <HAL_DMA_IRQHandler+0xa54>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d036      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x8b8>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a82      	ldr	r2, [pc, #520]	@ (8004ce4 <HAL_DMA_IRQHandler+0xa58>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d031      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x8b8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a80      	ldr	r2, [pc, #512]	@ (8004ce8 <HAL_DMA_IRQHandler+0xa5c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d02c      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x8b8>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a7f      	ldr	r2, [pc, #508]	@ (8004cec <HAL_DMA_IRQHandler+0xa60>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d027      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x8b8>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a7d      	ldr	r2, [pc, #500]	@ (8004cf0 <HAL_DMA_IRQHandler+0xa64>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d022      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x8b8>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a7c      	ldr	r2, [pc, #496]	@ (8004cf4 <HAL_DMA_IRQHandler+0xa68>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d01d      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x8b8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a7a      	ldr	r2, [pc, #488]	@ (8004cf8 <HAL_DMA_IRQHandler+0xa6c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d018      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x8b8>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a79      	ldr	r2, [pc, #484]	@ (8004cfc <HAL_DMA_IRQHandler+0xa70>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d013      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x8b8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a77      	ldr	r2, [pc, #476]	@ (8004d00 <HAL_DMA_IRQHandler+0xa74>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00e      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x8b8>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a76      	ldr	r2, [pc, #472]	@ (8004d04 <HAL_DMA_IRQHandler+0xa78>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d009      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x8b8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a74      	ldr	r2, [pc, #464]	@ (8004d08 <HAL_DMA_IRQHandler+0xa7c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d004      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x8b8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a73      	ldr	r2, [pc, #460]	@ (8004d0c <HAL_DMA_IRQHandler+0xa80>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d108      	bne.n	8004b56 <HAL_DMA_IRQHandler+0x8ca>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0201 	bic.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	e007      	b.n	8004b66 <HAL_DMA_IRQHandler+0x8da>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0201 	bic.w	r2, r2, #1
 8004b64:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d307      	bcc.n	8004b82 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1f2      	bne.n	8004b66 <HAL_DMA_IRQHandler+0x8da>
 8004b80:	e000      	b.n	8004b84 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004b82:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d004      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2203      	movs	r2, #3
 8004b96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004b9a:	e003      	b.n	8004ba4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 82aa 	beq.w	800510a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	4798      	blx	r3
 8004bbe:	e2a4      	b.n	800510a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a52      	ldr	r2, [pc, #328]	@ (8004d10 <HAL_DMA_IRQHandler+0xa84>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d04a      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x9d4>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a51      	ldr	r2, [pc, #324]	@ (8004d14 <HAL_DMA_IRQHandler+0xa88>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d045      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x9d4>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a4f      	ldr	r2, [pc, #316]	@ (8004d18 <HAL_DMA_IRQHandler+0xa8c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d040      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x9d4>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a4e      	ldr	r2, [pc, #312]	@ (8004d1c <HAL_DMA_IRQHandler+0xa90>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d03b      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x9d4>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a4c      	ldr	r2, [pc, #304]	@ (8004d20 <HAL_DMA_IRQHandler+0xa94>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d036      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x9d4>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a4b      	ldr	r2, [pc, #300]	@ (8004d24 <HAL_DMA_IRQHandler+0xa98>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d031      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x9d4>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a49      	ldr	r2, [pc, #292]	@ (8004d28 <HAL_DMA_IRQHandler+0xa9c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d02c      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x9d4>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a48      	ldr	r2, [pc, #288]	@ (8004d2c <HAL_DMA_IRQHandler+0xaa0>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d027      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x9d4>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a46      	ldr	r2, [pc, #280]	@ (8004d30 <HAL_DMA_IRQHandler+0xaa4>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d022      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x9d4>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a45      	ldr	r2, [pc, #276]	@ (8004d34 <HAL_DMA_IRQHandler+0xaa8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d01d      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x9d4>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a43      	ldr	r2, [pc, #268]	@ (8004d38 <HAL_DMA_IRQHandler+0xaac>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d018      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x9d4>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a42      	ldr	r2, [pc, #264]	@ (8004d3c <HAL_DMA_IRQHandler+0xab0>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d013      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x9d4>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a40      	ldr	r2, [pc, #256]	@ (8004d40 <HAL_DMA_IRQHandler+0xab4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00e      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x9d4>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a3f      	ldr	r2, [pc, #252]	@ (8004d44 <HAL_DMA_IRQHandler+0xab8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d009      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x9d4>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a3d      	ldr	r2, [pc, #244]	@ (8004d48 <HAL_DMA_IRQHandler+0xabc>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d004      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x9d4>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a3c      	ldr	r2, [pc, #240]	@ (8004d4c <HAL_DMA_IRQHandler+0xac0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d101      	bne.n	8004c64 <HAL_DMA_IRQHandler+0x9d8>
 8004c60:	2301      	movs	r3, #1
 8004c62:	e000      	b.n	8004c66 <HAL_DMA_IRQHandler+0x9da>
 8004c64:	2300      	movs	r3, #0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 824f 	beq.w	800510a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	2204      	movs	r2, #4
 8004c7e:	409a      	lsls	r2, r3
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	4013      	ands	r3, r2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 80dd 	beq.w	8004e44 <HAL_DMA_IRQHandler+0xbb8>
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 80d7 	beq.w	8004e44 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c9a:	f003 031f 	and.w	r3, r3, #31
 8004c9e:	2204      	movs	r2, #4
 8004ca0:	409a      	lsls	r2, r3
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d059      	beq.n	8004d64 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d14a      	bne.n	8004d50 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 8220 	beq.w	8005104 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ccc:	e21a      	b.n	8005104 <HAL_DMA_IRQHandler+0xe78>
 8004cce:	bf00      	nop
 8004cd0:	40020010 	.word	0x40020010
 8004cd4:	40020028 	.word	0x40020028
 8004cd8:	40020040 	.word	0x40020040
 8004cdc:	40020058 	.word	0x40020058
 8004ce0:	40020070 	.word	0x40020070
 8004ce4:	40020088 	.word	0x40020088
 8004ce8:	400200a0 	.word	0x400200a0
 8004cec:	400200b8 	.word	0x400200b8
 8004cf0:	40020410 	.word	0x40020410
 8004cf4:	40020428 	.word	0x40020428
 8004cf8:	40020440 	.word	0x40020440
 8004cfc:	40020458 	.word	0x40020458
 8004d00:	40020470 	.word	0x40020470
 8004d04:	40020488 	.word	0x40020488
 8004d08:	400204a0 	.word	0x400204a0
 8004d0c:	400204b8 	.word	0x400204b8
 8004d10:	48022c08 	.word	0x48022c08
 8004d14:	48022c1c 	.word	0x48022c1c
 8004d18:	48022c30 	.word	0x48022c30
 8004d1c:	48022c44 	.word	0x48022c44
 8004d20:	48022c58 	.word	0x48022c58
 8004d24:	48022c6c 	.word	0x48022c6c
 8004d28:	48022c80 	.word	0x48022c80
 8004d2c:	48022c94 	.word	0x48022c94
 8004d30:	58025408 	.word	0x58025408
 8004d34:	5802541c 	.word	0x5802541c
 8004d38:	58025430 	.word	0x58025430
 8004d3c:	58025444 	.word	0x58025444
 8004d40:	58025458 	.word	0x58025458
 8004d44:	5802546c 	.word	0x5802546c
 8004d48:	58025480 	.word	0x58025480
 8004d4c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 81d5 	beq.w	8005104 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d62:	e1cf      	b.n	8005104 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d160      	bne.n	8004e30 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a7f      	ldr	r2, [pc, #508]	@ (8004f70 <HAL_DMA_IRQHandler+0xce4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d04a      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb82>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a7d      	ldr	r2, [pc, #500]	@ (8004f74 <HAL_DMA_IRQHandler+0xce8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d045      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb82>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a7c      	ldr	r2, [pc, #496]	@ (8004f78 <HAL_DMA_IRQHandler+0xcec>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d040      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb82>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a7a      	ldr	r2, [pc, #488]	@ (8004f7c <HAL_DMA_IRQHandler+0xcf0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d03b      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb82>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a79      	ldr	r2, [pc, #484]	@ (8004f80 <HAL_DMA_IRQHandler+0xcf4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d036      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb82>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a77      	ldr	r2, [pc, #476]	@ (8004f84 <HAL_DMA_IRQHandler+0xcf8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d031      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb82>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a76      	ldr	r2, [pc, #472]	@ (8004f88 <HAL_DMA_IRQHandler+0xcfc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d02c      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb82>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a74      	ldr	r2, [pc, #464]	@ (8004f8c <HAL_DMA_IRQHandler+0xd00>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d027      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb82>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a73      	ldr	r2, [pc, #460]	@ (8004f90 <HAL_DMA_IRQHandler+0xd04>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d022      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb82>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a71      	ldr	r2, [pc, #452]	@ (8004f94 <HAL_DMA_IRQHandler+0xd08>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d01d      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb82>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a70      	ldr	r2, [pc, #448]	@ (8004f98 <HAL_DMA_IRQHandler+0xd0c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d018      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb82>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a6e      	ldr	r2, [pc, #440]	@ (8004f9c <HAL_DMA_IRQHandler+0xd10>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb82>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a6d      	ldr	r2, [pc, #436]	@ (8004fa0 <HAL_DMA_IRQHandler+0xd14>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00e      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb82>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a6b      	ldr	r2, [pc, #428]	@ (8004fa4 <HAL_DMA_IRQHandler+0xd18>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d009      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb82>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a6a      	ldr	r2, [pc, #424]	@ (8004fa8 <HAL_DMA_IRQHandler+0xd1c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d004      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb82>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a68      	ldr	r2, [pc, #416]	@ (8004fac <HAL_DMA_IRQHandler+0xd20>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d108      	bne.n	8004e20 <HAL_DMA_IRQHandler+0xb94>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0208 	bic.w	r2, r2, #8
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	e007      	b.n	8004e30 <HAL_DMA_IRQHandler+0xba4>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0204 	bic.w	r2, r2, #4
 8004e2e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 8165 	beq.w	8005104 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e42:	e15f      	b.n	8005104 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e48:	f003 031f 	and.w	r3, r3, #31
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 80c5 	beq.w	8004fe4 <HAL_DMA_IRQHandler+0xd58>
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80bf 	beq.w	8004fe4 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	2202      	movs	r2, #2
 8004e70:	409a      	lsls	r2, r3
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d018      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d109      	bne.n	8004e9e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 813a 	beq.w	8005108 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e9c:	e134      	b.n	8005108 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 8130 	beq.w	8005108 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eb0:	e12a      	b.n	8005108 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f040 8089 	bne.w	8004fd0 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a2b      	ldr	r2, [pc, #172]	@ (8004f70 <HAL_DMA_IRQHandler+0xce4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d04a      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xcd2>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a29      	ldr	r2, [pc, #164]	@ (8004f74 <HAL_DMA_IRQHandler+0xce8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d045      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xcd2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a28      	ldr	r2, [pc, #160]	@ (8004f78 <HAL_DMA_IRQHandler+0xcec>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d040      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xcd2>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a26      	ldr	r2, [pc, #152]	@ (8004f7c <HAL_DMA_IRQHandler+0xcf0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d03b      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xcd2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a25      	ldr	r2, [pc, #148]	@ (8004f80 <HAL_DMA_IRQHandler+0xcf4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d036      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xcd2>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a23      	ldr	r2, [pc, #140]	@ (8004f84 <HAL_DMA_IRQHandler+0xcf8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d031      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xcd2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a22      	ldr	r2, [pc, #136]	@ (8004f88 <HAL_DMA_IRQHandler+0xcfc>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d02c      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xcd2>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a20      	ldr	r2, [pc, #128]	@ (8004f8c <HAL_DMA_IRQHandler+0xd00>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d027      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xcd2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a1f      	ldr	r2, [pc, #124]	@ (8004f90 <HAL_DMA_IRQHandler+0xd04>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d022      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xcd2>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004f94 <HAL_DMA_IRQHandler+0xd08>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01d      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xcd2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1c      	ldr	r2, [pc, #112]	@ (8004f98 <HAL_DMA_IRQHandler+0xd0c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xcd2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1a      	ldr	r2, [pc, #104]	@ (8004f9c <HAL_DMA_IRQHandler+0xd10>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xcd2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a19      	ldr	r2, [pc, #100]	@ (8004fa0 <HAL_DMA_IRQHandler+0xd14>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xcd2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a17      	ldr	r2, [pc, #92]	@ (8004fa4 <HAL_DMA_IRQHandler+0xd18>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xcd2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a16      	ldr	r2, [pc, #88]	@ (8004fa8 <HAL_DMA_IRQHandler+0xd1c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xcd2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a14      	ldr	r2, [pc, #80]	@ (8004fac <HAL_DMA_IRQHandler+0xd20>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d128      	bne.n	8004fb0 <HAL_DMA_IRQHandler+0xd24>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0214 	bic.w	r2, r2, #20
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	e027      	b.n	8004fc0 <HAL_DMA_IRQHandler+0xd34>
 8004f70:	40020010 	.word	0x40020010
 8004f74:	40020028 	.word	0x40020028
 8004f78:	40020040 	.word	0x40020040
 8004f7c:	40020058 	.word	0x40020058
 8004f80:	40020070 	.word	0x40020070
 8004f84:	40020088 	.word	0x40020088
 8004f88:	400200a0 	.word	0x400200a0
 8004f8c:	400200b8 	.word	0x400200b8
 8004f90:	40020410 	.word	0x40020410
 8004f94:	40020428 	.word	0x40020428
 8004f98:	40020440 	.word	0x40020440
 8004f9c:	40020458 	.word	0x40020458
 8004fa0:	40020470 	.word	0x40020470
 8004fa4:	40020488 	.word	0x40020488
 8004fa8:	400204a0 	.word	0x400204a0
 8004fac:	400204b8 	.word	0x400204b8
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 020a 	bic.w	r2, r2, #10
 8004fbe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 8097 	beq.w	8005108 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fe2:	e091      	b.n	8005108 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe8:	f003 031f 	and.w	r3, r3, #31
 8004fec:	2208      	movs	r2, #8
 8004fee:	409a      	lsls	r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8088 	beq.w	800510a <HAL_DMA_IRQHandler+0xe7e>
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 8082 	beq.w	800510a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a41      	ldr	r2, [pc, #260]	@ (8005110 <HAL_DMA_IRQHandler+0xe84>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d04a      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xe1a>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a3f      	ldr	r2, [pc, #252]	@ (8005114 <HAL_DMA_IRQHandler+0xe88>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d045      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xe1a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a3e      	ldr	r2, [pc, #248]	@ (8005118 <HAL_DMA_IRQHandler+0xe8c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d040      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xe1a>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a3c      	ldr	r2, [pc, #240]	@ (800511c <HAL_DMA_IRQHandler+0xe90>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d03b      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xe1a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a3b      	ldr	r2, [pc, #236]	@ (8005120 <HAL_DMA_IRQHandler+0xe94>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d036      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xe1a>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a39      	ldr	r2, [pc, #228]	@ (8005124 <HAL_DMA_IRQHandler+0xe98>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d031      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xe1a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a38      	ldr	r2, [pc, #224]	@ (8005128 <HAL_DMA_IRQHandler+0xe9c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d02c      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xe1a>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a36      	ldr	r2, [pc, #216]	@ (800512c <HAL_DMA_IRQHandler+0xea0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d027      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xe1a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a35      	ldr	r2, [pc, #212]	@ (8005130 <HAL_DMA_IRQHandler+0xea4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d022      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xe1a>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a33      	ldr	r2, [pc, #204]	@ (8005134 <HAL_DMA_IRQHandler+0xea8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d01d      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xe1a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a32      	ldr	r2, [pc, #200]	@ (8005138 <HAL_DMA_IRQHandler+0xeac>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d018      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xe1a>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a30      	ldr	r2, [pc, #192]	@ (800513c <HAL_DMA_IRQHandler+0xeb0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d013      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xe1a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a2f      	ldr	r2, [pc, #188]	@ (8005140 <HAL_DMA_IRQHandler+0xeb4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00e      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xe1a>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a2d      	ldr	r2, [pc, #180]	@ (8005144 <HAL_DMA_IRQHandler+0xeb8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d009      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xe1a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a2c      	ldr	r2, [pc, #176]	@ (8005148 <HAL_DMA_IRQHandler+0xebc>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d004      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xe1a>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a2a      	ldr	r2, [pc, #168]	@ (800514c <HAL_DMA_IRQHandler+0xec0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d108      	bne.n	80050b8 <HAL_DMA_IRQHandler+0xe2c>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 021c 	bic.w	r2, r2, #28
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	e007      	b.n	80050c8 <HAL_DMA_IRQHandler+0xe3c>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 020e 	bic.w	r2, r2, #14
 80050c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050cc:	f003 031f 	and.w	r3, r3, #31
 80050d0:	2201      	movs	r2, #1
 80050d2:	409a      	lsls	r2, r3
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	4798      	blx	r3
 80050fe:	e004      	b.n	800510a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005100:	bf00      	nop
 8005102:	e002      	b.n	800510a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005104:	bf00      	nop
 8005106:	e000      	b.n	800510a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005108:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800510a:	3728      	adds	r7, #40	@ 0x28
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40020010 	.word	0x40020010
 8005114:	40020028 	.word	0x40020028
 8005118:	40020040 	.word	0x40020040
 800511c:	40020058 	.word	0x40020058
 8005120:	40020070 	.word	0x40020070
 8005124:	40020088 	.word	0x40020088
 8005128:	400200a0 	.word	0x400200a0
 800512c:	400200b8 	.word	0x400200b8
 8005130:	40020410 	.word	0x40020410
 8005134:	40020428 	.word	0x40020428
 8005138:	40020440 	.word	0x40020440
 800513c:	40020458 	.word	0x40020458
 8005140:	40020470 	.word	0x40020470
 8005144:	40020488 	.word	0x40020488
 8005148:	400204a0 	.word	0x400204a0
 800514c:	400204b8 	.word	0x400204b8

08005150 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a42      	ldr	r2, [pc, #264]	@ (8005268 <DMA_CalcBaseAndBitshift+0x118>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d04a      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a41      	ldr	r2, [pc, #260]	@ (800526c <DMA_CalcBaseAndBitshift+0x11c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d045      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a3f      	ldr	r2, [pc, #252]	@ (8005270 <DMA_CalcBaseAndBitshift+0x120>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d040      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a3e      	ldr	r2, [pc, #248]	@ (8005274 <DMA_CalcBaseAndBitshift+0x124>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d03b      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a3c      	ldr	r2, [pc, #240]	@ (8005278 <DMA_CalcBaseAndBitshift+0x128>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d036      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a3b      	ldr	r2, [pc, #236]	@ (800527c <DMA_CalcBaseAndBitshift+0x12c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d031      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a39      	ldr	r2, [pc, #228]	@ (8005280 <DMA_CalcBaseAndBitshift+0x130>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d02c      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a38      	ldr	r2, [pc, #224]	@ (8005284 <DMA_CalcBaseAndBitshift+0x134>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d027      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a36      	ldr	r2, [pc, #216]	@ (8005288 <DMA_CalcBaseAndBitshift+0x138>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d022      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a35      	ldr	r2, [pc, #212]	@ (800528c <DMA_CalcBaseAndBitshift+0x13c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d01d      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a33      	ldr	r2, [pc, #204]	@ (8005290 <DMA_CalcBaseAndBitshift+0x140>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d018      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a32      	ldr	r2, [pc, #200]	@ (8005294 <DMA_CalcBaseAndBitshift+0x144>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d013      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a30      	ldr	r2, [pc, #192]	@ (8005298 <DMA_CalcBaseAndBitshift+0x148>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00e      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a2f      	ldr	r2, [pc, #188]	@ (800529c <DMA_CalcBaseAndBitshift+0x14c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d009      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a2d      	ldr	r2, [pc, #180]	@ (80052a0 <DMA_CalcBaseAndBitshift+0x150>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d004      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a2c      	ldr	r2, [pc, #176]	@ (80052a4 <DMA_CalcBaseAndBitshift+0x154>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d101      	bne.n	80051fc <DMA_CalcBaseAndBitshift+0xac>
 80051f8:	2301      	movs	r3, #1
 80051fa:	e000      	b.n	80051fe <DMA_CalcBaseAndBitshift+0xae>
 80051fc:	2300      	movs	r3, #0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d024      	beq.n	800524c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	3b10      	subs	r3, #16
 800520a:	4a27      	ldr	r2, [pc, #156]	@ (80052a8 <DMA_CalcBaseAndBitshift+0x158>)
 800520c:	fba2 2303 	umull	r2, r3, r2, r3
 8005210:	091b      	lsrs	r3, r3, #4
 8005212:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	4a24      	ldr	r2, [pc, #144]	@ (80052ac <DMA_CalcBaseAndBitshift+0x15c>)
 800521c:	5cd3      	ldrb	r3, [r2, r3]
 800521e:	461a      	mov	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b03      	cmp	r3, #3
 8005228:	d908      	bls.n	800523c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	4b1f      	ldr	r3, [pc, #124]	@ (80052b0 <DMA_CalcBaseAndBitshift+0x160>)
 8005232:	4013      	ands	r3, r2
 8005234:	1d1a      	adds	r2, r3, #4
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	659a      	str	r2, [r3, #88]	@ 0x58
 800523a:	e00d      	b.n	8005258 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	4b1b      	ldr	r3, [pc, #108]	@ (80052b0 <DMA_CalcBaseAndBitshift+0x160>)
 8005244:	4013      	ands	r3, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6593      	str	r3, [r2, #88]	@ 0x58
 800524a:	e005      	b.n	8005258 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	40020010 	.word	0x40020010
 800526c:	40020028 	.word	0x40020028
 8005270:	40020040 	.word	0x40020040
 8005274:	40020058 	.word	0x40020058
 8005278:	40020070 	.word	0x40020070
 800527c:	40020088 	.word	0x40020088
 8005280:	400200a0 	.word	0x400200a0
 8005284:	400200b8 	.word	0x400200b8
 8005288:	40020410 	.word	0x40020410
 800528c:	40020428 	.word	0x40020428
 8005290:	40020440 	.word	0x40020440
 8005294:	40020458 	.word	0x40020458
 8005298:	40020470 	.word	0x40020470
 800529c:	40020488 	.word	0x40020488
 80052a0:	400204a0 	.word	0x400204a0
 80052a4:	400204b8 	.word	0x400204b8
 80052a8:	aaaaaaab 	.word	0xaaaaaaab
 80052ac:	080128d4 	.word	0x080128d4
 80052b0:	fffffc00 	.word	0xfffffc00

080052b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d120      	bne.n	800530a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d858      	bhi.n	8005382 <DMA_CheckFifoParam+0xce>
 80052d0:	a201      	add	r2, pc, #4	@ (adr r2, 80052d8 <DMA_CheckFifoParam+0x24>)
 80052d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d6:	bf00      	nop
 80052d8:	080052e9 	.word	0x080052e9
 80052dc:	080052fb 	.word	0x080052fb
 80052e0:	080052e9 	.word	0x080052e9
 80052e4:	08005383 	.word	0x08005383
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d048      	beq.n	8005386 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052f8:	e045      	b.n	8005386 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005302:	d142      	bne.n	800538a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005308:	e03f      	b.n	800538a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005312:	d123      	bne.n	800535c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005318:	2b03      	cmp	r3, #3
 800531a:	d838      	bhi.n	800538e <DMA_CheckFifoParam+0xda>
 800531c:	a201      	add	r2, pc, #4	@ (adr r2, 8005324 <DMA_CheckFifoParam+0x70>)
 800531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005322:	bf00      	nop
 8005324:	08005335 	.word	0x08005335
 8005328:	0800533b 	.word	0x0800533b
 800532c:	08005335 	.word	0x08005335
 8005330:	0800534d 	.word	0x0800534d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	73fb      	strb	r3, [r7, #15]
        break;
 8005338:	e030      	b.n	800539c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d025      	beq.n	8005392 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800534a:	e022      	b.n	8005392 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005350:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005354:	d11f      	bne.n	8005396 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800535a:	e01c      	b.n	8005396 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005360:	2b02      	cmp	r3, #2
 8005362:	d902      	bls.n	800536a <DMA_CheckFifoParam+0xb6>
 8005364:	2b03      	cmp	r3, #3
 8005366:	d003      	beq.n	8005370 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005368:	e018      	b.n	800539c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	73fb      	strb	r3, [r7, #15]
        break;
 800536e:	e015      	b.n	800539c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005374:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00e      	beq.n	800539a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
    break;
 8005380:	e00b      	b.n	800539a <DMA_CheckFifoParam+0xe6>
        break;
 8005382:	bf00      	nop
 8005384:	e00a      	b.n	800539c <DMA_CheckFifoParam+0xe8>
        break;
 8005386:	bf00      	nop
 8005388:	e008      	b.n	800539c <DMA_CheckFifoParam+0xe8>
        break;
 800538a:	bf00      	nop
 800538c:	e006      	b.n	800539c <DMA_CheckFifoParam+0xe8>
        break;
 800538e:	bf00      	nop
 8005390:	e004      	b.n	800539c <DMA_CheckFifoParam+0xe8>
        break;
 8005392:	bf00      	nop
 8005394:	e002      	b.n	800539c <DMA_CheckFifoParam+0xe8>
        break;
 8005396:	bf00      	nop
 8005398:	e000      	b.n	800539c <DMA_CheckFifoParam+0xe8>
    break;
 800539a:	bf00      	nop
    }
  }

  return status;
 800539c:	7bfb      	ldrb	r3, [r7, #15]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop

080053ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a38      	ldr	r2, [pc, #224]	@ (80054a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d022      	beq.n	800540a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a36      	ldr	r2, [pc, #216]	@ (80054a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d01d      	beq.n	800540a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a35      	ldr	r2, [pc, #212]	@ (80054a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d018      	beq.n	800540a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a33      	ldr	r2, [pc, #204]	@ (80054ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d013      	beq.n	800540a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a32      	ldr	r2, [pc, #200]	@ (80054b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00e      	beq.n	800540a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a30      	ldr	r2, [pc, #192]	@ (80054b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d009      	beq.n	800540a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a2f      	ldr	r2, [pc, #188]	@ (80054b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d004      	beq.n	800540a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a2d      	ldr	r2, [pc, #180]	@ (80054bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d101      	bne.n	800540e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800540e:	2300      	movs	r3, #0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01a      	beq.n	800544a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	3b08      	subs	r3, #8
 800541c:	4a28      	ldr	r2, [pc, #160]	@ (80054c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800541e:	fba2 2303 	umull	r2, r3, r2, r3
 8005422:	091b      	lsrs	r3, r3, #4
 8005424:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4b26      	ldr	r3, [pc, #152]	@ (80054c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	461a      	mov	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a24      	ldr	r2, [pc, #144]	@ (80054c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005438:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f003 031f 	and.w	r3, r3, #31
 8005440:	2201      	movs	r2, #1
 8005442:	409a      	lsls	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005448:	e024      	b.n	8005494 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	3b10      	subs	r3, #16
 8005452:	4a1e      	ldr	r2, [pc, #120]	@ (80054cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	091b      	lsrs	r3, r3, #4
 800545a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4a1c      	ldr	r2, [pc, #112]	@ (80054d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d806      	bhi.n	8005472 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4a1b      	ldr	r2, [pc, #108]	@ (80054d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d902      	bls.n	8005472 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	3308      	adds	r3, #8
 8005470:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4b18      	ldr	r3, [pc, #96]	@ (80054d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005476:	4413      	add	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	461a      	mov	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a16      	ldr	r2, [pc, #88]	@ (80054dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005484:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	2201      	movs	r2, #1
 800548e:	409a      	lsls	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	58025408 	.word	0x58025408
 80054a4:	5802541c 	.word	0x5802541c
 80054a8:	58025430 	.word	0x58025430
 80054ac:	58025444 	.word	0x58025444
 80054b0:	58025458 	.word	0x58025458
 80054b4:	5802546c 	.word	0x5802546c
 80054b8:	58025480 	.word	0x58025480
 80054bc:	58025494 	.word	0x58025494
 80054c0:	cccccccd 	.word	0xcccccccd
 80054c4:	16009600 	.word	0x16009600
 80054c8:	58025880 	.word	0x58025880
 80054cc:	aaaaaaab 	.word	0xaaaaaaab
 80054d0:	400204b8 	.word	0x400204b8
 80054d4:	4002040f 	.word	0x4002040f
 80054d8:	10008200 	.word	0x10008200
 80054dc:	40020880 	.word	0x40020880

080054e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d04a      	beq.n	800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d847      	bhi.n	800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a25      	ldr	r2, [pc, #148]	@ (8005598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d022      	beq.n	800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a24      	ldr	r2, [pc, #144]	@ (800559c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d01d      	beq.n	800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a22      	ldr	r2, [pc, #136]	@ (80055a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d018      	beq.n	800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a21      	ldr	r2, [pc, #132]	@ (80055a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1f      	ldr	r2, [pc, #124]	@ (80055a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00e      	beq.n	800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1e      	ldr	r2, [pc, #120]	@ (80055ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d009      	beq.n	800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1c      	ldr	r2, [pc, #112]	@ (80055b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d004      	beq.n	800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1b      	ldr	r2, [pc, #108]	@ (80055b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d101      	bne.n	8005550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800554c:	2301      	movs	r3, #1
 800554e:	e000      	b.n	8005552 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005550:	2300      	movs	r3, #0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4b17      	ldr	r3, [pc, #92]	@ (80055b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	461a      	mov	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a15      	ldr	r2, [pc, #84]	@ (80055bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005568:	671a      	str	r2, [r3, #112]	@ 0x70
 800556a:	e009      	b.n	8005580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4b14      	ldr	r3, [pc, #80]	@ (80055c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	461a      	mov	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a11      	ldr	r2, [pc, #68]	@ (80055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800557e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	3b01      	subs	r3, #1
 8005584:	2201      	movs	r2, #1
 8005586:	409a      	lsls	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800558c:	bf00      	nop
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	58025408 	.word	0x58025408
 800559c:	5802541c 	.word	0x5802541c
 80055a0:	58025430 	.word	0x58025430
 80055a4:	58025444 	.word	0x58025444
 80055a8:	58025458 	.word	0x58025458
 80055ac:	5802546c 	.word	0x5802546c
 80055b0:	58025480 	.word	0x58025480
 80055b4:	58025494 	.word	0x58025494
 80055b8:	1600963f 	.word	0x1600963f
 80055bc:	58025940 	.word	0x58025940
 80055c0:	1000823f 	.word	0x1000823f
 80055c4:	40020940 	.word	0x40020940

080055c8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e04f      	b.n	800567a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fd fa6e 	bl	8002ad0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	4b20      	ldr	r3, [pc, #128]	@ (8005684 <HAL_DMA2D_Init+0xbc>)
 8005604:	4013      	ands	r3, r2
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6851      	ldr	r1, [r2, #4]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	69d2      	ldr	r2, [r2, #28]
 800560e:	4311      	orrs	r1, r2
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	430b      	orrs	r3, r1
 8005616:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800561e:	4b1a      	ldr	r3, [pc, #104]	@ (8005688 <HAL_DMA2D_Init+0xc0>)
 8005620:	4013      	ands	r3, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6891      	ldr	r1, [r2, #8]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6992      	ldr	r2, [r2, #24]
 800562a:	4311      	orrs	r1, r2
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	430b      	orrs	r3, r1
 8005632:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800563a:	4b14      	ldr	r3, [pc, #80]	@ (800568c <HAL_DMA2D_Init+0xc4>)
 800563c:	4013      	ands	r3, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	68d1      	ldr	r1, [r2, #12]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	430b      	orrs	r3, r1
 8005648:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005650:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	051a      	lsls	r2, r3, #20
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	055b      	lsls	r3, r3, #21
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	fff8ffbf 	.word	0xfff8ffbf
 8005688:	fffffef8 	.word	0xfffffef8
 800568c:	ffff0000 	.word	0xffff0000

08005690 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_DMA2D_Start+0x1c>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e018      	b.n	80056de <HAL_DMA2D_Start+0x4e>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 f9a4 	bl	8005a14 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0201 	orr.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b086      	sub	sp, #24
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d056      	beq.n	80057b0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005702:	f7fd fe31 	bl	8003368 <HAL_GetTick>
 8005706:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005708:	e04b      	b.n	80057a2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005718:	2b00      	cmp	r3, #0
 800571a:	d023      	beq.n	8005764 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800572a:	f043 0202 	orr.w	r2, r3, #2
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005740:	f043 0201 	orr.w	r2, r3, #1
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2221      	movs	r2, #33	@ 0x21
 800574e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2204      	movs	r2, #4
 8005754:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e0a5      	b.n	80058b0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576a:	d01a      	beq.n	80057a2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800576c:	f7fd fdfc 	bl	8003368 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	429a      	cmp	r2, r3
 800577a:	d302      	bcc.n	8005782 <HAL_DMA2D_PollForTransfer+0x9c>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10f      	bne.n	80057a2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005786:	f043 0220 	orr.w	r2, r3, #32
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2203      	movs	r2, #3
 8005792:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e086      	b.n	80058b0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0ac      	beq.n	800570a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f003 0320 	and.w	r3, r3, #32
 80057ba:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d061      	beq.n	8005896 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80057d2:	f7fd fdc9 	bl	8003368 <HAL_GetTick>
 80057d6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80057d8:	e056      	b.n	8005888 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d02e      	beq.n	800584a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f003 0308 	and.w	r3, r3, #8
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057fa:	f043 0204 	orr.w	r2, r3, #4
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	2b00      	cmp	r3, #0
 800580a:	d005      	beq.n	8005818 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005810:	f043 0202 	orr.w	r2, r3, #2
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005826:	f043 0201 	orr.w	r2, r3, #1
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2229      	movs	r2, #41	@ 0x29
 8005834:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2204      	movs	r2, #4
 800583a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e032      	b.n	80058b0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005850:	d01a      	beq.n	8005888 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005852:	f7fd fd89 	bl	8003368 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d302      	bcc.n	8005868 <HAL_DMA2D_PollForTransfer+0x182>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10f      	bne.n	8005888 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800586c:	f043 0220 	orr.w	r2, r3, #32
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2203      	movs	r2, #3
 8005878:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e013      	b.n	80058b0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0a1      	beq.n	80057da <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2212      	movs	r2, #18
 800589c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d101      	bne.n	80058dc <HAL_DMA2D_ConfigLayer+0x24>
 80058d8:	2302      	movs	r3, #2
 80058da:	e092      	b.n	8005a02 <HAL_DMA2D_ConfigLayer+0x14a>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	4613      	mov	r3, r2
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	1a9b      	subs	r3, r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	3328      	adds	r3, #40	@ 0x28
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	4413      	add	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	041b      	lsls	r3, r3, #16
 8005908:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005910:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005918:	4313      	orrs	r3, r2
 800591a:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800591c:	4b3c      	ldr	r3, [pc, #240]	@ (8005a10 <HAL_DMA2D_ConfigLayer+0x158>)
 800591e:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2b0a      	cmp	r3, #10
 8005926:	d003      	beq.n	8005930 <HAL_DMA2D_ConfigLayer+0x78>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b09      	cmp	r3, #9
 800592e:	d107      	bne.n	8005940 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	e005      	b.n	800594c <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	061b      	lsls	r3, r3, #24
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d120      	bne.n	8005994 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	43db      	mvns	r3, r3
 800595c:	ea02 0103 	and.w	r1, r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	430a      	orrs	r2, r1
 8005968:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	6812      	ldr	r2, [r2, #0]
 8005972:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	2b0a      	cmp	r3, #10
 800597a:	d003      	beq.n	8005984 <HAL_DMA2D_ConfigLayer+0xcc>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2b09      	cmp	r3, #9
 8005982:	d135      	bne.n	80059f0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005990:	629a      	str	r2, [r3, #40]	@ 0x28
 8005992:	e02d      	b.n	80059f0 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2b0b      	cmp	r3, #11
 800599a:	d109      	bne.n	80059b0 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	049b      	lsls	r3, r3, #18
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80059ae:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	69da      	ldr	r2, [r3, #28]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	43db      	mvns	r3, r3
 80059ba:	ea02 0103 	and.w	r1, r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	6812      	ldr	r2, [r2, #0]
 80059d0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b0a      	cmp	r3, #10
 80059d8:	d003      	beq.n	80059e2 <HAL_DMA2D_ConfigLayer+0x12a>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2b09      	cmp	r3, #9
 80059e0:	d106      	bne.n	80059f0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80059ee:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	ff33000f 	.word	0xff33000f

08005a14 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b08b      	sub	sp, #44	@ 0x2c
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a28:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	041a      	lsls	r2, r3, #16
 8005a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a32:	431a      	orrs	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a4c:	d174      	bne.n	8005b38 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005a54:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005a5c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005a64:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d108      	bne.n	8005a86 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a84:	e053      	b.n	8005b2e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d106      	bne.n	8005a9c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a9a:	e048      	b.n	8005b2e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d111      	bne.n	8005ac8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	0cdb      	lsrs	r3, r3, #19
 8005aa8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	0a9b      	lsrs	r3, r3, #10
 8005aae:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	08db      	lsrs	r3, r3, #3
 8005ab4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	02db      	lsls	r3, r3, #11
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ac6:	e032      	b.n	8005b2e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d117      	bne.n	8005b00 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	0fdb      	lsrs	r3, r3, #31
 8005ad4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	0cdb      	lsrs	r3, r3, #19
 8005ada:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	0adb      	lsrs	r3, r3, #11
 8005ae0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	08db      	lsrs	r3, r3, #3
 8005ae6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	029b      	lsls	r3, r3, #10
 8005af0:	431a      	orrs	r2, r3
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	03db      	lsls	r3, r3, #15
 8005af6:	4313      	orrs	r3, r2
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005afe:	e016      	b.n	8005b2e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	0f1b      	lsrs	r3, r3, #28
 8005b04:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	0d1b      	lsrs	r3, r3, #20
 8005b0a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	0b1b      	lsrs	r3, r3, #12
 8005b10:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	091b      	lsrs	r3, r3, #4
 8005b16:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	011a      	lsls	r2, r3, #4
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	021b      	lsls	r3, r3, #8
 8005b20:	431a      	orrs	r2, r3
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	031b      	lsls	r3, r3, #12
 8005b26:	4313      	orrs	r3, r2
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b34:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005b36:	e00d      	b.n	8005b54 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b40:	d104      	bne.n	8005b4c <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	615a      	str	r2, [r3, #20]
}
 8005b4a:	e003      	b.n	8005b54 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	60da      	str	r2, [r3, #12]
}
 8005b54:	bf00      	nop
 8005b56:	372c      	adds	r7, #44	@ 0x2c
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b089      	sub	sp, #36	@ 0x24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b6e:	4b89      	ldr	r3, [pc, #548]	@ (8005d94 <HAL_GPIO_Init+0x234>)
 8005b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b72:	e194      	b.n	8005e9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	2101      	movs	r1, #1
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b80:	4013      	ands	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 8186 	beq.w	8005e98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f003 0303 	and.w	r3, r3, #3
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d005      	beq.n	8005ba4 <HAL_GPIO_Init+0x44>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f003 0303 	and.w	r3, r3, #3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d130      	bne.n	8005c06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	2203      	movs	r2, #3
 8005bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb4:	43db      	mvns	r3, r3
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bda:	2201      	movs	r2, #1
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	43db      	mvns	r3, r3
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4013      	ands	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	091b      	lsrs	r3, r3, #4
 8005bf0:	f003 0201 	and.w	r2, r3, #1
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d017      	beq.n	8005c42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	43db      	mvns	r3, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4013      	ands	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d123      	bne.n	8005c96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	08da      	lsrs	r2, r3, #3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	3208      	adds	r2, #8
 8005c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	220f      	movs	r2, #15
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	43db      	mvns	r3, r3
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	08da      	lsrs	r2, r3, #3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3208      	adds	r2, #8
 8005c90:	69b9      	ldr	r1, [r7, #24]
 8005c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	2203      	movs	r2, #3
 8005ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4013      	ands	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f003 0203 	and.w	r2, r3, #3
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 80e0 	beq.w	8005e98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8005d98 <HAL_GPIO_Init+0x238>)
 8005cda:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005cde:	4a2e      	ldr	r2, [pc, #184]	@ (8005d98 <HAL_GPIO_Init+0x238>)
 8005ce0:	f043 0302 	orr.w	r3, r3, #2
 8005ce4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8005ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8005d98 <HAL_GPIO_Init+0x238>)
 8005cea:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cf6:	4a29      	ldr	r2, [pc, #164]	@ (8005d9c <HAL_GPIO_Init+0x23c>)
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	089b      	lsrs	r3, r3, #2
 8005cfc:	3302      	adds	r3, #2
 8005cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	220f      	movs	r2, #15
 8005d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d12:	43db      	mvns	r3, r3
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	4013      	ands	r3, r2
 8005d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a20      	ldr	r2, [pc, #128]	@ (8005da0 <HAL_GPIO_Init+0x240>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d052      	beq.n	8005dc8 <HAL_GPIO_Init+0x268>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a1f      	ldr	r2, [pc, #124]	@ (8005da4 <HAL_GPIO_Init+0x244>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d031      	beq.n	8005d8e <HAL_GPIO_Init+0x22e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8005da8 <HAL_GPIO_Init+0x248>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d02b      	beq.n	8005d8a <HAL_GPIO_Init+0x22a>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a1d      	ldr	r2, [pc, #116]	@ (8005dac <HAL_GPIO_Init+0x24c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d025      	beq.n	8005d86 <HAL_GPIO_Init+0x226>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005db0 <HAL_GPIO_Init+0x250>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01f      	beq.n	8005d82 <HAL_GPIO_Init+0x222>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a1b      	ldr	r2, [pc, #108]	@ (8005db4 <HAL_GPIO_Init+0x254>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d019      	beq.n	8005d7e <HAL_GPIO_Init+0x21e>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8005db8 <HAL_GPIO_Init+0x258>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d013      	beq.n	8005d7a <HAL_GPIO_Init+0x21a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a19      	ldr	r2, [pc, #100]	@ (8005dbc <HAL_GPIO_Init+0x25c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00d      	beq.n	8005d76 <HAL_GPIO_Init+0x216>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a18      	ldr	r2, [pc, #96]	@ (8005dc0 <HAL_GPIO_Init+0x260>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d007      	beq.n	8005d72 <HAL_GPIO_Init+0x212>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a17      	ldr	r2, [pc, #92]	@ (8005dc4 <HAL_GPIO_Init+0x264>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d101      	bne.n	8005d6e <HAL_GPIO_Init+0x20e>
 8005d6a:	2309      	movs	r3, #9
 8005d6c:	e02d      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d6e:	230a      	movs	r3, #10
 8005d70:	e02b      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d72:	2308      	movs	r3, #8
 8005d74:	e029      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d76:	2307      	movs	r3, #7
 8005d78:	e027      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d7a:	2306      	movs	r3, #6
 8005d7c:	e025      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d7e:	2305      	movs	r3, #5
 8005d80:	e023      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d82:	2304      	movs	r3, #4
 8005d84:	e021      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d86:	2303      	movs	r3, #3
 8005d88:	e01f      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e01d      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e01b      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d92:	bf00      	nop
 8005d94:	58000080 	.word	0x58000080
 8005d98:	58024400 	.word	0x58024400
 8005d9c:	58000400 	.word	0x58000400
 8005da0:	58020000 	.word	0x58020000
 8005da4:	58020400 	.word	0x58020400
 8005da8:	58020800 	.word	0x58020800
 8005dac:	58020c00 	.word	0x58020c00
 8005db0:	58021000 	.word	0x58021000
 8005db4:	58021400 	.word	0x58021400
 8005db8:	58021800 	.word	0x58021800
 8005dbc:	58021c00 	.word	0x58021c00
 8005dc0:	58022000 	.word	0x58022000
 8005dc4:	58022400 	.word	0x58022400
 8005dc8:	2300      	movs	r3, #0
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	f002 0203 	and.w	r2, r2, #3
 8005dd0:	0092      	lsls	r2, r2, #2
 8005dd2:	4093      	lsls	r3, r2
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dda:	4938      	ldr	r1, [pc, #224]	@ (8005ebc <HAL_GPIO_Init+0x35c>)
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	089b      	lsrs	r3, r3, #2
 8005de0:	3302      	adds	r3, #2
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	43db      	mvns	r3, r3
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	4013      	ands	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	43db      	mvns	r3, r3
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	4013      	ands	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	4013      	ands	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	43db      	mvns	r3, r3
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f47f ae63 	bne.w	8005b74 <HAL_GPIO_Init+0x14>
  }
}
 8005eae:	bf00      	nop
 8005eb0:	bf00      	nop
 8005eb2:	3724      	adds	r7, #36	@ 0x24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	58000400 	.word	0x58000400

08005ec0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	691a      	ldr	r2, [r3, #16]
 8005ed0:	887b      	ldrh	r3, [r7, #2]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	73fb      	strb	r3, [r7, #15]
 8005edc:	e001      	b.n	8005ee2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	807b      	strh	r3, [r7, #2]
 8005efc:	4613      	mov	r3, r2
 8005efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f00:	787b      	ldrb	r3, [r7, #1]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f06:	887a      	ldrh	r2, [r7, #2]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005f0c:	e003      	b.n	8005f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005f0e:	887b      	ldrh	r3, [r7, #2]
 8005f10:	041a      	lsls	r2, r3, #16
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	619a      	str	r2, [r3, #24]
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b082      	sub	sp, #8
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	4603      	mov	r3, r0
 8005f2a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005f2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f30:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005f34:	88fb      	ldrh	r3, [r7, #6]
 8005f36:	4013      	ands	r3, r2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d008      	beq.n	8005f4e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f40:	88fb      	ldrh	r3, [r7, #6]
 8005f42:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fc fd61 	bl	8002a10 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005f4e:	bf00      	nop
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
	...

08005f58 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e070      	b.n	800604c <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fc fdc8 	bl	8002b14 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0201 	orr.w	r2, r2, #1
 8005f9a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0201 	bic.w	r2, r2, #1
 8005faa:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8005fba:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fca:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fda:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8005fea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a19      	ldr	r2, [pc, #100]	@ (8006054 <HAL_JPEG_Init+0xfc>)
 8005ff0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a18      	ldr	r2, [pc, #96]	@ (8006058 <HAL_JPEG_Init+0x100>)
 8005ff6:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fcdb 	bl	80069c0 <JPEG_Set_HuffEnc_Mem>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d004      	beq.n	800601a <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e018      	b.n	800604c <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006028:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	08012abc 	.word	0x08012abc
 8006058:	08012afc 	.word	0x08012afc

0800605c <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <HAL_JPEG_GetInfo+0x16>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e083      	b.n	800617e <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f003 0303 	and.w	r3, r3, #3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d103      	bne.n	800608c <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2210      	movs	r2, #16
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	e017      	b.n	80060bc <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d103      	bne.n	80060a2 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	e00c      	b.n	80060bc <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f003 0303 	and.w	r3, r3, #3
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	d103      	bne.n	80060b8 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2230      	movs	r2, #48	@ 0x30
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	e001      	b.n	80060bc <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e060      	b.n	800617e <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	0c1b      	lsrs	r3, r3, #16
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	0c1b      	lsrs	r3, r3, #16
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b10      	cmp	r3, #16
 80060de:	d003      	beq.n	80060e8 <HAL_JPEG_GetInfo+0x8c>
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b30      	cmp	r3, #48	@ 0x30
 80060e6:	d140      	bne.n	800616a <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	091b      	lsrs	r3, r3, #4
 80060f0:	f003 030f 	and.w	r3, r3, #15
 80060f4:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	091b      	lsrs	r3, r3, #4
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	091b      	lsrs	r3, r3, #4
 800610c:	f003 030f 	and.w	r3, r3, #15
 8006110:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d109      	bne.n	800612c <HAL_JPEG_GetInfo+0xd0>
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d106      	bne.n	800612c <HAL_JPEG_GetInfo+0xd0>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d103      	bne.n	800612c <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2202      	movs	r2, #2
 8006128:	605a      	str	r2, [r3, #4]
 800612a:	e01d      	b.n	8006168 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d109      	bne.n	8006146 <HAL_JPEG_GetInfo+0xea>
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d106      	bne.n	8006146 <HAL_JPEG_GetInfo+0xea>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d103      	bne.n	8006146 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2200      	movs	r2, #0
 8006142:	605a      	str	r2, [r3, #4]
 8006144:	e010      	b.n	8006168 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2b03      	cmp	r3, #3
 800614a:	d109      	bne.n	8006160 <HAL_JPEG_GetInfo+0x104>
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d106      	bne.n	8006160 <HAL_JPEG_GetInfo+0x104>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d103      	bne.n	8006160 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2201      	movs	r2, #1
 800615c:	605a      	str	r2, [r3, #4]
 800615e:	e003      	b.n	8006168 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2200      	movs	r2, #0
 8006164:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8006166:	e003      	b.n	8006170 <HAL_JPEG_GetInfo+0x114>
 8006168:	e002      	b.n	8006170 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2200      	movs	r2, #0
 800616e:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f001 fd17 	bl	8007ba4 <JPEG_GetQuality>
 8006176:	4602      	mov	r2, r0
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	607a      	str	r2, [r7, #4]
 8006192:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d005      	beq.n	80061a6 <HAL_JPEG_Decode_DMA+0x20>
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <HAL_JPEG_Decode_DMA+0x20>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e04c      	b.n	8006244 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <HAL_JPEG_Decode_DMA+0x32>
 80061b4:	2302      	movs	r3, #2
 80061b6:	e045      	b.n	8006244 <HAL_JPEG_Decode_DMA+0xbe>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d134      	bne.n	8006236 <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2204      	movs	r2, #4
 80061d0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061d8:	f023 020f 	bic.w	r2, r3, #15
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e4:	f043 020e 	orr.w	r2, r3, #14
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 fe57 	bl	8006ec4 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f001 f978 	bl	800750c <JPEG_DMA_StartProcess>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00f      	beq.n	8006242 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2206      	movs	r2, #6
 8006226:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e006      	b.n	8006244 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 800623e:	2302      	movs	r3, #2
 8006240:	e000      	b.n	8006244 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625e:	f003 030c 	and.w	r3, r3, #12
 8006262:	2b0c      	cmp	r3, #12
 8006264:	d116      	bne.n	8006294 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b00      	cmp	r3, #0
 800626e:	d005      	beq.n	800627c <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006274:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d033      	beq.n	80062ee <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800628a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	655a      	str	r2, [r3, #84]	@ 0x54
 8006292:	e02c      	b.n	80062ee <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006298:	f003 030c 	and.w	r3, r3, #12
 800629c:	2b08      	cmp	r3, #8
 800629e:	d126      	bne.n	80062ee <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d009      	beq.n	80062be <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f043 0306 	orr.w	r3, r3, #6
 80062bc:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d009      	beq.n	80062dc <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062cc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80062da:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	43da      	mvns	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	400a      	ands	r2, r1
 80062ec:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006314:	bf00      	nop
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006338:	bf00      	nop
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006366:	b2db      	uxtb	r3, r3
 8006368:	3b03      	subs	r3, #3
 800636a:	2b01      	cmp	r3, #1
 800636c:	d813      	bhi.n	8006396 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006372:	f003 030c 	and.w	r3, r3, #12
 8006376:	2b08      	cmp	r3, #8
 8006378:	d103      	bne.n	8006382 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fe16 	bl	8006fac <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8006380:	e00b      	b.n	800639a <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006386:	f003 030c 	and.w	r3, r3, #12
 800638a:	2b0c      	cmp	r3, #12
 800638c:	d105      	bne.n	800639a <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f001 f956 	bl	8007640 <JPEG_DMA_ContinueProcess>
      break;
 8006394:	e001      	b.n	800639a <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8006396:	bf00      	nop
 8006398:	e000      	b.n	800639c <HAL_JPEG_IRQHandler+0x44>
      break;
 800639a:	bf00      	nop
  }
}
 800639c:	bf00      	nop
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b08b      	sub	sp, #44	@ 0x2c
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 80063b2:	2300      	movs	r3, #0
 80063b4:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 80063b6:	2300      	movs	r3, #0
 80063b8:	61fb      	str	r3, [r7, #28]
 80063ba:	e020      	b.n	80063fe <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	4413      	add	r3, r2
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 80063c6:	6a3a      	ldr	r2, [r7, #32]
 80063c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ca:	4413      	add	r3, r2
 80063cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063d0:	d90f      	bls.n	80063f2 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e055      	b.n	8006482 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	68b9      	ldr	r1, [r7, #8]
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	440b      	add	r3, r1
 80063e0:	3201      	adds	r2, #1
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	701a      	strb	r2, [r3, #0]
      p++;
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	3301      	adds	r3, #1
 80063ea:	623b      	str	r3, [r7, #32]
      i--;
 80063ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ee:	3b01      	subs	r3, #1
 80063f0:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1ee      	bne.n	80063d6 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	3301      	adds	r3, #1
 80063fc:	61fb      	str	r3, [r7, #28]
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	2b0f      	cmp	r3, #15
 8006402:	d9db      	bls.n	80063bc <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	4413      	add	r3, r2
 800640a:	2200      	movs	r2, #0
 800640c:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	6a3a      	ldr	r2, [r7, #32]
 8006412:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8006414:	2300      	movs	r3, #0
 8006416:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	617b      	str	r3, [r7, #20]
  p = 0;
 800641e:	2300      	movs	r3, #0
 8006420:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8006422:	e027      	b.n	8006474 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	4413      	add	r3, r2
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	601a      	str	r2, [r3, #0]
      p++;
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	3301      	adds	r3, #1
 8006434:	623b      	str	r3, [r7, #32]
      code++;
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	3301      	adds	r3, #1
 800643a:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	4413      	add	r3, r2
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	461a      	mov	r2, r3
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	4293      	cmp	r3, r2
 800644a:	d0eb      	beq.n	8006424 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2b1f      	cmp	r3, #31
 8006450:	d901      	bls.n	8006456 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e015      	b.n	8006482 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8006456:	2201      	movs	r2, #1
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	fa02 f303 	lsl.w	r3, r2, r3
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	429a      	cmp	r2, r3
 8006462:	d301      	bcc.n	8006468 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e00c      	b.n	8006482 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	61bb      	str	r3, [r7, #24]
    si++;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	3301      	adds	r3, #1
 8006472:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	4413      	add	r3, r2
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1dd      	bne.n	800643c <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	372c      	adds	r7, #44	@ 0x2c
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8006494:	af00      	add	r7, sp, #0
 8006496:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800649a:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800649e:	6018      	str	r0, [r3, #0]
 80064a0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80064a4:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80064a8:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80064aa:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80064ae:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80064b2:	6818      	ldr	r0, [r3, #0]
 80064b4:	f107 0308 	add.w	r3, r7, #8
 80064b8:	f107 020c 	add.w	r2, r7, #12
 80064bc:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 80064c0:	f7ff ff70 	bl	80063a4 <JPEG_Bits_To_SizeCodes>
 80064c4:	4603      	mov	r3, r0
 80064c6:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 80064ca:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80064d2:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80064d6:	e075      	b.n	80065c4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 80064d8:	2300      	movs	r3, #0
 80064da:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 80064de:	e067      	b.n	80065b0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 80064e0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80064e4:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80064ee:	4413      	add	r3, r2
 80064f0:	3310      	adds	r3, #16
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 80064f8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d103      	bne.n	8006508 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8006500:	23a0      	movs	r3, #160	@ 0xa0
 8006502:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8006506:	e021      	b.n	800654c <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8006508:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800650c:	2bf0      	cmp	r3, #240	@ 0xf0
 800650e:	d103      	bne.n	8006518 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8006510:	23a1      	movs	r3, #161	@ 0xa1
 8006512:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8006516:	e019      	b.n	800654c <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8006518:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800651c:	091b      	lsrs	r3, r3, #4
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8006526:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800652a:	f003 030f 	and.w	r3, r3, #15
 800652e:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8006532:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8006536:	4613      	mov	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	461a      	mov	r2, r3
 8006540:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8006544:	4413      	add	r3, r2
 8006546:	3b01      	subs	r3, #1
 8006548:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800654c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8006550:	2ba1      	cmp	r3, #161	@ 0xa1
 8006552:	d901      	bls.n	8006558 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8006554:	2301      	movs	r3, #1
 8006556:	e035      	b.n	80065c4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8006558:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800655c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8006560:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8006564:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006568:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800656c:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8006570:	6819      	ldr	r1, [r3, #0]
 8006572:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8006576:	3328      	adds	r3, #40	@ 0x28
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	440b      	add	r3, r1
 800657c:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800657e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8006582:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8006586:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800658a:	4413      	add	r3, r2
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	3b01      	subs	r3, #1
 8006590:	b2d9      	uxtb	r1, r3
 8006592:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8006596:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80065a0:	4413      	add	r3, r2
 80065a2:	460a      	mov	r2, r1
 80065a4:	701a      	strb	r2, [r3, #0]
      k++;
 80065a6:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80065aa:	3301      	adds	r3, #1
 80065ac:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 80065b0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80065b4:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 80065be:	429a      	cmp	r2, r3
 80065c0:	d38e      	bcc.n	80064e0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80065da:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80065de:	6018      	str	r0, [r3, #0]
 80065e0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80065e4:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80065e8:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80065ea:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80065ee:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80065f8:	f107 0208 	add.w	r2, r7, #8
 80065fc:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8006600:	f7ff fed0 	bl	80063a4 <JPEG_Bits_To_SizeCodes>
 8006604:	4603      	mov	r3, r0
 8006606:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 800660a:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8006612:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8006616:	e048      	b.n	80066aa <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 800661e:	e03d      	b.n	800669c <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8006620:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8006624:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800662e:	4413      	add	r3, r2
 8006630:	3310      	adds	r3, #16
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8006638:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800663c:	2b0b      	cmp	r3, #11
 800663e:	d901      	bls.n	8006644 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8006640:	2301      	movs	r3, #1
 8006642:	e032      	b.n	80066aa <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8006644:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8006648:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 800664c:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8006650:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006654:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8006658:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800665c:	6819      	ldr	r1, [r3, #0]
 800665e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8006662:	3302      	adds	r3, #2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	440b      	add	r3, r1
 8006668:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800666a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800666e:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8006672:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8006676:	4413      	add	r3, r2
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	3b01      	subs	r3, #1
 800667c:	b2d9      	uxtb	r1, r3
 800667e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8006682:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800668c:	4413      	add	r3, r2
 800668e:	460a      	mov	r2, r1
 8006690:	701a      	strb	r2, [r3, #0]
      k++;
 8006692:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8006696:	3301      	adds	r3, #1
 8006698:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 800669c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 80066a0:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d3bb      	bcc.n	8006620 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b09a      	sub	sp, #104	@ 0x68
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d106      	bne.n	80066dc <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 80066d6:	3318      	adds	r3, #24
 80066d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80066da:	e00f      	b.n	80066fc <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d106      	bne.n	80066f8 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 80066f2:	3318      	adds	r3, #24
 80066f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80066f6:	e001      	b.n	80066fc <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e059      	b.n	80067b0 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d055      	beq.n	80067ae <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8006702:	f107 0314 	add.w	r3, r7, #20
 8006706:	4619      	mov	r1, r3
 8006708:	68b8      	ldr	r0, [r7, #8]
 800670a:	f7ff ff60 	bl	80065ce <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800670e:	4603      	mov	r3, r0
 8006710:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8006714:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800671c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006720:	e046      	b.n	80067b0 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8006722:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006724:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8006726:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006728:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800672c:	601a      	str	r2, [r3, #0]
    addressDef++;
 800672e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006730:	3304      	adds	r3, #4
 8006732:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8006734:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006736:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800673a:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800673c:	230c      	movs	r3, #12
 800673e:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8006740:	e032      	b.n	80067a8 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8006742:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006744:	3b01      	subs	r3, #1
 8006746:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8006748:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800674a:	3b04      	subs	r3, #4
 800674c:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800674e:	f107 0214 	add.w	r2, r7, #20
 8006752:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006754:	4413      	add	r3, r2
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	021b      	lsls	r3, r3, #8
 800675a:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800675e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006760:	3302      	adds	r3, #2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	3368      	adds	r3, #104	@ 0x68
 8006766:	443b      	add	r3, r7
 8006768:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	4313      	orrs	r3, r2
 8006770:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8006772:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006774:	3b01      	subs	r3, #1
 8006776:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8006778:	f107 0214 	add.w	r2, r7, #20
 800677c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800677e:	4413      	add	r3, r2
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	021b      	lsls	r3, r3, #8
 8006784:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006788:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800678a:	3302      	adds	r3, #2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	3368      	adds	r3, #104	@ 0x68
 8006790:	443b      	add	r3, r7
 8006792:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8006796:	b2db      	uxtb	r3, r3
 8006798:	4313      	orrs	r3, r2
 800679a:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800679c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800679e:	041a      	lsls	r2, r3, #16
 80067a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067a2:	431a      	orrs	r2, r3
 80067a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067a6:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80067a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d8c9      	bhi.n	8006742 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3768      	adds	r7, #104	@ 0x68
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 80067be:	af00      	add	r7, sp, #0
 80067c0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80067c4:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80067c8:	6018      	str	r0, [r3, #0]
 80067ca:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80067ce:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80067d2:	6019      	str	r1, [r3, #0]
 80067d4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80067d8:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 80067dc:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80067de:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80067e2:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067ee:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80067f2:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 80067f6:	6812      	ldr	r2, [r2, #0]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d10c      	bne.n	8006816 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80067fc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006800:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800680c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8006810:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8006814:	e01d      	b.n	8006852 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8006816:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800681a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8006826:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800682a:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800682e:	6812      	ldr	r2, [r2, #0]
 8006830:	429a      	cmp	r2, r3
 8006832:	d10c      	bne.n	800684e <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8006834:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006838:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8006844:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8006848:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800684c:	e001      	b.n	8006852 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e0a8      	b.n	80069a4 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8006852:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006856:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 80a0 	beq.w	80069a2 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8006862:	f107 0214 	add.w	r2, r7, #20
 8006866:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800686a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800686e:	4611      	mov	r1, r2
 8006870:	6818      	ldr	r0, [r3, #0]
 8006872:	f7ff fe0c 	bl	800648e <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8006876:	4603      	mov	r3, r0
 8006878:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 800687c:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8006884:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8006888:	e08c      	b.n	80069a4 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800688a:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800688e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8006892:	2300      	movs	r3, #0
 8006894:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8006898:	e00e      	b.n	80068b8 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800689a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800689e:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80068a2:	601a      	str	r2, [r3, #0]
      addressDef++;
 80068a4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80068a8:	3304      	adds	r3, #4
 80068aa:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 80068ae:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80068b2:	3301      	adds	r3, #1
 80068b4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80068b8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d9ec      	bls.n	800689a <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 80068c0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80068c4:	4a3a      	ldr	r2, [pc, #232]	@ (80069b0 <JPEG_Set_HuffAC_Mem+0x1f8>)
 80068c6:	601a      	str	r2, [r3, #0]
    addressDef++;
 80068c8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80068cc:	3304      	adds	r3, #4
 80068ce:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 80068d2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80068d6:	4a37      	ldr	r2, [pc, #220]	@ (80069b4 <JPEG_Set_HuffAC_Mem+0x1fc>)
 80068d8:	601a      	str	r2, [r3, #0]
    addressDef++;
 80068da:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80068de:	3304      	adds	r3, #4
 80068e0:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 80068e4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80068e8:	4a33      	ldr	r2, [pc, #204]	@ (80069b8 <JPEG_Set_HuffAC_Mem+0x200>)
 80068ea:	601a      	str	r2, [r3, #0]
    addressDef++;
 80068ec:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80068f0:	3304      	adds	r3, #4
 80068f2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 80068f6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80068fa:	4a30      	ldr	r2, [pc, #192]	@ (80069bc <JPEG_Set_HuffAC_Mem+0x204>)
 80068fc:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 80068fe:	23a2      	movs	r3, #162	@ 0xa2
 8006900:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8006904:	e049      	b.n	800699a <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8006906:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800690a:	3b01      	subs	r3, #1
 800690c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8006910:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8006914:	3b04      	subs	r3, #4
 8006916:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800691a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800691e:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8006922:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8006926:	4413      	add	r3, r2
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	021b      	lsls	r3, r3, #8
 800692c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006930:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006934:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8006938:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800693c:	3328      	adds	r3, #40	@ 0x28
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	440b      	add	r3, r1
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	b2db      	uxtb	r3, r3
 8006946:	4313      	orrs	r3, r2
 8006948:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 800694c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8006950:	3b01      	subs	r3, #1
 8006952:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8006956:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800695a:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800695e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8006962:	4413      	add	r3, r2
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800696c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006970:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8006974:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8006978:	3328      	adds	r3, #40	@ 0x28
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	440b      	add	r3, r1
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	b2db      	uxtb	r3, r3
 8006982:	4313      	orrs	r3, r2
 8006984:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8006988:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800698c:	041a      	lsls	r2, r3, #16
 800698e:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8006992:	431a      	orrs	r2, r3
 8006994:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8006998:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800699a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d8b1      	bhi.n	8006906 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	0fd10fd0 	.word	0x0fd10fd0
 80069b4:	0fd30fd2 	.word	0x0fd30fd2
 80069b8:	0fd50fd4 	.word	0x0fd50fd4
 80069bc:	0fd70fd6 	.word	0x0fd70fd6

080069c0 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f84d 	bl	8006a68 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 80069d6:	461a      	mov	r2, r3
 80069d8:	491f      	ldr	r1, [pc, #124]	@ (8006a58 <JPEG_Set_HuffEnc_Mem+0x98>)
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7ff feec 	bl	80067b8 <JPEG_Set_HuffAC_Mem>
 80069e0:	4603      	mov	r3, r0
 80069e2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	e030      	b.n	8006a50 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 80069f6:	461a      	mov	r2, r3
 80069f8:	4918      	ldr	r1, [pc, #96]	@ (8006a5c <JPEG_Set_HuffEnc_Mem+0x9c>)
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff fedc 	bl	80067b8 <JPEG_Set_HuffAC_Mem>
 8006a00:	4603      	mov	r3, r0
 8006a02:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	e020      	b.n	8006a50 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8006a16:	461a      	mov	r2, r3
 8006a18:	4911      	ldr	r1, [pc, #68]	@ (8006a60 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7ff fe4a 	bl	80066b4 <JPEG_Set_HuffDC_Mem>
 8006a20:	4603      	mov	r3, r0
 8006a22:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
 8006a2c:	e010      	b.n	8006a50 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8006a36:	461a      	mov	r2, r3
 8006a38:	490a      	ldr	r1, [pc, #40]	@ (8006a64 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7ff fe3a 	bl	80066b4 <JPEG_Set_HuffDC_Mem>
 8006a40:	4603      	mov	r3, r0
 8006a42:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
 8006a4c:	e000      	b.n	8006a50 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	08012914 	.word	0x08012914
 8006a5c:	080129c8 	.word	0x080129c8
 8006a60:	080128dc 	.word	0x080128dc
 8006a64:	080128f8 	.word	0x080128f8

08006a68 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b08b      	sub	sp, #44	@ 0x2c
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8006a70:	4b80      	ldr	r3, [pc, #512]	@ (8006c74 <JPEG_Set_Huff_DHTMem+0x20c>)
 8006a72:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8006a74:	4b80      	ldr	r3, [pc, #512]	@ (8006c78 <JPEG_Set_Huff_DHTMem+0x210>)
 8006a76:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8006a78:	4b80      	ldr	r3, [pc, #512]	@ (8006c7c <JPEG_Set_Huff_DHTMem+0x214>)
 8006a7a:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8006a7c:	4b80      	ldr	r3, [pc, #512]	@ (8006c80 <JPEG_Set_Huff_DHTMem+0x218>)
 8006a7e:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006a88:	330c      	adds	r3, #12
 8006a8a:	623b      	str	r3, [r7, #32]
  index = 16;
 8006a8c:	2310      	movs	r3, #16
 8006a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006a90:	e01d      	b.n	8006ace <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a94:	3b01      	subs	r3, #1
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	5cd3      	ldrb	r3, [r2, r3]
 8006a9a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9e:	3b02      	subs	r3, #2
 8006aa0:	6979      	ldr	r1, [r7, #20]
 8006aa2:	5ccb      	ldrb	r3, [r1, r3]
 8006aa4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006aa6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aaa:	3b03      	subs	r3, #3
 8006aac:	6979      	ldr	r1, [r7, #20]
 8006aae:	5ccb      	ldrb	r3, [r1, r3]
 8006ab0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8006ab2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8006ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ab6:	3a04      	subs	r2, #4
 8006ab8:	6979      	ldr	r1, [r7, #20]
 8006aba:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8006abc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	601a      	str	r2, [r3, #0]
    address--;
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	3b04      	subs	r3, #4
 8006ac6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	3b04      	subs	r3, #4
 8006acc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d8de      	bhi.n	8006a92 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006adc:	3318      	adds	r3, #24
 8006ade:	623b      	str	r3, [r7, #32]
  index = 12;
 8006ae0:	230c      	movs	r3, #12
 8006ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006ae4:	e021      	b.n	8006b2a <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	4413      	add	r3, r2
 8006aee:	7c1b      	ldrb	r3, [r3, #16]
 8006af0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8006af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af4:	3b02      	subs	r3, #2
 8006af6:	6979      	ldr	r1, [r7, #20]
 8006af8:	440b      	add	r3, r1
 8006afa:	7c1b      	ldrb	r3, [r3, #16]
 8006afc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006afe:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8006b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b02:	3b03      	subs	r3, #3
 8006b04:	6979      	ldr	r1, [r7, #20]
 8006b06:	440b      	add	r3, r1
 8006b08:	7c1b      	ldrb	r3, [r3, #16]
 8006b0a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8006b0c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8006b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b10:	3a04      	subs	r2, #4
 8006b12:	6979      	ldr	r1, [r7, #20]
 8006b14:	440a      	add	r2, r1
 8006b16:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8006b18:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	601a      	str	r2, [r3, #0]
    address--;
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	3b04      	subs	r3, #4
 8006b22:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b26:	3b04      	subs	r3, #4
 8006b28:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d8da      	bhi.n	8006ae6 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006b38:	3328      	adds	r3, #40	@ 0x28
 8006b3a:	623b      	str	r3, [r7, #32]
  index = 16;
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006b40:	e01d      	b.n	8006b7e <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b44:	3b01      	subs	r3, #1
 8006b46:	69fa      	ldr	r2, [r7, #28]
 8006b48:	5cd3      	ldrb	r3, [r2, r3]
 8006b4a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4e:	3b02      	subs	r3, #2
 8006b50:	69f9      	ldr	r1, [r7, #28]
 8006b52:	5ccb      	ldrb	r3, [r1, r3]
 8006b54:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006b56:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8006b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5a:	3b03      	subs	r3, #3
 8006b5c:	69f9      	ldr	r1, [r7, #28]
 8006b5e:	5ccb      	ldrb	r3, [r1, r3]
 8006b60:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8006b62:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8006b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b66:	3a04      	subs	r2, #4
 8006b68:	69f9      	ldr	r1, [r7, #28]
 8006b6a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8006b6c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	601a      	str	r2, [r3, #0]
    address--;
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	3b04      	subs	r3, #4
 8006b76:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7a:	3b04      	subs	r3, #4
 8006b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b80:	2b03      	cmp	r3, #3
 8006b82:	d8de      	bhi.n	8006b42 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006b8c:	33cc      	adds	r3, #204	@ 0xcc
 8006b8e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	4b3b      	ldr	r3, [pc, #236]	@ (8006c84 <JPEG_Set_Huff_DHTMem+0x21c>)
 8006b96:	4013      	ands	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8006ba0:	021a      	lsls	r2, r3, #8
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	69fa      	ldr	r2, [r7, #28]
 8006ba8:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	3b04      	subs	r3, #4
 8006bba:	623b      	str	r3, [r7, #32]
  index = 160;
 8006bbc:	23a0      	movs	r3, #160	@ 0xa0
 8006bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006bc0:	e021      	b.n	8006c06 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	4413      	add	r3, r2
 8006bca:	7c1b      	ldrb	r3, [r3, #16]
 8006bcc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8006bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd0:	3b02      	subs	r3, #2
 8006bd2:	69f9      	ldr	r1, [r7, #28]
 8006bd4:	440b      	add	r3, r1
 8006bd6:	7c1b      	ldrb	r3, [r3, #16]
 8006bd8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006bda:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bde:	3b03      	subs	r3, #3
 8006be0:	69f9      	ldr	r1, [r7, #28]
 8006be2:	440b      	add	r3, r1
 8006be4:	7c1b      	ldrb	r3, [r3, #16]
 8006be6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8006be8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8006bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bec:	3a04      	subs	r2, #4
 8006bee:	69f9      	ldr	r1, [r7, #28]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8006bf4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	601a      	str	r2, [r3, #0]
    address--;
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	3b04      	subs	r3, #4
 8006bfe:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c02:	3b04      	subs	r3, #4
 8006c04:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	d8da      	bhi.n	8006bc2 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006c14:	33cc      	adds	r3, #204	@ 0xcc
 8006c16:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	785b      	ldrb	r3, [r3, #1]
 8006c24:	061a      	lsls	r2, r3, #24
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	041b      	lsls	r3, r3, #16
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006c42:	33dc      	adds	r3, #220	@ 0xdc
 8006c44:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8006c84 <JPEG_Set_Huff_DHTMem+0x21c>)
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	7bdb      	ldrb	r3, [r3, #15]
 8006c54:	021a      	lsls	r2, r3, #8
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	7b92      	ldrb	r2, [r2, #14]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	3b04      	subs	r3, #4
 8006c6c:	623b      	str	r3, [r7, #32]
  index = 12;
 8006c6e:	230c      	movs	r3, #12
 8006c70:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006c72:	e027      	b.n	8006cc4 <JPEG_Set_Huff_DHTMem+0x25c>
 8006c74:	08012914 	.word	0x08012914
 8006c78:	080129c8 	.word	0x080129c8
 8006c7c:	080128dc 	.word	0x080128dc
 8006c80:	080128f8 	.word	0x080128f8
 8006c84:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	5cd3      	ldrb	r3, [r2, r3]
 8006c90:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8006c92:	6939      	ldr	r1, [r7, #16]
 8006c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c96:	440b      	add	r3, r1
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006c9c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	6939      	ldr	r1, [r7, #16]
 8006ca4:	5ccb      	ldrb	r3, [r1, r3]
 8006ca6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8006ca8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8006caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cac:	3a02      	subs	r2, #2
 8006cae:	6939      	ldr	r1, [r7, #16]
 8006cb0:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8006cb2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	601a      	str	r2, [r3, #0]
    address--;
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	3b04      	subs	r3, #4
 8006cbc:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc0:	3b04      	subs	r3, #4
 8006cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	d8de      	bhi.n	8006c88 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006cd2:	33dc      	adds	r3, #220	@ 0xdc
 8006cd4:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	7c5b      	ldrb	r3, [r3, #17]
 8006ce2:	061a      	lsls	r2, r3, #24
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	7c1b      	ldrb	r3, [r3, #16]
 8006cec:	041b      	lsls	r3, r3, #16
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006d00:	33e8      	adds	r3, #232	@ 0xe8
 8006d02:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	4b6d      	ldr	r3, [pc, #436]	@ (8006ec0 <JPEG_Set_Huff_DHTMem+0x458>)
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	7edb      	ldrb	r3, [r3, #27]
 8006d12:	021a      	lsls	r2, r3, #8
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	7e92      	ldrb	r2, [r2, #26]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	3b04      	subs	r3, #4
 8006d2a:	623b      	str	r3, [r7, #32]
  index = 8;
 8006d2c:	2308      	movs	r3, #8
 8006d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006d30:	e021      	b.n	8006d76 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d34:	3301      	adds	r3, #1
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	4413      	add	r3, r2
 8006d3a:	7c1b      	ldrb	r3, [r3, #16]
 8006d3c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8006d3e:	6939      	ldr	r1, [r7, #16]
 8006d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d42:	440b      	add	r3, r1
 8006d44:	3310      	adds	r3, #16
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006d4a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	6939      	ldr	r1, [r7, #16]
 8006d52:	440b      	add	r3, r1
 8006d54:	7c1b      	ldrb	r3, [r3, #16]
 8006d56:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8006d58:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8006d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d5c:	3a02      	subs	r2, #2
 8006d5e:	6939      	ldr	r1, [r7, #16]
 8006d60:	440a      	add	r2, r1
 8006d62:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8006d64:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	601a      	str	r2, [r3, #0]
    address--;
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	3b04      	subs	r3, #4
 8006d6e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	3b04      	subs	r3, #4
 8006d74:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	d8da      	bhi.n	8006d32 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006d84:	33e8      	adds	r3, #232	@ 0xe8
 8006d86:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	785b      	ldrb	r3, [r3, #1]
 8006d94:	061a      	lsls	r2, r3, #24
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	041b      	lsls	r3, r3, #16
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006db2:	33f8      	adds	r3, #248	@ 0xf8
 8006db4:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	4b41      	ldr	r3, [pc, #260]	@ (8006ec0 <JPEG_Set_Huff_DHTMem+0x458>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	7bdb      	ldrb	r3, [r3, #15]
 8006dc4:	021a      	lsls	r2, r3, #8
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	7b92      	ldrb	r2, [r2, #14]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	3b04      	subs	r3, #4
 8006ddc:	623b      	str	r3, [r7, #32]
  index = 12;
 8006dde:	230c      	movs	r3, #12
 8006de0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006de2:	e01d      	b.n	8006e20 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de6:	3301      	adds	r3, #1
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	5cd3      	ldrb	r3, [r2, r3]
 8006dec:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8006dee:	69b9      	ldr	r1, [r7, #24]
 8006df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df2:	440b      	add	r3, r1
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006df8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	69b9      	ldr	r1, [r7, #24]
 8006e00:	5ccb      	ldrb	r3, [r1, r3]
 8006e02:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8006e04:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8006e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e08:	3a02      	subs	r2, #2
 8006e0a:	69b9      	ldr	r1, [r7, #24]
 8006e0c:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8006e0e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	601a      	str	r2, [r3, #0]
    address--;
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	3b04      	subs	r3, #4
 8006e18:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1c:	3b04      	subs	r3, #4
 8006e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d8de      	bhi.n	8006de4 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006e2e:	33f8      	adds	r3, #248	@ 0xf8
 8006e30:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	7c5b      	ldrb	r3, [r3, #17]
 8006e3e:	061a      	lsls	r2, r3, #24
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	431a      	orrs	r2, r3
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	7c1b      	ldrb	r3, [r3, #16]
 8006e48:	041b      	lsls	r3, r3, #16
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006e5c:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8006e60:	623b      	str	r3, [r7, #32]
  index = 160;
 8006e62:	23a0      	movs	r3, #160	@ 0xa0
 8006e64:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006e66:	e021      	b.n	8006eac <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	4413      	add	r3, r2
 8006e70:	7c1b      	ldrb	r3, [r3, #16]
 8006e72:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8006e74:	69b9      	ldr	r1, [r7, #24]
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	440b      	add	r3, r1
 8006e7a:	3310      	adds	r3, #16
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006e80:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	3b01      	subs	r3, #1
 8006e86:	69b9      	ldr	r1, [r7, #24]
 8006e88:	440b      	add	r3, r1
 8006e8a:	7c1b      	ldrb	r3, [r3, #16]
 8006e8c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8006e8e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8006e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e92:	3a02      	subs	r2, #2
 8006e94:	69b9      	ldr	r1, [r7, #24]
 8006e96:	440a      	add	r2, r1
 8006e98:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8006e9a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	601a      	str	r2, [r3, #0]
    address--;
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	3b04      	subs	r3, #4
 8006ea4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea8:	3b04      	subs	r3, #4
 8006eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d8da      	bhi.n	8006e68 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8006eb2:	bf00      	nop
 8006eb4:	bf00      	nop
 8006eb6:	372c      	adds	r7, #44	@ 0x2c
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	ffff0000 	.word	0xffff0000

08006ec4 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ed0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006edc:	f003 0303 	and.w	r3, r3, #3
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d108      	bne.n	8006ef6 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0208 	orr.w	r2, r2, #8
 8006ef2:	605a      	str	r2, [r3, #4]
 8006ef4:	e007      	b.n	8006f06 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0208 	bic.w	r2, r2, #8
 8006f04:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0201 	bic.w	r2, r2, #1
 8006f14:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8006f24:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f34:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f44:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006f54:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f042 0201 	orr.w	r2, r2, #1
 8006f64:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f6a:	f003 030c 	and.w	r3, r3, #12
 8006f6e:	2b08      	cmp	r3, #8
 8006f70:	d108      	bne.n	8006f84 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8006f80:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8006f82:	e00d      	b.n	8006fa0 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f88:	f003 030c 	and.w	r3, r3, #12
 8006f8c:	2b0c      	cmp	r3, #12
 8006f8e:	d107      	bne.n	8006fa0 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006f9e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb8:	f003 0303 	and.w	r3, r3, #3
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d125      	bne.n	800700c <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d01e      	beq.n	800700c <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff f841 	bl	800605c <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7fa f860 	bl	80010ac <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ffa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800700a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007010:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d116      	bne.n	8007046 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d004      	beq.n	8007030 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8007026:	2108      	movs	r1, #8
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f988 	bl	800733e <JPEG_ReadInputData>
 800702e:	e00a      	b.n	8007046 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800703e:	2101      	movs	r1, #1
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f97c 	bl	800733e <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800704a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d116      	bne.n	8007080 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007058:	f003 0308 	and.w	r3, r3, #8
 800705c:	2b00      	cmp	r3, #0
 800705e:	d004      	beq.n	800706a <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8007060:	2108      	movs	r1, #8
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f864 	bl	8007130 <JPEG_StoreOutputData>
 8007068:	e00a      	b.n	8007080 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007070:	f003 0310 	and.w	r3, r3, #16
 8007074:	2b00      	cmp	r3, #0
 8007076:	d003      	beq.n	8007080 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8007078:	2101      	movs	r1, #1
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f858 	bl	8007130 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007086:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800708a:	2b20      	cmp	r3, #32
 800708c:	d14b      	bne.n	8007126 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0201 	bic.w	r2, r2, #1
 800709c:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070a2:	f003 030c 	and.w	r3, r3, #12
 80070a6:	2b08      	cmp	r3, #8
 80070a8:	d107      	bne.n	80070ba <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80070b8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80070c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	69d9      	ldr	r1, [r3, #28]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070da:	461a      	mov	r2, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7fa f82f 	bl	8001140 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ec:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070f2:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	2b02      	cmp	r3, #2
 8007112:	d103      	bne.n	800711c <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7fa f837 	bl	8001188 <HAL_JPEG_DecodeCpltCallback>
 800711a:	e002      	b.n	8007122 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7ff f911 	bl	8006344 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8007122:	2301      	movs	r3, #1
 8007124:	e000      	b.n	8007128 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	440b      	add	r3, r1
 8007148:	429a      	cmp	r2, r3
 800714a:	d34b      	bcc.n	80071e4 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800714c:	2300      	movs	r3, #0
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	e031      	b.n	80071b6 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007158:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	69da      	ldr	r2, [r3, #28]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007162:	4413      	add	r3, r2
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	b2d2      	uxtb	r2, r2
 8007168:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	0a19      	lsrs	r1, r3, #8
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69da      	ldr	r2, [r3, #28]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007176:	3301      	adds	r3, #1
 8007178:	4413      	add	r3, r2
 800717a:	b2ca      	uxtb	r2, r1
 800717c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	0c19      	lsrs	r1, r3, #16
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	69da      	ldr	r2, [r3, #28]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718a:	3302      	adds	r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	b2ca      	uxtb	r2, r1
 8007190:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	0e19      	lsrs	r1, r3, #24
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	69da      	ldr	r2, [r3, #28]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719e:	3303      	adds	r3, #3
 80071a0:	4413      	add	r3, r2
 80071a2:	b2ca      	uxtb	r2, r1
 80071a4:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071aa:	1d1a      	adds	r2, r3, #4
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	3301      	adds	r3, #1
 80071b4:	617b      	str	r3, [r7, #20]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d3c9      	bcc.n	8007152 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c6:	429a      	cmp	r2, r3
 80071c8:	f040 80b5 	bne.w	8007336 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	69d9      	ldr	r1, [r3, #28]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d4:	461a      	mov	r2, r3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7f9 ffb2 	bl	8001140 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 80071e2:	e0a8      	b.n	8007336 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ec:	429a      	cmp	r2, r3
 80071ee:	f240 80a2 	bls.w	8007336 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	089b      	lsrs	r3, r3, #2
 80071fe:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8007200:	2300      	movs	r3, #0
 8007202:	617b      	str	r3, [r7, #20]
 8007204:	e031      	b.n	800726a <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800720c:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	69da      	ldr	r2, [r3, #28]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007216:	4413      	add	r3, r2
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	0a19      	lsrs	r1, r3, #8
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69da      	ldr	r2, [r3, #28]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800722a:	3301      	adds	r3, #1
 800722c:	4413      	add	r3, r2
 800722e:	b2ca      	uxtb	r2, r1
 8007230:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	0c19      	lsrs	r1, r3, #16
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	69da      	ldr	r2, [r3, #28]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723e:	3302      	adds	r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	b2ca      	uxtb	r2, r1
 8007244:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	0e19      	lsrs	r1, r3, #24
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	69da      	ldr	r2, [r3, #28]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007252:	3303      	adds	r3, #3
 8007254:	4413      	add	r3, r2
 8007256:	b2ca      	uxtb	r2, r1
 8007258:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725e:	1d1a      	adds	r2, r3, #4
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	3301      	adds	r3, #1
 8007268:	617b      	str	r3, [r7, #20]
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	429a      	cmp	r2, r3
 8007270:	d3c9      	bcc.n	8007206 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727a:	429a      	cmp	r2, r3
 800727c:	d10b      	bne.n	8007296 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	69d9      	ldr	r1, [r3, #28]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007286:	461a      	mov	r2, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7f9 ff59 	bl	8001140 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007294:	e04f      	b.n	8007336 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072a8:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 80072aa:	2300      	movs	r3, #0
 80072ac:	617b      	str	r3, [r7, #20]
 80072ae:	e015      	b.n	80072dc <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	fa22 f103 	lsr.w	r1, r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69da      	ldr	r2, [r3, #28]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c6:	4413      	add	r3, r2
 80072c8:	b2ca      	uxtb	r2, r1
 80072ca:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	3301      	adds	r3, #1
 80072da:	617b      	str	r3, [r7, #20]
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d3e5      	bcc.n	80072b0 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	69d9      	ldr	r1, [r3, #28]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ec:	461a      	mov	r2, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7f9 ff26 	bl	8001140 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f1c3 0304 	rsb	r3, r3, #4
 8007300:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	617b      	str	r3, [r7, #20]
 8007306:	e013      	b.n	8007330 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	fa22 f103 	lsr.w	r1, r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	69da      	ldr	r2, [r3, #28]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731a:	4413      	add	r3, r2
 800731c:	b2ca      	uxtb	r2, r1
 800731e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	3301      	adds	r3, #1
 800732e:	617b      	str	r3, [r7, #20]
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	2b03      	cmp	r3, #3
 8007334:	d9e8      	bls.n	8007308 <JPEG_StoreOutputData+0x1d8>
}
 8007336:	bf00      	nop
 8007338:	3718      	adds	r7, #24
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b088      	sub	sp, #32
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <JPEG_ReadInputData+0x1c>
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d104      	bne.n	8007364 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800735a:	2101      	movs	r1, #1
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7fe ff75 	bl	800624c <HAL_JPEG_Pause>
 8007362:	e028      	b.n	80073b6 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	429a      	cmp	r2, r3
 800736e:	d906      	bls.n	800737e <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	61fb      	str	r3, [r7, #28]
 800737c:	e01b      	b.n	80073b6 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	429a      	cmp	r2, r3
 8007388:	d115      	bne.n	80073b6 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7f9 fe97 	bl	80010c4 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739a:	2b04      	cmp	r3, #4
 800739c:	d905      	bls.n	80073aa <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a2:	f023 0203 	bic.w	r2, r3, #3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b4:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f040 809f 	bne.w	8007502 <JPEG_ReadInputData+0x1c4>
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 809b 	beq.w	8007502 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	089b      	lsrs	r3, r3, #2
 80073d0:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d335      	bcc.n	8007446 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 80073da:	2300      	movs	r3, #0
 80073dc:	61bb      	str	r3, [r7, #24]
 80073de:	e02d      	b.n	800743c <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	699a      	ldr	r2, [r3, #24]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	4413      	add	r3, r2
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	699a      	ldr	r2, [r3, #24]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3301      	adds	r3, #1
 80073fa:	4413      	add	r3, r2
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007400:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6999      	ldr	r1, [r3, #24]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3302      	adds	r3, #2
 800740c:	440b      	add	r3, r1
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007412:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	699a      	ldr	r2, [r3, #24]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	3303      	adds	r3, #3
 800741e:	4413      	add	r3, r2
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007428:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800742a:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	1d1a      	adds	r2, r3, #4
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	3301      	adds	r3, #1
 800743a:	61bb      	str	r3, [r7, #24]
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	429a      	cmp	r2, r3
 8007442:	d3cd      	bcc.n	80073e0 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8007444:	e05d      	b.n	8007502 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d035      	beq.n	80074b8 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800744c:	2300      	movs	r3, #0
 800744e:	61bb      	str	r3, [r7, #24]
 8007450:	e02d      	b.n	80074ae <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	699a      	ldr	r2, [r3, #24]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4413      	add	r3, r2
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699a      	ldr	r2, [r3, #24]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3301      	adds	r3, #1
 800746c:	4413      	add	r3, r2
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007472:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6999      	ldr	r1, [r3, #24]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	3302      	adds	r3, #2
 800747e:	440b      	add	r3, r1
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007484:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	699a      	ldr	r2, [r3, #24]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3303      	adds	r3, #3
 8007490:	4413      	add	r3, r2
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800749a:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800749c:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	1d1a      	adds	r2, r3, #4
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	3301      	adds	r3, #1
 80074ac:	61bb      	str	r3, [r7, #24]
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d3cd      	bcc.n	8007452 <JPEG_ReadInputData+0x114>
}
 80074b6:	e024      	b.n	8007502 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 80074b8:	2300      	movs	r3, #0
 80074ba:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 80074bc:	2300      	movs	r3, #0
 80074be:	61bb      	str	r3, [r7, #24]
 80074c0:	e017      	b.n	80074f2 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	699a      	ldr	r2, [r3, #24]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	4413      	add	r3, r2
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	f003 0303 	and.w	r3, r3, #3
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	fa02 f303 	lsl.w	r3, r2, r3
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	4313      	orrs	r3, r2
 80074e0:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	1c5a      	adds	r2, r3, #1
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	3301      	adds	r3, #1
 80074f0:	61bb      	str	r3, [r7, #24]
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d3e3      	bcc.n	80074c2 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007502:	bf00      	nop
 8007504:	3720      	adds	r7, #32
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800750c:	b590      	push	{r4, r7, lr}
 800750e:	b087      	sub	sp, #28
 8007510:	af02      	add	r7, sp, #8
 8007512:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751a:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007522:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	429a      	cmp	r2, r3
 800752c:	d804      	bhi.n	8007538 <JPEG_DMA_StartProcess+0x2c>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	429a      	cmp	r2, r3
 8007536:	d901      	bls.n	800753c <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e074      	b.n	8007626 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007540:	4a3b      	ldr	r2, [pc, #236]	@ (8007630 <JPEG_DMA_StartProcess+0x124>)
 8007542:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007548:	4a3a      	ldr	r2, [pc, #232]	@ (8007634 <JPEG_DMA_StartProcess+0x128>)
 800754a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007550:	4a39      	ldr	r2, [pc, #228]	@ (8007638 <JPEG_DMA_StartProcess+0x12c>)
 8007552:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007558:	4a36      	ldr	r2, [pc, #216]	@ (8007634 <JPEG_DMA_StartProcess+0x128>)
 800755a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007560:	4a36      	ldr	r2, [pc, #216]	@ (800763c <JPEG_DMA_StartProcess+0x130>)
 8007562:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d002      	beq.n	8007570 <JPEG_DMA_StartProcess+0x64>
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d107      	bne.n	8007580 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007574:	f043 0204 	orr.w	r2, r3, #4
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e052      	b.n	8007626 <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007588:	68f9      	ldr	r1, [r7, #12]
 800758a:	fbb3 f1f1 	udiv	r1, r3, r1
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	fb00 f101 	mul.w	r1, r0, r1
 8007594:	1a5b      	subs	r3, r3, r1
 8007596:	1ad2      	subs	r2, r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a4:	68b9      	ldr	r1, [r7, #8]
 80075a6:	fbb3 f1f1 	udiv	r1, r3, r1
 80075aa:	68b8      	ldr	r0, [r7, #8]
 80075ac:	fb00 f101 	mul.w	r1, r0, r1
 80075b0:	1a5b      	subs	r3, r3, r1
 80075b2:	1ad2      	subs	r2, r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3344      	adds	r3, #68	@ 0x44
 80075c2:	4619      	mov	r1, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	69db      	ldr	r3, [r3, #28]
 80075c8:	461c      	mov	r4, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ce:	2201      	movs	r2, #1
 80075d0:	9200      	str	r2, [sp, #0]
 80075d2:	4622      	mov	r2, r4
 80075d4:	f000 fbe8 	bl	8007da8 <HAL_MDMA_Start_IT>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d007      	beq.n	80075ee <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075e2:	f043 0204 	orr.w	r2, r3, #4
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e01b      	b.n	8007626 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	4619      	mov	r1, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3340      	adds	r3, #64	@ 0x40
 80075fe:	461c      	mov	r4, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007604:	2201      	movs	r2, #1
 8007606:	9200      	str	r2, [sp, #0]
 8007608:	4622      	mov	r2, r4
 800760a:	f000 fbcd 	bl	8007da8 <HAL_MDMA_Start_IT>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d007      	beq.n	8007624 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007618:	f043 0204 	orr.w	r2, r3, #4
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e000      	b.n	8007626 <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	bd90      	pop	{r4, r7, pc}
 800762e:	bf00      	nop
 8007630:	0800793f 	.word	0x0800793f
 8007634:	08007b2d 	.word	0x08007b2d
 8007638:	08007a6b 	.word	0x08007a6b
 800763c:	08007b7d 	.word	0x08007b7d

08007640 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800764c:	f003 0303 	and.w	r3, r3, #3
 8007650:	2b02      	cmp	r3, #2
 8007652:	d125      	bne.n	80076a0 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800765a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800765e:	2b00      	cmp	r3, #0
 8007660:	d01e      	beq.n	80076a0 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3304      	adds	r3, #4
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7fe fcf7 	bl	800605c <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3304      	adds	r3, #4
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7f9 fd16 	bl	80010ac <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800768e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800769e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076a6:	f003 0320 	and.w	r3, r3, #32
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d039      	beq.n	8007722 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f022 0201 	bic.w	r2, r2, #1
 80076c8:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80076d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80076e8:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d104      	bne.n	8007702 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 fbd4 	bl	8007eaa <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007706:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b02      	cmp	r3, #2
 800770e:	d105      	bne.n	800771c <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007714:	4618      	mov	r0, r3
 8007716:	f000 fbc8 	bl	8007eaa <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800771a:	e002      	b.n	8007722 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f804 	bl	800772a <JPEG_DMA_EndProcess>
}
 8007722:	bf00      	nop
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b084      	sub	sp, #16
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8007742:	1ad2      	subs	r2, r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007750:	429a      	cmp	r2, r3
 8007752:	d10a      	bne.n	800776a <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	69d9      	ldr	r1, [r3, #28]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775c:	461a      	mov	r2, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7f9 fcee 	bl	8001140 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007770:	f003 0310 	and.w	r3, r3, #16
 8007774:	2b00      	cmp	r3, #0
 8007776:	d134      	bne.n	80077e2 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00a      	beq.n	8007796 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	69d9      	ldr	r1, [r3, #28]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007788:	461a      	mov	r2, r3
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7f9 fcd8 	bl	8001140 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f022 0201 	bic.w	r2, r2, #1
 80077a4:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077aa:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077b0:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f003 0303 	and.w	r3, r3, #3
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d103      	bne.n	80077da <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7f9 fcd8 	bl	8001188 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 80077d8:	e00c      	b.n	80077f4 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fe fdb2 	bl	8006344 <HAL_JPEG_EncodeCpltCallback>
}
 80077e0:	e008      	b.n	80077f4 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d102      	bne.n	80077f4 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f804 	bl	80077fc <JPEG_DMA_PollResidualData>
}
 80077f4:	bf00      	nop
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8007804:	2310      	movs	r3, #16
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	e04f      	b.n	80078aa <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800780e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d146      	bne.n	80078a4 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800781c:	f003 0310 	and.w	r3, r3, #16
 8007820:	2b00      	cmp	r3, #0
 8007822:	d03f      	beq.n	80078a4 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800782a:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	69da      	ldr	r2, [r3, #28]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007834:	4413      	add	r3, r2
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	b2d2      	uxtb	r2, r2
 800783a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	0a19      	lsrs	r1, r3, #8
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	69da      	ldr	r2, [r3, #28]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007848:	3301      	adds	r3, #1
 800784a:	4413      	add	r3, r2
 800784c:	b2ca      	uxtb	r2, r1
 800784e:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	0c19      	lsrs	r1, r3, #16
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	69da      	ldr	r2, [r3, #28]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800785c:	3302      	adds	r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	b2ca      	uxtb	r2, r1
 8007862:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	0e19      	lsrs	r1, r3, #24
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	69da      	ldr	r2, [r3, #28]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007870:	3303      	adds	r3, #3
 8007872:	4413      	add	r3, r2
 8007874:	b2ca      	uxtb	r2, r1
 8007876:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787c:	1d1a      	adds	r2, r3, #4
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788a:	429a      	cmp	r2, r3
 800788c:	d10a      	bne.n	80078a4 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	69d9      	ldr	r1, [r3, #28]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007896:	461a      	mov	r2, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7f9 fc51 	bl	8001140 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	617b      	str	r3, [r7, #20]
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1ac      	bne.n	800780a <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078b4:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078bc:	f003 0310 	and.w	r3, r3, #16
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d004      	beq.n	80078ce <JPEG_DMA_PollResidualData+0xd2>
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d133      	bne.n	8007936 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f022 0201 	bic.w	r2, r2, #1
 80078dc:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00a      	beq.n	80078fc <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	69d9      	ldr	r1, [r3, #28]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ee:	461a      	mov	r2, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7f9 fc25 	bl	8001140 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007900:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007906:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f003 0303 	and.w	r3, r3, #3
 8007924:	2b02      	cmp	r3, #2
 8007926:	d103      	bne.n	8007930 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f7f9 fc2d 	bl	8001188 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800792e:	e002      	b.n	8007936 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7fe fd07 	bl	8006344 <HAL_JPEG_EncodeCpltCallback>
}
 8007936:	bf00      	nop
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800793e:	b590      	push	{r4, r7, lr}
 8007940:	b087      	sub	sp, #28
 8007942:	af02      	add	r7, sp, #8
 8007944:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794a:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800795a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007960:	f248 030c 	movw	r3, #32780	@ 0x800c
 8007964:	4013      	ands	r3, r2
 8007966:	2b0c      	cmp	r3, #12
 8007968:	d17c      	bne.n	8007a64 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800796e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007970:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8007980:	1ad2      	subs	r2, r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	4619      	mov	r1, r3
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f7f9 fb99 	bl	80010c4 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	429a      	cmp	r2, r3
 800799a:	d81f      	bhi.n	80079dc <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10d      	bne.n	80079be <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079a6:	f043 0204 	orr.w	r2, r3, #4
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2206      	movs	r2, #6
 80079b2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f7f9 fbdc 	bl	8001174 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 80079bc:	e052      	b.n	8007a64 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c6:	68b9      	ldr	r1, [r7, #8]
 80079c8:	fbb3 f1f1 	udiv	r1, r3, r1
 80079cc:	68b8      	ldr	r0, [r7, #8]
 80079ce:	fb00 f101 	mul.w	r1, r0, r1
 80079d2:	1a5b      	subs	r3, r3, r1
 80079d4:	1ad2      	subs	r2, r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80079da:	e010      	b.n	80079fe <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00c      	beq.n	80079fe <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e8:	f003 0303 	and.w	r3, r3, #3
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d006      	beq.n	80079fe <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f4:	089b      	lsrs	r3, r3, #2
 80079f6:	3301      	adds	r3, #1
 80079f8:	009a      	lsls	r2, r3, #2
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d124      	bne.n	8007a54 <JPEG_MDMAInCpltCallback+0x116>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d020      	beq.n	8007a54 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3340      	adds	r3, #64	@ 0x40
 8007a22:	461c      	mov	r4, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a28:	2201      	movs	r2, #1
 8007a2a:	9200      	str	r2, [sp, #0]
 8007a2c:	4622      	mov	r2, r4
 8007a2e:	f000 f9bb 	bl	8007da8 <HAL_MDMA_Start_IT>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00d      	beq.n	8007a54 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a3c:	f043 0204 	orr.w	r2, r3, #4
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2206      	movs	r2, #6
 8007a48:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f7f9 fb91 	bl	8001174 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 8007a52:	e007      	b.n	8007a64 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007a62:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd90      	pop	{r4, r7, pc}

08007a6a <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 8007a6a:	b590      	push	{r4, r7, lr}
 8007a6c:	b087      	sub	sp, #28
 8007a6e:	af02      	add	r7, sp, #8
 8007a70:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a76:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007a86:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a8c:	f248 030c 	movw	r3, #32780	@ 0x800c
 8007a90:	4013      	ands	r3, r2
 8007a92:	2b0c      	cmp	r3, #12
 8007a94:	d147      	bne.n	8007b26 <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a9c:	f003 0320 	and.w	r3, r3, #32
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d138      	bne.n	8007b16 <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8007ab2:	1ad2      	subs	r2, r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	69d9      	ldr	r1, [r3, #28]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f7f9 fb3c 	bl	8001140 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007acc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d120      	bne.n	8007b16 <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	3344      	adds	r3, #68	@ 0x44
 8007ade:	4619      	mov	r1, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	461c      	mov	r4, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aea:	2201      	movs	r2, #1
 8007aec:	9200      	str	r2, [sp, #0]
 8007aee:	4622      	mov	r2, r4
 8007af0:	f000 f95a 	bl	8007da8 <HAL_MDMA_Start_IT>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00d      	beq.n	8007b16 <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007afe:	f043 0204 	orr.w	r2, r3, #4
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2206      	movs	r2, #6
 8007b0a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f7f9 fb30 	bl	8001174 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 8007b14:	e007      	b.n	8007b26 <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007b24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd90      	pop	{r4, r7, pc}

08007b2c <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b38:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f022 0201 	bic.w	r2, r2, #1
 8007b48:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007b58:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b66:	f043 0204 	orr.w	r2, r3, #4
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f7f9 fb00 	bl	8001174 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 8007b74:	bf00      	nop
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b88:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7ff fdc7 	bl	800772a <JPEG_DMA_EndProcess>
  }
}
 8007b9c:	bf00      	nop
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b08b      	sub	sp, #44	@ 0x2c
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	3350      	adds	r3, #80	@ 0x50
 8007bb6:	61bb      	str	r3, [r7, #24]

  i = 0;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8007bbc:	e042      	b.n	8007c44 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	61fb      	str	r3, [r7, #28]
 8007bc8:	e033      	b.n	8007c32 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	00db      	lsls	r3, r3, #3
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d103      	bne.n	8007be6 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	3364      	adds	r3, #100	@ 0x64
 8007be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007be4:	e022      	b.n	8007c2c <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	2264      	movs	r2, #100	@ 0x64
 8007bea:	fb02 f303 	mul.w	r3, r2, r3
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007bf2:	6a38      	ldr	r0, [r7, #32]
 8007bf4:	69f9      	ldr	r1, [r7, #28]
 8007bf6:	4401      	add	r1, r0
 8007bf8:	4818      	ldr	r0, [pc, #96]	@ (8007c5c <JPEG_GetQuality+0xb8>)
 8007bfa:	5c41      	ldrb	r1, [r0, r1]
 8007bfc:	440a      	add	r2, r1
 8007bfe:	7812      	ldrb	r2, [r2, #0]
 8007c00:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2b64      	cmp	r3, #100	@ 0x64
 8007c0a:	d807      	bhi.n	8007c1c <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8007c12:	085b      	lsrs	r3, r3, #1
 8007c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c16:	4413      	add	r3, r2
 8007c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c1a:	e007      	b.n	8007c2c <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8007c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c28:	4413      	add	r3, r2
 8007c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	61fb      	str	r3, [r7, #28]
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	2b03      	cmp	r3, #3
 8007c36:	d9c8      	bls.n	8007bca <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	3304      	adds	r3, #4
 8007c42:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	2b3c      	cmp	r3, #60	@ 0x3c
 8007c48:	d9b9      	bls.n	8007bbe <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4c:	099b      	lsrs	r3, r3, #6
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	372c      	adds	r7, #44	@ 0x2c
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	08012a7c 	.word	0x08012a7c

08007c60 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007c68:	f7fb fb7e 	bl	8003368 <HAL_GetTick>
 8007c6c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e03b      	b.n	8007cf0 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2202      	movs	r2, #2
 8007c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68da      	ldr	r2, [r3, #12]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f022 0201 	bic.w	r2, r2, #1
 8007c96:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007c98:	e00f      	b.n	8007cba <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8007c9a:	f7fb fb65 	bl	8003368 <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	2b05      	cmp	r3, #5
 8007ca6:	d908      	bls.n	8007cba <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2240      	movs	r2, #64	@ 0x40
 8007cac:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2203      	movs	r2, #3
 8007cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e01a      	b.n	8007cf0 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e8      	bne.n	8007c9a <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fad9 	bl	8008280 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e048      	b.n	8007d9c <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68da      	ldr	r2, [r3, #12]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f022 0201 	bic.w	r2, r2, #1
 8007d18:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2200      	movs	r2, #0
 8007d28:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2200      	movs	r2, #0
 8007d38:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2200      	movs	r2, #0
 8007d48:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2200      	movs	r2, #0
 8007d58:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2200      	movs	r2, #0
 8007d68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	221f      	movs	r2, #31
 8007d70:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e070      	b.n	8007ea2 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d101      	bne.n	8007dce <HAL_MDMA_Start_IT+0x26>
 8007dca:	2302      	movs	r3, #2
 8007dcc:	e069      	b.n	8007ea2 <HAL_MDMA_Start_IT+0xfa>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d158      	bne.n	8007e94 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2202      	movs	r2, #2
 8007de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68da      	ldr	r2, [r3, #12]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 0201 	bic.w	r2, r2, #1
 8007dfe:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	68b9      	ldr	r1, [r7, #8]
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f000 f9c8 	bl	80081a0 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68da      	ldr	r2, [r3, #12]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f042 0206 	orr.w	r2, r2, #6
 8007e1e:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d007      	beq.n	8007e38 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f042 0210 	orr.w	r2, r2, #16
 8007e36:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d007      	beq.n	8007e50 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68da      	ldr	r2, [r3, #12]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f042 0208 	orr.w	r2, r2, #8
 8007e4e:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d007      	beq.n	8007e68 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0220 	orr.w	r2, r2, #32
 8007e66:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68da      	ldr	r2, [r3, #12]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f042 0201 	orr.w	r2, r2, #1
 8007e76:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e80:	d10e      	bne.n	8007ea0 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68da      	ldr	r2, [r3, #12]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007e90:	60da      	str	r2, [r3, #12]
 8007e92:	e005      	b.n	8007ea0 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	e000      	b.n	8007ea2 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e017      	b.n	8007eec <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d004      	beq.n	8007ed2 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2280      	movs	r2, #128	@ 0x80
 8007ecc:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e00c      	b.n	8007eec <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2204      	movs	r2, #4
 8007ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68da      	ldr	r2, [r3, #12]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f022 0201 	bic.w	r2, r2, #1
 8007ee8:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007f04:	4b91      	ldr	r3, [pc, #580]	@ (800814c <HAL_MDMA_IRQHandler+0x254>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a91      	ldr	r2, [pc, #580]	@ (8008150 <HAL_MDMA_IRQHandler+0x258>)
 8007f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f0e:	0a9b      	lsrs	r3, r3, #10
 8007f10:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	4b8e      	ldr	r3, [pc, #568]	@ (8008154 <HAL_MDMA_IRQHandler+0x25c>)
 8007f1a:	4413      	add	r3, r2
 8007f1c:	099b      	lsrs	r3, r3, #6
 8007f1e:	f003 031f 	and.w	r3, r3, #31
 8007f22:	2201      	movs	r2, #1
 8007f24:	fa02 f303 	lsl.w	r3, r2, r3
 8007f28:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8007f2a:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	4013      	ands	r3, r2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 812d 	beq.w	8008194 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d054      	beq.n	8007ff2 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	f003 0302 	and.w	r3, r3, #2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d04d      	beq.n	8007ff2 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68da      	ldr	r2, [r3, #12]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f022 0202 	bic.w	r2, r2, #2
 8007f64:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d106      	bne.n	8007f86 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f7c:	f043 0201 	orr.w	r2, r3, #1
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	669a      	str	r2, [r3, #104]	@ 0x68
 8007f84:	e005      	b.n	8007f92 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f8a:	f043 0202 	orr.w	r2, r3, #2
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d005      	beq.n	8007fa8 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fa0:	f043 0204 	orr.w	r2, r3, #4
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d005      	beq.n	8007fbe <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fb6:	f043 0208 	orr.w	r2, r3, #8
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d005      	beq.n	8007fd4 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fcc:	f043 0210 	orr.w	r2, r3, #16
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d005      	beq.n	8007fea <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fe2:	f043 0220 	orr.w	r2, r3, #32
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0310 	and.w	r3, r3, #16
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d012      	beq.n	8008026 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	f003 0320 	and.w	r3, r3, #32
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00b      	beq.n	8008026 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2210      	movs	r2, #16
 8008014:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0308 	and.w	r3, r3, #8
 8008030:	2b00      	cmp	r3, #0
 8008032:	d012      	beq.n	800805a <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	f003 0310 	and.w	r3, r3, #16
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00b      	beq.n	800805a <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2208      	movs	r2, #8
 8008048:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0304 	and.w	r3, r3, #4
 8008064:	2b00      	cmp	r3, #0
 8008066:	d012      	beq.n	800808e <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	f003 0308 	and.w	r3, r3, #8
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00b      	beq.n	800808e <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2204      	movs	r2, #4
 800807c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0302 	and.w	r3, r3, #2
 8008098:	2b00      	cmp	r3, #0
 800809a:	d039      	beq.n	8008110 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	f003 0304 	and.w	r3, r3, #4
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d032      	beq.n	8008110 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68da      	ldr	r2, [r3, #12]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 80080b8:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b04      	cmp	r3, #4
 80080c4:	d110      	bne.n	80080e8 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d05c      	beq.n	8008198 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	4798      	blx	r3
        }
        return;
 80080e6:	e057      	b.n	8008198 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2202      	movs	r2, #2
 80080ee:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008104:	2b00      	cmp	r3, #0
 8008106:	d003      	beq.n	8008110 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008114:	2b00      	cmp	r3, #0
 8008116:	d040      	beq.n	800819a <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2204      	movs	r2, #4
 800811c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68da      	ldr	r2, [r3, #12]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f022 0201 	bic.w	r2, r2, #1
 800812e:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	3301      	adds	r3, #1
 8008134:	60bb      	str	r3, [r7, #8]
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	429a      	cmp	r2, r3
 800813a:	d30d      	bcc.n	8008158 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1f2      	bne.n	8008130 <HAL_MDMA_IRQHandler+0x238>
 800814a:	e006      	b.n	800815a <HAL_MDMA_IRQHandler+0x262>
 800814c:	24000008 	.word	0x24000008
 8008150:	1b4e81b5 	.word	0x1b4e81b5
 8008154:	adffffc0 	.word	0xadffffc0
        break;
 8008158:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	d004      	beq.n	800817a <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2203      	movs	r2, #3
 8008174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008178:	e003      	b.n	8008182 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008186:	2b00      	cmp	r3, #0
 8008188:	d007      	beq.n	800819a <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	4798      	blx	r3
 8008192:	e002      	b.n	800819a <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8008194:	bf00      	nop
 8008196:	e000      	b.n	800819a <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8008198:	bf00      	nop
    }
  }
}
 800819a:	3718      	adds	r7, #24
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	695a      	ldr	r2, [r3, #20]
 80081b4:	4b31      	ldr	r3, [pc, #196]	@ (800827c <MDMA_SetConfig+0xdc>)
 80081b6:	4013      	ands	r3, r2
 80081b8:	683a      	ldr	r2, [r7, #0]
 80081ba:	f3c2 0110 	ubfx	r1, r2, #0, #17
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	6812      	ldr	r2, [r2, #0]
 80081c2:	430b      	orrs	r3, r1
 80081c4:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80081d0:	6a3b      	ldr	r3, [r7, #32]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	051a      	lsls	r2, r3, #20
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	221f      	movs	r2, #31
 80081e4:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80081fc:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008204:	d002      	beq.n	800820c <MDMA_SetConfig+0x6c>
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d108      	bne.n	800821e <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800821a:	629a      	str	r2, [r3, #40]	@ 0x28
 800821c:	e007      	b.n	800822e <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800822c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008234:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800823c:	d002      	beq.n	8008244 <MDMA_SetConfig+0xa4>
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d108      	bne.n	8008256 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008252:	629a      	str	r2, [r3, #40]	@ 0x28
 8008254:	e007      	b.n	8008266 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008264:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008270:	bf00      	nop
 8008272:	371c      	adds	r7, #28
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	fffe0000 	.word	0xfffe0000

08008280 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	68d9      	ldr	r1, [r3, #12]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	691a      	ldr	r2, [r3, #16]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	430a      	orrs	r2, r1
 8008296:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	695a      	ldr	r2, [r3, #20]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80082a6:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a1b      	ldr	r3, [r3, #32]
 80082ac:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80082b2:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b8:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80082be:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082c4:	3b01      	subs	r3, #1
 80082c6:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80082c8:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80082d4:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80082d6:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082e0:	d107      	bne.n	80082f2 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	691a      	ldr	r2, [r3, #16]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 80082f0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2200      	movs	r2, #0
 80082f8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082fe:	2b00      	cmp	r3, #0
 8008300:	da11      	bge.n	8008326 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	695a      	ldr	r2, [r3, #20]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008310:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008316:	425b      	negs	r3, r3
 8008318:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	b292      	uxth	r2, r2
 8008322:	621a      	str	r2, [r3, #32]
 8008324:	e006      	b.n	8008334 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800832a:	461a      	mov	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	b292      	uxth	r2, r2
 8008332:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008338:	2b00      	cmp	r3, #0
 800833a:	da15      	bge.n	8008368 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	695a      	ldr	r2, [r3, #20]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800834a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008350:	425b      	negs	r3, r3
 8008352:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6a19      	ldr	r1, [r3, #32]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	041a      	lsls	r2, r3, #16
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	430a      	orrs	r2, r1
 8008364:	621a      	str	r2, [r3, #32]
 8008366:	e009      	b.n	800837c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6a19      	ldr	r1, [r3, #32]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008372:	041a      	lsls	r2, r3, #16
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	430a      	orrs	r2, r1
 800837a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008384:	d006      	beq.n	8008394 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685a      	ldr	r2, [r3, #4]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	b2d2      	uxtb	r2, r2
 8008390:	629a      	str	r2, [r3, #40]	@ 0x28
 8008392:	e003      	b.n	800839c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2200      	movs	r2, #0
 800839a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2200      	movs	r2, #0
 80083a2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80083a4:	bf00      	nop
 80083a6:	3714      	adds	r7, #20
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 80083bc:	4b15      	ldr	r3, [pc, #84]	@ (8008414 <HAL_PWR_EnterSTOPMode+0x64>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f023 0201 	bic.w	r2, r3, #1
 80083c4:	4913      	ldr	r1, [pc, #76]	@ (8008414 <HAL_PWR_EnterSTOPMode+0x64>)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 80083cc:	4b11      	ldr	r3, [pc, #68]	@ (8008414 <HAL_PWR_EnterSTOPMode+0x64>)
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	4a10      	ldr	r2, [pc, #64]	@ (8008414 <HAL_PWR_EnterSTOPMode+0x64>)
 80083d2:	f023 0305 	bic.w	r3, r3, #5
 80083d6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80083d8:	4b0f      	ldr	r3, [pc, #60]	@ (8008418 <HAL_PWR_EnterSTOPMode+0x68>)
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	4a0e      	ldr	r2, [pc, #56]	@ (8008418 <HAL_PWR_EnterSTOPMode+0x68>)
 80083de:	f043 0304 	orr.w	r3, r3, #4
 80083e2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80083e4:	f3bf 8f4f 	dsb	sy
}
 80083e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80083ea:	f3bf 8f6f 	isb	sy
}
 80083ee:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d101      	bne.n	80083fa <HAL_PWR_EnterSTOPMode+0x4a>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 80083f6:	bf30      	wfi
 80083f8:	e000      	b.n	80083fc <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 80083fa:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80083fc:	4b06      	ldr	r3, [pc, #24]	@ (8008418 <HAL_PWR_EnterSTOPMode+0x68>)
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	4a05      	ldr	r2, [pc, #20]	@ (8008418 <HAL_PWR_EnterSTOPMode+0x68>)
 8008402:	f023 0304 	bic.w	r3, r3, #4
 8008406:	6113      	str	r3, [r2, #16]
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	58024800 	.word	0x58024800
 8008418:	e000ed00 	.word	0xe000ed00

0800841c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008424:	4b19      	ldr	r3, [pc, #100]	@ (800848c <HAL_PWREx_ConfigSupply+0x70>)
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b04      	cmp	r3, #4
 800842e:	d00a      	beq.n	8008446 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008430:	4b16      	ldr	r3, [pc, #88]	@ (800848c <HAL_PWREx_ConfigSupply+0x70>)
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	f003 0307 	and.w	r3, r3, #7
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	429a      	cmp	r2, r3
 800843c:	d001      	beq.n	8008442 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e01f      	b.n	8008482 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	e01d      	b.n	8008482 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008446:	4b11      	ldr	r3, [pc, #68]	@ (800848c <HAL_PWREx_ConfigSupply+0x70>)
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	f023 0207 	bic.w	r2, r3, #7
 800844e:	490f      	ldr	r1, [pc, #60]	@ (800848c <HAL_PWREx_ConfigSupply+0x70>)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4313      	orrs	r3, r2
 8008454:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008456:	f7fa ff87 	bl	8003368 <HAL_GetTick>
 800845a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800845c:	e009      	b.n	8008472 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800845e:	f7fa ff83 	bl	8003368 <HAL_GetTick>
 8008462:	4602      	mov	r2, r0
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800846c:	d901      	bls.n	8008472 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e007      	b.n	8008482 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008472:	4b06      	ldr	r3, [pc, #24]	@ (800848c <HAL_PWREx_ConfigSupply+0x70>)
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800847a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800847e:	d1ee      	bne.n	800845e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	58024800 	.word	0x58024800

08008490 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b08c      	sub	sp, #48	@ 0x30
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d102      	bne.n	80084a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	f000 bc1f 	b.w	8008ce2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 80b3 	beq.w	8008618 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084b2:	4b95      	ldr	r3, [pc, #596]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084bc:	4b92      	ldr	r3, [pc, #584]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 80084be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80084c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c4:	2b10      	cmp	r3, #16
 80084c6:	d007      	beq.n	80084d8 <HAL_RCC_OscConfig+0x48>
 80084c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ca:	2b18      	cmp	r3, #24
 80084cc:	d112      	bne.n	80084f4 <HAL_RCC_OscConfig+0x64>
 80084ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d0:	f003 0303 	and.w	r3, r3, #3
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d10d      	bne.n	80084f4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084d8:	4b8b      	ldr	r3, [pc, #556]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f000 8098 	beq.w	8008616 <HAL_RCC_OscConfig+0x186>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f040 8093 	bne.w	8008616 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e3f6      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084fc:	d106      	bne.n	800850c <HAL_RCC_OscConfig+0x7c>
 80084fe:	4b82      	ldr	r3, [pc, #520]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a81      	ldr	r2, [pc, #516]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008508:	6013      	str	r3, [r2, #0]
 800850a:	e058      	b.n	80085be <HAL_RCC_OscConfig+0x12e>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d112      	bne.n	800853a <HAL_RCC_OscConfig+0xaa>
 8008514:	4b7c      	ldr	r3, [pc, #496]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a7b      	ldr	r2, [pc, #492]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 800851a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800851e:	6013      	str	r3, [r2, #0]
 8008520:	4b79      	ldr	r3, [pc, #484]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a78      	ldr	r2, [pc, #480]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008526:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800852a:	6013      	str	r3, [r2, #0]
 800852c:	4b76      	ldr	r3, [pc, #472]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a75      	ldr	r2, [pc, #468]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008532:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008536:	6013      	str	r3, [r2, #0]
 8008538:	e041      	b.n	80085be <HAL_RCC_OscConfig+0x12e>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008542:	d112      	bne.n	800856a <HAL_RCC_OscConfig+0xda>
 8008544:	4b70      	ldr	r3, [pc, #448]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a6f      	ldr	r2, [pc, #444]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 800854a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800854e:	6013      	str	r3, [r2, #0]
 8008550:	4b6d      	ldr	r3, [pc, #436]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a6c      	ldr	r2, [pc, #432]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008556:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800855a:	6013      	str	r3, [r2, #0]
 800855c:	4b6a      	ldr	r3, [pc, #424]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a69      	ldr	r2, [pc, #420]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008562:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	e029      	b.n	80085be <HAL_RCC_OscConfig+0x12e>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8008572:	d112      	bne.n	800859a <HAL_RCC_OscConfig+0x10a>
 8008574:	4b64      	ldr	r3, [pc, #400]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a63      	ldr	r2, [pc, #396]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 800857a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800857e:	6013      	str	r3, [r2, #0]
 8008580:	4b61      	ldr	r3, [pc, #388]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a60      	ldr	r2, [pc, #384]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008586:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800858a:	6013      	str	r3, [r2, #0]
 800858c:	4b5e      	ldr	r3, [pc, #376]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a5d      	ldr	r2, [pc, #372]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008596:	6013      	str	r3, [r2, #0]
 8008598:	e011      	b.n	80085be <HAL_RCC_OscConfig+0x12e>
 800859a:	4b5b      	ldr	r3, [pc, #364]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a5a      	ldr	r2, [pc, #360]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 80085a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085a4:	6013      	str	r3, [r2, #0]
 80085a6:	4b58      	ldr	r3, [pc, #352]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a57      	ldr	r2, [pc, #348]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 80085ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80085b0:	6013      	str	r3, [r2, #0]
 80085b2:	4b55      	ldr	r3, [pc, #340]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a54      	ldr	r2, [pc, #336]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 80085b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80085bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d013      	beq.n	80085ee <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085c6:	f7fa fecf 	bl	8003368 <HAL_GetTick>
 80085ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085cc:	e008      	b.n	80085e0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085ce:	f7fa fecb 	bl	8003368 <HAL_GetTick>
 80085d2:	4602      	mov	r2, r0
 80085d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d6:	1ad3      	subs	r3, r2, r3
 80085d8:	2b64      	cmp	r3, #100	@ 0x64
 80085da:	d901      	bls.n	80085e0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e380      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085e0:	4b49      	ldr	r3, [pc, #292]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d0f0      	beq.n	80085ce <HAL_RCC_OscConfig+0x13e>
 80085ec:	e014      	b.n	8008618 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ee:	f7fa febb 	bl	8003368 <HAL_GetTick>
 80085f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80085f4:	e008      	b.n	8008608 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085f6:	f7fa feb7 	bl	8003368 <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	2b64      	cmp	r3, #100	@ 0x64
 8008602:	d901      	bls.n	8008608 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e36c      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008608:	4b3f      	ldr	r3, [pc, #252]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1f0      	bne.n	80085f6 <HAL_RCC_OscConfig+0x166>
 8008614:	e000      	b.n	8008618 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008616:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0302 	and.w	r3, r3, #2
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 808c 	beq.w	800873e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008626:	4b38      	ldr	r3, [pc, #224]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800862e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008630:	4b35      	ldr	r3, [pc, #212]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008634:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008636:	6a3b      	ldr	r3, [r7, #32]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d007      	beq.n	800864c <HAL_RCC_OscConfig+0x1bc>
 800863c:	6a3b      	ldr	r3, [r7, #32]
 800863e:	2b18      	cmp	r3, #24
 8008640:	d137      	bne.n	80086b2 <HAL_RCC_OscConfig+0x222>
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	f003 0303 	and.w	r3, r3, #3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d132      	bne.n	80086b2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800864c:	4b2e      	ldr	r3, [pc, #184]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0304 	and.w	r3, r3, #4
 8008654:	2b00      	cmp	r3, #0
 8008656:	d005      	beq.n	8008664 <HAL_RCC_OscConfig+0x1d4>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d101      	bne.n	8008664 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	e33e      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008664:	4b28      	ldr	r3, [pc, #160]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f023 0219 	bic.w	r2, r3, #25
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	4925      	ldr	r1, [pc, #148]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008672:	4313      	orrs	r3, r2
 8008674:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008676:	f7fa fe77 	bl	8003368 <HAL_GetTick>
 800867a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800867c:	e008      	b.n	8008690 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800867e:	f7fa fe73 	bl	8003368 <HAL_GetTick>
 8008682:	4602      	mov	r2, r0
 8008684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	2b02      	cmp	r3, #2
 800868a:	d901      	bls.n	8008690 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	e328      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008690:	4b1d      	ldr	r3, [pc, #116]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0304 	and.w	r3, r3, #4
 8008698:	2b00      	cmp	r3, #0
 800869a:	d0f0      	beq.n	800867e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800869c:	4b1a      	ldr	r3, [pc, #104]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	061b      	lsls	r3, r3, #24
 80086aa:	4917      	ldr	r1, [pc, #92]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 80086ac:	4313      	orrs	r3, r2
 80086ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086b0:	e045      	b.n	800873e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d028      	beq.n	800870c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80086ba:	4b13      	ldr	r3, [pc, #76]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f023 0219 	bic.w	r2, r3, #25
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	4910      	ldr	r1, [pc, #64]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086cc:	f7fa fe4c 	bl	8003368 <HAL_GetTick>
 80086d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086d2:	e008      	b.n	80086e6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086d4:	f7fa fe48 	bl	8003368 <HAL_GetTick>
 80086d8:	4602      	mov	r2, r0
 80086da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d901      	bls.n	80086e6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e2fd      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086e6:	4b08      	ldr	r3, [pc, #32]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0304 	and.w	r3, r3, #4
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d0f0      	beq.n	80086d4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086f2:	4b05      	ldr	r3, [pc, #20]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	061b      	lsls	r3, r3, #24
 8008700:	4901      	ldr	r1, [pc, #4]	@ (8008708 <HAL_RCC_OscConfig+0x278>)
 8008702:	4313      	orrs	r3, r2
 8008704:	604b      	str	r3, [r1, #4]
 8008706:	e01a      	b.n	800873e <HAL_RCC_OscConfig+0x2ae>
 8008708:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800870c:	4b97      	ldr	r3, [pc, #604]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a96      	ldr	r2, [pc, #600]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 8008712:	f023 0301 	bic.w	r3, r3, #1
 8008716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008718:	f7fa fe26 	bl	8003368 <HAL_GetTick>
 800871c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800871e:	e008      	b.n	8008732 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008720:	f7fa fe22 	bl	8003368 <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	2b02      	cmp	r3, #2
 800872c:	d901      	bls.n	8008732 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e2d7      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008732:	4b8e      	ldr	r3, [pc, #568]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0304 	and.w	r3, r3, #4
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1f0      	bne.n	8008720 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 0310 	and.w	r3, r3, #16
 8008746:	2b00      	cmp	r3, #0
 8008748:	d06a      	beq.n	8008820 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800874a:	4b88      	ldr	r3, [pc, #544]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008752:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008754:	4b85      	ldr	r3, [pc, #532]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 8008756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008758:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	2b08      	cmp	r3, #8
 800875e:	d007      	beq.n	8008770 <HAL_RCC_OscConfig+0x2e0>
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	2b18      	cmp	r3, #24
 8008764:	d11b      	bne.n	800879e <HAL_RCC_OscConfig+0x30e>
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f003 0303 	and.w	r3, r3, #3
 800876c:	2b01      	cmp	r3, #1
 800876e:	d116      	bne.n	800879e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008770:	4b7e      	ldr	r3, [pc, #504]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008778:	2b00      	cmp	r3, #0
 800877a:	d005      	beq.n	8008788 <HAL_RCC_OscConfig+0x2f8>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	2b80      	cmp	r3, #128	@ 0x80
 8008782:	d001      	beq.n	8008788 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e2ac      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008788:	4b78      	ldr	r3, [pc, #480]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a1b      	ldr	r3, [r3, #32]
 8008794:	061b      	lsls	r3, r3, #24
 8008796:	4975      	ldr	r1, [pc, #468]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 8008798:	4313      	orrs	r3, r2
 800879a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800879c:	e040      	b.n	8008820 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	69db      	ldr	r3, [r3, #28]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d023      	beq.n	80087ee <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80087a6:	4b71      	ldr	r3, [pc, #452]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a70      	ldr	r2, [pc, #448]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 80087ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087b2:	f7fa fdd9 	bl	8003368 <HAL_GetTick>
 80087b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80087b8:	e008      	b.n	80087cc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80087ba:	f7fa fdd5 	bl	8003368 <HAL_GetTick>
 80087be:	4602      	mov	r2, r0
 80087c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d901      	bls.n	80087cc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e28a      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80087cc:	4b67      	ldr	r3, [pc, #412]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d0f0      	beq.n	80087ba <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087d8:	4b64      	ldr	r3, [pc, #400]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a1b      	ldr	r3, [r3, #32]
 80087e4:	061b      	lsls	r3, r3, #24
 80087e6:	4961      	ldr	r1, [pc, #388]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 80087e8:	4313      	orrs	r3, r2
 80087ea:	60cb      	str	r3, [r1, #12]
 80087ec:	e018      	b.n	8008820 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80087ee:	4b5f      	ldr	r3, [pc, #380]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a5e      	ldr	r2, [pc, #376]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 80087f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087fa:	f7fa fdb5 	bl	8003368 <HAL_GetTick>
 80087fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008800:	e008      	b.n	8008814 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008802:	f7fa fdb1 	bl	8003368 <HAL_GetTick>
 8008806:	4602      	mov	r2, r0
 8008808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	2b02      	cmp	r3, #2
 800880e:	d901      	bls.n	8008814 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e266      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008814:	4b55      	ldr	r3, [pc, #340]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1f0      	bne.n	8008802 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0308 	and.w	r3, r3, #8
 8008828:	2b00      	cmp	r3, #0
 800882a:	d036      	beq.n	800889a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	695b      	ldr	r3, [r3, #20]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d019      	beq.n	8008868 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008834:	4b4d      	ldr	r3, [pc, #308]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 8008836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008838:	4a4c      	ldr	r2, [pc, #304]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 800883a:	f043 0301 	orr.w	r3, r3, #1
 800883e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008840:	f7fa fd92 	bl	8003368 <HAL_GetTick>
 8008844:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008846:	e008      	b.n	800885a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008848:	f7fa fd8e 	bl	8003368 <HAL_GetTick>
 800884c:	4602      	mov	r2, r0
 800884e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	2b02      	cmp	r3, #2
 8008854:	d901      	bls.n	800885a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e243      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800885a:	4b44      	ldr	r3, [pc, #272]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 800885c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800885e:	f003 0302 	and.w	r3, r3, #2
 8008862:	2b00      	cmp	r3, #0
 8008864:	d0f0      	beq.n	8008848 <HAL_RCC_OscConfig+0x3b8>
 8008866:	e018      	b.n	800889a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008868:	4b40      	ldr	r3, [pc, #256]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 800886a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800886c:	4a3f      	ldr	r2, [pc, #252]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 800886e:	f023 0301 	bic.w	r3, r3, #1
 8008872:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008874:	f7fa fd78 	bl	8003368 <HAL_GetTick>
 8008878:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800887a:	e008      	b.n	800888e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800887c:	f7fa fd74 	bl	8003368 <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	2b02      	cmp	r3, #2
 8008888:	d901      	bls.n	800888e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e229      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800888e:	4b37      	ldr	r3, [pc, #220]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 8008890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1f0      	bne.n	800887c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0320 	and.w	r3, r3, #32
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d036      	beq.n	8008914 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d019      	beq.n	80088e2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80088ae:	4b2f      	ldr	r3, [pc, #188]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a2e      	ldr	r2, [pc, #184]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 80088b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80088b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80088ba:	f7fa fd55 	bl	8003368 <HAL_GetTick>
 80088be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80088c0:	e008      	b.n	80088d4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80088c2:	f7fa fd51 	bl	8003368 <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d901      	bls.n	80088d4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e206      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80088d4:	4b25      	ldr	r3, [pc, #148]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d0f0      	beq.n	80088c2 <HAL_RCC_OscConfig+0x432>
 80088e0:	e018      	b.n	8008914 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80088e2:	4b22      	ldr	r3, [pc, #136]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a21      	ldr	r2, [pc, #132]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 80088e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80088ee:	f7fa fd3b 	bl	8003368 <HAL_GetTick>
 80088f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088f4:	e008      	b.n	8008908 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80088f6:	f7fa fd37 	bl	8003368 <HAL_GetTick>
 80088fa:	4602      	mov	r2, r0
 80088fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fe:	1ad3      	subs	r3, r2, r3
 8008900:	2b02      	cmp	r3, #2
 8008902:	d901      	bls.n	8008908 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8008904:	2303      	movs	r3, #3
 8008906:	e1ec      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008908:	4b18      	ldr	r3, [pc, #96]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1f0      	bne.n	80088f6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0304 	and.w	r3, r3, #4
 800891c:	2b00      	cmp	r3, #0
 800891e:	f000 80af 	beq.w	8008a80 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008922:	4b13      	ldr	r3, [pc, #76]	@ (8008970 <HAL_RCC_OscConfig+0x4e0>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a12      	ldr	r2, [pc, #72]	@ (8008970 <HAL_RCC_OscConfig+0x4e0>)
 8008928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800892c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800892e:	f7fa fd1b 	bl	8003368 <HAL_GetTick>
 8008932:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008934:	e008      	b.n	8008948 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008936:	f7fa fd17 	bl	8003368 <HAL_GetTick>
 800893a:	4602      	mov	r2, r0
 800893c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	2b64      	cmp	r3, #100	@ 0x64
 8008942:	d901      	bls.n	8008948 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e1cc      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008948:	4b09      	ldr	r3, [pc, #36]	@ (8008970 <HAL_RCC_OscConfig+0x4e0>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008950:	2b00      	cmp	r3, #0
 8008952:	d0f0      	beq.n	8008936 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d10b      	bne.n	8008974 <HAL_RCC_OscConfig+0x4e4>
 800895c:	4b03      	ldr	r3, [pc, #12]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 800895e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008960:	4a02      	ldr	r2, [pc, #8]	@ (800896c <HAL_RCC_OscConfig+0x4dc>)
 8008962:	f043 0301 	orr.w	r3, r3, #1
 8008966:	6713      	str	r3, [r2, #112]	@ 0x70
 8008968:	e05b      	b.n	8008a22 <HAL_RCC_OscConfig+0x592>
 800896a:	bf00      	nop
 800896c:	58024400 	.word	0x58024400
 8008970:	58024800 	.word	0x58024800
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d112      	bne.n	80089a2 <HAL_RCC_OscConfig+0x512>
 800897c:	4b9d      	ldr	r3, [pc, #628]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 800897e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008980:	4a9c      	ldr	r2, [pc, #624]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008982:	f023 0301 	bic.w	r3, r3, #1
 8008986:	6713      	str	r3, [r2, #112]	@ 0x70
 8008988:	4b9a      	ldr	r3, [pc, #616]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 800898a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800898c:	4a99      	ldr	r2, [pc, #612]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 800898e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008992:	6713      	str	r3, [r2, #112]	@ 0x70
 8008994:	4b97      	ldr	r3, [pc, #604]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008998:	4a96      	ldr	r2, [pc, #600]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 800899a:	f023 0304 	bic.w	r3, r3, #4
 800899e:	6713      	str	r3, [r2, #112]	@ 0x70
 80089a0:	e03f      	b.n	8008a22 <HAL_RCC_OscConfig+0x592>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	2b05      	cmp	r3, #5
 80089a8:	d112      	bne.n	80089d0 <HAL_RCC_OscConfig+0x540>
 80089aa:	4b92      	ldr	r3, [pc, #584]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 80089ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089ae:	4a91      	ldr	r2, [pc, #580]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 80089b0:	f043 0304 	orr.w	r3, r3, #4
 80089b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80089b6:	4b8f      	ldr	r3, [pc, #572]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 80089b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089ba:	4a8e      	ldr	r2, [pc, #568]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 80089bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80089c2:	4b8c      	ldr	r3, [pc, #560]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 80089c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089c6:	4a8b      	ldr	r2, [pc, #556]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 80089c8:	f043 0301 	orr.w	r3, r3, #1
 80089cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80089ce:	e028      	b.n	8008a22 <HAL_RCC_OscConfig+0x592>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	2b85      	cmp	r3, #133	@ 0x85
 80089d6:	d112      	bne.n	80089fe <HAL_RCC_OscConfig+0x56e>
 80089d8:	4b86      	ldr	r3, [pc, #536]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 80089da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089dc:	4a85      	ldr	r2, [pc, #532]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 80089de:	f043 0304 	orr.w	r3, r3, #4
 80089e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80089e4:	4b83      	ldr	r3, [pc, #524]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 80089e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089e8:	4a82      	ldr	r2, [pc, #520]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 80089ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80089f0:	4b80      	ldr	r3, [pc, #512]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 80089f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089f4:	4a7f      	ldr	r2, [pc, #508]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 80089f6:	f043 0301 	orr.w	r3, r3, #1
 80089fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80089fc:	e011      	b.n	8008a22 <HAL_RCC_OscConfig+0x592>
 80089fe:	4b7d      	ldr	r3, [pc, #500]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a02:	4a7c      	ldr	r2, [pc, #496]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008a04:	f023 0301 	bic.w	r3, r3, #1
 8008a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a0a:	4b7a      	ldr	r3, [pc, #488]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a0e:	4a79      	ldr	r2, [pc, #484]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008a10:	f023 0304 	bic.w	r3, r3, #4
 8008a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a16:	4b77      	ldr	r3, [pc, #476]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a1a:	4a76      	ldr	r2, [pc, #472]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008a1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a20:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d015      	beq.n	8008a56 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a2a:	f7fa fc9d 	bl	8003368 <HAL_GetTick>
 8008a2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a30:	e00a      	b.n	8008a48 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a32:	f7fa fc99 	bl	8003368 <HAL_GetTick>
 8008a36:	4602      	mov	r2, r0
 8008a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d901      	bls.n	8008a48 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e14c      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a48:	4b6a      	ldr	r3, [pc, #424]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a4c:	f003 0302 	and.w	r3, r3, #2
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d0ee      	beq.n	8008a32 <HAL_RCC_OscConfig+0x5a2>
 8008a54:	e014      	b.n	8008a80 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a56:	f7fa fc87 	bl	8003368 <HAL_GetTick>
 8008a5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a5c:	e00a      	b.n	8008a74 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a5e:	f7fa fc83 	bl	8003368 <HAL_GetTick>
 8008a62:	4602      	mov	r2, r0
 8008a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d901      	bls.n	8008a74 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e136      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a74:	4b5f      	ldr	r3, [pc, #380]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a78:	f003 0302 	and.w	r3, r3, #2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1ee      	bne.n	8008a5e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 812b 	beq.w	8008ce0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008a8a:	4b5a      	ldr	r3, [pc, #360]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a92:	2b18      	cmp	r3, #24
 8008a94:	f000 80bb 	beq.w	8008c0e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	f040 8095 	bne.w	8008bcc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008aa2:	4b54      	ldr	r3, [pc, #336]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a53      	ldr	r2, [pc, #332]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008aa8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aae:	f7fa fc5b 	bl	8003368 <HAL_GetTick>
 8008ab2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ab4:	e008      	b.n	8008ac8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ab6:	f7fa fc57 	bl	8003368 <HAL_GetTick>
 8008aba:	4602      	mov	r2, r0
 8008abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008abe:	1ad3      	subs	r3, r2, r3
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d901      	bls.n	8008ac8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e10c      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1f0      	bne.n	8008ab6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ad4:	4b47      	ldr	r3, [pc, #284]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008ad6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ad8:	4b47      	ldr	r3, [pc, #284]	@ (8008bf8 <HAL_RCC_OscConfig+0x768>)
 8008ada:	4013      	ands	r3, r2
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008ae4:	0112      	lsls	r2, r2, #4
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	4942      	ldr	r1, [pc, #264]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	628b      	str	r3, [r1, #40]	@ 0x28
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008af2:	3b01      	subs	r3, #1
 8008af4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008afc:	3b01      	subs	r3, #1
 8008afe:	025b      	lsls	r3, r3, #9
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	431a      	orrs	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	041b      	lsls	r3, r3, #16
 8008b0c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b10:	431a      	orrs	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b16:	3b01      	subs	r3, #1
 8008b18:	061b      	lsls	r3, r3, #24
 8008b1a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008b1e:	4935      	ldr	r1, [pc, #212]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008b24:	4b33      	ldr	r3, [pc, #204]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b28:	4a32      	ldr	r2, [pc, #200]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008b2a:	f023 0301 	bic.w	r3, r3, #1
 8008b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008b30:	4b30      	ldr	r3, [pc, #192]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008b32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b34:	4b31      	ldr	r3, [pc, #196]	@ (8008bfc <HAL_RCC_OscConfig+0x76c>)
 8008b36:	4013      	ands	r3, r2
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008b3c:	00d2      	lsls	r2, r2, #3
 8008b3e:	492d      	ldr	r1, [pc, #180]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008b40:	4313      	orrs	r3, r2
 8008b42:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008b44:	4b2b      	ldr	r3, [pc, #172]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b48:	f023 020c 	bic.w	r2, r3, #12
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b50:	4928      	ldr	r1, [pc, #160]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008b52:	4313      	orrs	r3, r2
 8008b54:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008b56:	4b27      	ldr	r3, [pc, #156]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b5a:	f023 0202 	bic.w	r2, r3, #2
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b62:	4924      	ldr	r1, [pc, #144]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008b64:	4313      	orrs	r3, r2
 8008b66:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008b68:	4b22      	ldr	r3, [pc, #136]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6c:	4a21      	ldr	r2, [pc, #132]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b74:	4b1f      	ldr	r3, [pc, #124]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b78:	4a1e      	ldr	r2, [pc, #120]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008b80:	4b1c      	ldr	r3, [pc, #112]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b84:	4a1b      	ldr	r2, [pc, #108]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008b86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008b8c:	4b19      	ldr	r3, [pc, #100]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b90:	4a18      	ldr	r2, [pc, #96]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008b92:	f043 0301 	orr.w	r3, r3, #1
 8008b96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b98:	4b16      	ldr	r3, [pc, #88]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a15      	ldr	r2, [pc, #84]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ba4:	f7fa fbe0 	bl	8003368 <HAL_GetTick>
 8008ba8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008baa:	e008      	b.n	8008bbe <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bac:	f7fa fbdc 	bl	8003368 <HAL_GetTick>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d901      	bls.n	8008bbe <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e091      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d0f0      	beq.n	8008bac <HAL_RCC_OscConfig+0x71c>
 8008bca:	e089      	b.n	8008ce0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bcc:	4b09      	ldr	r3, [pc, #36]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a08      	ldr	r2, [pc, #32]	@ (8008bf4 <HAL_RCC_OscConfig+0x764>)
 8008bd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bd8:	f7fa fbc6 	bl	8003368 <HAL_GetTick>
 8008bdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008bde:	e00f      	b.n	8008c00 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008be0:	f7fa fbc2 	bl	8003368 <HAL_GetTick>
 8008be4:	4602      	mov	r2, r0
 8008be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d908      	bls.n	8008c00 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e077      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
 8008bf2:	bf00      	nop
 8008bf4:	58024400 	.word	0x58024400
 8008bf8:	fffffc0c 	.word	0xfffffc0c
 8008bfc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c00:	4b3a      	ldr	r3, [pc, #232]	@ (8008cec <HAL_RCC_OscConfig+0x85c>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e9      	bne.n	8008be0 <HAL_RCC_OscConfig+0x750>
 8008c0c:	e068      	b.n	8008ce0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008c0e:	4b37      	ldr	r3, [pc, #220]	@ (8008cec <HAL_RCC_OscConfig+0x85c>)
 8008c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c12:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008c14:	4b35      	ldr	r3, [pc, #212]	@ (8008cec <HAL_RCC_OscConfig+0x85c>)
 8008c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c18:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d031      	beq.n	8008c86 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	f003 0203 	and.w	r2, r3, #3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d12a      	bne.n	8008c86 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	091b      	lsrs	r3, r3, #4
 8008c34:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d122      	bne.n	8008c86 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c4a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d11a      	bne.n	8008c86 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	0a5b      	lsrs	r3, r3, #9
 8008c54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c5c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d111      	bne.n	8008c86 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	0c1b      	lsrs	r3, r3, #16
 8008c66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d108      	bne.n	8008c86 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	0e1b      	lsrs	r3, r3, #24
 8008c78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c80:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d001      	beq.n	8008c8a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e02b      	b.n	8008ce2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008c8a:	4b18      	ldr	r3, [pc, #96]	@ (8008cec <HAL_RCC_OscConfig+0x85c>)
 8008c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c8e:	08db      	lsrs	r3, r3, #3
 8008c90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c94:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d01f      	beq.n	8008ce0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008ca0:	4b12      	ldr	r3, [pc, #72]	@ (8008cec <HAL_RCC_OscConfig+0x85c>)
 8008ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca4:	4a11      	ldr	r2, [pc, #68]	@ (8008cec <HAL_RCC_OscConfig+0x85c>)
 8008ca6:	f023 0301 	bic.w	r3, r3, #1
 8008caa:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008cac:	f7fa fb5c 	bl	8003368 <HAL_GetTick>
 8008cb0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008cb2:	bf00      	nop
 8008cb4:	f7fa fb58 	bl	8003368 <HAL_GetTick>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d0f9      	beq.n	8008cb4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8008cec <HAL_RCC_OscConfig+0x85c>)
 8008cc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8008cf0 <HAL_RCC_OscConfig+0x860>)
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008ccc:	00d2      	lsls	r2, r2, #3
 8008cce:	4907      	ldr	r1, [pc, #28]	@ (8008cec <HAL_RCC_OscConfig+0x85c>)
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008cd4:	4b05      	ldr	r3, [pc, #20]	@ (8008cec <HAL_RCC_OscConfig+0x85c>)
 8008cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd8:	4a04      	ldr	r2, [pc, #16]	@ (8008cec <HAL_RCC_OscConfig+0x85c>)
 8008cda:	f043 0301 	orr.w	r3, r3, #1
 8008cde:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3730      	adds	r7, #48	@ 0x30
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	58024400 	.word	0x58024400
 8008cf0:	ffff0007 	.word	0xffff0007

08008cf4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d101      	bne.n	8008d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e19c      	b.n	8009042 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d08:	4b8a      	ldr	r3, [pc, #552]	@ (8008f34 <HAL_RCC_ClockConfig+0x240>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 030f 	and.w	r3, r3, #15
 8008d10:	683a      	ldr	r2, [r7, #0]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d910      	bls.n	8008d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d16:	4b87      	ldr	r3, [pc, #540]	@ (8008f34 <HAL_RCC_ClockConfig+0x240>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f023 020f 	bic.w	r2, r3, #15
 8008d1e:	4985      	ldr	r1, [pc, #532]	@ (8008f34 <HAL_RCC_ClockConfig+0x240>)
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d26:	4b83      	ldr	r3, [pc, #524]	@ (8008f34 <HAL_RCC_ClockConfig+0x240>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 030f 	and.w	r3, r3, #15
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d001      	beq.n	8008d38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e184      	b.n	8009042 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 0304 	and.w	r3, r3, #4
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d010      	beq.n	8008d66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	691a      	ldr	r2, [r3, #16]
 8008d48:	4b7b      	ldr	r3, [pc, #492]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d908      	bls.n	8008d66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008d54:	4b78      	ldr	r3, [pc, #480]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	4975      	ldr	r1, [pc, #468]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008d62:	4313      	orrs	r3, r2
 8008d64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 0308 	and.w	r3, r3, #8
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d010      	beq.n	8008d94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	695a      	ldr	r2, [r3, #20]
 8008d76:	4b70      	ldr	r3, [pc, #448]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008d78:	69db      	ldr	r3, [r3, #28]
 8008d7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d908      	bls.n	8008d94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008d82:	4b6d      	ldr	r3, [pc, #436]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	496a      	ldr	r1, [pc, #424]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008d90:	4313      	orrs	r3, r2
 8008d92:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0310 	and.w	r3, r3, #16
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d010      	beq.n	8008dc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	699a      	ldr	r2, [r3, #24]
 8008da4:	4b64      	ldr	r3, [pc, #400]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008da6:	69db      	ldr	r3, [r3, #28]
 8008da8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d908      	bls.n	8008dc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008db0:	4b61      	ldr	r3, [pc, #388]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	495e      	ldr	r1, [pc, #376]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0320 	and.w	r3, r3, #32
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d010      	beq.n	8008df0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	69da      	ldr	r2, [r3, #28]
 8008dd2:	4b59      	ldr	r3, [pc, #356]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d908      	bls.n	8008df0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008dde:	4b56      	ldr	r3, [pc, #344]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	4953      	ldr	r1, [pc, #332]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008dec:	4313      	orrs	r3, r2
 8008dee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 0302 	and.w	r3, r3, #2
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d010      	beq.n	8008e1e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	68da      	ldr	r2, [r3, #12]
 8008e00:	4b4d      	ldr	r3, [pc, #308]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	f003 030f 	and.w	r3, r3, #15
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d908      	bls.n	8008e1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e0c:	4b4a      	ldr	r3, [pc, #296]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	f023 020f 	bic.w	r2, r3, #15
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	4947      	ldr	r1, [pc, #284]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d055      	beq.n	8008ed6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008e2a:	4b43      	ldr	r3, [pc, #268]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008e2c:	699b      	ldr	r3, [r3, #24]
 8008e2e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	4940      	ldr	r1, [pc, #256]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d107      	bne.n	8008e54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e44:	4b3c      	ldr	r3, [pc, #240]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d121      	bne.n	8008e94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e0f6      	b.n	8009042 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d107      	bne.n	8008e6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e5c:	4b36      	ldr	r3, [pc, #216]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d115      	bne.n	8008e94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e0ea      	b.n	8009042 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d107      	bne.n	8008e84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e74:	4b30      	ldr	r3, [pc, #192]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d109      	bne.n	8008e94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e0de      	b.n	8009042 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e84:	4b2c      	ldr	r3, [pc, #176]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 0304 	and.w	r3, r3, #4
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d101      	bne.n	8008e94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e0d6      	b.n	8009042 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008e94:	4b28      	ldr	r3, [pc, #160]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	f023 0207 	bic.w	r2, r3, #7
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	4925      	ldr	r1, [pc, #148]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ea6:	f7fa fa5f 	bl	8003368 <HAL_GetTick>
 8008eaa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008eac:	e00a      	b.n	8008ec4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008eae:	f7fa fa5b 	bl	8003368 <HAL_GetTick>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d901      	bls.n	8008ec4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e0be      	b.n	8009042 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	00db      	lsls	r3, r3, #3
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d1eb      	bne.n	8008eae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0302 	and.w	r3, r3, #2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d010      	beq.n	8008f04 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68da      	ldr	r2, [r3, #12]
 8008ee6:	4b14      	ldr	r3, [pc, #80]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	f003 030f 	and.w	r3, r3, #15
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d208      	bcs.n	8008f04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ef2:	4b11      	ldr	r3, [pc, #68]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	f023 020f 	bic.w	r2, r3, #15
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	490e      	ldr	r1, [pc, #56]	@ (8008f38 <HAL_RCC_ClockConfig+0x244>)
 8008f00:	4313      	orrs	r3, r2
 8008f02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f04:	4b0b      	ldr	r3, [pc, #44]	@ (8008f34 <HAL_RCC_ClockConfig+0x240>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 030f 	and.w	r3, r3, #15
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d214      	bcs.n	8008f3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f12:	4b08      	ldr	r3, [pc, #32]	@ (8008f34 <HAL_RCC_ClockConfig+0x240>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f023 020f 	bic.w	r2, r3, #15
 8008f1a:	4906      	ldr	r1, [pc, #24]	@ (8008f34 <HAL_RCC_ClockConfig+0x240>)
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f22:	4b04      	ldr	r3, [pc, #16]	@ (8008f34 <HAL_RCC_ClockConfig+0x240>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 030f 	and.w	r3, r3, #15
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d005      	beq.n	8008f3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	e086      	b.n	8009042 <HAL_RCC_ClockConfig+0x34e>
 8008f34:	52002000 	.word	0x52002000
 8008f38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 0304 	and.w	r3, r3, #4
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d010      	beq.n	8008f6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	691a      	ldr	r2, [r3, #16]
 8008f4c:	4b3f      	ldr	r3, [pc, #252]	@ (800904c <HAL_RCC_ClockConfig+0x358>)
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d208      	bcs.n	8008f6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f58:	4b3c      	ldr	r3, [pc, #240]	@ (800904c <HAL_RCC_ClockConfig+0x358>)
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	4939      	ldr	r1, [pc, #228]	@ (800904c <HAL_RCC_ClockConfig+0x358>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0308 	and.w	r3, r3, #8
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d010      	beq.n	8008f98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	695a      	ldr	r2, [r3, #20]
 8008f7a:	4b34      	ldr	r3, [pc, #208]	@ (800904c <HAL_RCC_ClockConfig+0x358>)
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d208      	bcs.n	8008f98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f86:	4b31      	ldr	r3, [pc, #196]	@ (800904c <HAL_RCC_ClockConfig+0x358>)
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	492e      	ldr	r1, [pc, #184]	@ (800904c <HAL_RCC_ClockConfig+0x358>)
 8008f94:	4313      	orrs	r3, r2
 8008f96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0310 	and.w	r3, r3, #16
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d010      	beq.n	8008fc6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	699a      	ldr	r2, [r3, #24]
 8008fa8:	4b28      	ldr	r3, [pc, #160]	@ (800904c <HAL_RCC_ClockConfig+0x358>)
 8008faa:	69db      	ldr	r3, [r3, #28]
 8008fac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d208      	bcs.n	8008fc6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008fb4:	4b25      	ldr	r3, [pc, #148]	@ (800904c <HAL_RCC_ClockConfig+0x358>)
 8008fb6:	69db      	ldr	r3, [r3, #28]
 8008fb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	4922      	ldr	r1, [pc, #136]	@ (800904c <HAL_RCC_ClockConfig+0x358>)
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 0320 	and.w	r3, r3, #32
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d010      	beq.n	8008ff4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	69da      	ldr	r2, [r3, #28]
 8008fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800904c <HAL_RCC_ClockConfig+0x358>)
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d208      	bcs.n	8008ff4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800904c <HAL_RCC_ClockConfig+0x358>)
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	69db      	ldr	r3, [r3, #28]
 8008fee:	4917      	ldr	r1, [pc, #92]	@ (800904c <HAL_RCC_ClockConfig+0x358>)
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8008ff4:	f000 f834 	bl	8009060 <HAL_RCC_GetSysClockFreq>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	4b14      	ldr	r3, [pc, #80]	@ (800904c <HAL_RCC_ClockConfig+0x358>)
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	0a1b      	lsrs	r3, r3, #8
 8009000:	f003 030f 	and.w	r3, r3, #15
 8009004:	4912      	ldr	r1, [pc, #72]	@ (8009050 <HAL_RCC_ClockConfig+0x35c>)
 8009006:	5ccb      	ldrb	r3, [r1, r3]
 8009008:	f003 031f 	and.w	r3, r3, #31
 800900c:	fa22 f303 	lsr.w	r3, r2, r3
 8009010:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009012:	4b0e      	ldr	r3, [pc, #56]	@ (800904c <HAL_RCC_ClockConfig+0x358>)
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	f003 030f 	and.w	r3, r3, #15
 800901a:	4a0d      	ldr	r2, [pc, #52]	@ (8009050 <HAL_RCC_ClockConfig+0x35c>)
 800901c:	5cd3      	ldrb	r3, [r2, r3]
 800901e:	f003 031f 	and.w	r3, r3, #31
 8009022:	693a      	ldr	r2, [r7, #16]
 8009024:	fa22 f303 	lsr.w	r3, r2, r3
 8009028:	4a0a      	ldr	r2, [pc, #40]	@ (8009054 <HAL_RCC_ClockConfig+0x360>)
 800902a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800902c:	4a0a      	ldr	r2, [pc, #40]	@ (8009058 <HAL_RCC_ClockConfig+0x364>)
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009032:	4b0a      	ldr	r3, [pc, #40]	@ (800905c <HAL_RCC_ClockConfig+0x368>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4618      	mov	r0, r3
 8009038:	f7fa f94c 	bl	80032d4 <HAL_InitTick>
 800903c:	4603      	mov	r3, r0
 800903e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009040:	7bfb      	ldrb	r3, [r7, #15]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3718      	adds	r7, #24
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	58024400 	.word	0x58024400
 8009050:	080128c4 	.word	0x080128c4
 8009054:	2400000c 	.word	0x2400000c
 8009058:	24000008 	.word	0x24000008
 800905c:	24000010 	.word	0x24000010

08009060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009060:	b480      	push	{r7}
 8009062:	b089      	sub	sp, #36	@ 0x24
 8009064:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009066:	4bb3      	ldr	r3, [pc, #716]	@ (8009334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800906e:	2b18      	cmp	r3, #24
 8009070:	f200 8155 	bhi.w	800931e <HAL_RCC_GetSysClockFreq+0x2be>
 8009074:	a201      	add	r2, pc, #4	@ (adr r2, 800907c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907a:	bf00      	nop
 800907c:	080090e1 	.word	0x080090e1
 8009080:	0800931f 	.word	0x0800931f
 8009084:	0800931f 	.word	0x0800931f
 8009088:	0800931f 	.word	0x0800931f
 800908c:	0800931f 	.word	0x0800931f
 8009090:	0800931f 	.word	0x0800931f
 8009094:	0800931f 	.word	0x0800931f
 8009098:	0800931f 	.word	0x0800931f
 800909c:	08009107 	.word	0x08009107
 80090a0:	0800931f 	.word	0x0800931f
 80090a4:	0800931f 	.word	0x0800931f
 80090a8:	0800931f 	.word	0x0800931f
 80090ac:	0800931f 	.word	0x0800931f
 80090b0:	0800931f 	.word	0x0800931f
 80090b4:	0800931f 	.word	0x0800931f
 80090b8:	0800931f 	.word	0x0800931f
 80090bc:	0800910d 	.word	0x0800910d
 80090c0:	0800931f 	.word	0x0800931f
 80090c4:	0800931f 	.word	0x0800931f
 80090c8:	0800931f 	.word	0x0800931f
 80090cc:	0800931f 	.word	0x0800931f
 80090d0:	0800931f 	.word	0x0800931f
 80090d4:	0800931f 	.word	0x0800931f
 80090d8:	0800931f 	.word	0x0800931f
 80090dc:	08009113 	.word	0x08009113
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090e0:	4b94      	ldr	r3, [pc, #592]	@ (8009334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 0320 	and.w	r3, r3, #32
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d009      	beq.n	8009100 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090ec:	4b91      	ldr	r3, [pc, #580]	@ (8009334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	08db      	lsrs	r3, r3, #3
 80090f2:	f003 0303 	and.w	r3, r3, #3
 80090f6:	4a90      	ldr	r2, [pc, #576]	@ (8009338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80090f8:	fa22 f303 	lsr.w	r3, r2, r3
 80090fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80090fe:	e111      	b.n	8009324 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009100:	4b8d      	ldr	r3, [pc, #564]	@ (8009338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009102:	61bb      	str	r3, [r7, #24]
      break;
 8009104:	e10e      	b.n	8009324 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009106:	4b8d      	ldr	r3, [pc, #564]	@ (800933c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009108:	61bb      	str	r3, [r7, #24]
      break;
 800910a:	e10b      	b.n	8009324 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800910c:	4b8c      	ldr	r3, [pc, #560]	@ (8009340 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800910e:	61bb      	str	r3, [r7, #24]
      break;
 8009110:	e108      	b.n	8009324 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009112:	4b88      	ldr	r3, [pc, #544]	@ (8009334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009116:	f003 0303 	and.w	r3, r3, #3
 800911a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800911c:	4b85      	ldr	r3, [pc, #532]	@ (8009334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800911e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009120:	091b      	lsrs	r3, r3, #4
 8009122:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009126:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009128:	4b82      	ldr	r3, [pc, #520]	@ (8009334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800912a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800912c:	f003 0301 	and.w	r3, r3, #1
 8009130:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009132:	4b80      	ldr	r3, [pc, #512]	@ (8009334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009136:	08db      	lsrs	r3, r3, #3
 8009138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	fb02 f303 	mul.w	r3, r2, r3
 8009142:	ee07 3a90 	vmov	s15, r3
 8009146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800914a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 80e1 	beq.w	8009318 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2b02      	cmp	r3, #2
 800915a:	f000 8083 	beq.w	8009264 <HAL_RCC_GetSysClockFreq+0x204>
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	2b02      	cmp	r3, #2
 8009162:	f200 80a1 	bhi.w	80092a8 <HAL_RCC_GetSysClockFreq+0x248>
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d003      	beq.n	8009174 <HAL_RCC_GetSysClockFreq+0x114>
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d056      	beq.n	8009220 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009172:	e099      	b.n	80092a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009174:	4b6f      	ldr	r3, [pc, #444]	@ (8009334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0320 	and.w	r3, r3, #32
 800917c:	2b00      	cmp	r3, #0
 800917e:	d02d      	beq.n	80091dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009180:	4b6c      	ldr	r3, [pc, #432]	@ (8009334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	08db      	lsrs	r3, r3, #3
 8009186:	f003 0303 	and.w	r3, r3, #3
 800918a:	4a6b      	ldr	r2, [pc, #428]	@ (8009338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800918c:	fa22 f303 	lsr.w	r3, r2, r3
 8009190:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	ee07 3a90 	vmov	s15, r3
 8009198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	ee07 3a90 	vmov	s15, r3
 80091a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091aa:	4b62      	ldr	r3, [pc, #392]	@ (8009334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091b2:	ee07 3a90 	vmov	s15, r3
 80091b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80091be:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009344 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80091da:	e087      	b.n	80092ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	ee07 3a90 	vmov	s15, r3
 80091e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009348 <HAL_RCC_GetSysClockFreq+0x2e8>
 80091ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ee:	4b51      	ldr	r3, [pc, #324]	@ (8009334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091f6:	ee07 3a90 	vmov	s15, r3
 80091fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009202:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009344 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800920a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800920e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800921a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800921e:	e065      	b.n	80092ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	ee07 3a90 	vmov	s15, r3
 8009226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800934c <HAL_RCC_GetSysClockFreq+0x2ec>
 800922e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009232:	4b40      	ldr	r3, [pc, #256]	@ (8009334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800923a:	ee07 3a90 	vmov	s15, r3
 800923e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009242:	ed97 6a02 	vldr	s12, [r7, #8]
 8009246:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009344 <HAL_RCC_GetSysClockFreq+0x2e4>
 800924a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800924e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800925a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800925e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009262:	e043      	b.n	80092ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	ee07 3a90 	vmov	s15, r3
 800926a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800926e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009350 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009276:	4b2f      	ldr	r3, [pc, #188]	@ (8009334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800927a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800927e:	ee07 3a90 	vmov	s15, r3
 8009282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009286:	ed97 6a02 	vldr	s12, [r7, #8]
 800928a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009344 <HAL_RCC_GetSysClockFreq+0x2e4>
 800928e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800929a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800929e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80092a6:	e021      	b.n	80092ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	ee07 3a90 	vmov	s15, r3
 80092ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800934c <HAL_RCC_GetSysClockFreq+0x2ec>
 80092b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ba:	4b1e      	ldr	r3, [pc, #120]	@ (8009334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092c2:	ee07 3a90 	vmov	s15, r3
 80092c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80092ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009344 <HAL_RCC_GetSysClockFreq+0x2e4>
 80092d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80092ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80092ec:	4b11      	ldr	r3, [pc, #68]	@ (8009334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f0:	0a5b      	lsrs	r3, r3, #9
 80092f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092f6:	3301      	adds	r3, #1
 80092f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	ee07 3a90 	vmov	s15, r3
 8009300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009304:	edd7 6a07 	vldr	s13, [r7, #28]
 8009308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800930c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009310:	ee17 3a90 	vmov	r3, s15
 8009314:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009316:	e005      	b.n	8009324 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009318:	2300      	movs	r3, #0
 800931a:	61bb      	str	r3, [r7, #24]
      break;
 800931c:	e002      	b.n	8009324 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800931e:	4b07      	ldr	r3, [pc, #28]	@ (800933c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009320:	61bb      	str	r3, [r7, #24]
      break;
 8009322:	bf00      	nop
  }

  return sysclockfreq;
 8009324:	69bb      	ldr	r3, [r7, #24]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3724      	adds	r7, #36	@ 0x24
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	58024400 	.word	0x58024400
 8009338:	03d09000 	.word	0x03d09000
 800933c:	003d0900 	.word	0x003d0900
 8009340:	017d7840 	.word	0x017d7840
 8009344:	46000000 	.word	0x46000000
 8009348:	4c742400 	.word	0x4c742400
 800934c:	4a742400 	.word	0x4a742400
 8009350:	4bbebc20 	.word	0x4bbebc20

08009354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800935a:	f7ff fe81 	bl	8009060 <HAL_RCC_GetSysClockFreq>
 800935e:	4602      	mov	r2, r0
 8009360:	4b10      	ldr	r3, [pc, #64]	@ (80093a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	0a1b      	lsrs	r3, r3, #8
 8009366:	f003 030f 	and.w	r3, r3, #15
 800936a:	490f      	ldr	r1, [pc, #60]	@ (80093a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800936c:	5ccb      	ldrb	r3, [r1, r3]
 800936e:	f003 031f 	and.w	r3, r3, #31
 8009372:	fa22 f303 	lsr.w	r3, r2, r3
 8009376:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009378:	4b0a      	ldr	r3, [pc, #40]	@ (80093a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	f003 030f 	and.w	r3, r3, #15
 8009380:	4a09      	ldr	r2, [pc, #36]	@ (80093a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009382:	5cd3      	ldrb	r3, [r2, r3]
 8009384:	f003 031f 	and.w	r3, r3, #31
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	fa22 f303 	lsr.w	r3, r2, r3
 800938e:	4a07      	ldr	r2, [pc, #28]	@ (80093ac <HAL_RCC_GetHCLKFreq+0x58>)
 8009390:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009392:	4a07      	ldr	r2, [pc, #28]	@ (80093b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009398:	4b04      	ldr	r3, [pc, #16]	@ (80093ac <HAL_RCC_GetHCLKFreq+0x58>)
 800939a:	681b      	ldr	r3, [r3, #0]
}
 800939c:	4618      	mov	r0, r3
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	58024400 	.word	0x58024400
 80093a8:	080128c4 	.word	0x080128c4
 80093ac:	2400000c 	.word	0x2400000c
 80093b0:	24000008 	.word	0x24000008

080093b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80093b8:	f7ff ffcc 	bl	8009354 <HAL_RCC_GetHCLKFreq>
 80093bc:	4602      	mov	r2, r0
 80093be:	4b06      	ldr	r3, [pc, #24]	@ (80093d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80093c0:	69db      	ldr	r3, [r3, #28]
 80093c2:	091b      	lsrs	r3, r3, #4
 80093c4:	f003 0307 	and.w	r3, r3, #7
 80093c8:	4904      	ldr	r1, [pc, #16]	@ (80093dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80093ca:	5ccb      	ldrb	r3, [r1, r3]
 80093cc:	f003 031f 	and.w	r3, r3, #31
 80093d0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	58024400 	.word	0x58024400
 80093dc:	080128c4 	.word	0x080128c4

080093e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093e4:	b0c8      	sub	sp, #288	@ 0x120
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80093ec:	2300      	movs	r3, #0
 80093ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80093f2:	2300      	movs	r3, #0
 80093f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80093f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009400:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009404:	2500      	movs	r5, #0
 8009406:	ea54 0305 	orrs.w	r3, r4, r5
 800940a:	d049      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800940c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009412:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009416:	d02f      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009418:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800941c:	d828      	bhi.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800941e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009422:	d01a      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009424:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009428:	d822      	bhi.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800942a:	2b00      	cmp	r3, #0
 800942c:	d003      	beq.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800942e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009432:	d007      	beq.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009434:	e01c      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009436:	4ba7      	ldr	r3, [pc, #668]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943a:	4aa6      	ldr	r2, [pc, #664]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800943c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009440:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009442:	e01a      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009448:	3308      	adds	r3, #8
 800944a:	2102      	movs	r1, #2
 800944c:	4618      	mov	r0, r3
 800944e:	f002 fa6d 	bl	800b92c <RCCEx_PLL2_Config>
 8009452:	4603      	mov	r3, r0
 8009454:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009458:	e00f      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800945a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800945e:	3328      	adds	r3, #40	@ 0x28
 8009460:	2102      	movs	r1, #2
 8009462:	4618      	mov	r0, r3
 8009464:	f002 fb14 	bl	800ba90 <RCCEx_PLL3_Config>
 8009468:	4603      	mov	r3, r0
 800946a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800946e:	e004      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009476:	e000      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800947a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10a      	bne.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009482:	4b94      	ldr	r3, [pc, #592]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009486:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800948a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800948e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009490:	4a90      	ldr	r2, [pc, #576]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009492:	430b      	orrs	r3, r1
 8009494:	6513      	str	r3, [r2, #80]	@ 0x50
 8009496:	e003      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009498:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800949c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80094a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80094ac:	f04f 0900 	mov.w	r9, #0
 80094b0:	ea58 0309 	orrs.w	r3, r8, r9
 80094b4:	d047      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80094b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094bc:	2b04      	cmp	r3, #4
 80094be:	d82a      	bhi.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80094c0:	a201      	add	r2, pc, #4	@ (adr r2, 80094c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80094c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c6:	bf00      	nop
 80094c8:	080094dd 	.word	0x080094dd
 80094cc:	080094eb 	.word	0x080094eb
 80094d0:	08009501 	.word	0x08009501
 80094d4:	0800951f 	.word	0x0800951f
 80094d8:	0800951f 	.word	0x0800951f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094dc:	4b7d      	ldr	r3, [pc, #500]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e0:	4a7c      	ldr	r2, [pc, #496]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094e8:	e01a      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094ee:	3308      	adds	r3, #8
 80094f0:	2100      	movs	r1, #0
 80094f2:	4618      	mov	r0, r3
 80094f4:	f002 fa1a 	bl	800b92c <RCCEx_PLL2_Config>
 80094f8:	4603      	mov	r3, r0
 80094fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094fe:	e00f      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009504:	3328      	adds	r3, #40	@ 0x28
 8009506:	2100      	movs	r1, #0
 8009508:	4618      	mov	r0, r3
 800950a:	f002 fac1 	bl	800ba90 <RCCEx_PLL3_Config>
 800950e:	4603      	mov	r3, r0
 8009510:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009514:	e004      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800951c:	e000      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800951e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009520:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10a      	bne.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009528:	4b6a      	ldr	r3, [pc, #424]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800952a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800952c:	f023 0107 	bic.w	r1, r3, #7
 8009530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009536:	4a67      	ldr	r2, [pc, #412]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009538:	430b      	orrs	r3, r1
 800953a:	6513      	str	r3, [r2, #80]	@ 0x50
 800953c:	e003      	b.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800953e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009542:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8009546:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009552:	f04f 0b00 	mov.w	fp, #0
 8009556:	ea5a 030b 	orrs.w	r3, sl, fp
 800955a:	d054      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800955c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009562:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8009566:	d036      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8009568:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800956c:	d82f      	bhi.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800956e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009572:	d032      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009574:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009578:	d829      	bhi.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800957a:	2bc0      	cmp	r3, #192	@ 0xc0
 800957c:	d02f      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800957e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009580:	d825      	bhi.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009582:	2b80      	cmp	r3, #128	@ 0x80
 8009584:	d018      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8009586:	2b80      	cmp	r3, #128	@ 0x80
 8009588:	d821      	bhi.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800958a:	2b00      	cmp	r3, #0
 800958c:	d002      	beq.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800958e:	2b40      	cmp	r3, #64	@ 0x40
 8009590:	d007      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8009592:	e01c      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009594:	4b4f      	ldr	r3, [pc, #316]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009598:	4a4e      	ldr	r2, [pc, #312]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800959a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800959e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80095a0:	e01e      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095a6:	3308      	adds	r3, #8
 80095a8:	2100      	movs	r1, #0
 80095aa:	4618      	mov	r0, r3
 80095ac:	f002 f9be 	bl	800b92c <RCCEx_PLL2_Config>
 80095b0:	4603      	mov	r3, r0
 80095b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80095b6:	e013      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095bc:	3328      	adds	r3, #40	@ 0x28
 80095be:	2100      	movs	r1, #0
 80095c0:	4618      	mov	r0, r3
 80095c2:	f002 fa65 	bl	800ba90 <RCCEx_PLL3_Config>
 80095c6:	4603      	mov	r3, r0
 80095c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80095cc:	e008      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80095d4:	e004      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80095d6:	bf00      	nop
 80095d8:	e002      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80095da:	bf00      	nop
 80095dc:	e000      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80095de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10a      	bne.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80095e8:	4b3a      	ldr	r3, [pc, #232]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095ec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80095f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095f6:	4a37      	ldr	r2, [pc, #220]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095f8:	430b      	orrs	r3, r1
 80095fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80095fc:	e003      	b.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009602:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8009606:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800960a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009612:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009616:	2300      	movs	r3, #0
 8009618:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800961c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009620:	460b      	mov	r3, r1
 8009622:	4313      	orrs	r3, r2
 8009624:	d05c      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8009626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800962a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800962c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009630:	d03b      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009632:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009636:	d834      	bhi.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009638:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800963c:	d037      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800963e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009642:	d82e      	bhi.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009644:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009648:	d033      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800964a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800964e:	d828      	bhi.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009654:	d01a      	beq.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8009656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800965a:	d822      	bhi.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800965c:	2b00      	cmp	r3, #0
 800965e:	d003      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8009660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009664:	d007      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8009666:	e01c      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009668:	4b1a      	ldr	r3, [pc, #104]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800966a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966c:	4a19      	ldr	r2, [pc, #100]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800966e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009672:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8009674:	e01e      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800967a:	3308      	adds	r3, #8
 800967c:	2100      	movs	r1, #0
 800967e:	4618      	mov	r0, r3
 8009680:	f002 f954 	bl	800b92c <RCCEx_PLL2_Config>
 8009684:	4603      	mov	r3, r0
 8009686:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800968a:	e013      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800968c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009690:	3328      	adds	r3, #40	@ 0x28
 8009692:	2100      	movs	r1, #0
 8009694:	4618      	mov	r0, r3
 8009696:	f002 f9fb 	bl	800ba90 <RCCEx_PLL3_Config>
 800969a:	4603      	mov	r3, r0
 800969c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80096a0:	e008      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80096a8:	e004      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80096aa:	bf00      	nop
 80096ac:	e002      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80096ae:	bf00      	nop
 80096b0:	e000      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80096b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10d      	bne.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80096bc:	4b05      	ldr	r3, [pc, #20]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80096be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096c0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80096c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096ca:	4a02      	ldr	r2, [pc, #8]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80096cc:	430b      	orrs	r3, r1
 80096ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80096d0:	e006      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80096d2:	bf00      	nop
 80096d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80096e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80096ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80096f0:	2300      	movs	r3, #0
 80096f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80096f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80096fa:	460b      	mov	r3, r1
 80096fc:	4313      	orrs	r3, r2
 80096fe:	d03a      	beq.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009700:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009706:	2b30      	cmp	r3, #48	@ 0x30
 8009708:	d01f      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800970a:	2b30      	cmp	r3, #48	@ 0x30
 800970c:	d819      	bhi.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800970e:	2b20      	cmp	r3, #32
 8009710:	d00c      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009712:	2b20      	cmp	r3, #32
 8009714:	d815      	bhi.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8009716:	2b00      	cmp	r3, #0
 8009718:	d019      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800971a:	2b10      	cmp	r3, #16
 800971c:	d111      	bne.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800971e:	4bae      	ldr	r3, [pc, #696]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009722:	4aad      	ldr	r2, [pc, #692]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009728:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800972a:	e011      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800972c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009730:	3308      	adds	r3, #8
 8009732:	2102      	movs	r1, #2
 8009734:	4618      	mov	r0, r3
 8009736:	f002 f8f9 	bl	800b92c <RCCEx_PLL2_Config>
 800973a:	4603      	mov	r3, r0
 800973c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009740:	e006      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009748:	e002      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800974a:	bf00      	nop
 800974c:	e000      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800974e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009750:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10a      	bne.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009758:	4b9f      	ldr	r3, [pc, #636]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800975a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800975c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009760:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009766:	4a9c      	ldr	r2, [pc, #624]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009768:	430b      	orrs	r3, r1
 800976a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800976c:	e003      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800976e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009772:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009776:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800977a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009782:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009786:	2300      	movs	r3, #0
 8009788:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800978c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009790:	460b      	mov	r3, r1
 8009792:	4313      	orrs	r3, r2
 8009794:	d051      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009796:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800979a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800979c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097a0:	d035      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80097a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097a6:	d82e      	bhi.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80097a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80097ac:	d031      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80097ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80097b2:	d828      	bhi.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80097b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097b8:	d01a      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80097ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097be:	d822      	bhi.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d003      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80097c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097c8:	d007      	beq.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80097ca:	e01c      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097cc:	4b82      	ldr	r3, [pc, #520]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d0:	4a81      	ldr	r2, [pc, #516]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097d8:	e01c      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097de:	3308      	adds	r3, #8
 80097e0:	2100      	movs	r1, #0
 80097e2:	4618      	mov	r0, r3
 80097e4:	f002 f8a2 	bl	800b92c <RCCEx_PLL2_Config>
 80097e8:	4603      	mov	r3, r0
 80097ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097ee:	e011      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097f4:	3328      	adds	r3, #40	@ 0x28
 80097f6:	2100      	movs	r1, #0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f002 f949 	bl	800ba90 <RCCEx_PLL3_Config>
 80097fe:	4603      	mov	r3, r0
 8009800:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009804:	e006      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800980c:	e002      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800980e:	bf00      	nop
 8009810:	e000      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8009812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009814:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10a      	bne.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800981c:	4b6e      	ldr	r3, [pc, #440]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800981e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009820:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009828:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800982a:	4a6b      	ldr	r2, [pc, #428]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800982c:	430b      	orrs	r3, r1
 800982e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009830:	e003      	b.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009832:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009836:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800983a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800983e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009842:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009846:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800984a:	2300      	movs	r3, #0
 800984c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009850:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009854:	460b      	mov	r3, r1
 8009856:	4313      	orrs	r3, r2
 8009858:	d053      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800985a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800985e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009860:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009864:	d033      	beq.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8009866:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800986a:	d82c      	bhi.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800986c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009870:	d02f      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8009872:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009876:	d826      	bhi.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009878:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800987c:	d02b      	beq.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800987e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009882:	d820      	bhi.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009884:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009888:	d012      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800988a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800988e:	d81a      	bhi.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009890:	2b00      	cmp	r3, #0
 8009892:	d022      	beq.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8009894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009898:	d115      	bne.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800989a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800989e:	3308      	adds	r3, #8
 80098a0:	2101      	movs	r1, #1
 80098a2:	4618      	mov	r0, r3
 80098a4:	f002 f842 	bl	800b92c <RCCEx_PLL2_Config>
 80098a8:	4603      	mov	r3, r0
 80098aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80098ae:	e015      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098b4:	3328      	adds	r3, #40	@ 0x28
 80098b6:	2101      	movs	r1, #1
 80098b8:	4618      	mov	r0, r3
 80098ba:	f002 f8e9 	bl	800ba90 <RCCEx_PLL3_Config>
 80098be:	4603      	mov	r3, r0
 80098c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80098c4:	e00a      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80098cc:	e006      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80098ce:	bf00      	nop
 80098d0:	e004      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80098d2:	bf00      	nop
 80098d4:	e002      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80098d6:	bf00      	nop
 80098d8:	e000      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80098da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d10a      	bne.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80098e4:	4b3c      	ldr	r3, [pc, #240]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098e8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80098ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098f2:	4a39      	ldr	r2, [pc, #228]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098f4:	430b      	orrs	r3, r1
 80098f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80098f8:	e003      	b.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80098fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009902:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800990e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009912:	2300      	movs	r3, #0
 8009914:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009918:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800991c:	460b      	mov	r3, r1
 800991e:	4313      	orrs	r3, r2
 8009920:	d060      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009922:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009926:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800992a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800992e:	d039      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8009930:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009934:	d832      	bhi.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009936:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800993a:	d035      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800993c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009940:	d82c      	bhi.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009946:	d031      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800994c:	d826      	bhi.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800994e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009952:	d02d      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009954:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009958:	d820      	bhi.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800995a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800995e:	d012      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009960:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009964:	d81a      	bhi.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009966:	2b00      	cmp	r3, #0
 8009968:	d024      	beq.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800996a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800996e:	d115      	bne.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009970:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009974:	3308      	adds	r3, #8
 8009976:	2101      	movs	r1, #1
 8009978:	4618      	mov	r0, r3
 800997a:	f001 ffd7 	bl	800b92c <RCCEx_PLL2_Config>
 800997e:	4603      	mov	r3, r0
 8009980:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009984:	e017      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800998a:	3328      	adds	r3, #40	@ 0x28
 800998c:	2101      	movs	r1, #1
 800998e:	4618      	mov	r0, r3
 8009990:	f002 f87e 	bl	800ba90 <RCCEx_PLL3_Config>
 8009994:	4603      	mov	r3, r0
 8009996:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800999a:	e00c      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80099a2:	e008      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80099a4:	bf00      	nop
 80099a6:	e006      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80099a8:	bf00      	nop
 80099aa:	e004      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80099ac:	bf00      	nop
 80099ae:	e002      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80099b0:	bf00      	nop
 80099b2:	e000      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80099b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10e      	bne.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80099be:	4b06      	ldr	r3, [pc, #24]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80099c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80099ce:	4a02      	ldr	r2, [pc, #8]	@ (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099d0:	430b      	orrs	r3, r1
 80099d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80099d4:	e006      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80099d6:	bf00      	nop
 80099d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80099e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80099e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80099f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80099f4:	2300      	movs	r3, #0
 80099f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80099fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80099fe:	460b      	mov	r3, r1
 8009a00:	4313      	orrs	r3, r2
 8009a02:	d037      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a0e:	d00e      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009a10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a14:	d816      	bhi.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d018      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009a1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a1e:	d111      	bne.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a20:	4bc4      	ldr	r3, [pc, #784]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a24:	4ac3      	ldr	r2, [pc, #780]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009a2c:	e00f      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a32:	3308      	adds	r3, #8
 8009a34:	2101      	movs	r1, #1
 8009a36:	4618      	mov	r0, r3
 8009a38:	f001 ff78 	bl	800b92c <RCCEx_PLL2_Config>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009a42:	e004      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009a4a:	e000      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a4e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10a      	bne.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009a56:	4bb7      	ldr	r3, [pc, #732]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a5a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a64:	4ab3      	ldr	r2, [pc, #716]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a66:	430b      	orrs	r3, r1
 8009a68:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a6a:	e003      	b.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a70:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009a80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a84:	2300      	movs	r3, #0
 8009a86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009a8a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	4313      	orrs	r3, r2
 8009a92:	d039      	beq.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a9a:	2b03      	cmp	r3, #3
 8009a9c:	d81c      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa4:	08009ae1 	.word	0x08009ae1
 8009aa8:	08009ab5 	.word	0x08009ab5
 8009aac:	08009ac3 	.word	0x08009ac3
 8009ab0:	08009ae1 	.word	0x08009ae1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ab4:	4b9f      	ldr	r3, [pc, #636]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab8:	4a9e      	ldr	r2, [pc, #632]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009aba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009abe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009ac0:	e00f      	b.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ac6:	3308      	adds	r3, #8
 8009ac8:	2102      	movs	r1, #2
 8009aca:	4618      	mov	r0, r3
 8009acc:	f001 ff2e 	bl	800b92c <RCCEx_PLL2_Config>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009ad6:	e004      	b.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009ade:	e000      	b.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ae2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10a      	bne.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009aea:	4b92      	ldr	r3, [pc, #584]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009aee:	f023 0103 	bic.w	r1, r3, #3
 8009af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009af8:	4a8e      	ldr	r2, [pc, #568]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009afa:	430b      	orrs	r3, r1
 8009afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009afe:	e003      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b10:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009b14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b18:	2300      	movs	r3, #0
 8009b1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009b1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009b22:	460b      	mov	r3, r1
 8009b24:	4313      	orrs	r3, r2
 8009b26:	f000 8099 	beq.w	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b2a:	4b83      	ldr	r3, [pc, #524]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a82      	ldr	r2, [pc, #520]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b36:	f7f9 fc17 	bl	8003368 <HAL_GetTick>
 8009b3a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b3e:	e00b      	b.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b40:	f7f9 fc12 	bl	8003368 <HAL_GetTick>
 8009b44:	4602      	mov	r2, r0
 8009b46:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	2b64      	cmp	r3, #100	@ 0x64
 8009b4e:	d903      	bls.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009b56:	e005      	b.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b58:	4b77      	ldr	r3, [pc, #476]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d0ed      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009b64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d173      	bne.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009b6c:	4b71      	ldr	r3, [pc, #452]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b78:	4053      	eors	r3, r2
 8009b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d015      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b82:	4b6c      	ldr	r3, [pc, #432]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b8a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b8e:	4b69      	ldr	r3, [pc, #420]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b92:	4a68      	ldr	r2, [pc, #416]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b98:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009b9a:	4b66      	ldr	r3, [pc, #408]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b9e:	4a65      	ldr	r2, [pc, #404]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ba0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ba4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009ba6:	4a63      	ldr	r2, [pc, #396]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bba:	d118      	bne.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bbc:	f7f9 fbd4 	bl	8003368 <HAL_GetTick>
 8009bc0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009bc4:	e00d      	b.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bc6:	f7f9 fbcf 	bl	8003368 <HAL_GetTick>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009bd0:	1ad2      	subs	r2, r2, r3
 8009bd2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d903      	bls.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009bda:	2303      	movs	r3, #3
 8009bdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8009be0:	e005      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009be2:	4b54      	ldr	r3, [pc, #336]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009be6:	f003 0302 	and.w	r3, r3, #2
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d0eb      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009bee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d129      	bne.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c06:	d10e      	bne.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009c08:	4b4a      	ldr	r3, [pc, #296]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c18:	091a      	lsrs	r2, r3, #4
 8009c1a:	4b48      	ldr	r3, [pc, #288]	@ (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	4a45      	ldr	r2, [pc, #276]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c20:	430b      	orrs	r3, r1
 8009c22:	6113      	str	r3, [r2, #16]
 8009c24:	e005      	b.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009c26:	4b43      	ldr	r3, [pc, #268]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	4a42      	ldr	r2, [pc, #264]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009c30:	6113      	str	r3, [r2, #16]
 8009c32:	4b40      	ldr	r3, [pc, #256]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c34:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c42:	4a3c      	ldr	r2, [pc, #240]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c44:	430b      	orrs	r3, r1
 8009c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8009c48:	e008      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c4e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8009c52:	e003      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c58:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c64:	f002 0301 	and.w	r3, r2, #1
 8009c68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009c76:	460b      	mov	r3, r1
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	f000 8090 	beq.w	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c86:	2b28      	cmp	r3, #40	@ 0x28
 8009c88:	d870      	bhi.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c90 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c90:	08009d75 	.word	0x08009d75
 8009c94:	08009d6d 	.word	0x08009d6d
 8009c98:	08009d6d 	.word	0x08009d6d
 8009c9c:	08009d6d 	.word	0x08009d6d
 8009ca0:	08009d6d 	.word	0x08009d6d
 8009ca4:	08009d6d 	.word	0x08009d6d
 8009ca8:	08009d6d 	.word	0x08009d6d
 8009cac:	08009d6d 	.word	0x08009d6d
 8009cb0:	08009d41 	.word	0x08009d41
 8009cb4:	08009d6d 	.word	0x08009d6d
 8009cb8:	08009d6d 	.word	0x08009d6d
 8009cbc:	08009d6d 	.word	0x08009d6d
 8009cc0:	08009d6d 	.word	0x08009d6d
 8009cc4:	08009d6d 	.word	0x08009d6d
 8009cc8:	08009d6d 	.word	0x08009d6d
 8009ccc:	08009d6d 	.word	0x08009d6d
 8009cd0:	08009d57 	.word	0x08009d57
 8009cd4:	08009d6d 	.word	0x08009d6d
 8009cd8:	08009d6d 	.word	0x08009d6d
 8009cdc:	08009d6d 	.word	0x08009d6d
 8009ce0:	08009d6d 	.word	0x08009d6d
 8009ce4:	08009d6d 	.word	0x08009d6d
 8009ce8:	08009d6d 	.word	0x08009d6d
 8009cec:	08009d6d 	.word	0x08009d6d
 8009cf0:	08009d75 	.word	0x08009d75
 8009cf4:	08009d6d 	.word	0x08009d6d
 8009cf8:	08009d6d 	.word	0x08009d6d
 8009cfc:	08009d6d 	.word	0x08009d6d
 8009d00:	08009d6d 	.word	0x08009d6d
 8009d04:	08009d6d 	.word	0x08009d6d
 8009d08:	08009d6d 	.word	0x08009d6d
 8009d0c:	08009d6d 	.word	0x08009d6d
 8009d10:	08009d75 	.word	0x08009d75
 8009d14:	08009d6d 	.word	0x08009d6d
 8009d18:	08009d6d 	.word	0x08009d6d
 8009d1c:	08009d6d 	.word	0x08009d6d
 8009d20:	08009d6d 	.word	0x08009d6d
 8009d24:	08009d6d 	.word	0x08009d6d
 8009d28:	08009d6d 	.word	0x08009d6d
 8009d2c:	08009d6d 	.word	0x08009d6d
 8009d30:	08009d75 	.word	0x08009d75
 8009d34:	58024400 	.word	0x58024400
 8009d38:	58024800 	.word	0x58024800
 8009d3c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d44:	3308      	adds	r3, #8
 8009d46:	2101      	movs	r1, #1
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f001 fdef 	bl	800b92c <RCCEx_PLL2_Config>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009d54:	e00f      	b.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d5a:	3328      	adds	r3, #40	@ 0x28
 8009d5c:	2101      	movs	r1, #1
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f001 fe96 	bl	800ba90 <RCCEx_PLL3_Config>
 8009d64:	4603      	mov	r3, r0
 8009d66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009d6a:	e004      	b.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009d72:	e000      	b.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10b      	bne.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009d7e:	4bc0      	ldr	r3, [pc, #768]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d82:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d8e:	4abc      	ldr	r2, [pc, #752]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d90:	430b      	orrs	r3, r1
 8009d92:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d94:	e003      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d9a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da6:	f002 0302 	and.w	r3, r2, #2
 8009daa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009dae:	2300      	movs	r3, #0
 8009db0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009db4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009db8:	460b      	mov	r3, r1
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	d043      	beq.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dc6:	2b05      	cmp	r3, #5
 8009dc8:	d824      	bhi.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8009dca:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8009dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd0:	08009e1d 	.word	0x08009e1d
 8009dd4:	08009de9 	.word	0x08009de9
 8009dd8:	08009dff 	.word	0x08009dff
 8009ddc:	08009e1d 	.word	0x08009e1d
 8009de0:	08009e1d 	.word	0x08009e1d
 8009de4:	08009e1d 	.word	0x08009e1d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dec:	3308      	adds	r3, #8
 8009dee:	2101      	movs	r1, #1
 8009df0:	4618      	mov	r0, r3
 8009df2:	f001 fd9b 	bl	800b92c <RCCEx_PLL2_Config>
 8009df6:	4603      	mov	r3, r0
 8009df8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009dfc:	e00f      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e02:	3328      	adds	r3, #40	@ 0x28
 8009e04:	2101      	movs	r1, #1
 8009e06:	4618      	mov	r0, r3
 8009e08:	f001 fe42 	bl	800ba90 <RCCEx_PLL3_Config>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009e12:	e004      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009e1a:	e000      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8009e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d10b      	bne.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009e26:	4b96      	ldr	r3, [pc, #600]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e2a:	f023 0107 	bic.w	r1, r3, #7
 8009e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e36:	4a92      	ldr	r2, [pc, #584]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e38:	430b      	orrs	r3, r1
 8009e3a:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e3c:	e003      	b.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e42:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4e:	f002 0304 	and.w	r3, r2, #4
 8009e52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e56:	2300      	movs	r3, #0
 8009e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e5c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009e60:	460b      	mov	r3, r1
 8009e62:	4313      	orrs	r3, r2
 8009e64:	d043      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e6e:	2b05      	cmp	r3, #5
 8009e70:	d824      	bhi.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009e72:	a201      	add	r2, pc, #4	@ (adr r2, 8009e78 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8009e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e78:	08009ec5 	.word	0x08009ec5
 8009e7c:	08009e91 	.word	0x08009e91
 8009e80:	08009ea7 	.word	0x08009ea7
 8009e84:	08009ec5 	.word	0x08009ec5
 8009e88:	08009ec5 	.word	0x08009ec5
 8009e8c:	08009ec5 	.word	0x08009ec5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e94:	3308      	adds	r3, #8
 8009e96:	2101      	movs	r1, #1
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f001 fd47 	bl	800b92c <RCCEx_PLL2_Config>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009ea4:	e00f      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009eaa:	3328      	adds	r3, #40	@ 0x28
 8009eac:	2101      	movs	r1, #1
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f001 fdee 	bl	800ba90 <RCCEx_PLL3_Config>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009eba:	e004      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009ec2:	e000      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8009ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ec6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10b      	bne.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ece:	4b6c      	ldr	r3, [pc, #432]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ed2:	f023 0107 	bic.w	r1, r3, #7
 8009ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ede:	4a68      	ldr	r2, [pc, #416]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ee0:	430b      	orrs	r3, r1
 8009ee2:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ee4:	e003      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009eea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef6:	f002 0320 	and.w	r3, r2, #32
 8009efa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009efe:	2300      	movs	r3, #0
 8009f00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009f08:	460b      	mov	r3, r1
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	d055      	beq.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f1a:	d033      	beq.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009f1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f20:	d82c      	bhi.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f26:	d02f      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f2c:	d826      	bhi.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009f2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009f32:	d02b      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009f34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009f38:	d820      	bhi.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009f3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f3e:	d012      	beq.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009f40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f44:	d81a      	bhi.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d022      	beq.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009f4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f4e:	d115      	bne.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f54:	3308      	adds	r3, #8
 8009f56:	2100      	movs	r1, #0
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f001 fce7 	bl	800b92c <RCCEx_PLL2_Config>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f64:	e015      	b.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f6a:	3328      	adds	r3, #40	@ 0x28
 8009f6c:	2102      	movs	r1, #2
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f001 fd8e 	bl	800ba90 <RCCEx_PLL3_Config>
 8009f74:	4603      	mov	r3, r0
 8009f76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f7a:	e00a      	b.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009f82:	e006      	b.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009f84:	bf00      	nop
 8009f86:	e004      	b.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009f88:	bf00      	nop
 8009f8a:	e002      	b.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009f8c:	bf00      	nop
 8009f8e:	e000      	b.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10b      	bne.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f9a:	4b39      	ldr	r3, [pc, #228]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f9e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009faa:	4a35      	ldr	r2, [pc, #212]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009fac:	430b      	orrs	r3, r1
 8009fae:	6553      	str	r3, [r2, #84]	@ 0x54
 8009fb0:	e003      	b.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009fb6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009fca:	2300      	movs	r3, #0
 8009fcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009fd0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	d058      	beq.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009fe2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009fe6:	d033      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009fe8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009fec:	d82c      	bhi.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009fee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ff2:	d02f      	beq.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ff8:	d826      	bhi.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009ffa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ffe:	d02b      	beq.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a000:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a004:	d820      	bhi.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a006:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a00a:	d012      	beq.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800a00c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a010:	d81a      	bhi.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a012:	2b00      	cmp	r3, #0
 800a014:	d022      	beq.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800a016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a01a:	d115      	bne.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a01c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a020:	3308      	adds	r3, #8
 800a022:	2100      	movs	r1, #0
 800a024:	4618      	mov	r0, r3
 800a026:	f001 fc81 	bl	800b92c <RCCEx_PLL2_Config>
 800a02a:	4603      	mov	r3, r0
 800a02c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a030:	e015      	b.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a032:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a036:	3328      	adds	r3, #40	@ 0x28
 800a038:	2102      	movs	r1, #2
 800a03a:	4618      	mov	r0, r3
 800a03c:	f001 fd28 	bl	800ba90 <RCCEx_PLL3_Config>
 800a040:	4603      	mov	r3, r0
 800a042:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a046:	e00a      	b.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a04e:	e006      	b.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a050:	bf00      	nop
 800a052:	e004      	b.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a054:	bf00      	nop
 800a056:	e002      	b.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a058:	bf00      	nop
 800a05a:	e000      	b.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a05c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a05e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10e      	bne.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a066:	4b06      	ldr	r3, [pc, #24]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a06a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a06e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a072:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a076:	4a02      	ldr	r2, [pc, #8]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a078:	430b      	orrs	r3, r1
 800a07a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a07c:	e006      	b.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800a07e:	bf00      	nop
 800a080:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a084:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a088:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a08c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a094:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a09c:	2300      	movs	r3, #0
 800a09e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a0a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	d055      	beq.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a0ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a0b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a0b8:	d033      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a0ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a0be:	d82c      	bhi.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a0c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0c4:	d02f      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a0c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0ca:	d826      	bhi.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a0cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a0d0:	d02b      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a0d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a0d6:	d820      	bhi.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a0d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0dc:	d012      	beq.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800a0de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0e2:	d81a      	bhi.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d022      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800a0e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0ec:	d115      	bne.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0f2:	3308      	adds	r3, #8
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f001 fc18 	bl	800b92c <RCCEx_PLL2_Config>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a102:	e015      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a108:	3328      	adds	r3, #40	@ 0x28
 800a10a:	2102      	movs	r1, #2
 800a10c:	4618      	mov	r0, r3
 800a10e:	f001 fcbf 	bl	800ba90 <RCCEx_PLL3_Config>
 800a112:	4603      	mov	r3, r0
 800a114:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a118:	e00a      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a120:	e006      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a122:	bf00      	nop
 800a124:	e004      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a126:	bf00      	nop
 800a128:	e002      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a12a:	bf00      	nop
 800a12c:	e000      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a12e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a130:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10b      	bne.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a138:	4ba1      	ldr	r3, [pc, #644]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a13a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a13c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a144:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a148:	4a9d      	ldr	r2, [pc, #628]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a14a:	430b      	orrs	r3, r1
 800a14c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a14e:	e003      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a150:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a154:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a158:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a160:	f002 0308 	and.w	r3, r2, #8
 800a164:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a168:	2300      	movs	r3, #0
 800a16a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a16e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a172:	460b      	mov	r3, r1
 800a174:	4313      	orrs	r3, r2
 800a176:	d01e      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a178:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a17c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a184:	d10c      	bne.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a186:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a18a:	3328      	adds	r3, #40	@ 0x28
 800a18c:	2102      	movs	r1, #2
 800a18e:	4618      	mov	r0, r3
 800a190:	f001 fc7e 	bl	800ba90 <RCCEx_PLL3_Config>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d002      	beq.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a1a0:	4b87      	ldr	r3, [pc, #540]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a1a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a1a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1b0:	4a83      	ldr	r2, [pc, #524]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a1b2:	430b      	orrs	r3, r1
 800a1b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a1b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1be:	f002 0310 	and.w	r3, r2, #16
 800a1c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a1cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	d01e      	beq.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a1d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a1de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1e2:	d10c      	bne.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a1e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1e8:	3328      	adds	r3, #40	@ 0x28
 800a1ea:	2102      	movs	r1, #2
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f001 fc4f 	bl	800ba90 <RCCEx_PLL3_Config>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d002      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a1fe:	4b70      	ldr	r3, [pc, #448]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a202:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a206:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a20a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a20e:	4a6c      	ldr	r2, [pc, #432]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a210:	430b      	orrs	r3, r1
 800a212:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a214:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a220:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a224:	2300      	movs	r3, #0
 800a226:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a22a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a22e:	460b      	mov	r3, r1
 800a230:	4313      	orrs	r3, r2
 800a232:	d03e      	beq.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a234:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a238:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a23c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a240:	d022      	beq.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800a242:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a246:	d81b      	bhi.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d003      	beq.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800a24c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a250:	d00b      	beq.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800a252:	e015      	b.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a258:	3308      	adds	r3, #8
 800a25a:	2100      	movs	r1, #0
 800a25c:	4618      	mov	r0, r3
 800a25e:	f001 fb65 	bl	800b92c <RCCEx_PLL2_Config>
 800a262:	4603      	mov	r3, r0
 800a264:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a268:	e00f      	b.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a26a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a26e:	3328      	adds	r3, #40	@ 0x28
 800a270:	2102      	movs	r1, #2
 800a272:	4618      	mov	r0, r3
 800a274:	f001 fc0c 	bl	800ba90 <RCCEx_PLL3_Config>
 800a278:	4603      	mov	r3, r0
 800a27a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a27e:	e004      	b.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a280:	2301      	movs	r3, #1
 800a282:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a286:	e000      	b.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800a288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a28a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d10b      	bne.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a292:	4b4b      	ldr	r3, [pc, #300]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a296:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a29a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a29e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a2a2:	4a47      	ldr	r2, [pc, #284]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a2a4:	430b      	orrs	r3, r1
 800a2a6:	6593      	str	r3, [r2, #88]	@ 0x58
 800a2a8:	e003      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a2ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a2b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a2be:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a2c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	d03b      	beq.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a2ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a2da:	d01f      	beq.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800a2dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a2e0:	d818      	bhi.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a2e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2e6:	d003      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800a2e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a2ec:	d007      	beq.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800a2ee:	e011      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2f0:	4b33      	ldr	r3, [pc, #204]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a2f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f4:	4a32      	ldr	r2, [pc, #200]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a2f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a2fc:	e00f      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a302:	3328      	adds	r3, #40	@ 0x28
 800a304:	2101      	movs	r1, #1
 800a306:	4618      	mov	r0, r3
 800a308:	f001 fbc2 	bl	800ba90 <RCCEx_PLL3_Config>
 800a30c:	4603      	mov	r3, r0
 800a30e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800a312:	e004      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a31a:	e000      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800a31c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a31e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a322:	2b00      	cmp	r3, #0
 800a324:	d10b      	bne.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a326:	4b26      	ldr	r3, [pc, #152]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a32a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a32e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a336:	4a22      	ldr	r2, [pc, #136]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a338:	430b      	orrs	r3, r1
 800a33a:	6553      	str	r3, [r2, #84]	@ 0x54
 800a33c:	e003      	b.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a33e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a342:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a346:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a352:	673b      	str	r3, [r7, #112]	@ 0x70
 800a354:	2300      	movs	r3, #0
 800a356:	677b      	str	r3, [r7, #116]	@ 0x74
 800a358:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a35c:	460b      	mov	r3, r1
 800a35e:	4313      	orrs	r3, r2
 800a360:	d034      	beq.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a362:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d003      	beq.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800a36c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a370:	d007      	beq.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800a372:	e011      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a374:	4b12      	ldr	r3, [pc, #72]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a378:	4a11      	ldr	r2, [pc, #68]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a37a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a37e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a380:	e00e      	b.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a386:	3308      	adds	r3, #8
 800a388:	2102      	movs	r1, #2
 800a38a:	4618      	mov	r0, r3
 800a38c:	f001 face 	bl	800b92c <RCCEx_PLL2_Config>
 800a390:	4603      	mov	r3, r0
 800a392:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a396:	e003      	b.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a39e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10d      	bne.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a3a8:	4b05      	ldr	r3, [pc, #20]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a3aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a3b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3b6:	4a02      	ldr	r2, [pc, #8]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a3b8:	430b      	orrs	r3, r1
 800a3ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a3bc:	e006      	b.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800a3be:	bf00      	nop
 800a3c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a3c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a3cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a3d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3da:	2300      	movs	r3, #0
 800a3dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a3de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	d00c      	beq.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3ec:	3328      	adds	r3, #40	@ 0x28
 800a3ee:	2102      	movs	r1, #2
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f001 fb4d 	bl	800ba90 <RCCEx_PLL3_Config>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d002      	beq.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a402:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a40e:	663b      	str	r3, [r7, #96]	@ 0x60
 800a410:	2300      	movs	r3, #0
 800a412:	667b      	str	r3, [r7, #100]	@ 0x64
 800a414:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a418:	460b      	mov	r3, r1
 800a41a:	4313      	orrs	r3, r2
 800a41c:	d038      	beq.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a41e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a426:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a42a:	d018      	beq.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800a42c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a430:	d811      	bhi.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a432:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a436:	d014      	beq.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800a438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a43c:	d80b      	bhi.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d011      	beq.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800a442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a446:	d106      	bne.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a448:	4bc3      	ldr	r3, [pc, #780]	@ (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a44c:	4ac2      	ldr	r2, [pc, #776]	@ (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a44e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a452:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a454:	e008      	b.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a45c:	e004      	b.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a45e:	bf00      	nop
 800a460:	e002      	b.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a462:	bf00      	nop
 800a464:	e000      	b.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a466:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a468:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10b      	bne.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a470:	4bb9      	ldr	r3, [pc, #740]	@ (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a474:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a47c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a480:	4ab5      	ldr	r2, [pc, #724]	@ (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a482:	430b      	orrs	r3, r1
 800a484:	6553      	str	r3, [r2, #84]	@ 0x54
 800a486:	e003      	b.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a488:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a48c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a490:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a498:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a49c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a49e:	2300      	movs	r3, #0
 800a4a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a4a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	d009      	beq.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a4ac:	4baa      	ldr	r3, [pc, #680]	@ (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a4b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a4ba:	4aa7      	ldr	r2, [pc, #668]	@ (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4bc:	430b      	orrs	r3, r1
 800a4be:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a4c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a4cc:	653b      	str	r3, [r7, #80]	@ 0x50
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	657b      	str	r3, [r7, #84]	@ 0x54
 800a4d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	d009      	beq.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a4dc:	4b9e      	ldr	r3, [pc, #632]	@ (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4e0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a4e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4ea:	4a9b      	ldr	r2, [pc, #620]	@ (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4ec:	430b      	orrs	r3, r1
 800a4ee:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800a4f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a4fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4fe:	2300      	movs	r3, #0
 800a500:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a502:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a506:	460b      	mov	r3, r1
 800a508:	4313      	orrs	r3, r2
 800a50a:	d009      	beq.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800a50c:	4b92      	ldr	r3, [pc, #584]	@ (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a50e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a510:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800a514:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a51a:	4a8f      	ldr	r2, [pc, #572]	@ (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a51c:	430b      	orrs	r3, r1
 800a51e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a520:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a528:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a52c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a52e:	2300      	movs	r3, #0
 800a530:	647b      	str	r3, [r7, #68]	@ 0x44
 800a532:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a536:	460b      	mov	r3, r1
 800a538:	4313      	orrs	r3, r2
 800a53a:	d00e      	beq.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a53c:	4b86      	ldr	r3, [pc, #536]	@ (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	4a85      	ldr	r2, [pc, #532]	@ (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a542:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a546:	6113      	str	r3, [r2, #16]
 800a548:	4b83      	ldr	r3, [pc, #524]	@ (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a54a:	6919      	ldr	r1, [r3, #16]
 800a54c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a550:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a554:	4a80      	ldr	r2, [pc, #512]	@ (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a556:	430b      	orrs	r3, r1
 800a558:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a55a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a562:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a566:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a568:	2300      	movs	r3, #0
 800a56a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a56c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a570:	460b      	mov	r3, r1
 800a572:	4313      	orrs	r3, r2
 800a574:	d009      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a576:	4b78      	ldr	r3, [pc, #480]	@ (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a57a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a57e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a584:	4a74      	ldr	r2, [pc, #464]	@ (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a586:	430b      	orrs	r3, r1
 800a588:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a58a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a592:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a596:	633b      	str	r3, [r7, #48]	@ 0x30
 800a598:	2300      	movs	r3, #0
 800a59a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a59c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	d00a      	beq.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a5a6:	4b6c      	ldr	r3, [pc, #432]	@ (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a5a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5aa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a5ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5b6:	4a68      	ldr	r2, [pc, #416]	@ (800a758 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a5b8:	430b      	orrs	r3, r1
 800a5ba:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a5bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a5c8:	f003 0301 	and.w	r3, r3, #1
 800a5cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5ce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	d011      	beq.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5dc:	3308      	adds	r3, #8
 800a5de:	2100      	movs	r1, #0
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f001 f9a3 	bl	800b92c <RCCEx_PLL2_Config>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a5ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d003      	beq.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a5f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a5fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a604:	2100      	movs	r1, #0
 800a606:	6239      	str	r1, [r7, #32]
 800a608:	f003 0302 	and.w	r3, r3, #2
 800a60c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a60e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a612:	460b      	mov	r3, r1
 800a614:	4313      	orrs	r3, r2
 800a616:	d011      	beq.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a618:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a61c:	3308      	adds	r3, #8
 800a61e:	2101      	movs	r1, #1
 800a620:	4618      	mov	r0, r3
 800a622:	f001 f983 	bl	800b92c <RCCEx_PLL2_Config>
 800a626:	4603      	mov	r3, r0
 800a628:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a62c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a630:	2b00      	cmp	r3, #0
 800a632:	d003      	beq.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a634:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a638:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a63c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a644:	2100      	movs	r1, #0
 800a646:	61b9      	str	r1, [r7, #24]
 800a648:	f003 0304 	and.w	r3, r3, #4
 800a64c:	61fb      	str	r3, [r7, #28]
 800a64e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a652:	460b      	mov	r3, r1
 800a654:	4313      	orrs	r3, r2
 800a656:	d011      	beq.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a658:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a65c:	3308      	adds	r3, #8
 800a65e:	2102      	movs	r1, #2
 800a660:	4618      	mov	r0, r3
 800a662:	f001 f963 	bl	800b92c <RCCEx_PLL2_Config>
 800a666:	4603      	mov	r3, r0
 800a668:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a66c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a670:	2b00      	cmp	r3, #0
 800a672:	d003      	beq.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a674:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a678:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a67c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a684:	2100      	movs	r1, #0
 800a686:	6139      	str	r1, [r7, #16]
 800a688:	f003 0308 	and.w	r3, r3, #8
 800a68c:	617b      	str	r3, [r7, #20]
 800a68e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a692:	460b      	mov	r3, r1
 800a694:	4313      	orrs	r3, r2
 800a696:	d011      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a698:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a69c:	3328      	adds	r3, #40	@ 0x28
 800a69e:	2100      	movs	r1, #0
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f001 f9f5 	bl	800ba90 <RCCEx_PLL3_Config>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800a6ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d003      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a6bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	60b9      	str	r1, [r7, #8]
 800a6c8:	f003 0310 	and.w	r3, r3, #16
 800a6cc:	60fb      	str	r3, [r7, #12]
 800a6ce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	d011      	beq.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6dc:	3328      	adds	r3, #40	@ 0x28
 800a6de:	2101      	movs	r1, #1
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f001 f9d5 	bl	800ba90 <RCCEx_PLL3_Config>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a6ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d003      	beq.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a6fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a704:	2100      	movs	r1, #0
 800a706:	6039      	str	r1, [r7, #0]
 800a708:	f003 0320 	and.w	r3, r3, #32
 800a70c:	607b      	str	r3, [r7, #4]
 800a70e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a712:	460b      	mov	r3, r1
 800a714:	4313      	orrs	r3, r2
 800a716:	d011      	beq.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a718:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a71c:	3328      	adds	r3, #40	@ 0x28
 800a71e:	2102      	movs	r1, #2
 800a720:	4618      	mov	r0, r3
 800a722:	f001 f9b5 	bl	800ba90 <RCCEx_PLL3_Config>
 800a726:	4603      	mov	r3, r0
 800a728:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a72c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a730:	2b00      	cmp	r3, #0
 800a732:	d003      	beq.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a734:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a738:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800a73c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800a740:	2b00      	cmp	r3, #0
 800a742:	d101      	bne.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800a744:	2300      	movs	r3, #0
 800a746:	e000      	b.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800a748:	2301      	movs	r3, #1
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a750:	46bd      	mov	sp, r7
 800a752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a756:	bf00      	nop
 800a758:	58024400 	.word	0x58024400

0800a75c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b090      	sub	sp, #64	@ 0x40
 800a760:	af00      	add	r7, sp, #0
 800a762:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a76a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a76e:	430b      	orrs	r3, r1
 800a770:	f040 8094 	bne.w	800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a774:	4b97      	ldr	r3, [pc, #604]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a778:	f003 0307 	and.w	r3, r3, #7
 800a77c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a780:	2b04      	cmp	r3, #4
 800a782:	f200 8087 	bhi.w	800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a786:	a201      	add	r2, pc, #4	@ (adr r2, 800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78c:	0800a7a1 	.word	0x0800a7a1
 800a790:	0800a7c9 	.word	0x0800a7c9
 800a794:	0800a7f1 	.word	0x0800a7f1
 800a798:	0800a88d 	.word	0x0800a88d
 800a79c:	0800a819 	.word	0x0800a819
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7a0:	4b8c      	ldr	r3, [pc, #560]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7ac:	d108      	bne.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 ff68 	bl	800b688 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7bc:	f000 bc97 	b.w	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7c4:	f000 bc93 	b.w	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7c8:	4b82      	ldr	r3, [pc, #520]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7d4:	d108      	bne.n	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7d6:	f107 0318 	add.w	r3, r7, #24
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f000 fcac 	bl	800b138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7e4:	f000 bc83 	b.w	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7ec:	f000 bc7f 	b.w	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7f0:	4b78      	ldr	r3, [pc, #480]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7fc:	d108      	bne.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7fe:	f107 030c 	add.w	r3, r7, #12
 800a802:	4618      	mov	r0, r3
 800a804:	f000 fdec 	bl	800b3e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a80c:	f000 bc6f 	b.w	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a810:	2300      	movs	r3, #0
 800a812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a814:	f000 bc6b 	b.w	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a818:	4b6e      	ldr	r3, [pc, #440]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a81a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a81c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a820:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a822:	4b6c      	ldr	r3, [pc, #432]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f003 0304 	and.w	r3, r3, #4
 800a82a:	2b04      	cmp	r3, #4
 800a82c:	d10c      	bne.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a82e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a830:	2b00      	cmp	r3, #0
 800a832:	d109      	bne.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a834:	4b67      	ldr	r3, [pc, #412]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	08db      	lsrs	r3, r3, #3
 800a83a:	f003 0303 	and.w	r3, r3, #3
 800a83e:	4a66      	ldr	r2, [pc, #408]	@ (800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a840:	fa22 f303 	lsr.w	r3, r2, r3
 800a844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a846:	e01f      	b.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a848:	4b62      	ldr	r3, [pc, #392]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a854:	d106      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a858:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a85c:	d102      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a85e:	4b5f      	ldr	r3, [pc, #380]	@ (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a860:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a862:	e011      	b.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a864:	4b5b      	ldr	r3, [pc, #364]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a86c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a870:	d106      	bne.n	800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a874:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a878:	d102      	bne.n	800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a87a:	4b59      	ldr	r3, [pc, #356]	@ (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800a87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a87e:	e003      	b.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a880:	2300      	movs	r3, #0
 800a882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a884:	f000 bc33 	b.w	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a888:	f000 bc31 	b.w	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a88c:	4b55      	ldr	r3, [pc, #340]	@ (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a890:	f000 bc2d 	b.w	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800a894:	2300      	movs	r3, #0
 800a896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a898:	f000 bc29 	b.w	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800a89c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8a0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a8a4:	430b      	orrs	r3, r1
 800a8a6:	f040 809f 	bne.w	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800a8aa:	4b4a      	ldr	r3, [pc, #296]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a8ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8ae:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a8b2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8ba:	d04d      	beq.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8c2:	f200 8084 	bhi.w	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c8:	2bc0      	cmp	r3, #192	@ 0xc0
 800a8ca:	d07d      	beq.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800a8cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ce:	2bc0      	cmp	r3, #192	@ 0xc0
 800a8d0:	d87d      	bhi.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d4:	2b80      	cmp	r3, #128	@ 0x80
 800a8d6:	d02d      	beq.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800a8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8da:	2b80      	cmp	r3, #128	@ 0x80
 800a8dc:	d877      	bhi.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d003      	beq.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800a8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e6:	2b40      	cmp	r3, #64	@ 0x40
 800a8e8:	d012      	beq.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800a8ea:	e070      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8ec:	4b39      	ldr	r3, [pc, #228]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8f8:	d107      	bne.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8fe:	4618      	mov	r0, r3
 800a900:	f000 fec2 	bl	800b688 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a908:	e3f1      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a90a:	2300      	movs	r3, #0
 800a90c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a90e:	e3ee      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a910:	4b30      	ldr	r3, [pc, #192]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a918:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a91c:	d107      	bne.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a91e:	f107 0318 	add.w	r3, r7, #24
 800a922:	4618      	mov	r0, r3
 800a924:	f000 fc08 	bl	800b138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a92c:	e3df      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a92e:	2300      	movs	r3, #0
 800a930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a932:	e3dc      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a934:	4b27      	ldr	r3, [pc, #156]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a93c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a940:	d107      	bne.n	800a952 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a942:	f107 030c 	add.w	r3, r7, #12
 800a946:	4618      	mov	r0, r3
 800a948:	f000 fd4a 	bl	800b3e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a950:	e3cd      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a956:	e3ca      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a958:	4b1e      	ldr	r3, [pc, #120]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a95a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a95c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a960:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a962:	4b1c      	ldr	r3, [pc, #112]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 0304 	and.w	r3, r3, #4
 800a96a:	2b04      	cmp	r3, #4
 800a96c:	d10c      	bne.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800a96e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a970:	2b00      	cmp	r3, #0
 800a972:	d109      	bne.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a974:	4b17      	ldr	r3, [pc, #92]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	08db      	lsrs	r3, r3, #3
 800a97a:	f003 0303 	and.w	r3, r3, #3
 800a97e:	4a16      	ldr	r2, [pc, #88]	@ (800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a980:	fa22 f303 	lsr.w	r3, r2, r3
 800a984:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a986:	e01e      	b.n	800a9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a988:	4b12      	ldr	r3, [pc, #72]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a990:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a994:	d106      	bne.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800a996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a998:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a99c:	d102      	bne.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a99e:	4b0f      	ldr	r3, [pc, #60]	@ (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a9a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9a2:	e010      	b.n	800a9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9a4:	4b0b      	ldr	r3, [pc, #44]	@ (800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9b0:	d106      	bne.n	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a9b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9b8:	d102      	bne.n	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a9ba:	4b09      	ldr	r3, [pc, #36]	@ (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800a9bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9be:	e002      	b.n	800a9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a9c4:	e393      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a9c6:	e392      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a9c8:	4b06      	ldr	r3, [pc, #24]	@ (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9cc:	e38f      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9d2:	e38c      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a9d4:	58024400 	.word	0x58024400
 800a9d8:	03d09000 	.word	0x03d09000
 800a9dc:	003d0900 	.word	0x003d0900
 800a9e0:	017d7840 	.word	0x017d7840
 800a9e4:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800a9e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9ec:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a9f0:	430b      	orrs	r3, r1
 800a9f2:	f040 809c 	bne.w	800ab2e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800a9f6:	4b9e      	ldr	r3, [pc, #632]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a9f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9fa:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800a9fe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800aa00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa06:	d054      	beq.n	800aab2 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800aa08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa0e:	f200 808b 	bhi.w	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800aa12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa14:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800aa18:	f000 8083 	beq.w	800ab22 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800aa1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800aa22:	f200 8081 	bhi.w	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800aa26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa2c:	d02f      	beq.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800aa2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa34:	d878      	bhi.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800aa36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d004      	beq.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800aa3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa42:	d012      	beq.n	800aa6a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800aa44:	e070      	b.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa46:	4b8a      	ldr	r3, [pc, #552]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa52:	d107      	bne.n	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f000 fe15 	bl	800b688 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa62:	e344      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800aa64:	2300      	movs	r3, #0
 800aa66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa68:	e341      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa6a:	4b81      	ldr	r3, [pc, #516]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa76:	d107      	bne.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa78:	f107 0318 	add.w	r3, r7, #24
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f000 fb5b 	bl	800b138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa86:	e332      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa8c:	e32f      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa8e:	4b78      	ldr	r3, [pc, #480]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa9a:	d107      	bne.n	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa9c:	f107 030c 	add.w	r3, r7, #12
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f000 fc9d 	bl	800b3e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaaa:	e320      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800aaac:	2300      	movs	r3, #0
 800aaae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aab0:	e31d      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aab2:	4b6f      	ldr	r3, [pc, #444]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aab6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aaba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aabc:	4b6c      	ldr	r3, [pc, #432]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f003 0304 	and.w	r3, r3, #4
 800aac4:	2b04      	cmp	r3, #4
 800aac6:	d10c      	bne.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800aac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d109      	bne.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aace:	4b68      	ldr	r3, [pc, #416]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	08db      	lsrs	r3, r3, #3
 800aad4:	f003 0303 	and.w	r3, r3, #3
 800aad8:	4a66      	ldr	r2, [pc, #408]	@ (800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800aada:	fa22 f303 	lsr.w	r3, r2, r3
 800aade:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aae0:	e01e      	b.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aae2:	4b63      	ldr	r3, [pc, #396]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aaee:	d106      	bne.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800aaf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aaf6:	d102      	bne.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aaf8:	4b5f      	ldr	r3, [pc, #380]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800aafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aafc:	e010      	b.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aafe:	4b5c      	ldr	r3, [pc, #368]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab0a:	d106      	bne.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ab0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab12:	d102      	bne.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab14:	4b59      	ldr	r3, [pc, #356]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800ab16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab18:	e002      	b.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 800ab1e:	e2e6      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ab20:	e2e5      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab22:	4b57      	ldr	r3, [pc, #348]	@ (800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab26:	e2e2      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab2c:	e2df      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ab2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab32:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ab36:	430b      	orrs	r3, r1
 800ab38:	f040 80a7 	bne.w	800ac8a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ab3c:	4b4c      	ldr	r3, [pc, #304]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ab3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab40:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ab44:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab4c:	d055      	beq.n	800abfa <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800ab4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab54:	f200 8096 	bhi.w	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800ab58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ab5e:	f000 8084 	beq.w	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800ab62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ab68:	f200 808c 	bhi.w	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800ab6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab72:	d030      	beq.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800ab74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab7a:	f200 8083 	bhi.w	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800ab7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d004      	beq.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800ab84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab8a:	d012      	beq.n	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800ab8c:	e07a      	b.n	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab8e:	4b38      	ldr	r3, [pc, #224]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab9a:	d107      	bne.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aba0:	4618      	mov	r0, r3
 800aba2:	f000 fd71 	bl	800b688 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abaa:	e2a0      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800abac:	2300      	movs	r3, #0
 800abae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abb0:	e29d      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abb2:	4b2f      	ldr	r3, [pc, #188]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abbe:	d107      	bne.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abc0:	f107 0318 	add.w	r3, r7, #24
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 fab7 	bl	800b138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abce:	e28e      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800abd0:	2300      	movs	r3, #0
 800abd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd4:	e28b      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abd6:	4b26      	ldr	r3, [pc, #152]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abe2:	d107      	bne.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abe4:	f107 030c 	add.w	r3, r7, #12
 800abe8:	4618      	mov	r0, r3
 800abea:	f000 fbf9 	bl	800b3e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abf2:	e27c      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abf8:	e279      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abfa:	4b1d      	ldr	r3, [pc, #116]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800abfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abfe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ac02:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac04:	4b1a      	ldr	r3, [pc, #104]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 0304 	and.w	r3, r3, #4
 800ac0c:	2b04      	cmp	r3, #4
 800ac0e:	d10c      	bne.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800ac10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d109      	bne.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac16:	4b16      	ldr	r3, [pc, #88]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	08db      	lsrs	r3, r3, #3
 800ac1c:	f003 0303 	and.w	r3, r3, #3
 800ac20:	4a14      	ldr	r2, [pc, #80]	@ (800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800ac22:	fa22 f303 	lsr.w	r3, r2, r3
 800ac26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac28:	e01e      	b.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac2a:	4b11      	ldr	r3, [pc, #68]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac36:	d106      	bne.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ac38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac3e:	d102      	bne.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac40:	4b0d      	ldr	r3, [pc, #52]	@ (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800ac42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac44:	e010      	b.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac46:	4b0a      	ldr	r3, [pc, #40]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac52:	d106      	bne.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ac54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac5a:	d102      	bne.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac5c:	4b07      	ldr	r3, [pc, #28]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800ac5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac60:	e002      	b.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac62:	2300      	movs	r3, #0
 800ac64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ac66:	e242      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ac68:	e241      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac6a:	4b05      	ldr	r3, [pc, #20]	@ (800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac6e:	e23e      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ac70:	58024400 	.word	0x58024400
 800ac74:	03d09000 	.word	0x03d09000
 800ac78:	003d0900 	.word	0x003d0900
 800ac7c:	017d7840 	.word	0x017d7840
 800ac80:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ac84:	2300      	movs	r3, #0
 800ac86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac88:	e231      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ac8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac8e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ac92:	430b      	orrs	r3, r1
 800ac94:	f040 8085 	bne.w	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ac98:	4b9c      	ldr	r3, [pc, #624]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac9c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800aca0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800aca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aca8:	d06b      	beq.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800acaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800acb0:	d874      	bhi.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800acb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800acb8:	d056      	beq.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800acba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acbc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800acc0:	d86c      	bhi.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800acc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acc4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800acc8:	d03b      	beq.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800acca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800accc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800acd0:	d864      	bhi.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800acd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acd8:	d021      	beq.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800acda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ace0:	d85c      	bhi.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800ace2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d004      	beq.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800ace8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acee:	d004      	beq.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800acf0:	e054      	b.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800acf2:	f7fe fb5f 	bl	80093b4 <HAL_RCC_GetPCLK1Freq>
 800acf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800acf8:	e1f9      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acfa:	4b84      	ldr	r3, [pc, #528]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad06:	d107      	bne.n	800ad18 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad08:	f107 0318 	add.w	r3, r7, #24
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f000 fa13 	bl	800b138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad16:	e1ea      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad1c:	e1e7      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad1e:	4b7b      	ldr	r3, [pc, #492]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad2a:	d107      	bne.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad2c:	f107 030c 	add.w	r3, r7, #12
 800ad30:	4618      	mov	r0, r3
 800ad32:	f000 fb55 	bl	800b3e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad3a:	e1d8      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad40:	e1d5      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad42:	4b72      	ldr	r3, [pc, #456]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 0304 	and.w	r3, r3, #4
 800ad4a:	2b04      	cmp	r3, #4
 800ad4c:	d109      	bne.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad4e:	4b6f      	ldr	r3, [pc, #444]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	08db      	lsrs	r3, r3, #3
 800ad54:	f003 0303 	and.w	r3, r3, #3
 800ad58:	4a6d      	ldr	r2, [pc, #436]	@ (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ad5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad60:	e1c5      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ad62:	2300      	movs	r3, #0
 800ad64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad66:	e1c2      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ad68:	4b68      	ldr	r3, [pc, #416]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad74:	d102      	bne.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800ad76:	4b67      	ldr	r3, [pc, #412]	@ (800af14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ad78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad7a:	e1b8      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad80:	e1b5      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad82:	4b62      	ldr	r3, [pc, #392]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad8e:	d102      	bne.n	800ad96 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800ad90:	4b61      	ldr	r3, [pc, #388]	@ (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800ad92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad94:	e1ab      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ad96:	2300      	movs	r3, #0
 800ad98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad9a:	e1a8      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ada0:	e1a5      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ada2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ada6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800adaa:	430b      	orrs	r3, r1
 800adac:	d173      	bne.n	800ae96 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800adae:	4b57      	ldr	r3, [pc, #348]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800adb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800adb6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800adb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adbe:	d02f      	beq.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800adc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adc6:	d863      	bhi.n	800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800adc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d004      	beq.n	800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800adce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800add4:	d012      	beq.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800add6:	e05b      	b.n	800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800add8:	4b4c      	ldr	r3, [pc, #304]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ade0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ade4:	d107      	bne.n	800adf6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ade6:	f107 0318 	add.w	r3, r7, #24
 800adea:	4618      	mov	r0, r3
 800adec:	f000 f9a4 	bl	800b138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adf4:	e17b      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800adf6:	2300      	movs	r3, #0
 800adf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adfa:	e178      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adfc:	4b43      	ldr	r3, [pc, #268]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae08:	d107      	bne.n	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae0a:	f107 030c 	add.w	r3, r7, #12
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f000 fae6 	bl	800b3e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae18:	e169      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae1e:	e166      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae20:	4b3a      	ldr	r3, [pc, #232]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ae22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ae28:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae2a:	4b38      	ldr	r3, [pc, #224]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f003 0304 	and.w	r3, r3, #4
 800ae32:	2b04      	cmp	r3, #4
 800ae34:	d10c      	bne.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800ae36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d109      	bne.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae3c:	4b33      	ldr	r3, [pc, #204]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	08db      	lsrs	r3, r3, #3
 800ae42:	f003 0303 	and.w	r3, r3, #3
 800ae46:	4a32      	ldr	r2, [pc, #200]	@ (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ae48:	fa22 f303 	lsr.w	r3, r2, r3
 800ae4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae4e:	e01e      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae50:	4b2e      	ldr	r3, [pc, #184]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae5c:	d106      	bne.n	800ae6c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800ae5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae64:	d102      	bne.n	800ae6c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae66:	4b2b      	ldr	r3, [pc, #172]	@ (800af14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ae68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae6a:	e010      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae6c:	4b27      	ldr	r3, [pc, #156]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae78:	d106      	bne.n	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800ae7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae80:	d102      	bne.n	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae82:	4b25      	ldr	r3, [pc, #148]	@ (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800ae84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae86:	e002      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ae8c:	e12f      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ae8e:	e12e      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800ae90:	2300      	movs	r3, #0
 800ae92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae94:	e12b      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ae96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae9a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ae9e:	430b      	orrs	r3, r1
 800aea0:	d13c      	bne.n	800af1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800aea2:	4b1a      	ldr	r3, [pc, #104]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aeaa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aeac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d004      	beq.n	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aeb8:	d012      	beq.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800aeba:	e023      	b.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aebc:	4b13      	ldr	r3, [pc, #76]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aec4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aec8:	d107      	bne.n	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aeca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aece:	4618      	mov	r0, r3
 800aed0:	f000 fbda 	bl	800b688 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aed8:	e109      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800aeda:	2300      	movs	r3, #0
 800aedc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aede:	e106      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aee0:	4b0a      	ldr	r3, [pc, #40]	@ (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aee8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aeec:	d107      	bne.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeee:	f107 0318 	add.w	r3, r7, #24
 800aef2:	4618      	mov	r0, r3
 800aef4:	f000 f920 	bl	800b138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aef8:	6a3b      	ldr	r3, [r7, #32]
 800aefa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aefc:	e0f7      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800aefe:	2300      	movs	r3, #0
 800af00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af02:	e0f4      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800af04:	2300      	movs	r3, #0
 800af06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af08:	e0f1      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800af0a:	bf00      	nop
 800af0c:	58024400 	.word	0x58024400
 800af10:	03d09000 	.word	0x03d09000
 800af14:	003d0900 	.word	0x003d0900
 800af18:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800af1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af20:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800af24:	430b      	orrs	r3, r1
 800af26:	f040 8091 	bne.w	800b04c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800af2a:	4b73      	ldr	r3, [pc, #460]	@ (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800af2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af2e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800af32:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800af34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af36:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800af3a:	f000 8081 	beq.w	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800af3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af40:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800af44:	d87f      	bhi.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800af46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af4c:	d06b      	beq.n	800b026 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800af4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af54:	d877      	bhi.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800af56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af5c:	d056      	beq.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800af5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af64:	d86f      	bhi.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800af66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af6c:	d03b      	beq.n	800afe6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800af6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af74:	d867      	bhi.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800af76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af7c:	d021      	beq.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800af7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af84:	d85f      	bhi.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800af86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d004      	beq.n	800af96 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800af8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af92:	d004      	beq.n	800af9e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800af94:	e057      	b.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800af96:	f000 f8b9 	bl	800b10c <HAL_RCCEx_GetD3PCLK1Freq>
 800af9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af9c:	e0a7      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af9e:	4b56      	ldr	r3, [pc, #344]	@ (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800afaa:	d107      	bne.n	800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afac:	f107 0318 	add.w	r3, r7, #24
 800afb0:	4618      	mov	r0, r3
 800afb2:	f000 f8c1 	bl	800b138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afba:	e098      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800afbc:	2300      	movs	r3, #0
 800afbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afc0:	e095      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800afc2:	4b4d      	ldr	r3, [pc, #308]	@ (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800afca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afce:	d107      	bne.n	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afd0:	f107 030c 	add.w	r3, r7, #12
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 fa03 	bl	800b3e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afde:	e086      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800afe0:	2300      	movs	r3, #0
 800afe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afe4:	e083      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800afe6:	4b44      	ldr	r3, [pc, #272]	@ (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f003 0304 	and.w	r3, r3, #4
 800afee:	2b04      	cmp	r3, #4
 800aff0:	d109      	bne.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aff2:	4b41      	ldr	r3, [pc, #260]	@ (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	08db      	lsrs	r3, r3, #3
 800aff8:	f003 0303 	and.w	r3, r3, #3
 800affc:	4a3f      	ldr	r2, [pc, #252]	@ (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800affe:	fa22 f303 	lsr.w	r3, r2, r3
 800b002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b004:	e073      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b006:	2300      	movs	r3, #0
 800b008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b00a:	e070      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b00c:	4b3a      	ldr	r3, [pc, #232]	@ (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b018:	d102      	bne.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800b01a:	4b39      	ldr	r3, [pc, #228]	@ (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800b01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b01e:	e066      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b020:	2300      	movs	r3, #0
 800b022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b024:	e063      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b026:	4b34      	ldr	r3, [pc, #208]	@ (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b02e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b032:	d102      	bne.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800b034:	4b33      	ldr	r3, [pc, #204]	@ (800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800b036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b038:	e059      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b03a:	2300      	movs	r3, #0
 800b03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b03e:	e056      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b040:	4b31      	ldr	r3, [pc, #196]	@ (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800b042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b044:	e053      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b046:	2300      	movs	r3, #0
 800b048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b04a:	e050      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b04c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b050:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b054:	430b      	orrs	r3, r1
 800b056:	d148      	bne.n	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b058:	4b27      	ldr	r3, [pc, #156]	@ (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b05a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b05c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b060:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b064:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b068:	d02a      	beq.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800b06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b06c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b070:	d838      	bhi.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b074:	2b00      	cmp	r3, #0
 800b076:	d004      	beq.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800b078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b07a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b07e:	d00d      	beq.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800b080:	e030      	b.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b082:	4b1d      	ldr	r3, [pc, #116]	@ (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b08a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b08e:	d102      	bne.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800b090:	4b1c      	ldr	r3, [pc, #112]	@ (800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800b092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b094:	e02b      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b096:	2300      	movs	r3, #0
 800b098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b09a:	e028      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b09c:	4b16      	ldr	r3, [pc, #88]	@ (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b0a8:	d107      	bne.n	800b0ba <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f000 faea 	bl	800b688 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0b8:	e019      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0be:	e016      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0c0:	4b0d      	ldr	r3, [pc, #52]	@ (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0cc:	d107      	bne.n	800b0de <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0ce:	f107 0318 	add.w	r3, r7, #24
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 f830 	bl	800b138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0dc:	e007      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0e2:	e004      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0e8:	e001      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b0ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3740      	adds	r7, #64	@ 0x40
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	58024400 	.word	0x58024400
 800b0fc:	03d09000 	.word	0x03d09000
 800b100:	003d0900 	.word	0x003d0900
 800b104:	017d7840 	.word	0x017d7840
 800b108:	00bb8000 	.word	0x00bb8000

0800b10c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800b110:	f7fe f920 	bl	8009354 <HAL_RCC_GetHCLKFreq>
 800b114:	4602      	mov	r2, r0
 800b116:	4b06      	ldr	r3, [pc, #24]	@ (800b130 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b118:	6a1b      	ldr	r3, [r3, #32]
 800b11a:	091b      	lsrs	r3, r3, #4
 800b11c:	f003 0307 	and.w	r3, r3, #7
 800b120:	4904      	ldr	r1, [pc, #16]	@ (800b134 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b122:	5ccb      	ldrb	r3, [r1, r3]
 800b124:	f003 031f 	and.w	r3, r3, #31
 800b128:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	58024400 	.word	0x58024400
 800b134:	080128c4 	.word	0x080128c4

0800b138 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b138:	b480      	push	{r7}
 800b13a:	b089      	sub	sp, #36	@ 0x24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b140:	4ba1      	ldr	r3, [pc, #644]	@ (800b3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b144:	f003 0303 	and.w	r3, r3, #3
 800b148:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b14a:	4b9f      	ldr	r3, [pc, #636]	@ (800b3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b14c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b14e:	0b1b      	lsrs	r3, r3, #12
 800b150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b154:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b156:	4b9c      	ldr	r3, [pc, #624]	@ (800b3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b15a:	091b      	lsrs	r3, r3, #4
 800b15c:	f003 0301 	and.w	r3, r3, #1
 800b160:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b162:	4b99      	ldr	r3, [pc, #612]	@ (800b3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b166:	08db      	lsrs	r3, r3, #3
 800b168:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b16c:	693a      	ldr	r2, [r7, #16]
 800b16e:	fb02 f303 	mul.w	r3, r2, r3
 800b172:	ee07 3a90 	vmov	s15, r3
 800b176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b17a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	2b00      	cmp	r3, #0
 800b182:	f000 8111 	beq.w	800b3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	2b02      	cmp	r3, #2
 800b18a:	f000 8083 	beq.w	800b294 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	2b02      	cmp	r3, #2
 800b192:	f200 80a1 	bhi.w	800b2d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d003      	beq.n	800b1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d056      	beq.n	800b250 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b1a2:	e099      	b.n	800b2d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1a4:	4b88      	ldr	r3, [pc, #544]	@ (800b3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f003 0320 	and.w	r3, r3, #32
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d02d      	beq.n	800b20c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1b0:	4b85      	ldr	r3, [pc, #532]	@ (800b3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	08db      	lsrs	r3, r3, #3
 800b1b6:	f003 0303 	and.w	r3, r3, #3
 800b1ba:	4a84      	ldr	r2, [pc, #528]	@ (800b3cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b1bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b1c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	ee07 3a90 	vmov	s15, r3
 800b1c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	ee07 3a90 	vmov	s15, r3
 800b1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1da:	4b7b      	ldr	r3, [pc, #492]	@ (800b3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1e2:	ee07 3a90 	vmov	s15, r3
 800b1e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b202:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b206:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b20a:	e087      	b.n	800b31c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	ee07 3a90 	vmov	s15, r3
 800b212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b216:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b21a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b21e:	4b6a      	ldr	r3, [pc, #424]	@ (800b3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b226:	ee07 3a90 	vmov	s15, r3
 800b22a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b22e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b232:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b23a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b23e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b24a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b24e:	e065      	b.n	800b31c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	ee07 3a90 	vmov	s15, r3
 800b256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b25a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b3d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b25e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b262:	4b59      	ldr	r3, [pc, #356]	@ (800b3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b26a:	ee07 3a90 	vmov	s15, r3
 800b26e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b272:	ed97 6a03 	vldr	s12, [r7, #12]
 800b276:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b27a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b27e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b28a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b28e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b292:	e043      	b.n	800b31c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	ee07 3a90 	vmov	s15, r3
 800b29a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b29e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b3dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b2a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2a6:	4b48      	ldr	r3, [pc, #288]	@ (800b3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2ae:	ee07 3a90 	vmov	s15, r3
 800b2b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2d6:	e021      	b.n	800b31c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	ee07 3a90 	vmov	s15, r3
 800b2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b3d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b2e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ea:	4b37      	ldr	r3, [pc, #220]	@ (800b3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2f2:	ee07 3a90 	vmov	s15, r3
 800b2f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b30a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b30e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b312:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b31a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b31c:	4b2a      	ldr	r3, [pc, #168]	@ (800b3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b31e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b320:	0a5b      	lsrs	r3, r3, #9
 800b322:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b326:	ee07 3a90 	vmov	s15, r3
 800b32a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b32e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b332:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b336:	edd7 6a07 	vldr	s13, [r7, #28]
 800b33a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b33e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b342:	ee17 2a90 	vmov	r2, s15
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b34a:	4b1f      	ldr	r3, [pc, #124]	@ (800b3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b34c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b34e:	0c1b      	lsrs	r3, r3, #16
 800b350:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b354:	ee07 3a90 	vmov	s15, r3
 800b358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b35c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b360:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b364:	edd7 6a07 	vldr	s13, [r7, #28]
 800b368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b36c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b370:	ee17 2a90 	vmov	r2, s15
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b378:	4b13      	ldr	r3, [pc, #76]	@ (800b3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b37a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b37c:	0e1b      	lsrs	r3, r3, #24
 800b37e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b382:	ee07 3a90 	vmov	s15, r3
 800b386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b38a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b38e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b392:	edd7 6a07 	vldr	s13, [r7, #28]
 800b396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b39a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b39e:	ee17 2a90 	vmov	r2, s15
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b3a6:	e008      	b.n	800b3ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	609a      	str	r2, [r3, #8]
}
 800b3ba:	bf00      	nop
 800b3bc:	3724      	adds	r7, #36	@ 0x24
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr
 800b3c6:	bf00      	nop
 800b3c8:	58024400 	.word	0x58024400
 800b3cc:	03d09000 	.word	0x03d09000
 800b3d0:	46000000 	.word	0x46000000
 800b3d4:	4c742400 	.word	0x4c742400
 800b3d8:	4a742400 	.word	0x4a742400
 800b3dc:	4bbebc20 	.word	0x4bbebc20

0800b3e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b089      	sub	sp, #36	@ 0x24
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b3e8:	4ba1      	ldr	r3, [pc, #644]	@ (800b670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ec:	f003 0303 	and.w	r3, r3, #3
 800b3f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b3f2:	4b9f      	ldr	r3, [pc, #636]	@ (800b670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3f6:	0d1b      	lsrs	r3, r3, #20
 800b3f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b3fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b3fe:	4b9c      	ldr	r3, [pc, #624]	@ (800b670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b402:	0a1b      	lsrs	r3, r3, #8
 800b404:	f003 0301 	and.w	r3, r3, #1
 800b408:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b40a:	4b99      	ldr	r3, [pc, #612]	@ (800b670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b40c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b40e:	08db      	lsrs	r3, r3, #3
 800b410:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b414:	693a      	ldr	r2, [r7, #16]
 800b416:	fb02 f303 	mul.w	r3, r2, r3
 800b41a:	ee07 3a90 	vmov	s15, r3
 800b41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b422:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	f000 8111 	beq.w	800b650 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	2b02      	cmp	r3, #2
 800b432:	f000 8083 	beq.w	800b53c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	2b02      	cmp	r3, #2
 800b43a:	f200 80a1 	bhi.w	800b580 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d003      	beq.n	800b44c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	2b01      	cmp	r3, #1
 800b448:	d056      	beq.n	800b4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b44a:	e099      	b.n	800b580 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b44c:	4b88      	ldr	r3, [pc, #544]	@ (800b670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f003 0320 	and.w	r3, r3, #32
 800b454:	2b00      	cmp	r3, #0
 800b456:	d02d      	beq.n	800b4b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b458:	4b85      	ldr	r3, [pc, #532]	@ (800b670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	08db      	lsrs	r3, r3, #3
 800b45e:	f003 0303 	and.w	r3, r3, #3
 800b462:	4a84      	ldr	r2, [pc, #528]	@ (800b674 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b464:	fa22 f303 	lsr.w	r3, r2, r3
 800b468:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	ee07 3a90 	vmov	s15, r3
 800b470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	ee07 3a90 	vmov	s15, r3
 800b47a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b47e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b482:	4b7b      	ldr	r3, [pc, #492]	@ (800b670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b48a:	ee07 3a90 	vmov	s15, r3
 800b48e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b492:	ed97 6a03 	vldr	s12, [r7, #12]
 800b496:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b49a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b49e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b4b2:	e087      	b.n	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	ee07 3a90 	vmov	s15, r3
 800b4ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b67c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b4c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4c6:	4b6a      	ldr	r3, [pc, #424]	@ (800b670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ce:	ee07 3a90 	vmov	s15, r3
 800b4d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4f6:	e065      	b.n	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	ee07 3a90 	vmov	s15, r3
 800b4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b502:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b680 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b50a:	4b59      	ldr	r3, [pc, #356]	@ (800b670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b50c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b512:	ee07 3a90 	vmov	s15, r3
 800b516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b51a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b51e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b52a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b52e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b532:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b53a:	e043      	b.n	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	ee07 3a90 	vmov	s15, r3
 800b542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b546:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b684 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b54a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b54e:	4b48      	ldr	r3, [pc, #288]	@ (800b670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b556:	ee07 3a90 	vmov	s15, r3
 800b55a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b55e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b562:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b56a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b56e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b57a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b57e:	e021      	b.n	800b5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	ee07 3a90 	vmov	s15, r3
 800b586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b58a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b680 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b58e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b592:	4b37      	ldr	r3, [pc, #220]	@ (800b670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b59a:	ee07 3a90 	vmov	s15, r3
 800b59e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b5c4:	4b2a      	ldr	r3, [pc, #168]	@ (800b670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5c8:	0a5b      	lsrs	r3, r3, #9
 800b5ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5ce:	ee07 3a90 	vmov	s15, r3
 800b5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5de:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5ea:	ee17 2a90 	vmov	r2, s15
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b5f2:	4b1f      	ldr	r3, [pc, #124]	@ (800b670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5f6:	0c1b      	lsrs	r3, r3, #16
 800b5f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5fc:	ee07 3a90 	vmov	s15, r3
 800b600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b604:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b608:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b60c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b618:	ee17 2a90 	vmov	r2, s15
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b620:	4b13      	ldr	r3, [pc, #76]	@ (800b670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b624:	0e1b      	lsrs	r3, r3, #24
 800b626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b62a:	ee07 3a90 	vmov	s15, r3
 800b62e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b632:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b636:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b63a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b63e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b646:	ee17 2a90 	vmov	r2, s15
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b64e:	e008      	b.n	800b662 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	609a      	str	r2, [r3, #8]
}
 800b662:	bf00      	nop
 800b664:	3724      	adds	r7, #36	@ 0x24
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	58024400 	.word	0x58024400
 800b674:	03d09000 	.word	0x03d09000
 800b678:	46000000 	.word	0x46000000
 800b67c:	4c742400 	.word	0x4c742400
 800b680:	4a742400 	.word	0x4a742400
 800b684:	4bbebc20 	.word	0x4bbebc20

0800b688 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b688:	b480      	push	{r7}
 800b68a:	b089      	sub	sp, #36	@ 0x24
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b690:	4ba0      	ldr	r3, [pc, #640]	@ (800b914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b694:	f003 0303 	and.w	r3, r3, #3
 800b698:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b69a:	4b9e      	ldr	r3, [pc, #632]	@ (800b914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b69c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b69e:	091b      	lsrs	r3, r3, #4
 800b6a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b6a4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b6a6:	4b9b      	ldr	r3, [pc, #620]	@ (800b914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6aa:	f003 0301 	and.w	r3, r3, #1
 800b6ae:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b6b0:	4b98      	ldr	r3, [pc, #608]	@ (800b914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6b4:	08db      	lsrs	r3, r3, #3
 800b6b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b6ba:	693a      	ldr	r2, [r7, #16]
 800b6bc:	fb02 f303 	mul.w	r3, r2, r3
 800b6c0:	ee07 3a90 	vmov	s15, r3
 800b6c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6c8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	f000 8111 	beq.w	800b8f6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	f000 8083 	beq.w	800b7e2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	f200 80a1 	bhi.w	800b826 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b6e4:	69bb      	ldr	r3, [r7, #24]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d003      	beq.n	800b6f2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d056      	beq.n	800b79e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b6f0:	e099      	b.n	800b826 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6f2:	4b88      	ldr	r3, [pc, #544]	@ (800b914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f003 0320 	and.w	r3, r3, #32
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d02d      	beq.n	800b75a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6fe:	4b85      	ldr	r3, [pc, #532]	@ (800b914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	08db      	lsrs	r3, r3, #3
 800b704:	f003 0303 	and.w	r3, r3, #3
 800b708:	4a83      	ldr	r2, [pc, #524]	@ (800b918 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b70a:	fa22 f303 	lsr.w	r3, r2, r3
 800b70e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	ee07 3a90 	vmov	s15, r3
 800b716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	ee07 3a90 	vmov	s15, r3
 800b720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b724:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b728:	4b7a      	ldr	r3, [pc, #488]	@ (800b914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b72a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b72c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b730:	ee07 3a90 	vmov	s15, r3
 800b734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b738:	ed97 6a03 	vldr	s12, [r7, #12]
 800b73c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b91c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b740:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b744:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b748:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b74c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b750:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b754:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b758:	e087      	b.n	800b86a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	ee07 3a90 	vmov	s15, r3
 800b760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b764:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b920 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b76c:	4b69      	ldr	r3, [pc, #420]	@ (800b914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b76e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b774:	ee07 3a90 	vmov	s15, r3
 800b778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b77c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b780:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b91c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b784:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b788:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b78c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b790:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b794:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b798:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b79c:	e065      	b.n	800b86a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	ee07 3a90 	vmov	s15, r3
 800b7a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7a8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b924 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b7ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7b0:	4b58      	ldr	r3, [pc, #352]	@ (800b914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7b8:	ee07 3a90 	vmov	s15, r3
 800b7bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7c4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b91c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7e0:	e043      	b.n	800b86a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	ee07 3a90 	vmov	s15, r3
 800b7e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ec:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b928 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b7f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7f4:	4b47      	ldr	r3, [pc, #284]	@ (800b914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7fc:	ee07 3a90 	vmov	s15, r3
 800b800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b804:	ed97 6a03 	vldr	s12, [r7, #12]
 800b808:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b91c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b80c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b810:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b814:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b818:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b81c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b820:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b824:	e021      	b.n	800b86a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	ee07 3a90 	vmov	s15, r3
 800b82c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b830:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b920 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b834:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b838:	4b36      	ldr	r3, [pc, #216]	@ (800b914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b83a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b83c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b840:	ee07 3a90 	vmov	s15, r3
 800b844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b848:	ed97 6a03 	vldr	s12, [r7, #12]
 800b84c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b91c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b850:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b854:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b858:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b85c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b860:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b864:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b868:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b86a:	4b2a      	ldr	r3, [pc, #168]	@ (800b914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b86c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b86e:	0a5b      	lsrs	r3, r3, #9
 800b870:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b874:	ee07 3a90 	vmov	s15, r3
 800b878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b87c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b880:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b884:	edd7 6a07 	vldr	s13, [r7, #28]
 800b888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b88c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b890:	ee17 2a90 	vmov	r2, s15
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b898:	4b1e      	ldr	r3, [pc, #120]	@ (800b914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b89a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b89c:	0c1b      	lsrs	r3, r3, #16
 800b89e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8a2:	ee07 3a90 	vmov	s15, r3
 800b8a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8be:	ee17 2a90 	vmov	r2, s15
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b8c6:	4b13      	ldr	r3, [pc, #76]	@ (800b914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8ca:	0e1b      	lsrs	r3, r3, #24
 800b8cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8d0:	ee07 3a90 	vmov	s15, r3
 800b8d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8ec:	ee17 2a90 	vmov	r2, s15
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b8f4:	e008      	b.n	800b908 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	609a      	str	r2, [r3, #8]
}
 800b908:	bf00      	nop
 800b90a:	3724      	adds	r7, #36	@ 0x24
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr
 800b914:	58024400 	.word	0x58024400
 800b918:	03d09000 	.word	0x03d09000
 800b91c:	46000000 	.word	0x46000000
 800b920:	4c742400 	.word	0x4c742400
 800b924:	4a742400 	.word	0x4a742400
 800b928:	4bbebc20 	.word	0x4bbebc20

0800b92c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b936:	2300      	movs	r3, #0
 800b938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b93a:	4b53      	ldr	r3, [pc, #332]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800b93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b93e:	f003 0303 	and.w	r3, r3, #3
 800b942:	2b03      	cmp	r3, #3
 800b944:	d101      	bne.n	800b94a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	e099      	b.n	800ba7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b94a:	4b4f      	ldr	r3, [pc, #316]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4a4e      	ldr	r2, [pc, #312]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800b950:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b956:	f7f7 fd07 	bl	8003368 <HAL_GetTick>
 800b95a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b95c:	e008      	b.n	800b970 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b95e:	f7f7 fd03 	bl	8003368 <HAL_GetTick>
 800b962:	4602      	mov	r2, r0
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d901      	bls.n	800b970 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b96c:	2303      	movs	r3, #3
 800b96e:	e086      	b.n	800ba7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b970:	4b45      	ldr	r3, [pc, #276]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d1f0      	bne.n	800b95e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b97c:	4b42      	ldr	r3, [pc, #264]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800b97e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b980:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	031b      	lsls	r3, r3, #12
 800b98a:	493f      	ldr	r1, [pc, #252]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800b98c:	4313      	orrs	r3, r2
 800b98e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	3b01      	subs	r3, #1
 800b996:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	3b01      	subs	r3, #1
 800b9a0:	025b      	lsls	r3, r3, #9
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	431a      	orrs	r2, r3
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	041b      	lsls	r3, r3, #16
 800b9ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b9b2:	431a      	orrs	r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	691b      	ldr	r3, [r3, #16]
 800b9b8:	3b01      	subs	r3, #1
 800b9ba:	061b      	lsls	r3, r3, #24
 800b9bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b9c0:	4931      	ldr	r1, [pc, #196]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b9c6:	4b30      	ldr	r3, [pc, #192]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800b9c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	695b      	ldr	r3, [r3, #20]
 800b9d2:	492d      	ldr	r1, [pc, #180]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b9d8:	4b2b      	ldr	r3, [pc, #172]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800b9da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9dc:	f023 0220 	bic.w	r2, r3, #32
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	699b      	ldr	r3, [r3, #24]
 800b9e4:	4928      	ldr	r1, [pc, #160]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b9ea:	4b27      	ldr	r3, [pc, #156]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800b9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ee:	4a26      	ldr	r2, [pc, #152]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800b9f0:	f023 0310 	bic.w	r3, r3, #16
 800b9f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b9f6:	4b24      	ldr	r3, [pc, #144]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800b9f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b9fa:	4b24      	ldr	r3, [pc, #144]	@ (800ba8c <RCCEx_PLL2_Config+0x160>)
 800b9fc:	4013      	ands	r3, r2
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	69d2      	ldr	r2, [r2, #28]
 800ba02:	00d2      	lsls	r2, r2, #3
 800ba04:	4920      	ldr	r1, [pc, #128]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800ba06:	4313      	orrs	r3, r2
 800ba08:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ba0a:	4b1f      	ldr	r3, [pc, #124]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800ba0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba0e:	4a1e      	ldr	r2, [pc, #120]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800ba10:	f043 0310 	orr.w	r3, r3, #16
 800ba14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d106      	bne.n	800ba2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ba1c:	4b1a      	ldr	r3, [pc, #104]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800ba1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba20:	4a19      	ldr	r2, [pc, #100]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800ba22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ba26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ba28:	e00f      	b.n	800ba4a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d106      	bne.n	800ba3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ba30:	4b15      	ldr	r3, [pc, #84]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800ba32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba34:	4a14      	ldr	r2, [pc, #80]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800ba36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ba3c:	e005      	b.n	800ba4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ba3e:	4b12      	ldr	r3, [pc, #72]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800ba40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba42:	4a11      	ldr	r2, [pc, #68]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800ba44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ba48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ba4a:	4b0f      	ldr	r3, [pc, #60]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a0e      	ldr	r2, [pc, #56]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800ba50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ba54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba56:	f7f7 fc87 	bl	8003368 <HAL_GetTick>
 800ba5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba5c:	e008      	b.n	800ba70 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ba5e:	f7f7 fc83 	bl	8003368 <HAL_GetTick>
 800ba62:	4602      	mov	r2, r0
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	1ad3      	subs	r3, r2, r3
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	d901      	bls.n	800ba70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba6c:	2303      	movs	r3, #3
 800ba6e:	e006      	b.n	800ba7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba70:	4b05      	ldr	r3, [pc, #20]	@ (800ba88 <RCCEx_PLL2_Config+0x15c>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d0f0      	beq.n	800ba5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ba7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3710      	adds	r7, #16
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	58024400 	.word	0x58024400
 800ba8c:	ffff0007 	.word	0xffff0007

0800ba90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ba9e:	4b53      	ldr	r3, [pc, #332]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800baa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baa2:	f003 0303 	and.w	r3, r3, #3
 800baa6:	2b03      	cmp	r3, #3
 800baa8:	d101      	bne.n	800baae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	e099      	b.n	800bbe2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800baae:	4b4f      	ldr	r3, [pc, #316]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a4e      	ldr	r2, [pc, #312]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bab4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800baba:	f7f7 fc55 	bl	8003368 <HAL_GetTick>
 800babe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bac0:	e008      	b.n	800bad4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bac2:	f7f7 fc51 	bl	8003368 <HAL_GetTick>
 800bac6:	4602      	mov	r2, r0
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	2b02      	cmp	r3, #2
 800bace:	d901      	bls.n	800bad4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bad0:	2303      	movs	r3, #3
 800bad2:	e086      	b.n	800bbe2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bad4:	4b45      	ldr	r3, [pc, #276]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800badc:	2b00      	cmp	r3, #0
 800bade:	d1f0      	bne.n	800bac2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bae0:	4b42      	ldr	r3, [pc, #264]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bae4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	051b      	lsls	r3, r3, #20
 800baee:	493f      	ldr	r1, [pc, #252]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800baf0:	4313      	orrs	r3, r2
 800baf2:	628b      	str	r3, [r1, #40]	@ 0x28
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	3b01      	subs	r3, #1
 800bafa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	3b01      	subs	r3, #1
 800bb04:	025b      	lsls	r3, r3, #9
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	431a      	orrs	r2, r3
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	041b      	lsls	r3, r3, #16
 800bb12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bb16:	431a      	orrs	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	691b      	ldr	r3, [r3, #16]
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	061b      	lsls	r3, r3, #24
 800bb20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bb24:	4931      	ldr	r1, [pc, #196]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bb26:	4313      	orrs	r3, r2
 800bb28:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bb2a:	4b30      	ldr	r3, [pc, #192]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bb2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	695b      	ldr	r3, [r3, #20]
 800bb36:	492d      	ldr	r1, [pc, #180]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bb3c:	4b2b      	ldr	r3, [pc, #172]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bb3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb40:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	699b      	ldr	r3, [r3, #24]
 800bb48:	4928      	ldr	r1, [pc, #160]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bb4e:	4b27      	ldr	r3, [pc, #156]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bb50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb52:	4a26      	ldr	r2, [pc, #152]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bb54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bb5a:	4b24      	ldr	r3, [pc, #144]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bb5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb5e:	4b24      	ldr	r3, [pc, #144]	@ (800bbf0 <RCCEx_PLL3_Config+0x160>)
 800bb60:	4013      	ands	r3, r2
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	69d2      	ldr	r2, [r2, #28]
 800bb66:	00d2      	lsls	r2, r2, #3
 800bb68:	4920      	ldr	r1, [pc, #128]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bb6e:	4b1f      	ldr	r3, [pc, #124]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bb70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb72:	4a1e      	ldr	r2, [pc, #120]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bb74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d106      	bne.n	800bb8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bb80:	4b1a      	ldr	r3, [pc, #104]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bb82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb84:	4a19      	ldr	r2, [pc, #100]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bb86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bb8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bb8c:	e00f      	b.n	800bbae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d106      	bne.n	800bba2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bb94:	4b15      	ldr	r3, [pc, #84]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bb96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb98:	4a14      	ldr	r2, [pc, #80]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bb9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bb9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bba0:	e005      	b.n	800bbae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bba2:	4b12      	ldr	r3, [pc, #72]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba6:	4a11      	ldr	r2, [pc, #68]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bba8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bbac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bbae:	4b0f      	ldr	r3, [pc, #60]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4a0e      	ldr	r2, [pc, #56]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bbb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bbb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbba:	f7f7 fbd5 	bl	8003368 <HAL_GetTick>
 800bbbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bbc0:	e008      	b.n	800bbd4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bbc2:	f7f7 fbd1 	bl	8003368 <HAL_GetTick>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	1ad3      	subs	r3, r2, r3
 800bbcc:	2b02      	cmp	r3, #2
 800bbce:	d901      	bls.n	800bbd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bbd0:	2303      	movs	r3, #3
 800bbd2:	e006      	b.n	800bbe2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bbd4:	4b05      	ldr	r3, [pc, #20]	@ (800bbec <RCCEx_PLL3_Config+0x15c>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d0f0      	beq.n	800bbc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	58024400 	.word	0x58024400
 800bbf0:	ffff0007 	.word	0xffff0007

0800bbf4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d074      	beq.n	800bcf0 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d106      	bne.n	800bc20 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f7f7 f9a0 	bl	8002f60 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2202      	movs	r2, #2
 800bc24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	f003 0310 	and.w	r3, r3, #16
 800bc32:	2b10      	cmp	r3, #16
 800bc34:	d053      	beq.n	800bcde <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	22ca      	movs	r2, #202	@ 0xca
 800bc3c:	625a      	str	r2, [r3, #36]	@ 0x24
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2253      	movs	r2, #83	@ 0x53
 800bc44:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 fa4e 	bl	800c0e8 <RTC_EnterInitMode>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800bc50:	7bfb      	ldrb	r3, [r7, #15]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d124      	bne.n	800bca0 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	6999      	ldr	r1, [r3, #24]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	4b26      	ldr	r3, [pc, #152]	@ (800bcfc <HAL_RTC_Init+0x108>)
 800bc62:	400b      	ands	r3, r1
 800bc64:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	6999      	ldr	r1, [r3, #24]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	685a      	ldr	r2, [r3, #4]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	691b      	ldr	r3, [r3, #16]
 800bc74:	431a      	orrs	r2, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	699b      	ldr	r3, [r3, #24]
 800bc7a:	431a      	orrs	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	430a      	orrs	r2, r1
 800bc82:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	0419      	lsls	r1, r3, #16
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	68da      	ldr	r2, [r3, #12]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	430a      	orrs	r2, r1
 800bc94:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 fa5c 	bl	800c154 <RTC_ExitInitMode>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800bca0:	7bfb      	ldrb	r3, [r7, #15]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d116      	bne.n	800bcd4 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	699a      	ldr	r2, [r3, #24]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f022 4260 	bic.w	r2, r2, #3758096384	@ 0xe0000000
 800bcb4:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	6999      	ldr	r1, [r3, #24]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6a1a      	ldr	r2, [r3, #32]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	69db      	ldr	r3, [r3, #28]
 800bcc4:	431a      	orrs	r2, r3
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	695b      	ldr	r3, [r3, #20]
 800bcca:	431a      	orrs	r2, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	430a      	orrs	r2, r1
 800bcd2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	22ff      	movs	r2, #255	@ 0xff
 800bcda:	625a      	str	r2, [r3, #36]	@ 0x24
 800bcdc:	e001      	b.n	800bce2 <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800bcde:	2300      	movs	r3, #0
 800bce0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800bce2:	7bfb      	ldrb	r3, [r7, #15]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d103      	bne.n	800bcf0 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  /* return status */
  return status;
 800bcf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	fb8fffbf 	.word	0xfb8fffbf

0800bd00 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bd00:	b590      	push	{r4, r7, lr}
 800bd02:	b087      	sub	sp, #28
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d101      	bne.n	800bd1a <HAL_RTC_SetTime+0x1a>
 800bd16:	2302      	movs	r3, #2
 800bd18:	e089      	b.n	800be2e <HAL_RTC_SetTime+0x12e>
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2202      	movs	r2, #2
 800bd26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	22ca      	movs	r2, #202	@ 0xca
 800bd30:	625a      	str	r2, [r3, #36]	@ 0x24
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2253      	movs	r2, #83	@ 0x53
 800bd38:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bd3a:	68f8      	ldr	r0, [r7, #12]
 800bd3c:	f000 f9d4 	bl	800c0e8 <RTC_EnterInitMode>
 800bd40:	4603      	mov	r3, r0
 800bd42:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800bd44:	7cfb      	ldrb	r3, [r7, #19]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d161      	bne.n	800be0e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d126      	bne.n	800bd9e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	699b      	ldr	r3, [r3, #24]
 800bd56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d102      	bne.n	800bd64 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	2200      	movs	r2, #0
 800bd62:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f000 fa31 	bl	800c1d0 <RTC_ByteToBcd2>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	785b      	ldrb	r3, [r3, #1]
 800bd76:	4618      	mov	r0, r3
 800bd78:	f000 fa2a 	bl	800c1d0 <RTC_ByteToBcd2>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bd80:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	789b      	ldrb	r3, [r3, #2]
 800bd86:	4618      	mov	r0, r3
 800bd88:	f000 fa22 	bl	800c1d0 <RTC_ByteToBcd2>
 800bd8c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bd8e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	78db      	ldrb	r3, [r3, #3]
 800bd96:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	617b      	str	r3, [r7, #20]
 800bd9c:	e018      	b.n	800bdd0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	699b      	ldr	r3, [r3, #24]
 800bda4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d102      	bne.n	800bdb2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	785b      	ldrb	r3, [r3, #1]
 800bdbc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bdbe:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bdc4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	78db      	ldrb	r3, [r3, #3]
 800bdca:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	6979      	ldr	r1, [r7, #20]
 800bdd6:	4b18      	ldr	r3, [pc, #96]	@ (800be38 <HAL_RTC_SetTime+0x138>)
 800bdd8:	400b      	ands	r3, r1
 800bdda:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	699a      	ldr	r2, [r3, #24]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800bdea:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	6999      	ldr	r1, [r3, #24]
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	68da      	ldr	r2, [r3, #12]
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	431a      	orrs	r2, r3
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	430a      	orrs	r2, r1
 800be02:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f000 f9a5 	bl	800c154 <RTC_ExitInitMode>
 800be0a:	4603      	mov	r3, r0
 800be0c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	22ff      	movs	r2, #255	@ 0xff
 800be14:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800be16:	7cfb      	ldrb	r3, [r7, #19]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d103      	bne.n	800be24 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2201      	movs	r2, #1
 800be20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2200      	movs	r2, #0
 800be28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800be2c:	7cfb      	ldrb	r3, [r7, #19]
}
 800be2e:	4618      	mov	r0, r3
 800be30:	371c      	adds	r7, #28
 800be32:	46bd      	mov	sp, r7
 800be34:	bd90      	pop	{r4, r7, pc}
 800be36:	bf00      	nop
 800be38:	007f7f7f 	.word	0x007f7f7f

0800be3c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b086      	sub	sp, #24
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	689a      	ldr	r2, [r3, #8]
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	691b      	ldr	r3, [r3, #16]
 800be58:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	681a      	ldr	r2, [r3, #0]
 800be66:	4b22      	ldr	r3, [pc, #136]	@ (800bef0 <HAL_RTC_GetTime+0xb4>)
 800be68:	4013      	ands	r3, r2
 800be6a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	0c1b      	lsrs	r3, r3, #16
 800be70:	b2db      	uxtb	r3, r3
 800be72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be76:	b2da      	uxtb	r2, r3
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	0a1b      	lsrs	r3, r3, #8
 800be80:	b2db      	uxtb	r3, r3
 800be82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be86:	b2da      	uxtb	r2, r3
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be94:	b2da      	uxtb	r2, r3
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	0d9b      	lsrs	r3, r3, #22
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	f003 0301 	and.w	r3, r3, #1
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d11a      	bne.n	800bee6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	4618      	mov	r0, r3
 800beb6:	f000 f9ab 	bl	800c210 <RTC_Bcd2ToByte>
 800beba:	4603      	mov	r3, r0
 800bebc:	461a      	mov	r2, r3
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	785b      	ldrb	r3, [r3, #1]
 800bec6:	4618      	mov	r0, r3
 800bec8:	f000 f9a2 	bl	800c210 <RTC_Bcd2ToByte>
 800becc:	4603      	mov	r3, r0
 800bece:	461a      	mov	r2, r3
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	789b      	ldrb	r3, [r3, #2]
 800bed8:	4618      	mov	r0, r3
 800beda:	f000 f999 	bl	800c210 <RTC_Bcd2ToByte>
 800bede:	4603      	mov	r3, r0
 800bee0:	461a      	mov	r2, r3
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3718      	adds	r7, #24
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	007f7f7f 	.word	0x007f7f7f

0800bef4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bef4:	b590      	push	{r4, r7, lr}
 800bef6:	b087      	sub	sp, #28
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d101      	bne.n	800bf0e <HAL_RTC_SetDate+0x1a>
 800bf0a:	2302      	movs	r3, #2
 800bf0c:	e073      	b.n	800bff6 <HAL_RTC_SetDate+0x102>
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2201      	movs	r2, #1
 800bf12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2202      	movs	r2, #2
 800bf1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d10e      	bne.n	800bf42 <HAL_RTC_SetDate+0x4e>
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	785b      	ldrb	r3, [r3, #1]
 800bf28:	f003 0310 	and.w	r3, r3, #16
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d008      	beq.n	800bf42 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	785b      	ldrb	r3, [r3, #1]
 800bf34:	f023 0310 	bic.w	r3, r3, #16
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	330a      	adds	r3, #10
 800bf3c:	b2da      	uxtb	r2, r3
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d11c      	bne.n	800bf82 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	78db      	ldrb	r3, [r3, #3]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f000 f93f 	bl	800c1d0 <RTC_ByteToBcd2>
 800bf52:	4603      	mov	r3, r0
 800bf54:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	785b      	ldrb	r3, [r3, #1]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f000 f938 	bl	800c1d0 <RTC_ByteToBcd2>
 800bf60:	4603      	mov	r3, r0
 800bf62:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bf64:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	789b      	ldrb	r3, [r3, #2]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f000 f930 	bl	800c1d0 <RTC_ByteToBcd2>
 800bf70:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bf72:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	617b      	str	r3, [r7, #20]
 800bf80:	e00e      	b.n	800bfa0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	78db      	ldrb	r3, [r3, #3]
 800bf86:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	785b      	ldrb	r3, [r3, #1]
 800bf8c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bf8e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800bf90:	68ba      	ldr	r2, [r7, #8]
 800bf92:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bf94:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	22ca      	movs	r2, #202	@ 0xca
 800bfa6:	625a      	str	r2, [r3, #36]	@ 0x24
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2253      	movs	r2, #83	@ 0x53
 800bfae:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bfb0:	68f8      	ldr	r0, [r7, #12]
 800bfb2:	f000 f899 	bl	800c0e8 <RTC_EnterInitMode>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800bfba:	7cfb      	ldrb	r3, [r7, #19]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d10a      	bne.n	800bfd6 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681a      	ldr	r2, [r3, #0]
 800bfc4:	6979      	ldr	r1, [r7, #20]
 800bfc6:	4b0e      	ldr	r3, [pc, #56]	@ (800c000 <HAL_RTC_SetDate+0x10c>)
 800bfc8:	400b      	ands	r3, r1
 800bfca:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bfcc:	68f8      	ldr	r0, [r7, #12]
 800bfce:	f000 f8c1 	bl	800c154 <RTC_ExitInitMode>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	22ff      	movs	r2, #255	@ 0xff
 800bfdc:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800bfde:	7cfb      	ldrb	r3, [r7, #19]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d103      	bne.n	800bfec <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2200      	movs	r2, #0
 800bff0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800bff4:	7cfb      	ldrb	r3, [r7, #19]


}
 800bff6:	4618      	mov	r0, r3
 800bff8:	371c      	adds	r7, #28
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd90      	pop	{r4, r7, pc}
 800bffe:	bf00      	nop
 800c000:	00ffff3f 	.word	0x00ffff3f

0800c004 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b086      	sub	sp, #24
 800c008:	af00      	add	r7, sp, #0
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	685a      	ldr	r2, [r3, #4]
 800c016:	4b21      	ldr	r3, [pc, #132]	@ (800c09c <HAL_RTC_GetDate+0x98>)
 800c018:	4013      	ands	r3, r2
 800c01a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	0c1b      	lsrs	r3, r3, #16
 800c020:	b2da      	uxtb	r2, r3
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	0a1b      	lsrs	r3, r3, #8
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	f003 031f 	and.w	r3, r3, #31
 800c030:	b2da      	uxtb	r2, r3
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c03e:	b2da      	uxtb	r2, r3
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	0b5b      	lsrs	r3, r3, #13
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	f003 0307 	and.w	r3, r3, #7
 800c04e:	b2da      	uxtb	r2, r3
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d11a      	bne.n	800c090 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	78db      	ldrb	r3, [r3, #3]
 800c05e:	4618      	mov	r0, r3
 800c060:	f000 f8d6 	bl	800c210 <RTC_Bcd2ToByte>
 800c064:	4603      	mov	r3, r0
 800c066:	461a      	mov	r2, r3
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	785b      	ldrb	r3, [r3, #1]
 800c070:	4618      	mov	r0, r3
 800c072:	f000 f8cd 	bl	800c210 <RTC_Bcd2ToByte>
 800c076:	4603      	mov	r3, r0
 800c078:	461a      	mov	r2, r3
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	789b      	ldrb	r3, [r3, #2]
 800c082:	4618      	mov	r0, r3
 800c084:	f000 f8c4 	bl	800c210 <RTC_Bcd2ToByte>
 800c088:	4603      	mov	r3, r0
 800c08a:	461a      	mov	r2, r3
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c090:	2300      	movs	r3, #0
}
 800c092:	4618      	mov	r0, r3
 800c094:	3718      	adds	r7, #24
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	00ffff3f 	.word	0x00ffff3f

0800c0a0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a0d      	ldr	r2, [pc, #52]	@ (800c0e4 <HAL_RTC_WaitForSynchro+0x44>)
 800c0ae:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800c0b0:	f7f7 f95a 	bl	8003368 <HAL_GetTick>
 800c0b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800c0b6:	e009      	b.n	800c0cc <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c0b8:	f7f7 f956 	bl	8003368 <HAL_GetTick>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c0c6:	d901      	bls.n	800c0cc <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800c0c8:	2303      	movs	r3, #3
 800c0ca:	e007      	b.n	800c0dc <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	f003 0320 	and.w	r3, r3, #32
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d0ee      	beq.n	800c0b8 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3710      	adds	r7, #16
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	0001005f 	.word	0x0001005f

0800c0e8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d123      	bne.n	800c14a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	68da      	ldr	r2, [r3, #12]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c110:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c112:	f7f7 f929 	bl	8003368 <HAL_GetTick>
 800c116:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c118:	e00d      	b.n	800c136 <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c11a:	f7f7 f925 	bl	8003368 <HAL_GetTick>
 800c11e:	4602      	mov	r2, r0
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	1ad3      	subs	r3, r2, r3
 800c124:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c128:	d905      	bls.n	800c136 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800c12a:	2303      	movs	r3, #3
 800c12c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2203      	movs	r2, #3
 800c132:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c140:	2b00      	cmp	r3, #0
 800c142:	d102      	bne.n	800c14a <RTC_EnterInitMode+0x62>
 800c144:	7bfb      	ldrb	r3, [r7, #15]
 800c146:	2b03      	cmp	r3, #3
 800c148:	d1e7      	bne.n	800c11a <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800c14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3710      	adds	r7, #16
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c15c:	2300      	movs	r3, #0
 800c15e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c160:	4b1a      	ldr	r3, [pc, #104]	@ (800c1cc <RTC_ExitInitMode+0x78>)
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	4a19      	ldr	r2, [pc, #100]	@ (800c1cc <RTC_ExitInitMode+0x78>)
 800c166:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c16a:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c16c:	4b17      	ldr	r3, [pc, #92]	@ (800c1cc <RTC_ExitInitMode+0x78>)
 800c16e:	699b      	ldr	r3, [r3, #24]
 800c170:	f003 0320 	and.w	r3, r3, #32
 800c174:	2b00      	cmp	r3, #0
 800c176:	d10c      	bne.n	800c192 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f7ff ff91 	bl	800c0a0 <HAL_RTC_WaitForSynchro>
 800c17e:	4603      	mov	r3, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	d01e      	beq.n	800c1c2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2203      	movs	r2, #3
 800c188:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800c18c:	2303      	movs	r3, #3
 800c18e:	73fb      	strb	r3, [r7, #15]
 800c190:	e017      	b.n	800c1c2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c192:	4b0e      	ldr	r3, [pc, #56]	@ (800c1cc <RTC_ExitInitMode+0x78>)
 800c194:	699b      	ldr	r3, [r3, #24]
 800c196:	4a0d      	ldr	r2, [pc, #52]	@ (800c1cc <RTC_ExitInitMode+0x78>)
 800c198:	f023 0320 	bic.w	r3, r3, #32
 800c19c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f7ff ff7e 	bl	800c0a0 <HAL_RTC_WaitForSynchro>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d005      	beq.n	800c1b6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2203      	movs	r2, #3
 800c1ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800c1b2:	2303      	movs	r3, #3
 800c1b4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c1b6:	4b05      	ldr	r3, [pc, #20]	@ (800c1cc <RTC_ExitInitMode+0x78>)
 800c1b8:	699b      	ldr	r3, [r3, #24]
 800c1ba:	4a04      	ldr	r2, [pc, #16]	@ (800c1cc <RTC_ExitInitMode+0x78>)
 800c1bc:	f043 0320 	orr.w	r3, r3, #32
 800c1c0:	6193      	str	r3, [r2, #24]
  }

  return status;
 800c1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3710      	adds	r7, #16
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	58004000 	.word	0x58004000

0800c1d0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800c1de:	79fb      	ldrb	r3, [r7, #7]
 800c1e0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800c1e2:	e005      	b.n	800c1f0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800c1ea:	7afb      	ldrb	r3, [r7, #11]
 800c1ec:	3b0a      	subs	r3, #10
 800c1ee:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800c1f0:	7afb      	ldrb	r3, [r7, #11]
 800c1f2:	2b09      	cmp	r3, #9
 800c1f4:	d8f6      	bhi.n	800c1e4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	011b      	lsls	r3, r3, #4
 800c1fc:	b2da      	uxtb	r2, r3
 800c1fe:	7afb      	ldrb	r3, [r7, #11]
 800c200:	4313      	orrs	r3, r2
 800c202:	b2db      	uxtb	r3, r3
}
 800c204:	4618      	mov	r0, r3
 800c206:	3714      	adds	r7, #20
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	4603      	mov	r3, r0
 800c218:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800c21a:	79fb      	ldrb	r3, [r7, #7]
 800c21c:	091b      	lsrs	r3, r3, #4
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	461a      	mov	r2, r3
 800c222:	0092      	lsls	r2, r2, #2
 800c224:	4413      	add	r3, r2
 800c226:	005b      	lsls	r3, r3, #1
 800c228:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800c22a:	79fb      	ldrb	r3, [r7, #7]
 800c22c:	f003 030f 	and.w	r3, r3, #15
 800c230:	b2da      	uxtb	r2, r3
 800c232:	7bfb      	ldrb	r3, [r7, #15]
 800c234:	4413      	add	r3, r2
 800c236:	b2db      	uxtb	r3, r3
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3714      	adds	r7, #20
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b08a      	sub	sp, #40	@ 0x28
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d101      	bne.n	800c256 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c252:	2301      	movs	r3, #1
 800c254:	e075      	b.n	800c342 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d105      	bne.n	800c26e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2200      	movs	r2, #0
 800c266:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f7f6 fd0b 	bl	8002c84 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2204      	movs	r2, #4
 800c272:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f868 	bl	800c34c <HAL_SD_InitCard>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d001      	beq.n	800c286 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c282:	2301      	movs	r3, #1
 800c284:	e05d      	b.n	800c342 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c286:	f107 0308 	add.w	r3, r7, #8
 800c28a:	4619      	mov	r1, r3
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 fdb5 	bl	800cdfc <HAL_SD_GetCardStatus>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d001      	beq.n	800c29c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c298:	2301      	movs	r3, #1
 800c29a:	e052      	b.n	800c342 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c29c:	7e3b      	ldrb	r3, [r7, #24]
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c2a2:	7e7b      	ldrb	r3, [r7, #25]
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d10a      	bne.n	800c2c6 <HAL_SD_Init+0x82>
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d102      	bne.n	800c2bc <HAL_SD_Init+0x78>
 800c2b6:	6a3b      	ldr	r3, [r7, #32]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d004      	beq.n	800c2c6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c2c2:	659a      	str	r2, [r3, #88]	@ 0x58
 800c2c4:	e00b      	b.n	800c2de <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d104      	bne.n	800c2d8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c2d4:	659a      	str	r2, [r3, #88]	@ 0x58
 800c2d6:	e002      	b.n	800c2de <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 fe73 	bl	800cfd0 <HAL_SD_ConfigWideBusOperation>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d001      	beq.n	800c2f4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e026      	b.n	800c342 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c2f4:	f7f7 f838 	bl	8003368 <HAL_GetTick>
 800c2f8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c2fa:	e011      	b.n	800c320 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c2fc:	f7f7 f834 	bl	8003368 <HAL_GetTick>
 800c300:	4602      	mov	r2, r0
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	1ad3      	subs	r3, r2, r3
 800c306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c30a:	d109      	bne.n	800c320 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c312:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2201      	movs	r2, #1
 800c318:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800c31c:	2303      	movs	r3, #3
 800c31e:	e010      	b.n	800c342 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f000 ff67 	bl	800d1f4 <HAL_SD_GetCardState>
 800c326:	4603      	mov	r3, r0
 800c328:	2b04      	cmp	r3, #4
 800c32a:	d1e7      	bne.n	800c2fc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2201      	movs	r2, #1
 800c33c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3728      	adds	r7, #40	@ 0x28
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
	...

0800c34c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c34c:	b590      	push	{r4, r7, lr}
 800c34e:	b08d      	sub	sp, #52	@ 0x34
 800c350:	af02      	add	r7, sp, #8
 800c352:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c354:	2300      	movs	r3, #0
 800c356:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c358:	2300      	movs	r3, #0
 800c35a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c35c:	2300      	movs	r3, #0
 800c35e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c360:	2300      	movs	r3, #0
 800c362:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c364:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c368:	f04f 0100 	mov.w	r1, #0
 800c36c:	f7fe f9f6 	bl	800a75c <HAL_RCCEx_GetPeriphCLKFreq>
 800c370:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800c372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c374:	2b00      	cmp	r3, #0
 800c376:	d109      	bne.n	800c38c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2201      	movs	r2, #1
 800c37c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c386:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c388:	2301      	movs	r3, #1
 800c38a:	e070      	b.n	800c46e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38e:	0a1b      	lsrs	r3, r3, #8
 800c390:	4a39      	ldr	r2, [pc, #228]	@ (800c478 <HAL_SD_InitCard+0x12c>)
 800c392:	fba2 2303 	umull	r2, r3, r2, r3
 800c396:	091b      	lsrs	r3, r3, #4
 800c398:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681c      	ldr	r4, [r3, #0]
 800c39e:	466a      	mov	r2, sp
 800c3a0:	f107 0318 	add.w	r3, r7, #24
 800c3a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c3a8:	e882 0003 	stmia.w	r2, {r0, r1}
 800c3ac:	f107 030c 	add.w	r3, r7, #12
 800c3b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f002 f904 	bl	800e5c0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f002 f947 	bl	800e650 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c3c2:	69fb      	ldr	r3, [r7, #28]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d005      	beq.n	800c3d4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	005b      	lsls	r3, r3, #1
 800c3cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d007      	beq.n	800c3ea <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c3da:	4a28      	ldr	r2, [pc, #160]	@ (800c47c <HAL_SD_InitCard+0x130>)
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3de:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7f6 ffcb 	bl	8003380 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 fff0 	bl	800d3d0 <SD_PowerON>
 800c3f0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c3f2:	6a3b      	ldr	r3, [r7, #32]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d00b      	beq.n	800c410 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c404:	6a3b      	ldr	r3, [r7, #32]
 800c406:	431a      	orrs	r2, r3
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c40c:	2301      	movs	r3, #1
 800c40e:	e02e      	b.n	800c46e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 ff0f 	bl	800d234 <SD_InitCard>
 800c416:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c418:	6a3b      	ldr	r3, [r7, #32]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d00b      	beq.n	800c436 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c42a:	6a3b      	ldr	r3, [r7, #32]
 800c42c:	431a      	orrs	r2, r3
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c432:	2301      	movs	r3, #1
 800c434:	e01b      	b.n	800c46e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c43e:	4618      	mov	r0, r3
 800c440:	f002 f99c 	bl	800e77c <SDMMC_CmdBlockLength>
 800c444:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c446:	6a3b      	ldr	r3, [r7, #32]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d00f      	beq.n	800c46c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a0b      	ldr	r2, [pc, #44]	@ (800c480 <HAL_SD_InitCard+0x134>)
 800c452:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c458:	6a3b      	ldr	r3, [r7, #32]
 800c45a:	431a      	orrs	r2, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c468:	2301      	movs	r3, #1
 800c46a:	e000      	b.n	800c46e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c46c:	2300      	movs	r3, #0
}
 800c46e:	4618      	mov	r0, r3
 800c470:	372c      	adds	r7, #44	@ 0x2c
 800c472:	46bd      	mov	sp, r7
 800c474:	bd90      	pop	{r4, r7, pc}
 800c476:	bf00      	nop
 800c478:	014f8b59 	.word	0x014f8b59
 800c47c:	00012110 	.word	0x00012110
 800c480:	1fe00fff 	.word	0x1fe00fff

0800c484 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b092      	sub	sp, #72	@ 0x48
 800c488:	af00      	add	r7, sp, #0
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	607a      	str	r2, [r7, #4]
 800c490:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c492:	f7f6 ff69 	bl	8003368 <HAL_GetTick>
 800c496:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d107      	bne.n	800c4b6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4aa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e167      	b.n	800c786 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	f040 815a 	bne.w	800c778 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c4ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	441a      	add	r2, r3
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d907      	bls.n	800c4e8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4dc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e14e      	b.n	800c786 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2203      	movs	r2, #3
 800c4ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d002      	beq.n	800c506 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800c500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c502:	025b      	lsls	r3, r3, #9
 800c504:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c506:	f04f 33ff 	mov.w	r3, #4294967295
 800c50a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	025b      	lsls	r3, r3, #9
 800c510:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c512:	2390      	movs	r3, #144	@ 0x90
 800c514:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c516:	2302      	movs	r3, #2
 800c518:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c51a:	2300      	movs	r3, #0
 800c51c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c51e:	2300      	movs	r3, #0
 800c520:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f107 0214 	add.w	r2, r7, #20
 800c52a:	4611      	mov	r1, r2
 800c52c:	4618      	mov	r0, r3
 800c52e:	f002 f8f9 	bl	800e724 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68da      	ldr	r2, [r3, #12]
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c540:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	2b01      	cmp	r3, #1
 800c546:	d90a      	bls.n	800c55e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2202      	movs	r2, #2
 800c54c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c554:	4618      	mov	r0, r3
 800c556:	f002 f957 	bl	800e808 <SDMMC_CmdReadMultiBlock>
 800c55a:	6478      	str	r0, [r7, #68]	@ 0x44
 800c55c:	e009      	b.n	800c572 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2201      	movs	r2, #1
 800c562:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c56a:	4618      	mov	r0, r3
 800c56c:	f002 f929 	bl	800e7c2 <SDMMC_CmdReadSingleBlock>
 800c570:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c572:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c574:	2b00      	cmp	r3, #0
 800c576:	d012      	beq.n	800c59e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4a84      	ldr	r2, [pc, #528]	@ (800c790 <HAL_SD_ReadBlocks+0x30c>)
 800c57e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c586:	431a      	orrs	r2, r3
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2201      	movs	r2, #1
 800c590:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2200      	movs	r2, #0
 800c598:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c59a:	2301      	movs	r3, #1
 800c59c:	e0f3      	b.n	800c786 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c5a2:	e058      	b.n	800c656 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d033      	beq.n	800c61a <HAL_SD_ReadBlocks+0x196>
 800c5b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5b4:	2b1f      	cmp	r3, #31
 800c5b6:	d930      	bls.n	800c61a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5bc:	e027      	b.n	800c60e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f002 f826 	bl	800e614 <SDMMC_ReadFIFO>
 800c5c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800c5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5cc:	b2da      	uxtb	r2, r3
 800c5ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5d0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c5d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5da:	0a1b      	lsrs	r3, r3, #8
 800c5dc:	b2da      	uxtb	r2, r3
 800c5de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5e0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c5e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ea:	0c1b      	lsrs	r3, r3, #16
 800c5ec:	b2da      	uxtb	r2, r3
 800c5ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5f0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c5f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5fa:	0e1b      	lsrs	r3, r3, #24
 800c5fc:	b2da      	uxtb	r2, r3
 800c5fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c600:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c604:	3301      	adds	r3, #1
 800c606:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 800c608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c60a:	3301      	adds	r3, #1
 800c60c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c60e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c610:	2b07      	cmp	r3, #7
 800c612:	d9d4      	bls.n	800c5be <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800c614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c616:	3b20      	subs	r3, #32
 800c618:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800c61a:	f7f6 fea5 	bl	8003368 <HAL_GetTick>
 800c61e:	4602      	mov	r2, r0
 800c620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c622:	1ad3      	subs	r3, r2, r3
 800c624:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c626:	429a      	cmp	r2, r3
 800c628:	d902      	bls.n	800c630 <HAL_SD_ReadBlocks+0x1ac>
 800c62a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d112      	bne.n	800c656 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4a56      	ldr	r2, [pc, #344]	@ (800c790 <HAL_SD_ReadBlocks+0x30c>)
 800c636:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c63c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2201      	movs	r2, #1
 800c648:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2200      	movs	r2, #0
 800c650:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800c652:	2303      	movs	r3, #3
 800c654:	e097      	b.n	800c786 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c65c:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800c660:	2b00      	cmp	r3, #0
 800c662:	d09f      	beq.n	800c5a4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	68da      	ldr	r2, [r3, #12]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c672:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c67a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d022      	beq.n	800c6c8 <HAL_SD_ReadBlocks+0x244>
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	2b01      	cmp	r3, #1
 800c686:	d91f      	bls.n	800c6c8 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c68c:	2b03      	cmp	r3, #3
 800c68e:	d01b      	beq.n	800c6c8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4618      	mov	r0, r3
 800c696:	f002 f921 	bl	800e8dc <SDMMC_CmdStopTransfer>
 800c69a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800c69c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d012      	beq.n	800c6c8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4a3a      	ldr	r2, [pc, #232]	@ (800c790 <HAL_SD_ReadBlocks+0x30c>)
 800c6a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c6ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6b0:	431a      	orrs	r2, r3
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	e05e      	b.n	800c786 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6ce:	f003 0308 	and.w	r3, r3, #8
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d012      	beq.n	800c6fc <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4a2d      	ldr	r2, [pc, #180]	@ (800c790 <HAL_SD_ReadBlocks+0x30c>)
 800c6dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6e2:	f043 0208 	orr.w	r2, r3, #8
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	e044      	b.n	800c786 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c702:	f003 0302 	and.w	r3, r3, #2
 800c706:	2b00      	cmp	r3, #0
 800c708:	d012      	beq.n	800c730 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a20      	ldr	r2, [pc, #128]	@ (800c790 <HAL_SD_ReadBlocks+0x30c>)
 800c710:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c716:	f043 0202 	orr.w	r2, r3, #2
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2201      	movs	r2, #1
 800c722:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2200      	movs	r2, #0
 800c72a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	e02a      	b.n	800c786 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c736:	f003 0320 	and.w	r3, r3, #32
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d012      	beq.n	800c764 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4a13      	ldr	r2, [pc, #76]	@ (800c790 <HAL_SD_ReadBlocks+0x30c>)
 800c744:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c74a:	f043 0220 	orr.w	r2, r3, #32
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2201      	movs	r2, #1
 800c756:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2200      	movs	r2, #0
 800c75e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c760:	2301      	movs	r3, #1
 800c762:	e010      	b.n	800c786 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a0a      	ldr	r2, [pc, #40]	@ (800c794 <HAL_SD_ReadBlocks+0x310>)
 800c76a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2201      	movs	r2, #1
 800c770:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800c774:	2300      	movs	r3, #0
 800c776:	e006      	b.n	800c786 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c77c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c784:	2301      	movs	r3, #1
  }
}
 800c786:	4618      	mov	r0, r3
 800c788:	3748      	adds	r7, #72	@ 0x48
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	1fe00fff 	.word	0x1fe00fff
 800c794:	18000f3a 	.word	0x18000f3a

0800c798 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b092      	sub	sp, #72	@ 0x48
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
 800c7a4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c7a6:	f7f6 fddf 	bl	8003368 <HAL_GetTick>
 800c7aa:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d107      	bne.n	800c7ca <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7be:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e16b      	b.n	800caa2 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	f040 815e 	bne.w	800ca94 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c7de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	441a      	add	r2, r3
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d907      	bls.n	800c7fc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7f0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	e152      	b.n	800caa2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2203      	movs	r2, #3
 800c800:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2200      	movs	r2, #0
 800c80a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c810:	2b01      	cmp	r3, #1
 800c812:	d002      	beq.n	800c81a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800c814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c816:	025b      	lsls	r3, r3, #9
 800c818:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c81a:	f04f 33ff 	mov.w	r3, #4294967295
 800c81e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	025b      	lsls	r3, r3, #9
 800c824:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c826:	2390      	movs	r3, #144	@ 0x90
 800c828:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c82a:	2300      	movs	r3, #0
 800c82c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c82e:	2300      	movs	r3, #0
 800c830:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c832:	2300      	movs	r3, #0
 800c834:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f107 0218 	add.w	r2, r7, #24
 800c83e:	4611      	mov	r1, r2
 800c840:	4618      	mov	r0, r3
 800c842:	f001 ff6f 	bl	800e724 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	68da      	ldr	r2, [r3, #12]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c854:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d90a      	bls.n	800c872 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2220      	movs	r2, #32
 800c860:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c868:	4618      	mov	r0, r3
 800c86a:	f002 f813 	bl	800e894 <SDMMC_CmdWriteMultiBlock>
 800c86e:	6478      	str	r0, [r7, #68]	@ 0x44
 800c870:	e009      	b.n	800c886 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2210      	movs	r2, #16
 800c876:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c87e:	4618      	mov	r0, r3
 800c880:	f001 ffe5 	bl	800e84e <SDMMC_CmdWriteSingleBlock>
 800c884:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d012      	beq.n	800c8b2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a86      	ldr	r2, [pc, #536]	@ (800caac <HAL_SD_WriteBlocks+0x314>)
 800c892:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c89a:	431a      	orrs	r2, r3
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e0f7      	b.n	800caa2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800c8b6:	e05c      	b.n	800c972 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d037      	beq.n	800c936 <HAL_SD_WriteBlocks+0x19e>
 800c8c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8c8:	2b1f      	cmp	r3, #31
 800c8ca:	d934      	bls.n	800c936 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8d0:	e02b      	b.n	800c92a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800c8d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c8d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8da:	3301      	adds	r3, #1
 800c8dc:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800c8de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	021a      	lsls	r2, r3, #8
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c8ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800c8f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	041a      	lsls	r2, r3, #16
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c8fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8fe:	3301      	adds	r3, #1
 800c900:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	061a      	lsls	r2, r3, #24
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	4313      	orrs	r3, r2
 800c90c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c90e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c910:	3301      	adds	r3, #1
 800c912:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f107 0214 	add.w	r2, r7, #20
 800c91c:	4611      	mov	r1, r2
 800c91e:	4618      	mov	r0, r3
 800c920:	f001 fe85 	bl	800e62e <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800c924:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c926:	3301      	adds	r3, #1
 800c928:	643b      	str	r3, [r7, #64]	@ 0x40
 800c92a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c92c:	2b07      	cmp	r3, #7
 800c92e:	d9d0      	bls.n	800c8d2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800c930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c932:	3b20      	subs	r3, #32
 800c934:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800c936:	f7f6 fd17 	bl	8003368 <HAL_GetTick>
 800c93a:	4602      	mov	r2, r0
 800c93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c93e:	1ad3      	subs	r3, r2, r3
 800c940:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c942:	429a      	cmp	r2, r3
 800c944:	d902      	bls.n	800c94c <HAL_SD_WriteBlocks+0x1b4>
 800c946:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d112      	bne.n	800c972 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a56      	ldr	r2, [pc, #344]	@ (800caac <HAL_SD_WriteBlocks+0x314>)
 800c952:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c95a:	431a      	orrs	r2, r3
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2201      	movs	r2, #1
 800c964:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2200      	movs	r2, #0
 800c96c:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800c96e:	2303      	movs	r3, #3
 800c970:	e097      	b.n	800caa2 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c978:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d09b      	beq.n	800c8b8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	68da      	ldr	r2, [r3, #12]
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c98e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d022      	beq.n	800c9e4 <HAL_SD_WriteBlocks+0x24c>
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d91f      	bls.n	800c9e4 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9a8:	2b03      	cmp	r3, #3
 800c9aa:	d01b      	beq.n	800c9e4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f001 ff93 	bl	800e8dc <SDMMC_CmdStopTransfer>
 800c9b6:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800c9b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d012      	beq.n	800c9e4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4a3a      	ldr	r2, [pc, #232]	@ (800caac <HAL_SD_WriteBlocks+0x314>)
 800c9c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9cc:	431a      	orrs	r2, r3
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e05e      	b.n	800caa2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9ea:	f003 0308 	and.w	r3, r3, #8
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d012      	beq.n	800ca18 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a2d      	ldr	r2, [pc, #180]	@ (800caac <HAL_SD_WriteBlocks+0x314>)
 800c9f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9fe:	f043 0208 	orr.w	r2, r3, #8
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2201      	movs	r2, #1
 800ca0a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2200      	movs	r2, #0
 800ca12:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	e044      	b.n	800caa2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca1e:	f003 0302 	and.w	r3, r3, #2
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d012      	beq.n	800ca4c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a20      	ldr	r2, [pc, #128]	@ (800caac <HAL_SD_WriteBlocks+0x314>)
 800ca2c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca32:	f043 0202 	orr.w	r2, r3, #2
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2200      	movs	r2, #0
 800ca46:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e02a      	b.n	800caa2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca52:	f003 0310 	and.w	r3, r3, #16
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d012      	beq.n	800ca80 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4a13      	ldr	r2, [pc, #76]	@ (800caac <HAL_SD_WriteBlocks+0x314>)
 800ca60:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca66:	f043 0210 	orr.w	r2, r3, #16
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2201      	movs	r2, #1
 800ca72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	e010      	b.n	800caa2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a0a      	ldr	r2, [pc, #40]	@ (800cab0 <HAL_SD_WriteBlocks+0x318>)
 800ca86:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800ca90:	2300      	movs	r3, #0
 800ca92:	e006      	b.n	800caa2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca98:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800caa0:	2301      	movs	r3, #1
  }
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3748      	adds	r7, #72	@ 0x48
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	1fe00fff 	.word	0x1fe00fff
 800cab0:	18000f3a 	.word	0x18000f3a

0800cab4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cac2:	0f9b      	lsrs	r3, r3, #30
 800cac4:	b2da      	uxtb	r2, r3
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cace:	0e9b      	lsrs	r3, r3, #26
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	f003 030f 	and.w	r3, r3, #15
 800cad6:	b2da      	uxtb	r2, r3
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cae0:	0e1b      	lsrs	r3, r3, #24
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	f003 0303 	and.w	r3, r3, #3
 800cae8:	b2da      	uxtb	r2, r3
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800caf2:	0c1b      	lsrs	r3, r3, #16
 800caf4:	b2da      	uxtb	r2, r3
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cafe:	0a1b      	lsrs	r3, r3, #8
 800cb00:	b2da      	uxtb	r2, r3
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb0a:	b2da      	uxtb	r2, r3
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb14:	0d1b      	lsrs	r3, r3, #20
 800cb16:	b29a      	uxth	r2, r3
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb20:	0c1b      	lsrs	r3, r3, #16
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	f003 030f 	and.w	r3, r3, #15
 800cb28:	b2da      	uxtb	r2, r3
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb32:	0bdb      	lsrs	r3, r3, #15
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	f003 0301 	and.w	r3, r3, #1
 800cb3a:	b2da      	uxtb	r2, r3
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb44:	0b9b      	lsrs	r3, r3, #14
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	f003 0301 	and.w	r3, r3, #1
 800cb4c:	b2da      	uxtb	r2, r3
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb56:	0b5b      	lsrs	r3, r3, #13
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	f003 0301 	and.w	r3, r3, #1
 800cb5e:	b2da      	uxtb	r2, r3
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb68:	0b1b      	lsrs	r3, r3, #12
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	f003 0301 	and.w	r3, r3, #1
 800cb70:	b2da      	uxtb	r2, r3
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d163      	bne.n	800cc4c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb88:	009a      	lsls	r2, r3, #2
 800cb8a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800cb8e:	4013      	ands	r3, r2
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800cb94:	0f92      	lsrs	r2, r2, #30
 800cb96:	431a      	orrs	r2, r3
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cba0:	0edb      	lsrs	r3, r3, #27
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	f003 0307 	and.w	r3, r3, #7
 800cba8:	b2da      	uxtb	r2, r3
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbb2:	0e1b      	lsrs	r3, r3, #24
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	f003 0307 	and.w	r3, r3, #7
 800cbba:	b2da      	uxtb	r2, r3
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbc4:	0d5b      	lsrs	r3, r3, #21
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	f003 0307 	and.w	r3, r3, #7
 800cbcc:	b2da      	uxtb	r2, r3
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbd6:	0c9b      	lsrs	r3, r3, #18
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	f003 0307 	and.w	r3, r3, #7
 800cbde:	b2da      	uxtb	r2, r3
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbe8:	0bdb      	lsrs	r3, r3, #15
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	f003 0307 	and.w	r3, r3, #7
 800cbf0:	b2da      	uxtb	r2, r3
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	691b      	ldr	r3, [r3, #16]
 800cbfa:	1c5a      	adds	r2, r3, #1
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	7e1b      	ldrb	r3, [r3, #24]
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	f003 0307 	and.w	r3, r3, #7
 800cc0a:	3302      	adds	r3, #2
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800cc16:	fb03 f202 	mul.w	r2, r3, r2
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	7a1b      	ldrb	r3, [r3, #8]
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	f003 030f 	and.w	r3, r3, #15
 800cc28:	2201      	movs	r2, #1
 800cc2a:	409a      	lsls	r2, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800cc38:	0a52      	lsrs	r2, r2, #9
 800cc3a:	fb03 f202 	mul.w	r2, r3, r2
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc48:	655a      	str	r2, [r3, #84]	@ 0x54
 800cc4a:	e031      	b.n	800ccb0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d11d      	bne.n	800cc90 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cc58:	041b      	lsls	r3, r3, #16
 800cc5a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc62:	0c1b      	lsrs	r3, r3, #16
 800cc64:	431a      	orrs	r2, r3
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	3301      	adds	r3, #1
 800cc70:	029a      	lsls	r2, r3, #10
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc84:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	655a      	str	r2, [r3, #84]	@ 0x54
 800cc8e:	e00f      	b.n	800ccb0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a58      	ldr	r2, [pc, #352]	@ (800cdf8 <HAL_SD_GetCardCSD+0x344>)
 800cc96:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc9c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2201      	movs	r2, #1
 800cca8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800ccac:	2301      	movs	r3, #1
 800ccae:	e09d      	b.n	800cdec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccb4:	0b9b      	lsrs	r3, r3, #14
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	f003 0301 	and.w	r3, r3, #1
 800ccbc:	b2da      	uxtb	r2, r3
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccc6:	09db      	lsrs	r3, r3, #7
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccd8:	b2db      	uxtb	r3, r3
 800ccda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccde:	b2da      	uxtb	r2, r3
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cce8:	0fdb      	lsrs	r3, r3, #31
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ccf4:	0f5b      	lsrs	r3, r3, #29
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	f003 0303 	and.w	r3, r3, #3
 800ccfc:	b2da      	uxtb	r2, r3
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd06:	0e9b      	lsrs	r3, r3, #26
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	f003 0307 	and.w	r3, r3, #7
 800cd0e:	b2da      	uxtb	r2, r3
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd18:	0d9b      	lsrs	r3, r3, #22
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	f003 030f 	and.w	r3, r3, #15
 800cd20:	b2da      	uxtb	r2, r3
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd2a:	0d5b      	lsrs	r3, r3, #21
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	f003 0301 	and.w	r3, r3, #1
 800cd32:	b2da      	uxtb	r2, r3
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd46:	0c1b      	lsrs	r3, r3, #16
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	f003 0301 	and.w	r3, r3, #1
 800cd4e:	b2da      	uxtb	r2, r3
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd5a:	0bdb      	lsrs	r3, r3, #15
 800cd5c:	b2db      	uxtb	r3, r3
 800cd5e:	f003 0301 	and.w	r3, r3, #1
 800cd62:	b2da      	uxtb	r2, r3
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd6e:	0b9b      	lsrs	r3, r3, #14
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	f003 0301 	and.w	r3, r3, #1
 800cd76:	b2da      	uxtb	r2, r3
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd82:	0b5b      	lsrs	r3, r3, #13
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	f003 0301 	and.w	r3, r3, #1
 800cd8a:	b2da      	uxtb	r2, r3
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd96:	0b1b      	lsrs	r3, r3, #12
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	f003 0301 	and.w	r3, r3, #1
 800cd9e:	b2da      	uxtb	r2, r3
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cdaa:	0a9b      	lsrs	r3, r3, #10
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	f003 0303 	and.w	r3, r3, #3
 800cdb2:	b2da      	uxtb	r2, r3
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cdbe:	0a1b      	lsrs	r3, r3, #8
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	f003 0303 	and.w	r3, r3, #3
 800cdc6:	b2da      	uxtb	r2, r3
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cdd2:	085b      	lsrs	r3, r3, #1
 800cdd4:	b2db      	uxtb	r3, r3
 800cdd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cdda:	b2da      	uxtb	r2, r3
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	2201      	movs	r2, #1
 800cde6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800cdea:	2300      	movs	r3, #0
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr
 800cdf8:	1fe00fff 	.word	0x1fe00fff

0800cdfc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b094      	sub	sp, #80	@ 0x50
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ce06:	2300      	movs	r3, #0
 800ce08:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	2b03      	cmp	r3, #3
 800ce16:	d101      	bne.n	800ce1c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	e0a7      	b.n	800cf6c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ce1c:	f107 0308 	add.w	r3, r7, #8
 800ce20:	4619      	mov	r1, r3
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 fb62 	bl	800d4ec <SD_SendSDStatus>
 800ce28:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ce2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d011      	beq.n	800ce54 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a4f      	ldr	r2, [pc, #316]	@ (800cf74 <HAL_SD_GetCardStatus+0x178>)
 800ce36:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce3e:	431a      	orrs	r2, r3
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2201      	movs	r2, #1
 800ce48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800ce52:	e070      	b.n	800cf36 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	099b      	lsrs	r3, r3, #6
 800ce58:	b2db      	uxtb	r3, r3
 800ce5a:	f003 0303 	and.w	r3, r3, #3
 800ce5e:	b2da      	uxtb	r2, r3
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	095b      	lsrs	r3, r3, #5
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	f003 0301 	and.w	r3, r3, #1
 800ce6e:	b2da      	uxtb	r2, r3
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	0a1b      	lsrs	r3, r3, #8
 800ce78:	b29b      	uxth	r3, r3
 800ce7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ce7e:	b29a      	uxth	r2, r3
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	0e1b      	lsrs	r3, r3, #24
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	4313      	orrs	r3, r2
 800ce88:	b29a      	uxth	r2, r3
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	061a      	lsls	r2, r3, #24
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	021b      	lsls	r3, r3, #8
 800ce96:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ce9a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	0a1b      	lsrs	r3, r3, #8
 800cea0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cea4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	0e1b      	lsrs	r3, r3, #24
 800ceaa:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	b2da      	uxtb	r2, r3
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	0a1b      	lsrs	r3, r3, #8
 800cebc:	b2da      	uxtb	r2, r3
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	0d1b      	lsrs	r3, r3, #20
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	f003 030f 	and.w	r3, r3, #15
 800cecc:	b2da      	uxtb	r2, r3
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	0c1b      	lsrs	r3, r3, #16
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cedc:	b29a      	uxth	r2, r3
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	b29b      	uxth	r3, r3
 800cee6:	4313      	orrs	r3, r2
 800cee8:	b29a      	uxth	r2, r3
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	0a9b      	lsrs	r3, r3, #10
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cef8:	b2da      	uxtb	r2, r3
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	0a1b      	lsrs	r3, r3, #8
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	f003 0303 	and.w	r3, r3, #3
 800cf08:	b2da      	uxtb	r2, r3
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	091b      	lsrs	r3, r3, #4
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	f003 030f 	and.w	r3, r3, #15
 800cf18:	b2da      	uxtb	r2, r3
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	f003 030f 	and.w	r3, r3, #15
 800cf26:	b2da      	uxtb	r2, r3
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	0e1b      	lsrs	r3, r3, #24
 800cf30:	b2da      	uxtb	r2, r3
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f001 fc1c 	bl	800e77c <SDMMC_CmdBlockLength>
 800cf44:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00d      	beq.n	800cf68 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a08      	ldr	r2, [pc, #32]	@ (800cf74 <HAL_SD_GetCardStatus+0x178>)
 800cf52:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf58:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800cf68:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3750      	adds	r7, #80	@ 0x50
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	1fe00fff 	.word	0x1fe00fff

0800cf78 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cfc2:	2300      	movs	r3, #0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	370c      	adds	r7, #12
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cfd0:	b590      	push	{r4, r7, lr}
 800cfd2:	b08d      	sub	sp, #52	@ 0x34
 800cfd4:	af02      	add	r7, sp, #8
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2203      	movs	r2, #3
 800cfe4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfec:	2b03      	cmp	r3, #3
 800cfee:	d02e      	beq.n	800d04e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cff6:	d106      	bne.n	800d006 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cffc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	635a      	str	r2, [r3, #52]	@ 0x34
 800d004:	e029      	b.n	800d05a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d00c:	d10a      	bne.n	800d024 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f000 fb64 	bl	800d6dc <SD_WideBus_Enable>
 800d014:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d01a:	6a3b      	ldr	r3, [r7, #32]
 800d01c:	431a      	orrs	r2, r3
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	635a      	str	r2, [r3, #52]	@ 0x34
 800d022:	e01a      	b.n	800d05a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d10a      	bne.n	800d040 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 fba1 	bl	800d772 <SD_WideBus_Disable>
 800d030:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d036:	6a3b      	ldr	r3, [r7, #32]
 800d038:	431a      	orrs	r2, r3
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	635a      	str	r2, [r3, #52]	@ 0x34
 800d03e:	e00c      	b.n	800d05a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d044:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	635a      	str	r2, [r3, #52]	@ 0x34
 800d04c:	e005      	b.n	800d05a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d052:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d007      	beq.n	800d072 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	4a5f      	ldr	r2, [pc, #380]	@ (800d1e4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d068:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d06a:	2301      	movs	r3, #1
 800d06c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d070:	e096      	b.n	800d1a0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d072:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d076:	f04f 0100 	mov.w	r1, #0
 800d07a:	f7fd fb6f 	bl	800a75c <HAL_RCCEx_GetPeriphCLKFreq>
 800d07e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	2b00      	cmp	r3, #0
 800d084:	f000 8083 	beq.w	800d18e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	691b      	ldr	r3, [r3, #16]
 800d09c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	695a      	ldr	r2, [r3, #20]
 800d0a2:	69fb      	ldr	r3, [r7, #28]
 800d0a4:	4950      	ldr	r1, [pc, #320]	@ (800d1e8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d0a6:	fba1 1303 	umull	r1, r3, r1, r3
 800d0aa:	0e1b      	lsrs	r3, r3, #24
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d303      	bcc.n	800d0b8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	695b      	ldr	r3, [r3, #20]
 800d0b4:	61bb      	str	r3, [r7, #24]
 800d0b6:	e05a      	b.n	800d16e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d0c0:	d103      	bne.n	800d0ca <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	695b      	ldr	r3, [r3, #20]
 800d0c6:	61bb      	str	r3, [r7, #24]
 800d0c8:	e051      	b.n	800d16e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d0d2:	d126      	bne.n	800d122 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	695b      	ldr	r3, [r3, #20]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d10e      	bne.n	800d0fa <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d0dc:	69fb      	ldr	r3, [r7, #28]
 800d0de:	4a43      	ldr	r2, [pc, #268]	@ (800d1ec <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d906      	bls.n	800d0f2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d0e4:	69fb      	ldr	r3, [r7, #28]
 800d0e6:	4a40      	ldr	r2, [pc, #256]	@ (800d1e8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d0e8:	fba2 2303 	umull	r2, r3, r2, r3
 800d0ec:	0e5b      	lsrs	r3, r3, #25
 800d0ee:	61bb      	str	r3, [r7, #24]
 800d0f0:	e03d      	b.n	800d16e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	695b      	ldr	r3, [r3, #20]
 800d0f6:	61bb      	str	r3, [r7, #24]
 800d0f8:	e039      	b.n	800d16e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	695b      	ldr	r3, [r3, #20]
 800d0fe:	005b      	lsls	r3, r3, #1
 800d100:	69fa      	ldr	r2, [r7, #28]
 800d102:	fbb2 f3f3 	udiv	r3, r2, r3
 800d106:	4a39      	ldr	r2, [pc, #228]	@ (800d1ec <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d108:	4293      	cmp	r3, r2
 800d10a:	d906      	bls.n	800d11a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	4a36      	ldr	r2, [pc, #216]	@ (800d1e8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d110:	fba2 2303 	umull	r2, r3, r2, r3
 800d114:	0e5b      	lsrs	r3, r3, #25
 800d116:	61bb      	str	r3, [r7, #24]
 800d118:	e029      	b.n	800d16e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	695b      	ldr	r3, [r3, #20]
 800d11e:	61bb      	str	r3, [r7, #24]
 800d120:	e025      	b.n	800d16e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	695b      	ldr	r3, [r3, #20]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d10e      	bne.n	800d148 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	4a30      	ldr	r2, [pc, #192]	@ (800d1f0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d906      	bls.n	800d140 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d132:	69fb      	ldr	r3, [r7, #28]
 800d134:	4a2c      	ldr	r2, [pc, #176]	@ (800d1e8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d136:	fba2 2303 	umull	r2, r3, r2, r3
 800d13a:	0e1b      	lsrs	r3, r3, #24
 800d13c:	61bb      	str	r3, [r7, #24]
 800d13e:	e016      	b.n	800d16e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	695b      	ldr	r3, [r3, #20]
 800d144:	61bb      	str	r3, [r7, #24]
 800d146:	e012      	b.n	800d16e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	695b      	ldr	r3, [r3, #20]
 800d14c:	005b      	lsls	r3, r3, #1
 800d14e:	69fa      	ldr	r2, [r7, #28]
 800d150:	fbb2 f3f3 	udiv	r3, r2, r3
 800d154:	4a26      	ldr	r2, [pc, #152]	@ (800d1f0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d906      	bls.n	800d168 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	4a22      	ldr	r2, [pc, #136]	@ (800d1e8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d15e:	fba2 2303 	umull	r2, r3, r2, r3
 800d162:	0e1b      	lsrs	r3, r3, #24
 800d164:	61bb      	str	r3, [r7, #24]
 800d166:	e002      	b.n	800d16e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	695b      	ldr	r3, [r3, #20]
 800d16c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681c      	ldr	r4, [r3, #0]
 800d172:	466a      	mov	r2, sp
 800d174:	f107 0314 	add.w	r3, r7, #20
 800d178:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d17c:	e882 0003 	stmia.w	r2, {r0, r1}
 800d180:	f107 0308 	add.w	r3, r7, #8
 800d184:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d186:	4620      	mov	r0, r4
 800d188:	f001 fa1a 	bl	800e5c0 <SDMMC_Init>
 800d18c:	e008      	b.n	800d1a0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d192:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800d19a:	2301      	movs	r3, #1
 800d19c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f001 fae7 	bl	800e77c <SDMMC_CmdBlockLength>
 800d1ae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1b0:	6a3b      	ldr	r3, [r7, #32]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d00c      	beq.n	800d1d0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a0a      	ldr	r2, [pc, #40]	@ (800d1e4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d1bc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d1c2:	6a3b      	ldr	r3, [r7, #32]
 800d1c4:	431a      	orrs	r2, r3
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800d1d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	372c      	adds	r7, #44	@ 0x2c
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd90      	pop	{r4, r7, pc}
 800d1e4:	1fe00fff 	.word	0x1fe00fff
 800d1e8:	55e63b89 	.word	0x55e63b89
 800d1ec:	02faf080 	.word	0x02faf080
 800d1f0:	017d7840 	.word	0x017d7840

0800d1f4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b086      	sub	sp, #24
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d200:	f107 030c 	add.w	r3, r7, #12
 800d204:	4619      	mov	r1, r3
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 fa40 	bl	800d68c <SD_SendStatus>
 800d20c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d005      	beq.n	800d220 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	431a      	orrs	r2, r3
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	0a5b      	lsrs	r3, r3, #9
 800d224:	f003 030f 	and.w	r3, r3, #15
 800d228:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d22a:	693b      	ldr	r3, [r7, #16]
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3718      	adds	r7, #24
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b090      	sub	sp, #64	@ 0x40
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800d23c:	2300      	movs	r3, #0
 800d23e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800d240:	f7f6 f892 	bl	8003368 <HAL_GetTick>
 800d244:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4618      	mov	r0, r3
 800d24c:	f001 fa11 	bl	800e672 <SDMMC_GetPowerState>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d102      	bne.n	800d25c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d256:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d25a:	e0b5      	b.n	800d3c8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d260:	2b03      	cmp	r3, #3
 800d262:	d02e      	beq.n	800d2c2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4618      	mov	r0, r3
 800d26a:	f001 fc5c 	bl	800eb26 <SDMMC_CmdSendCID>
 800d26e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d272:	2b00      	cmp	r3, #0
 800d274:	d001      	beq.n	800d27a <SD_InitCard+0x46>
    {
      return errorstate;
 800d276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d278:	e0a6      	b.n	800d3c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	2100      	movs	r1, #0
 800d280:	4618      	mov	r0, r3
 800d282:	f001 fa3c 	bl	800e6fe <SDMMC_GetResponse>
 800d286:	4602      	mov	r2, r0
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2104      	movs	r1, #4
 800d292:	4618      	mov	r0, r3
 800d294:	f001 fa33 	bl	800e6fe <SDMMC_GetResponse>
 800d298:	4602      	mov	r2, r0
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2108      	movs	r1, #8
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f001 fa2a 	bl	800e6fe <SDMMC_GetResponse>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	210c      	movs	r1, #12
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f001 fa21 	bl	800e6fe <SDMMC_GetResponse>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2c6:	2b03      	cmp	r3, #3
 800d2c8:	d01d      	beq.n	800d306 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d2ca:	e019      	b.n	800d300 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f107 020a 	add.w	r2, r7, #10
 800d2d4:	4611      	mov	r1, r2
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f001 fc64 	bl	800eba4 <SDMMC_CmdSetRelAdd>
 800d2dc:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d001      	beq.n	800d2e8 <SD_InitCard+0xb4>
      {
        return errorstate;
 800d2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2e6:	e06f      	b.n	800d3c8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d2e8:	f7f6 f83e 	bl	8003368 <HAL_GetTick>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	f241 3287 	movw	r2, #4999	@ 0x1387
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d902      	bls.n	800d300 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d2fa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d2fe:	e063      	b.n	800d3c8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d300:	897b      	ldrh	r3, [r7, #10]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d0e2      	beq.n	800d2cc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d30a:	2b03      	cmp	r3, #3
 800d30c:	d036      	beq.n	800d37c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d30e:	897b      	ldrh	r3, [r7, #10]
 800d310:	461a      	mov	r2, r3
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d31e:	041b      	lsls	r3, r3, #16
 800d320:	4619      	mov	r1, r3
 800d322:	4610      	mov	r0, r2
 800d324:	f001 fc1e 	bl	800eb64 <SDMMC_CmdSendCSD>
 800d328:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d001      	beq.n	800d334 <SD_InitCard+0x100>
    {
      return errorstate;
 800d330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d332:	e049      	b.n	800d3c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2100      	movs	r1, #0
 800d33a:	4618      	mov	r0, r3
 800d33c:	f001 f9df 	bl	800e6fe <SDMMC_GetResponse>
 800d340:	4602      	mov	r2, r0
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2104      	movs	r1, #4
 800d34c:	4618      	mov	r0, r3
 800d34e:	f001 f9d6 	bl	800e6fe <SDMMC_GetResponse>
 800d352:	4602      	mov	r2, r0
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2108      	movs	r1, #8
 800d35e:	4618      	mov	r0, r3
 800d360:	f001 f9cd 	bl	800e6fe <SDMMC_GetResponse>
 800d364:	4602      	mov	r2, r0
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	210c      	movs	r1, #12
 800d370:	4618      	mov	r0, r3
 800d372:	f001 f9c4 	bl	800e6fe <SDMMC_GetResponse>
 800d376:	4602      	mov	r2, r0
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	2104      	movs	r1, #4
 800d382:	4618      	mov	r0, r3
 800d384:	f001 f9bb 	bl	800e6fe <SDMMC_GetResponse>
 800d388:	4603      	mov	r3, r0
 800d38a:	0d1a      	lsrs	r2, r3, #20
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d390:	f107 030c 	add.w	r3, r7, #12
 800d394:	4619      	mov	r1, r3
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f7ff fb8c 	bl	800cab4 <HAL_SD_GetCardCSD>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d002      	beq.n	800d3a8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d3a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d3a6:	e00f      	b.n	800d3c8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3b0:	041b      	lsls	r3, r3, #16
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	4610      	mov	r0, r2
 800d3b6:	f001 facd 	bl	800e954 <SDMMC_CmdSelDesel>
 800d3ba:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d001      	beq.n	800d3c6 <SD_InitCard+0x192>
  {
    return errorstate;
 800d3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c4:	e000      	b.n	800d3c8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d3c6:	2300      	movs	r3, #0
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3740      	adds	r7, #64	@ 0x40
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b086      	sub	sp, #24
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f001 fad6 	bl	800e99a <SDMMC_CmdGoIdleState>
 800d3ee:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d001      	beq.n	800d3fa <SD_PowerON+0x2a>
  {
    return errorstate;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	e072      	b.n	800d4e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	4618      	mov	r0, r3
 800d400:	f001 fae9 	bl	800e9d6 <SDMMC_CmdOperCond>
 800d404:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d40c:	d10d      	bne.n	800d42a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2200      	movs	r2, #0
 800d412:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4618      	mov	r0, r3
 800d41a:	f001 fabe 	bl	800e99a <SDMMC_CmdGoIdleState>
 800d41e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d004      	beq.n	800d430 <SD_PowerON+0x60>
    {
      return errorstate;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	e05a      	b.n	800d4e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2201      	movs	r2, #1
 800d42e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d434:	2b01      	cmp	r3, #1
 800d436:	d137      	bne.n	800d4a8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	2100      	movs	r1, #0
 800d43e:	4618      	mov	r0, r3
 800d440:	f001 fae9 	bl	800ea16 <SDMMC_CmdAppCommand>
 800d444:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d02d      	beq.n	800d4a8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d44c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d450:	e046      	b.n	800d4e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2100      	movs	r1, #0
 800d458:	4618      	mov	r0, r3
 800d45a:	f001 fadc 	bl	800ea16 <SDMMC_CmdAppCommand>
 800d45e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d001      	beq.n	800d46a <SD_PowerON+0x9a>
    {
      return errorstate;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	e03a      	b.n	800d4e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	491e      	ldr	r1, [pc, #120]	@ (800d4e8 <SD_PowerON+0x118>)
 800d470:	4618      	mov	r0, r3
 800d472:	f001 faf3 	bl	800ea5c <SDMMC_CmdAppOperCommand>
 800d476:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d002      	beq.n	800d484 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d47e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d482:	e02d      	b.n	800d4e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	2100      	movs	r1, #0
 800d48a:	4618      	mov	r0, r3
 800d48c:	f001 f937 	bl	800e6fe <SDMMC_GetResponse>
 800d490:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	0fdb      	lsrs	r3, r3, #31
 800d496:	2b01      	cmp	r3, #1
 800d498:	d101      	bne.n	800d49e <SD_PowerON+0xce>
 800d49a:	2301      	movs	r3, #1
 800d49c:	e000      	b.n	800d4a0 <SD_PowerON+0xd0>
 800d49e:	2300      	movs	r3, #0
 800d4a0:	613b      	str	r3, [r7, #16]

    count++;
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d802      	bhi.n	800d4b8 <SD_PowerON+0xe8>
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d0cc      	beq.n	800d452 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d902      	bls.n	800d4c8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d4c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d4c6:	e00b      	b.n	800d4e0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d002      	beq.n	800d4de <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d4de:	2300      	movs	r3, #0
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3718      	adds	r7, #24
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}
 800d4e8:	c1100000 	.word	0xc1100000

0800d4ec <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b08c      	sub	sp, #48	@ 0x30
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d4f6:	f7f5 ff37 	bl	8003368 <HAL_GetTick>
 800d4fa:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	2100      	movs	r1, #0
 800d506:	4618      	mov	r0, r3
 800d508:	f001 f8f9 	bl	800e6fe <SDMMC_GetResponse>
 800d50c:	4603      	mov	r3, r0
 800d50e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d512:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d516:	d102      	bne.n	800d51e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d518:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d51c:	e0b0      	b.n	800d680 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	2140      	movs	r1, #64	@ 0x40
 800d524:	4618      	mov	r0, r3
 800d526:	f001 f929 	bl	800e77c <SDMMC_CmdBlockLength>
 800d52a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d52c:	6a3b      	ldr	r3, [r7, #32]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d005      	beq.n	800d53e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d53a:	6a3b      	ldr	r3, [r7, #32]
 800d53c:	e0a0      	b.n	800d680 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681a      	ldr	r2, [r3, #0]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d546:	041b      	lsls	r3, r3, #16
 800d548:	4619      	mov	r1, r3
 800d54a:	4610      	mov	r0, r2
 800d54c:	f001 fa63 	bl	800ea16 <SDMMC_CmdAppCommand>
 800d550:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d552:	6a3b      	ldr	r3, [r7, #32]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d005      	beq.n	800d564 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d560:	6a3b      	ldr	r3, [r7, #32]
 800d562:	e08d      	b.n	800d680 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d564:	f04f 33ff 	mov.w	r3, #4294967295
 800d568:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d56a:	2340      	movs	r3, #64	@ 0x40
 800d56c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d56e:	2360      	movs	r3, #96	@ 0x60
 800d570:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d572:	2302      	movs	r3, #2
 800d574:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d576:	2300      	movs	r3, #0
 800d578:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d57a:	2301      	movs	r3, #1
 800d57c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f107 0208 	add.w	r2, r7, #8
 800d586:	4611      	mov	r1, r2
 800d588:	4618      	mov	r0, r3
 800d58a:	f001 f8cb 	bl	800e724 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4618      	mov	r0, r3
 800d594:	f001 fb4b 	bl	800ec2e <SDMMC_CmdStatusRegister>
 800d598:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d59a:	6a3b      	ldr	r3, [r7, #32]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d02b      	beq.n	800d5f8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d5a8:	6a3b      	ldr	r3, [r7, #32]
 800d5aa:	e069      	b.n	800d680 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d013      	beq.n	800d5e2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d5be:	e00d      	b.n	800d5dc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f001 f825 	bl	800e614 <SDMMC_ReadFIFO>
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ce:	601a      	str	r2, [r3, #0]
        pData++;
 800d5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d2:	3304      	adds	r3, #4
 800d5d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800d5d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5d8:	3301      	adds	r3, #1
 800d5da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5de:	2b07      	cmp	r3, #7
 800d5e0:	d9ee      	bls.n	800d5c0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d5e2:	f7f5 fec1 	bl	8003368 <HAL_GetTick>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ea:	1ad3      	subs	r3, r2, r3
 800d5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f0:	d102      	bne.n	800d5f8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d5f2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d5f6:	e043      	b.n	800d680 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5fe:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d602:	2b00      	cmp	r3, #0
 800d604:	d0d2      	beq.n	800d5ac <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d60c:	f003 0308 	and.w	r3, r3, #8
 800d610:	2b00      	cmp	r3, #0
 800d612:	d001      	beq.n	800d618 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d614:	2308      	movs	r3, #8
 800d616:	e033      	b.n	800d680 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d61e:	f003 0302 	and.w	r3, r3, #2
 800d622:	2b00      	cmp	r3, #0
 800d624:	d001      	beq.n	800d62a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d626:	2302      	movs	r3, #2
 800d628:	e02a      	b.n	800d680 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d630:	f003 0320 	and.w	r3, r3, #32
 800d634:	2b00      	cmp	r3, #0
 800d636:	d017      	beq.n	800d668 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d638:	2320      	movs	r3, #32
 800d63a:	e021      	b.n	800d680 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4618      	mov	r0, r3
 800d642:	f000 ffe7 	bl	800e614 <SDMMC_ReadFIFO>
 800d646:	4602      	mov	r2, r0
 800d648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d64a:	601a      	str	r2, [r3, #0]
    pData++;
 800d64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d64e:	3304      	adds	r3, #4
 800d650:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d652:	f7f5 fe89 	bl	8003368 <HAL_GetTick>
 800d656:	4602      	mov	r2, r0
 800d658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d65a:	1ad3      	subs	r3, r2, r3
 800d65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d660:	d102      	bne.n	800d668 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d662:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d666:	e00b      	b.n	800d680 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d66e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d672:	2b00      	cmp	r3, #0
 800d674:	d1e2      	bne.n	800d63c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4a03      	ldr	r2, [pc, #12]	@ (800d688 <SD_SendSDStatus+0x19c>)
 800d67c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800d67e:	2300      	movs	r3, #0
}
 800d680:	4618      	mov	r0, r3
 800d682:	3730      	adds	r7, #48	@ 0x30
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}
 800d688:	18000f3a 	.word	0x18000f3a

0800d68c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b084      	sub	sp, #16
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d102      	bne.n	800d6a2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d69c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d6a0:	e018      	b.n	800d6d4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681a      	ldr	r2, [r3, #0]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6aa:	041b      	lsls	r3, r3, #16
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	4610      	mov	r0, r2
 800d6b0:	f001 fa9a 	bl	800ebe8 <SDMMC_CmdSendStatus>
 800d6b4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d001      	beq.n	800d6c0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	e009      	b.n	800d6d4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	2100      	movs	r1, #0
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f001 f819 	bl	800e6fe <SDMMC_GetResponse>
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d6d2:	2300      	movs	r3, #0
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3710      	adds	r7, #16
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b086      	sub	sp, #24
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	60fb      	str	r3, [r7, #12]
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	2100      	movs	r1, #0
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f001 f803 	bl	800e6fe <SDMMC_GetResponse>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d6fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d702:	d102      	bne.n	800d70a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d704:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d708:	e02f      	b.n	800d76a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d70a:	f107 030c 	add.w	r3, r7, #12
 800d70e:	4619      	mov	r1, r3
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 f879 	bl	800d808 <SD_FindSCR>
 800d716:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d001      	beq.n	800d722 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	e023      	b.n	800d76a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d01c      	beq.n	800d766 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681a      	ldr	r2, [r3, #0]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d734:	041b      	lsls	r3, r3, #16
 800d736:	4619      	mov	r1, r3
 800d738:	4610      	mov	r0, r2
 800d73a:	f001 f96c 	bl	800ea16 <SDMMC_CmdAppCommand>
 800d73e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d001      	beq.n	800d74a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	e00f      	b.n	800d76a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2102      	movs	r1, #2
 800d750:	4618      	mov	r0, r3
 800d752:	f001 f9a3 	bl	800ea9c <SDMMC_CmdBusWidth>
 800d756:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d001      	beq.n	800d762 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	e003      	b.n	800d76a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d762:	2300      	movs	r3, #0
 800d764:	e001      	b.n	800d76a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d766:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3718      	adds	r7, #24
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d772:	b580      	push	{r7, lr}
 800d774:	b086      	sub	sp, #24
 800d776:	af00      	add	r7, sp, #0
 800d778:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d77a:	2300      	movs	r3, #0
 800d77c:	60fb      	str	r3, [r7, #12]
 800d77e:	2300      	movs	r3, #0
 800d780:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2100      	movs	r1, #0
 800d788:	4618      	mov	r0, r3
 800d78a:	f000 ffb8 	bl	800e6fe <SDMMC_GetResponse>
 800d78e:	4603      	mov	r3, r0
 800d790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d794:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d798:	d102      	bne.n	800d7a0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d79a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d79e:	e02f      	b.n	800d800 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d7a0:	f107 030c 	add.w	r3, r7, #12
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 f82e 	bl	800d808 <SD_FindSCR>
 800d7ac:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d001      	beq.n	800d7b8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	e023      	b.n	800d800 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d01c      	beq.n	800d7fc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7ca:	041b      	lsls	r3, r3, #16
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	4610      	mov	r0, r2
 800d7d0:	f001 f921 	bl	800ea16 <SDMMC_CmdAppCommand>
 800d7d4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d001      	beq.n	800d7e0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	e00f      	b.n	800d800 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2100      	movs	r1, #0
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f001 f958 	bl	800ea9c <SDMMC_CmdBusWidth>
 800d7ec:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d001      	beq.n	800d7f8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	e003      	b.n	800d800 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	e001      	b.n	800d800 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d7fc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d800:	4618      	mov	r0, r3
 800d802:	3718      	adds	r7, #24
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b08e      	sub	sp, #56	@ 0x38
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d812:	f7f5 fda9 	bl	8003368 <HAL_GetTick>
 800d816:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800d818:	2300      	movs	r3, #0
 800d81a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d81c:	2300      	movs	r3, #0
 800d81e:	60bb      	str	r3, [r7, #8]
 800d820:	2300      	movs	r3, #0
 800d822:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2108      	movs	r1, #8
 800d82e:	4618      	mov	r0, r3
 800d830:	f000 ffa4 	bl	800e77c <SDMMC_CmdBlockLength>
 800d834:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d001      	beq.n	800d840 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d83e:	e0ad      	b.n	800d99c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d848:	041b      	lsls	r3, r3, #16
 800d84a:	4619      	mov	r1, r3
 800d84c:	4610      	mov	r0, r2
 800d84e:	f001 f8e2 	bl	800ea16 <SDMMC_CmdAppCommand>
 800d852:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d856:	2b00      	cmp	r3, #0
 800d858:	d001      	beq.n	800d85e <SD_FindSCR+0x56>
  {
    return errorstate;
 800d85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d85c:	e09e      	b.n	800d99c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d85e:	f04f 33ff 	mov.w	r3, #4294967295
 800d862:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d864:	2308      	movs	r3, #8
 800d866:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d868:	2330      	movs	r3, #48	@ 0x30
 800d86a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d86c:	2302      	movs	r3, #2
 800d86e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d870:	2300      	movs	r3, #0
 800d872:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d874:	2301      	movs	r3, #1
 800d876:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f107 0210 	add.w	r2, r7, #16
 800d880:	4611      	mov	r1, r2
 800d882:	4618      	mov	r0, r3
 800d884:	f000 ff4e 	bl	800e724 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4618      	mov	r0, r3
 800d88e:	f001 f928 	bl	800eae2 <SDMMC_CmdSendSCR>
 800d892:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d896:	2b00      	cmp	r3, #0
 800d898:	d027      	beq.n	800d8ea <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d89c:	e07e      	b.n	800d99c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d113      	bne.n	800d8d4 <SD_FindSCR+0xcc>
 800d8ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d110      	bne.n	800d8d4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f000 feac 	bl	800e614 <SDMMC_ReadFIFO>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f000 fea5 	bl	800e614 <SDMMC_ReadFIFO>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	60fb      	str	r3, [r7, #12]
      index++;
 800d8ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d8d4:	f7f5 fd48 	bl	8003368 <HAL_GetTick>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8dc:	1ad3      	subs	r3, r2, r3
 800d8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e2:	d102      	bne.n	800d8ea <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d8e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d8e8:	e058      	b.n	800d99c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d8f0:	f240 532a 	movw	r3, #1322	@ 0x52a
 800d8f4:	4013      	ands	r3, r2
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d0d1      	beq.n	800d89e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d900:	f003 0308 	and.w	r3, r3, #8
 800d904:	2b00      	cmp	r3, #0
 800d906:	d005      	beq.n	800d914 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	2208      	movs	r2, #8
 800d90e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d910:	2308      	movs	r3, #8
 800d912:	e043      	b.n	800d99c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d91a:	f003 0302 	and.w	r3, r3, #2
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d005      	beq.n	800d92e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2202      	movs	r2, #2
 800d928:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d92a:	2302      	movs	r3, #2
 800d92c:	e036      	b.n	800d99c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d934:	f003 0320 	and.w	r3, r3, #32
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d005      	beq.n	800d948 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	2220      	movs	r2, #32
 800d942:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d944:	2320      	movs	r3, #32
 800d946:	e029      	b.n	800d99c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a15      	ldr	r2, [pc, #84]	@ (800d9a4 <SD_FindSCR+0x19c>)
 800d94e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	061a      	lsls	r2, r3, #24
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	021b      	lsls	r3, r3, #8
 800d958:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d95c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	0a1b      	lsrs	r3, r3, #8
 800d962:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d966:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	0e1b      	lsrs	r3, r3, #24
 800d96c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d96e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d970:	601a      	str	r2, [r3, #0]
    scr++;
 800d972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d974:	3304      	adds	r3, #4
 800d976:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	061a      	lsls	r2, r3, #24
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	021b      	lsls	r3, r3, #8
 800d980:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d984:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	0a1b      	lsrs	r3, r3, #8
 800d98a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d98e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	0e1b      	lsrs	r3, r3, #24
 800d994:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d998:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d99a:	2300      	movs	r3, #0
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3738      	adds	r7, #56	@ 0x38
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	18000f3a 	.word	0x18000f3a

0800d9a8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d101      	bne.n	800d9ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e10f      	b.n	800dbda <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4a87      	ldr	r2, [pc, #540]	@ (800dbe4 <HAL_SPI_Init+0x23c>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d00f      	beq.n	800d9ea <HAL_SPI_Init+0x42>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	4a86      	ldr	r2, [pc, #536]	@ (800dbe8 <HAL_SPI_Init+0x240>)
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d00a      	beq.n	800d9ea <HAL_SPI_Init+0x42>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a84      	ldr	r2, [pc, #528]	@ (800dbec <HAL_SPI_Init+0x244>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d005      	beq.n	800d9ea <HAL_SPI_Init+0x42>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	68db      	ldr	r3, [r3, #12]
 800d9e2:	2b0f      	cmp	r3, #15
 800d9e4:	d901      	bls.n	800d9ea <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	e0f7      	b.n	800dbda <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 fdcc 	bl	800e588 <SPI_GetPacketSize>
 800d9f0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4a7b      	ldr	r2, [pc, #492]	@ (800dbe4 <HAL_SPI_Init+0x23c>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d00c      	beq.n	800da16 <HAL_SPI_Init+0x6e>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a79      	ldr	r2, [pc, #484]	@ (800dbe8 <HAL_SPI_Init+0x240>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d007      	beq.n	800da16 <HAL_SPI_Init+0x6e>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4a78      	ldr	r2, [pc, #480]	@ (800dbec <HAL_SPI_Init+0x244>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d002      	beq.n	800da16 <HAL_SPI_Init+0x6e>
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2b08      	cmp	r3, #8
 800da14:	d811      	bhi.n	800da3a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800da1a:	4a72      	ldr	r2, [pc, #456]	@ (800dbe4 <HAL_SPI_Init+0x23c>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d009      	beq.n	800da34 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a70      	ldr	r2, [pc, #448]	@ (800dbe8 <HAL_SPI_Init+0x240>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d004      	beq.n	800da34 <HAL_SPI_Init+0x8c>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	4a6f      	ldr	r2, [pc, #444]	@ (800dbec <HAL_SPI_Init+0x244>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d104      	bne.n	800da3e <HAL_SPI_Init+0x96>
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2b10      	cmp	r3, #16
 800da38:	d901      	bls.n	800da3e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800da3a:	2301      	movs	r3, #1
 800da3c:	e0cd      	b.n	800dbda <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800da44:	b2db      	uxtb	r3, r3
 800da46:	2b00      	cmp	r3, #0
 800da48:	d106      	bne.n	800da58 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f7f5 f9e2 	bl	8002e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2202      	movs	r2, #2
 800da5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f022 0201 	bic.w	r2, r2, #1
 800da6e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	689b      	ldr	r3, [r3, #8]
 800da76:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800da7a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	699b      	ldr	r3, [r3, #24]
 800da80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800da84:	d119      	bne.n	800daba <HAL_SPI_Init+0x112>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800da8e:	d103      	bne.n	800da98 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800da94:	2b00      	cmp	r3, #0
 800da96:	d008      	beq.n	800daaa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d10c      	bne.n	800daba <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800daa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800daa8:	d107      	bne.n	800daba <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	681a      	ldr	r2, [r3, #0]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800dab8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d00f      	beq.n	800dae6 <HAL_SPI_Init+0x13e>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	2b06      	cmp	r3, #6
 800dacc:	d90b      	bls.n	800dae6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	430a      	orrs	r2, r1
 800dae2:	601a      	str	r2, [r3, #0]
 800dae4:	e007      	b.n	800daf6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	681a      	ldr	r2, [r3, #0]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800daf4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	69da      	ldr	r2, [r3, #28]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dafe:	431a      	orrs	r2, r3
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	431a      	orrs	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db08:	ea42 0103 	orr.w	r1, r2, r3
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	68da      	ldr	r2, [r3, #12]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	430a      	orrs	r2, r1
 800db16:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db20:	431a      	orrs	r2, r3
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db26:	431a      	orrs	r2, r3
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	699b      	ldr	r3, [r3, #24]
 800db2c:	431a      	orrs	r2, r3
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	691b      	ldr	r3, [r3, #16]
 800db32:	431a      	orrs	r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	695b      	ldr	r3, [r3, #20]
 800db38:	431a      	orrs	r2, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6a1b      	ldr	r3, [r3, #32]
 800db3e:	431a      	orrs	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	431a      	orrs	r2, r3
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db4a:	431a      	orrs	r2, r3
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	689b      	ldr	r3, [r3, #8]
 800db50:	431a      	orrs	r2, r3
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800db56:	ea42 0103 	orr.w	r1, r2, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	430a      	orrs	r2, r1
 800db64:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d113      	bne.n	800db96 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	689b      	ldr	r3, [r3, #8]
 800db74:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800db80:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	689b      	ldr	r3, [r3, #8]
 800db88:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800db94:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	f022 0201 	bic.w	r2, r2, #1
 800dba4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d00a      	beq.n	800dbc8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	68db      	ldr	r3, [r3, #12]
 800dbb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	430a      	orrs	r2, r1
 800dbc6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800dbd8:	2300      	movs	r3, #0
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3710      	adds	r7, #16
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
 800dbe2:	bf00      	nop
 800dbe4:	40013000 	.word	0x40013000
 800dbe8:	40003800 	.word	0x40003800
 800dbec:	40003c00 	.word	0x40003c00

0800dbf0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b088      	sub	sp, #32
 800dbf4:	af02      	add	r7, sp, #8
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	603b      	str	r3, [r7, #0]
 800dbfc:	4613      	mov	r3, r2
 800dbfe:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	3320      	adds	r3, #32
 800dc06:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dc08:	f7f5 fbae 	bl	8003368 <HAL_GetTick>
 800dc0c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d001      	beq.n	800dc1e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800dc1a:	2302      	movs	r3, #2
 800dc1c:	e1d1      	b.n	800dfc2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d002      	beq.n	800dc2a <HAL_SPI_Transmit+0x3a>
 800dc24:	88fb      	ldrh	r3, [r7, #6]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d101      	bne.n	800dc2e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	e1c9      	b.n	800dfc2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d101      	bne.n	800dc3c <HAL_SPI_Transmit+0x4c>
 800dc38:	2302      	movs	r3, #2
 800dc3a:	e1c2      	b.n	800dfc2 <HAL_SPI_Transmit+0x3d2>
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	2201      	movs	r2, #1
 800dc40:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2203      	movs	r2, #3
 800dc48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	68ba      	ldr	r2, [r7, #8]
 800dc58:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	88fa      	ldrh	r2, [r7, #6]
 800dc5e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	88fa      	ldrh	r2, [r7, #6]
 800dc66:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2200      	movs	r2, #0
 800dc74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2200      	movs	r2, #0
 800dc84:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	689b      	ldr	r3, [r3, #8]
 800dc90:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800dc94:	d108      	bne.n	800dca8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dca4:	601a      	str	r2, [r3, #0]
 800dca6:	e009      	b.n	800dcbc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800dcba:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	685a      	ldr	r2, [r3, #4]
 800dcc2:	4b96      	ldr	r3, [pc, #600]	@ (800df1c <HAL_SPI_Transmit+0x32c>)
 800dcc4:	4013      	ands	r3, r2
 800dcc6:	88f9      	ldrh	r1, [r7, #6]
 800dcc8:	68fa      	ldr	r2, [r7, #12]
 800dcca:	6812      	ldr	r2, [r2, #0]
 800dccc:	430b      	orrs	r3, r1
 800dcce:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f042 0201 	orr.w	r2, r2, #1
 800dcde:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dce8:	d107      	bne.n	800dcfa <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	681a      	ldr	r2, [r3, #0]
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dcf8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	68db      	ldr	r3, [r3, #12]
 800dcfe:	2b0f      	cmp	r3, #15
 800dd00:	d947      	bls.n	800dd92 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dd02:	e03f      	b.n	800dd84 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	695b      	ldr	r3, [r3, #20]
 800dd0a:	f003 0302 	and.w	r3, r3, #2
 800dd0e:	2b02      	cmp	r3, #2
 800dd10:	d114      	bne.n	800dd3c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	6812      	ldr	r2, [r2, #0]
 800dd1c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd22:	1d1a      	adds	r2, r3, #4
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	3b01      	subs	r3, #1
 800dd32:	b29a      	uxth	r2, r3
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800dd3a:	e023      	b.n	800dd84 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd3c:	f7f5 fb14 	bl	8003368 <HAL_GetTick>
 800dd40:	4602      	mov	r2, r0
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	1ad3      	subs	r3, r2, r3
 800dd46:	683a      	ldr	r2, [r7, #0]
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d803      	bhi.n	800dd54 <HAL_SPI_Transmit+0x164>
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd52:	d102      	bne.n	800dd5a <HAL_SPI_Transmit+0x16a>
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d114      	bne.n	800dd84 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f000 fb46 	bl	800e3ec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dd66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2201      	movs	r2, #1
 800dd74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800dd80:	2303      	movs	r3, #3
 800dd82:	e11e      	b.n	800dfc2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d1b9      	bne.n	800dd04 <HAL_SPI_Transmit+0x114>
 800dd90:	e0f1      	b.n	800df76 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	68db      	ldr	r3, [r3, #12]
 800dd96:	2b07      	cmp	r3, #7
 800dd98:	f240 80e6 	bls.w	800df68 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dd9c:	e05d      	b.n	800de5a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	695b      	ldr	r3, [r3, #20]
 800dda4:	f003 0302 	and.w	r3, r3, #2
 800dda8:	2b02      	cmp	r3, #2
 800ddaa:	d132      	bne.n	800de12 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d918      	bls.n	800ddea <HAL_SPI_Transmit+0x1fa>
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d014      	beq.n	800ddea <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	6812      	ldr	r2, [r2, #0]
 800ddca:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddd0:	1d1a      	adds	r2, r3, #4
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	3b02      	subs	r3, #2
 800dde0:	b29a      	uxth	r2, r3
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800dde8:	e037      	b.n	800de5a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddee:	881a      	ldrh	r2, [r3, #0]
 800ddf0:	697b      	ldr	r3, [r7, #20]
 800ddf2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddf8:	1c9a      	adds	r2, r3, #2
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800de04:	b29b      	uxth	r3, r3
 800de06:	3b01      	subs	r3, #1
 800de08:	b29a      	uxth	r2, r3
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800de10:	e023      	b.n	800de5a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de12:	f7f5 faa9 	bl	8003368 <HAL_GetTick>
 800de16:	4602      	mov	r2, r0
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	1ad3      	subs	r3, r2, r3
 800de1c:	683a      	ldr	r2, [r7, #0]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d803      	bhi.n	800de2a <HAL_SPI_Transmit+0x23a>
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de28:	d102      	bne.n	800de30 <HAL_SPI_Transmit+0x240>
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d114      	bne.n	800de5a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f000 fadb 	bl	800e3ec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800de3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2201      	movs	r2, #1
 800de4a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2200      	movs	r2, #0
 800de52:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800de56:	2303      	movs	r3, #3
 800de58:	e0b3      	b.n	800dfc2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800de60:	b29b      	uxth	r3, r3
 800de62:	2b00      	cmp	r3, #0
 800de64:	d19b      	bne.n	800dd9e <HAL_SPI_Transmit+0x1ae>
 800de66:	e086      	b.n	800df76 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	695b      	ldr	r3, [r3, #20]
 800de6e:	f003 0302 	and.w	r3, r3, #2
 800de72:	2b02      	cmp	r3, #2
 800de74:	d154      	bne.n	800df20 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	2b03      	cmp	r3, #3
 800de80:	d918      	bls.n	800deb4 <HAL_SPI_Transmit+0x2c4>
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de86:	2b40      	cmp	r3, #64	@ 0x40
 800de88:	d914      	bls.n	800deb4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	6812      	ldr	r2, [r2, #0]
 800de94:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de9a:	1d1a      	adds	r2, r3, #4
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	3b04      	subs	r3, #4
 800deaa:	b29a      	uxth	r2, r3
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800deb2:	e059      	b.n	800df68 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800deba:	b29b      	uxth	r3, r3
 800debc:	2b01      	cmp	r3, #1
 800debe:	d917      	bls.n	800def0 <HAL_SPI_Transmit+0x300>
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d013      	beq.n	800def0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800decc:	881a      	ldrh	r2, [r3, #0]
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ded6:	1c9a      	adds	r2, r3, #2
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	3b02      	subs	r3, #2
 800dee6:	b29a      	uxth	r2, r3
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800deee:	e03b      	b.n	800df68 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	3320      	adds	r3, #32
 800defa:	7812      	ldrb	r2, [r2, #0]
 800defc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df02:	1c5a      	adds	r2, r3, #1
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800df0e:	b29b      	uxth	r3, r3
 800df10:	3b01      	subs	r3, #1
 800df12:	b29a      	uxth	r2, r3
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800df1a:	e025      	b.n	800df68 <HAL_SPI_Transmit+0x378>
 800df1c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df20:	f7f5 fa22 	bl	8003368 <HAL_GetTick>
 800df24:	4602      	mov	r2, r0
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	1ad3      	subs	r3, r2, r3
 800df2a:	683a      	ldr	r2, [r7, #0]
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d803      	bhi.n	800df38 <HAL_SPI_Transmit+0x348>
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df36:	d102      	bne.n	800df3e <HAL_SPI_Transmit+0x34e>
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d114      	bne.n	800df68 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800df3e:	68f8      	ldr	r0, [r7, #12]
 800df40:	f000 fa54 	bl	800e3ec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2201      	movs	r2, #1
 800df58:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2200      	movs	r2, #0
 800df60:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800df64:	2303      	movs	r3, #3
 800df66:	e02c      	b.n	800dfc2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800df6e:	b29b      	uxth	r3, r3
 800df70:	2b00      	cmp	r3, #0
 800df72:	f47f af79 	bne.w	800de68 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	9300      	str	r3, [sp, #0]
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	2200      	movs	r2, #0
 800df7e:	2108      	movs	r1, #8
 800df80:	68f8      	ldr	r0, [r7, #12]
 800df82:	f000 fad3 	bl	800e52c <SPI_WaitOnFlagUntilTimeout>
 800df86:	4603      	mov	r3, r0
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d007      	beq.n	800df9c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df92:	f043 0220 	orr.w	r2, r3, #32
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800df9c:	68f8      	ldr	r0, [r7, #12]
 800df9e:	f000 fa25 	bl	800e3ec <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	2200      	movs	r2, #0
 800dfae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d001      	beq.n	800dfc0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e000      	b.n	800dfc2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800dfc0:	2300      	movs	r3, #0
  }
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3718      	adds	r7, #24
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
 800dfca:	bf00      	nop

0800dfcc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b08a      	sub	sp, #40	@ 0x28
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	691b      	ldr	r3, [r3, #16]
 800dfda:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	695b      	ldr	r3, [r3, #20]
 800dfe2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800dfe4:	6a3a      	ldr	r2, [r7, #32]
 800dfe6:	69fb      	ldr	r3, [r7, #28]
 800dfe8:	4013      	ands	r3, r2
 800dfea:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	689b      	ldr	r3, [r3, #8]
 800dff2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800dff4:	2300      	movs	r3, #0
 800dff6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800dffe:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	3330      	adds	r3, #48	@ 0x30
 800e006:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d010      	beq.n	800e034 <HAL_SPI_IRQHandler+0x68>
 800e012:	6a3b      	ldr	r3, [r7, #32]
 800e014:	f003 0308 	and.w	r3, r3, #8
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d00b      	beq.n	800e034 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	699a      	ldr	r2, [r3, #24]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e02a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f000 f9b9 	bl	800e3a4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800e032:	e192      	b.n	800e35a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d113      	bne.n	800e066 <HAL_SPI_IRQHandler+0x9a>
 800e03e:	69bb      	ldr	r3, [r7, #24]
 800e040:	f003 0320 	and.w	r3, r3, #32
 800e044:	2b00      	cmp	r3, #0
 800e046:	d10e      	bne.n	800e066 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800e048:	69bb      	ldr	r3, [r7, #24]
 800e04a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d009      	beq.n	800e066 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	4798      	blx	r3
    hspi->RxISR(hspi);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	4798      	blx	r3
    handled = 1UL;
 800e062:	2301      	movs	r3, #1
 800e064:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800e066:	69bb      	ldr	r3, [r7, #24]
 800e068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d10f      	bne.n	800e090 <HAL_SPI_IRQHandler+0xc4>
 800e070:	69bb      	ldr	r3, [r7, #24]
 800e072:	f003 0301 	and.w	r3, r3, #1
 800e076:	2b00      	cmp	r3, #0
 800e078:	d00a      	beq.n	800e090 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800e07a:	69bb      	ldr	r3, [r7, #24]
 800e07c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800e080:	2b00      	cmp	r3, #0
 800e082:	d105      	bne.n	800e090 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	4798      	blx	r3
    handled = 1UL;
 800e08c:	2301      	movs	r3, #1
 800e08e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800e090:	69bb      	ldr	r3, [r7, #24]
 800e092:	f003 0320 	and.w	r3, r3, #32
 800e096:	2b00      	cmp	r3, #0
 800e098:	d10f      	bne.n	800e0ba <HAL_SPI_IRQHandler+0xee>
 800e09a:	69bb      	ldr	r3, [r7, #24]
 800e09c:	f003 0302 	and.w	r3, r3, #2
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d00a      	beq.n	800e0ba <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800e0a4:	69bb      	ldr	r3, [r7, #24]
 800e0a6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d105      	bne.n	800e0ba <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	4798      	blx	r3
    handled = 1UL;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800e0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	f040 8147 	bne.w	800e350 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800e0c2:	69bb      	ldr	r3, [r7, #24]
 800e0c4:	f003 0308 	and.w	r3, r3, #8
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	f000 808b 	beq.w	800e1e4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	699a      	ldr	r2, [r3, #24]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f042 0208 	orr.w	r2, r2, #8
 800e0dc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	699a      	ldr	r2, [r3, #24]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f042 0210 	orr.w	r2, r2, #16
 800e0ec:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	699a      	ldr	r2, [r3, #24]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e0fc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	691a      	ldr	r2, [r3, #16]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f022 0208 	bic.w	r2, r2, #8
 800e10c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	689b      	ldr	r3, [r3, #8]
 800e114:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d13d      	bne.n	800e198 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800e11c:	e036      	b.n	800e18c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	68db      	ldr	r3, [r3, #12]
 800e122:	2b0f      	cmp	r3, #15
 800e124:	d90b      	bls.n	800e13e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e12e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e130:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e136:	1d1a      	adds	r2, r3, #4
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	665a      	str	r2, [r3, #100]	@ 0x64
 800e13c:	e01d      	b.n	800e17a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	2b07      	cmp	r3, #7
 800e144:	d90b      	bls.n	800e15e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e14a:	68fa      	ldr	r2, [r7, #12]
 800e14c:	8812      	ldrh	r2, [r2, #0]
 800e14e:	b292      	uxth	r2, r2
 800e150:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e156:	1c9a      	adds	r2, r3, #2
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	665a      	str	r2, [r3, #100]	@ 0x64
 800e15c:	e00d      	b.n	800e17a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e16a:	7812      	ldrb	r2, [r2, #0]
 800e16c:	b2d2      	uxtb	r2, r2
 800e16e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e174:	1c5a      	adds	r2, r3, #1
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e180:	b29b      	uxth	r3, r3
 800e182:	3b01      	subs	r3, #1
 800e184:	b29a      	uxth	r2, r3
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e192:	b29b      	uxth	r3, r3
 800e194:	2b00      	cmp	r3, #0
 800e196:	d1c2      	bne.n	800e11e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f000 f927 	bl	800e3ec <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d003      	beq.n	800e1b8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f000 f8ed 	bl	800e390 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e1b6:	e0d0      	b.n	800e35a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800e1b8:	7cfb      	ldrb	r3, [r7, #19]
 800e1ba:	2b05      	cmp	r3, #5
 800e1bc:	d103      	bne.n	800e1c6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f000 f8dc 	bl	800e37c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800e1c4:	e0c6      	b.n	800e354 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800e1c6:	7cfb      	ldrb	r3, [r7, #19]
 800e1c8:	2b04      	cmp	r3, #4
 800e1ca:	d103      	bne.n	800e1d4 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f000 f8cb 	bl	800e368 <HAL_SPI_RxCpltCallback>
    return;
 800e1d2:	e0bf      	b.n	800e354 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800e1d4:	7cfb      	ldrb	r3, [r7, #19]
 800e1d6:	2b03      	cmp	r3, #3
 800e1d8:	f040 80bc 	bne.w	800e354 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f7f4 fc4d 	bl	8002a7c <HAL_SPI_TxCpltCallback>
    return;
 800e1e2:	e0b7      	b.n	800e354 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800e1e4:	69bb      	ldr	r3, [r7, #24]
 800e1e6:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	f000 80b5 	beq.w	800e35a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800e1f0:	69bb      	ldr	r3, [r7, #24]
 800e1f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d00f      	beq.n	800e21a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e200:	f043 0204 	orr.w	r2, r3, #4
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	699a      	ldr	r2, [r3, #24]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e218:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800e21a:	69bb      	ldr	r3, [r7, #24]
 800e21c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e220:	2b00      	cmp	r3, #0
 800e222:	d00f      	beq.n	800e244 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e22a:	f043 0201 	orr.w	r2, r3, #1
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	699a      	ldr	r2, [r3, #24]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e242:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d00f      	beq.n	800e26e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e254:	f043 0208 	orr.w	r2, r3, #8
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	699a      	ldr	r2, [r3, #24]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e26c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800e26e:	69bb      	ldr	r3, [r7, #24]
 800e270:	f003 0320 	and.w	r3, r3, #32
 800e274:	2b00      	cmp	r3, #0
 800e276:	d00f      	beq.n	800e298 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e27e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	699a      	ldr	r2, [r3, #24]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	f042 0220 	orr.w	r2, r2, #32
 800e296:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d05a      	beq.n	800e358 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	681a      	ldr	r2, [r3, #0]
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f022 0201 	bic.w	r2, r2, #1
 800e2b0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	6919      	ldr	r1, [r3, #16]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	4b28      	ldr	r3, [pc, #160]	@ (800e360 <HAL_SPI_IRQHandler+0x394>)
 800e2be:	400b      	ands	r3, r1
 800e2c0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e2c8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e2cc:	d138      	bne.n	800e340 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	689a      	ldr	r2, [r3, #8]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e2dc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d013      	beq.n	800e30e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e2ea:	4a1e      	ldr	r2, [pc, #120]	@ (800e364 <HAL_SPI_IRQHandler+0x398>)
 800e2ec:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7f5 fd84 	bl	8003e00 <HAL_DMA_Abort_IT>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d007      	beq.n	800e30e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e304:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e312:	2b00      	cmp	r3, #0
 800e314:	d020      	beq.n	800e358 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e31a:	4a12      	ldr	r2, [pc, #72]	@ (800e364 <HAL_SPI_IRQHandler+0x398>)
 800e31c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e322:	4618      	mov	r0, r3
 800e324:	f7f5 fd6c 	bl	8003e00 <HAL_DMA_Abort_IT>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d014      	beq.n	800e358 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e334:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e33e:	e00b      	b.n	800e358 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2201      	movs	r2, #1
 800e344:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f000 f821 	bl	800e390 <HAL_SPI_ErrorCallback>
    return;
 800e34e:	e003      	b.n	800e358 <HAL_SPI_IRQHandler+0x38c>
    return;
 800e350:	bf00      	nop
 800e352:	e002      	b.n	800e35a <HAL_SPI_IRQHandler+0x38e>
    return;
 800e354:	bf00      	nop
 800e356:	e000      	b.n	800e35a <HAL_SPI_IRQHandler+0x38e>
    return;
 800e358:	bf00      	nop
  }
}
 800e35a:	3728      	adds	r7, #40	@ 0x28
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	fffffc94 	.word	0xfffffc94
 800e364:	0800e3b9 	.word	0x0800e3b9

0800e368 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e368:	b480      	push	{r7}
 800e36a:	b083      	sub	sp, #12
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800e370:	bf00      	nop
 800e372:	370c      	adds	r7, #12
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr

0800e37c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e37c:	b480      	push	{r7}
 800e37e:	b083      	sub	sp, #12
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e384:	bf00      	nop
 800e386:	370c      	adds	r7, #12
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr

0800e390 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e390:	b480      	push	{r7}
 800e392:	b083      	sub	sp, #12
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e398:	bf00      	nop
 800e39a:	370c      	adds	r7, #12
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr

0800e3a4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800e3ac:	bf00      	nop
 800e3ae:	370c      	adds	r7, #12
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr

0800e3b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e3de:	68f8      	ldr	r0, [r7, #12]
 800e3e0:	f7ff ffd6 	bl	800e390 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e3e4:	bf00      	nop
 800e3e6:	3710      	adds	r7, #16
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	b085      	sub	sp, #20
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	695b      	ldr	r3, [r3, #20]
 800e3fa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	699a      	ldr	r2, [r3, #24]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f042 0208 	orr.w	r2, r2, #8
 800e40a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	699a      	ldr	r2, [r3, #24]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f042 0210 	orr.w	r2, r2, #16
 800e41a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f022 0201 	bic.w	r2, r2, #1
 800e42a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	6919      	ldr	r1, [r3, #16]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681a      	ldr	r2, [r3, #0]
 800e436:	4b3c      	ldr	r3, [pc, #240]	@ (800e528 <SPI_CloseTransfer+0x13c>)
 800e438:	400b      	ands	r3, r1
 800e43a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	689a      	ldr	r2, [r3, #8]
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e44a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e452:	b2db      	uxtb	r3, r3
 800e454:	2b04      	cmp	r3, #4
 800e456:	d014      	beq.n	800e482 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	f003 0320 	and.w	r3, r3, #32
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00f      	beq.n	800e482 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e468:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	699a      	ldr	r2, [r3, #24]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f042 0220 	orr.w	r2, r2, #32
 800e480:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	2b03      	cmp	r3, #3
 800e48c:	d014      	beq.n	800e4b8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e494:	2b00      	cmp	r3, #0
 800e496:	d00f      	beq.n	800e4b8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e49e:	f043 0204 	orr.w	r2, r3, #4
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	699a      	ldr	r2, [r3, #24]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e4b6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d00f      	beq.n	800e4e2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4c8:	f043 0201 	orr.w	r2, r3, #1
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	699a      	ldr	r2, [r3, #24]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e4e0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d00f      	beq.n	800e50c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4f2:	f043 0208 	orr.w	r2, r3, #8
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	699a      	ldr	r2, [r3, #24]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e50a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2200      	movs	r2, #0
 800e518:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800e51c:	bf00      	nop
 800e51e:	3714      	adds	r7, #20
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr
 800e528:	fffffc90 	.word	0xfffffc90

0800e52c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	60f8      	str	r0, [r7, #12]
 800e534:	60b9      	str	r1, [r7, #8]
 800e536:	603b      	str	r3, [r7, #0]
 800e538:	4613      	mov	r3, r2
 800e53a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e53c:	e010      	b.n	800e560 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e53e:	f7f4 ff13 	bl	8003368 <HAL_GetTick>
 800e542:	4602      	mov	r2, r0
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	1ad3      	subs	r3, r2, r3
 800e548:	683a      	ldr	r2, [r7, #0]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d803      	bhi.n	800e556 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e554:	d102      	bne.n	800e55c <SPI_WaitOnFlagUntilTimeout+0x30>
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d101      	bne.n	800e560 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e55c:	2303      	movs	r3, #3
 800e55e:	e00f      	b.n	800e580 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	695a      	ldr	r2, [r3, #20]
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	4013      	ands	r3, r2
 800e56a:	68ba      	ldr	r2, [r7, #8]
 800e56c:	429a      	cmp	r2, r3
 800e56e:	bf0c      	ite	eq
 800e570:	2301      	moveq	r3, #1
 800e572:	2300      	movne	r3, #0
 800e574:	b2db      	uxtb	r3, r3
 800e576:	461a      	mov	r2, r3
 800e578:	79fb      	ldrb	r3, [r7, #7]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d0df      	beq.n	800e53e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e57e:	2300      	movs	r3, #0
}
 800e580:	4618      	mov	r0, r3
 800e582:	3710      	adds	r7, #16
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e588:	b480      	push	{r7}
 800e58a:	b085      	sub	sp, #20
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e594:	095b      	lsrs	r3, r3, #5
 800e596:	3301      	adds	r3, #1
 800e598:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	68db      	ldr	r3, [r3, #12]
 800e59e:	3301      	adds	r3, #1
 800e5a0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	3307      	adds	r3, #7
 800e5a6:	08db      	lsrs	r3, r3, #3
 800e5a8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	68fa      	ldr	r2, [r7, #12]
 800e5ae:	fb02 f303 	mul.w	r3, r2, r3
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3714      	adds	r7, #20
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr
	...

0800e5c0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e5c0:	b084      	sub	sp, #16
 800e5c2:	b480      	push	{r7}
 800e5c4:	b085      	sub	sp, #20
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
 800e5ca:	f107 001c 	add.w	r0, r7, #28
 800e5ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800e5d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800e5d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800e5da:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800e5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800e5de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800e5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800e5e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800e5e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800e5e8:	68fa      	ldr	r2, [r7, #12]
 800e5ea:	4313      	orrs	r3, r2
 800e5ec:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	685a      	ldr	r2, [r3, #4]
 800e5f2:	4b07      	ldr	r3, [pc, #28]	@ (800e610 <SDMMC_Init+0x50>)
 800e5f4:	4013      	ands	r3, r2
 800e5f6:	68fa      	ldr	r2, [r7, #12]
 800e5f8:	431a      	orrs	r2, r3
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e5fe:	2300      	movs	r3, #0
}
 800e600:	4618      	mov	r0, r3
 800e602:	3714      	adds	r7, #20
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	b004      	add	sp, #16
 800e60c:	4770      	bx	lr
 800e60e:	bf00      	nop
 800e610:	ffc02c00 	.word	0xffc02c00

0800e614 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800e622:	4618      	mov	r0, r3
 800e624:	370c      	adds	r7, #12
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr

0800e62e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800e62e:	b480      	push	{r7}
 800e630:	b083      	sub	sp, #12
 800e632:	af00      	add	r7, sp, #0
 800e634:	6078      	str	r0, [r7, #4]
 800e636:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800e642:	2300      	movs	r3, #0
}
 800e644:	4618      	mov	r0, r3
 800e646:	370c      	adds	r7, #12
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr

0800e650 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e650:	b480      	push	{r7}
 800e652:	b083      	sub	sp, #12
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f043 0203 	orr.w	r2, r3, #3
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e664:	2300      	movs	r3, #0
}
 800e666:	4618      	mov	r0, r3
 800e668:	370c      	adds	r7, #12
 800e66a:	46bd      	mov	sp, r7
 800e66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e670:	4770      	bx	lr

0800e672 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800e672:	b480      	push	{r7}
 800e674:	b083      	sub	sp, #12
 800e676:	af00      	add	r7, sp, #0
 800e678:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f003 0303 	and.w	r3, r3, #3
}
 800e682:	4618      	mov	r0, r3
 800e684:	370c      	adds	r7, #12
 800e686:	46bd      	mov	sp, r7
 800e688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68c:	4770      	bx	lr
	...

0800e690 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e690:	b480      	push	{r7}
 800e692:	b085      	sub	sp, #20
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e69a:	2300      	movs	r3, #0
 800e69c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e6ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800e6b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800e6ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e6bc:	68fa      	ldr	r2, [r7, #12]
 800e6be:	4313      	orrs	r3, r2
 800e6c0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	68da      	ldr	r2, [r3, #12]
 800e6c6:	4b06      	ldr	r3, [pc, #24]	@ (800e6e0 <SDMMC_SendCommand+0x50>)
 800e6c8:	4013      	ands	r3, r2
 800e6ca:	68fa      	ldr	r2, [r7, #12]
 800e6cc:	431a      	orrs	r2, r3
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e6d2:	2300      	movs	r3, #0
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3714      	adds	r7, #20
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr
 800e6e0:	fffee0c0 	.word	0xfffee0c0

0800e6e4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b083      	sub	sp, #12
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	691b      	ldr	r3, [r3, #16]
 800e6f0:	b2db      	uxtb	r3, r3
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	370c      	adds	r7, #12
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fc:	4770      	bx	lr

0800e6fe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e6fe:	b480      	push	{r7}
 800e700:	b085      	sub	sp, #20
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]
 800e706:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	3314      	adds	r3, #20
 800e70c:	461a      	mov	r2, r3
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	4413      	add	r3, r2
 800e712:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	681b      	ldr	r3, [r3, #0]
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3714      	adds	r7, #20
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800e724:	b480      	push	{r7}
 800e726:	b085      	sub	sp, #20
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e72e:	2300      	movs	r3, #0
 800e730:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	685a      	ldr	r2, [r3, #4]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e74a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800e750:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800e756:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e758:	68fa      	ldr	r2, [r7, #12]
 800e75a:	4313      	orrs	r3, r2
 800e75c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e762:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	431a      	orrs	r2, r3
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e76e:	2300      	movs	r3, #0

}
 800e770:	4618      	mov	r0, r3
 800e772:	3714      	adds	r7, #20
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr

0800e77c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b088      	sub	sp, #32
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
 800e784:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e78a:	2310      	movs	r3, #16
 800e78c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e78e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e792:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e794:	2300      	movs	r3, #0
 800e796:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e79c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e79e:	f107 0308 	add.w	r3, r7, #8
 800e7a2:	4619      	mov	r1, r3
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f7ff ff73 	bl	800e690 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e7aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e7ae:	2110      	movs	r1, #16
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 fa5f 	bl	800ec74 <SDMMC_GetCmdResp1>
 800e7b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7b8:	69fb      	ldr	r3, [r7, #28]
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3720      	adds	r7, #32
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b088      	sub	sp, #32
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
 800e7ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e7d0:	2311      	movs	r3, #17
 800e7d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e7d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e7d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e7de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e7e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e7e4:	f107 0308 	add.w	r3, r7, #8
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f7ff ff50 	bl	800e690 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e7f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e7f4:	2111      	movs	r1, #17
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f000 fa3c 	bl	800ec74 <SDMMC_GetCmdResp1>
 800e7fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7fe:	69fb      	ldr	r3, [r7, #28]
}
 800e800:	4618      	mov	r0, r3
 800e802:	3720      	adds	r7, #32
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b088      	sub	sp, #32
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e816:	2312      	movs	r3, #18
 800e818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e81a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e81e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e820:	2300      	movs	r3, #0
 800e822:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e824:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e828:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e82a:	f107 0308 	add.w	r3, r7, #8
 800e82e:	4619      	mov	r1, r3
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f7ff ff2d 	bl	800e690 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e83a:	2112      	movs	r1, #18
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f000 fa19 	bl	800ec74 <SDMMC_GetCmdResp1>
 800e842:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e844:	69fb      	ldr	r3, [r7, #28]
}
 800e846:	4618      	mov	r0, r3
 800e848:	3720      	adds	r7, #32
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}

0800e84e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e84e:	b580      	push	{r7, lr}
 800e850:	b088      	sub	sp, #32
 800e852:	af00      	add	r7, sp, #0
 800e854:	6078      	str	r0, [r7, #4]
 800e856:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e85c:	2318      	movs	r3, #24
 800e85e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e860:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e864:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e866:	2300      	movs	r3, #0
 800e868:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e86a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e86e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e870:	f107 0308 	add.w	r3, r7, #8
 800e874:	4619      	mov	r1, r3
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f7ff ff0a 	bl	800e690 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e87c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e880:	2118      	movs	r1, #24
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 f9f6 	bl	800ec74 <SDMMC_GetCmdResp1>
 800e888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e88a:	69fb      	ldr	r3, [r7, #28]
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3720      	adds	r7, #32
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b088      	sub	sp, #32
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e8a2:	2319      	movs	r3, #25
 800e8a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e8a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e8aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e8b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e8b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e8b6:	f107 0308 	add.w	r3, r7, #8
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f7ff fee7 	bl	800e690 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e8c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e8c6:	2119      	movs	r1, #25
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f000 f9d3 	bl	800ec74 <SDMMC_GetCmdResp1>
 800e8ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8d0:	69fb      	ldr	r3, [r7, #28]
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3720      	adds	r7, #32
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
	...

0800e8dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b088      	sub	sp, #32
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e8e8:	230c      	movs	r3, #12
 800e8ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e8ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e8f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e8f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e8fa:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	68db      	ldr	r3, [r3, #12]
 800e900:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	68db      	ldr	r3, [r3, #12]
 800e90c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e914:	f107 0308 	add.w	r3, r7, #8
 800e918:	4619      	mov	r1, r3
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f7ff feb8 	bl	800e690 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e920:	4a0b      	ldr	r2, [pc, #44]	@ (800e950 <SDMMC_CmdStopTransfer+0x74>)
 800e922:	210c      	movs	r1, #12
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f000 f9a5 	bl	800ec74 <SDMMC_GetCmdResp1>
 800e92a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	68db      	ldr	r3, [r3, #12]
 800e930:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e938:	69fb      	ldr	r3, [r7, #28]
 800e93a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e93e:	d101      	bne.n	800e944 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800e940:	2300      	movs	r3, #0
 800e942:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800e944:	69fb      	ldr	r3, [r7, #28]
}
 800e946:	4618      	mov	r0, r3
 800e948:	3720      	adds	r7, #32
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	05f5e100 	.word	0x05f5e100

0800e954 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b088      	sub	sp, #32
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e962:	2307      	movs	r3, #7
 800e964:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e966:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e96a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e96c:	2300      	movs	r3, #0
 800e96e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e970:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e974:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e976:	f107 0308 	add.w	r3, r7, #8
 800e97a:	4619      	mov	r1, r3
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f7ff fe87 	bl	800e690 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e982:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e986:	2107      	movs	r1, #7
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f000 f973 	bl	800ec74 <SDMMC_GetCmdResp1>
 800e98e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e990:	69fb      	ldr	r3, [r7, #28]
}
 800e992:	4618      	mov	r0, r3
 800e994:	3720      	adds	r7, #32
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}

0800e99a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e99a:	b580      	push	{r7, lr}
 800e99c:	b088      	sub	sp, #32
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e9b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e9b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e9b8:	f107 0308 	add.w	r3, r7, #8
 800e9bc:	4619      	mov	r1, r3
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f7ff fe66 	bl	800e690 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f000 fb97 	bl	800f0f8 <SDMMC_GetCmdError>
 800e9ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9cc:	69fb      	ldr	r3, [r7, #28]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3720      	adds	r7, #32
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}

0800e9d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e9d6:	b580      	push	{r7, lr}
 800e9d8:	b088      	sub	sp, #32
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e9de:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800e9e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e9e4:	2308      	movs	r3, #8
 800e9e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e9e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e9ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e9f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e9f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e9f8:	f107 0308 	add.w	r3, r7, #8
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f7ff fe46 	bl	800e690 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f000 fb29 	bl	800f05c <SDMMC_GetCmdResp7>
 800ea0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea0c:	69fb      	ldr	r3, [r7, #28]
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3720      	adds	r7, #32
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}

0800ea16 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ea16:	b580      	push	{r7, lr}
 800ea18:	b088      	sub	sp, #32
 800ea1a:	af00      	add	r7, sp, #0
 800ea1c:	6078      	str	r0, [r7, #4]
 800ea1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ea24:	2337      	movs	r3, #55	@ 0x37
 800ea26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ea28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ea2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ea36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea38:	f107 0308 	add.w	r3, r7, #8
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f7ff fe26 	bl	800e690 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ea44:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ea48:	2137      	movs	r1, #55	@ 0x37
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 f912 	bl	800ec74 <SDMMC_GetCmdResp1>
 800ea50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea52:	69fb      	ldr	r3, [r7, #28]
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3720      	adds	r7, #32
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}

0800ea5c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b088      	sub	sp, #32
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
 800ea64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ea6a:	2329      	movs	r3, #41	@ 0x29
 800ea6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ea6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ea72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea74:	2300      	movs	r3, #0
 800ea76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ea7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea7e:	f107 0308 	add.w	r3, r7, #8
 800ea82:	4619      	mov	r1, r3
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f7ff fe03 	bl	800e690 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f000 fa2e 	bl	800eeec <SDMMC_GetCmdResp3>
 800ea90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea92:	69fb      	ldr	r3, [r7, #28]
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3720      	adds	r7, #32
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b088      	sub	sp, #32
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800eaaa:	2306      	movs	r3, #6
 800eaac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eaae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eab2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eab4:	2300      	movs	r3, #0
 800eab6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eab8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eabc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eabe:	f107 0308 	add.w	r3, r7, #8
 800eac2:	4619      	mov	r1, r3
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f7ff fde3 	bl	800e690 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800eaca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eace:	2106      	movs	r1, #6
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f000 f8cf 	bl	800ec74 <SDMMC_GetCmdResp1>
 800ead6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ead8:	69fb      	ldr	r3, [r7, #28]
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3720      	adds	r7, #32
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}

0800eae2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800eae2:	b580      	push	{r7, lr}
 800eae4:	b088      	sub	sp, #32
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800eaea:	2300      	movs	r3, #0
 800eaec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800eaee:	2333      	movs	r3, #51	@ 0x33
 800eaf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eaf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eaf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eafc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eb00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb02:	f107 0308 	add.w	r3, r7, #8
 800eb06:	4619      	mov	r1, r3
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f7ff fdc1 	bl	800e690 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800eb0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb12:	2133      	movs	r1, #51	@ 0x33
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f000 f8ad 	bl	800ec74 <SDMMC_GetCmdResp1>
 800eb1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb1c:	69fb      	ldr	r3, [r7, #28]
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3720      	adds	r7, #32
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}

0800eb26 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800eb26:	b580      	push	{r7, lr}
 800eb28:	b088      	sub	sp, #32
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800eb32:	2302      	movs	r3, #2
 800eb34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800eb36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800eb3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eb44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb46:	f107 0308 	add.w	r3, r7, #8
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f7ff fd9f 	bl	800e690 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 f980 	bl	800ee58 <SDMMC_GetCmdResp2>
 800eb58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb5a:	69fb      	ldr	r3, [r7, #28]
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3720      	adds	r7, #32
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b088      	sub	sp, #32
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800eb72:	2309      	movs	r3, #9
 800eb74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800eb76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800eb7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eb84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb86:	f107 0308 	add.w	r3, r7, #8
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f7ff fd7f 	bl	800e690 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f000 f960 	bl	800ee58 <SDMMC_GetCmdResp2>
 800eb98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb9a:	69fb      	ldr	r3, [r7, #28]
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3720      	adds	r7, #32
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b088      	sub	sp, #32
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ebb2:	2303      	movs	r3, #3
 800ebb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ebb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ebba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ebc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ebc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ebc6:	f107 0308 	add.w	r3, r7, #8
 800ebca:	4619      	mov	r1, r3
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f7ff fd5f 	bl	800e690 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ebd2:	683a      	ldr	r2, [r7, #0]
 800ebd4:	2103      	movs	r1, #3
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f000 f9c8 	bl	800ef6c <SDMMC_GetCmdResp6>
 800ebdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebde:	69fb      	ldr	r3, [r7, #28]
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	3720      	adds	r7, #32
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b088      	sub	sp, #32
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ebf6:	230d      	movs	r3, #13
 800ebf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ebfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ebfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec00:	2300      	movs	r3, #0
 800ec02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ec08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec0a:	f107 0308 	add.w	r3, r7, #8
 800ec0e:	4619      	mov	r1, r3
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f7ff fd3d 	bl	800e690 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ec16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec1a:	210d      	movs	r1, #13
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f000 f829 	bl	800ec74 <SDMMC_GetCmdResp1>
 800ec22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec24:	69fb      	ldr	r3, [r7, #28]
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3720      	adds	r7, #32
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}

0800ec2e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b088      	sub	sp, #32
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ec36:	2300      	movs	r3, #0
 800ec38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ec3a:	230d      	movs	r3, #13
 800ec3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ec42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec44:	2300      	movs	r3, #0
 800ec46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ec4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec4e:	f107 0308 	add.w	r3, r7, #8
 800ec52:	4619      	mov	r1, r3
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f7ff fd1b 	bl	800e690 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ec5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec5e:	210d      	movs	r1, #13
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f000 f807 	bl	800ec74 <SDMMC_GetCmdResp1>
 800ec66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec68:	69fb      	ldr	r3, [r7, #28]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3720      	adds	r7, #32
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
	...

0800ec74 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b088      	sub	sp, #32
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	460b      	mov	r3, r1
 800ec7e:	607a      	str	r2, [r7, #4]
 800ec80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ec82:	4b70      	ldr	r3, [pc, #448]	@ (800ee44 <SDMMC_GetCmdResp1+0x1d0>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	4a70      	ldr	r2, [pc, #448]	@ (800ee48 <SDMMC_GetCmdResp1+0x1d4>)
 800ec88:	fba2 2303 	umull	r2, r3, r2, r3
 800ec8c:	0a5a      	lsrs	r2, r3, #9
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	fb02 f303 	mul.w	r3, r2, r3
 800ec94:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ec96:	69fb      	ldr	r3, [r7, #28]
 800ec98:	1e5a      	subs	r2, r3, #1
 800ec9a:	61fa      	str	r2, [r7, #28]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d102      	bne.n	800eca6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eca0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800eca4:	e0c9      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecaa:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ecac:	69ba      	ldr	r2, [r7, #24]
 800ecae:	4b67      	ldr	r3, [pc, #412]	@ (800ee4c <SDMMC_GetCmdResp1+0x1d8>)
 800ecb0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d0ef      	beq.n	800ec96 <SDMMC_GetCmdResp1+0x22>
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d1ea      	bne.n	800ec96 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecc4:	f003 0304 	and.w	r3, r3, #4
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d004      	beq.n	800ecd6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2204      	movs	r2, #4
 800ecd0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ecd2:	2304      	movs	r3, #4
 800ecd4:	e0b1      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecda:	f003 0301 	and.w	r3, r3, #1
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d004      	beq.n	800ecec <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2201      	movs	r2, #1
 800ece6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ece8:	2301      	movs	r3, #1
 800ecea:	e0a6      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	4a58      	ldr	r2, [pc, #352]	@ (800ee50 <SDMMC_GetCmdResp1+0x1dc>)
 800ecf0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ecf2:	68f8      	ldr	r0, [r7, #12]
 800ecf4:	f7ff fcf6 	bl	800e6e4 <SDMMC_GetCommandResponse>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	461a      	mov	r2, r3
 800ecfc:	7afb      	ldrb	r3, [r7, #11]
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d001      	beq.n	800ed06 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed02:	2301      	movs	r3, #1
 800ed04:	e099      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ed06:	2100      	movs	r1, #0
 800ed08:	68f8      	ldr	r0, [r7, #12]
 800ed0a:	f7ff fcf8 	bl	800e6fe <SDMMC_GetResponse>
 800ed0e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ed10:	697a      	ldr	r2, [r7, #20]
 800ed12:	4b50      	ldr	r3, [pc, #320]	@ (800ee54 <SDMMC_GetCmdResp1+0x1e0>)
 800ed14:	4013      	ands	r3, r2
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d101      	bne.n	800ed1e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	e08d      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	da02      	bge.n	800ed2a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ed24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ed28:	e087      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d001      	beq.n	800ed38 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ed34:	2340      	movs	r3, #64	@ 0x40
 800ed36:	e080      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d001      	beq.n	800ed46 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ed42:	2380      	movs	r3, #128	@ 0x80
 800ed44:	e079      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d002      	beq.n	800ed56 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ed50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ed54:	e071      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d002      	beq.n	800ed66 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ed60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ed64:	e069      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d002      	beq.n	800ed76 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ed70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed74:	e061      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d002      	beq.n	800ed86 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ed80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ed84:	e059      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d002      	beq.n	800ed96 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ed90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ed94:	e051      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d002      	beq.n	800eda6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eda0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800eda4:	e049      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800edac:	2b00      	cmp	r3, #0
 800edae:	d002      	beq.n	800edb6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800edb0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800edb4:	e041      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d002      	beq.n	800edc6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800edc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800edc4:	e039      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d002      	beq.n	800edd6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800edd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800edd4:	e031      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d002      	beq.n	800ede6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ede0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ede4:	e029      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800edec:	2b00      	cmp	r3, #0
 800edee:	d002      	beq.n	800edf6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800edf0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800edf4:	e021      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d002      	beq.n	800ee06 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ee00:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ee04:	e019      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d002      	beq.n	800ee16 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ee10:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ee14:	e011      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d002      	beq.n	800ee26 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ee20:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ee24:	e009      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	f003 0308 	and.w	r3, r3, #8
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d002      	beq.n	800ee36 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ee30:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800ee34:	e001      	b.n	800ee3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ee36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3720      	adds	r7, #32
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop
 800ee44:	24000008 	.word	0x24000008
 800ee48:	10624dd3 	.word	0x10624dd3
 800ee4c:	00200045 	.word	0x00200045
 800ee50:	002000c5 	.word	0x002000c5
 800ee54:	fdffe008 	.word	0xfdffe008

0800ee58 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b085      	sub	sp, #20
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ee60:	4b1f      	ldr	r3, [pc, #124]	@ (800eee0 <SDMMC_GetCmdResp2+0x88>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	4a1f      	ldr	r2, [pc, #124]	@ (800eee4 <SDMMC_GetCmdResp2+0x8c>)
 800ee66:	fba2 2303 	umull	r2, r3, r2, r3
 800ee6a:	0a5b      	lsrs	r3, r3, #9
 800ee6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee70:	fb02 f303 	mul.w	r3, r2, r3
 800ee74:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	1e5a      	subs	r2, r3, #1
 800ee7a:	60fa      	str	r2, [r7, #12]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d102      	bne.n	800ee86 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ee80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ee84:	e026      	b.n	800eed4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee8a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d0ef      	beq.n	800ee76 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d1ea      	bne.n	800ee76 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eea4:	f003 0304 	and.w	r3, r3, #4
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d004      	beq.n	800eeb6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2204      	movs	r2, #4
 800eeb0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eeb2:	2304      	movs	r3, #4
 800eeb4:	e00e      	b.n	800eed4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eeba:	f003 0301 	and.w	r3, r3, #1
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d004      	beq.n	800eecc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2201      	movs	r2, #1
 800eec6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eec8:	2301      	movs	r3, #1
 800eeca:	e003      	b.n	800eed4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	4a06      	ldr	r2, [pc, #24]	@ (800eee8 <SDMMC_GetCmdResp2+0x90>)
 800eed0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800eed2:	2300      	movs	r3, #0
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	3714      	adds	r7, #20
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr
 800eee0:	24000008 	.word	0x24000008
 800eee4:	10624dd3 	.word	0x10624dd3
 800eee8:	002000c5 	.word	0x002000c5

0800eeec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b085      	sub	sp, #20
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eef4:	4b1a      	ldr	r3, [pc, #104]	@ (800ef60 <SDMMC_GetCmdResp3+0x74>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	4a1a      	ldr	r2, [pc, #104]	@ (800ef64 <SDMMC_GetCmdResp3+0x78>)
 800eefa:	fba2 2303 	umull	r2, r3, r2, r3
 800eefe:	0a5b      	lsrs	r3, r3, #9
 800ef00:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef04:	fb02 f303 	mul.w	r3, r2, r3
 800ef08:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	1e5a      	subs	r2, r3, #1
 800ef0e:	60fa      	str	r2, [r7, #12]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d102      	bne.n	800ef1a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ef14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ef18:	e01b      	b.n	800ef52 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef1e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d0ef      	beq.n	800ef0a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d1ea      	bne.n	800ef0a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef38:	f003 0304 	and.w	r3, r3, #4
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d004      	beq.n	800ef4a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2204      	movs	r2, #4
 800ef44:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ef46:	2304      	movs	r3, #4
 800ef48:	e003      	b.n	800ef52 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	4a06      	ldr	r2, [pc, #24]	@ (800ef68 <SDMMC_GetCmdResp3+0x7c>)
 800ef4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ef50:	2300      	movs	r3, #0
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	3714      	adds	r7, #20
 800ef56:	46bd      	mov	sp, r7
 800ef58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5c:	4770      	bx	lr
 800ef5e:	bf00      	nop
 800ef60:	24000008 	.word	0x24000008
 800ef64:	10624dd3 	.word	0x10624dd3
 800ef68:	002000c5 	.word	0x002000c5

0800ef6c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b088      	sub	sp, #32
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	60f8      	str	r0, [r7, #12]
 800ef74:	460b      	mov	r3, r1
 800ef76:	607a      	str	r2, [r7, #4]
 800ef78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ef7a:	4b35      	ldr	r3, [pc, #212]	@ (800f050 <SDMMC_GetCmdResp6+0xe4>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	4a35      	ldr	r2, [pc, #212]	@ (800f054 <SDMMC_GetCmdResp6+0xe8>)
 800ef80:	fba2 2303 	umull	r2, r3, r2, r3
 800ef84:	0a5b      	lsrs	r3, r3, #9
 800ef86:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef8a:	fb02 f303 	mul.w	r3, r2, r3
 800ef8e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ef90:	69fb      	ldr	r3, [r7, #28]
 800ef92:	1e5a      	subs	r2, r3, #1
 800ef94:	61fa      	str	r2, [r7, #28]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d102      	bne.n	800efa0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ef9a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ef9e:	e052      	b.n	800f046 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efa4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800efa6:	69bb      	ldr	r3, [r7, #24]
 800efa8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800efac:	2b00      	cmp	r3, #0
 800efae:	d0ef      	beq.n	800ef90 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800efb0:	69bb      	ldr	r3, [r7, #24]
 800efb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d1ea      	bne.n	800ef90 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efbe:	f003 0304 	and.w	r3, r3, #4
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d004      	beq.n	800efd0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	2204      	movs	r2, #4
 800efca:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800efcc:	2304      	movs	r3, #4
 800efce:	e03a      	b.n	800f046 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efd4:	f003 0301 	and.w	r3, r3, #1
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d004      	beq.n	800efe6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2201      	movs	r2, #1
 800efe0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800efe2:	2301      	movs	r3, #1
 800efe4:	e02f      	b.n	800f046 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800efe6:	68f8      	ldr	r0, [r7, #12]
 800efe8:	f7ff fb7c 	bl	800e6e4 <SDMMC_GetCommandResponse>
 800efec:	4603      	mov	r3, r0
 800efee:	461a      	mov	r2, r3
 800eff0:	7afb      	ldrb	r3, [r7, #11]
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d001      	beq.n	800effa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eff6:	2301      	movs	r3, #1
 800eff8:	e025      	b.n	800f046 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	4a16      	ldr	r2, [pc, #88]	@ (800f058 <SDMMC_GetCmdResp6+0xec>)
 800effe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f000:	2100      	movs	r1, #0
 800f002:	68f8      	ldr	r0, [r7, #12]
 800f004:	f7ff fb7b 	bl	800e6fe <SDMMC_GetResponse>
 800f008:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800f010:	2b00      	cmp	r3, #0
 800f012:	d106      	bne.n	800f022 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	0c1b      	lsrs	r3, r3, #16
 800f018:	b29a      	uxth	r2, r3
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800f01e:	2300      	movs	r3, #0
 800f020:	e011      	b.n	800f046 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d002      	beq.n	800f032 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f02c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f030:	e009      	b.n	800f046 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d002      	beq.n	800f042 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f03c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f040:	e001      	b.n	800f046 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f042:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800f046:	4618      	mov	r0, r3
 800f048:	3720      	adds	r7, #32
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	24000008 	.word	0x24000008
 800f054:	10624dd3 	.word	0x10624dd3
 800f058:	002000c5 	.word	0x002000c5

0800f05c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b085      	sub	sp, #20
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f064:	4b22      	ldr	r3, [pc, #136]	@ (800f0f0 <SDMMC_GetCmdResp7+0x94>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4a22      	ldr	r2, [pc, #136]	@ (800f0f4 <SDMMC_GetCmdResp7+0x98>)
 800f06a:	fba2 2303 	umull	r2, r3, r2, r3
 800f06e:	0a5b      	lsrs	r3, r3, #9
 800f070:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f074:	fb02 f303 	mul.w	r3, r2, r3
 800f078:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	1e5a      	subs	r2, r3, #1
 800f07e:	60fa      	str	r2, [r7, #12]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d102      	bne.n	800f08a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f084:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f088:	e02c      	b.n	800f0e4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f08e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f096:	2b00      	cmp	r3, #0
 800f098:	d0ef      	beq.n	800f07a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d1ea      	bne.n	800f07a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0a8:	f003 0304 	and.w	r3, r3, #4
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d004      	beq.n	800f0ba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2204      	movs	r2, #4
 800f0b4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f0b6:	2304      	movs	r3, #4
 800f0b8:	e014      	b.n	800f0e4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0be:	f003 0301 	and.w	r3, r3, #1
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d004      	beq.n	800f0d0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2201      	movs	r2, #1
 800f0ca:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	e009      	b.n	800f0e4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d002      	beq.n	800f0e2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2240      	movs	r2, #64	@ 0x40
 800f0e0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f0e2:	2300      	movs	r3, #0

}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3714      	adds	r7, #20
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr
 800f0f0:	24000008 	.word	0x24000008
 800f0f4:	10624dd3 	.word	0x10624dd3

0800f0f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b085      	sub	sp, #20
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f100:	4b11      	ldr	r3, [pc, #68]	@ (800f148 <SDMMC_GetCmdError+0x50>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	4a11      	ldr	r2, [pc, #68]	@ (800f14c <SDMMC_GetCmdError+0x54>)
 800f106:	fba2 2303 	umull	r2, r3, r2, r3
 800f10a:	0a5b      	lsrs	r3, r3, #9
 800f10c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f110:	fb02 f303 	mul.w	r3, r2, r3
 800f114:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	1e5a      	subs	r2, r3, #1
 800f11a:	60fa      	str	r2, [r7, #12]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d102      	bne.n	800f126 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f120:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f124:	e009      	b.n	800f13a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f12a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d0f1      	beq.n	800f116 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	4a06      	ldr	r2, [pc, #24]	@ (800f150 <SDMMC_GetCmdError+0x58>)
 800f136:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800f138:	2300      	movs	r3, #0
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	3714      	adds	r7, #20
 800f13e:	46bd      	mov	sp, r7
 800f140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f144:	4770      	bx	lr
 800f146:	bf00      	nop
 800f148:	24000008 	.word	0x24000008
 800f14c:	10624dd3 	.word	0x10624dd3
 800f150:	002000c5 	.word	0x002000c5

0800f154 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f154:	b480      	push	{r7}
 800f156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f158:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr

0800f164 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f16a:	2300      	movs	r3, #0
 800f16c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f16e:	f000 f879 	bl	800f264 <BSP_SD_IsDetected>
 800f172:	4603      	mov	r3, r0
 800f174:	2b01      	cmp	r3, #1
 800f176:	d001      	beq.n	800f17c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f178:	2302      	movs	r3, #2
 800f17a:	e012      	b.n	800f1a2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f17c:	480b      	ldr	r0, [pc, #44]	@ (800f1ac <BSP_SD_Init+0x48>)
 800f17e:	f7fd f861 	bl	800c244 <HAL_SD_Init>
 800f182:	4603      	mov	r3, r0
 800f184:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f186:	79fb      	ldrb	r3, [r7, #7]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d109      	bne.n	800f1a0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f18c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800f190:	4806      	ldr	r0, [pc, #24]	@ (800f1ac <BSP_SD_Init+0x48>)
 800f192:	f7fd ff1d 	bl	800cfd0 <HAL_SD_ConfigWideBusOperation>
 800f196:	4603      	mov	r3, r0
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d001      	beq.n	800f1a0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f19c:	2301      	movs	r3, #1
 800f19e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f1a0:	79fb      	ldrb	r3, [r7, #7]
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3708      	adds	r7, #8
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	2400009c 	.word	0x2400009c

0800f1b0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b088      	sub	sp, #32
 800f1b4:	af02      	add	r7, sp, #8
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	60b9      	str	r1, [r7, #8]
 800f1ba:	607a      	str	r2, [r7, #4]
 800f1bc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	9300      	str	r3, [sp, #0]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	68ba      	ldr	r2, [r7, #8]
 800f1ca:	68f9      	ldr	r1, [r7, #12]
 800f1cc:	4806      	ldr	r0, [pc, #24]	@ (800f1e8 <BSP_SD_ReadBlocks+0x38>)
 800f1ce:	f7fd f959 	bl	800c484 <HAL_SD_ReadBlocks>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d001      	beq.n	800f1dc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f1d8:	2301      	movs	r3, #1
 800f1da:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f1dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3718      	adds	r7, #24
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	2400009c 	.word	0x2400009c

0800f1ec <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b088      	sub	sp, #32
 800f1f0:	af02      	add	r7, sp, #8
 800f1f2:	60f8      	str	r0, [r7, #12]
 800f1f4:	60b9      	str	r1, [r7, #8]
 800f1f6:	607a      	str	r2, [r7, #4]
 800f1f8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	9300      	str	r3, [sp, #0]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	68ba      	ldr	r2, [r7, #8]
 800f206:	68f9      	ldr	r1, [r7, #12]
 800f208:	4806      	ldr	r0, [pc, #24]	@ (800f224 <BSP_SD_WriteBlocks+0x38>)
 800f20a:	f7fd fac5 	bl	800c798 <HAL_SD_WriteBlocks>
 800f20e:	4603      	mov	r3, r0
 800f210:	2b00      	cmp	r3, #0
 800f212:	d001      	beq.n	800f218 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f214:	2301      	movs	r3, #1
 800f216:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f218:	7dfb      	ldrb	r3, [r7, #23]
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3718      	adds	r7, #24
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	2400009c 	.word	0x2400009c

0800f228 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f22c:	4805      	ldr	r0, [pc, #20]	@ (800f244 <BSP_SD_GetCardState+0x1c>)
 800f22e:	f7fd ffe1 	bl	800d1f4 <HAL_SD_GetCardState>
 800f232:	4603      	mov	r3, r0
 800f234:	2b04      	cmp	r3, #4
 800f236:	bf14      	ite	ne
 800f238:	2301      	movne	r3, #1
 800f23a:	2300      	moveq	r3, #0
 800f23c:	b2db      	uxtb	r3, r3
}
 800f23e:	4618      	mov	r0, r3
 800f240:	bd80      	pop	{r7, pc}
 800f242:	bf00      	nop
 800f244:	2400009c 	.word	0x2400009c

0800f248 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f250:	6879      	ldr	r1, [r7, #4]
 800f252:	4803      	ldr	r0, [pc, #12]	@ (800f260 <BSP_SD_GetCardInfo+0x18>)
 800f254:	f7fd fe90 	bl	800cf78 <HAL_SD_GetCardInfo>
}
 800f258:	bf00      	nop
 800f25a:	3708      	adds	r7, #8
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}
 800f260:	2400009c 	.word	0x2400009c

0800f264 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f26a:	2301      	movs	r3, #1
 800f26c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f26e:	f000 f80b 	bl	800f288 <BSP_PlatformIsDetected>
 800f272:	4603      	mov	r3, r0
 800f274:	2b00      	cmp	r3, #0
 800f276:	d101      	bne.n	800f27c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f278:	2300      	movs	r3, #0
 800f27a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f27c:	79fb      	ldrb	r3, [r7, #7]
 800f27e:	b2db      	uxtb	r3, r3
}
 800f280:	4618      	mov	r0, r3
 800f282:	3708      	adds	r7, #8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}

0800f288 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f28e:	2301      	movs	r3, #1
 800f290:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f292:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800f296:	4806      	ldr	r0, [pc, #24]	@ (800f2b0 <BSP_PlatformIsDetected+0x28>)
 800f298:	f7f6 fe12 	bl	8005ec0 <HAL_GPIO_ReadPin>
 800f29c:	4603      	mov	r3, r0
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d001      	beq.n	800f2a6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f2a6:	79fb      	ldrb	r3, [r7, #7]
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3708      	adds	r7, #8
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}
 800f2b0:	58020000 	.word	0x58020000

0800f2b4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f2be:	4b0b      	ldr	r3, [pc, #44]	@ (800f2ec <SD_CheckStatus+0x38>)
 800f2c0:	2201      	movs	r2, #1
 800f2c2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f2c4:	f7ff ffb0 	bl	800f228 <BSP_SD_GetCardState>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d107      	bne.n	800f2de <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f2ce:	4b07      	ldr	r3, [pc, #28]	@ (800f2ec <SD_CheckStatus+0x38>)
 800f2d0:	781b      	ldrb	r3, [r3, #0]
 800f2d2:	b2db      	uxtb	r3, r3
 800f2d4:	f023 0301 	bic.w	r3, r3, #1
 800f2d8:	b2da      	uxtb	r2, r3
 800f2da:	4b04      	ldr	r3, [pc, #16]	@ (800f2ec <SD_CheckStatus+0x38>)
 800f2dc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f2de:	4b03      	ldr	r3, [pc, #12]	@ (800f2ec <SD_CheckStatus+0x38>)
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	b2db      	uxtb	r3, r3
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3708      	adds	r7, #8
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}
 800f2ec:	24000015 	.word	0x24000015

0800f2f0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b082      	sub	sp, #8
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f2fa:	4b0b      	ldr	r3, [pc, #44]	@ (800f328 <SD_initialize+0x38>)
 800f2fc:	2201      	movs	r2, #1
 800f2fe:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f300:	f7ff ff30 	bl	800f164 <BSP_SD_Init>
 800f304:	4603      	mov	r3, r0
 800f306:	2b00      	cmp	r3, #0
 800f308:	d107      	bne.n	800f31a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800f30a:	79fb      	ldrb	r3, [r7, #7]
 800f30c:	4618      	mov	r0, r3
 800f30e:	f7ff ffd1 	bl	800f2b4 <SD_CheckStatus>
 800f312:	4603      	mov	r3, r0
 800f314:	461a      	mov	r2, r3
 800f316:	4b04      	ldr	r3, [pc, #16]	@ (800f328 <SD_initialize+0x38>)
 800f318:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f31a:	4b03      	ldr	r3, [pc, #12]	@ (800f328 <SD_initialize+0x38>)
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	b2db      	uxtb	r3, r3
}
 800f320:	4618      	mov	r0, r3
 800f322:	3708      	adds	r7, #8
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}
 800f328:	24000015 	.word	0x24000015

0800f32c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	4603      	mov	r3, r0
 800f334:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f336:	79fb      	ldrb	r3, [r7, #7]
 800f338:	4618      	mov	r0, r3
 800f33a:	f7ff ffbb 	bl	800f2b4 <SD_CheckStatus>
 800f33e:	4603      	mov	r3, r0
}
 800f340:	4618      	mov	r0, r3
 800f342:	3708      	adds	r7, #8
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}

0800f348 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b086      	sub	sp, #24
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60b9      	str	r1, [r7, #8]
 800f350:	607a      	str	r2, [r7, #4]
 800f352:	603b      	str	r3, [r7, #0]
 800f354:	4603      	mov	r3, r0
 800f356:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f358:	2301      	movs	r3, #1
 800f35a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800f35c:	f04f 33ff 	mov.w	r3, #4294967295
 800f360:	683a      	ldr	r2, [r7, #0]
 800f362:	6879      	ldr	r1, [r7, #4]
 800f364:	68b8      	ldr	r0, [r7, #8]
 800f366:	f7ff ff23 	bl	800f1b0 <BSP_SD_ReadBlocks>
 800f36a:	4603      	mov	r3, r0
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d107      	bne.n	800f380 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f370:	bf00      	nop
 800f372:	f7ff ff59 	bl	800f228 <BSP_SD_GetCardState>
 800f376:	4603      	mov	r3, r0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d1fa      	bne.n	800f372 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800f37c:	2300      	movs	r3, #0
 800f37e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f380:	7dfb      	ldrb	r3, [r7, #23]
}
 800f382:	4618      	mov	r0, r3
 800f384:	3718      	adds	r7, #24
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}

0800f38a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f38a:	b580      	push	{r7, lr}
 800f38c:	b086      	sub	sp, #24
 800f38e:	af00      	add	r7, sp, #0
 800f390:	60b9      	str	r1, [r7, #8]
 800f392:	607a      	str	r2, [r7, #4]
 800f394:	603b      	str	r3, [r7, #0]
 800f396:	4603      	mov	r3, r0
 800f398:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f39a:	2301      	movs	r3, #1
 800f39c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800f39e:	f04f 33ff 	mov.w	r3, #4294967295
 800f3a2:	683a      	ldr	r2, [r7, #0]
 800f3a4:	6879      	ldr	r1, [r7, #4]
 800f3a6:	68b8      	ldr	r0, [r7, #8]
 800f3a8:	f7ff ff20 	bl	800f1ec <BSP_SD_WriteBlocks>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d107      	bne.n	800f3c2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800f3b2:	bf00      	nop
 800f3b4:	f7ff ff38 	bl	800f228 <BSP_SD_GetCardState>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d1fa      	bne.n	800f3b4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f3c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3718      	adds	r7, #24
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}

0800f3cc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b08c      	sub	sp, #48	@ 0x30
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	603a      	str	r2, [r7, #0]
 800f3d6:	71fb      	strb	r3, [r7, #7]
 800f3d8:	460b      	mov	r3, r1
 800f3da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f3dc:	2301      	movs	r3, #1
 800f3de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f3e2:	4b25      	ldr	r3, [pc, #148]	@ (800f478 <SD_ioctl+0xac>)
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	b2db      	uxtb	r3, r3
 800f3e8:	f003 0301 	and.w	r3, r3, #1
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d001      	beq.n	800f3f4 <SD_ioctl+0x28>
 800f3f0:	2303      	movs	r3, #3
 800f3f2:	e03c      	b.n	800f46e <SD_ioctl+0xa2>

  switch (cmd)
 800f3f4:	79bb      	ldrb	r3, [r7, #6]
 800f3f6:	2b03      	cmp	r3, #3
 800f3f8:	d834      	bhi.n	800f464 <SD_ioctl+0x98>
 800f3fa:	a201      	add	r2, pc, #4	@ (adr r2, 800f400 <SD_ioctl+0x34>)
 800f3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f400:	0800f411 	.word	0x0800f411
 800f404:	0800f419 	.word	0x0800f419
 800f408:	0800f431 	.word	0x0800f431
 800f40c:	0800f44b 	.word	0x0800f44b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f410:	2300      	movs	r3, #0
 800f412:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f416:	e028      	b.n	800f46a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f418:	f107 0308 	add.w	r3, r7, #8
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7ff ff13 	bl	800f248 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f422:	6a3a      	ldr	r2, [r7, #32]
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f428:	2300      	movs	r3, #0
 800f42a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f42e:	e01c      	b.n	800f46a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f430:	f107 0308 	add.w	r3, r7, #8
 800f434:	4618      	mov	r0, r3
 800f436:	f7ff ff07 	bl	800f248 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f43c:	b29a      	uxth	r2, r3
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f442:	2300      	movs	r3, #0
 800f444:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f448:	e00f      	b.n	800f46a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f44a:	f107 0308 	add.w	r3, r7, #8
 800f44e:	4618      	mov	r0, r3
 800f450:	f7ff fefa 	bl	800f248 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f456:	0a5a      	lsrs	r2, r3, #9
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f45c:	2300      	movs	r3, #0
 800f45e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f462:	e002      	b.n	800f46a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f464:	2304      	movs	r3, #4
 800f466:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f46a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3730      	adds	r7, #48	@ 0x30
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	24000015 	.word	0x24000015

0800f47c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b084      	sub	sp, #16
 800f480:	af00      	add	r7, sp, #0
 800f482:	4603      	mov	r3, r0
 800f484:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f486:	79fb      	ldrb	r3, [r7, #7]
 800f488:	4a08      	ldr	r2, [pc, #32]	@ (800f4ac <disk_status+0x30>)
 800f48a:	009b      	lsls	r3, r3, #2
 800f48c:	4413      	add	r3, r2
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	79fa      	ldrb	r2, [r7, #7]
 800f494:	4905      	ldr	r1, [pc, #20]	@ (800f4ac <disk_status+0x30>)
 800f496:	440a      	add	r2, r1
 800f498:	7a12      	ldrb	r2, [r2, #8]
 800f49a:	4610      	mov	r0, r2
 800f49c:	4798      	blx	r3
 800f49e:	4603      	mov	r3, r0
 800f4a0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3710      	adds	r7, #16
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	240bc358 	.word	0x240bc358

0800f4b0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f4be:	79fb      	ldrb	r3, [r7, #7]
 800f4c0:	4a0e      	ldr	r2, [pc, #56]	@ (800f4fc <disk_initialize+0x4c>)
 800f4c2:	5cd3      	ldrb	r3, [r2, r3]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d114      	bne.n	800f4f2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f4c8:	79fb      	ldrb	r3, [r7, #7]
 800f4ca:	4a0c      	ldr	r2, [pc, #48]	@ (800f4fc <disk_initialize+0x4c>)
 800f4cc:	009b      	lsls	r3, r3, #2
 800f4ce:	4413      	add	r3, r2
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	79fa      	ldrb	r2, [r7, #7]
 800f4d6:	4909      	ldr	r1, [pc, #36]	@ (800f4fc <disk_initialize+0x4c>)
 800f4d8:	440a      	add	r2, r1
 800f4da:	7a12      	ldrb	r2, [r2, #8]
 800f4dc:	4610      	mov	r0, r2
 800f4de:	4798      	blx	r3
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800f4e4:	7bfb      	ldrb	r3, [r7, #15]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d103      	bne.n	800f4f2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800f4ea:	79fb      	ldrb	r3, [r7, #7]
 800f4ec:	4a03      	ldr	r2, [pc, #12]	@ (800f4fc <disk_initialize+0x4c>)
 800f4ee:	2101      	movs	r1, #1
 800f4f0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800f4f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3710      	adds	r7, #16
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}
 800f4fc:	240bc358 	.word	0x240bc358

0800f500 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f500:	b590      	push	{r4, r7, lr}
 800f502:	b087      	sub	sp, #28
 800f504:	af00      	add	r7, sp, #0
 800f506:	60b9      	str	r1, [r7, #8]
 800f508:	607a      	str	r2, [r7, #4]
 800f50a:	603b      	str	r3, [r7, #0]
 800f50c:	4603      	mov	r3, r0
 800f50e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f510:	7bfb      	ldrb	r3, [r7, #15]
 800f512:	4a0a      	ldr	r2, [pc, #40]	@ (800f53c <disk_read+0x3c>)
 800f514:	009b      	lsls	r3, r3, #2
 800f516:	4413      	add	r3, r2
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	689c      	ldr	r4, [r3, #8]
 800f51c:	7bfb      	ldrb	r3, [r7, #15]
 800f51e:	4a07      	ldr	r2, [pc, #28]	@ (800f53c <disk_read+0x3c>)
 800f520:	4413      	add	r3, r2
 800f522:	7a18      	ldrb	r0, [r3, #8]
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	687a      	ldr	r2, [r7, #4]
 800f528:	68b9      	ldr	r1, [r7, #8]
 800f52a:	47a0      	blx	r4
 800f52c:	4603      	mov	r3, r0
 800f52e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f530:	7dfb      	ldrb	r3, [r7, #23]
}
 800f532:	4618      	mov	r0, r3
 800f534:	371c      	adds	r7, #28
 800f536:	46bd      	mov	sp, r7
 800f538:	bd90      	pop	{r4, r7, pc}
 800f53a:	bf00      	nop
 800f53c:	240bc358 	.word	0x240bc358

0800f540 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f540:	b590      	push	{r4, r7, lr}
 800f542:	b087      	sub	sp, #28
 800f544:	af00      	add	r7, sp, #0
 800f546:	60b9      	str	r1, [r7, #8]
 800f548:	607a      	str	r2, [r7, #4]
 800f54a:	603b      	str	r3, [r7, #0]
 800f54c:	4603      	mov	r3, r0
 800f54e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f550:	7bfb      	ldrb	r3, [r7, #15]
 800f552:	4a0a      	ldr	r2, [pc, #40]	@ (800f57c <disk_write+0x3c>)
 800f554:	009b      	lsls	r3, r3, #2
 800f556:	4413      	add	r3, r2
 800f558:	685b      	ldr	r3, [r3, #4]
 800f55a:	68dc      	ldr	r4, [r3, #12]
 800f55c:	7bfb      	ldrb	r3, [r7, #15]
 800f55e:	4a07      	ldr	r2, [pc, #28]	@ (800f57c <disk_write+0x3c>)
 800f560:	4413      	add	r3, r2
 800f562:	7a18      	ldrb	r0, [r3, #8]
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	687a      	ldr	r2, [r7, #4]
 800f568:	68b9      	ldr	r1, [r7, #8]
 800f56a:	47a0      	blx	r4
 800f56c:	4603      	mov	r3, r0
 800f56e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f570:	7dfb      	ldrb	r3, [r7, #23]
}
 800f572:	4618      	mov	r0, r3
 800f574:	371c      	adds	r7, #28
 800f576:	46bd      	mov	sp, r7
 800f578:	bd90      	pop	{r4, r7, pc}
 800f57a:	bf00      	nop
 800f57c:	240bc358 	.word	0x240bc358

0800f580 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b084      	sub	sp, #16
 800f584:	af00      	add	r7, sp, #0
 800f586:	4603      	mov	r3, r0
 800f588:	603a      	str	r2, [r7, #0]
 800f58a:	71fb      	strb	r3, [r7, #7]
 800f58c:	460b      	mov	r3, r1
 800f58e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f590:	79fb      	ldrb	r3, [r7, #7]
 800f592:	4a09      	ldr	r2, [pc, #36]	@ (800f5b8 <disk_ioctl+0x38>)
 800f594:	009b      	lsls	r3, r3, #2
 800f596:	4413      	add	r3, r2
 800f598:	685b      	ldr	r3, [r3, #4]
 800f59a:	691b      	ldr	r3, [r3, #16]
 800f59c:	79fa      	ldrb	r2, [r7, #7]
 800f59e:	4906      	ldr	r1, [pc, #24]	@ (800f5b8 <disk_ioctl+0x38>)
 800f5a0:	440a      	add	r2, r1
 800f5a2:	7a10      	ldrb	r0, [r2, #8]
 800f5a4:	79b9      	ldrb	r1, [r7, #6]
 800f5a6:	683a      	ldr	r2, [r7, #0]
 800f5a8:	4798      	blx	r3
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	73fb      	strb	r3, [r7, #15]
  return res;
 800f5ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3710      	adds	r7, #16
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}
 800f5b8:	240bc358 	.word	0x240bc358

0800f5bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b085      	sub	sp, #20
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	3301      	adds	r3, #1
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f5cc:	89fb      	ldrh	r3, [r7, #14]
 800f5ce:	021b      	lsls	r3, r3, #8
 800f5d0:	b21a      	sxth	r2, r3
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	b21b      	sxth	r3, r3
 800f5d8:	4313      	orrs	r3, r2
 800f5da:	b21b      	sxth	r3, r3
 800f5dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f5de:	89fb      	ldrh	r3, [r7, #14]
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3714      	adds	r7, #20
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b085      	sub	sp, #20
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	3303      	adds	r3, #3
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	021b      	lsls	r3, r3, #8
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	3202      	adds	r2, #2
 800f604:	7812      	ldrb	r2, [r2, #0]
 800f606:	4313      	orrs	r3, r2
 800f608:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	021b      	lsls	r3, r3, #8
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	3201      	adds	r2, #1
 800f612:	7812      	ldrb	r2, [r2, #0]
 800f614:	4313      	orrs	r3, r2
 800f616:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	021b      	lsls	r3, r3, #8
 800f61c:	687a      	ldr	r2, [r7, #4]
 800f61e:	7812      	ldrb	r2, [r2, #0]
 800f620:	4313      	orrs	r3, r2
 800f622:	60fb      	str	r3, [r7, #12]
	return rv;
 800f624:	68fb      	ldr	r3, [r7, #12]
}
 800f626:	4618      	mov	r0, r3
 800f628:	3714      	adds	r7, #20
 800f62a:	46bd      	mov	sp, r7
 800f62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f630:	4770      	bx	lr

0800f632 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f632:	b480      	push	{r7}
 800f634:	b083      	sub	sp, #12
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
 800f63a:	460b      	mov	r3, r1
 800f63c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	1c5a      	adds	r2, r3, #1
 800f642:	607a      	str	r2, [r7, #4]
 800f644:	887a      	ldrh	r2, [r7, #2]
 800f646:	b2d2      	uxtb	r2, r2
 800f648:	701a      	strb	r2, [r3, #0]
 800f64a:	887b      	ldrh	r3, [r7, #2]
 800f64c:	0a1b      	lsrs	r3, r3, #8
 800f64e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	1c5a      	adds	r2, r3, #1
 800f654:	607a      	str	r2, [r7, #4]
 800f656:	887a      	ldrh	r2, [r7, #2]
 800f658:	b2d2      	uxtb	r2, r2
 800f65a:	701a      	strb	r2, [r3, #0]
}
 800f65c:	bf00      	nop
 800f65e:	370c      	adds	r7, #12
 800f660:	46bd      	mov	sp, r7
 800f662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f666:	4770      	bx	lr

0800f668 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f668:	b480      	push	{r7}
 800f66a:	b083      	sub	sp, #12
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
 800f670:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	1c5a      	adds	r2, r3, #1
 800f676:	607a      	str	r2, [r7, #4]
 800f678:	683a      	ldr	r2, [r7, #0]
 800f67a:	b2d2      	uxtb	r2, r2
 800f67c:	701a      	strb	r2, [r3, #0]
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	0a1b      	lsrs	r3, r3, #8
 800f682:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	1c5a      	adds	r2, r3, #1
 800f688:	607a      	str	r2, [r7, #4]
 800f68a:	683a      	ldr	r2, [r7, #0]
 800f68c:	b2d2      	uxtb	r2, r2
 800f68e:	701a      	strb	r2, [r3, #0]
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	0a1b      	lsrs	r3, r3, #8
 800f694:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	1c5a      	adds	r2, r3, #1
 800f69a:	607a      	str	r2, [r7, #4]
 800f69c:	683a      	ldr	r2, [r7, #0]
 800f69e:	b2d2      	uxtb	r2, r2
 800f6a0:	701a      	strb	r2, [r3, #0]
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	0a1b      	lsrs	r3, r3, #8
 800f6a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	1c5a      	adds	r2, r3, #1
 800f6ac:	607a      	str	r2, [r7, #4]
 800f6ae:	683a      	ldr	r2, [r7, #0]
 800f6b0:	b2d2      	uxtb	r2, r2
 800f6b2:	701a      	strb	r2, [r3, #0]
}
 800f6b4:	bf00      	nop
 800f6b6:	370c      	adds	r7, #12
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr

0800f6c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f6c0:	b480      	push	{r7}
 800f6c2:	b087      	sub	sp, #28
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	60f8      	str	r0, [r7, #12]
 800f6c8:	60b9      	str	r1, [r7, #8]
 800f6ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d00d      	beq.n	800f6f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f6da:	693a      	ldr	r2, [r7, #16]
 800f6dc:	1c53      	adds	r3, r2, #1
 800f6de:	613b      	str	r3, [r7, #16]
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	1c59      	adds	r1, r3, #1
 800f6e4:	6179      	str	r1, [r7, #20]
 800f6e6:	7812      	ldrb	r2, [r2, #0]
 800f6e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	3b01      	subs	r3, #1
 800f6ee:	607b      	str	r3, [r7, #4]
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d1f1      	bne.n	800f6da <mem_cpy+0x1a>
	}
}
 800f6f6:	bf00      	nop
 800f6f8:	371c      	adds	r7, #28
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f700:	4770      	bx	lr

0800f702 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f702:	b480      	push	{r7}
 800f704:	b087      	sub	sp, #28
 800f706:	af00      	add	r7, sp, #0
 800f708:	60f8      	str	r0, [r7, #12]
 800f70a:	60b9      	str	r1, [r7, #8]
 800f70c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	1c5a      	adds	r2, r3, #1
 800f716:	617a      	str	r2, [r7, #20]
 800f718:	68ba      	ldr	r2, [r7, #8]
 800f71a:	b2d2      	uxtb	r2, r2
 800f71c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	3b01      	subs	r3, #1
 800f722:	607b      	str	r3, [r7, #4]
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d1f3      	bne.n	800f712 <mem_set+0x10>
}
 800f72a:	bf00      	nop
 800f72c:	bf00      	nop
 800f72e:	371c      	adds	r7, #28
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr

0800f738 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f738:	b480      	push	{r7}
 800f73a:	b089      	sub	sp, #36	@ 0x24
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	60f8      	str	r0, [r7, #12]
 800f740:	60b9      	str	r1, [r7, #8]
 800f742:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	61fb      	str	r3, [r7, #28]
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f74c:	2300      	movs	r3, #0
 800f74e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f750:	69fb      	ldr	r3, [r7, #28]
 800f752:	1c5a      	adds	r2, r3, #1
 800f754:	61fa      	str	r2, [r7, #28]
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	4619      	mov	r1, r3
 800f75a:	69bb      	ldr	r3, [r7, #24]
 800f75c:	1c5a      	adds	r2, r3, #1
 800f75e:	61ba      	str	r2, [r7, #24]
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	1acb      	subs	r3, r1, r3
 800f764:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	3b01      	subs	r3, #1
 800f76a:	607b      	str	r3, [r7, #4]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d002      	beq.n	800f778 <mem_cmp+0x40>
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d0eb      	beq.n	800f750 <mem_cmp+0x18>

	return r;
 800f778:	697b      	ldr	r3, [r7, #20]
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	3724      	adds	r7, #36	@ 0x24
 800f77e:	46bd      	mov	sp, r7
 800f780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f784:	4770      	bx	lr

0800f786 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f786:	b480      	push	{r7}
 800f788:	b083      	sub	sp, #12
 800f78a:	af00      	add	r7, sp, #0
 800f78c:	6078      	str	r0, [r7, #4]
 800f78e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f790:	e002      	b.n	800f798 <chk_chr+0x12>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	3301      	adds	r3, #1
 800f796:	607b      	str	r3, [r7, #4]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	781b      	ldrb	r3, [r3, #0]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d005      	beq.n	800f7ac <chk_chr+0x26>
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d1f2      	bne.n	800f792 <chk_chr+0xc>
	return *str;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	781b      	ldrb	r3, [r3, #0]
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	370c      	adds	r7, #12
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ba:	4770      	bx	lr

0800f7bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f7bc:	b480      	push	{r7}
 800f7be:	b085      	sub	sp, #20
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	60bb      	str	r3, [r7, #8]
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	60fb      	str	r3, [r7, #12]
 800f7ce:	e029      	b.n	800f824 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f7d0:	4a27      	ldr	r2, [pc, #156]	@ (800f870 <chk_lock+0xb4>)
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	011b      	lsls	r3, r3, #4
 800f7d6:	4413      	add	r3, r2
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d01d      	beq.n	800f81a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f7de:	4a24      	ldr	r2, [pc, #144]	@ (800f870 <chk_lock+0xb4>)
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	011b      	lsls	r3, r3, #4
 800f7e4:	4413      	add	r3, r2
 800f7e6:	681a      	ldr	r2, [r3, #0]
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d116      	bne.n	800f81e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f7f0:	4a1f      	ldr	r2, [pc, #124]	@ (800f870 <chk_lock+0xb4>)
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	011b      	lsls	r3, r3, #4
 800f7f6:	4413      	add	r3, r2
 800f7f8:	3304      	adds	r3, #4
 800f7fa:	681a      	ldr	r2, [r3, #0]
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f800:	429a      	cmp	r2, r3
 800f802:	d10c      	bne.n	800f81e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f804:	4a1a      	ldr	r2, [pc, #104]	@ (800f870 <chk_lock+0xb4>)
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	011b      	lsls	r3, r3, #4
 800f80a:	4413      	add	r3, r2
 800f80c:	3308      	adds	r3, #8
 800f80e:	681a      	ldr	r2, [r3, #0]
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f814:	429a      	cmp	r2, r3
 800f816:	d102      	bne.n	800f81e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f818:	e007      	b.n	800f82a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f81a:	2301      	movs	r3, #1
 800f81c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	3301      	adds	r3, #1
 800f822:	60fb      	str	r3, [r7, #12]
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	2b01      	cmp	r3, #1
 800f828:	d9d2      	bls.n	800f7d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	2b02      	cmp	r3, #2
 800f82e:	d109      	bne.n	800f844 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d102      	bne.n	800f83c <chk_lock+0x80>
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	2b02      	cmp	r3, #2
 800f83a:	d101      	bne.n	800f840 <chk_lock+0x84>
 800f83c:	2300      	movs	r3, #0
 800f83e:	e010      	b.n	800f862 <chk_lock+0xa6>
 800f840:	2312      	movs	r3, #18
 800f842:	e00e      	b.n	800f862 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d108      	bne.n	800f85c <chk_lock+0xa0>
 800f84a:	4a09      	ldr	r2, [pc, #36]	@ (800f870 <chk_lock+0xb4>)
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	011b      	lsls	r3, r3, #4
 800f850:	4413      	add	r3, r2
 800f852:	330c      	adds	r3, #12
 800f854:	881b      	ldrh	r3, [r3, #0]
 800f856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f85a:	d101      	bne.n	800f860 <chk_lock+0xa4>
 800f85c:	2310      	movs	r3, #16
 800f85e:	e000      	b.n	800f862 <chk_lock+0xa6>
 800f860:	2300      	movs	r3, #0
}
 800f862:	4618      	mov	r0, r3
 800f864:	3714      	adds	r7, #20
 800f866:	46bd      	mov	sp, r7
 800f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86c:	4770      	bx	lr
 800f86e:	bf00      	nop
 800f870:	240bc338 	.word	0x240bc338

0800f874 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f874:	b480      	push	{r7}
 800f876:	b083      	sub	sp, #12
 800f878:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f87a:	2300      	movs	r3, #0
 800f87c:	607b      	str	r3, [r7, #4]
 800f87e:	e002      	b.n	800f886 <enq_lock+0x12>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	3301      	adds	r3, #1
 800f884:	607b      	str	r3, [r7, #4]
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d806      	bhi.n	800f89a <enq_lock+0x26>
 800f88c:	4a09      	ldr	r2, [pc, #36]	@ (800f8b4 <enq_lock+0x40>)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	011b      	lsls	r3, r3, #4
 800f892:	4413      	add	r3, r2
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d1f2      	bne.n	800f880 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2b02      	cmp	r3, #2
 800f89e:	bf14      	ite	ne
 800f8a0:	2301      	movne	r3, #1
 800f8a2:	2300      	moveq	r3, #0
 800f8a4:	b2db      	uxtb	r3, r3
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	370c      	adds	r7, #12
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b0:	4770      	bx	lr
 800f8b2:	bf00      	nop
 800f8b4:	240bc338 	.word	0x240bc338

0800f8b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	b085      	sub	sp, #20
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	60fb      	str	r3, [r7, #12]
 800f8c6:	e01f      	b.n	800f908 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f8c8:	4a41      	ldr	r2, [pc, #260]	@ (800f9d0 <inc_lock+0x118>)
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	011b      	lsls	r3, r3, #4
 800f8ce:	4413      	add	r3, r2
 800f8d0:	681a      	ldr	r2, [r3, #0]
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d113      	bne.n	800f902 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f8da:	4a3d      	ldr	r2, [pc, #244]	@ (800f9d0 <inc_lock+0x118>)
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	011b      	lsls	r3, r3, #4
 800f8e0:	4413      	add	r3, r2
 800f8e2:	3304      	adds	r3, #4
 800f8e4:	681a      	ldr	r2, [r3, #0]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d109      	bne.n	800f902 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f8ee:	4a38      	ldr	r2, [pc, #224]	@ (800f9d0 <inc_lock+0x118>)
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	011b      	lsls	r3, r3, #4
 800f8f4:	4413      	add	r3, r2
 800f8f6:	3308      	adds	r3, #8
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d006      	beq.n	800f910 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	3301      	adds	r3, #1
 800f906:	60fb      	str	r3, [r7, #12]
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	d9dc      	bls.n	800f8c8 <inc_lock+0x10>
 800f90e:	e000      	b.n	800f912 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f910:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	2b02      	cmp	r3, #2
 800f916:	d132      	bne.n	800f97e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f918:	2300      	movs	r3, #0
 800f91a:	60fb      	str	r3, [r7, #12]
 800f91c:	e002      	b.n	800f924 <inc_lock+0x6c>
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	3301      	adds	r3, #1
 800f922:	60fb      	str	r3, [r7, #12]
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	2b01      	cmp	r3, #1
 800f928:	d806      	bhi.n	800f938 <inc_lock+0x80>
 800f92a:	4a29      	ldr	r2, [pc, #164]	@ (800f9d0 <inc_lock+0x118>)
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	011b      	lsls	r3, r3, #4
 800f930:	4413      	add	r3, r2
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d1f2      	bne.n	800f91e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	2b02      	cmp	r3, #2
 800f93c:	d101      	bne.n	800f942 <inc_lock+0x8a>
 800f93e:	2300      	movs	r3, #0
 800f940:	e040      	b.n	800f9c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681a      	ldr	r2, [r3, #0]
 800f946:	4922      	ldr	r1, [pc, #136]	@ (800f9d0 <inc_lock+0x118>)
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	011b      	lsls	r3, r3, #4
 800f94c:	440b      	add	r3, r1
 800f94e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	689a      	ldr	r2, [r3, #8]
 800f954:	491e      	ldr	r1, [pc, #120]	@ (800f9d0 <inc_lock+0x118>)
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	011b      	lsls	r3, r3, #4
 800f95a:	440b      	add	r3, r1
 800f95c:	3304      	adds	r3, #4
 800f95e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	695a      	ldr	r2, [r3, #20]
 800f964:	491a      	ldr	r1, [pc, #104]	@ (800f9d0 <inc_lock+0x118>)
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	011b      	lsls	r3, r3, #4
 800f96a:	440b      	add	r3, r1
 800f96c:	3308      	adds	r3, #8
 800f96e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f970:	4a17      	ldr	r2, [pc, #92]	@ (800f9d0 <inc_lock+0x118>)
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	011b      	lsls	r3, r3, #4
 800f976:	4413      	add	r3, r2
 800f978:	330c      	adds	r3, #12
 800f97a:	2200      	movs	r2, #0
 800f97c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d009      	beq.n	800f998 <inc_lock+0xe0>
 800f984:	4a12      	ldr	r2, [pc, #72]	@ (800f9d0 <inc_lock+0x118>)
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	011b      	lsls	r3, r3, #4
 800f98a:	4413      	add	r3, r2
 800f98c:	330c      	adds	r3, #12
 800f98e:	881b      	ldrh	r3, [r3, #0]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d001      	beq.n	800f998 <inc_lock+0xe0>
 800f994:	2300      	movs	r3, #0
 800f996:	e015      	b.n	800f9c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d108      	bne.n	800f9b0 <inc_lock+0xf8>
 800f99e:	4a0c      	ldr	r2, [pc, #48]	@ (800f9d0 <inc_lock+0x118>)
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	011b      	lsls	r3, r3, #4
 800f9a4:	4413      	add	r3, r2
 800f9a6:	330c      	adds	r3, #12
 800f9a8:	881b      	ldrh	r3, [r3, #0]
 800f9aa:	3301      	adds	r3, #1
 800f9ac:	b29a      	uxth	r2, r3
 800f9ae:	e001      	b.n	800f9b4 <inc_lock+0xfc>
 800f9b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f9b4:	4906      	ldr	r1, [pc, #24]	@ (800f9d0 <inc_lock+0x118>)
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	011b      	lsls	r3, r3, #4
 800f9ba:	440b      	add	r3, r1
 800f9bc:	330c      	adds	r3, #12
 800f9be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	3301      	adds	r3, #1
}
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	3714      	adds	r7, #20
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ce:	4770      	bx	lr
 800f9d0:	240bc338 	.word	0x240bc338

0800f9d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f9d4:	b480      	push	{r7}
 800f9d6:	b085      	sub	sp, #20
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	3b01      	subs	r3, #1
 800f9e0:	607b      	str	r3, [r7, #4]
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2b01      	cmp	r3, #1
 800f9e6:	d825      	bhi.n	800fa34 <dec_lock+0x60>
		n = Files[i].ctr;
 800f9e8:	4a17      	ldr	r2, [pc, #92]	@ (800fa48 <dec_lock+0x74>)
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	011b      	lsls	r3, r3, #4
 800f9ee:	4413      	add	r3, r2
 800f9f0:	330c      	adds	r3, #12
 800f9f2:	881b      	ldrh	r3, [r3, #0]
 800f9f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f9f6:	89fb      	ldrh	r3, [r7, #14]
 800f9f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f9fc:	d101      	bne.n	800fa02 <dec_lock+0x2e>
 800f9fe:	2300      	movs	r3, #0
 800fa00:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fa02:	89fb      	ldrh	r3, [r7, #14]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d002      	beq.n	800fa0e <dec_lock+0x3a>
 800fa08:	89fb      	ldrh	r3, [r7, #14]
 800fa0a:	3b01      	subs	r3, #1
 800fa0c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fa0e:	4a0e      	ldr	r2, [pc, #56]	@ (800fa48 <dec_lock+0x74>)
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	011b      	lsls	r3, r3, #4
 800fa14:	4413      	add	r3, r2
 800fa16:	330c      	adds	r3, #12
 800fa18:	89fa      	ldrh	r2, [r7, #14]
 800fa1a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fa1c:	89fb      	ldrh	r3, [r7, #14]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d105      	bne.n	800fa2e <dec_lock+0x5a>
 800fa22:	4a09      	ldr	r2, [pc, #36]	@ (800fa48 <dec_lock+0x74>)
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	011b      	lsls	r3, r3, #4
 800fa28:	4413      	add	r3, r2
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	737b      	strb	r3, [r7, #13]
 800fa32:	e001      	b.n	800fa38 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fa34:	2302      	movs	r3, #2
 800fa36:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fa38:	7b7b      	ldrb	r3, [r7, #13]
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3714      	adds	r7, #20
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa44:	4770      	bx	lr
 800fa46:	bf00      	nop
 800fa48:	240bc338 	.word	0x240bc338

0800fa4c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b085      	sub	sp, #20
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fa54:	2300      	movs	r3, #0
 800fa56:	60fb      	str	r3, [r7, #12]
 800fa58:	e010      	b.n	800fa7c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fa5a:	4a0d      	ldr	r2, [pc, #52]	@ (800fa90 <clear_lock+0x44>)
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	011b      	lsls	r3, r3, #4
 800fa60:	4413      	add	r3, r2
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	687a      	ldr	r2, [r7, #4]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d105      	bne.n	800fa76 <clear_lock+0x2a>
 800fa6a:	4a09      	ldr	r2, [pc, #36]	@ (800fa90 <clear_lock+0x44>)
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	011b      	lsls	r3, r3, #4
 800fa70:	4413      	add	r3, r2
 800fa72:	2200      	movs	r2, #0
 800fa74:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	3301      	adds	r3, #1
 800fa7a:	60fb      	str	r3, [r7, #12]
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2b01      	cmp	r3, #1
 800fa80:	d9eb      	bls.n	800fa5a <clear_lock+0xe>
	}
}
 800fa82:	bf00      	nop
 800fa84:	bf00      	nop
 800fa86:	3714      	adds	r7, #20
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8e:	4770      	bx	lr
 800fa90:	240bc338 	.word	0x240bc338

0800fa94 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b086      	sub	sp, #24
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	78db      	ldrb	r3, [r3, #3]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d034      	beq.n	800fb12 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	7858      	ldrb	r0, [r3, #1]
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fab8:	2301      	movs	r3, #1
 800faba:	697a      	ldr	r2, [r7, #20]
 800fabc:	f7ff fd40 	bl	800f540 <disk_write>
 800fac0:	4603      	mov	r3, r0
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d002      	beq.n	800facc <sync_window+0x38>
			res = FR_DISK_ERR;
 800fac6:	2301      	movs	r3, #1
 800fac8:	73fb      	strb	r3, [r7, #15]
 800faca:	e022      	b.n	800fb12 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2200      	movs	r2, #0
 800fad0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6a1b      	ldr	r3, [r3, #32]
 800fad6:	697a      	ldr	r2, [r7, #20]
 800fad8:	1ad2      	subs	r2, r2, r3
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	699b      	ldr	r3, [r3, #24]
 800fade:	429a      	cmp	r2, r3
 800fae0:	d217      	bcs.n	800fb12 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	789b      	ldrb	r3, [r3, #2]
 800fae6:	613b      	str	r3, [r7, #16]
 800fae8:	e010      	b.n	800fb0c <sync_window+0x78>
					wsect += fs->fsize;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	699b      	ldr	r3, [r3, #24]
 800faee:	697a      	ldr	r2, [r7, #20]
 800faf0:	4413      	add	r3, r2
 800faf2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	7858      	ldrb	r0, [r3, #1]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fafe:	2301      	movs	r3, #1
 800fb00:	697a      	ldr	r2, [r7, #20]
 800fb02:	f7ff fd1d 	bl	800f540 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fb06:	693b      	ldr	r3, [r7, #16]
 800fb08:	3b01      	subs	r3, #1
 800fb0a:	613b      	str	r3, [r7, #16]
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	d8eb      	bhi.n	800faea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fb12:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3718      	adds	r7, #24
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}

0800fb1c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b084      	sub	sp, #16
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
 800fb24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fb26:	2300      	movs	r3, #0
 800fb28:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb2e:	683a      	ldr	r2, [r7, #0]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d01b      	beq.n	800fb6c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f7ff ffad 	bl	800fa94 <sync_window>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fb3e:	7bfb      	ldrb	r3, [r7, #15]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d113      	bne.n	800fb6c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	7858      	ldrb	r0, [r3, #1]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fb4e:	2301      	movs	r3, #1
 800fb50:	683a      	ldr	r2, [r7, #0]
 800fb52:	f7ff fcd5 	bl	800f500 <disk_read>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d004      	beq.n	800fb66 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fb5c:	f04f 33ff 	mov.w	r3, #4294967295
 800fb60:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fb62:	2301      	movs	r3, #1
 800fb64:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	683a      	ldr	r2, [r7, #0]
 800fb6a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800fb6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3710      	adds	r7, #16
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
	...

0800fb78 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b084      	sub	sp, #16
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f7ff ff87 	bl	800fa94 <sync_window>
 800fb86:	4603      	mov	r3, r0
 800fb88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fb8a:	7bfb      	ldrb	r3, [r7, #15]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d158      	bne.n	800fc42 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	2b03      	cmp	r3, #3
 800fb96:	d148      	bne.n	800fc2a <sync_fs+0xb2>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	791b      	ldrb	r3, [r3, #4]
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d144      	bne.n	800fc2a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	3330      	adds	r3, #48	@ 0x30
 800fba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fba8:	2100      	movs	r1, #0
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7ff fda9 	bl	800f702 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	3330      	adds	r3, #48	@ 0x30
 800fbb4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fbb8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f7ff fd38 	bl	800f632 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	3330      	adds	r3, #48	@ 0x30
 800fbc6:	4921      	ldr	r1, [pc, #132]	@ (800fc4c <sync_fs+0xd4>)
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f7ff fd4d 	bl	800f668 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	3330      	adds	r3, #48	@ 0x30
 800fbd2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fbd6:	491e      	ldr	r1, [pc, #120]	@ (800fc50 <sync_fs+0xd8>)
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7ff fd45 	bl	800f668 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	3330      	adds	r3, #48	@ 0x30
 800fbe2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	691b      	ldr	r3, [r3, #16]
 800fbea:	4619      	mov	r1, r3
 800fbec:	4610      	mov	r0, r2
 800fbee:	f7ff fd3b 	bl	800f668 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	3330      	adds	r3, #48	@ 0x30
 800fbf6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	68db      	ldr	r3, [r3, #12]
 800fbfe:	4619      	mov	r1, r3
 800fc00:	4610      	mov	r0, r2
 800fc02:	f7ff fd31 	bl	800f668 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	69db      	ldr	r3, [r3, #28]
 800fc0a:	1c5a      	adds	r2, r3, #1
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	7858      	ldrb	r0, [r3, #1]
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc1e:	2301      	movs	r3, #1
 800fc20:	f7ff fc8e 	bl	800f540 <disk_write>
			fs->fsi_flag = 0;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2200      	movs	r2, #0
 800fc28:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	785b      	ldrb	r3, [r3, #1]
 800fc2e:	2200      	movs	r2, #0
 800fc30:	2100      	movs	r1, #0
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7ff fca4 	bl	800f580 <disk_ioctl>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d001      	beq.n	800fc42 <sync_fs+0xca>
 800fc3e:	2301      	movs	r3, #1
 800fc40:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fc42:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc44:	4618      	mov	r0, r3
 800fc46:	3710      	adds	r7, #16
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	41615252 	.word	0x41615252
 800fc50:	61417272 	.word	0x61417272

0800fc54 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fc54:	b480      	push	{r7}
 800fc56:	b083      	sub	sp, #12
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
 800fc5c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	3b02      	subs	r3, #2
 800fc62:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	695b      	ldr	r3, [r3, #20]
 800fc68:	3b02      	subs	r3, #2
 800fc6a:	683a      	ldr	r2, [r7, #0]
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d301      	bcc.n	800fc74 <clust2sect+0x20>
 800fc70:	2300      	movs	r3, #0
 800fc72:	e008      	b.n	800fc86 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	895b      	ldrh	r3, [r3, #10]
 800fc78:	461a      	mov	r2, r3
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	fb03 f202 	mul.w	r2, r3, r2
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc84:	4413      	add	r3, r2
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	370c      	adds	r7, #12
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc90:	4770      	bx	lr

0800fc92 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fc92:	b580      	push	{r7, lr}
 800fc94:	b086      	sub	sp, #24
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	6078      	str	r0, [r7, #4]
 800fc9a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	d904      	bls.n	800fcb2 <get_fat+0x20>
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	695b      	ldr	r3, [r3, #20]
 800fcac:	683a      	ldr	r2, [r7, #0]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d302      	bcc.n	800fcb8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	617b      	str	r3, [r7, #20]
 800fcb6:	e08e      	b.n	800fdd6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fcb8:	f04f 33ff 	mov.w	r3, #4294967295
 800fcbc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	2b03      	cmp	r3, #3
 800fcc4:	d061      	beq.n	800fd8a <get_fat+0xf8>
 800fcc6:	2b03      	cmp	r3, #3
 800fcc8:	dc7b      	bgt.n	800fdc2 <get_fat+0x130>
 800fcca:	2b01      	cmp	r3, #1
 800fccc:	d002      	beq.n	800fcd4 <get_fat+0x42>
 800fcce:	2b02      	cmp	r3, #2
 800fcd0:	d041      	beq.n	800fd56 <get_fat+0xc4>
 800fcd2:	e076      	b.n	800fdc2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	60fb      	str	r3, [r7, #12]
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	085b      	lsrs	r3, r3, #1
 800fcdc:	68fa      	ldr	r2, [r7, #12]
 800fcde:	4413      	add	r3, r2
 800fce0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	6a1a      	ldr	r2, [r3, #32]
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	0a5b      	lsrs	r3, r3, #9
 800fcea:	4413      	add	r3, r2
 800fcec:	4619      	mov	r1, r3
 800fcee:	6938      	ldr	r0, [r7, #16]
 800fcf0:	f7ff ff14 	bl	800fb1c <move_window>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d166      	bne.n	800fdc8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	1c5a      	adds	r2, r3, #1
 800fcfe:	60fa      	str	r2, [r7, #12]
 800fd00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd04:	693a      	ldr	r2, [r7, #16]
 800fd06:	4413      	add	r3, r2
 800fd08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fd0c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	6a1a      	ldr	r2, [r3, #32]
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	0a5b      	lsrs	r3, r3, #9
 800fd16:	4413      	add	r3, r2
 800fd18:	4619      	mov	r1, r3
 800fd1a:	6938      	ldr	r0, [r7, #16]
 800fd1c:	f7ff fefe 	bl	800fb1c <move_window>
 800fd20:	4603      	mov	r3, r0
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d152      	bne.n	800fdcc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd2c:	693a      	ldr	r2, [r7, #16]
 800fd2e:	4413      	add	r3, r2
 800fd30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fd34:	021b      	lsls	r3, r3, #8
 800fd36:	68ba      	ldr	r2, [r7, #8]
 800fd38:	4313      	orrs	r3, r2
 800fd3a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	f003 0301 	and.w	r3, r3, #1
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d002      	beq.n	800fd4c <get_fat+0xba>
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	091b      	lsrs	r3, r3, #4
 800fd4a:	e002      	b.n	800fd52 <get_fat+0xc0>
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fd52:	617b      	str	r3, [r7, #20]
			break;
 800fd54:	e03f      	b.n	800fdd6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	6a1a      	ldr	r2, [r3, #32]
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	0a1b      	lsrs	r3, r3, #8
 800fd5e:	4413      	add	r3, r2
 800fd60:	4619      	mov	r1, r3
 800fd62:	6938      	ldr	r0, [r7, #16]
 800fd64:	f7ff feda 	bl	800fb1c <move_window>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d130      	bne.n	800fdd0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fd6e:	693b      	ldr	r3, [r7, #16]
 800fd70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	005b      	lsls	r3, r3, #1
 800fd78:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fd7c:	4413      	add	r3, r2
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7ff fc1c 	bl	800f5bc <ld_word>
 800fd84:	4603      	mov	r3, r0
 800fd86:	617b      	str	r3, [r7, #20]
			break;
 800fd88:	e025      	b.n	800fdd6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	6a1a      	ldr	r2, [r3, #32]
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	09db      	lsrs	r3, r3, #7
 800fd92:	4413      	add	r3, r2
 800fd94:	4619      	mov	r1, r3
 800fd96:	6938      	ldr	r0, [r7, #16]
 800fd98:	f7ff fec0 	bl	800fb1c <move_window>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d118      	bne.n	800fdd4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	009b      	lsls	r3, r3, #2
 800fdac:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fdb0:	4413      	add	r3, r2
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7ff fc1a 	bl	800f5ec <ld_dword>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800fdbe:	617b      	str	r3, [r7, #20]
			break;
 800fdc0:	e009      	b.n	800fdd6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	617b      	str	r3, [r7, #20]
 800fdc6:	e006      	b.n	800fdd6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fdc8:	bf00      	nop
 800fdca:	e004      	b.n	800fdd6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fdcc:	bf00      	nop
 800fdce:	e002      	b.n	800fdd6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fdd0:	bf00      	nop
 800fdd2:	e000      	b.n	800fdd6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fdd4:	bf00      	nop
		}
	}

	return val;
 800fdd6:	697b      	ldr	r3, [r7, #20]
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3718      	adds	r7, #24
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}

0800fde0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fde0:	b590      	push	{r4, r7, lr}
 800fde2:	b089      	sub	sp, #36	@ 0x24
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	60f8      	str	r0, [r7, #12]
 800fde8:	60b9      	str	r1, [r7, #8]
 800fdea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fdec:	2302      	movs	r3, #2
 800fdee:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	f240 80d9 	bls.w	800ffaa <put_fat+0x1ca>
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	695b      	ldr	r3, [r3, #20]
 800fdfc:	68ba      	ldr	r2, [r7, #8]
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	f080 80d3 	bcs.w	800ffaa <put_fat+0x1ca>
		switch (fs->fs_type) {
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	2b03      	cmp	r3, #3
 800fe0a:	f000 8096 	beq.w	800ff3a <put_fat+0x15a>
 800fe0e:	2b03      	cmp	r3, #3
 800fe10:	f300 80cb 	bgt.w	800ffaa <put_fat+0x1ca>
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d002      	beq.n	800fe1e <put_fat+0x3e>
 800fe18:	2b02      	cmp	r3, #2
 800fe1a:	d06e      	beq.n	800fefa <put_fat+0x11a>
 800fe1c:	e0c5      	b.n	800ffaa <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	61bb      	str	r3, [r7, #24]
 800fe22:	69bb      	ldr	r3, [r7, #24]
 800fe24:	085b      	lsrs	r3, r3, #1
 800fe26:	69ba      	ldr	r2, [r7, #24]
 800fe28:	4413      	add	r3, r2
 800fe2a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	6a1a      	ldr	r2, [r3, #32]
 800fe30:	69bb      	ldr	r3, [r7, #24]
 800fe32:	0a5b      	lsrs	r3, r3, #9
 800fe34:	4413      	add	r3, r2
 800fe36:	4619      	mov	r1, r3
 800fe38:	68f8      	ldr	r0, [r7, #12]
 800fe3a:	f7ff fe6f 	bl	800fb1c <move_window>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fe42:	7ffb      	ldrb	r3, [r7, #31]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	f040 80a9 	bne.w	800ff9c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fe50:	69bb      	ldr	r3, [r7, #24]
 800fe52:	1c59      	adds	r1, r3, #1
 800fe54:	61b9      	str	r1, [r7, #24]
 800fe56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe5a:	4413      	add	r3, r2
 800fe5c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	f003 0301 	and.w	r3, r3, #1
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d00d      	beq.n	800fe84 <put_fat+0xa4>
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	b25b      	sxtb	r3, r3
 800fe6e:	f003 030f 	and.w	r3, r3, #15
 800fe72:	b25a      	sxtb	r2, r3
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	b2db      	uxtb	r3, r3
 800fe78:	011b      	lsls	r3, r3, #4
 800fe7a:	b25b      	sxtb	r3, r3
 800fe7c:	4313      	orrs	r3, r2
 800fe7e:	b25b      	sxtb	r3, r3
 800fe80:	b2db      	uxtb	r3, r3
 800fe82:	e001      	b.n	800fe88 <put_fat+0xa8>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	b2db      	uxtb	r3, r3
 800fe88:	697a      	ldr	r2, [r7, #20]
 800fe8a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	2201      	movs	r2, #1
 800fe90:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	6a1a      	ldr	r2, [r3, #32]
 800fe96:	69bb      	ldr	r3, [r7, #24]
 800fe98:	0a5b      	lsrs	r3, r3, #9
 800fe9a:	4413      	add	r3, r2
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	68f8      	ldr	r0, [r7, #12]
 800fea0:	f7ff fe3c 	bl	800fb1c <move_window>
 800fea4:	4603      	mov	r3, r0
 800fea6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fea8:	7ffb      	ldrb	r3, [r7, #31]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d178      	bne.n	800ffa0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800feb4:	69bb      	ldr	r3, [r7, #24]
 800feb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800feba:	4413      	add	r3, r2
 800febc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	f003 0301 	and.w	r3, r3, #1
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d003      	beq.n	800fed0 <put_fat+0xf0>
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	091b      	lsrs	r3, r3, #4
 800fecc:	b2db      	uxtb	r3, r3
 800fece:	e00e      	b.n	800feee <put_fat+0x10e>
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	b25b      	sxtb	r3, r3
 800fed6:	f023 030f 	bic.w	r3, r3, #15
 800feda:	b25a      	sxtb	r2, r3
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	0a1b      	lsrs	r3, r3, #8
 800fee0:	b25b      	sxtb	r3, r3
 800fee2:	f003 030f 	and.w	r3, r3, #15
 800fee6:	b25b      	sxtb	r3, r3
 800fee8:	4313      	orrs	r3, r2
 800feea:	b25b      	sxtb	r3, r3
 800feec:	b2db      	uxtb	r3, r3
 800feee:	697a      	ldr	r2, [r7, #20]
 800fef0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	2201      	movs	r2, #1
 800fef6:	70da      	strb	r2, [r3, #3]
			break;
 800fef8:	e057      	b.n	800ffaa <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	6a1a      	ldr	r2, [r3, #32]
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	0a1b      	lsrs	r3, r3, #8
 800ff02:	4413      	add	r3, r2
 800ff04:	4619      	mov	r1, r3
 800ff06:	68f8      	ldr	r0, [r7, #12]
 800ff08:	f7ff fe08 	bl	800fb1c <move_window>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ff10:	7ffb      	ldrb	r3, [r7, #31]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d146      	bne.n	800ffa4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	005b      	lsls	r3, r3, #1
 800ff20:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ff24:	4413      	add	r3, r2
 800ff26:	687a      	ldr	r2, [r7, #4]
 800ff28:	b292      	uxth	r2, r2
 800ff2a:	4611      	mov	r1, r2
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f7ff fb80 	bl	800f632 <st_word>
			fs->wflag = 1;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	2201      	movs	r2, #1
 800ff36:	70da      	strb	r2, [r3, #3]
			break;
 800ff38:	e037      	b.n	800ffaa <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	6a1a      	ldr	r2, [r3, #32]
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	09db      	lsrs	r3, r3, #7
 800ff42:	4413      	add	r3, r2
 800ff44:	4619      	mov	r1, r3
 800ff46:	68f8      	ldr	r0, [r7, #12]
 800ff48:	f7ff fde8 	bl	800fb1c <move_window>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ff50:	7ffb      	ldrb	r3, [r7, #31]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d128      	bne.n	800ffa8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ff6a:	4413      	add	r3, r2
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7ff fb3d 	bl	800f5ec <ld_dword>
 800ff72:	4603      	mov	r3, r0
 800ff74:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ff78:	4323      	orrs	r3, r4
 800ff7a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	009b      	lsls	r3, r3, #2
 800ff86:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ff8a:	4413      	add	r3, r2
 800ff8c:	6879      	ldr	r1, [r7, #4]
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7ff fb6a 	bl	800f668 <st_dword>
			fs->wflag = 1;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	2201      	movs	r2, #1
 800ff98:	70da      	strb	r2, [r3, #3]
			break;
 800ff9a:	e006      	b.n	800ffaa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ff9c:	bf00      	nop
 800ff9e:	e004      	b.n	800ffaa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ffa0:	bf00      	nop
 800ffa2:	e002      	b.n	800ffaa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ffa4:	bf00      	nop
 800ffa6:	e000      	b.n	800ffaa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ffa8:	bf00      	nop
		}
	}
	return res;
 800ffaa:	7ffb      	ldrb	r3, [r7, #31]
}
 800ffac:	4618      	mov	r0, r3
 800ffae:	3724      	adds	r7, #36	@ 0x24
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd90      	pop	{r4, r7, pc}

0800ffb4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b088      	sub	sp, #32
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	60f8      	str	r0, [r7, #12]
 800ffbc:	60b9      	str	r1, [r7, #8]
 800ffbe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	2b01      	cmp	r3, #1
 800ffce:	d904      	bls.n	800ffda <remove_chain+0x26>
 800ffd0:	69bb      	ldr	r3, [r7, #24]
 800ffd2:	695b      	ldr	r3, [r3, #20]
 800ffd4:	68ba      	ldr	r2, [r7, #8]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d301      	bcc.n	800ffde <remove_chain+0x2a>
 800ffda:	2302      	movs	r3, #2
 800ffdc:	e04b      	b.n	8010076 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d00c      	beq.n	800fffe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ffe4:	f04f 32ff 	mov.w	r2, #4294967295
 800ffe8:	6879      	ldr	r1, [r7, #4]
 800ffea:	69b8      	ldr	r0, [r7, #24]
 800ffec:	f7ff fef8 	bl	800fde0 <put_fat>
 800fff0:	4603      	mov	r3, r0
 800fff2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fff4:	7ffb      	ldrb	r3, [r7, #31]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d001      	beq.n	800fffe <remove_chain+0x4a>
 800fffa:	7ffb      	ldrb	r3, [r7, #31]
 800fffc:	e03b      	b.n	8010076 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fffe:	68b9      	ldr	r1, [r7, #8]
 8010000:	68f8      	ldr	r0, [r7, #12]
 8010002:	f7ff fe46 	bl	800fc92 <get_fat>
 8010006:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d031      	beq.n	8010072 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	2b01      	cmp	r3, #1
 8010012:	d101      	bne.n	8010018 <remove_chain+0x64>
 8010014:	2302      	movs	r3, #2
 8010016:	e02e      	b.n	8010076 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801001e:	d101      	bne.n	8010024 <remove_chain+0x70>
 8010020:	2301      	movs	r3, #1
 8010022:	e028      	b.n	8010076 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010024:	2200      	movs	r2, #0
 8010026:	68b9      	ldr	r1, [r7, #8]
 8010028:	69b8      	ldr	r0, [r7, #24]
 801002a:	f7ff fed9 	bl	800fde0 <put_fat>
 801002e:	4603      	mov	r3, r0
 8010030:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010032:	7ffb      	ldrb	r3, [r7, #31]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d001      	beq.n	801003c <remove_chain+0x88>
 8010038:	7ffb      	ldrb	r3, [r7, #31]
 801003a:	e01c      	b.n	8010076 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801003c:	69bb      	ldr	r3, [r7, #24]
 801003e:	691a      	ldr	r2, [r3, #16]
 8010040:	69bb      	ldr	r3, [r7, #24]
 8010042:	695b      	ldr	r3, [r3, #20]
 8010044:	3b02      	subs	r3, #2
 8010046:	429a      	cmp	r2, r3
 8010048:	d20b      	bcs.n	8010062 <remove_chain+0xae>
			fs->free_clst++;
 801004a:	69bb      	ldr	r3, [r7, #24]
 801004c:	691b      	ldr	r3, [r3, #16]
 801004e:	1c5a      	adds	r2, r3, #1
 8010050:	69bb      	ldr	r3, [r7, #24]
 8010052:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8010054:	69bb      	ldr	r3, [r7, #24]
 8010056:	791b      	ldrb	r3, [r3, #4]
 8010058:	f043 0301 	orr.w	r3, r3, #1
 801005c:	b2da      	uxtb	r2, r3
 801005e:	69bb      	ldr	r3, [r7, #24]
 8010060:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010066:	69bb      	ldr	r3, [r7, #24]
 8010068:	695b      	ldr	r3, [r3, #20]
 801006a:	68ba      	ldr	r2, [r7, #8]
 801006c:	429a      	cmp	r2, r3
 801006e:	d3c6      	bcc.n	800fffe <remove_chain+0x4a>
 8010070:	e000      	b.n	8010074 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010072:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010074:	2300      	movs	r3, #0
}
 8010076:	4618      	mov	r0, r3
 8010078:	3720      	adds	r7, #32
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}

0801007e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801007e:	b580      	push	{r7, lr}
 8010080:	b088      	sub	sp, #32
 8010082:	af00      	add	r7, sp, #0
 8010084:	6078      	str	r0, [r7, #4]
 8010086:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d10d      	bne.n	80100b0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	68db      	ldr	r3, [r3, #12]
 8010098:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801009a:	69bb      	ldr	r3, [r7, #24]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d004      	beq.n	80100aa <create_chain+0x2c>
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	695b      	ldr	r3, [r3, #20]
 80100a4:	69ba      	ldr	r2, [r7, #24]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d31b      	bcc.n	80100e2 <create_chain+0x64>
 80100aa:	2301      	movs	r3, #1
 80100ac:	61bb      	str	r3, [r7, #24]
 80100ae:	e018      	b.n	80100e2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80100b0:	6839      	ldr	r1, [r7, #0]
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f7ff fded 	bl	800fc92 <get_fat>
 80100b8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	2b01      	cmp	r3, #1
 80100be:	d801      	bhi.n	80100c4 <create_chain+0x46>
 80100c0:	2301      	movs	r3, #1
 80100c2:	e070      	b.n	80101a6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100ca:	d101      	bne.n	80100d0 <create_chain+0x52>
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	e06a      	b.n	80101a6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80100d0:	693b      	ldr	r3, [r7, #16]
 80100d2:	695b      	ldr	r3, [r3, #20]
 80100d4:	68fa      	ldr	r2, [r7, #12]
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d201      	bcs.n	80100de <create_chain+0x60>
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	e063      	b.n	80101a6 <create_chain+0x128>
		scl = clst;
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80100e2:	69bb      	ldr	r3, [r7, #24]
 80100e4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80100e6:	69fb      	ldr	r3, [r7, #28]
 80100e8:	3301      	adds	r3, #1
 80100ea:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	695b      	ldr	r3, [r3, #20]
 80100f0:	69fa      	ldr	r2, [r7, #28]
 80100f2:	429a      	cmp	r2, r3
 80100f4:	d307      	bcc.n	8010106 <create_chain+0x88>
				ncl = 2;
 80100f6:	2302      	movs	r3, #2
 80100f8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80100fa:	69fa      	ldr	r2, [r7, #28]
 80100fc:	69bb      	ldr	r3, [r7, #24]
 80100fe:	429a      	cmp	r2, r3
 8010100:	d901      	bls.n	8010106 <create_chain+0x88>
 8010102:	2300      	movs	r3, #0
 8010104:	e04f      	b.n	80101a6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010106:	69f9      	ldr	r1, [r7, #28]
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f7ff fdc2 	bl	800fc92 <get_fat>
 801010e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d00e      	beq.n	8010134 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	2b01      	cmp	r3, #1
 801011a:	d003      	beq.n	8010124 <create_chain+0xa6>
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010122:	d101      	bne.n	8010128 <create_chain+0xaa>
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	e03e      	b.n	80101a6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010128:	69fa      	ldr	r2, [r7, #28]
 801012a:	69bb      	ldr	r3, [r7, #24]
 801012c:	429a      	cmp	r2, r3
 801012e:	d1da      	bne.n	80100e6 <create_chain+0x68>
 8010130:	2300      	movs	r3, #0
 8010132:	e038      	b.n	80101a6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010134:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010136:	f04f 32ff 	mov.w	r2, #4294967295
 801013a:	69f9      	ldr	r1, [r7, #28]
 801013c:	6938      	ldr	r0, [r7, #16]
 801013e:	f7ff fe4f 	bl	800fde0 <put_fat>
 8010142:	4603      	mov	r3, r0
 8010144:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010146:	7dfb      	ldrb	r3, [r7, #23]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d109      	bne.n	8010160 <create_chain+0xe2>
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d006      	beq.n	8010160 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010152:	69fa      	ldr	r2, [r7, #28]
 8010154:	6839      	ldr	r1, [r7, #0]
 8010156:	6938      	ldr	r0, [r7, #16]
 8010158:	f7ff fe42 	bl	800fde0 <put_fat>
 801015c:	4603      	mov	r3, r0
 801015e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010160:	7dfb      	ldrb	r3, [r7, #23]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d116      	bne.n	8010194 <create_chain+0x116>
		fs->last_clst = ncl;
 8010166:	693b      	ldr	r3, [r7, #16]
 8010168:	69fa      	ldr	r2, [r7, #28]
 801016a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	691a      	ldr	r2, [r3, #16]
 8010170:	693b      	ldr	r3, [r7, #16]
 8010172:	695b      	ldr	r3, [r3, #20]
 8010174:	3b02      	subs	r3, #2
 8010176:	429a      	cmp	r2, r3
 8010178:	d804      	bhi.n	8010184 <create_chain+0x106>
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	691b      	ldr	r3, [r3, #16]
 801017e:	1e5a      	subs	r2, r3, #1
 8010180:	693b      	ldr	r3, [r7, #16]
 8010182:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	791b      	ldrb	r3, [r3, #4]
 8010188:	f043 0301 	orr.w	r3, r3, #1
 801018c:	b2da      	uxtb	r2, r3
 801018e:	693b      	ldr	r3, [r7, #16]
 8010190:	711a      	strb	r2, [r3, #4]
 8010192:	e007      	b.n	80101a4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010194:	7dfb      	ldrb	r3, [r7, #23]
 8010196:	2b01      	cmp	r3, #1
 8010198:	d102      	bne.n	80101a0 <create_chain+0x122>
 801019a:	f04f 33ff 	mov.w	r3, #4294967295
 801019e:	e000      	b.n	80101a2 <create_chain+0x124>
 80101a0:	2301      	movs	r3, #1
 80101a2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80101a4:	69fb      	ldr	r3, [r7, #28]
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3720      	adds	r7, #32
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}

080101ae <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80101ae:	b480      	push	{r7}
 80101b0:	b087      	sub	sp, #28
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
 80101b6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101c2:	3304      	adds	r3, #4
 80101c4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	0a5b      	lsrs	r3, r3, #9
 80101ca:	68fa      	ldr	r2, [r7, #12]
 80101cc:	8952      	ldrh	r2, [r2, #10]
 80101ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80101d2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80101d4:	693b      	ldr	r3, [r7, #16]
 80101d6:	1d1a      	adds	r2, r3, #4
 80101d8:	613a      	str	r2, [r7, #16]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d101      	bne.n	80101e8 <clmt_clust+0x3a>
 80101e4:	2300      	movs	r3, #0
 80101e6:	e010      	b.n	801020a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80101e8:	697a      	ldr	r2, [r7, #20]
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d307      	bcc.n	8010200 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80101f0:	697a      	ldr	r2, [r7, #20]
 80101f2:	68bb      	ldr	r3, [r7, #8]
 80101f4:	1ad3      	subs	r3, r2, r3
 80101f6:	617b      	str	r3, [r7, #20]
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	3304      	adds	r3, #4
 80101fc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80101fe:	e7e9      	b.n	80101d4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010200:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010202:	693b      	ldr	r3, [r7, #16]
 8010204:	681a      	ldr	r2, [r3, #0]
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	4413      	add	r3, r2
}
 801020a:	4618      	mov	r0, r3
 801020c:	371c      	adds	r7, #28
 801020e:	46bd      	mov	sp, r7
 8010210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010214:	4770      	bx	lr

08010216 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010216:	b580      	push	{r7, lr}
 8010218:	b086      	sub	sp, #24
 801021a:	af00      	add	r7, sp, #0
 801021c:	6078      	str	r0, [r7, #4]
 801021e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801022c:	d204      	bcs.n	8010238 <dir_sdi+0x22>
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	f003 031f 	and.w	r3, r3, #31
 8010234:	2b00      	cmp	r3, #0
 8010236:	d001      	beq.n	801023c <dir_sdi+0x26>
		return FR_INT_ERR;
 8010238:	2302      	movs	r3, #2
 801023a:	e063      	b.n	8010304 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	683a      	ldr	r2, [r7, #0]
 8010240:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	689b      	ldr	r3, [r3, #8]
 8010246:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d106      	bne.n	801025c <dir_sdi+0x46>
 801024e:	693b      	ldr	r3, [r7, #16]
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	2b02      	cmp	r3, #2
 8010254:	d902      	bls.n	801025c <dir_sdi+0x46>
		clst = fs->dirbase;
 8010256:	693b      	ldr	r3, [r7, #16]
 8010258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801025a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d10c      	bne.n	801027c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	095b      	lsrs	r3, r3, #5
 8010266:	693a      	ldr	r2, [r7, #16]
 8010268:	8912      	ldrh	r2, [r2, #8]
 801026a:	4293      	cmp	r3, r2
 801026c:	d301      	bcc.n	8010272 <dir_sdi+0x5c>
 801026e:	2302      	movs	r3, #2
 8010270:	e048      	b.n	8010304 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010272:	693b      	ldr	r3, [r7, #16]
 8010274:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	61da      	str	r2, [r3, #28]
 801027a:	e029      	b.n	80102d0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801027c:	693b      	ldr	r3, [r7, #16]
 801027e:	895b      	ldrh	r3, [r3, #10]
 8010280:	025b      	lsls	r3, r3, #9
 8010282:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010284:	e019      	b.n	80102ba <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6979      	ldr	r1, [r7, #20]
 801028a:	4618      	mov	r0, r3
 801028c:	f7ff fd01 	bl	800fc92 <get_fat>
 8010290:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010298:	d101      	bne.n	801029e <dir_sdi+0x88>
 801029a:	2301      	movs	r3, #1
 801029c:	e032      	b.n	8010304 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	2b01      	cmp	r3, #1
 80102a2:	d904      	bls.n	80102ae <dir_sdi+0x98>
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	695b      	ldr	r3, [r3, #20]
 80102a8:	697a      	ldr	r2, [r7, #20]
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d301      	bcc.n	80102b2 <dir_sdi+0x9c>
 80102ae:	2302      	movs	r3, #2
 80102b0:	e028      	b.n	8010304 <dir_sdi+0xee>
			ofs -= csz;
 80102b2:	683a      	ldr	r2, [r7, #0]
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	1ad3      	subs	r3, r2, r3
 80102b8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80102ba:	683a      	ldr	r2, [r7, #0]
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	429a      	cmp	r2, r3
 80102c0:	d2e1      	bcs.n	8010286 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80102c2:	6979      	ldr	r1, [r7, #20]
 80102c4:	6938      	ldr	r0, [r7, #16]
 80102c6:	f7ff fcc5 	bl	800fc54 <clust2sect>
 80102ca:	4602      	mov	r2, r0
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	697a      	ldr	r2, [r7, #20]
 80102d4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	69db      	ldr	r3, [r3, #28]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d101      	bne.n	80102e2 <dir_sdi+0xcc>
 80102de:	2302      	movs	r3, #2
 80102e0:	e010      	b.n	8010304 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	69da      	ldr	r2, [r3, #28]
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	0a5b      	lsrs	r3, r3, #9
 80102ea:	441a      	add	r2, r3
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102fc:	441a      	add	r2, r3
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010302:	2300      	movs	r3, #0
}
 8010304:	4618      	mov	r0, r3
 8010306:	3718      	adds	r7, #24
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}

0801030c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b086      	sub	sp, #24
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	695b      	ldr	r3, [r3, #20]
 8010320:	3320      	adds	r3, #32
 8010322:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	69db      	ldr	r3, [r3, #28]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d003      	beq.n	8010334 <dir_next+0x28>
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010332:	d301      	bcc.n	8010338 <dir_next+0x2c>
 8010334:	2304      	movs	r3, #4
 8010336:	e0aa      	b.n	801048e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801033e:	2b00      	cmp	r3, #0
 8010340:	f040 8098 	bne.w	8010474 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	69db      	ldr	r3, [r3, #28]
 8010348:	1c5a      	adds	r2, r3, #1
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	699b      	ldr	r3, [r3, #24]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d10b      	bne.n	801036e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	095b      	lsrs	r3, r3, #5
 801035a:	68fa      	ldr	r2, [r7, #12]
 801035c:	8912      	ldrh	r2, [r2, #8]
 801035e:	4293      	cmp	r3, r2
 8010360:	f0c0 8088 	bcc.w	8010474 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2200      	movs	r2, #0
 8010368:	61da      	str	r2, [r3, #28]
 801036a:	2304      	movs	r3, #4
 801036c:	e08f      	b.n	801048e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	0a5b      	lsrs	r3, r3, #9
 8010372:	68fa      	ldr	r2, [r7, #12]
 8010374:	8952      	ldrh	r2, [r2, #10]
 8010376:	3a01      	subs	r2, #1
 8010378:	4013      	ands	r3, r2
 801037a:	2b00      	cmp	r3, #0
 801037c:	d17a      	bne.n	8010474 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801037e:	687a      	ldr	r2, [r7, #4]
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	699b      	ldr	r3, [r3, #24]
 8010384:	4619      	mov	r1, r3
 8010386:	4610      	mov	r0, r2
 8010388:	f7ff fc83 	bl	800fc92 <get_fat>
 801038c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	2b01      	cmp	r3, #1
 8010392:	d801      	bhi.n	8010398 <dir_next+0x8c>
 8010394:	2302      	movs	r3, #2
 8010396:	e07a      	b.n	801048e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801039e:	d101      	bne.n	80103a4 <dir_next+0x98>
 80103a0:	2301      	movs	r3, #1
 80103a2:	e074      	b.n	801048e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	695b      	ldr	r3, [r3, #20]
 80103a8:	697a      	ldr	r2, [r7, #20]
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d358      	bcc.n	8010460 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d104      	bne.n	80103be <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2200      	movs	r2, #0
 80103b8:	61da      	str	r2, [r3, #28]
 80103ba:	2304      	movs	r3, #4
 80103bc:	e067      	b.n	801048e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	699b      	ldr	r3, [r3, #24]
 80103c4:	4619      	mov	r1, r3
 80103c6:	4610      	mov	r0, r2
 80103c8:	f7ff fe59 	bl	801007e <create_chain>
 80103cc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d101      	bne.n	80103d8 <dir_next+0xcc>
 80103d4:	2307      	movs	r3, #7
 80103d6:	e05a      	b.n	801048e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	2b01      	cmp	r3, #1
 80103dc:	d101      	bne.n	80103e2 <dir_next+0xd6>
 80103de:	2302      	movs	r3, #2
 80103e0:	e055      	b.n	801048e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103e8:	d101      	bne.n	80103ee <dir_next+0xe2>
 80103ea:	2301      	movs	r3, #1
 80103ec:	e04f      	b.n	801048e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80103ee:	68f8      	ldr	r0, [r7, #12]
 80103f0:	f7ff fb50 	bl	800fa94 <sync_window>
 80103f4:	4603      	mov	r3, r0
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d001      	beq.n	80103fe <dir_next+0xf2>
 80103fa:	2301      	movs	r3, #1
 80103fc:	e047      	b.n	801048e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	3330      	adds	r3, #48	@ 0x30
 8010402:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010406:	2100      	movs	r1, #0
 8010408:	4618      	mov	r0, r3
 801040a:	f7ff f97a 	bl	800f702 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801040e:	2300      	movs	r3, #0
 8010410:	613b      	str	r3, [r7, #16]
 8010412:	6979      	ldr	r1, [r7, #20]
 8010414:	68f8      	ldr	r0, [r7, #12]
 8010416:	f7ff fc1d 	bl	800fc54 <clust2sect>
 801041a:	4602      	mov	r2, r0
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010420:	e012      	b.n	8010448 <dir_next+0x13c>
						fs->wflag = 1;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	2201      	movs	r2, #1
 8010426:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010428:	68f8      	ldr	r0, [r7, #12]
 801042a:	f7ff fb33 	bl	800fa94 <sync_window>
 801042e:	4603      	mov	r3, r0
 8010430:	2b00      	cmp	r3, #0
 8010432:	d001      	beq.n	8010438 <dir_next+0x12c>
 8010434:	2301      	movs	r3, #1
 8010436:	e02a      	b.n	801048e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	3301      	adds	r3, #1
 801043c:	613b      	str	r3, [r7, #16]
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010442:	1c5a      	adds	r2, r3, #1
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	895b      	ldrh	r3, [r3, #10]
 801044c:	461a      	mov	r2, r3
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	4293      	cmp	r3, r2
 8010452:	d3e6      	bcc.n	8010422 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	1ad2      	subs	r2, r2, r3
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	697a      	ldr	r2, [r7, #20]
 8010464:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010466:	6979      	ldr	r1, [r7, #20]
 8010468:	68f8      	ldr	r0, [r7, #12]
 801046a:	f7ff fbf3 	bl	800fc54 <clust2sect>
 801046e:	4602      	mov	r2, r0
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	68ba      	ldr	r2, [r7, #8]
 8010478:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010486:	441a      	add	r2, r3
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801048c:	2300      	movs	r3, #0
}
 801048e:	4618      	mov	r0, r3
 8010490:	3718      	adds	r7, #24
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}

08010496 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010496:	b580      	push	{r7, lr}
 8010498:	b086      	sub	sp, #24
 801049a:	af00      	add	r7, sp, #0
 801049c:	6078      	str	r0, [r7, #4]
 801049e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80104a6:	2100      	movs	r1, #0
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f7ff feb4 	bl	8010216 <dir_sdi>
 80104ae:	4603      	mov	r3, r0
 80104b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80104b2:	7dfb      	ldrb	r3, [r7, #23]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d12b      	bne.n	8010510 <dir_alloc+0x7a>
		n = 0;
 80104b8:	2300      	movs	r3, #0
 80104ba:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	69db      	ldr	r3, [r3, #28]
 80104c0:	4619      	mov	r1, r3
 80104c2:	68f8      	ldr	r0, [r7, #12]
 80104c4:	f7ff fb2a 	bl	800fb1c <move_window>
 80104c8:	4603      	mov	r3, r0
 80104ca:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80104cc:	7dfb      	ldrb	r3, [r7, #23]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d11d      	bne.n	801050e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6a1b      	ldr	r3, [r3, #32]
 80104d6:	781b      	ldrb	r3, [r3, #0]
 80104d8:	2be5      	cmp	r3, #229	@ 0xe5
 80104da:	d004      	beq.n	80104e6 <dir_alloc+0x50>
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	6a1b      	ldr	r3, [r3, #32]
 80104e0:	781b      	ldrb	r3, [r3, #0]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d107      	bne.n	80104f6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	3301      	adds	r3, #1
 80104ea:	613b      	str	r3, [r7, #16]
 80104ec:	693a      	ldr	r2, [r7, #16]
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d102      	bne.n	80104fa <dir_alloc+0x64>
 80104f4:	e00c      	b.n	8010510 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80104f6:	2300      	movs	r3, #0
 80104f8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80104fa:	2101      	movs	r1, #1
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f7ff ff05 	bl	801030c <dir_next>
 8010502:	4603      	mov	r3, r0
 8010504:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010506:	7dfb      	ldrb	r3, [r7, #23]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d0d7      	beq.n	80104bc <dir_alloc+0x26>
 801050c:	e000      	b.n	8010510 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801050e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010510:	7dfb      	ldrb	r3, [r7, #23]
 8010512:	2b04      	cmp	r3, #4
 8010514:	d101      	bne.n	801051a <dir_alloc+0x84>
 8010516:	2307      	movs	r3, #7
 8010518:	75fb      	strb	r3, [r7, #23]
	return res;
 801051a:	7dfb      	ldrb	r3, [r7, #23]
}
 801051c:	4618      	mov	r0, r3
 801051e:	3718      	adds	r7, #24
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b084      	sub	sp, #16
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	331a      	adds	r3, #26
 8010532:	4618      	mov	r0, r3
 8010534:	f7ff f842 	bl	800f5bc <ld_word>
 8010538:	4603      	mov	r3, r0
 801053a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	781b      	ldrb	r3, [r3, #0]
 8010540:	2b03      	cmp	r3, #3
 8010542:	d109      	bne.n	8010558 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	3314      	adds	r3, #20
 8010548:	4618      	mov	r0, r3
 801054a:	f7ff f837 	bl	800f5bc <ld_word>
 801054e:	4603      	mov	r3, r0
 8010550:	041b      	lsls	r3, r3, #16
 8010552:	68fa      	ldr	r2, [r7, #12]
 8010554:	4313      	orrs	r3, r2
 8010556:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010558:	68fb      	ldr	r3, [r7, #12]
}
 801055a:	4618      	mov	r0, r3
 801055c:	3710      	adds	r7, #16
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}

08010562 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010562:	b580      	push	{r7, lr}
 8010564:	b084      	sub	sp, #16
 8010566:	af00      	add	r7, sp, #0
 8010568:	60f8      	str	r0, [r7, #12]
 801056a:	60b9      	str	r1, [r7, #8]
 801056c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	331a      	adds	r3, #26
 8010572:	687a      	ldr	r2, [r7, #4]
 8010574:	b292      	uxth	r2, r2
 8010576:	4611      	mov	r1, r2
 8010578:	4618      	mov	r0, r3
 801057a:	f7ff f85a 	bl	800f632 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	2b03      	cmp	r3, #3
 8010584:	d109      	bne.n	801059a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	f103 0214 	add.w	r2, r3, #20
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	0c1b      	lsrs	r3, r3, #16
 8010590:	b29b      	uxth	r3, r3
 8010592:	4619      	mov	r1, r3
 8010594:	4610      	mov	r0, r2
 8010596:	f7ff f84c 	bl	800f632 <st_word>
	}
}
 801059a:	bf00      	nop
 801059c:	3710      	adds	r7, #16
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}

080105a2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80105a2:	b580      	push	{r7, lr}
 80105a4:	b086      	sub	sp, #24
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80105b0:	2100      	movs	r1, #0
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f7ff fe2f 	bl	8010216 <dir_sdi>
 80105b8:	4603      	mov	r3, r0
 80105ba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80105bc:	7dfb      	ldrb	r3, [r7, #23]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d001      	beq.n	80105c6 <dir_find+0x24>
 80105c2:	7dfb      	ldrb	r3, [r7, #23]
 80105c4:	e03e      	b.n	8010644 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	69db      	ldr	r3, [r3, #28]
 80105ca:	4619      	mov	r1, r3
 80105cc:	6938      	ldr	r0, [r7, #16]
 80105ce:	f7ff faa5 	bl	800fb1c <move_window>
 80105d2:	4603      	mov	r3, r0
 80105d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80105d6:	7dfb      	ldrb	r3, [r7, #23]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d12f      	bne.n	801063c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6a1b      	ldr	r3, [r3, #32]
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80105e4:	7bfb      	ldrb	r3, [r7, #15]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d102      	bne.n	80105f0 <dir_find+0x4e>
 80105ea:	2304      	movs	r3, #4
 80105ec:	75fb      	strb	r3, [r7, #23]
 80105ee:	e028      	b.n	8010642 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6a1b      	ldr	r3, [r3, #32]
 80105f4:	330b      	adds	r3, #11
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80105fc:	b2da      	uxtb	r2, r3
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6a1b      	ldr	r3, [r3, #32]
 8010606:	330b      	adds	r3, #11
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	f003 0308 	and.w	r3, r3, #8
 801060e:	2b00      	cmp	r3, #0
 8010610:	d10a      	bne.n	8010628 <dir_find+0x86>
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6a18      	ldr	r0, [r3, #32]
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	3324      	adds	r3, #36	@ 0x24
 801061a:	220b      	movs	r2, #11
 801061c:	4619      	mov	r1, r3
 801061e:	f7ff f88b 	bl	800f738 <mem_cmp>
 8010622:	4603      	mov	r3, r0
 8010624:	2b00      	cmp	r3, #0
 8010626:	d00b      	beq.n	8010640 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010628:	2100      	movs	r1, #0
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f7ff fe6e 	bl	801030c <dir_next>
 8010630:	4603      	mov	r3, r0
 8010632:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010634:	7dfb      	ldrb	r3, [r7, #23]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d0c5      	beq.n	80105c6 <dir_find+0x24>
 801063a:	e002      	b.n	8010642 <dir_find+0xa0>
		if (res != FR_OK) break;
 801063c:	bf00      	nop
 801063e:	e000      	b.n	8010642 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010640:	bf00      	nop

	return res;
 8010642:	7dfb      	ldrb	r3, [r7, #23]
}
 8010644:	4618      	mov	r0, r3
 8010646:	3718      	adds	r7, #24
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}

0801064c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b084      	sub	sp, #16
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801065a:	2101      	movs	r1, #1
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f7ff ff1a 	bl	8010496 <dir_alloc>
 8010662:	4603      	mov	r3, r0
 8010664:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010666:	7bfb      	ldrb	r3, [r7, #15]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d11c      	bne.n	80106a6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	69db      	ldr	r3, [r3, #28]
 8010670:	4619      	mov	r1, r3
 8010672:	68b8      	ldr	r0, [r7, #8]
 8010674:	f7ff fa52 	bl	800fb1c <move_window>
 8010678:	4603      	mov	r3, r0
 801067a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801067c:	7bfb      	ldrb	r3, [r7, #15]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d111      	bne.n	80106a6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6a1b      	ldr	r3, [r3, #32]
 8010686:	2220      	movs	r2, #32
 8010688:	2100      	movs	r1, #0
 801068a:	4618      	mov	r0, r3
 801068c:	f7ff f839 	bl	800f702 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	6a18      	ldr	r0, [r3, #32]
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	3324      	adds	r3, #36	@ 0x24
 8010698:	220b      	movs	r2, #11
 801069a:	4619      	mov	r1, r3
 801069c:	f7ff f810 	bl	800f6c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	2201      	movs	r2, #1
 80106a4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80106a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3710      	adds	r7, #16
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b088      	sub	sp, #32
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	60fb      	str	r3, [r7, #12]
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	3324      	adds	r3, #36	@ 0x24
 80106c4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80106c6:	220b      	movs	r2, #11
 80106c8:	2120      	movs	r1, #32
 80106ca:	68b8      	ldr	r0, [r7, #8]
 80106cc:	f7ff f819 	bl	800f702 <mem_set>
	si = i = 0; ni = 8;
 80106d0:	2300      	movs	r3, #0
 80106d2:	613b      	str	r3, [r7, #16]
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	61fb      	str	r3, [r7, #28]
 80106d8:	2308      	movs	r3, #8
 80106da:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80106dc:	69fb      	ldr	r3, [r7, #28]
 80106de:	1c5a      	adds	r2, r3, #1
 80106e0:	61fa      	str	r2, [r7, #28]
 80106e2:	68fa      	ldr	r2, [r7, #12]
 80106e4:	4413      	add	r3, r2
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80106ea:	7efb      	ldrb	r3, [r7, #27]
 80106ec:	2b20      	cmp	r3, #32
 80106ee:	d94e      	bls.n	801078e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80106f0:	7efb      	ldrb	r3, [r7, #27]
 80106f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80106f4:	d006      	beq.n	8010704 <create_name+0x54>
 80106f6:	7efb      	ldrb	r3, [r7, #27]
 80106f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80106fa:	d110      	bne.n	801071e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80106fc:	e002      	b.n	8010704 <create_name+0x54>
 80106fe:	69fb      	ldr	r3, [r7, #28]
 8010700:	3301      	adds	r3, #1
 8010702:	61fb      	str	r3, [r7, #28]
 8010704:	68fa      	ldr	r2, [r7, #12]
 8010706:	69fb      	ldr	r3, [r7, #28]
 8010708:	4413      	add	r3, r2
 801070a:	781b      	ldrb	r3, [r3, #0]
 801070c:	2b2f      	cmp	r3, #47	@ 0x2f
 801070e:	d0f6      	beq.n	80106fe <create_name+0x4e>
 8010710:	68fa      	ldr	r2, [r7, #12]
 8010712:	69fb      	ldr	r3, [r7, #28]
 8010714:	4413      	add	r3, r2
 8010716:	781b      	ldrb	r3, [r3, #0]
 8010718:	2b5c      	cmp	r3, #92	@ 0x5c
 801071a:	d0f0      	beq.n	80106fe <create_name+0x4e>
			break;
 801071c:	e038      	b.n	8010790 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801071e:	7efb      	ldrb	r3, [r7, #27]
 8010720:	2b2e      	cmp	r3, #46	@ 0x2e
 8010722:	d003      	beq.n	801072c <create_name+0x7c>
 8010724:	693a      	ldr	r2, [r7, #16]
 8010726:	697b      	ldr	r3, [r7, #20]
 8010728:	429a      	cmp	r2, r3
 801072a:	d30c      	bcc.n	8010746 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	2b0b      	cmp	r3, #11
 8010730:	d002      	beq.n	8010738 <create_name+0x88>
 8010732:	7efb      	ldrb	r3, [r7, #27]
 8010734:	2b2e      	cmp	r3, #46	@ 0x2e
 8010736:	d001      	beq.n	801073c <create_name+0x8c>
 8010738:	2306      	movs	r3, #6
 801073a:	e044      	b.n	80107c6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801073c:	2308      	movs	r3, #8
 801073e:	613b      	str	r3, [r7, #16]
 8010740:	230b      	movs	r3, #11
 8010742:	617b      	str	r3, [r7, #20]
			continue;
 8010744:	e022      	b.n	801078c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010746:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801074a:	2b00      	cmp	r3, #0
 801074c:	da04      	bge.n	8010758 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801074e:	7efb      	ldrb	r3, [r7, #27]
 8010750:	3b80      	subs	r3, #128	@ 0x80
 8010752:	4a1f      	ldr	r2, [pc, #124]	@ (80107d0 <create_name+0x120>)
 8010754:	5cd3      	ldrb	r3, [r2, r3]
 8010756:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010758:	7efb      	ldrb	r3, [r7, #27]
 801075a:	4619      	mov	r1, r3
 801075c:	481d      	ldr	r0, [pc, #116]	@ (80107d4 <create_name+0x124>)
 801075e:	f7ff f812 	bl	800f786 <chk_chr>
 8010762:	4603      	mov	r3, r0
 8010764:	2b00      	cmp	r3, #0
 8010766:	d001      	beq.n	801076c <create_name+0xbc>
 8010768:	2306      	movs	r3, #6
 801076a:	e02c      	b.n	80107c6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801076c:	7efb      	ldrb	r3, [r7, #27]
 801076e:	2b60      	cmp	r3, #96	@ 0x60
 8010770:	d905      	bls.n	801077e <create_name+0xce>
 8010772:	7efb      	ldrb	r3, [r7, #27]
 8010774:	2b7a      	cmp	r3, #122	@ 0x7a
 8010776:	d802      	bhi.n	801077e <create_name+0xce>
 8010778:	7efb      	ldrb	r3, [r7, #27]
 801077a:	3b20      	subs	r3, #32
 801077c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801077e:	693b      	ldr	r3, [r7, #16]
 8010780:	1c5a      	adds	r2, r3, #1
 8010782:	613a      	str	r2, [r7, #16]
 8010784:	68ba      	ldr	r2, [r7, #8]
 8010786:	4413      	add	r3, r2
 8010788:	7efa      	ldrb	r2, [r7, #27]
 801078a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801078c:	e7a6      	b.n	80106dc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801078e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010790:	68fa      	ldr	r2, [r7, #12]
 8010792:	69fb      	ldr	r3, [r7, #28]
 8010794:	441a      	add	r2, r3
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801079a:	693b      	ldr	r3, [r7, #16]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d101      	bne.n	80107a4 <create_name+0xf4>
 80107a0:	2306      	movs	r3, #6
 80107a2:	e010      	b.n	80107c6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	781b      	ldrb	r3, [r3, #0]
 80107a8:	2be5      	cmp	r3, #229	@ 0xe5
 80107aa:	d102      	bne.n	80107b2 <create_name+0x102>
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	2205      	movs	r2, #5
 80107b0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80107b2:	7efb      	ldrb	r3, [r7, #27]
 80107b4:	2b20      	cmp	r3, #32
 80107b6:	d801      	bhi.n	80107bc <create_name+0x10c>
 80107b8:	2204      	movs	r2, #4
 80107ba:	e000      	b.n	80107be <create_name+0x10e>
 80107bc:	2200      	movs	r2, #0
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	330b      	adds	r3, #11
 80107c2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80107c4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3720      	adds	r7, #32
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}
 80107ce:	bf00      	nop
 80107d0:	08012b50 	.word	0x08012b50
 80107d4:	08012880 	.word	0x08012880

080107d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b086      	sub	sp, #24
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80107e6:	693b      	ldr	r3, [r7, #16]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80107ec:	e002      	b.n	80107f4 <follow_path+0x1c>
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	3301      	adds	r3, #1
 80107f2:	603b      	str	r3, [r7, #0]
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80107fa:	d0f8      	beq.n	80107ee <follow_path+0x16>
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	2b5c      	cmp	r3, #92	@ 0x5c
 8010802:	d0f4      	beq.n	80107ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	2200      	movs	r2, #0
 8010808:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	781b      	ldrb	r3, [r3, #0]
 801080e:	2b1f      	cmp	r3, #31
 8010810:	d80a      	bhi.n	8010828 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2280      	movs	r2, #128	@ 0x80
 8010816:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801081a:	2100      	movs	r1, #0
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f7ff fcfa 	bl	8010216 <dir_sdi>
 8010822:	4603      	mov	r3, r0
 8010824:	75fb      	strb	r3, [r7, #23]
 8010826:	e043      	b.n	80108b0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010828:	463b      	mov	r3, r7
 801082a:	4619      	mov	r1, r3
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f7ff ff3f 	bl	80106b0 <create_name>
 8010832:	4603      	mov	r3, r0
 8010834:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010836:	7dfb      	ldrb	r3, [r7, #23]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d134      	bne.n	80108a6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f7ff feb0 	bl	80105a2 <dir_find>
 8010842:	4603      	mov	r3, r0
 8010844:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801084c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801084e:	7dfb      	ldrb	r3, [r7, #23]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d00a      	beq.n	801086a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010854:	7dfb      	ldrb	r3, [r7, #23]
 8010856:	2b04      	cmp	r3, #4
 8010858:	d127      	bne.n	80108aa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801085a:	7afb      	ldrb	r3, [r7, #11]
 801085c:	f003 0304 	and.w	r3, r3, #4
 8010860:	2b00      	cmp	r3, #0
 8010862:	d122      	bne.n	80108aa <follow_path+0xd2>
 8010864:	2305      	movs	r3, #5
 8010866:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010868:	e01f      	b.n	80108aa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801086a:	7afb      	ldrb	r3, [r7, #11]
 801086c:	f003 0304 	and.w	r3, r3, #4
 8010870:	2b00      	cmp	r3, #0
 8010872:	d11c      	bne.n	80108ae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	799b      	ldrb	r3, [r3, #6]
 8010878:	f003 0310 	and.w	r3, r3, #16
 801087c:	2b00      	cmp	r3, #0
 801087e:	d102      	bne.n	8010886 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010880:	2305      	movs	r3, #5
 8010882:	75fb      	strb	r3, [r7, #23]
 8010884:	e014      	b.n	80108b0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	695b      	ldr	r3, [r3, #20]
 8010890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010894:	4413      	add	r3, r2
 8010896:	4619      	mov	r1, r3
 8010898:	68f8      	ldr	r0, [r7, #12]
 801089a:	f7ff fe43 	bl	8010524 <ld_clust>
 801089e:	4602      	mov	r2, r0
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80108a4:	e7c0      	b.n	8010828 <follow_path+0x50>
			if (res != FR_OK) break;
 80108a6:	bf00      	nop
 80108a8:	e002      	b.n	80108b0 <follow_path+0xd8>
				break;
 80108aa:	bf00      	nop
 80108ac:	e000      	b.n	80108b0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80108ae:	bf00      	nop
			}
		}
	}

	return res;
 80108b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3718      	adds	r7, #24
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}

080108ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80108ba:	b480      	push	{r7}
 80108bc:	b087      	sub	sp, #28
 80108be:	af00      	add	r7, sp, #0
 80108c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80108c2:	f04f 33ff 	mov.w	r3, #4294967295
 80108c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d031      	beq.n	8010934 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	617b      	str	r3, [r7, #20]
 80108d6:	e002      	b.n	80108de <get_ldnumber+0x24>
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	3301      	adds	r3, #1
 80108dc:	617b      	str	r3, [r7, #20]
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	781b      	ldrb	r3, [r3, #0]
 80108e2:	2b20      	cmp	r3, #32
 80108e4:	d903      	bls.n	80108ee <get_ldnumber+0x34>
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	781b      	ldrb	r3, [r3, #0]
 80108ea:	2b3a      	cmp	r3, #58	@ 0x3a
 80108ec:	d1f4      	bne.n	80108d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	2b3a      	cmp	r3, #58	@ 0x3a
 80108f4:	d11c      	bne.n	8010930 <get_ldnumber+0x76>
			tp = *path;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	1c5a      	adds	r2, r3, #1
 8010900:	60fa      	str	r2, [r7, #12]
 8010902:	781b      	ldrb	r3, [r3, #0]
 8010904:	3b30      	subs	r3, #48	@ 0x30
 8010906:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	2b09      	cmp	r3, #9
 801090c:	d80e      	bhi.n	801092c <get_ldnumber+0x72>
 801090e:	68fa      	ldr	r2, [r7, #12]
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	429a      	cmp	r2, r3
 8010914:	d10a      	bne.n	801092c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d107      	bne.n	801092c <get_ldnumber+0x72>
					vol = (int)i;
 801091c:	68bb      	ldr	r3, [r7, #8]
 801091e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	3301      	adds	r3, #1
 8010924:	617b      	str	r3, [r7, #20]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	697a      	ldr	r2, [r7, #20]
 801092a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801092c:	693b      	ldr	r3, [r7, #16]
 801092e:	e002      	b.n	8010936 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010930:	2300      	movs	r3, #0
 8010932:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010934:	693b      	ldr	r3, [r7, #16]
}
 8010936:	4618      	mov	r0, r3
 8010938:	371c      	adds	r7, #28
 801093a:	46bd      	mov	sp, r7
 801093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010940:	4770      	bx	lr
	...

08010944 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b082      	sub	sp, #8
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2200      	movs	r2, #0
 8010952:	70da      	strb	r2, [r3, #3]
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f04f 32ff 	mov.w	r2, #4294967295
 801095a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801095c:	6839      	ldr	r1, [r7, #0]
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	f7ff f8dc 	bl	800fb1c <move_window>
 8010964:	4603      	mov	r3, r0
 8010966:	2b00      	cmp	r3, #0
 8010968:	d001      	beq.n	801096e <check_fs+0x2a>
 801096a:	2304      	movs	r3, #4
 801096c:	e038      	b.n	80109e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	3330      	adds	r3, #48	@ 0x30
 8010972:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010976:	4618      	mov	r0, r3
 8010978:	f7fe fe20 	bl	800f5bc <ld_word>
 801097c:	4603      	mov	r3, r0
 801097e:	461a      	mov	r2, r3
 8010980:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010984:	429a      	cmp	r2, r3
 8010986:	d001      	beq.n	801098c <check_fs+0x48>
 8010988:	2303      	movs	r3, #3
 801098a:	e029      	b.n	80109e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010992:	2be9      	cmp	r3, #233	@ 0xe9
 8010994:	d009      	beq.n	80109aa <check_fs+0x66>
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801099c:	2beb      	cmp	r3, #235	@ 0xeb
 801099e:	d11e      	bne.n	80109de <check_fs+0x9a>
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80109a6:	2b90      	cmp	r3, #144	@ 0x90
 80109a8:	d119      	bne.n	80109de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	3330      	adds	r3, #48	@ 0x30
 80109ae:	3336      	adds	r3, #54	@ 0x36
 80109b0:	4618      	mov	r0, r3
 80109b2:	f7fe fe1b 	bl	800f5ec <ld_dword>
 80109b6:	4603      	mov	r3, r0
 80109b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80109bc:	4a0a      	ldr	r2, [pc, #40]	@ (80109e8 <check_fs+0xa4>)
 80109be:	4293      	cmp	r3, r2
 80109c0:	d101      	bne.n	80109c6 <check_fs+0x82>
 80109c2:	2300      	movs	r3, #0
 80109c4:	e00c      	b.n	80109e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	3330      	adds	r3, #48	@ 0x30
 80109ca:	3352      	adds	r3, #82	@ 0x52
 80109cc:	4618      	mov	r0, r3
 80109ce:	f7fe fe0d 	bl	800f5ec <ld_dword>
 80109d2:	4603      	mov	r3, r0
 80109d4:	4a05      	ldr	r2, [pc, #20]	@ (80109ec <check_fs+0xa8>)
 80109d6:	4293      	cmp	r3, r2
 80109d8:	d101      	bne.n	80109de <check_fs+0x9a>
 80109da:	2300      	movs	r3, #0
 80109dc:	e000      	b.n	80109e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80109de:	2302      	movs	r3, #2
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3708      	adds	r7, #8
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	00544146 	.word	0x00544146
 80109ec:	33544146 	.word	0x33544146

080109f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b096      	sub	sp, #88	@ 0x58
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	60f8      	str	r0, [r7, #12]
 80109f8:	60b9      	str	r1, [r7, #8]
 80109fa:	4613      	mov	r3, r2
 80109fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	2200      	movs	r2, #0
 8010a02:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010a04:	68f8      	ldr	r0, [r7, #12]
 8010a06:	f7ff ff58 	bl	80108ba <get_ldnumber>
 8010a0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	da01      	bge.n	8010a16 <find_volume+0x26>
 8010a12:	230b      	movs	r3, #11
 8010a14:	e22d      	b.n	8010e72 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010a16:	4aa1      	ldr	r2, [pc, #644]	@ (8010c9c <find_volume+0x2ac>)
 8010a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d101      	bne.n	8010a2a <find_volume+0x3a>
 8010a26:	230c      	movs	r3, #12
 8010a28:	e223      	b.n	8010e72 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010a2a:	68bb      	ldr	r3, [r7, #8]
 8010a2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010a2e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010a30:	79fb      	ldrb	r3, [r7, #7]
 8010a32:	f023 0301 	bic.w	r3, r3, #1
 8010a36:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a3a:	781b      	ldrb	r3, [r3, #0]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d01a      	beq.n	8010a76 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a42:	785b      	ldrb	r3, [r3, #1]
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7fe fd19 	bl	800f47c <disk_status>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010a50:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010a54:	f003 0301 	and.w	r3, r3, #1
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d10c      	bne.n	8010a76 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010a5c:	79fb      	ldrb	r3, [r7, #7]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d007      	beq.n	8010a72 <find_volume+0x82>
 8010a62:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010a66:	f003 0304 	and.w	r3, r3, #4
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d001      	beq.n	8010a72 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010a6e:	230a      	movs	r3, #10
 8010a70:	e1ff      	b.n	8010e72 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8010a72:	2300      	movs	r3, #0
 8010a74:	e1fd      	b.n	8010e72 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a78:	2200      	movs	r2, #0
 8010a7a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a7e:	b2da      	uxtb	r2, r3
 8010a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a82:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a86:	785b      	ldrb	r3, [r3, #1]
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f7fe fd11 	bl	800f4b0 <disk_initialize>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010a94:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010a98:	f003 0301 	and.w	r3, r3, #1
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d001      	beq.n	8010aa4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010aa0:	2303      	movs	r3, #3
 8010aa2:	e1e6      	b.n	8010e72 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010aa4:	79fb      	ldrb	r3, [r7, #7]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d007      	beq.n	8010aba <find_volume+0xca>
 8010aaa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010aae:	f003 0304 	and.w	r3, r3, #4
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d001      	beq.n	8010aba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010ab6:	230a      	movs	r3, #10
 8010ab8:	e1db      	b.n	8010e72 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010aba:	2300      	movs	r3, #0
 8010abc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010abe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010ac0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010ac2:	f7ff ff3f 	bl	8010944 <check_fs>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010acc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010ad0:	2b02      	cmp	r3, #2
 8010ad2:	d149      	bne.n	8010b68 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	643b      	str	r3, [r7, #64]	@ 0x40
 8010ad8:	e01e      	b.n	8010b18 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010adc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ae2:	011b      	lsls	r3, r3, #4
 8010ae4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010ae8:	4413      	add	r3, r2
 8010aea:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aee:	3304      	adds	r3, #4
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d006      	beq.n	8010b04 <find_volume+0x114>
 8010af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010af8:	3308      	adds	r3, #8
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7fe fd76 	bl	800f5ec <ld_dword>
 8010b00:	4602      	mov	r2, r0
 8010b02:	e000      	b.n	8010b06 <find_volume+0x116>
 8010b04:	2200      	movs	r2, #0
 8010b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b08:	009b      	lsls	r3, r3, #2
 8010b0a:	3358      	adds	r3, #88	@ 0x58
 8010b0c:	443b      	add	r3, r7
 8010b0e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010b12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b14:	3301      	adds	r3, #1
 8010b16:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b1a:	2b03      	cmp	r3, #3
 8010b1c:	d9dd      	bls.n	8010ada <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010b1e:	2300      	movs	r3, #0
 8010b20:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8010b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d002      	beq.n	8010b2e <find_volume+0x13e>
 8010b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b2a:	3b01      	subs	r3, #1
 8010b2c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b30:	009b      	lsls	r3, r3, #2
 8010b32:	3358      	adds	r3, #88	@ 0x58
 8010b34:	443b      	add	r3, r7
 8010b36:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010b3a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010b3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d005      	beq.n	8010b4e <find_volume+0x15e>
 8010b42:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010b44:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010b46:	f7ff fefd 	bl	8010944 <check_fs>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	e000      	b.n	8010b50 <find_volume+0x160>
 8010b4e:	2303      	movs	r3, #3
 8010b50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010b54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010b58:	2b01      	cmp	r3, #1
 8010b5a:	d905      	bls.n	8010b68 <find_volume+0x178>
 8010b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b5e:	3301      	adds	r3, #1
 8010b60:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b64:	2b03      	cmp	r3, #3
 8010b66:	d9e2      	bls.n	8010b2e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010b68:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010b6c:	2b04      	cmp	r3, #4
 8010b6e:	d101      	bne.n	8010b74 <find_volume+0x184>
 8010b70:	2301      	movs	r3, #1
 8010b72:	e17e      	b.n	8010e72 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010b74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010b78:	2b01      	cmp	r3, #1
 8010b7a:	d901      	bls.n	8010b80 <find_volume+0x190>
 8010b7c:	230d      	movs	r3, #13
 8010b7e:	e178      	b.n	8010e72 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b82:	3330      	adds	r3, #48	@ 0x30
 8010b84:	330b      	adds	r3, #11
 8010b86:	4618      	mov	r0, r3
 8010b88:	f7fe fd18 	bl	800f5bc <ld_word>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010b92:	d001      	beq.n	8010b98 <find_volume+0x1a8>
 8010b94:	230d      	movs	r3, #13
 8010b96:	e16c      	b.n	8010e72 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b9a:	3330      	adds	r3, #48	@ 0x30
 8010b9c:	3316      	adds	r3, #22
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7fe fd0c 	bl	800f5bc <ld_word>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d106      	bne.n	8010bbc <find_volume+0x1cc>
 8010bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bb0:	3330      	adds	r3, #48	@ 0x30
 8010bb2:	3324      	adds	r3, #36	@ 0x24
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7fe fd19 	bl	800f5ec <ld_dword>
 8010bba:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010bc0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bc4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8010bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bce:	789b      	ldrb	r3, [r3, #2]
 8010bd0:	2b01      	cmp	r3, #1
 8010bd2:	d005      	beq.n	8010be0 <find_volume+0x1f0>
 8010bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bd6:	789b      	ldrb	r3, [r3, #2]
 8010bd8:	2b02      	cmp	r3, #2
 8010bda:	d001      	beq.n	8010be0 <find_volume+0x1f0>
 8010bdc:	230d      	movs	r3, #13
 8010bde:	e148      	b.n	8010e72 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010be2:	789b      	ldrb	r3, [r3, #2]
 8010be4:	461a      	mov	r2, r3
 8010be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010be8:	fb02 f303 	mul.w	r3, r2, r3
 8010bec:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010bf4:	461a      	mov	r2, r3
 8010bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bf8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bfc:	895b      	ldrh	r3, [r3, #10]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d008      	beq.n	8010c14 <find_volume+0x224>
 8010c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c04:	895b      	ldrh	r3, [r3, #10]
 8010c06:	461a      	mov	r2, r3
 8010c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c0a:	895b      	ldrh	r3, [r3, #10]
 8010c0c:	3b01      	subs	r3, #1
 8010c0e:	4013      	ands	r3, r2
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d001      	beq.n	8010c18 <find_volume+0x228>
 8010c14:	230d      	movs	r3, #13
 8010c16:	e12c      	b.n	8010e72 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c1a:	3330      	adds	r3, #48	@ 0x30
 8010c1c:	3311      	adds	r3, #17
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7fe fccc 	bl	800f5bc <ld_word>
 8010c24:	4603      	mov	r3, r0
 8010c26:	461a      	mov	r2, r3
 8010c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c2a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c2e:	891b      	ldrh	r3, [r3, #8]
 8010c30:	f003 030f 	and.w	r3, r3, #15
 8010c34:	b29b      	uxth	r3, r3
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d001      	beq.n	8010c3e <find_volume+0x24e>
 8010c3a:	230d      	movs	r3, #13
 8010c3c:	e119      	b.n	8010e72 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c40:	3330      	adds	r3, #48	@ 0x30
 8010c42:	3313      	adds	r3, #19
 8010c44:	4618      	mov	r0, r3
 8010c46:	f7fe fcb9 	bl	800f5bc <ld_word>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010c4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d106      	bne.n	8010c62 <find_volume+0x272>
 8010c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c56:	3330      	adds	r3, #48	@ 0x30
 8010c58:	3320      	adds	r3, #32
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7fe fcc6 	bl	800f5ec <ld_dword>
 8010c60:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c64:	3330      	adds	r3, #48	@ 0x30
 8010c66:	330e      	adds	r3, #14
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f7fe fca7 	bl	800f5bc <ld_word>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010c72:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d101      	bne.n	8010c7c <find_volume+0x28c>
 8010c78:	230d      	movs	r3, #13
 8010c7a:	e0fa      	b.n	8010e72 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010c7c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010c7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c80:	4413      	add	r3, r2
 8010c82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c84:	8912      	ldrh	r2, [r2, #8]
 8010c86:	0912      	lsrs	r2, r2, #4
 8010c88:	b292      	uxth	r2, r2
 8010c8a:	4413      	add	r3, r2
 8010c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010c8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d204      	bcs.n	8010ca0 <find_volume+0x2b0>
 8010c96:	230d      	movs	r3, #13
 8010c98:	e0eb      	b.n	8010e72 <find_volume+0x482>
 8010c9a:	bf00      	nop
 8010c9c:	240bc330 	.word	0x240bc330
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010ca0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ca4:	1ad3      	subs	r3, r2, r3
 8010ca6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ca8:	8952      	ldrh	r2, [r2, #10]
 8010caa:	fbb3 f3f2 	udiv	r3, r3, r2
 8010cae:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d101      	bne.n	8010cba <find_volume+0x2ca>
 8010cb6:	230d      	movs	r3, #13
 8010cb8:	e0db      	b.n	8010e72 <find_volume+0x482>
		fmt = FS_FAT32;
 8010cba:	2303      	movs	r3, #3
 8010cbc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cc2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	d802      	bhi.n	8010cd0 <find_volume+0x2e0>
 8010cca:	2302      	movs	r3, #2
 8010ccc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cd2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	d802      	bhi.n	8010ce0 <find_volume+0x2f0>
 8010cda:	2301      	movs	r3, #1
 8010cdc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ce2:	1c9a      	adds	r2, r3, #2
 8010ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ce6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8010ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010cec:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010cee:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010cf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cf2:	441a      	add	r2, r3
 8010cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cf6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8010cf8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cfc:	441a      	add	r2, r3
 8010cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d00:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8010d02:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010d06:	2b03      	cmp	r3, #3
 8010d08:	d11e      	bne.n	8010d48 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d0c:	3330      	adds	r3, #48	@ 0x30
 8010d0e:	332a      	adds	r3, #42	@ 0x2a
 8010d10:	4618      	mov	r0, r3
 8010d12:	f7fe fc53 	bl	800f5bc <ld_word>
 8010d16:	4603      	mov	r3, r0
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d001      	beq.n	8010d20 <find_volume+0x330>
 8010d1c:	230d      	movs	r3, #13
 8010d1e:	e0a8      	b.n	8010e72 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d22:	891b      	ldrh	r3, [r3, #8]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d001      	beq.n	8010d2c <find_volume+0x33c>
 8010d28:	230d      	movs	r3, #13
 8010d2a:	e0a2      	b.n	8010e72 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d2e:	3330      	adds	r3, #48	@ 0x30
 8010d30:	332c      	adds	r3, #44	@ 0x2c
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7fe fc5a 	bl	800f5ec <ld_dword>
 8010d38:	4602      	mov	r2, r0
 8010d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d3c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d40:	695b      	ldr	r3, [r3, #20]
 8010d42:	009b      	lsls	r3, r3, #2
 8010d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8010d46:	e01f      	b.n	8010d88 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d4a:	891b      	ldrh	r3, [r3, #8]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d101      	bne.n	8010d54 <find_volume+0x364>
 8010d50:	230d      	movs	r3, #13
 8010d52:	e08e      	b.n	8010e72 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d56:	6a1a      	ldr	r2, [r3, #32]
 8010d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d5a:	441a      	add	r2, r3
 8010d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d5e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010d60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010d64:	2b02      	cmp	r3, #2
 8010d66:	d103      	bne.n	8010d70 <find_volume+0x380>
 8010d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d6a:	695b      	ldr	r3, [r3, #20]
 8010d6c:	005b      	lsls	r3, r3, #1
 8010d6e:	e00a      	b.n	8010d86 <find_volume+0x396>
 8010d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d72:	695a      	ldr	r2, [r3, #20]
 8010d74:	4613      	mov	r3, r2
 8010d76:	005b      	lsls	r3, r3, #1
 8010d78:	4413      	add	r3, r2
 8010d7a:	085a      	lsrs	r2, r3, #1
 8010d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d7e:	695b      	ldr	r3, [r3, #20]
 8010d80:	f003 0301 	and.w	r3, r3, #1
 8010d84:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010d86:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d8a:	699a      	ldr	r2, [r3, #24]
 8010d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d8e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010d92:	0a5b      	lsrs	r3, r3, #9
 8010d94:	429a      	cmp	r2, r3
 8010d96:	d201      	bcs.n	8010d9c <find_volume+0x3ac>
 8010d98:	230d      	movs	r3, #13
 8010d9a:	e06a      	b.n	8010e72 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8010da2:	611a      	str	r2, [r3, #16]
 8010da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010da6:	691a      	ldr	r2, [r3, #16]
 8010da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010daa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8010dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dae:	2280      	movs	r2, #128	@ 0x80
 8010db0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010db2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010db6:	2b03      	cmp	r3, #3
 8010db8:	d149      	bne.n	8010e4e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dbc:	3330      	adds	r3, #48	@ 0x30
 8010dbe:	3330      	adds	r3, #48	@ 0x30
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7fe fbfb 	bl	800f5bc <ld_word>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	2b01      	cmp	r3, #1
 8010dca:	d140      	bne.n	8010e4e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010dcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010dce:	3301      	adds	r3, #1
 8010dd0:	4619      	mov	r1, r3
 8010dd2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010dd4:	f7fe fea2 	bl	800fb1c <move_window>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d137      	bne.n	8010e4e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8010dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010de0:	2200      	movs	r2, #0
 8010de2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010de6:	3330      	adds	r3, #48	@ 0x30
 8010de8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7fe fbe5 	bl	800f5bc <ld_word>
 8010df2:	4603      	mov	r3, r0
 8010df4:	461a      	mov	r2, r3
 8010df6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d127      	bne.n	8010e4e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e00:	3330      	adds	r3, #48	@ 0x30
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7fe fbf2 	bl	800f5ec <ld_dword>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8010e7c <find_volume+0x48c>)
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d11e      	bne.n	8010e4e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e12:	3330      	adds	r3, #48	@ 0x30
 8010e14:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7fe fbe7 	bl	800f5ec <ld_dword>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	4a17      	ldr	r2, [pc, #92]	@ (8010e80 <find_volume+0x490>)
 8010e22:	4293      	cmp	r3, r2
 8010e24:	d113      	bne.n	8010e4e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e28:	3330      	adds	r3, #48	@ 0x30
 8010e2a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f7fe fbdc 	bl	800f5ec <ld_dword>
 8010e34:	4602      	mov	r2, r0
 8010e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e38:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e3c:	3330      	adds	r3, #48	@ 0x30
 8010e3e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7fe fbd2 	bl	800f5ec <ld_dword>
 8010e48:	4602      	mov	r2, r0
 8010e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e4c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e50:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8010e54:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010e56:	4b0b      	ldr	r3, [pc, #44]	@ (8010e84 <find_volume+0x494>)
 8010e58:	881b      	ldrh	r3, [r3, #0]
 8010e5a:	3301      	adds	r3, #1
 8010e5c:	b29a      	uxth	r2, r3
 8010e5e:	4b09      	ldr	r3, [pc, #36]	@ (8010e84 <find_volume+0x494>)
 8010e60:	801a      	strh	r2, [r3, #0]
 8010e62:	4b08      	ldr	r3, [pc, #32]	@ (8010e84 <find_volume+0x494>)
 8010e64:	881a      	ldrh	r2, [r3, #0]
 8010e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e68:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010e6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010e6c:	f7fe fdee 	bl	800fa4c <clear_lock>
#endif
	return FR_OK;
 8010e70:	2300      	movs	r3, #0
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3758      	adds	r7, #88	@ 0x58
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	bf00      	nop
 8010e7c:	41615252 	.word	0x41615252
 8010e80:	61417272 	.word	0x61417272
 8010e84:	240bc334 	.word	0x240bc334

08010e88 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b084      	sub	sp, #16
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010e92:	2309      	movs	r3, #9
 8010e94:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d01c      	beq.n	8010ed6 <validate+0x4e>
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d018      	beq.n	8010ed6 <validate+0x4e>
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d013      	beq.n	8010ed6 <validate+0x4e>
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	889a      	ldrh	r2, [r3, #4]
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	88db      	ldrh	r3, [r3, #6]
 8010eb8:	429a      	cmp	r2, r3
 8010eba:	d10c      	bne.n	8010ed6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	785b      	ldrb	r3, [r3, #1]
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7fe fada 	bl	800f47c <disk_status>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	f003 0301 	and.w	r3, r3, #1
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d101      	bne.n	8010ed6 <validate+0x4e>
			res = FR_OK;
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010ed6:	7bfb      	ldrb	r3, [r7, #15]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d102      	bne.n	8010ee2 <validate+0x5a>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	e000      	b.n	8010ee4 <validate+0x5c>
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	683a      	ldr	r2, [r7, #0]
 8010ee6:	6013      	str	r3, [r2, #0]
	return res;
 8010ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3710      	adds	r7, #16
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
	...

08010ef4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b088      	sub	sp, #32
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	60f8      	str	r0, [r7, #12]
 8010efc:	60b9      	str	r1, [r7, #8]
 8010efe:	4613      	mov	r3, r2
 8010f00:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010f06:	f107 0310 	add.w	r3, r7, #16
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7ff fcd5 	bl	80108ba <get_ldnumber>
 8010f10:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010f12:	69fb      	ldr	r3, [r7, #28]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	da01      	bge.n	8010f1c <f_mount+0x28>
 8010f18:	230b      	movs	r3, #11
 8010f1a:	e02b      	b.n	8010f74 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010f1c:	4a17      	ldr	r2, [pc, #92]	@ (8010f7c <f_mount+0x88>)
 8010f1e:	69fb      	ldr	r3, [r7, #28]
 8010f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f24:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010f26:	69bb      	ldr	r3, [r7, #24]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d005      	beq.n	8010f38 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010f2c:	69b8      	ldr	r0, [r7, #24]
 8010f2e:	f7fe fd8d 	bl	800fa4c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010f32:	69bb      	ldr	r3, [r7, #24]
 8010f34:	2200      	movs	r2, #0
 8010f36:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d002      	beq.n	8010f44 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	2200      	movs	r2, #0
 8010f42:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010f44:	68fa      	ldr	r2, [r7, #12]
 8010f46:	490d      	ldr	r1, [pc, #52]	@ (8010f7c <f_mount+0x88>)
 8010f48:	69fb      	ldr	r3, [r7, #28]
 8010f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d002      	beq.n	8010f5a <f_mount+0x66>
 8010f54:	79fb      	ldrb	r3, [r7, #7]
 8010f56:	2b01      	cmp	r3, #1
 8010f58:	d001      	beq.n	8010f5e <f_mount+0x6a>
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	e00a      	b.n	8010f74 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010f5e:	f107 010c 	add.w	r1, r7, #12
 8010f62:	f107 0308 	add.w	r3, r7, #8
 8010f66:	2200      	movs	r2, #0
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7ff fd41 	bl	80109f0 <find_volume>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f74:	4618      	mov	r0, r3
 8010f76:	3720      	adds	r7, #32
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}
 8010f7c:	240bc330 	.word	0x240bc330

08010f80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b098      	sub	sp, #96	@ 0x60
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	60f8      	str	r0, [r7, #12]
 8010f88:	60b9      	str	r1, [r7, #8]
 8010f8a:	4613      	mov	r3, r2
 8010f8c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d101      	bne.n	8010f98 <f_open+0x18>
 8010f94:	2309      	movs	r3, #9
 8010f96:	e1a9      	b.n	80112ec <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010f98:	79fb      	ldrb	r3, [r7, #7]
 8010f9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010f9e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010fa0:	79fa      	ldrb	r2, [r7, #7]
 8010fa2:	f107 0110 	add.w	r1, r7, #16
 8010fa6:	f107 0308 	add.w	r3, r7, #8
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7ff fd20 	bl	80109f0 <find_volume>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8010fb6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	f040 818d 	bne.w	80112da <f_open+0x35a>
		dj.obj.fs = fs;
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010fc4:	68ba      	ldr	r2, [r7, #8]
 8010fc6:	f107 0314 	add.w	r3, r7, #20
 8010fca:	4611      	mov	r1, r2
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7ff fc03 	bl	80107d8 <follow_path>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010fd8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d118      	bne.n	8011012 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010fe0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010fe4:	b25b      	sxtb	r3, r3
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	da03      	bge.n	8010ff2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8010fea:	2306      	movs	r3, #6
 8010fec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010ff0:	e00f      	b.n	8011012 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010ff2:	79fb      	ldrb	r3, [r7, #7]
 8010ff4:	2b01      	cmp	r3, #1
 8010ff6:	bf8c      	ite	hi
 8010ff8:	2301      	movhi	r3, #1
 8010ffa:	2300      	movls	r3, #0
 8010ffc:	b2db      	uxtb	r3, r3
 8010ffe:	461a      	mov	r2, r3
 8011000:	f107 0314 	add.w	r3, r7, #20
 8011004:	4611      	mov	r1, r2
 8011006:	4618      	mov	r0, r3
 8011008:	f7fe fbd8 	bl	800f7bc <chk_lock>
 801100c:	4603      	mov	r3, r0
 801100e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011012:	79fb      	ldrb	r3, [r7, #7]
 8011014:	f003 031c 	and.w	r3, r3, #28
 8011018:	2b00      	cmp	r3, #0
 801101a:	d07f      	beq.n	801111c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801101c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011020:	2b00      	cmp	r3, #0
 8011022:	d017      	beq.n	8011054 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011024:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011028:	2b04      	cmp	r3, #4
 801102a:	d10e      	bne.n	801104a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801102c:	f7fe fc22 	bl	800f874 <enq_lock>
 8011030:	4603      	mov	r3, r0
 8011032:	2b00      	cmp	r3, #0
 8011034:	d006      	beq.n	8011044 <f_open+0xc4>
 8011036:	f107 0314 	add.w	r3, r7, #20
 801103a:	4618      	mov	r0, r3
 801103c:	f7ff fb06 	bl	801064c <dir_register>
 8011040:	4603      	mov	r3, r0
 8011042:	e000      	b.n	8011046 <f_open+0xc6>
 8011044:	2312      	movs	r3, #18
 8011046:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801104a:	79fb      	ldrb	r3, [r7, #7]
 801104c:	f043 0308 	orr.w	r3, r3, #8
 8011050:	71fb      	strb	r3, [r7, #7]
 8011052:	e010      	b.n	8011076 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011054:	7ebb      	ldrb	r3, [r7, #26]
 8011056:	f003 0311 	and.w	r3, r3, #17
 801105a:	2b00      	cmp	r3, #0
 801105c:	d003      	beq.n	8011066 <f_open+0xe6>
					res = FR_DENIED;
 801105e:	2307      	movs	r3, #7
 8011060:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011064:	e007      	b.n	8011076 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011066:	79fb      	ldrb	r3, [r7, #7]
 8011068:	f003 0304 	and.w	r3, r3, #4
 801106c:	2b00      	cmp	r3, #0
 801106e:	d002      	beq.n	8011076 <f_open+0xf6>
 8011070:	2308      	movs	r3, #8
 8011072:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011076:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801107a:	2b00      	cmp	r3, #0
 801107c:	d168      	bne.n	8011150 <f_open+0x1d0>
 801107e:	79fb      	ldrb	r3, [r7, #7]
 8011080:	f003 0308 	and.w	r3, r3, #8
 8011084:	2b00      	cmp	r3, #0
 8011086:	d063      	beq.n	8011150 <f_open+0x1d0>
				dw = GET_FATTIME();
 8011088:	f7fe f864 	bl	800f154 <get_fattime>
 801108c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801108e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011090:	330e      	adds	r3, #14
 8011092:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011094:	4618      	mov	r0, r3
 8011096:	f7fe fae7 	bl	800f668 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801109a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801109c:	3316      	adds	r3, #22
 801109e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7fe fae1 	bl	800f668 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80110a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110a8:	330b      	adds	r3, #11
 80110aa:	2220      	movs	r2, #32
 80110ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80110ae:	693b      	ldr	r3, [r7, #16]
 80110b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80110b2:	4611      	mov	r1, r2
 80110b4:	4618      	mov	r0, r3
 80110b6:	f7ff fa35 	bl	8010524 <ld_clust>
 80110ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80110c0:	2200      	movs	r2, #0
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7ff fa4d 	bl	8010562 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80110c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110ca:	331c      	adds	r3, #28
 80110cc:	2100      	movs	r1, #0
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7fe faca 	bl	800f668 <st_dword>
					fs->wflag = 1;
 80110d4:	693b      	ldr	r3, [r7, #16]
 80110d6:	2201      	movs	r2, #1
 80110d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80110da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d037      	beq.n	8011150 <f_open+0x1d0>
						dw = fs->winsect;
 80110e0:	693b      	ldr	r3, [r7, #16]
 80110e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110e4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80110e6:	f107 0314 	add.w	r3, r7, #20
 80110ea:	2200      	movs	r2, #0
 80110ec:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7fe ff60 	bl	800ffb4 <remove_chain>
 80110f4:	4603      	mov	r3, r0
 80110f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80110fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d126      	bne.n	8011150 <f_open+0x1d0>
							res = move_window(fs, dw);
 8011102:	693b      	ldr	r3, [r7, #16]
 8011104:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011106:	4618      	mov	r0, r3
 8011108:	f7fe fd08 	bl	800fb1c <move_window>
 801110c:	4603      	mov	r3, r0
 801110e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011112:	693b      	ldr	r3, [r7, #16]
 8011114:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011116:	3a01      	subs	r2, #1
 8011118:	60da      	str	r2, [r3, #12]
 801111a:	e019      	b.n	8011150 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801111c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011120:	2b00      	cmp	r3, #0
 8011122:	d115      	bne.n	8011150 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011124:	7ebb      	ldrb	r3, [r7, #26]
 8011126:	f003 0310 	and.w	r3, r3, #16
 801112a:	2b00      	cmp	r3, #0
 801112c:	d003      	beq.n	8011136 <f_open+0x1b6>
					res = FR_NO_FILE;
 801112e:	2304      	movs	r3, #4
 8011130:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011134:	e00c      	b.n	8011150 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011136:	79fb      	ldrb	r3, [r7, #7]
 8011138:	f003 0302 	and.w	r3, r3, #2
 801113c:	2b00      	cmp	r3, #0
 801113e:	d007      	beq.n	8011150 <f_open+0x1d0>
 8011140:	7ebb      	ldrb	r3, [r7, #26]
 8011142:	f003 0301 	and.w	r3, r3, #1
 8011146:	2b00      	cmp	r3, #0
 8011148:	d002      	beq.n	8011150 <f_open+0x1d0>
						res = FR_DENIED;
 801114a:	2307      	movs	r3, #7
 801114c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011150:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011154:	2b00      	cmp	r3, #0
 8011156:	d126      	bne.n	80111a6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011158:	79fb      	ldrb	r3, [r7, #7]
 801115a:	f003 0308 	and.w	r3, r3, #8
 801115e:	2b00      	cmp	r3, #0
 8011160:	d003      	beq.n	801116a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8011162:	79fb      	ldrb	r3, [r7, #7]
 8011164:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011168:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801116a:	693b      	ldr	r3, [r7, #16]
 801116c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8011172:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011178:	79fb      	ldrb	r3, [r7, #7]
 801117a:	2b01      	cmp	r3, #1
 801117c:	bf8c      	ite	hi
 801117e:	2301      	movhi	r3, #1
 8011180:	2300      	movls	r3, #0
 8011182:	b2db      	uxtb	r3, r3
 8011184:	461a      	mov	r2, r3
 8011186:	f107 0314 	add.w	r3, r7, #20
 801118a:	4611      	mov	r1, r2
 801118c:	4618      	mov	r0, r3
 801118e:	f7fe fb93 	bl	800f8b8 <inc_lock>
 8011192:	4602      	mov	r2, r0
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	691b      	ldr	r3, [r3, #16]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d102      	bne.n	80111a6 <f_open+0x226>
 80111a0:	2302      	movs	r3, #2
 80111a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80111a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f040 8095 	bne.w	80112da <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80111b0:	693b      	ldr	r3, [r7, #16]
 80111b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80111b4:	4611      	mov	r1, r2
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7ff f9b4 	bl	8010524 <ld_clust>
 80111bc:	4602      	mov	r2, r0
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80111c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111c4:	331c      	adds	r3, #28
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7fe fa10 	bl	800f5ec <ld_dword>
 80111cc:	4602      	mov	r2, r0
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	2200      	movs	r2, #0
 80111d6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80111d8:	693a      	ldr	r2, [r7, #16]
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	88da      	ldrh	r2, [r3, #6]
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	79fa      	ldrb	r2, [r7, #7]
 80111ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	2200      	movs	r2, #0
 80111f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	2200      	movs	r2, #0
 80111f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	2200      	movs	r2, #0
 80111fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	3330      	adds	r3, #48	@ 0x30
 8011202:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011206:	2100      	movs	r1, #0
 8011208:	4618      	mov	r0, r3
 801120a:	f7fe fa7a 	bl	800f702 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801120e:	79fb      	ldrb	r3, [r7, #7]
 8011210:	f003 0320 	and.w	r3, r3, #32
 8011214:	2b00      	cmp	r3, #0
 8011216:	d060      	beq.n	80112da <f_open+0x35a>
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d05c      	beq.n	80112da <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	68da      	ldr	r2, [r3, #12]
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011228:	693b      	ldr	r3, [r7, #16]
 801122a:	895b      	ldrh	r3, [r3, #10]
 801122c:	025b      	lsls	r3, r3, #9
 801122e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	689b      	ldr	r3, [r3, #8]
 8011234:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	68db      	ldr	r3, [r3, #12]
 801123a:	657b      	str	r3, [r7, #84]	@ 0x54
 801123c:	e016      	b.n	801126c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011242:	4618      	mov	r0, r3
 8011244:	f7fe fd25 	bl	800fc92 <get_fat>
 8011248:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801124a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801124c:	2b01      	cmp	r3, #1
 801124e:	d802      	bhi.n	8011256 <f_open+0x2d6>
 8011250:	2302      	movs	r3, #2
 8011252:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011256:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011258:	f1b3 3fff 	cmp.w	r3, #4294967295
 801125c:	d102      	bne.n	8011264 <f_open+0x2e4>
 801125e:	2301      	movs	r3, #1
 8011260:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011264:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011266:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011268:	1ad3      	subs	r3, r2, r3
 801126a:	657b      	str	r3, [r7, #84]	@ 0x54
 801126c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011270:	2b00      	cmp	r3, #0
 8011272:	d103      	bne.n	801127c <f_open+0x2fc>
 8011274:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011278:	429a      	cmp	r2, r3
 801127a:	d8e0      	bhi.n	801123e <f_open+0x2be>
				}
				fp->clust = clst;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011280:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011282:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011286:	2b00      	cmp	r3, #0
 8011288:	d127      	bne.n	80112da <f_open+0x35a>
 801128a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801128c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011290:	2b00      	cmp	r3, #0
 8011292:	d022      	beq.n	80112da <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011294:	693b      	ldr	r3, [r7, #16]
 8011296:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011298:	4618      	mov	r0, r3
 801129a:	f7fe fcdb 	bl	800fc54 <clust2sect>
 801129e:	6478      	str	r0, [r7, #68]	@ 0x44
 80112a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d103      	bne.n	80112ae <f_open+0x32e>
						res = FR_INT_ERR;
 80112a6:	2302      	movs	r3, #2
 80112a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80112ac:	e015      	b.n	80112da <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80112ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80112b0:	0a5a      	lsrs	r2, r3, #9
 80112b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112b4:	441a      	add	r2, r3
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80112ba:	693b      	ldr	r3, [r7, #16]
 80112bc:	7858      	ldrb	r0, [r3, #1]
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	6a1a      	ldr	r2, [r3, #32]
 80112c8:	2301      	movs	r3, #1
 80112ca:	f7fe f919 	bl	800f500 <disk_read>
 80112ce:	4603      	mov	r3, r0
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d002      	beq.n	80112da <f_open+0x35a>
 80112d4:	2301      	movs	r3, #1
 80112d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80112da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d002      	beq.n	80112e8 <f_open+0x368>
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	2200      	movs	r2, #0
 80112e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80112e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3760      	adds	r7, #96	@ 0x60
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}

080112f4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b08e      	sub	sp, #56	@ 0x38
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	60f8      	str	r0, [r7, #12]
 80112fc:	60b9      	str	r1, [r7, #8]
 80112fe:	607a      	str	r2, [r7, #4]
 8011300:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	2200      	movs	r2, #0
 801130a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	f107 0214 	add.w	r2, r7, #20
 8011312:	4611      	mov	r1, r2
 8011314:	4618      	mov	r0, r3
 8011316:	f7ff fdb7 	bl	8010e88 <validate>
 801131a:	4603      	mov	r3, r0
 801131c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011320:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011324:	2b00      	cmp	r3, #0
 8011326:	d107      	bne.n	8011338 <f_read+0x44>
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	7d5b      	ldrb	r3, [r3, #21]
 801132c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011330:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011334:	2b00      	cmp	r3, #0
 8011336:	d002      	beq.n	801133e <f_read+0x4a>
 8011338:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801133c:	e115      	b.n	801156a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	7d1b      	ldrb	r3, [r3, #20]
 8011342:	f003 0301 	and.w	r3, r3, #1
 8011346:	2b00      	cmp	r3, #0
 8011348:	d101      	bne.n	801134e <f_read+0x5a>
 801134a:	2307      	movs	r3, #7
 801134c:	e10d      	b.n	801156a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	68da      	ldr	r2, [r3, #12]
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	699b      	ldr	r3, [r3, #24]
 8011356:	1ad3      	subs	r3, r2, r3
 8011358:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801135a:	687a      	ldr	r2, [r7, #4]
 801135c:	6a3b      	ldr	r3, [r7, #32]
 801135e:	429a      	cmp	r2, r3
 8011360:	f240 80fe 	bls.w	8011560 <f_read+0x26c>
 8011364:	6a3b      	ldr	r3, [r7, #32]
 8011366:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011368:	e0fa      	b.n	8011560 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	699b      	ldr	r3, [r3, #24]
 801136e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011372:	2b00      	cmp	r3, #0
 8011374:	f040 80c6 	bne.w	8011504 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	699b      	ldr	r3, [r3, #24]
 801137c:	0a5b      	lsrs	r3, r3, #9
 801137e:	697a      	ldr	r2, [r7, #20]
 8011380:	8952      	ldrh	r2, [r2, #10]
 8011382:	3a01      	subs	r2, #1
 8011384:	4013      	ands	r3, r2
 8011386:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011388:	69fb      	ldr	r3, [r7, #28]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d12f      	bne.n	80113ee <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	699b      	ldr	r3, [r3, #24]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d103      	bne.n	801139e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	689b      	ldr	r3, [r3, #8]
 801139a:	633b      	str	r3, [r7, #48]	@ 0x30
 801139c:	e013      	b.n	80113c6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d007      	beq.n	80113b6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	699b      	ldr	r3, [r3, #24]
 80113aa:	4619      	mov	r1, r3
 80113ac:	68f8      	ldr	r0, [r7, #12]
 80113ae:	f7fe fefe 	bl	80101ae <clmt_clust>
 80113b2:	6338      	str	r0, [r7, #48]	@ 0x30
 80113b4:	e007      	b.n	80113c6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80113b6:	68fa      	ldr	r2, [r7, #12]
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	69db      	ldr	r3, [r3, #28]
 80113bc:	4619      	mov	r1, r3
 80113be:	4610      	mov	r0, r2
 80113c0:	f7fe fc67 	bl	800fc92 <get_fat>
 80113c4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80113c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113c8:	2b01      	cmp	r3, #1
 80113ca:	d804      	bhi.n	80113d6 <f_read+0xe2>
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	2202      	movs	r2, #2
 80113d0:	755a      	strb	r2, [r3, #21]
 80113d2:	2302      	movs	r3, #2
 80113d4:	e0c9      	b.n	801156a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80113d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113dc:	d104      	bne.n	80113e8 <f_read+0xf4>
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	2201      	movs	r2, #1
 80113e2:	755a      	strb	r2, [r3, #21]
 80113e4:	2301      	movs	r3, #1
 80113e6:	e0c0      	b.n	801156a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80113ec:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80113ee:	697a      	ldr	r2, [r7, #20]
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	69db      	ldr	r3, [r3, #28]
 80113f4:	4619      	mov	r1, r3
 80113f6:	4610      	mov	r0, r2
 80113f8:	f7fe fc2c 	bl	800fc54 <clust2sect>
 80113fc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80113fe:	69bb      	ldr	r3, [r7, #24]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d104      	bne.n	801140e <f_read+0x11a>
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	2202      	movs	r2, #2
 8011408:	755a      	strb	r2, [r3, #21]
 801140a:	2302      	movs	r3, #2
 801140c:	e0ad      	b.n	801156a <f_read+0x276>
			sect += csect;
 801140e:	69ba      	ldr	r2, [r7, #24]
 8011410:	69fb      	ldr	r3, [r7, #28]
 8011412:	4413      	add	r3, r2
 8011414:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	0a5b      	lsrs	r3, r3, #9
 801141a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801141c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801141e:	2b00      	cmp	r3, #0
 8011420:	d039      	beq.n	8011496 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011422:	69fa      	ldr	r2, [r7, #28]
 8011424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011426:	4413      	add	r3, r2
 8011428:	697a      	ldr	r2, [r7, #20]
 801142a:	8952      	ldrh	r2, [r2, #10]
 801142c:	4293      	cmp	r3, r2
 801142e:	d905      	bls.n	801143c <f_read+0x148>
					cc = fs->csize - csect;
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	895b      	ldrh	r3, [r3, #10]
 8011434:	461a      	mov	r2, r3
 8011436:	69fb      	ldr	r3, [r7, #28]
 8011438:	1ad3      	subs	r3, r2, r3
 801143a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801143c:	697b      	ldr	r3, [r7, #20]
 801143e:	7858      	ldrb	r0, [r3, #1]
 8011440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011442:	69ba      	ldr	r2, [r7, #24]
 8011444:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011446:	f7fe f85b 	bl	800f500 <disk_read>
 801144a:	4603      	mov	r3, r0
 801144c:	2b00      	cmp	r3, #0
 801144e:	d004      	beq.n	801145a <f_read+0x166>
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	2201      	movs	r2, #1
 8011454:	755a      	strb	r2, [r3, #21]
 8011456:	2301      	movs	r3, #1
 8011458:	e087      	b.n	801156a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	7d1b      	ldrb	r3, [r3, #20]
 801145e:	b25b      	sxtb	r3, r3
 8011460:	2b00      	cmp	r3, #0
 8011462:	da14      	bge.n	801148e <f_read+0x19a>
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	6a1a      	ldr	r2, [r3, #32]
 8011468:	69bb      	ldr	r3, [r7, #24]
 801146a:	1ad3      	subs	r3, r2, r3
 801146c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801146e:	429a      	cmp	r2, r3
 8011470:	d90d      	bls.n	801148e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	6a1a      	ldr	r2, [r3, #32]
 8011476:	69bb      	ldr	r3, [r7, #24]
 8011478:	1ad3      	subs	r3, r2, r3
 801147a:	025b      	lsls	r3, r3, #9
 801147c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801147e:	18d0      	adds	r0, r2, r3
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	3330      	adds	r3, #48	@ 0x30
 8011484:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011488:	4619      	mov	r1, r3
 801148a:	f7fe f919 	bl	800f6c0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801148e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011490:	025b      	lsls	r3, r3, #9
 8011492:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8011494:	e050      	b.n	8011538 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	6a1b      	ldr	r3, [r3, #32]
 801149a:	69ba      	ldr	r2, [r7, #24]
 801149c:	429a      	cmp	r2, r3
 801149e:	d02e      	beq.n	80114fe <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	7d1b      	ldrb	r3, [r3, #20]
 80114a4:	b25b      	sxtb	r3, r3
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	da18      	bge.n	80114dc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	7858      	ldrb	r0, [r3, #1]
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	6a1a      	ldr	r2, [r3, #32]
 80114b8:	2301      	movs	r3, #1
 80114ba:	f7fe f841 	bl	800f540 <disk_write>
 80114be:	4603      	mov	r3, r0
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d004      	beq.n	80114ce <f_read+0x1da>
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	2201      	movs	r2, #1
 80114c8:	755a      	strb	r2, [r3, #21]
 80114ca:	2301      	movs	r3, #1
 80114cc:	e04d      	b.n	801156a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	7d1b      	ldrb	r3, [r3, #20]
 80114d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80114d6:	b2da      	uxtb	r2, r3
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	7858      	ldrb	r0, [r3, #1]
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80114e6:	2301      	movs	r3, #1
 80114e8:	69ba      	ldr	r2, [r7, #24]
 80114ea:	f7fe f809 	bl	800f500 <disk_read>
 80114ee:	4603      	mov	r3, r0
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d004      	beq.n	80114fe <f_read+0x20a>
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	2201      	movs	r2, #1
 80114f8:	755a      	strb	r2, [r3, #21]
 80114fa:	2301      	movs	r3, #1
 80114fc:	e035      	b.n	801156a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	69ba      	ldr	r2, [r7, #24]
 8011502:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	699b      	ldr	r3, [r3, #24]
 8011508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801150c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8011510:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8011512:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	429a      	cmp	r2, r3
 8011518:	d901      	bls.n	801151e <f_read+0x22a>
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	699b      	ldr	r3, [r3, #24]
 8011528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801152c:	4413      	add	r3, r2
 801152e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011530:	4619      	mov	r1, r3
 8011532:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011534:	f7fe f8c4 	bl	800f6c0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801153a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801153c:	4413      	add	r3, r2
 801153e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	699a      	ldr	r2, [r3, #24]
 8011544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011546:	441a      	add	r2, r3
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	619a      	str	r2, [r3, #24]
 801154c:	683b      	ldr	r3, [r7, #0]
 801154e:	681a      	ldr	r2, [r3, #0]
 8011550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011552:	441a      	add	r2, r3
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	601a      	str	r2, [r3, #0]
 8011558:	687a      	ldr	r2, [r7, #4]
 801155a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801155c:	1ad3      	subs	r3, r2, r3
 801155e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2b00      	cmp	r3, #0
 8011564:	f47f af01 	bne.w	801136a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011568:	2300      	movs	r3, #0
}
 801156a:	4618      	mov	r0, r3
 801156c:	3738      	adds	r7, #56	@ 0x38
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}

08011572 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011572:	b580      	push	{r7, lr}
 8011574:	b08c      	sub	sp, #48	@ 0x30
 8011576:	af00      	add	r7, sp, #0
 8011578:	60f8      	str	r0, [r7, #12]
 801157a:	60b9      	str	r1, [r7, #8]
 801157c:	607a      	str	r2, [r7, #4]
 801157e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	2200      	movs	r2, #0
 8011588:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	f107 0210 	add.w	r2, r7, #16
 8011590:	4611      	mov	r1, r2
 8011592:	4618      	mov	r0, r3
 8011594:	f7ff fc78 	bl	8010e88 <validate>
 8011598:	4603      	mov	r3, r0
 801159a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801159e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d107      	bne.n	80115b6 <f_write+0x44>
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	7d5b      	ldrb	r3, [r3, #21]
 80115aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80115ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d002      	beq.n	80115bc <f_write+0x4a>
 80115b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80115ba:	e14b      	b.n	8011854 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	7d1b      	ldrb	r3, [r3, #20]
 80115c0:	f003 0302 	and.w	r3, r3, #2
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d101      	bne.n	80115cc <f_write+0x5a>
 80115c8:	2307      	movs	r3, #7
 80115ca:	e143      	b.n	8011854 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	699a      	ldr	r2, [r3, #24]
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	441a      	add	r2, r3
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	699b      	ldr	r3, [r3, #24]
 80115d8:	429a      	cmp	r2, r3
 80115da:	f080 812d 	bcs.w	8011838 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	699b      	ldr	r3, [r3, #24]
 80115e2:	43db      	mvns	r3, r3
 80115e4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80115e6:	e127      	b.n	8011838 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	699b      	ldr	r3, [r3, #24]
 80115ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f040 80e3 	bne.w	80117bc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	699b      	ldr	r3, [r3, #24]
 80115fa:	0a5b      	lsrs	r3, r3, #9
 80115fc:	693a      	ldr	r2, [r7, #16]
 80115fe:	8952      	ldrh	r2, [r2, #10]
 8011600:	3a01      	subs	r2, #1
 8011602:	4013      	ands	r3, r2
 8011604:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011606:	69bb      	ldr	r3, [r7, #24]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d143      	bne.n	8011694 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	699b      	ldr	r3, [r3, #24]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d10c      	bne.n	801162e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	689b      	ldr	r3, [r3, #8]
 8011618:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801161a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801161c:	2b00      	cmp	r3, #0
 801161e:	d11a      	bne.n	8011656 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	2100      	movs	r1, #0
 8011624:	4618      	mov	r0, r3
 8011626:	f7fe fd2a 	bl	801007e <create_chain>
 801162a:	62b8      	str	r0, [r7, #40]	@ 0x28
 801162c:	e013      	b.n	8011656 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011632:	2b00      	cmp	r3, #0
 8011634:	d007      	beq.n	8011646 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	699b      	ldr	r3, [r3, #24]
 801163a:	4619      	mov	r1, r3
 801163c:	68f8      	ldr	r0, [r7, #12]
 801163e:	f7fe fdb6 	bl	80101ae <clmt_clust>
 8011642:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011644:	e007      	b.n	8011656 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011646:	68fa      	ldr	r2, [r7, #12]
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	69db      	ldr	r3, [r3, #28]
 801164c:	4619      	mov	r1, r3
 801164e:	4610      	mov	r0, r2
 8011650:	f7fe fd15 	bl	801007e <create_chain>
 8011654:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011658:	2b00      	cmp	r3, #0
 801165a:	f000 80f2 	beq.w	8011842 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801165e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011660:	2b01      	cmp	r3, #1
 8011662:	d104      	bne.n	801166e <f_write+0xfc>
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	2202      	movs	r2, #2
 8011668:	755a      	strb	r2, [r3, #21]
 801166a:	2302      	movs	r3, #2
 801166c:	e0f2      	b.n	8011854 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801166e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011674:	d104      	bne.n	8011680 <f_write+0x10e>
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	2201      	movs	r2, #1
 801167a:	755a      	strb	r2, [r3, #21]
 801167c:	2301      	movs	r3, #1
 801167e:	e0e9      	b.n	8011854 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011684:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	689b      	ldr	r3, [r3, #8]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d102      	bne.n	8011694 <f_write+0x122>
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011692:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	7d1b      	ldrb	r3, [r3, #20]
 8011698:	b25b      	sxtb	r3, r3
 801169a:	2b00      	cmp	r3, #0
 801169c:	da18      	bge.n	80116d0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	7858      	ldrb	r0, [r3, #1]
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	6a1a      	ldr	r2, [r3, #32]
 80116ac:	2301      	movs	r3, #1
 80116ae:	f7fd ff47 	bl	800f540 <disk_write>
 80116b2:	4603      	mov	r3, r0
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d004      	beq.n	80116c2 <f_write+0x150>
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	2201      	movs	r2, #1
 80116bc:	755a      	strb	r2, [r3, #21]
 80116be:	2301      	movs	r3, #1
 80116c0:	e0c8      	b.n	8011854 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	7d1b      	ldrb	r3, [r3, #20]
 80116c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80116ca:	b2da      	uxtb	r2, r3
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80116d0:	693a      	ldr	r2, [r7, #16]
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	69db      	ldr	r3, [r3, #28]
 80116d6:	4619      	mov	r1, r3
 80116d8:	4610      	mov	r0, r2
 80116da:	f7fe fabb 	bl	800fc54 <clust2sect>
 80116de:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80116e0:	697b      	ldr	r3, [r7, #20]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d104      	bne.n	80116f0 <f_write+0x17e>
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	2202      	movs	r2, #2
 80116ea:	755a      	strb	r2, [r3, #21]
 80116ec:	2302      	movs	r3, #2
 80116ee:	e0b1      	b.n	8011854 <f_write+0x2e2>
			sect += csect;
 80116f0:	697a      	ldr	r2, [r7, #20]
 80116f2:	69bb      	ldr	r3, [r7, #24]
 80116f4:	4413      	add	r3, r2
 80116f6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	0a5b      	lsrs	r3, r3, #9
 80116fc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80116fe:	6a3b      	ldr	r3, [r7, #32]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d03c      	beq.n	801177e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011704:	69ba      	ldr	r2, [r7, #24]
 8011706:	6a3b      	ldr	r3, [r7, #32]
 8011708:	4413      	add	r3, r2
 801170a:	693a      	ldr	r2, [r7, #16]
 801170c:	8952      	ldrh	r2, [r2, #10]
 801170e:	4293      	cmp	r3, r2
 8011710:	d905      	bls.n	801171e <f_write+0x1ac>
					cc = fs->csize - csect;
 8011712:	693b      	ldr	r3, [r7, #16]
 8011714:	895b      	ldrh	r3, [r3, #10]
 8011716:	461a      	mov	r2, r3
 8011718:	69bb      	ldr	r3, [r7, #24]
 801171a:	1ad3      	subs	r3, r2, r3
 801171c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	7858      	ldrb	r0, [r3, #1]
 8011722:	6a3b      	ldr	r3, [r7, #32]
 8011724:	697a      	ldr	r2, [r7, #20]
 8011726:	69f9      	ldr	r1, [r7, #28]
 8011728:	f7fd ff0a 	bl	800f540 <disk_write>
 801172c:	4603      	mov	r3, r0
 801172e:	2b00      	cmp	r3, #0
 8011730:	d004      	beq.n	801173c <f_write+0x1ca>
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	2201      	movs	r2, #1
 8011736:	755a      	strb	r2, [r3, #21]
 8011738:	2301      	movs	r3, #1
 801173a:	e08b      	b.n	8011854 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	6a1a      	ldr	r2, [r3, #32]
 8011740:	697b      	ldr	r3, [r7, #20]
 8011742:	1ad3      	subs	r3, r2, r3
 8011744:	6a3a      	ldr	r2, [r7, #32]
 8011746:	429a      	cmp	r2, r3
 8011748:	d915      	bls.n	8011776 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	6a1a      	ldr	r2, [r3, #32]
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	1ad3      	subs	r3, r2, r3
 8011758:	025b      	lsls	r3, r3, #9
 801175a:	69fa      	ldr	r2, [r7, #28]
 801175c:	4413      	add	r3, r2
 801175e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011762:	4619      	mov	r1, r3
 8011764:	f7fd ffac 	bl	800f6c0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	7d1b      	ldrb	r3, [r3, #20]
 801176c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011770:	b2da      	uxtb	r2, r3
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011776:	6a3b      	ldr	r3, [r7, #32]
 8011778:	025b      	lsls	r3, r3, #9
 801177a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801177c:	e03f      	b.n	80117fe <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	6a1b      	ldr	r3, [r3, #32]
 8011782:	697a      	ldr	r2, [r7, #20]
 8011784:	429a      	cmp	r2, r3
 8011786:	d016      	beq.n	80117b6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	699a      	ldr	r2, [r3, #24]
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011790:	429a      	cmp	r2, r3
 8011792:	d210      	bcs.n	80117b6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	7858      	ldrb	r0, [r3, #1]
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801179e:	2301      	movs	r3, #1
 80117a0:	697a      	ldr	r2, [r7, #20]
 80117a2:	f7fd fead 	bl	800f500 <disk_read>
 80117a6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d004      	beq.n	80117b6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	2201      	movs	r2, #1
 80117b0:	755a      	strb	r2, [r3, #21]
 80117b2:	2301      	movs	r3, #1
 80117b4:	e04e      	b.n	8011854 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	697a      	ldr	r2, [r7, #20]
 80117ba:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	699b      	ldr	r3, [r3, #24]
 80117c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117c4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80117c8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80117ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	429a      	cmp	r2, r3
 80117d0:	d901      	bls.n	80117d6 <f_write+0x264>
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	699b      	ldr	r3, [r3, #24]
 80117e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117e4:	4413      	add	r3, r2
 80117e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80117e8:	69f9      	ldr	r1, [r7, #28]
 80117ea:	4618      	mov	r0, r3
 80117ec:	f7fd ff68 	bl	800f6c0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	7d1b      	ldrb	r3, [r3, #20]
 80117f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80117f8:	b2da      	uxtb	r2, r3
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80117fe:	69fa      	ldr	r2, [r7, #28]
 8011800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011802:	4413      	add	r3, r2
 8011804:	61fb      	str	r3, [r7, #28]
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	699a      	ldr	r2, [r3, #24]
 801180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801180c:	441a      	add	r2, r3
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	619a      	str	r2, [r3, #24]
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	68da      	ldr	r2, [r3, #12]
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	699b      	ldr	r3, [r3, #24]
 801181a:	429a      	cmp	r2, r3
 801181c:	bf38      	it	cc
 801181e:	461a      	movcc	r2, r3
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	60da      	str	r2, [r3, #12]
 8011824:	683b      	ldr	r3, [r7, #0]
 8011826:	681a      	ldr	r2, [r3, #0]
 8011828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801182a:	441a      	add	r2, r3
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	601a      	str	r2, [r3, #0]
 8011830:	687a      	ldr	r2, [r7, #4]
 8011832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011834:	1ad3      	subs	r3, r2, r3
 8011836:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2b00      	cmp	r3, #0
 801183c:	f47f aed4 	bne.w	80115e8 <f_write+0x76>
 8011840:	e000      	b.n	8011844 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011842:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	7d1b      	ldrb	r3, [r3, #20]
 8011848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801184c:	b2da      	uxtb	r2, r3
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011852:	2300      	movs	r3, #0
}
 8011854:	4618      	mov	r0, r3
 8011856:	3730      	adds	r7, #48	@ 0x30
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}

0801185c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b086      	sub	sp, #24
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f107 0208 	add.w	r2, r7, #8
 801186a:	4611      	mov	r1, r2
 801186c:	4618      	mov	r0, r3
 801186e:	f7ff fb0b 	bl	8010e88 <validate>
 8011872:	4603      	mov	r3, r0
 8011874:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011876:	7dfb      	ldrb	r3, [r7, #23]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d168      	bne.n	801194e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	7d1b      	ldrb	r3, [r3, #20]
 8011880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011884:	2b00      	cmp	r3, #0
 8011886:	d062      	beq.n	801194e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	7d1b      	ldrb	r3, [r3, #20]
 801188c:	b25b      	sxtb	r3, r3
 801188e:	2b00      	cmp	r3, #0
 8011890:	da15      	bge.n	80118be <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	7858      	ldrb	r0, [r3, #1]
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6a1a      	ldr	r2, [r3, #32]
 80118a0:	2301      	movs	r3, #1
 80118a2:	f7fd fe4d 	bl	800f540 <disk_write>
 80118a6:	4603      	mov	r3, r0
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d001      	beq.n	80118b0 <f_sync+0x54>
 80118ac:	2301      	movs	r3, #1
 80118ae:	e04f      	b.n	8011950 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	7d1b      	ldrb	r3, [r3, #20]
 80118b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80118b8:	b2da      	uxtb	r2, r3
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80118be:	f7fd fc49 	bl	800f154 <get_fattime>
 80118c2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80118c4:	68ba      	ldr	r2, [r7, #8]
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118ca:	4619      	mov	r1, r3
 80118cc:	4610      	mov	r0, r2
 80118ce:	f7fe f925 	bl	800fb1c <move_window>
 80118d2:	4603      	mov	r3, r0
 80118d4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80118d6:	7dfb      	ldrb	r3, [r7, #23]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d138      	bne.n	801194e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118e0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	330b      	adds	r3, #11
 80118e6:	781a      	ldrb	r2, [r3, #0]
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	330b      	adds	r3, #11
 80118ec:	f042 0220 	orr.w	r2, r2, #32
 80118f0:	b2d2      	uxtb	r2, r2
 80118f2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	6818      	ldr	r0, [r3, #0]
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	689b      	ldr	r3, [r3, #8]
 80118fc:	461a      	mov	r2, r3
 80118fe:	68f9      	ldr	r1, [r7, #12]
 8011900:	f7fe fe2f 	bl	8010562 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	f103 021c 	add.w	r2, r3, #28
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	68db      	ldr	r3, [r3, #12]
 801190e:	4619      	mov	r1, r3
 8011910:	4610      	mov	r0, r2
 8011912:	f7fd fea9 	bl	800f668 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	3316      	adds	r3, #22
 801191a:	6939      	ldr	r1, [r7, #16]
 801191c:	4618      	mov	r0, r3
 801191e:	f7fd fea3 	bl	800f668 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	3312      	adds	r3, #18
 8011926:	2100      	movs	r1, #0
 8011928:	4618      	mov	r0, r3
 801192a:	f7fd fe82 	bl	800f632 <st_word>
					fs->wflag = 1;
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	2201      	movs	r2, #1
 8011932:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	4618      	mov	r0, r3
 8011938:	f7fe f91e 	bl	800fb78 <sync_fs>
 801193c:	4603      	mov	r3, r0
 801193e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	7d1b      	ldrb	r3, [r3, #20]
 8011944:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011948:	b2da      	uxtb	r2, r3
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801194e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011950:	4618      	mov	r0, r3
 8011952:	3718      	adds	r7, #24
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}

08011958 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b084      	sub	sp, #16
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	f7ff ff7b 	bl	801185c <f_sync>
 8011966:	4603      	mov	r3, r0
 8011968:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801196a:	7bfb      	ldrb	r3, [r7, #15]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d118      	bne.n	80119a2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f107 0208 	add.w	r2, r7, #8
 8011976:	4611      	mov	r1, r2
 8011978:	4618      	mov	r0, r3
 801197a:	f7ff fa85 	bl	8010e88 <validate>
 801197e:	4603      	mov	r3, r0
 8011980:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011982:	7bfb      	ldrb	r3, [r7, #15]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d10c      	bne.n	80119a2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	691b      	ldr	r3, [r3, #16]
 801198c:	4618      	mov	r0, r3
 801198e:	f7fe f821 	bl	800f9d4 <dec_lock>
 8011992:	4603      	mov	r3, r0
 8011994:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011996:	7bfb      	ldrb	r3, [r7, #15]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d102      	bne.n	80119a2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2200      	movs	r2, #0
 80119a0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80119a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80119a4:	4618      	mov	r0, r3
 80119a6:	3710      	adds	r7, #16
 80119a8:	46bd      	mov	sp, r7
 80119aa:	bd80      	pop	{r7, pc}

080119ac <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80119ac:	b580      	push	{r7, lr}
 80119ae:	b090      	sub	sp, #64	@ 0x40
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
 80119b4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	f107 0208 	add.w	r2, r7, #8
 80119bc:	4611      	mov	r1, r2
 80119be:	4618      	mov	r0, r3
 80119c0:	f7ff fa62 	bl	8010e88 <validate>
 80119c4:	4603      	mov	r3, r0
 80119c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80119ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d103      	bne.n	80119da <f_lseek+0x2e>
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	7d5b      	ldrb	r3, [r3, #21]
 80119d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80119da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d002      	beq.n	80119e8 <f_lseek+0x3c>
 80119e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80119e6:	e1e6      	b.n	8011db6 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	f000 80d1 	beq.w	8011b94 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80119f2:	683b      	ldr	r3, [r7, #0]
 80119f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119f8:	d15a      	bne.n	8011ab0 <f_lseek+0x104>
			tbl = fp->cltbl;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119fe:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a02:	1d1a      	adds	r2, r3, #4
 8011a04:	627a      	str	r2, [r7, #36]	@ 0x24
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	617b      	str	r3, [r7, #20]
 8011a0a:	2302      	movs	r3, #2
 8011a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	689b      	ldr	r3, [r3, #8]
 8011a12:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8011a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d03a      	beq.n	8011a90 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a1c:	613b      	str	r3, [r7, #16]
 8011a1e:	2300      	movs	r3, #0
 8011a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a24:	3302      	adds	r3, #2
 8011a26:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8011a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a2a:	60fb      	str	r3, [r7, #12]
 8011a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a2e:	3301      	adds	r3, #1
 8011a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7fe f92b 	bl	800fc92 <get_fat>
 8011a3c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a40:	2b01      	cmp	r3, #1
 8011a42:	d804      	bhi.n	8011a4e <f_lseek+0xa2>
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2202      	movs	r2, #2
 8011a48:	755a      	strb	r2, [r3, #21]
 8011a4a:	2302      	movs	r3, #2
 8011a4c:	e1b3      	b.n	8011db6 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a54:	d104      	bne.n	8011a60 <f_lseek+0xb4>
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	2201      	movs	r2, #1
 8011a5a:	755a      	strb	r2, [r3, #21]
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	e1aa      	b.n	8011db6 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	3301      	adds	r3, #1
 8011a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d0de      	beq.n	8011a28 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011a6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a6c:	697b      	ldr	r3, [r7, #20]
 8011a6e:	429a      	cmp	r2, r3
 8011a70:	d809      	bhi.n	8011a86 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8011a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a74:	1d1a      	adds	r2, r3, #4
 8011a76:	627a      	str	r2, [r7, #36]	@ 0x24
 8011a78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a7a:	601a      	str	r2, [r3, #0]
 8011a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a7e:	1d1a      	adds	r2, r3, #4
 8011a80:	627a      	str	r2, [r7, #36]	@ 0x24
 8011a82:	693a      	ldr	r2, [r7, #16]
 8011a84:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	695b      	ldr	r3, [r3, #20]
 8011a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d3c4      	bcc.n	8011a1a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a96:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011a98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a9a:	697b      	ldr	r3, [r7, #20]
 8011a9c:	429a      	cmp	r2, r3
 8011a9e:	d803      	bhi.n	8011aa8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	601a      	str	r2, [r3, #0]
 8011aa6:	e184      	b.n	8011db2 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011aa8:	2311      	movs	r3, #17
 8011aaa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011aae:	e180      	b.n	8011db2 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	68db      	ldr	r3, [r3, #12]
 8011ab4:	683a      	ldr	r2, [r7, #0]
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d902      	bls.n	8011ac0 <f_lseek+0x114>
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	68db      	ldr	r3, [r3, #12]
 8011abe:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	683a      	ldr	r2, [r7, #0]
 8011ac4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f000 8172 	beq.w	8011db2 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	3b01      	subs	r3, #1
 8011ad2:	4619      	mov	r1, r3
 8011ad4:	6878      	ldr	r0, [r7, #4]
 8011ad6:	f7fe fb6a 	bl	80101ae <clmt_clust>
 8011ada:	4602      	mov	r2, r0
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011ae0:	68ba      	ldr	r2, [r7, #8]
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	69db      	ldr	r3, [r3, #28]
 8011ae6:	4619      	mov	r1, r3
 8011ae8:	4610      	mov	r0, r2
 8011aea:	f7fe f8b3 	bl	800fc54 <clust2sect>
 8011aee:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011af0:	69bb      	ldr	r3, [r7, #24]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d104      	bne.n	8011b00 <f_lseek+0x154>
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2202      	movs	r2, #2
 8011afa:	755a      	strb	r2, [r3, #21]
 8011afc:	2302      	movs	r3, #2
 8011afe:	e15a      	b.n	8011db6 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	3b01      	subs	r3, #1
 8011b04:	0a5b      	lsrs	r3, r3, #9
 8011b06:	68ba      	ldr	r2, [r7, #8]
 8011b08:	8952      	ldrh	r2, [r2, #10]
 8011b0a:	3a01      	subs	r2, #1
 8011b0c:	4013      	ands	r3, r2
 8011b0e:	69ba      	ldr	r2, [r7, #24]
 8011b10:	4413      	add	r3, r2
 8011b12:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	699b      	ldr	r3, [r3, #24]
 8011b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	f000 8148 	beq.w	8011db2 <f_lseek+0x406>
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	6a1b      	ldr	r3, [r3, #32]
 8011b26:	69ba      	ldr	r2, [r7, #24]
 8011b28:	429a      	cmp	r2, r3
 8011b2a:	f000 8142 	beq.w	8011db2 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	7d1b      	ldrb	r3, [r3, #20]
 8011b32:	b25b      	sxtb	r3, r3
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	da18      	bge.n	8011b6a <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	7858      	ldrb	r0, [r3, #1]
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	6a1a      	ldr	r2, [r3, #32]
 8011b46:	2301      	movs	r3, #1
 8011b48:	f7fd fcfa 	bl	800f540 <disk_write>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d004      	beq.n	8011b5c <f_lseek+0x1b0>
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2201      	movs	r2, #1
 8011b56:	755a      	strb	r2, [r3, #21]
 8011b58:	2301      	movs	r3, #1
 8011b5a:	e12c      	b.n	8011db6 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	7d1b      	ldrb	r3, [r3, #20]
 8011b60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011b64:	b2da      	uxtb	r2, r3
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	7858      	ldrb	r0, [r3, #1]
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011b74:	2301      	movs	r3, #1
 8011b76:	69ba      	ldr	r2, [r7, #24]
 8011b78:	f7fd fcc2 	bl	800f500 <disk_read>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d004      	beq.n	8011b8c <f_lseek+0x1e0>
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2201      	movs	r2, #1
 8011b86:	755a      	strb	r2, [r3, #21]
 8011b88:	2301      	movs	r3, #1
 8011b8a:	e114      	b.n	8011db6 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	69ba      	ldr	r2, [r7, #24]
 8011b90:	621a      	str	r2, [r3, #32]
 8011b92:	e10e      	b.n	8011db2 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	68db      	ldr	r3, [r3, #12]
 8011b98:	683a      	ldr	r2, [r7, #0]
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d908      	bls.n	8011bb0 <f_lseek+0x204>
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	7d1b      	ldrb	r3, [r3, #20]
 8011ba2:	f003 0302 	and.w	r3, r3, #2
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d102      	bne.n	8011bb0 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	68db      	ldr	r3, [r3, #12]
 8011bae:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	699b      	ldr	r3, [r3, #24]
 8011bb4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011bbe:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	f000 80a7 	beq.w	8011d16 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011bc8:	68bb      	ldr	r3, [r7, #8]
 8011bca:	895b      	ldrh	r3, [r3, #10]
 8011bcc:	025b      	lsls	r3, r3, #9
 8011bce:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011bd0:	6a3b      	ldr	r3, [r7, #32]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d01b      	beq.n	8011c0e <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	1e5a      	subs	r2, r3, #1
 8011bda:	69fb      	ldr	r3, [r7, #28]
 8011bdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8011be0:	6a3b      	ldr	r3, [r7, #32]
 8011be2:	1e59      	subs	r1, r3, #1
 8011be4:	69fb      	ldr	r3, [r7, #28]
 8011be6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d30f      	bcc.n	8011c0e <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011bee:	6a3b      	ldr	r3, [r7, #32]
 8011bf0:	1e5a      	subs	r2, r3, #1
 8011bf2:	69fb      	ldr	r3, [r7, #28]
 8011bf4:	425b      	negs	r3, r3
 8011bf6:	401a      	ands	r2, r3
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	699b      	ldr	r3, [r3, #24]
 8011c00:	683a      	ldr	r2, [r7, #0]
 8011c02:	1ad3      	subs	r3, r2, r3
 8011c04:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	69db      	ldr	r3, [r3, #28]
 8011c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011c0c:	e022      	b.n	8011c54 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	689b      	ldr	r3, [r3, #8]
 8011c12:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d119      	bne.n	8011c4e <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	2100      	movs	r1, #0
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7fe fa2d 	bl	801007e <create_chain>
 8011c24:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c28:	2b01      	cmp	r3, #1
 8011c2a:	d104      	bne.n	8011c36 <f_lseek+0x28a>
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	2202      	movs	r2, #2
 8011c30:	755a      	strb	r2, [r3, #21]
 8011c32:	2302      	movs	r3, #2
 8011c34:	e0bf      	b.n	8011db6 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c3c:	d104      	bne.n	8011c48 <f_lseek+0x29c>
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2201      	movs	r2, #1
 8011c42:	755a      	strb	r2, [r3, #21]
 8011c44:	2301      	movs	r3, #1
 8011c46:	e0b6      	b.n	8011db6 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011c4c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011c52:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d05d      	beq.n	8011d16 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8011c5a:	e03a      	b.n	8011cd2 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8011c5c:	683a      	ldr	r2, [r7, #0]
 8011c5e:	69fb      	ldr	r3, [r7, #28]
 8011c60:	1ad3      	subs	r3, r2, r3
 8011c62:	603b      	str	r3, [r7, #0]
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	699a      	ldr	r2, [r3, #24]
 8011c68:	69fb      	ldr	r3, [r7, #28]
 8011c6a:	441a      	add	r2, r3
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	7d1b      	ldrb	r3, [r3, #20]
 8011c74:	f003 0302 	and.w	r3, r3, #2
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d00b      	beq.n	8011c94 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011c80:	4618      	mov	r0, r3
 8011c82:	f7fe f9fc 	bl	801007e <create_chain>
 8011c86:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d108      	bne.n	8011ca0 <f_lseek+0x2f4>
							ofs = 0; break;
 8011c8e:	2300      	movs	r3, #0
 8011c90:	603b      	str	r3, [r7, #0]
 8011c92:	e022      	b.n	8011cda <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f7fd fffa 	bl	800fc92 <get_fat>
 8011c9e:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ca6:	d104      	bne.n	8011cb2 <f_lseek+0x306>
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2201      	movs	r2, #1
 8011cac:	755a      	strb	r2, [r3, #21]
 8011cae:	2301      	movs	r3, #1
 8011cb0:	e081      	b.n	8011db6 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cb4:	2b01      	cmp	r3, #1
 8011cb6:	d904      	bls.n	8011cc2 <f_lseek+0x316>
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	695b      	ldr	r3, [r3, #20]
 8011cbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011cbe:	429a      	cmp	r2, r3
 8011cc0:	d304      	bcc.n	8011ccc <f_lseek+0x320>
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	2202      	movs	r2, #2
 8011cc6:	755a      	strb	r2, [r3, #21]
 8011cc8:	2302      	movs	r3, #2
 8011cca:	e074      	b.n	8011db6 <f_lseek+0x40a>
					fp->clust = clst;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011cd0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011cd2:	683a      	ldr	r2, [r7, #0]
 8011cd4:	69fb      	ldr	r3, [r7, #28]
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d8c0      	bhi.n	8011c5c <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	699a      	ldr	r2, [r3, #24]
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	441a      	add	r2, r3
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d012      	beq.n	8011d16 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f7fd ffad 	bl	800fc54 <clust2sect>
 8011cfa:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d104      	bne.n	8011d0c <f_lseek+0x360>
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2202      	movs	r2, #2
 8011d06:	755a      	strb	r2, [r3, #21]
 8011d08:	2302      	movs	r3, #2
 8011d0a:	e054      	b.n	8011db6 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	0a5b      	lsrs	r3, r3, #9
 8011d10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d12:	4413      	add	r3, r2
 8011d14:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	699a      	ldr	r2, [r3, #24]
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	68db      	ldr	r3, [r3, #12]
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	d90a      	bls.n	8011d38 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	699a      	ldr	r2, [r3, #24]
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	7d1b      	ldrb	r3, [r3, #20]
 8011d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d32:	b2da      	uxtb	r2, r3
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	699b      	ldr	r3, [r3, #24]
 8011d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d036      	beq.n	8011db2 <f_lseek+0x406>
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6a1b      	ldr	r3, [r3, #32]
 8011d48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d031      	beq.n	8011db2 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	7d1b      	ldrb	r3, [r3, #20]
 8011d52:	b25b      	sxtb	r3, r3
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	da18      	bge.n	8011d8a <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	7858      	ldrb	r0, [r3, #1]
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6a1a      	ldr	r2, [r3, #32]
 8011d66:	2301      	movs	r3, #1
 8011d68:	f7fd fbea 	bl	800f540 <disk_write>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d004      	beq.n	8011d7c <f_lseek+0x3d0>
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	2201      	movs	r2, #1
 8011d76:	755a      	strb	r2, [r3, #21]
 8011d78:	2301      	movs	r3, #1
 8011d7a:	e01c      	b.n	8011db6 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	7d1b      	ldrb	r3, [r3, #20]
 8011d80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011d84:	b2da      	uxtb	r2, r3
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	7858      	ldrb	r0, [r3, #1]
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011d94:	2301      	movs	r3, #1
 8011d96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d98:	f7fd fbb2 	bl	800f500 <disk_read>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d004      	beq.n	8011dac <f_lseek+0x400>
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2201      	movs	r2, #1
 8011da6:	755a      	strb	r2, [r3, #21]
 8011da8:	2301      	movs	r3, #1
 8011daa:	e004      	b.n	8011db6 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011db0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011db2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8011db6:	4618      	mov	r0, r3
 8011db8:	3740      	adds	r7, #64	@ 0x40
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}
	...

08011dc0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b087      	sub	sp, #28
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	60f8      	str	r0, [r7, #12]
 8011dc8:	60b9      	str	r1, [r7, #8]
 8011dca:	4613      	mov	r3, r2
 8011dcc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011dce:	2301      	movs	r3, #1
 8011dd0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8011e54 <FATFS_LinkDriverEx+0x94>)
 8011dd8:	7a5b      	ldrb	r3, [r3, #9]
 8011dda:	b2db      	uxtb	r3, r3
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d131      	bne.n	8011e44 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011de0:	4b1c      	ldr	r3, [pc, #112]	@ (8011e54 <FATFS_LinkDriverEx+0x94>)
 8011de2:	7a5b      	ldrb	r3, [r3, #9]
 8011de4:	b2db      	uxtb	r3, r3
 8011de6:	461a      	mov	r2, r3
 8011de8:	4b1a      	ldr	r3, [pc, #104]	@ (8011e54 <FATFS_LinkDriverEx+0x94>)
 8011dea:	2100      	movs	r1, #0
 8011dec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011dee:	4b19      	ldr	r3, [pc, #100]	@ (8011e54 <FATFS_LinkDriverEx+0x94>)
 8011df0:	7a5b      	ldrb	r3, [r3, #9]
 8011df2:	b2db      	uxtb	r3, r3
 8011df4:	4a17      	ldr	r2, [pc, #92]	@ (8011e54 <FATFS_LinkDriverEx+0x94>)
 8011df6:	009b      	lsls	r3, r3, #2
 8011df8:	4413      	add	r3, r2
 8011dfa:	68fa      	ldr	r2, [r7, #12]
 8011dfc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011dfe:	4b15      	ldr	r3, [pc, #84]	@ (8011e54 <FATFS_LinkDriverEx+0x94>)
 8011e00:	7a5b      	ldrb	r3, [r3, #9]
 8011e02:	b2db      	uxtb	r3, r3
 8011e04:	461a      	mov	r2, r3
 8011e06:	4b13      	ldr	r3, [pc, #76]	@ (8011e54 <FATFS_LinkDriverEx+0x94>)
 8011e08:	4413      	add	r3, r2
 8011e0a:	79fa      	ldrb	r2, [r7, #7]
 8011e0c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011e0e:	4b11      	ldr	r3, [pc, #68]	@ (8011e54 <FATFS_LinkDriverEx+0x94>)
 8011e10:	7a5b      	ldrb	r3, [r3, #9]
 8011e12:	b2db      	uxtb	r3, r3
 8011e14:	1c5a      	adds	r2, r3, #1
 8011e16:	b2d1      	uxtb	r1, r2
 8011e18:	4a0e      	ldr	r2, [pc, #56]	@ (8011e54 <FATFS_LinkDriverEx+0x94>)
 8011e1a:	7251      	strb	r1, [r2, #9]
 8011e1c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011e1e:	7dbb      	ldrb	r3, [r7, #22]
 8011e20:	3330      	adds	r3, #48	@ 0x30
 8011e22:	b2da      	uxtb	r2, r3
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011e28:	68bb      	ldr	r3, [r7, #8]
 8011e2a:	3301      	adds	r3, #1
 8011e2c:	223a      	movs	r2, #58	@ 0x3a
 8011e2e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	3302      	adds	r3, #2
 8011e34:	222f      	movs	r2, #47	@ 0x2f
 8011e36:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	3303      	adds	r3, #3
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011e40:	2300      	movs	r3, #0
 8011e42:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	371c      	adds	r7, #28
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e50:	4770      	bx	lr
 8011e52:	bf00      	nop
 8011e54:	240bc358 	.word	0x240bc358

08011e58 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b082      	sub	sp, #8
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
 8011e60:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011e62:	2200      	movs	r2, #0
 8011e64:	6839      	ldr	r1, [r7, #0]
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f7ff ffaa 	bl	8011dc0 <FATFS_LinkDriverEx>
 8011e6c:	4603      	mov	r3, r0
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3708      	adds	r7, #8
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}
	...

08011e78 <sniprintf>:
 8011e78:	b40c      	push	{r2, r3}
 8011e7a:	b530      	push	{r4, r5, lr}
 8011e7c:	4b17      	ldr	r3, [pc, #92]	@ (8011edc <sniprintf+0x64>)
 8011e7e:	1e0c      	subs	r4, r1, #0
 8011e80:	681d      	ldr	r5, [r3, #0]
 8011e82:	b09d      	sub	sp, #116	@ 0x74
 8011e84:	da08      	bge.n	8011e98 <sniprintf+0x20>
 8011e86:	238b      	movs	r3, #139	@ 0x8b
 8011e88:	602b      	str	r3, [r5, #0]
 8011e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e8e:	b01d      	add	sp, #116	@ 0x74
 8011e90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e94:	b002      	add	sp, #8
 8011e96:	4770      	bx	lr
 8011e98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011e9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011ea0:	bf14      	ite	ne
 8011ea2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011ea6:	4623      	moveq	r3, r4
 8011ea8:	9304      	str	r3, [sp, #16]
 8011eaa:	9307      	str	r3, [sp, #28]
 8011eac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011eb0:	9002      	str	r0, [sp, #8]
 8011eb2:	9006      	str	r0, [sp, #24]
 8011eb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011eb8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011eba:	ab21      	add	r3, sp, #132	@ 0x84
 8011ebc:	a902      	add	r1, sp, #8
 8011ebe:	4628      	mov	r0, r5
 8011ec0:	9301      	str	r3, [sp, #4]
 8011ec2:	f000 f995 	bl	80121f0 <_svfiprintf_r>
 8011ec6:	1c43      	adds	r3, r0, #1
 8011ec8:	bfbc      	itt	lt
 8011eca:	238b      	movlt	r3, #139	@ 0x8b
 8011ecc:	602b      	strlt	r3, [r5, #0]
 8011ece:	2c00      	cmp	r4, #0
 8011ed0:	d0dd      	beq.n	8011e8e <sniprintf+0x16>
 8011ed2:	9b02      	ldr	r3, [sp, #8]
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	701a      	strb	r2, [r3, #0]
 8011ed8:	e7d9      	b.n	8011e8e <sniprintf+0x16>
 8011eda:	bf00      	nop
 8011edc:	24000018 	.word	0x24000018

08011ee0 <memset>:
 8011ee0:	4402      	add	r2, r0
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	4293      	cmp	r3, r2
 8011ee6:	d100      	bne.n	8011eea <memset+0xa>
 8011ee8:	4770      	bx	lr
 8011eea:	f803 1b01 	strb.w	r1, [r3], #1
 8011eee:	e7f9      	b.n	8011ee4 <memset+0x4>

08011ef0 <__errno>:
 8011ef0:	4b01      	ldr	r3, [pc, #4]	@ (8011ef8 <__errno+0x8>)
 8011ef2:	6818      	ldr	r0, [r3, #0]
 8011ef4:	4770      	bx	lr
 8011ef6:	bf00      	nop
 8011ef8:	24000018 	.word	0x24000018

08011efc <__libc_init_array>:
 8011efc:	b570      	push	{r4, r5, r6, lr}
 8011efe:	4d0d      	ldr	r5, [pc, #52]	@ (8011f34 <__libc_init_array+0x38>)
 8011f00:	4c0d      	ldr	r4, [pc, #52]	@ (8011f38 <__libc_init_array+0x3c>)
 8011f02:	1b64      	subs	r4, r4, r5
 8011f04:	10a4      	asrs	r4, r4, #2
 8011f06:	2600      	movs	r6, #0
 8011f08:	42a6      	cmp	r6, r4
 8011f0a:	d109      	bne.n	8011f20 <__libc_init_array+0x24>
 8011f0c:	4d0b      	ldr	r5, [pc, #44]	@ (8011f3c <__libc_init_array+0x40>)
 8011f0e:	4c0c      	ldr	r4, [pc, #48]	@ (8011f40 <__libc_init_array+0x44>)
 8011f10:	f000 fc66 	bl	80127e0 <_init>
 8011f14:	1b64      	subs	r4, r4, r5
 8011f16:	10a4      	asrs	r4, r4, #2
 8011f18:	2600      	movs	r6, #0
 8011f1a:	42a6      	cmp	r6, r4
 8011f1c:	d105      	bne.n	8011f2a <__libc_init_array+0x2e>
 8011f1e:	bd70      	pop	{r4, r5, r6, pc}
 8011f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f24:	4798      	blx	r3
 8011f26:	3601      	adds	r6, #1
 8011f28:	e7ee      	b.n	8011f08 <__libc_init_array+0xc>
 8011f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f2e:	4798      	blx	r3
 8011f30:	3601      	adds	r6, #1
 8011f32:	e7f2      	b.n	8011f1a <__libc_init_array+0x1e>
 8011f34:	08012c0c 	.word	0x08012c0c
 8011f38:	08012c0c 	.word	0x08012c0c
 8011f3c:	08012c0c 	.word	0x08012c0c
 8011f40:	08012c10 	.word	0x08012c10

08011f44 <__retarget_lock_acquire_recursive>:
 8011f44:	4770      	bx	lr

08011f46 <__retarget_lock_release_recursive>:
 8011f46:	4770      	bx	lr

08011f48 <_free_r>:
 8011f48:	b538      	push	{r3, r4, r5, lr}
 8011f4a:	4605      	mov	r5, r0
 8011f4c:	2900      	cmp	r1, #0
 8011f4e:	d041      	beq.n	8011fd4 <_free_r+0x8c>
 8011f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f54:	1f0c      	subs	r4, r1, #4
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	bfb8      	it	lt
 8011f5a:	18e4      	addlt	r4, r4, r3
 8011f5c:	f000 f8e0 	bl	8012120 <__malloc_lock>
 8011f60:	4a1d      	ldr	r2, [pc, #116]	@ (8011fd8 <_free_r+0x90>)
 8011f62:	6813      	ldr	r3, [r2, #0]
 8011f64:	b933      	cbnz	r3, 8011f74 <_free_r+0x2c>
 8011f66:	6063      	str	r3, [r4, #4]
 8011f68:	6014      	str	r4, [r2, #0]
 8011f6a:	4628      	mov	r0, r5
 8011f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f70:	f000 b8dc 	b.w	801212c <__malloc_unlock>
 8011f74:	42a3      	cmp	r3, r4
 8011f76:	d908      	bls.n	8011f8a <_free_r+0x42>
 8011f78:	6820      	ldr	r0, [r4, #0]
 8011f7a:	1821      	adds	r1, r4, r0
 8011f7c:	428b      	cmp	r3, r1
 8011f7e:	bf01      	itttt	eq
 8011f80:	6819      	ldreq	r1, [r3, #0]
 8011f82:	685b      	ldreq	r3, [r3, #4]
 8011f84:	1809      	addeq	r1, r1, r0
 8011f86:	6021      	streq	r1, [r4, #0]
 8011f88:	e7ed      	b.n	8011f66 <_free_r+0x1e>
 8011f8a:	461a      	mov	r2, r3
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	b10b      	cbz	r3, 8011f94 <_free_r+0x4c>
 8011f90:	42a3      	cmp	r3, r4
 8011f92:	d9fa      	bls.n	8011f8a <_free_r+0x42>
 8011f94:	6811      	ldr	r1, [r2, #0]
 8011f96:	1850      	adds	r0, r2, r1
 8011f98:	42a0      	cmp	r0, r4
 8011f9a:	d10b      	bne.n	8011fb4 <_free_r+0x6c>
 8011f9c:	6820      	ldr	r0, [r4, #0]
 8011f9e:	4401      	add	r1, r0
 8011fa0:	1850      	adds	r0, r2, r1
 8011fa2:	4283      	cmp	r3, r0
 8011fa4:	6011      	str	r1, [r2, #0]
 8011fa6:	d1e0      	bne.n	8011f6a <_free_r+0x22>
 8011fa8:	6818      	ldr	r0, [r3, #0]
 8011faa:	685b      	ldr	r3, [r3, #4]
 8011fac:	6053      	str	r3, [r2, #4]
 8011fae:	4408      	add	r0, r1
 8011fb0:	6010      	str	r0, [r2, #0]
 8011fb2:	e7da      	b.n	8011f6a <_free_r+0x22>
 8011fb4:	d902      	bls.n	8011fbc <_free_r+0x74>
 8011fb6:	230c      	movs	r3, #12
 8011fb8:	602b      	str	r3, [r5, #0]
 8011fba:	e7d6      	b.n	8011f6a <_free_r+0x22>
 8011fbc:	6820      	ldr	r0, [r4, #0]
 8011fbe:	1821      	adds	r1, r4, r0
 8011fc0:	428b      	cmp	r3, r1
 8011fc2:	bf04      	itt	eq
 8011fc4:	6819      	ldreq	r1, [r3, #0]
 8011fc6:	685b      	ldreq	r3, [r3, #4]
 8011fc8:	6063      	str	r3, [r4, #4]
 8011fca:	bf04      	itt	eq
 8011fcc:	1809      	addeq	r1, r1, r0
 8011fce:	6021      	streq	r1, [r4, #0]
 8011fd0:	6054      	str	r4, [r2, #4]
 8011fd2:	e7ca      	b.n	8011f6a <_free_r+0x22>
 8011fd4:	bd38      	pop	{r3, r4, r5, pc}
 8011fd6:	bf00      	nop
 8011fd8:	240bc4a8 	.word	0x240bc4a8

08011fdc <sbrk_aligned>:
 8011fdc:	b570      	push	{r4, r5, r6, lr}
 8011fde:	4e0f      	ldr	r6, [pc, #60]	@ (801201c <sbrk_aligned+0x40>)
 8011fe0:	460c      	mov	r4, r1
 8011fe2:	6831      	ldr	r1, [r6, #0]
 8011fe4:	4605      	mov	r5, r0
 8011fe6:	b911      	cbnz	r1, 8011fee <sbrk_aligned+0x12>
 8011fe8:	f000 fba6 	bl	8012738 <_sbrk_r>
 8011fec:	6030      	str	r0, [r6, #0]
 8011fee:	4621      	mov	r1, r4
 8011ff0:	4628      	mov	r0, r5
 8011ff2:	f000 fba1 	bl	8012738 <_sbrk_r>
 8011ff6:	1c43      	adds	r3, r0, #1
 8011ff8:	d103      	bne.n	8012002 <sbrk_aligned+0x26>
 8011ffa:	f04f 34ff 	mov.w	r4, #4294967295
 8011ffe:	4620      	mov	r0, r4
 8012000:	bd70      	pop	{r4, r5, r6, pc}
 8012002:	1cc4      	adds	r4, r0, #3
 8012004:	f024 0403 	bic.w	r4, r4, #3
 8012008:	42a0      	cmp	r0, r4
 801200a:	d0f8      	beq.n	8011ffe <sbrk_aligned+0x22>
 801200c:	1a21      	subs	r1, r4, r0
 801200e:	4628      	mov	r0, r5
 8012010:	f000 fb92 	bl	8012738 <_sbrk_r>
 8012014:	3001      	adds	r0, #1
 8012016:	d1f2      	bne.n	8011ffe <sbrk_aligned+0x22>
 8012018:	e7ef      	b.n	8011ffa <sbrk_aligned+0x1e>
 801201a:	bf00      	nop
 801201c:	240bc4a4 	.word	0x240bc4a4

08012020 <_malloc_r>:
 8012020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012024:	1ccd      	adds	r5, r1, #3
 8012026:	f025 0503 	bic.w	r5, r5, #3
 801202a:	3508      	adds	r5, #8
 801202c:	2d0c      	cmp	r5, #12
 801202e:	bf38      	it	cc
 8012030:	250c      	movcc	r5, #12
 8012032:	2d00      	cmp	r5, #0
 8012034:	4606      	mov	r6, r0
 8012036:	db01      	blt.n	801203c <_malloc_r+0x1c>
 8012038:	42a9      	cmp	r1, r5
 801203a:	d904      	bls.n	8012046 <_malloc_r+0x26>
 801203c:	230c      	movs	r3, #12
 801203e:	6033      	str	r3, [r6, #0]
 8012040:	2000      	movs	r0, #0
 8012042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012046:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801211c <_malloc_r+0xfc>
 801204a:	f000 f869 	bl	8012120 <__malloc_lock>
 801204e:	f8d8 3000 	ldr.w	r3, [r8]
 8012052:	461c      	mov	r4, r3
 8012054:	bb44      	cbnz	r4, 80120a8 <_malloc_r+0x88>
 8012056:	4629      	mov	r1, r5
 8012058:	4630      	mov	r0, r6
 801205a:	f7ff ffbf 	bl	8011fdc <sbrk_aligned>
 801205e:	1c43      	adds	r3, r0, #1
 8012060:	4604      	mov	r4, r0
 8012062:	d158      	bne.n	8012116 <_malloc_r+0xf6>
 8012064:	f8d8 4000 	ldr.w	r4, [r8]
 8012068:	4627      	mov	r7, r4
 801206a:	2f00      	cmp	r7, #0
 801206c:	d143      	bne.n	80120f6 <_malloc_r+0xd6>
 801206e:	2c00      	cmp	r4, #0
 8012070:	d04b      	beq.n	801210a <_malloc_r+0xea>
 8012072:	6823      	ldr	r3, [r4, #0]
 8012074:	4639      	mov	r1, r7
 8012076:	4630      	mov	r0, r6
 8012078:	eb04 0903 	add.w	r9, r4, r3
 801207c:	f000 fb5c 	bl	8012738 <_sbrk_r>
 8012080:	4581      	cmp	r9, r0
 8012082:	d142      	bne.n	801210a <_malloc_r+0xea>
 8012084:	6821      	ldr	r1, [r4, #0]
 8012086:	1a6d      	subs	r5, r5, r1
 8012088:	4629      	mov	r1, r5
 801208a:	4630      	mov	r0, r6
 801208c:	f7ff ffa6 	bl	8011fdc <sbrk_aligned>
 8012090:	3001      	adds	r0, #1
 8012092:	d03a      	beq.n	801210a <_malloc_r+0xea>
 8012094:	6823      	ldr	r3, [r4, #0]
 8012096:	442b      	add	r3, r5
 8012098:	6023      	str	r3, [r4, #0]
 801209a:	f8d8 3000 	ldr.w	r3, [r8]
 801209e:	685a      	ldr	r2, [r3, #4]
 80120a0:	bb62      	cbnz	r2, 80120fc <_malloc_r+0xdc>
 80120a2:	f8c8 7000 	str.w	r7, [r8]
 80120a6:	e00f      	b.n	80120c8 <_malloc_r+0xa8>
 80120a8:	6822      	ldr	r2, [r4, #0]
 80120aa:	1b52      	subs	r2, r2, r5
 80120ac:	d420      	bmi.n	80120f0 <_malloc_r+0xd0>
 80120ae:	2a0b      	cmp	r2, #11
 80120b0:	d917      	bls.n	80120e2 <_malloc_r+0xc2>
 80120b2:	1961      	adds	r1, r4, r5
 80120b4:	42a3      	cmp	r3, r4
 80120b6:	6025      	str	r5, [r4, #0]
 80120b8:	bf18      	it	ne
 80120ba:	6059      	strne	r1, [r3, #4]
 80120bc:	6863      	ldr	r3, [r4, #4]
 80120be:	bf08      	it	eq
 80120c0:	f8c8 1000 	streq.w	r1, [r8]
 80120c4:	5162      	str	r2, [r4, r5]
 80120c6:	604b      	str	r3, [r1, #4]
 80120c8:	4630      	mov	r0, r6
 80120ca:	f000 f82f 	bl	801212c <__malloc_unlock>
 80120ce:	f104 000b 	add.w	r0, r4, #11
 80120d2:	1d23      	adds	r3, r4, #4
 80120d4:	f020 0007 	bic.w	r0, r0, #7
 80120d8:	1ac2      	subs	r2, r0, r3
 80120da:	bf1c      	itt	ne
 80120dc:	1a1b      	subne	r3, r3, r0
 80120de:	50a3      	strne	r3, [r4, r2]
 80120e0:	e7af      	b.n	8012042 <_malloc_r+0x22>
 80120e2:	6862      	ldr	r2, [r4, #4]
 80120e4:	42a3      	cmp	r3, r4
 80120e6:	bf0c      	ite	eq
 80120e8:	f8c8 2000 	streq.w	r2, [r8]
 80120ec:	605a      	strne	r2, [r3, #4]
 80120ee:	e7eb      	b.n	80120c8 <_malloc_r+0xa8>
 80120f0:	4623      	mov	r3, r4
 80120f2:	6864      	ldr	r4, [r4, #4]
 80120f4:	e7ae      	b.n	8012054 <_malloc_r+0x34>
 80120f6:	463c      	mov	r4, r7
 80120f8:	687f      	ldr	r7, [r7, #4]
 80120fa:	e7b6      	b.n	801206a <_malloc_r+0x4a>
 80120fc:	461a      	mov	r2, r3
 80120fe:	685b      	ldr	r3, [r3, #4]
 8012100:	42a3      	cmp	r3, r4
 8012102:	d1fb      	bne.n	80120fc <_malloc_r+0xdc>
 8012104:	2300      	movs	r3, #0
 8012106:	6053      	str	r3, [r2, #4]
 8012108:	e7de      	b.n	80120c8 <_malloc_r+0xa8>
 801210a:	230c      	movs	r3, #12
 801210c:	6033      	str	r3, [r6, #0]
 801210e:	4630      	mov	r0, r6
 8012110:	f000 f80c 	bl	801212c <__malloc_unlock>
 8012114:	e794      	b.n	8012040 <_malloc_r+0x20>
 8012116:	6005      	str	r5, [r0, #0]
 8012118:	e7d6      	b.n	80120c8 <_malloc_r+0xa8>
 801211a:	bf00      	nop
 801211c:	240bc4a8 	.word	0x240bc4a8

08012120 <__malloc_lock>:
 8012120:	4801      	ldr	r0, [pc, #4]	@ (8012128 <__malloc_lock+0x8>)
 8012122:	f7ff bf0f 	b.w	8011f44 <__retarget_lock_acquire_recursive>
 8012126:	bf00      	nop
 8012128:	240bc4a0 	.word	0x240bc4a0

0801212c <__malloc_unlock>:
 801212c:	4801      	ldr	r0, [pc, #4]	@ (8012134 <__malloc_unlock+0x8>)
 801212e:	f7ff bf0a 	b.w	8011f46 <__retarget_lock_release_recursive>
 8012132:	bf00      	nop
 8012134:	240bc4a0 	.word	0x240bc4a0

08012138 <__ssputs_r>:
 8012138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801213c:	688e      	ldr	r6, [r1, #8]
 801213e:	461f      	mov	r7, r3
 8012140:	42be      	cmp	r6, r7
 8012142:	680b      	ldr	r3, [r1, #0]
 8012144:	4682      	mov	sl, r0
 8012146:	460c      	mov	r4, r1
 8012148:	4690      	mov	r8, r2
 801214a:	d82d      	bhi.n	80121a8 <__ssputs_r+0x70>
 801214c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012150:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012154:	d026      	beq.n	80121a4 <__ssputs_r+0x6c>
 8012156:	6965      	ldr	r5, [r4, #20]
 8012158:	6909      	ldr	r1, [r1, #16]
 801215a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801215e:	eba3 0901 	sub.w	r9, r3, r1
 8012162:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012166:	1c7b      	adds	r3, r7, #1
 8012168:	444b      	add	r3, r9
 801216a:	106d      	asrs	r5, r5, #1
 801216c:	429d      	cmp	r5, r3
 801216e:	bf38      	it	cc
 8012170:	461d      	movcc	r5, r3
 8012172:	0553      	lsls	r3, r2, #21
 8012174:	d527      	bpl.n	80121c6 <__ssputs_r+0x8e>
 8012176:	4629      	mov	r1, r5
 8012178:	f7ff ff52 	bl	8012020 <_malloc_r>
 801217c:	4606      	mov	r6, r0
 801217e:	b360      	cbz	r0, 80121da <__ssputs_r+0xa2>
 8012180:	6921      	ldr	r1, [r4, #16]
 8012182:	464a      	mov	r2, r9
 8012184:	f000 fae8 	bl	8012758 <memcpy>
 8012188:	89a3      	ldrh	r3, [r4, #12]
 801218a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801218e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012192:	81a3      	strh	r3, [r4, #12]
 8012194:	6126      	str	r6, [r4, #16]
 8012196:	6165      	str	r5, [r4, #20]
 8012198:	444e      	add	r6, r9
 801219a:	eba5 0509 	sub.w	r5, r5, r9
 801219e:	6026      	str	r6, [r4, #0]
 80121a0:	60a5      	str	r5, [r4, #8]
 80121a2:	463e      	mov	r6, r7
 80121a4:	42be      	cmp	r6, r7
 80121a6:	d900      	bls.n	80121aa <__ssputs_r+0x72>
 80121a8:	463e      	mov	r6, r7
 80121aa:	6820      	ldr	r0, [r4, #0]
 80121ac:	4632      	mov	r2, r6
 80121ae:	4641      	mov	r1, r8
 80121b0:	f000 faa8 	bl	8012704 <memmove>
 80121b4:	68a3      	ldr	r3, [r4, #8]
 80121b6:	1b9b      	subs	r3, r3, r6
 80121b8:	60a3      	str	r3, [r4, #8]
 80121ba:	6823      	ldr	r3, [r4, #0]
 80121bc:	4433      	add	r3, r6
 80121be:	6023      	str	r3, [r4, #0]
 80121c0:	2000      	movs	r0, #0
 80121c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121c6:	462a      	mov	r2, r5
 80121c8:	f000 fad4 	bl	8012774 <_realloc_r>
 80121cc:	4606      	mov	r6, r0
 80121ce:	2800      	cmp	r0, #0
 80121d0:	d1e0      	bne.n	8012194 <__ssputs_r+0x5c>
 80121d2:	6921      	ldr	r1, [r4, #16]
 80121d4:	4650      	mov	r0, sl
 80121d6:	f7ff feb7 	bl	8011f48 <_free_r>
 80121da:	230c      	movs	r3, #12
 80121dc:	f8ca 3000 	str.w	r3, [sl]
 80121e0:	89a3      	ldrh	r3, [r4, #12]
 80121e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121e6:	81a3      	strh	r3, [r4, #12]
 80121e8:	f04f 30ff 	mov.w	r0, #4294967295
 80121ec:	e7e9      	b.n	80121c2 <__ssputs_r+0x8a>
	...

080121f0 <_svfiprintf_r>:
 80121f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121f4:	4698      	mov	r8, r3
 80121f6:	898b      	ldrh	r3, [r1, #12]
 80121f8:	061b      	lsls	r3, r3, #24
 80121fa:	b09d      	sub	sp, #116	@ 0x74
 80121fc:	4607      	mov	r7, r0
 80121fe:	460d      	mov	r5, r1
 8012200:	4614      	mov	r4, r2
 8012202:	d510      	bpl.n	8012226 <_svfiprintf_r+0x36>
 8012204:	690b      	ldr	r3, [r1, #16]
 8012206:	b973      	cbnz	r3, 8012226 <_svfiprintf_r+0x36>
 8012208:	2140      	movs	r1, #64	@ 0x40
 801220a:	f7ff ff09 	bl	8012020 <_malloc_r>
 801220e:	6028      	str	r0, [r5, #0]
 8012210:	6128      	str	r0, [r5, #16]
 8012212:	b930      	cbnz	r0, 8012222 <_svfiprintf_r+0x32>
 8012214:	230c      	movs	r3, #12
 8012216:	603b      	str	r3, [r7, #0]
 8012218:	f04f 30ff 	mov.w	r0, #4294967295
 801221c:	b01d      	add	sp, #116	@ 0x74
 801221e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012222:	2340      	movs	r3, #64	@ 0x40
 8012224:	616b      	str	r3, [r5, #20]
 8012226:	2300      	movs	r3, #0
 8012228:	9309      	str	r3, [sp, #36]	@ 0x24
 801222a:	2320      	movs	r3, #32
 801222c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012230:	f8cd 800c 	str.w	r8, [sp, #12]
 8012234:	2330      	movs	r3, #48	@ 0x30
 8012236:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80123d4 <_svfiprintf_r+0x1e4>
 801223a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801223e:	f04f 0901 	mov.w	r9, #1
 8012242:	4623      	mov	r3, r4
 8012244:	469a      	mov	sl, r3
 8012246:	f813 2b01 	ldrb.w	r2, [r3], #1
 801224a:	b10a      	cbz	r2, 8012250 <_svfiprintf_r+0x60>
 801224c:	2a25      	cmp	r2, #37	@ 0x25
 801224e:	d1f9      	bne.n	8012244 <_svfiprintf_r+0x54>
 8012250:	ebba 0b04 	subs.w	fp, sl, r4
 8012254:	d00b      	beq.n	801226e <_svfiprintf_r+0x7e>
 8012256:	465b      	mov	r3, fp
 8012258:	4622      	mov	r2, r4
 801225a:	4629      	mov	r1, r5
 801225c:	4638      	mov	r0, r7
 801225e:	f7ff ff6b 	bl	8012138 <__ssputs_r>
 8012262:	3001      	adds	r0, #1
 8012264:	f000 80a7 	beq.w	80123b6 <_svfiprintf_r+0x1c6>
 8012268:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801226a:	445a      	add	r2, fp
 801226c:	9209      	str	r2, [sp, #36]	@ 0x24
 801226e:	f89a 3000 	ldrb.w	r3, [sl]
 8012272:	2b00      	cmp	r3, #0
 8012274:	f000 809f 	beq.w	80123b6 <_svfiprintf_r+0x1c6>
 8012278:	2300      	movs	r3, #0
 801227a:	f04f 32ff 	mov.w	r2, #4294967295
 801227e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012282:	f10a 0a01 	add.w	sl, sl, #1
 8012286:	9304      	str	r3, [sp, #16]
 8012288:	9307      	str	r3, [sp, #28]
 801228a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801228e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012290:	4654      	mov	r4, sl
 8012292:	2205      	movs	r2, #5
 8012294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012298:	484e      	ldr	r0, [pc, #312]	@ (80123d4 <_svfiprintf_r+0x1e4>)
 801229a:	f7ee f829 	bl	80002f0 <memchr>
 801229e:	9a04      	ldr	r2, [sp, #16]
 80122a0:	b9d8      	cbnz	r0, 80122da <_svfiprintf_r+0xea>
 80122a2:	06d0      	lsls	r0, r2, #27
 80122a4:	bf44      	itt	mi
 80122a6:	2320      	movmi	r3, #32
 80122a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80122ac:	0711      	lsls	r1, r2, #28
 80122ae:	bf44      	itt	mi
 80122b0:	232b      	movmi	r3, #43	@ 0x2b
 80122b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80122b6:	f89a 3000 	ldrb.w	r3, [sl]
 80122ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80122bc:	d015      	beq.n	80122ea <_svfiprintf_r+0xfa>
 80122be:	9a07      	ldr	r2, [sp, #28]
 80122c0:	4654      	mov	r4, sl
 80122c2:	2000      	movs	r0, #0
 80122c4:	f04f 0c0a 	mov.w	ip, #10
 80122c8:	4621      	mov	r1, r4
 80122ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122ce:	3b30      	subs	r3, #48	@ 0x30
 80122d0:	2b09      	cmp	r3, #9
 80122d2:	d94b      	bls.n	801236c <_svfiprintf_r+0x17c>
 80122d4:	b1b0      	cbz	r0, 8012304 <_svfiprintf_r+0x114>
 80122d6:	9207      	str	r2, [sp, #28]
 80122d8:	e014      	b.n	8012304 <_svfiprintf_r+0x114>
 80122da:	eba0 0308 	sub.w	r3, r0, r8
 80122de:	fa09 f303 	lsl.w	r3, r9, r3
 80122e2:	4313      	orrs	r3, r2
 80122e4:	9304      	str	r3, [sp, #16]
 80122e6:	46a2      	mov	sl, r4
 80122e8:	e7d2      	b.n	8012290 <_svfiprintf_r+0xa0>
 80122ea:	9b03      	ldr	r3, [sp, #12]
 80122ec:	1d19      	adds	r1, r3, #4
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	9103      	str	r1, [sp, #12]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	bfbb      	ittet	lt
 80122f6:	425b      	neglt	r3, r3
 80122f8:	f042 0202 	orrlt.w	r2, r2, #2
 80122fc:	9307      	strge	r3, [sp, #28]
 80122fe:	9307      	strlt	r3, [sp, #28]
 8012300:	bfb8      	it	lt
 8012302:	9204      	strlt	r2, [sp, #16]
 8012304:	7823      	ldrb	r3, [r4, #0]
 8012306:	2b2e      	cmp	r3, #46	@ 0x2e
 8012308:	d10a      	bne.n	8012320 <_svfiprintf_r+0x130>
 801230a:	7863      	ldrb	r3, [r4, #1]
 801230c:	2b2a      	cmp	r3, #42	@ 0x2a
 801230e:	d132      	bne.n	8012376 <_svfiprintf_r+0x186>
 8012310:	9b03      	ldr	r3, [sp, #12]
 8012312:	1d1a      	adds	r2, r3, #4
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	9203      	str	r2, [sp, #12]
 8012318:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801231c:	3402      	adds	r4, #2
 801231e:	9305      	str	r3, [sp, #20]
 8012320:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80123e4 <_svfiprintf_r+0x1f4>
 8012324:	7821      	ldrb	r1, [r4, #0]
 8012326:	2203      	movs	r2, #3
 8012328:	4650      	mov	r0, sl
 801232a:	f7ed ffe1 	bl	80002f0 <memchr>
 801232e:	b138      	cbz	r0, 8012340 <_svfiprintf_r+0x150>
 8012330:	9b04      	ldr	r3, [sp, #16]
 8012332:	eba0 000a 	sub.w	r0, r0, sl
 8012336:	2240      	movs	r2, #64	@ 0x40
 8012338:	4082      	lsls	r2, r0
 801233a:	4313      	orrs	r3, r2
 801233c:	3401      	adds	r4, #1
 801233e:	9304      	str	r3, [sp, #16]
 8012340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012344:	4824      	ldr	r0, [pc, #144]	@ (80123d8 <_svfiprintf_r+0x1e8>)
 8012346:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801234a:	2206      	movs	r2, #6
 801234c:	f7ed ffd0 	bl	80002f0 <memchr>
 8012350:	2800      	cmp	r0, #0
 8012352:	d036      	beq.n	80123c2 <_svfiprintf_r+0x1d2>
 8012354:	4b21      	ldr	r3, [pc, #132]	@ (80123dc <_svfiprintf_r+0x1ec>)
 8012356:	bb1b      	cbnz	r3, 80123a0 <_svfiprintf_r+0x1b0>
 8012358:	9b03      	ldr	r3, [sp, #12]
 801235a:	3307      	adds	r3, #7
 801235c:	f023 0307 	bic.w	r3, r3, #7
 8012360:	3308      	adds	r3, #8
 8012362:	9303      	str	r3, [sp, #12]
 8012364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012366:	4433      	add	r3, r6
 8012368:	9309      	str	r3, [sp, #36]	@ 0x24
 801236a:	e76a      	b.n	8012242 <_svfiprintf_r+0x52>
 801236c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012370:	460c      	mov	r4, r1
 8012372:	2001      	movs	r0, #1
 8012374:	e7a8      	b.n	80122c8 <_svfiprintf_r+0xd8>
 8012376:	2300      	movs	r3, #0
 8012378:	3401      	adds	r4, #1
 801237a:	9305      	str	r3, [sp, #20]
 801237c:	4619      	mov	r1, r3
 801237e:	f04f 0c0a 	mov.w	ip, #10
 8012382:	4620      	mov	r0, r4
 8012384:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012388:	3a30      	subs	r2, #48	@ 0x30
 801238a:	2a09      	cmp	r2, #9
 801238c:	d903      	bls.n	8012396 <_svfiprintf_r+0x1a6>
 801238e:	2b00      	cmp	r3, #0
 8012390:	d0c6      	beq.n	8012320 <_svfiprintf_r+0x130>
 8012392:	9105      	str	r1, [sp, #20]
 8012394:	e7c4      	b.n	8012320 <_svfiprintf_r+0x130>
 8012396:	fb0c 2101 	mla	r1, ip, r1, r2
 801239a:	4604      	mov	r4, r0
 801239c:	2301      	movs	r3, #1
 801239e:	e7f0      	b.n	8012382 <_svfiprintf_r+0x192>
 80123a0:	ab03      	add	r3, sp, #12
 80123a2:	9300      	str	r3, [sp, #0]
 80123a4:	462a      	mov	r2, r5
 80123a6:	4b0e      	ldr	r3, [pc, #56]	@ (80123e0 <_svfiprintf_r+0x1f0>)
 80123a8:	a904      	add	r1, sp, #16
 80123aa:	4638      	mov	r0, r7
 80123ac:	f3af 8000 	nop.w
 80123b0:	1c42      	adds	r2, r0, #1
 80123b2:	4606      	mov	r6, r0
 80123b4:	d1d6      	bne.n	8012364 <_svfiprintf_r+0x174>
 80123b6:	89ab      	ldrh	r3, [r5, #12]
 80123b8:	065b      	lsls	r3, r3, #25
 80123ba:	f53f af2d 	bmi.w	8012218 <_svfiprintf_r+0x28>
 80123be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80123c0:	e72c      	b.n	801221c <_svfiprintf_r+0x2c>
 80123c2:	ab03      	add	r3, sp, #12
 80123c4:	9300      	str	r3, [sp, #0]
 80123c6:	462a      	mov	r2, r5
 80123c8:	4b05      	ldr	r3, [pc, #20]	@ (80123e0 <_svfiprintf_r+0x1f0>)
 80123ca:	a904      	add	r1, sp, #16
 80123cc:	4638      	mov	r0, r7
 80123ce:	f000 f879 	bl	80124c4 <_printf_i>
 80123d2:	e7ed      	b.n	80123b0 <_svfiprintf_r+0x1c0>
 80123d4:	08012bd0 	.word	0x08012bd0
 80123d8:	08012bda 	.word	0x08012bda
 80123dc:	00000000 	.word	0x00000000
 80123e0:	08012139 	.word	0x08012139
 80123e4:	08012bd6 	.word	0x08012bd6

080123e8 <_printf_common>:
 80123e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123ec:	4616      	mov	r6, r2
 80123ee:	4698      	mov	r8, r3
 80123f0:	688a      	ldr	r2, [r1, #8]
 80123f2:	690b      	ldr	r3, [r1, #16]
 80123f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80123f8:	4293      	cmp	r3, r2
 80123fa:	bfb8      	it	lt
 80123fc:	4613      	movlt	r3, r2
 80123fe:	6033      	str	r3, [r6, #0]
 8012400:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012404:	4607      	mov	r7, r0
 8012406:	460c      	mov	r4, r1
 8012408:	b10a      	cbz	r2, 801240e <_printf_common+0x26>
 801240a:	3301      	adds	r3, #1
 801240c:	6033      	str	r3, [r6, #0]
 801240e:	6823      	ldr	r3, [r4, #0]
 8012410:	0699      	lsls	r1, r3, #26
 8012412:	bf42      	ittt	mi
 8012414:	6833      	ldrmi	r3, [r6, #0]
 8012416:	3302      	addmi	r3, #2
 8012418:	6033      	strmi	r3, [r6, #0]
 801241a:	6825      	ldr	r5, [r4, #0]
 801241c:	f015 0506 	ands.w	r5, r5, #6
 8012420:	d106      	bne.n	8012430 <_printf_common+0x48>
 8012422:	f104 0a19 	add.w	sl, r4, #25
 8012426:	68e3      	ldr	r3, [r4, #12]
 8012428:	6832      	ldr	r2, [r6, #0]
 801242a:	1a9b      	subs	r3, r3, r2
 801242c:	42ab      	cmp	r3, r5
 801242e:	dc26      	bgt.n	801247e <_printf_common+0x96>
 8012430:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012434:	6822      	ldr	r2, [r4, #0]
 8012436:	3b00      	subs	r3, #0
 8012438:	bf18      	it	ne
 801243a:	2301      	movne	r3, #1
 801243c:	0692      	lsls	r2, r2, #26
 801243e:	d42b      	bmi.n	8012498 <_printf_common+0xb0>
 8012440:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012444:	4641      	mov	r1, r8
 8012446:	4638      	mov	r0, r7
 8012448:	47c8      	blx	r9
 801244a:	3001      	adds	r0, #1
 801244c:	d01e      	beq.n	801248c <_printf_common+0xa4>
 801244e:	6823      	ldr	r3, [r4, #0]
 8012450:	6922      	ldr	r2, [r4, #16]
 8012452:	f003 0306 	and.w	r3, r3, #6
 8012456:	2b04      	cmp	r3, #4
 8012458:	bf02      	ittt	eq
 801245a:	68e5      	ldreq	r5, [r4, #12]
 801245c:	6833      	ldreq	r3, [r6, #0]
 801245e:	1aed      	subeq	r5, r5, r3
 8012460:	68a3      	ldr	r3, [r4, #8]
 8012462:	bf0c      	ite	eq
 8012464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012468:	2500      	movne	r5, #0
 801246a:	4293      	cmp	r3, r2
 801246c:	bfc4      	itt	gt
 801246e:	1a9b      	subgt	r3, r3, r2
 8012470:	18ed      	addgt	r5, r5, r3
 8012472:	2600      	movs	r6, #0
 8012474:	341a      	adds	r4, #26
 8012476:	42b5      	cmp	r5, r6
 8012478:	d11a      	bne.n	80124b0 <_printf_common+0xc8>
 801247a:	2000      	movs	r0, #0
 801247c:	e008      	b.n	8012490 <_printf_common+0xa8>
 801247e:	2301      	movs	r3, #1
 8012480:	4652      	mov	r2, sl
 8012482:	4641      	mov	r1, r8
 8012484:	4638      	mov	r0, r7
 8012486:	47c8      	blx	r9
 8012488:	3001      	adds	r0, #1
 801248a:	d103      	bne.n	8012494 <_printf_common+0xac>
 801248c:	f04f 30ff 	mov.w	r0, #4294967295
 8012490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012494:	3501      	adds	r5, #1
 8012496:	e7c6      	b.n	8012426 <_printf_common+0x3e>
 8012498:	18e1      	adds	r1, r4, r3
 801249a:	1c5a      	adds	r2, r3, #1
 801249c:	2030      	movs	r0, #48	@ 0x30
 801249e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80124a2:	4422      	add	r2, r4
 80124a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80124a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80124ac:	3302      	adds	r3, #2
 80124ae:	e7c7      	b.n	8012440 <_printf_common+0x58>
 80124b0:	2301      	movs	r3, #1
 80124b2:	4622      	mov	r2, r4
 80124b4:	4641      	mov	r1, r8
 80124b6:	4638      	mov	r0, r7
 80124b8:	47c8      	blx	r9
 80124ba:	3001      	adds	r0, #1
 80124bc:	d0e6      	beq.n	801248c <_printf_common+0xa4>
 80124be:	3601      	adds	r6, #1
 80124c0:	e7d9      	b.n	8012476 <_printf_common+0x8e>
	...

080124c4 <_printf_i>:
 80124c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80124c8:	7e0f      	ldrb	r7, [r1, #24]
 80124ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80124cc:	2f78      	cmp	r7, #120	@ 0x78
 80124ce:	4691      	mov	r9, r2
 80124d0:	4680      	mov	r8, r0
 80124d2:	460c      	mov	r4, r1
 80124d4:	469a      	mov	sl, r3
 80124d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80124da:	d807      	bhi.n	80124ec <_printf_i+0x28>
 80124dc:	2f62      	cmp	r7, #98	@ 0x62
 80124de:	d80a      	bhi.n	80124f6 <_printf_i+0x32>
 80124e0:	2f00      	cmp	r7, #0
 80124e2:	f000 80d2 	beq.w	801268a <_printf_i+0x1c6>
 80124e6:	2f58      	cmp	r7, #88	@ 0x58
 80124e8:	f000 80b9 	beq.w	801265e <_printf_i+0x19a>
 80124ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80124f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80124f4:	e03a      	b.n	801256c <_printf_i+0xa8>
 80124f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80124fa:	2b15      	cmp	r3, #21
 80124fc:	d8f6      	bhi.n	80124ec <_printf_i+0x28>
 80124fe:	a101      	add	r1, pc, #4	@ (adr r1, 8012504 <_printf_i+0x40>)
 8012500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012504:	0801255d 	.word	0x0801255d
 8012508:	08012571 	.word	0x08012571
 801250c:	080124ed 	.word	0x080124ed
 8012510:	080124ed 	.word	0x080124ed
 8012514:	080124ed 	.word	0x080124ed
 8012518:	080124ed 	.word	0x080124ed
 801251c:	08012571 	.word	0x08012571
 8012520:	080124ed 	.word	0x080124ed
 8012524:	080124ed 	.word	0x080124ed
 8012528:	080124ed 	.word	0x080124ed
 801252c:	080124ed 	.word	0x080124ed
 8012530:	08012671 	.word	0x08012671
 8012534:	0801259b 	.word	0x0801259b
 8012538:	0801262b 	.word	0x0801262b
 801253c:	080124ed 	.word	0x080124ed
 8012540:	080124ed 	.word	0x080124ed
 8012544:	08012693 	.word	0x08012693
 8012548:	080124ed 	.word	0x080124ed
 801254c:	0801259b 	.word	0x0801259b
 8012550:	080124ed 	.word	0x080124ed
 8012554:	080124ed 	.word	0x080124ed
 8012558:	08012633 	.word	0x08012633
 801255c:	6833      	ldr	r3, [r6, #0]
 801255e:	1d1a      	adds	r2, r3, #4
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	6032      	str	r2, [r6, #0]
 8012564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012568:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801256c:	2301      	movs	r3, #1
 801256e:	e09d      	b.n	80126ac <_printf_i+0x1e8>
 8012570:	6833      	ldr	r3, [r6, #0]
 8012572:	6820      	ldr	r0, [r4, #0]
 8012574:	1d19      	adds	r1, r3, #4
 8012576:	6031      	str	r1, [r6, #0]
 8012578:	0606      	lsls	r6, r0, #24
 801257a:	d501      	bpl.n	8012580 <_printf_i+0xbc>
 801257c:	681d      	ldr	r5, [r3, #0]
 801257e:	e003      	b.n	8012588 <_printf_i+0xc4>
 8012580:	0645      	lsls	r5, r0, #25
 8012582:	d5fb      	bpl.n	801257c <_printf_i+0xb8>
 8012584:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012588:	2d00      	cmp	r5, #0
 801258a:	da03      	bge.n	8012594 <_printf_i+0xd0>
 801258c:	232d      	movs	r3, #45	@ 0x2d
 801258e:	426d      	negs	r5, r5
 8012590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012594:	4859      	ldr	r0, [pc, #356]	@ (80126fc <_printf_i+0x238>)
 8012596:	230a      	movs	r3, #10
 8012598:	e011      	b.n	80125be <_printf_i+0xfa>
 801259a:	6821      	ldr	r1, [r4, #0]
 801259c:	6833      	ldr	r3, [r6, #0]
 801259e:	0608      	lsls	r0, r1, #24
 80125a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80125a4:	d402      	bmi.n	80125ac <_printf_i+0xe8>
 80125a6:	0649      	lsls	r1, r1, #25
 80125a8:	bf48      	it	mi
 80125aa:	b2ad      	uxthmi	r5, r5
 80125ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80125ae:	4853      	ldr	r0, [pc, #332]	@ (80126fc <_printf_i+0x238>)
 80125b0:	6033      	str	r3, [r6, #0]
 80125b2:	bf14      	ite	ne
 80125b4:	230a      	movne	r3, #10
 80125b6:	2308      	moveq	r3, #8
 80125b8:	2100      	movs	r1, #0
 80125ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80125be:	6866      	ldr	r6, [r4, #4]
 80125c0:	60a6      	str	r6, [r4, #8]
 80125c2:	2e00      	cmp	r6, #0
 80125c4:	bfa2      	ittt	ge
 80125c6:	6821      	ldrge	r1, [r4, #0]
 80125c8:	f021 0104 	bicge.w	r1, r1, #4
 80125cc:	6021      	strge	r1, [r4, #0]
 80125ce:	b90d      	cbnz	r5, 80125d4 <_printf_i+0x110>
 80125d0:	2e00      	cmp	r6, #0
 80125d2:	d04b      	beq.n	801266c <_printf_i+0x1a8>
 80125d4:	4616      	mov	r6, r2
 80125d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80125da:	fb03 5711 	mls	r7, r3, r1, r5
 80125de:	5dc7      	ldrb	r7, [r0, r7]
 80125e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80125e4:	462f      	mov	r7, r5
 80125e6:	42bb      	cmp	r3, r7
 80125e8:	460d      	mov	r5, r1
 80125ea:	d9f4      	bls.n	80125d6 <_printf_i+0x112>
 80125ec:	2b08      	cmp	r3, #8
 80125ee:	d10b      	bne.n	8012608 <_printf_i+0x144>
 80125f0:	6823      	ldr	r3, [r4, #0]
 80125f2:	07df      	lsls	r7, r3, #31
 80125f4:	d508      	bpl.n	8012608 <_printf_i+0x144>
 80125f6:	6923      	ldr	r3, [r4, #16]
 80125f8:	6861      	ldr	r1, [r4, #4]
 80125fa:	4299      	cmp	r1, r3
 80125fc:	bfde      	ittt	le
 80125fe:	2330      	movle	r3, #48	@ 0x30
 8012600:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012604:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012608:	1b92      	subs	r2, r2, r6
 801260a:	6122      	str	r2, [r4, #16]
 801260c:	f8cd a000 	str.w	sl, [sp]
 8012610:	464b      	mov	r3, r9
 8012612:	aa03      	add	r2, sp, #12
 8012614:	4621      	mov	r1, r4
 8012616:	4640      	mov	r0, r8
 8012618:	f7ff fee6 	bl	80123e8 <_printf_common>
 801261c:	3001      	adds	r0, #1
 801261e:	d14a      	bne.n	80126b6 <_printf_i+0x1f2>
 8012620:	f04f 30ff 	mov.w	r0, #4294967295
 8012624:	b004      	add	sp, #16
 8012626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801262a:	6823      	ldr	r3, [r4, #0]
 801262c:	f043 0320 	orr.w	r3, r3, #32
 8012630:	6023      	str	r3, [r4, #0]
 8012632:	4833      	ldr	r0, [pc, #204]	@ (8012700 <_printf_i+0x23c>)
 8012634:	2778      	movs	r7, #120	@ 0x78
 8012636:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801263a:	6823      	ldr	r3, [r4, #0]
 801263c:	6831      	ldr	r1, [r6, #0]
 801263e:	061f      	lsls	r7, r3, #24
 8012640:	f851 5b04 	ldr.w	r5, [r1], #4
 8012644:	d402      	bmi.n	801264c <_printf_i+0x188>
 8012646:	065f      	lsls	r7, r3, #25
 8012648:	bf48      	it	mi
 801264a:	b2ad      	uxthmi	r5, r5
 801264c:	6031      	str	r1, [r6, #0]
 801264e:	07d9      	lsls	r1, r3, #31
 8012650:	bf44      	itt	mi
 8012652:	f043 0320 	orrmi.w	r3, r3, #32
 8012656:	6023      	strmi	r3, [r4, #0]
 8012658:	b11d      	cbz	r5, 8012662 <_printf_i+0x19e>
 801265a:	2310      	movs	r3, #16
 801265c:	e7ac      	b.n	80125b8 <_printf_i+0xf4>
 801265e:	4827      	ldr	r0, [pc, #156]	@ (80126fc <_printf_i+0x238>)
 8012660:	e7e9      	b.n	8012636 <_printf_i+0x172>
 8012662:	6823      	ldr	r3, [r4, #0]
 8012664:	f023 0320 	bic.w	r3, r3, #32
 8012668:	6023      	str	r3, [r4, #0]
 801266a:	e7f6      	b.n	801265a <_printf_i+0x196>
 801266c:	4616      	mov	r6, r2
 801266e:	e7bd      	b.n	80125ec <_printf_i+0x128>
 8012670:	6833      	ldr	r3, [r6, #0]
 8012672:	6825      	ldr	r5, [r4, #0]
 8012674:	6961      	ldr	r1, [r4, #20]
 8012676:	1d18      	adds	r0, r3, #4
 8012678:	6030      	str	r0, [r6, #0]
 801267a:	062e      	lsls	r6, r5, #24
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	d501      	bpl.n	8012684 <_printf_i+0x1c0>
 8012680:	6019      	str	r1, [r3, #0]
 8012682:	e002      	b.n	801268a <_printf_i+0x1c6>
 8012684:	0668      	lsls	r0, r5, #25
 8012686:	d5fb      	bpl.n	8012680 <_printf_i+0x1bc>
 8012688:	8019      	strh	r1, [r3, #0]
 801268a:	2300      	movs	r3, #0
 801268c:	6123      	str	r3, [r4, #16]
 801268e:	4616      	mov	r6, r2
 8012690:	e7bc      	b.n	801260c <_printf_i+0x148>
 8012692:	6833      	ldr	r3, [r6, #0]
 8012694:	1d1a      	adds	r2, r3, #4
 8012696:	6032      	str	r2, [r6, #0]
 8012698:	681e      	ldr	r6, [r3, #0]
 801269a:	6862      	ldr	r2, [r4, #4]
 801269c:	2100      	movs	r1, #0
 801269e:	4630      	mov	r0, r6
 80126a0:	f7ed fe26 	bl	80002f0 <memchr>
 80126a4:	b108      	cbz	r0, 80126aa <_printf_i+0x1e6>
 80126a6:	1b80      	subs	r0, r0, r6
 80126a8:	6060      	str	r0, [r4, #4]
 80126aa:	6863      	ldr	r3, [r4, #4]
 80126ac:	6123      	str	r3, [r4, #16]
 80126ae:	2300      	movs	r3, #0
 80126b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80126b4:	e7aa      	b.n	801260c <_printf_i+0x148>
 80126b6:	6923      	ldr	r3, [r4, #16]
 80126b8:	4632      	mov	r2, r6
 80126ba:	4649      	mov	r1, r9
 80126bc:	4640      	mov	r0, r8
 80126be:	47d0      	blx	sl
 80126c0:	3001      	adds	r0, #1
 80126c2:	d0ad      	beq.n	8012620 <_printf_i+0x15c>
 80126c4:	6823      	ldr	r3, [r4, #0]
 80126c6:	079b      	lsls	r3, r3, #30
 80126c8:	d413      	bmi.n	80126f2 <_printf_i+0x22e>
 80126ca:	68e0      	ldr	r0, [r4, #12]
 80126cc:	9b03      	ldr	r3, [sp, #12]
 80126ce:	4298      	cmp	r0, r3
 80126d0:	bfb8      	it	lt
 80126d2:	4618      	movlt	r0, r3
 80126d4:	e7a6      	b.n	8012624 <_printf_i+0x160>
 80126d6:	2301      	movs	r3, #1
 80126d8:	4632      	mov	r2, r6
 80126da:	4649      	mov	r1, r9
 80126dc:	4640      	mov	r0, r8
 80126de:	47d0      	blx	sl
 80126e0:	3001      	adds	r0, #1
 80126e2:	d09d      	beq.n	8012620 <_printf_i+0x15c>
 80126e4:	3501      	adds	r5, #1
 80126e6:	68e3      	ldr	r3, [r4, #12]
 80126e8:	9903      	ldr	r1, [sp, #12]
 80126ea:	1a5b      	subs	r3, r3, r1
 80126ec:	42ab      	cmp	r3, r5
 80126ee:	dcf2      	bgt.n	80126d6 <_printf_i+0x212>
 80126f0:	e7eb      	b.n	80126ca <_printf_i+0x206>
 80126f2:	2500      	movs	r5, #0
 80126f4:	f104 0619 	add.w	r6, r4, #25
 80126f8:	e7f5      	b.n	80126e6 <_printf_i+0x222>
 80126fa:	bf00      	nop
 80126fc:	08012be1 	.word	0x08012be1
 8012700:	08012bf2 	.word	0x08012bf2

08012704 <memmove>:
 8012704:	4288      	cmp	r0, r1
 8012706:	b510      	push	{r4, lr}
 8012708:	eb01 0402 	add.w	r4, r1, r2
 801270c:	d902      	bls.n	8012714 <memmove+0x10>
 801270e:	4284      	cmp	r4, r0
 8012710:	4623      	mov	r3, r4
 8012712:	d807      	bhi.n	8012724 <memmove+0x20>
 8012714:	1e43      	subs	r3, r0, #1
 8012716:	42a1      	cmp	r1, r4
 8012718:	d008      	beq.n	801272c <memmove+0x28>
 801271a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801271e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012722:	e7f8      	b.n	8012716 <memmove+0x12>
 8012724:	4402      	add	r2, r0
 8012726:	4601      	mov	r1, r0
 8012728:	428a      	cmp	r2, r1
 801272a:	d100      	bne.n	801272e <memmove+0x2a>
 801272c:	bd10      	pop	{r4, pc}
 801272e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012736:	e7f7      	b.n	8012728 <memmove+0x24>

08012738 <_sbrk_r>:
 8012738:	b538      	push	{r3, r4, r5, lr}
 801273a:	4d06      	ldr	r5, [pc, #24]	@ (8012754 <_sbrk_r+0x1c>)
 801273c:	2300      	movs	r3, #0
 801273e:	4604      	mov	r4, r0
 8012740:	4608      	mov	r0, r1
 8012742:	602b      	str	r3, [r5, #0]
 8012744:	f7f0 fcb2 	bl	80030ac <_sbrk>
 8012748:	1c43      	adds	r3, r0, #1
 801274a:	d102      	bne.n	8012752 <_sbrk_r+0x1a>
 801274c:	682b      	ldr	r3, [r5, #0]
 801274e:	b103      	cbz	r3, 8012752 <_sbrk_r+0x1a>
 8012750:	6023      	str	r3, [r4, #0]
 8012752:	bd38      	pop	{r3, r4, r5, pc}
 8012754:	240bc49c 	.word	0x240bc49c

08012758 <memcpy>:
 8012758:	440a      	add	r2, r1
 801275a:	4291      	cmp	r1, r2
 801275c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012760:	d100      	bne.n	8012764 <memcpy+0xc>
 8012762:	4770      	bx	lr
 8012764:	b510      	push	{r4, lr}
 8012766:	f811 4b01 	ldrb.w	r4, [r1], #1
 801276a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801276e:	4291      	cmp	r1, r2
 8012770:	d1f9      	bne.n	8012766 <memcpy+0xe>
 8012772:	bd10      	pop	{r4, pc}

08012774 <_realloc_r>:
 8012774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012778:	4680      	mov	r8, r0
 801277a:	4615      	mov	r5, r2
 801277c:	460c      	mov	r4, r1
 801277e:	b921      	cbnz	r1, 801278a <_realloc_r+0x16>
 8012780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012784:	4611      	mov	r1, r2
 8012786:	f7ff bc4b 	b.w	8012020 <_malloc_r>
 801278a:	b92a      	cbnz	r2, 8012798 <_realloc_r+0x24>
 801278c:	f7ff fbdc 	bl	8011f48 <_free_r>
 8012790:	2400      	movs	r4, #0
 8012792:	4620      	mov	r0, r4
 8012794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012798:	f000 f81a 	bl	80127d0 <_malloc_usable_size_r>
 801279c:	4285      	cmp	r5, r0
 801279e:	4606      	mov	r6, r0
 80127a0:	d802      	bhi.n	80127a8 <_realloc_r+0x34>
 80127a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80127a6:	d8f4      	bhi.n	8012792 <_realloc_r+0x1e>
 80127a8:	4629      	mov	r1, r5
 80127aa:	4640      	mov	r0, r8
 80127ac:	f7ff fc38 	bl	8012020 <_malloc_r>
 80127b0:	4607      	mov	r7, r0
 80127b2:	2800      	cmp	r0, #0
 80127b4:	d0ec      	beq.n	8012790 <_realloc_r+0x1c>
 80127b6:	42b5      	cmp	r5, r6
 80127b8:	462a      	mov	r2, r5
 80127ba:	4621      	mov	r1, r4
 80127bc:	bf28      	it	cs
 80127be:	4632      	movcs	r2, r6
 80127c0:	f7ff ffca 	bl	8012758 <memcpy>
 80127c4:	4621      	mov	r1, r4
 80127c6:	4640      	mov	r0, r8
 80127c8:	f7ff fbbe 	bl	8011f48 <_free_r>
 80127cc:	463c      	mov	r4, r7
 80127ce:	e7e0      	b.n	8012792 <_realloc_r+0x1e>

080127d0 <_malloc_usable_size_r>:
 80127d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127d4:	1f18      	subs	r0, r3, #4
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	bfbc      	itt	lt
 80127da:	580b      	ldrlt	r3, [r1, r0]
 80127dc:	18c0      	addlt	r0, r0, r3
 80127de:	4770      	bx	lr

080127e0 <_init>:
 80127e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127e2:	bf00      	nop
 80127e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127e6:	bc08      	pop	{r3}
 80127e8:	469e      	mov	lr, r3
 80127ea:	4770      	bx	lr

080127ec <_fini>:
 80127ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ee:	bf00      	nop
 80127f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127f2:	bc08      	pop	{r3}
 80127f4:	469e      	mov	lr, r3
 80127f6:	4770      	bx	lr
